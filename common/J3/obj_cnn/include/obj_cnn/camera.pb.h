// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera.proto

#ifndef PROTOBUF_camera_2eproto__INCLUDED
#define PROTOBUF_camera_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace minieye {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_camera_2eproto();
void protobuf_AssignDesc_camera_2eproto();
void protobuf_ShutdownFile_camera_2eproto();

class CameraFrameExtendedInfo;
class CameraFrame;
class CamID;
class TransMatrix;
class CameraParam;
class CameraEmbeddedInfo;

enum ImageFormat {
  FORMAT_UNKNOWN = 0,
  GRAY = 1,
  YV12 = 2,
  JPEG = 3,
  PNG = 4,
  CR12 = 5,
  BAD = 6,
  NV12 = 7,
  NV21 = 8,
  BYPASS_ONLY = 9
};
bool ImageFormat_IsValid(int value);
const ImageFormat ImageFormat_MIN = FORMAT_UNKNOWN;
const ImageFormat ImageFormat_MAX = BYPASS_ONLY;
const int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor();
inline const ::std::string& ImageFormat_Name(ImageFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageFormat_descriptor(), value);
}
inline bool ImageFormat_Parse(
    const ::std::string& name, ImageFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageFormat>(
    ImageFormat_descriptor(), name, value);
}
enum CamDirect {
  DIRECT_UNKNOWN = 0,
  FRONT = 1,
  REAR = 2,
  LEFT = 4,
  RIGHT = 8
};
bool CamDirect_IsValid(int value);
const CamDirect CamDirect_MIN = DIRECT_UNKNOWN;
const CamDirect CamDirect_MAX = RIGHT;
const int CamDirect_ARRAYSIZE = CamDirect_MAX + 1;

const ::google::protobuf::EnumDescriptor* CamDirect_descriptor();
inline const ::std::string& CamDirect_Name(CamDirect value) {
  return ::google::protobuf::internal::NameOfEnum(
    CamDirect_descriptor(), value);
}
inline bool CamDirect_Parse(
    const ::std::string& name, CamDirect* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CamDirect>(
    CamDirect_descriptor(), name, value);
}
enum CamFov {
  kFovUnknown = 0,
  kFov30 = 1,
  kFov100 = 2
};
bool CamFov_IsValid(int value);
const CamFov CamFov_MIN = kFovUnknown;
const CamFov CamFov_MAX = kFov100;
const int CamFov_ARRAYSIZE = CamFov_MAX + 1;

const ::google::protobuf::EnumDescriptor* CamFov_descriptor();
inline const ::std::string& CamFov_Name(CamFov value) {
  return ::google::protobuf::internal::NameOfEnum(
    CamFov_descriptor(), value);
}
inline bool CamFov_Parse(
    const ::std::string& name, CamFov* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CamFov>(
    CamFov_descriptor(), name, value);
}
enum ProjectionModel {
  PRJ_MODEL_UNKNOWN = 0,
  FISHEYE = 1,
  MEI = 2,
  PIN_HOLE = 3,
  ATAN = 4,
  DAVIDE_SCARAMUZZA = 5
};
bool ProjectionModel_IsValid(int value);
const ProjectionModel ProjectionModel_MIN = PRJ_MODEL_UNKNOWN;
const ProjectionModel ProjectionModel_MAX = DAVIDE_SCARAMUZZA;
const int ProjectionModel_ARRAYSIZE = ProjectionModel_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProjectionModel_descriptor();
inline const ::std::string& ProjectionModel_Name(ProjectionModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProjectionModel_descriptor(), value);
}
inline bool ProjectionModel_Parse(
    const ::std::string& name, ProjectionModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProjectionModel>(
    ProjectionModel_descriptor(), name, value);
}
// ===================================================================

class CameraFrameExtendedInfo : public ::google::protobuf::Message {
 public:
  CameraFrameExtendedInfo();
  virtual ~CameraFrameExtendedInfo();

  CameraFrameExtendedInfo(const CameraFrameExtendedInfo& from);

  inline CameraFrameExtendedInfo& operator=(const CameraFrameExtendedInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraFrameExtendedInfo& default_instance();

  void Swap(CameraFrameExtendedInfo* other);

  // implements Message ----------------------------------------------

  CameraFrameExtendedInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraFrameExtendedInfo& from);
  void MergeFrom(const CameraFrameExtendedInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seq = 1;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 1;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);

  // optional uint32 frame_type = 2;
  inline bool has_frame_type() const;
  inline void clear_frame_type();
  static const int kFrameTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 frame_type() const;
  inline void set_frame_type(::google::protobuf::uint32 value);

  // optional int32 data_size = 3;
  inline bool has_data_size() const;
  inline void clear_data_size();
  static const int kDataSizeFieldNumber = 3;
  inline ::google::protobuf::int32 data_size() const;
  inline void set_data_size(::google::protobuf::int32 value);

  // optional int32 width = 4;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional uint32 fsync_ads_sec = 6;
  inline bool has_fsync_ads_sec() const;
  inline void clear_fsync_ads_sec();
  static const int kFsyncAdsSecFieldNumber = 6;
  inline ::google::protobuf::uint32 fsync_ads_sec() const;
  inline void set_fsync_ads_sec(::google::protobuf::uint32 value);

  // optional uint32 fsync_ads_nsec = 7;
  inline bool has_fsync_ads_nsec() const;
  inline void clear_fsync_ads_nsec();
  static const int kFsyncAdsNsecFieldNumber = 7;
  inline ::google::protobuf::uint32 fsync_ads_nsec() const;
  inline void set_fsync_ads_nsec(::google::protobuf::uint32 value);

  // optional uint32 fsync_gnss_sec = 8;
  inline bool has_fsync_gnss_sec() const;
  inline void clear_fsync_gnss_sec();
  static const int kFsyncGnssSecFieldNumber = 8;
  inline ::google::protobuf::uint32 fsync_gnss_sec() const;
  inline void set_fsync_gnss_sec(::google::protobuf::uint32 value);

  // optional uint32 fsync_gnss_nsec = 9;
  inline bool has_fsync_gnss_nsec() const;
  inline void clear_fsync_gnss_nsec();
  static const int kFsyncGnssNsecFieldNumber = 9;
  inline ::google::protobuf::uint32 fsync_gnss_nsec() const;
  inline void set_fsync_gnss_nsec(::google::protobuf::uint32 value);

  // optional uint32 exp_start_ads_sec = 10;
  inline bool has_exp_start_ads_sec() const;
  inline void clear_exp_start_ads_sec();
  static const int kExpStartAdsSecFieldNumber = 10;
  inline ::google::protobuf::uint32 exp_start_ads_sec() const;
  inline void set_exp_start_ads_sec(::google::protobuf::uint32 value);

  // optional uint32 exp_start_ads_nsec = 11;
  inline bool has_exp_start_ads_nsec() const;
  inline void clear_exp_start_ads_nsec();
  static const int kExpStartAdsNsecFieldNumber = 11;
  inline ::google::protobuf::uint32 exp_start_ads_nsec() const;
  inline void set_exp_start_ads_nsec(::google::protobuf::uint32 value);

  // optional uint32 exp_start_gnss_sec = 12;
  inline bool has_exp_start_gnss_sec() const;
  inline void clear_exp_start_gnss_sec();
  static const int kExpStartGnssSecFieldNumber = 12;
  inline ::google::protobuf::uint32 exp_start_gnss_sec() const;
  inline void set_exp_start_gnss_sec(::google::protobuf::uint32 value);

  // optional uint32 exp_start_gnss_nsec = 13;
  inline bool has_exp_start_gnss_nsec() const;
  inline void clear_exp_start_gnss_nsec();
  static const int kExpStartGnssNsecFieldNumber = 13;
  inline ::google::protobuf::uint32 exp_start_gnss_nsec() const;
  inline void set_exp_start_gnss_nsec(::google::protobuf::uint32 value);

  // optional uint32 exp_end_ads_sec = 14;
  inline bool has_exp_end_ads_sec() const;
  inline void clear_exp_end_ads_sec();
  static const int kExpEndAdsSecFieldNumber = 14;
  inline ::google::protobuf::uint32 exp_end_ads_sec() const;
  inline void set_exp_end_ads_sec(::google::protobuf::uint32 value);

  // optional uint32 exp_end_ads_nsec = 15;
  inline bool has_exp_end_ads_nsec() const;
  inline void clear_exp_end_ads_nsec();
  static const int kExpEndAdsNsecFieldNumber = 15;
  inline ::google::protobuf::uint32 exp_end_ads_nsec() const;
  inline void set_exp_end_ads_nsec(::google::protobuf::uint32 value);

  // optional uint32 exp_end_gnss_sec = 16;
  inline bool has_exp_end_gnss_sec() const;
  inline void clear_exp_end_gnss_sec();
  static const int kExpEndGnssSecFieldNumber = 16;
  inline ::google::protobuf::uint32 exp_end_gnss_sec() const;
  inline void set_exp_end_gnss_sec(::google::protobuf::uint32 value);

  // optional uint32 exp_end_gnss_nsec = 17;
  inline bool has_exp_end_gnss_nsec() const;
  inline void clear_exp_end_gnss_nsec();
  static const int kExpEndGnssNsecFieldNumber = 17;
  inline ::google::protobuf::uint32 exp_end_gnss_nsec() const;
  inline void set_exp_end_gnss_nsec(::google::protobuf::uint32 value);

  // optional uint32 shutter_1 = 18;
  inline bool has_shutter_1() const;
  inline void clear_shutter_1();
  static const int kShutter1FieldNumber = 18;
  inline ::google::protobuf::uint32 shutter_1() const;
  inline void set_shutter_1(::google::protobuf::uint32 value);

  // optional uint32 shutter_2 = 19;
  inline bool has_shutter_2() const;
  inline void clear_shutter_2();
  static const int kShutter2FieldNumber = 19;
  inline ::google::protobuf::uint32 shutter_2() const;
  inline void set_shutter_2(::google::protobuf::uint32 value);

  // optional bytes image_supplement = 20;
  inline bool has_image_supplement() const;
  inline void clear_image_supplement();
  static const int kImageSupplementFieldNumber = 20;
  inline const ::std::string& image_supplement() const;
  inline void set_image_supplement(const ::std::string& value);
  inline void set_image_supplement(const char* value);
  inline void set_image_supplement(const void* value, size_t size);
  inline ::std::string* mutable_image_supplement();
  inline ::std::string* release_image_supplement();
  inline void set_allocated_image_supplement(::std::string* image_supplement);

  // @@protoc_insertion_point(class_scope:minieye.CameraFrameExtendedInfo)
 private:
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_frame_type();
  inline void clear_has_frame_type();
  inline void set_has_data_size();
  inline void clear_has_data_size();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_fsync_ads_sec();
  inline void clear_has_fsync_ads_sec();
  inline void set_has_fsync_ads_nsec();
  inline void clear_has_fsync_ads_nsec();
  inline void set_has_fsync_gnss_sec();
  inline void clear_has_fsync_gnss_sec();
  inline void set_has_fsync_gnss_nsec();
  inline void clear_has_fsync_gnss_nsec();
  inline void set_has_exp_start_ads_sec();
  inline void clear_has_exp_start_ads_sec();
  inline void set_has_exp_start_ads_nsec();
  inline void clear_has_exp_start_ads_nsec();
  inline void set_has_exp_start_gnss_sec();
  inline void clear_has_exp_start_gnss_sec();
  inline void set_has_exp_start_gnss_nsec();
  inline void clear_has_exp_start_gnss_nsec();
  inline void set_has_exp_end_ads_sec();
  inline void clear_has_exp_end_ads_sec();
  inline void set_has_exp_end_ads_nsec();
  inline void clear_has_exp_end_ads_nsec();
  inline void set_has_exp_end_gnss_sec();
  inline void clear_has_exp_end_gnss_sec();
  inline void set_has_exp_end_gnss_nsec();
  inline void clear_has_exp_end_gnss_nsec();
  inline void set_has_shutter_1();
  inline void clear_has_shutter_1();
  inline void set_has_shutter_2();
  inline void clear_has_shutter_2();
  inline void set_has_image_supplement();
  inline void clear_has_image_supplement();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::uint32 frame_type_;
  ::google::protobuf::int32 data_size_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::uint32 fsync_ads_sec_;
  ::google::protobuf::uint32 fsync_ads_nsec_;
  ::google::protobuf::uint32 fsync_gnss_sec_;
  ::google::protobuf::uint32 fsync_gnss_nsec_;
  ::google::protobuf::uint32 exp_start_ads_sec_;
  ::google::protobuf::uint32 exp_start_ads_nsec_;
  ::google::protobuf::uint32 exp_start_gnss_sec_;
  ::google::protobuf::uint32 exp_start_gnss_nsec_;
  ::google::protobuf::uint32 exp_end_ads_sec_;
  ::google::protobuf::uint32 exp_end_ads_nsec_;
  ::google::protobuf::uint32 exp_end_gnss_sec_;
  ::google::protobuf::uint32 exp_end_gnss_nsec_;
  ::google::protobuf::uint32 shutter_1_;
  ::std::string* image_supplement_;
  ::google::protobuf::uint32 shutter_2_;
  friend void  protobuf_AddDesc_camera_2eproto();
  friend void protobuf_AssignDesc_camera_2eproto();
  friend void protobuf_ShutdownFile_camera_2eproto();

  void InitAsDefaultInstance();
  static CameraFrameExtendedInfo* default_instance_;
};
// -------------------------------------------------------------------

class CameraFrame : public ::google::protobuf::Message {
 public:
  CameraFrame();
  virtual ~CameraFrame();

  CameraFrame(const CameraFrame& from);

  inline CameraFrame& operator=(const CameraFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraFrame& default_instance();

  void Swap(CameraFrame* other);

  // implements Message ----------------------------------------------

  CameraFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraFrame& from);
  void MergeFrom(const CameraFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 camera_id = 1;
  inline bool has_camera_id() const;
  inline void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  inline ::google::protobuf::uint32 camera_id() const;
  inline void set_camera_id(::google::protobuf::uint32 value);

  // optional uint64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional uint64 tick = 3;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 3;
  inline ::google::protobuf::uint64 tick() const;
  inline void set_tick(::google::protobuf::uint64 value);

  // optional uint64 frame_id = 4;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 4;
  inline ::google::protobuf::uint64 frame_id() const;
  inline void set_frame_id(::google::protobuf::uint64 value);

  // repeated uint64 image_plane_addr = 5;
  inline int image_plane_addr_size() const;
  inline void clear_image_plane_addr();
  static const int kImagePlaneAddrFieldNumber = 5;
  inline ::google::protobuf::uint64 image_plane_addr(int index) const;
  inline void set_image_plane_addr(int index, ::google::protobuf::uint64 value);
  inline void add_image_plane_addr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      image_plane_addr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_image_plane_addr();

  // optional uint32 image_width = 6;
  inline bool has_image_width() const;
  inline void clear_image_width();
  static const int kImageWidthFieldNumber = 6;
  inline ::google::protobuf::uint32 image_width() const;
  inline void set_image_width(::google::protobuf::uint32 value);

  // optional uint32 image_height = 7;
  inline bool has_image_height() const;
  inline void clear_image_height();
  static const int kImageHeightFieldNumber = 7;
  inline ::google::protobuf::uint32 image_height() const;
  inline void set_image_height(::google::protobuf::uint32 value);

  // optional uint32 stride = 8;
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 8;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // optional uint32 image_type = 9;
  inline bool has_image_type() const;
  inline void clear_image_type();
  static const int kImageTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 image_type() const;
  inline void set_image_type(::google::protobuf::uint32 value);

  // optional bytes image_supplement = 10;
  inline bool has_image_supplement() const;
  inline void clear_image_supplement();
  static const int kImageSupplementFieldNumber = 10;
  inline const ::std::string& image_supplement() const;
  inline void set_image_supplement(const ::std::string& value);
  inline void set_image_supplement(const char* value);
  inline void set_image_supplement(const void* value, size_t size);
  inline ::std::string* mutable_image_supplement();
  inline ::std::string* release_image_supplement();
  inline void set_allocated_image_supplement(::std::string* image_supplement);

  // optional .minieye.CameraFrameExtendedInfo extended_info = 11;
  inline bool has_extended_info() const;
  inline void clear_extended_info();
  static const int kExtendedInfoFieldNumber = 11;
  inline const ::minieye::CameraFrameExtendedInfo& extended_info() const;
  inline ::minieye::CameraFrameExtendedInfo* mutable_extended_info();
  inline ::minieye::CameraFrameExtendedInfo* release_extended_info();
  inline void set_allocated_extended_info(::minieye::CameraFrameExtendedInfo* extended_info);

  // @@protoc_insertion_point(class_scope:minieye.CameraFrame)
 private:
  inline void set_has_camera_id();
  inline void clear_has_camera_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_image_width();
  inline void clear_has_image_width();
  inline void set_has_image_height();
  inline void clear_has_image_height();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_image_type();
  inline void clear_has_image_type();
  inline void set_has_image_supplement();
  inline void clear_has_image_supplement();
  inline void set_has_extended_info();
  inline void clear_has_extended_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 tick_;
  ::google::protobuf::uint32 camera_id_;
  ::google::protobuf::uint32 image_width_;
  ::google::protobuf::uint64 frame_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > image_plane_addr_;
  ::google::protobuf::uint32 image_height_;
  ::google::protobuf::uint32 stride_;
  ::std::string* image_supplement_;
  ::minieye::CameraFrameExtendedInfo* extended_info_;
  ::google::protobuf::uint32 image_type_;
  friend void  protobuf_AddDesc_camera_2eproto();
  friend void protobuf_AssignDesc_camera_2eproto();
  friend void protobuf_ShutdownFile_camera_2eproto();

  void InitAsDefaultInstance();
  static CameraFrame* default_instance_;
};
// -------------------------------------------------------------------

class CamID : public ::google::protobuf::Message {
 public:
  CamID();
  virtual ~CamID();

  CamID(const CamID& from);

  inline CamID& operator=(const CamID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CamID& default_instance();

  void Swap(CamID* other);

  // implements Message ----------------------------------------------

  CamID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CamID& from);
  void MergeFrom(const CamID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cam_direct = 1;
  inline bool has_cam_direct() const;
  inline void clear_cam_direct();
  static const int kCamDirectFieldNumber = 1;
  inline ::google::protobuf::int32 cam_direct() const;
  inline void set_cam_direct(::google::protobuf::int32 value);

  // optional .minieye.CamFov fov = 2;
  inline bool has_fov() const;
  inline void clear_fov();
  static const int kFovFieldNumber = 2;
  inline ::minieye::CamFov fov() const;
  inline void set_fov(::minieye::CamFov value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:minieye.CamID)
 private:
  inline void set_has_cam_direct();
  inline void clear_has_cam_direct();
  inline void set_has_fov();
  inline void clear_has_fov();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cam_direct_;
  int fov_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_camera_2eproto();
  friend void protobuf_AssignDesc_camera_2eproto();
  friend void protobuf_ShutdownFile_camera_2eproto();

  void InitAsDefaultInstance();
  static CamID* default_instance_;
};
// -------------------------------------------------------------------

class TransMatrix : public ::google::protobuf::Message {
 public:
  TransMatrix();
  virtual ~TransMatrix();

  TransMatrix(const TransMatrix& from);

  inline TransMatrix& operator=(const TransMatrix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransMatrix& default_instance();

  void Swap(TransMatrix* other);

  // implements Message ----------------------------------------------

  TransMatrix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransMatrix& from);
  void MergeFrom(const TransMatrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float vcsgnd2img = 1;
  inline int vcsgnd2img_size() const;
  inline void clear_vcsgnd2img();
  static const int kVcsgnd2ImgFieldNumber = 1;
  inline float vcsgnd2img(int index) const;
  inline void set_vcsgnd2img(int index, float value);
  inline void add_vcsgnd2img(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      vcsgnd2img() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_vcsgnd2img();

  // repeated float img2vcsgnd = 2;
  inline int img2vcsgnd_size() const;
  inline void clear_img2vcsgnd();
  static const int kImg2VcsgndFieldNumber = 2;
  inline float img2vcsgnd(int index) const;
  inline void set_img2vcsgnd(int index, float value);
  inline void add_img2vcsgnd(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      img2vcsgnd() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_img2vcsgnd();

  // repeated float local2img = 3;
  inline int local2img_size() const;
  inline void clear_local2img();
  static const int kLocal2ImgFieldNumber = 3;
  inline float local2img(int index) const;
  inline void set_local2img(int index, float value);
  inline void add_local2img(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      local2img() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_local2img();

  // repeated float img2local = 4;
  inline int img2local_size() const;
  inline void clear_img2local();
  static const int kImg2LocalFieldNumber = 4;
  inline float img2local(int index) const;
  inline void set_img2local(int index, float value);
  inline void add_img2local(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      img2local() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_img2local();

  // @@protoc_insertion_point(class_scope:minieye.TransMatrix)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > vcsgnd2img_;
  ::google::protobuf::RepeatedField< float > img2vcsgnd_;
  ::google::protobuf::RepeatedField< float > local2img_;
  ::google::protobuf::RepeatedField< float > img2local_;
  friend void  protobuf_AddDesc_camera_2eproto();
  friend void protobuf_AssignDesc_camera_2eproto();
  friend void protobuf_ShutdownFile_camera_2eproto();

  void InitAsDefaultInstance();
  static TransMatrix* default_instance_;
};
// -------------------------------------------------------------------

class CameraParam : public ::google::protobuf::Message {
 public:
  CameraParam();
  virtual ~CameraParam();

  CameraParam(const CameraParam& from);

  inline CameraParam& operator=(const CameraParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraParam& default_instance();

  void Swap(CameraParam* other);

  // implements Message ----------------------------------------------

  CameraParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraParam& from);
  void MergeFrom(const CameraParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float focal_u = 1;
  inline bool has_focal_u() const;
  inline void clear_focal_u();
  static const int kFocalUFieldNumber = 1;
  inline float focal_u() const;
  inline void set_focal_u(float value);

  // optional float focal_v = 2;
  inline bool has_focal_v() const;
  inline void clear_focal_v();
  static const int kFocalVFieldNumber = 2;
  inline float focal_v() const;
  inline void set_focal_v(float value);

  // optional float cu = 3;
  inline bool has_cu() const;
  inline void clear_cu();
  static const int kCuFieldNumber = 3;
  inline float cu() const;
  inline void set_cu(float value);

  // optional float cv = 4;
  inline bool has_cv() const;
  inline void clear_cv();
  static const int kCvFieldNumber = 4;
  inline float cv() const;
  inline void set_cv(float value);

  // repeated float pos = 5;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline float pos(int index) const;
  inline void set_pos(int index, float value);
  inline void add_pos(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      pos() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_pos();

  // optional float pitch = 6;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 6;
  inline float pitch() const;
  inline void set_pitch(float value);

  // optional float yaw = 7;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 7;
  inline float yaw() const;
  inline void set_yaw(float value);

  // optional float roll = 8;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 8;
  inline float roll() const;
  inline void set_roll(float value);

  // optional float fov = 9;
  inline bool has_fov() const;
  inline void clear_fov();
  static const int kFovFieldNumber = 9;
  inline float fov() const;
  inline void set_fov(float value);

  // optional int32 image_format = 10;
  inline bool has_image_format() const;
  inline void clear_image_format();
  static const int kImageFormatFieldNumber = 10;
  inline ::google::protobuf::int32 image_format() const;
  inline void set_image_format(::google::protobuf::int32 value);

  // optional string isp_ver = 11;
  inline bool has_isp_ver() const;
  inline void clear_isp_ver();
  static const int kIspVerFieldNumber = 11;
  inline const ::std::string& isp_ver() const;
  inline void set_isp_ver(const ::std::string& value);
  inline void set_isp_ver(const char* value);
  inline void set_isp_ver(const char* value, size_t size);
  inline ::std::string* mutable_isp_ver();
  inline ::std::string* release_isp_ver();
  inline void set_allocated_isp_ver(::std::string* isp_ver);

  // optional int32 install_direction = 12;
  inline bool has_install_direction() const;
  inline void clear_install_direction();
  static const int kInstallDirectionFieldNumber = 12;
  inline ::google::protobuf::int32 install_direction() const;
  inline void set_install_direction(::google::protobuf::int32 value);

  // optional .minieye.TransMatrix trans_mtx = 13;
  inline bool has_trans_mtx() const;
  inline void clear_trans_mtx();
  static const int kTransMtxFieldNumber = 13;
  inline const ::minieye::TransMatrix& trans_mtx() const;
  inline ::minieye::TransMatrix* mutable_trans_mtx();
  inline ::minieye::TransMatrix* release_trans_mtx();
  inline void set_allocated_trans_mtx(::minieye::TransMatrix* trans_mtx);

  // optional .minieye.ProjectionModel prj_model = 14;
  inline bool has_prj_model() const;
  inline void clear_prj_model();
  static const int kPrjModelFieldNumber = 14;
  inline ::minieye::ProjectionModel prj_model() const;
  inline void set_prj_model(::minieye::ProjectionModel value);

  // optional uint32 image_width = 15;
  inline bool has_image_width() const;
  inline void clear_image_width();
  static const int kImageWidthFieldNumber = 15;
  inline ::google::protobuf::uint32 image_width() const;
  inline void set_image_width(::google::protobuf::uint32 value);

  // optional uint32 image_height = 16;
  inline bool has_image_height() const;
  inline void clear_image_height();
  static const int kImageHeightFieldNumber = 16;
  inline ::google::protobuf::uint32 image_height() const;
  inline void set_image_height(::google::protobuf::uint32 value);

  // repeated double distort_coeffs = 17;
  inline int distort_coeffs_size() const;
  inline void clear_distort_coeffs();
  static const int kDistortCoeffsFieldNumber = 17;
  inline double distort_coeffs(int index) const;
  inline void set_distort_coeffs(int index, double value);
  inline void add_distort_coeffs(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      distort_coeffs() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_distort_coeffs();

  // optional uint32 camera_id = 18;
  inline bool has_camera_id() const;
  inline void clear_camera_id();
  static const int kCameraIdFieldNumber = 18;
  inline ::google::protobuf::uint32 camera_id() const;
  inline void set_camera_id(::google::protobuf::uint32 value);

  // optional bool is_valid = 19;
  inline bool has_is_valid() const;
  inline void clear_is_valid();
  static const int kIsValidFieldNumber = 19;
  inline bool is_valid() const;
  inline void set_is_valid(bool value);

  // optional int32 calib_method = 20;
  inline bool has_calib_method() const;
  inline void clear_calib_method();
  static const int kCalibMethodFieldNumber = 20;
  inline ::google::protobuf::int32 calib_method() const;
  inline void set_calib_method(::google::protobuf::int32 value);

  // optional uint64 calib_timestamp = 21;
  inline bool has_calib_timestamp() const;
  inline void clear_calib_timestamp();
  static const int kCalibTimestampFieldNumber = 21;
  inline ::google::protobuf::uint64 calib_timestamp() const;
  inline void set_calib_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:minieye.CameraParam)
 private:
  inline void set_has_focal_u();
  inline void clear_has_focal_u();
  inline void set_has_focal_v();
  inline void clear_has_focal_v();
  inline void set_has_cu();
  inline void clear_has_cu();
  inline void set_has_cv();
  inline void clear_has_cv();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_fov();
  inline void clear_has_fov();
  inline void set_has_image_format();
  inline void clear_has_image_format();
  inline void set_has_isp_ver();
  inline void clear_has_isp_ver();
  inline void set_has_install_direction();
  inline void clear_has_install_direction();
  inline void set_has_trans_mtx();
  inline void clear_has_trans_mtx();
  inline void set_has_prj_model();
  inline void clear_has_prj_model();
  inline void set_has_image_width();
  inline void clear_has_image_width();
  inline void set_has_image_height();
  inline void clear_has_image_height();
  inline void set_has_camera_id();
  inline void clear_has_camera_id();
  inline void set_has_is_valid();
  inline void clear_has_is_valid();
  inline void set_has_calib_method();
  inline void clear_has_calib_method();
  inline void set_has_calib_timestamp();
  inline void clear_has_calib_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float focal_u_;
  float focal_v_;
  float cu_;
  float cv_;
  ::google::protobuf::RepeatedField< float > pos_;
  float pitch_;
  float yaw_;
  float roll_;
  float fov_;
  ::std::string* isp_ver_;
  ::google::protobuf::int32 image_format_;
  ::google::protobuf::int32 install_direction_;
  ::minieye::TransMatrix* trans_mtx_;
  int prj_model_;
  ::google::protobuf::uint32 image_width_;
  ::google::protobuf::RepeatedField< double > distort_coeffs_;
  ::google::protobuf::uint32 image_height_;
  ::google::protobuf::uint32 camera_id_;
  bool is_valid_;
  ::google::protobuf::int32 calib_method_;
  ::google::protobuf::uint64 calib_timestamp_;
  friend void  protobuf_AddDesc_camera_2eproto();
  friend void protobuf_AssignDesc_camera_2eproto();
  friend void protobuf_ShutdownFile_camera_2eproto();

  void InitAsDefaultInstance();
  static CameraParam* default_instance_;
};
// -------------------------------------------------------------------

class CameraEmbeddedInfo : public ::google::protobuf::Message {
 public:
  CameraEmbeddedInfo();
  virtual ~CameraEmbeddedInfo();

  CameraEmbeddedInfo(const CameraEmbeddedInfo& from);

  inline CameraEmbeddedInfo& operator=(const CameraEmbeddedInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraEmbeddedInfo& default_instance();

  void Swap(CameraEmbeddedInfo* other);

  // implements Message ----------------------------------------------

  CameraEmbeddedInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraEmbeddedInfo& from);
  void MergeFrom(const CameraEmbeddedInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 frame_count = 1;
  inline bool has_frame_count() const;
  inline void clear_frame_count();
  static const int kFrameCountFieldNumber = 1;
  inline ::google::protobuf::uint32 frame_count() const;
  inline void set_frame_count(::google::protobuf::uint32 value);

  // optional uint32 expo_num = 2;
  inline bool has_expo_num() const;
  inline void clear_expo_num();
  static const int kExpoNumFieldNumber = 2;
  inline ::google::protobuf::uint32 expo_num() const;
  inline void set_expo_num(::google::protobuf::uint32 value);

  // repeated uint32 expo_ratio = 3;
  inline int expo_ratio_size() const;
  inline void clear_expo_ratio();
  static const int kExpoRatioFieldNumber = 3;
  inline ::google::protobuf::uint32 expo_ratio(int index) const;
  inline void set_expo_ratio(int index, ::google::protobuf::uint32 value);
  inline void add_expo_ratio(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      expo_ratio() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_expo_ratio();

  // repeated uint32 shutter_time = 4;
  inline int shutter_time_size() const;
  inline void clear_shutter_time();
  static const int kShutterTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 shutter_time(int index) const;
  inline void set_shutter_time(int index, ::google::protobuf::uint32 value);
  inline void add_shutter_time(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      shutter_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_shutter_time();

  // repeated float sensor_a_gain = 5;
  inline int sensor_a_gain_size() const;
  inline void clear_sensor_a_gain();
  static const int kSensorAGainFieldNumber = 5;
  inline float sensor_a_gain(int index) const;
  inline void set_sensor_a_gain(int index, float value);
  inline void add_sensor_a_gain(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      sensor_a_gain() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_sensor_a_gain();

  // repeated float sensor_d_gain = 6;
  inline int sensor_d_gain_size() const;
  inline void clear_sensor_d_gain();
  static const int kSensorDGainFieldNumber = 6;
  inline float sensor_d_gain(int index) const;
  inline void set_sensor_d_gain(int index, float value);
  inline void add_sensor_d_gain(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      sensor_d_gain() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_sensor_d_gain();

  // optional uint64 exp_start_camera_time_stamp = 7;
  inline bool has_exp_start_camera_time_stamp() const;
  inline void clear_exp_start_camera_time_stamp();
  static const int kExpStartCameraTimeStampFieldNumber = 7;
  inline ::google::protobuf::uint64 exp_start_camera_time_stamp() const;
  inline void set_exp_start_camera_time_stamp(::google::protobuf::uint64 value);

  // optional uint64 exp_end_camera_time_stamp = 8;
  inline bool has_exp_end_camera_time_stamp() const;
  inline void clear_exp_end_camera_time_stamp();
  static const int kExpEndCameraTimeStampFieldNumber = 8;
  inline ::google::protobuf::uint64 exp_end_camera_time_stamp() const;
  inline void set_exp_end_camera_time_stamp(::google::protobuf::uint64 value);

  // optional uint64 is_valid_bitmap = 64;
  inline bool has_is_valid_bitmap() const;
  inline void clear_is_valid_bitmap();
  static const int kIsValidBitmapFieldNumber = 64;
  inline ::google::protobuf::uint64 is_valid_bitmap() const;
  inline void set_is_valid_bitmap(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:minieye.CameraEmbeddedInfo)
 private:
  inline void set_has_frame_count();
  inline void clear_has_frame_count();
  inline void set_has_expo_num();
  inline void clear_has_expo_num();
  inline void set_has_exp_start_camera_time_stamp();
  inline void clear_has_exp_start_camera_time_stamp();
  inline void set_has_exp_end_camera_time_stamp();
  inline void clear_has_exp_end_camera_time_stamp();
  inline void set_has_is_valid_bitmap();
  inline void clear_has_is_valid_bitmap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 frame_count_;
  ::google::protobuf::uint32 expo_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > expo_ratio_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > shutter_time_;
  ::google::protobuf::RepeatedField< float > sensor_a_gain_;
  ::google::protobuf::RepeatedField< float > sensor_d_gain_;
  ::google::protobuf::uint64 exp_start_camera_time_stamp_;
  ::google::protobuf::uint64 exp_end_camera_time_stamp_;
  ::google::protobuf::uint64 is_valid_bitmap_;
  friend void  protobuf_AddDesc_camera_2eproto();
  friend void protobuf_AssignDesc_camera_2eproto();
  friend void protobuf_ShutdownFile_camera_2eproto();

  void InitAsDefaultInstance();
  static CameraEmbeddedInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CameraFrameExtendedInfo

// optional uint32 seq = 1;
inline bool CameraFrameExtendedInfo::has_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_seq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraFrameExtendedInfo::clear_has_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraFrameExtendedInfo::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::seq() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.seq)
  return seq_;
}
inline void CameraFrameExtendedInfo::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.seq)
}

// optional uint32 frame_type = 2;
inline bool CameraFrameExtendedInfo::has_frame_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_frame_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraFrameExtendedInfo::clear_has_frame_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraFrameExtendedInfo::clear_frame_type() {
  frame_type_ = 0u;
  clear_has_frame_type();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::frame_type() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.frame_type)
  return frame_type_;
}
inline void CameraFrameExtendedInfo::set_frame_type(::google::protobuf::uint32 value) {
  set_has_frame_type();
  frame_type_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.frame_type)
}

// optional int32 data_size = 3;
inline bool CameraFrameExtendedInfo::has_data_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_data_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraFrameExtendedInfo::clear_has_data_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraFrameExtendedInfo::clear_data_size() {
  data_size_ = 0;
  clear_has_data_size();
}
inline ::google::protobuf::int32 CameraFrameExtendedInfo::data_size() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.data_size)
  return data_size_;
}
inline void CameraFrameExtendedInfo::set_data_size(::google::protobuf::int32 value) {
  set_has_data_size();
  data_size_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.data_size)
}

// optional int32 width = 4;
inline bool CameraFrameExtendedInfo::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraFrameExtendedInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraFrameExtendedInfo::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 CameraFrameExtendedInfo::width() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.width)
  return width_;
}
inline void CameraFrameExtendedInfo::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.width)
}

// optional int32 height = 5;
inline bool CameraFrameExtendedInfo::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraFrameExtendedInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraFrameExtendedInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 CameraFrameExtendedInfo::height() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.height)
  return height_;
}
inline void CameraFrameExtendedInfo::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.height)
}

// optional uint32 fsync_ads_sec = 6;
inline bool CameraFrameExtendedInfo::has_fsync_ads_sec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_fsync_ads_sec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraFrameExtendedInfo::clear_has_fsync_ads_sec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraFrameExtendedInfo::clear_fsync_ads_sec() {
  fsync_ads_sec_ = 0u;
  clear_has_fsync_ads_sec();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::fsync_ads_sec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.fsync_ads_sec)
  return fsync_ads_sec_;
}
inline void CameraFrameExtendedInfo::set_fsync_ads_sec(::google::protobuf::uint32 value) {
  set_has_fsync_ads_sec();
  fsync_ads_sec_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.fsync_ads_sec)
}

// optional uint32 fsync_ads_nsec = 7;
inline bool CameraFrameExtendedInfo::has_fsync_ads_nsec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_fsync_ads_nsec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraFrameExtendedInfo::clear_has_fsync_ads_nsec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraFrameExtendedInfo::clear_fsync_ads_nsec() {
  fsync_ads_nsec_ = 0u;
  clear_has_fsync_ads_nsec();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::fsync_ads_nsec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.fsync_ads_nsec)
  return fsync_ads_nsec_;
}
inline void CameraFrameExtendedInfo::set_fsync_ads_nsec(::google::protobuf::uint32 value) {
  set_has_fsync_ads_nsec();
  fsync_ads_nsec_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.fsync_ads_nsec)
}

// optional uint32 fsync_gnss_sec = 8;
inline bool CameraFrameExtendedInfo::has_fsync_gnss_sec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_fsync_gnss_sec() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraFrameExtendedInfo::clear_has_fsync_gnss_sec() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraFrameExtendedInfo::clear_fsync_gnss_sec() {
  fsync_gnss_sec_ = 0u;
  clear_has_fsync_gnss_sec();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::fsync_gnss_sec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.fsync_gnss_sec)
  return fsync_gnss_sec_;
}
inline void CameraFrameExtendedInfo::set_fsync_gnss_sec(::google::protobuf::uint32 value) {
  set_has_fsync_gnss_sec();
  fsync_gnss_sec_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.fsync_gnss_sec)
}

// optional uint32 fsync_gnss_nsec = 9;
inline bool CameraFrameExtendedInfo::has_fsync_gnss_nsec() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_fsync_gnss_nsec() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraFrameExtendedInfo::clear_has_fsync_gnss_nsec() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraFrameExtendedInfo::clear_fsync_gnss_nsec() {
  fsync_gnss_nsec_ = 0u;
  clear_has_fsync_gnss_nsec();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::fsync_gnss_nsec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.fsync_gnss_nsec)
  return fsync_gnss_nsec_;
}
inline void CameraFrameExtendedInfo::set_fsync_gnss_nsec(::google::protobuf::uint32 value) {
  set_has_fsync_gnss_nsec();
  fsync_gnss_nsec_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.fsync_gnss_nsec)
}

// optional uint32 exp_start_ads_sec = 10;
inline bool CameraFrameExtendedInfo::has_exp_start_ads_sec() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_exp_start_ads_sec() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CameraFrameExtendedInfo::clear_has_exp_start_ads_sec() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CameraFrameExtendedInfo::clear_exp_start_ads_sec() {
  exp_start_ads_sec_ = 0u;
  clear_has_exp_start_ads_sec();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::exp_start_ads_sec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_start_ads_sec)
  return exp_start_ads_sec_;
}
inline void CameraFrameExtendedInfo::set_exp_start_ads_sec(::google::protobuf::uint32 value) {
  set_has_exp_start_ads_sec();
  exp_start_ads_sec_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_start_ads_sec)
}

// optional uint32 exp_start_ads_nsec = 11;
inline bool CameraFrameExtendedInfo::has_exp_start_ads_nsec() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_exp_start_ads_nsec() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CameraFrameExtendedInfo::clear_has_exp_start_ads_nsec() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CameraFrameExtendedInfo::clear_exp_start_ads_nsec() {
  exp_start_ads_nsec_ = 0u;
  clear_has_exp_start_ads_nsec();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::exp_start_ads_nsec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_start_ads_nsec)
  return exp_start_ads_nsec_;
}
inline void CameraFrameExtendedInfo::set_exp_start_ads_nsec(::google::protobuf::uint32 value) {
  set_has_exp_start_ads_nsec();
  exp_start_ads_nsec_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_start_ads_nsec)
}

// optional uint32 exp_start_gnss_sec = 12;
inline bool CameraFrameExtendedInfo::has_exp_start_gnss_sec() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_exp_start_gnss_sec() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CameraFrameExtendedInfo::clear_has_exp_start_gnss_sec() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CameraFrameExtendedInfo::clear_exp_start_gnss_sec() {
  exp_start_gnss_sec_ = 0u;
  clear_has_exp_start_gnss_sec();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::exp_start_gnss_sec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_start_gnss_sec)
  return exp_start_gnss_sec_;
}
inline void CameraFrameExtendedInfo::set_exp_start_gnss_sec(::google::protobuf::uint32 value) {
  set_has_exp_start_gnss_sec();
  exp_start_gnss_sec_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_start_gnss_sec)
}

// optional uint32 exp_start_gnss_nsec = 13;
inline bool CameraFrameExtendedInfo::has_exp_start_gnss_nsec() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_exp_start_gnss_nsec() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CameraFrameExtendedInfo::clear_has_exp_start_gnss_nsec() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CameraFrameExtendedInfo::clear_exp_start_gnss_nsec() {
  exp_start_gnss_nsec_ = 0u;
  clear_has_exp_start_gnss_nsec();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::exp_start_gnss_nsec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_start_gnss_nsec)
  return exp_start_gnss_nsec_;
}
inline void CameraFrameExtendedInfo::set_exp_start_gnss_nsec(::google::protobuf::uint32 value) {
  set_has_exp_start_gnss_nsec();
  exp_start_gnss_nsec_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_start_gnss_nsec)
}

// optional uint32 exp_end_ads_sec = 14;
inline bool CameraFrameExtendedInfo::has_exp_end_ads_sec() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_exp_end_ads_sec() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CameraFrameExtendedInfo::clear_has_exp_end_ads_sec() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CameraFrameExtendedInfo::clear_exp_end_ads_sec() {
  exp_end_ads_sec_ = 0u;
  clear_has_exp_end_ads_sec();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::exp_end_ads_sec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_end_ads_sec)
  return exp_end_ads_sec_;
}
inline void CameraFrameExtendedInfo::set_exp_end_ads_sec(::google::protobuf::uint32 value) {
  set_has_exp_end_ads_sec();
  exp_end_ads_sec_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_end_ads_sec)
}

// optional uint32 exp_end_ads_nsec = 15;
inline bool CameraFrameExtendedInfo::has_exp_end_ads_nsec() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_exp_end_ads_nsec() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CameraFrameExtendedInfo::clear_has_exp_end_ads_nsec() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CameraFrameExtendedInfo::clear_exp_end_ads_nsec() {
  exp_end_ads_nsec_ = 0u;
  clear_has_exp_end_ads_nsec();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::exp_end_ads_nsec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_end_ads_nsec)
  return exp_end_ads_nsec_;
}
inline void CameraFrameExtendedInfo::set_exp_end_ads_nsec(::google::protobuf::uint32 value) {
  set_has_exp_end_ads_nsec();
  exp_end_ads_nsec_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_end_ads_nsec)
}

// optional uint32 exp_end_gnss_sec = 16;
inline bool CameraFrameExtendedInfo::has_exp_end_gnss_sec() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_exp_end_gnss_sec() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CameraFrameExtendedInfo::clear_has_exp_end_gnss_sec() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CameraFrameExtendedInfo::clear_exp_end_gnss_sec() {
  exp_end_gnss_sec_ = 0u;
  clear_has_exp_end_gnss_sec();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::exp_end_gnss_sec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_end_gnss_sec)
  return exp_end_gnss_sec_;
}
inline void CameraFrameExtendedInfo::set_exp_end_gnss_sec(::google::protobuf::uint32 value) {
  set_has_exp_end_gnss_sec();
  exp_end_gnss_sec_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_end_gnss_sec)
}

// optional uint32 exp_end_gnss_nsec = 17;
inline bool CameraFrameExtendedInfo::has_exp_end_gnss_nsec() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_exp_end_gnss_nsec() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CameraFrameExtendedInfo::clear_has_exp_end_gnss_nsec() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CameraFrameExtendedInfo::clear_exp_end_gnss_nsec() {
  exp_end_gnss_nsec_ = 0u;
  clear_has_exp_end_gnss_nsec();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::exp_end_gnss_nsec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_end_gnss_nsec)
  return exp_end_gnss_nsec_;
}
inline void CameraFrameExtendedInfo::set_exp_end_gnss_nsec(::google::protobuf::uint32 value) {
  set_has_exp_end_gnss_nsec();
  exp_end_gnss_nsec_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_end_gnss_nsec)
}

// optional uint32 shutter_1 = 18;
inline bool CameraFrameExtendedInfo::has_shutter_1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_shutter_1() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CameraFrameExtendedInfo::clear_has_shutter_1() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CameraFrameExtendedInfo::clear_shutter_1() {
  shutter_1_ = 0u;
  clear_has_shutter_1();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::shutter_1() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.shutter_1)
  return shutter_1_;
}
inline void CameraFrameExtendedInfo::set_shutter_1(::google::protobuf::uint32 value) {
  set_has_shutter_1();
  shutter_1_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.shutter_1)
}

// optional uint32 shutter_2 = 19;
inline bool CameraFrameExtendedInfo::has_shutter_2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_shutter_2() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CameraFrameExtendedInfo::clear_has_shutter_2() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CameraFrameExtendedInfo::clear_shutter_2() {
  shutter_2_ = 0u;
  clear_has_shutter_2();
}
inline ::google::protobuf::uint32 CameraFrameExtendedInfo::shutter_2() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.shutter_2)
  return shutter_2_;
}
inline void CameraFrameExtendedInfo::set_shutter_2(::google::protobuf::uint32 value) {
  set_has_shutter_2();
  shutter_2_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.shutter_2)
}

// optional bytes image_supplement = 20;
inline bool CameraFrameExtendedInfo::has_image_supplement() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CameraFrameExtendedInfo::set_has_image_supplement() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CameraFrameExtendedInfo::clear_has_image_supplement() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CameraFrameExtendedInfo::clear_image_supplement() {
  if (image_supplement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_supplement_->clear();
  }
  clear_has_image_supplement();
}
inline const ::std::string& CameraFrameExtendedInfo::image_supplement() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.image_supplement)
  return *image_supplement_;
}
inline void CameraFrameExtendedInfo::set_image_supplement(const ::std::string& value) {
  set_has_image_supplement();
  if (image_supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_supplement_ = new ::std::string;
  }
  image_supplement_->assign(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.image_supplement)
}
inline void CameraFrameExtendedInfo::set_image_supplement(const char* value) {
  set_has_image_supplement();
  if (image_supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_supplement_ = new ::std::string;
  }
  image_supplement_->assign(value);
  // @@protoc_insertion_point(field_set_char:minieye.CameraFrameExtendedInfo.image_supplement)
}
inline void CameraFrameExtendedInfo::set_image_supplement(const void* value, size_t size) {
  set_has_image_supplement();
  if (image_supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_supplement_ = new ::std::string;
  }
  image_supplement_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minieye.CameraFrameExtendedInfo.image_supplement)
}
inline ::std::string* CameraFrameExtendedInfo::mutable_image_supplement() {
  set_has_image_supplement();
  if (image_supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_supplement_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:minieye.CameraFrameExtendedInfo.image_supplement)
  return image_supplement_;
}
inline ::std::string* CameraFrameExtendedInfo::release_image_supplement() {
  clear_has_image_supplement();
  if (image_supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_supplement_;
    image_supplement_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CameraFrameExtendedInfo::set_allocated_image_supplement(::std::string* image_supplement) {
  if (image_supplement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_supplement_;
  }
  if (image_supplement) {
    set_has_image_supplement();
    image_supplement_ = image_supplement;
  } else {
    clear_has_image_supplement();
    image_supplement_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:minieye.CameraFrameExtendedInfo.image_supplement)
}

// -------------------------------------------------------------------

// CameraFrame

// optional uint32 camera_id = 1;
inline bool CameraFrame::has_camera_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraFrame::set_has_camera_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraFrame::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraFrame::clear_camera_id() {
  camera_id_ = 0u;
  clear_has_camera_id();
}
inline ::google::protobuf::uint32 CameraFrame::camera_id() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.camera_id)
  return camera_id_;
}
inline void CameraFrame::set_camera_id(::google::protobuf::uint32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.camera_id)
}

// optional uint64 timestamp = 2;
inline bool CameraFrame::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraFrame::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraFrame::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraFrame::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 CameraFrame::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.timestamp)
  return timestamp_;
}
inline void CameraFrame::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.timestamp)
}

// optional uint64 tick = 3;
inline bool CameraFrame::has_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraFrame::set_has_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraFrame::clear_has_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraFrame::clear_tick() {
  tick_ = GOOGLE_ULONGLONG(0);
  clear_has_tick();
}
inline ::google::protobuf::uint64 CameraFrame::tick() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.tick)
  return tick_;
}
inline void CameraFrame::set_tick(::google::protobuf::uint64 value) {
  set_has_tick();
  tick_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.tick)
}

// optional uint64 frame_id = 4;
inline bool CameraFrame::has_frame_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraFrame::set_has_frame_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraFrame::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraFrame::clear_frame_id() {
  frame_id_ = GOOGLE_ULONGLONG(0);
  clear_has_frame_id();
}
inline ::google::protobuf::uint64 CameraFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.frame_id)
  return frame_id_;
}
inline void CameraFrame::set_frame_id(::google::protobuf::uint64 value) {
  set_has_frame_id();
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.frame_id)
}

// repeated uint64 image_plane_addr = 5;
inline int CameraFrame::image_plane_addr_size() const {
  return image_plane_addr_.size();
}
inline void CameraFrame::clear_image_plane_addr() {
  image_plane_addr_.Clear();
}
inline ::google::protobuf::uint64 CameraFrame::image_plane_addr(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.image_plane_addr)
  return image_plane_addr_.Get(index);
}
inline void CameraFrame::set_image_plane_addr(int index, ::google::protobuf::uint64 value) {
  image_plane_addr_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.image_plane_addr)
}
inline void CameraFrame::add_image_plane_addr(::google::protobuf::uint64 value) {
  image_plane_addr_.Add(value);
  // @@protoc_insertion_point(field_add:minieye.CameraFrame.image_plane_addr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CameraFrame::image_plane_addr() const {
  // @@protoc_insertion_point(field_list:minieye.CameraFrame.image_plane_addr)
  return image_plane_addr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CameraFrame::mutable_image_plane_addr() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraFrame.image_plane_addr)
  return &image_plane_addr_;
}

// optional uint32 image_width = 6;
inline bool CameraFrame::has_image_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraFrame::set_has_image_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraFrame::clear_has_image_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraFrame::clear_image_width() {
  image_width_ = 0u;
  clear_has_image_width();
}
inline ::google::protobuf::uint32 CameraFrame::image_width() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.image_width)
  return image_width_;
}
inline void CameraFrame::set_image_width(::google::protobuf::uint32 value) {
  set_has_image_width();
  image_width_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.image_width)
}

// optional uint32 image_height = 7;
inline bool CameraFrame::has_image_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraFrame::set_has_image_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraFrame::clear_has_image_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraFrame::clear_image_height() {
  image_height_ = 0u;
  clear_has_image_height();
}
inline ::google::protobuf::uint32 CameraFrame::image_height() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.image_height)
  return image_height_;
}
inline void CameraFrame::set_image_height(::google::protobuf::uint32 value) {
  set_has_image_height();
  image_height_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.image_height)
}

// optional uint32 stride = 8;
inline bool CameraFrame::has_stride() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraFrame::set_has_stride() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraFrame::clear_has_stride() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraFrame::clear_stride() {
  stride_ = 0u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 CameraFrame::stride() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.stride)
  return stride_;
}
inline void CameraFrame::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.stride)
}

// optional uint32 image_type = 9;
inline bool CameraFrame::has_image_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraFrame::set_has_image_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraFrame::clear_has_image_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraFrame::clear_image_type() {
  image_type_ = 0u;
  clear_has_image_type();
}
inline ::google::protobuf::uint32 CameraFrame::image_type() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.image_type)
  return image_type_;
}
inline void CameraFrame::set_image_type(::google::protobuf::uint32 value) {
  set_has_image_type();
  image_type_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.image_type)
}

// optional bytes image_supplement = 10;
inline bool CameraFrame::has_image_supplement() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CameraFrame::set_has_image_supplement() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CameraFrame::clear_has_image_supplement() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CameraFrame::clear_image_supplement() {
  if (image_supplement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_supplement_->clear();
  }
  clear_has_image_supplement();
}
inline const ::std::string& CameraFrame::image_supplement() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.image_supplement)
  return *image_supplement_;
}
inline void CameraFrame::set_image_supplement(const ::std::string& value) {
  set_has_image_supplement();
  if (image_supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_supplement_ = new ::std::string;
  }
  image_supplement_->assign(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.image_supplement)
}
inline void CameraFrame::set_image_supplement(const char* value) {
  set_has_image_supplement();
  if (image_supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_supplement_ = new ::std::string;
  }
  image_supplement_->assign(value);
  // @@protoc_insertion_point(field_set_char:minieye.CameraFrame.image_supplement)
}
inline void CameraFrame::set_image_supplement(const void* value, size_t size) {
  set_has_image_supplement();
  if (image_supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_supplement_ = new ::std::string;
  }
  image_supplement_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minieye.CameraFrame.image_supplement)
}
inline ::std::string* CameraFrame::mutable_image_supplement() {
  set_has_image_supplement();
  if (image_supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_supplement_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:minieye.CameraFrame.image_supplement)
  return image_supplement_;
}
inline ::std::string* CameraFrame::release_image_supplement() {
  clear_has_image_supplement();
  if (image_supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_supplement_;
    image_supplement_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CameraFrame::set_allocated_image_supplement(::std::string* image_supplement) {
  if (image_supplement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_supplement_;
  }
  if (image_supplement) {
    set_has_image_supplement();
    image_supplement_ = image_supplement;
  } else {
    clear_has_image_supplement();
    image_supplement_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:minieye.CameraFrame.image_supplement)
}

// optional .minieye.CameraFrameExtendedInfo extended_info = 11;
inline bool CameraFrame::has_extended_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CameraFrame::set_has_extended_info() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CameraFrame::clear_has_extended_info() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CameraFrame::clear_extended_info() {
  if (extended_info_ != NULL) extended_info_->::minieye::CameraFrameExtendedInfo::Clear();
  clear_has_extended_info();
}
inline const ::minieye::CameraFrameExtendedInfo& CameraFrame::extended_info() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.extended_info)
  return extended_info_ != NULL ? *extended_info_ : *default_instance_->extended_info_;
}
inline ::minieye::CameraFrameExtendedInfo* CameraFrame::mutable_extended_info() {
  set_has_extended_info();
  if (extended_info_ == NULL) extended_info_ = new ::minieye::CameraFrameExtendedInfo;
  // @@protoc_insertion_point(field_mutable:minieye.CameraFrame.extended_info)
  return extended_info_;
}
inline ::minieye::CameraFrameExtendedInfo* CameraFrame::release_extended_info() {
  clear_has_extended_info();
  ::minieye::CameraFrameExtendedInfo* temp = extended_info_;
  extended_info_ = NULL;
  return temp;
}
inline void CameraFrame::set_allocated_extended_info(::minieye::CameraFrameExtendedInfo* extended_info) {
  delete extended_info_;
  extended_info_ = extended_info;
  if (extended_info) {
    set_has_extended_info();
  } else {
    clear_has_extended_info();
  }
  // @@protoc_insertion_point(field_set_allocated:minieye.CameraFrame.extended_info)
}

// -------------------------------------------------------------------

// CamID

// optional int32 cam_direct = 1;
inline bool CamID::has_cam_direct() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CamID::set_has_cam_direct() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CamID::clear_has_cam_direct() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CamID::clear_cam_direct() {
  cam_direct_ = 0;
  clear_has_cam_direct();
}
inline ::google::protobuf::int32 CamID::cam_direct() const {
  // @@protoc_insertion_point(field_get:minieye.CamID.cam_direct)
  return cam_direct_;
}
inline void CamID::set_cam_direct(::google::protobuf::int32 value) {
  set_has_cam_direct();
  cam_direct_ = value;
  // @@protoc_insertion_point(field_set:minieye.CamID.cam_direct)
}

// optional .minieye.CamFov fov = 2;
inline bool CamID::has_fov() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CamID::set_has_fov() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CamID::clear_has_fov() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CamID::clear_fov() {
  fov_ = 0;
  clear_has_fov();
}
inline ::minieye::CamFov CamID::fov() const {
  // @@protoc_insertion_point(field_get:minieye.CamID.fov)
  return static_cast< ::minieye::CamFov >(fov_);
}
inline void CamID::set_fov(::minieye::CamFov value) {
  assert(::minieye::CamFov_IsValid(value));
  set_has_fov();
  fov_ = value;
  // @@protoc_insertion_point(field_set:minieye.CamID.fov)
}

// optional int32 id = 3;
inline bool CamID::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CamID::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CamID::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CamID::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CamID::id() const {
  // @@protoc_insertion_point(field_get:minieye.CamID.id)
  return id_;
}
inline void CamID::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:minieye.CamID.id)
}

// -------------------------------------------------------------------

// TransMatrix

// repeated float vcsgnd2img = 1;
inline int TransMatrix::vcsgnd2img_size() const {
  return vcsgnd2img_.size();
}
inline void TransMatrix::clear_vcsgnd2img() {
  vcsgnd2img_.Clear();
}
inline float TransMatrix::vcsgnd2img(int index) const {
  // @@protoc_insertion_point(field_get:minieye.TransMatrix.vcsgnd2img)
  return vcsgnd2img_.Get(index);
}
inline void TransMatrix::set_vcsgnd2img(int index, float value) {
  vcsgnd2img_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.TransMatrix.vcsgnd2img)
}
inline void TransMatrix::add_vcsgnd2img(float value) {
  vcsgnd2img_.Add(value);
  // @@protoc_insertion_point(field_add:minieye.TransMatrix.vcsgnd2img)
}
inline const ::google::protobuf::RepeatedField< float >&
TransMatrix::vcsgnd2img() const {
  // @@protoc_insertion_point(field_list:minieye.TransMatrix.vcsgnd2img)
  return vcsgnd2img_;
}
inline ::google::protobuf::RepeatedField< float >*
TransMatrix::mutable_vcsgnd2img() {
  // @@protoc_insertion_point(field_mutable_list:minieye.TransMatrix.vcsgnd2img)
  return &vcsgnd2img_;
}

// repeated float img2vcsgnd = 2;
inline int TransMatrix::img2vcsgnd_size() const {
  return img2vcsgnd_.size();
}
inline void TransMatrix::clear_img2vcsgnd() {
  img2vcsgnd_.Clear();
}
inline float TransMatrix::img2vcsgnd(int index) const {
  // @@protoc_insertion_point(field_get:minieye.TransMatrix.img2vcsgnd)
  return img2vcsgnd_.Get(index);
}
inline void TransMatrix::set_img2vcsgnd(int index, float value) {
  img2vcsgnd_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.TransMatrix.img2vcsgnd)
}
inline void TransMatrix::add_img2vcsgnd(float value) {
  img2vcsgnd_.Add(value);
  // @@protoc_insertion_point(field_add:minieye.TransMatrix.img2vcsgnd)
}
inline const ::google::protobuf::RepeatedField< float >&
TransMatrix::img2vcsgnd() const {
  // @@protoc_insertion_point(field_list:minieye.TransMatrix.img2vcsgnd)
  return img2vcsgnd_;
}
inline ::google::protobuf::RepeatedField< float >*
TransMatrix::mutable_img2vcsgnd() {
  // @@protoc_insertion_point(field_mutable_list:minieye.TransMatrix.img2vcsgnd)
  return &img2vcsgnd_;
}

// repeated float local2img = 3;
inline int TransMatrix::local2img_size() const {
  return local2img_.size();
}
inline void TransMatrix::clear_local2img() {
  local2img_.Clear();
}
inline float TransMatrix::local2img(int index) const {
  // @@protoc_insertion_point(field_get:minieye.TransMatrix.local2img)
  return local2img_.Get(index);
}
inline void TransMatrix::set_local2img(int index, float value) {
  local2img_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.TransMatrix.local2img)
}
inline void TransMatrix::add_local2img(float value) {
  local2img_.Add(value);
  // @@protoc_insertion_point(field_add:minieye.TransMatrix.local2img)
}
inline const ::google::protobuf::RepeatedField< float >&
TransMatrix::local2img() const {
  // @@protoc_insertion_point(field_list:minieye.TransMatrix.local2img)
  return local2img_;
}
inline ::google::protobuf::RepeatedField< float >*
TransMatrix::mutable_local2img() {
  // @@protoc_insertion_point(field_mutable_list:minieye.TransMatrix.local2img)
  return &local2img_;
}

// repeated float img2local = 4;
inline int TransMatrix::img2local_size() const {
  return img2local_.size();
}
inline void TransMatrix::clear_img2local() {
  img2local_.Clear();
}
inline float TransMatrix::img2local(int index) const {
  // @@protoc_insertion_point(field_get:minieye.TransMatrix.img2local)
  return img2local_.Get(index);
}
inline void TransMatrix::set_img2local(int index, float value) {
  img2local_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.TransMatrix.img2local)
}
inline void TransMatrix::add_img2local(float value) {
  img2local_.Add(value);
  // @@protoc_insertion_point(field_add:minieye.TransMatrix.img2local)
}
inline const ::google::protobuf::RepeatedField< float >&
TransMatrix::img2local() const {
  // @@protoc_insertion_point(field_list:minieye.TransMatrix.img2local)
  return img2local_;
}
inline ::google::protobuf::RepeatedField< float >*
TransMatrix::mutable_img2local() {
  // @@protoc_insertion_point(field_mutable_list:minieye.TransMatrix.img2local)
  return &img2local_;
}

// -------------------------------------------------------------------

// CameraParam

// optional float focal_u = 1;
inline bool CameraParam::has_focal_u() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraParam::set_has_focal_u() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraParam::clear_has_focal_u() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraParam::clear_focal_u() {
  focal_u_ = 0;
  clear_has_focal_u();
}
inline float CameraParam::focal_u() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.focal_u)
  return focal_u_;
}
inline void CameraParam::set_focal_u(float value) {
  set_has_focal_u();
  focal_u_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.focal_u)
}

// optional float focal_v = 2;
inline bool CameraParam::has_focal_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraParam::set_has_focal_v() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraParam::clear_has_focal_v() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraParam::clear_focal_v() {
  focal_v_ = 0;
  clear_has_focal_v();
}
inline float CameraParam::focal_v() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.focal_v)
  return focal_v_;
}
inline void CameraParam::set_focal_v(float value) {
  set_has_focal_v();
  focal_v_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.focal_v)
}

// optional float cu = 3;
inline bool CameraParam::has_cu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraParam::set_has_cu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraParam::clear_has_cu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraParam::clear_cu() {
  cu_ = 0;
  clear_has_cu();
}
inline float CameraParam::cu() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.cu)
  return cu_;
}
inline void CameraParam::set_cu(float value) {
  set_has_cu();
  cu_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.cu)
}

// optional float cv = 4;
inline bool CameraParam::has_cv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraParam::set_has_cv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraParam::clear_has_cv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraParam::clear_cv() {
  cv_ = 0;
  clear_has_cv();
}
inline float CameraParam::cv() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.cv)
  return cv_;
}
inline void CameraParam::set_cv(float value) {
  set_has_cv();
  cv_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.cv)
}

// repeated float pos = 5;
inline int CameraParam::pos_size() const {
  return pos_.size();
}
inline void CameraParam::clear_pos() {
  pos_.Clear();
}
inline float CameraParam::pos(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.pos)
  return pos_.Get(index);
}
inline void CameraParam::set_pos(int index, float value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.pos)
}
inline void CameraParam::add_pos(float value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:minieye.CameraParam.pos)
}
inline const ::google::protobuf::RepeatedField< float >&
CameraParam::pos() const {
  // @@protoc_insertion_point(field_list:minieye.CameraParam.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< float >*
CameraParam::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraParam.pos)
  return &pos_;
}

// optional float pitch = 6;
inline bool CameraParam::has_pitch() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraParam::set_has_pitch() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraParam::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraParam::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline float CameraParam::pitch() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.pitch)
  return pitch_;
}
inline void CameraParam::set_pitch(float value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.pitch)
}

// optional float yaw = 7;
inline bool CameraParam::has_yaw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraParam::set_has_yaw() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraParam::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraParam::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float CameraParam::yaw() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.yaw)
  return yaw_;
}
inline void CameraParam::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.yaw)
}

// optional float roll = 8;
inline bool CameraParam::has_roll() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraParam::set_has_roll() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraParam::clear_has_roll() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraParam::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline float CameraParam::roll() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.roll)
  return roll_;
}
inline void CameraParam::set_roll(float value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.roll)
}

// optional float fov = 9;
inline bool CameraParam::has_fov() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraParam::set_has_fov() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraParam::clear_has_fov() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraParam::clear_fov() {
  fov_ = 0;
  clear_has_fov();
}
inline float CameraParam::fov() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.fov)
  return fov_;
}
inline void CameraParam::set_fov(float value) {
  set_has_fov();
  fov_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.fov)
}

// optional int32 image_format = 10;
inline bool CameraParam::has_image_format() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CameraParam::set_has_image_format() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CameraParam::clear_has_image_format() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CameraParam::clear_image_format() {
  image_format_ = 0;
  clear_has_image_format();
}
inline ::google::protobuf::int32 CameraParam::image_format() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.image_format)
  return image_format_;
}
inline void CameraParam::set_image_format(::google::protobuf::int32 value) {
  set_has_image_format();
  image_format_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.image_format)
}

// optional string isp_ver = 11;
inline bool CameraParam::has_isp_ver() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CameraParam::set_has_isp_ver() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CameraParam::clear_has_isp_ver() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CameraParam::clear_isp_ver() {
  if (isp_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    isp_ver_->clear();
  }
  clear_has_isp_ver();
}
inline const ::std::string& CameraParam::isp_ver() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.isp_ver)
  return *isp_ver_;
}
inline void CameraParam::set_isp_ver(const ::std::string& value) {
  set_has_isp_ver();
  if (isp_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    isp_ver_ = new ::std::string;
  }
  isp_ver_->assign(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.isp_ver)
}
inline void CameraParam::set_isp_ver(const char* value) {
  set_has_isp_ver();
  if (isp_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    isp_ver_ = new ::std::string;
  }
  isp_ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:minieye.CameraParam.isp_ver)
}
inline void CameraParam::set_isp_ver(const char* value, size_t size) {
  set_has_isp_ver();
  if (isp_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    isp_ver_ = new ::std::string;
  }
  isp_ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:minieye.CameraParam.isp_ver)
}
inline ::std::string* CameraParam::mutable_isp_ver() {
  set_has_isp_ver();
  if (isp_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    isp_ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:minieye.CameraParam.isp_ver)
  return isp_ver_;
}
inline ::std::string* CameraParam::release_isp_ver() {
  clear_has_isp_ver();
  if (isp_ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = isp_ver_;
    isp_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CameraParam::set_allocated_isp_ver(::std::string* isp_ver) {
  if (isp_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete isp_ver_;
  }
  if (isp_ver) {
    set_has_isp_ver();
    isp_ver_ = isp_ver;
  } else {
    clear_has_isp_ver();
    isp_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:minieye.CameraParam.isp_ver)
}

// optional int32 install_direction = 12;
inline bool CameraParam::has_install_direction() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CameraParam::set_has_install_direction() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CameraParam::clear_has_install_direction() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CameraParam::clear_install_direction() {
  install_direction_ = 0;
  clear_has_install_direction();
}
inline ::google::protobuf::int32 CameraParam::install_direction() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.install_direction)
  return install_direction_;
}
inline void CameraParam::set_install_direction(::google::protobuf::int32 value) {
  set_has_install_direction();
  install_direction_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.install_direction)
}

// optional .minieye.TransMatrix trans_mtx = 13;
inline bool CameraParam::has_trans_mtx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CameraParam::set_has_trans_mtx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CameraParam::clear_has_trans_mtx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CameraParam::clear_trans_mtx() {
  if (trans_mtx_ != NULL) trans_mtx_->::minieye::TransMatrix::Clear();
  clear_has_trans_mtx();
}
inline const ::minieye::TransMatrix& CameraParam::trans_mtx() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.trans_mtx)
  return trans_mtx_ != NULL ? *trans_mtx_ : *default_instance_->trans_mtx_;
}
inline ::minieye::TransMatrix* CameraParam::mutable_trans_mtx() {
  set_has_trans_mtx();
  if (trans_mtx_ == NULL) trans_mtx_ = new ::minieye::TransMatrix;
  // @@protoc_insertion_point(field_mutable:minieye.CameraParam.trans_mtx)
  return trans_mtx_;
}
inline ::minieye::TransMatrix* CameraParam::release_trans_mtx() {
  clear_has_trans_mtx();
  ::minieye::TransMatrix* temp = trans_mtx_;
  trans_mtx_ = NULL;
  return temp;
}
inline void CameraParam::set_allocated_trans_mtx(::minieye::TransMatrix* trans_mtx) {
  delete trans_mtx_;
  trans_mtx_ = trans_mtx;
  if (trans_mtx) {
    set_has_trans_mtx();
  } else {
    clear_has_trans_mtx();
  }
  // @@protoc_insertion_point(field_set_allocated:minieye.CameraParam.trans_mtx)
}

// optional .minieye.ProjectionModel prj_model = 14;
inline bool CameraParam::has_prj_model() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CameraParam::set_has_prj_model() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CameraParam::clear_has_prj_model() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CameraParam::clear_prj_model() {
  prj_model_ = 0;
  clear_has_prj_model();
}
inline ::minieye::ProjectionModel CameraParam::prj_model() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.prj_model)
  return static_cast< ::minieye::ProjectionModel >(prj_model_);
}
inline void CameraParam::set_prj_model(::minieye::ProjectionModel value) {
  assert(::minieye::ProjectionModel_IsValid(value));
  set_has_prj_model();
  prj_model_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.prj_model)
}

// optional uint32 image_width = 15;
inline bool CameraParam::has_image_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CameraParam::set_has_image_width() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CameraParam::clear_has_image_width() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CameraParam::clear_image_width() {
  image_width_ = 0u;
  clear_has_image_width();
}
inline ::google::protobuf::uint32 CameraParam::image_width() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.image_width)
  return image_width_;
}
inline void CameraParam::set_image_width(::google::protobuf::uint32 value) {
  set_has_image_width();
  image_width_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.image_width)
}

// optional uint32 image_height = 16;
inline bool CameraParam::has_image_height() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CameraParam::set_has_image_height() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CameraParam::clear_has_image_height() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CameraParam::clear_image_height() {
  image_height_ = 0u;
  clear_has_image_height();
}
inline ::google::protobuf::uint32 CameraParam::image_height() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.image_height)
  return image_height_;
}
inline void CameraParam::set_image_height(::google::protobuf::uint32 value) {
  set_has_image_height();
  image_height_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.image_height)
}

// repeated double distort_coeffs = 17;
inline int CameraParam::distort_coeffs_size() const {
  return distort_coeffs_.size();
}
inline void CameraParam::clear_distort_coeffs() {
  distort_coeffs_.Clear();
}
inline double CameraParam::distort_coeffs(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.distort_coeffs)
  return distort_coeffs_.Get(index);
}
inline void CameraParam::set_distort_coeffs(int index, double value) {
  distort_coeffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.distort_coeffs)
}
inline void CameraParam::add_distort_coeffs(double value) {
  distort_coeffs_.Add(value);
  // @@protoc_insertion_point(field_add:minieye.CameraParam.distort_coeffs)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraParam::distort_coeffs() const {
  // @@protoc_insertion_point(field_list:minieye.CameraParam.distort_coeffs)
  return distort_coeffs_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraParam::mutable_distort_coeffs() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraParam.distort_coeffs)
  return &distort_coeffs_;
}

// optional uint32 camera_id = 18;
inline bool CameraParam::has_camera_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CameraParam::set_has_camera_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CameraParam::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CameraParam::clear_camera_id() {
  camera_id_ = 0u;
  clear_has_camera_id();
}
inline ::google::protobuf::uint32 CameraParam::camera_id() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.camera_id)
  return camera_id_;
}
inline void CameraParam::set_camera_id(::google::protobuf::uint32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.camera_id)
}

// optional bool is_valid = 19;
inline bool CameraParam::has_is_valid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CameraParam::set_has_is_valid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CameraParam::clear_has_is_valid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CameraParam::clear_is_valid() {
  is_valid_ = false;
  clear_has_is_valid();
}
inline bool CameraParam::is_valid() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.is_valid)
  return is_valid_;
}
inline void CameraParam::set_is_valid(bool value) {
  set_has_is_valid();
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.is_valid)
}

// optional int32 calib_method = 20;
inline bool CameraParam::has_calib_method() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CameraParam::set_has_calib_method() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CameraParam::clear_has_calib_method() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CameraParam::clear_calib_method() {
  calib_method_ = 0;
  clear_has_calib_method();
}
inline ::google::protobuf::int32 CameraParam::calib_method() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.calib_method)
  return calib_method_;
}
inline void CameraParam::set_calib_method(::google::protobuf::int32 value) {
  set_has_calib_method();
  calib_method_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.calib_method)
}

// optional uint64 calib_timestamp = 21;
inline bool CameraParam::has_calib_timestamp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CameraParam::set_has_calib_timestamp() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CameraParam::clear_has_calib_timestamp() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CameraParam::clear_calib_timestamp() {
  calib_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_calib_timestamp();
}
inline ::google::protobuf::uint64 CameraParam::calib_timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.calib_timestamp)
  return calib_timestamp_;
}
inline void CameraParam::set_calib_timestamp(::google::protobuf::uint64 value) {
  set_has_calib_timestamp();
  calib_timestamp_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraParam.calib_timestamp)
}

// -------------------------------------------------------------------

// CameraEmbeddedInfo

// optional uint32 frame_count = 1;
inline bool CameraEmbeddedInfo::has_frame_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraEmbeddedInfo::set_has_frame_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraEmbeddedInfo::clear_has_frame_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraEmbeddedInfo::clear_frame_count() {
  frame_count_ = 0u;
  clear_has_frame_count();
}
inline ::google::protobuf::uint32 CameraEmbeddedInfo::frame_count() const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.frame_count)
  return frame_count_;
}
inline void CameraEmbeddedInfo::set_frame_count(::google::protobuf::uint32 value) {
  set_has_frame_count();
  frame_count_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.frame_count)
}

// optional uint32 expo_num = 2;
inline bool CameraEmbeddedInfo::has_expo_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraEmbeddedInfo::set_has_expo_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraEmbeddedInfo::clear_has_expo_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraEmbeddedInfo::clear_expo_num() {
  expo_num_ = 0u;
  clear_has_expo_num();
}
inline ::google::protobuf::uint32 CameraEmbeddedInfo::expo_num() const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.expo_num)
  return expo_num_;
}
inline void CameraEmbeddedInfo::set_expo_num(::google::protobuf::uint32 value) {
  set_has_expo_num();
  expo_num_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.expo_num)
}

// repeated uint32 expo_ratio = 3;
inline int CameraEmbeddedInfo::expo_ratio_size() const {
  return expo_ratio_.size();
}
inline void CameraEmbeddedInfo::clear_expo_ratio() {
  expo_ratio_.Clear();
}
inline ::google::protobuf::uint32 CameraEmbeddedInfo::expo_ratio(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.expo_ratio)
  return expo_ratio_.Get(index);
}
inline void CameraEmbeddedInfo::set_expo_ratio(int index, ::google::protobuf::uint32 value) {
  expo_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.expo_ratio)
}
inline void CameraEmbeddedInfo::add_expo_ratio(::google::protobuf::uint32 value) {
  expo_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:minieye.CameraEmbeddedInfo.expo_ratio)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CameraEmbeddedInfo::expo_ratio() const {
  // @@protoc_insertion_point(field_list:minieye.CameraEmbeddedInfo.expo_ratio)
  return expo_ratio_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CameraEmbeddedInfo::mutable_expo_ratio() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraEmbeddedInfo.expo_ratio)
  return &expo_ratio_;
}

// repeated uint32 shutter_time = 4;
inline int CameraEmbeddedInfo::shutter_time_size() const {
  return shutter_time_.size();
}
inline void CameraEmbeddedInfo::clear_shutter_time() {
  shutter_time_.Clear();
}
inline ::google::protobuf::uint32 CameraEmbeddedInfo::shutter_time(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.shutter_time)
  return shutter_time_.Get(index);
}
inline void CameraEmbeddedInfo::set_shutter_time(int index, ::google::protobuf::uint32 value) {
  shutter_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.shutter_time)
}
inline void CameraEmbeddedInfo::add_shutter_time(::google::protobuf::uint32 value) {
  shutter_time_.Add(value);
  // @@protoc_insertion_point(field_add:minieye.CameraEmbeddedInfo.shutter_time)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CameraEmbeddedInfo::shutter_time() const {
  // @@protoc_insertion_point(field_list:minieye.CameraEmbeddedInfo.shutter_time)
  return shutter_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CameraEmbeddedInfo::mutable_shutter_time() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraEmbeddedInfo.shutter_time)
  return &shutter_time_;
}

// repeated float sensor_a_gain = 5;
inline int CameraEmbeddedInfo::sensor_a_gain_size() const {
  return sensor_a_gain_.size();
}
inline void CameraEmbeddedInfo::clear_sensor_a_gain() {
  sensor_a_gain_.Clear();
}
inline float CameraEmbeddedInfo::sensor_a_gain(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.sensor_a_gain)
  return sensor_a_gain_.Get(index);
}
inline void CameraEmbeddedInfo::set_sensor_a_gain(int index, float value) {
  sensor_a_gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.sensor_a_gain)
}
inline void CameraEmbeddedInfo::add_sensor_a_gain(float value) {
  sensor_a_gain_.Add(value);
  // @@protoc_insertion_point(field_add:minieye.CameraEmbeddedInfo.sensor_a_gain)
}
inline const ::google::protobuf::RepeatedField< float >&
CameraEmbeddedInfo::sensor_a_gain() const {
  // @@protoc_insertion_point(field_list:minieye.CameraEmbeddedInfo.sensor_a_gain)
  return sensor_a_gain_;
}
inline ::google::protobuf::RepeatedField< float >*
CameraEmbeddedInfo::mutable_sensor_a_gain() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraEmbeddedInfo.sensor_a_gain)
  return &sensor_a_gain_;
}

// repeated float sensor_d_gain = 6;
inline int CameraEmbeddedInfo::sensor_d_gain_size() const {
  return sensor_d_gain_.size();
}
inline void CameraEmbeddedInfo::clear_sensor_d_gain() {
  sensor_d_gain_.Clear();
}
inline float CameraEmbeddedInfo::sensor_d_gain(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.sensor_d_gain)
  return sensor_d_gain_.Get(index);
}
inline void CameraEmbeddedInfo::set_sensor_d_gain(int index, float value) {
  sensor_d_gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.sensor_d_gain)
}
inline void CameraEmbeddedInfo::add_sensor_d_gain(float value) {
  sensor_d_gain_.Add(value);
  // @@protoc_insertion_point(field_add:minieye.CameraEmbeddedInfo.sensor_d_gain)
}
inline const ::google::protobuf::RepeatedField< float >&
CameraEmbeddedInfo::sensor_d_gain() const {
  // @@protoc_insertion_point(field_list:minieye.CameraEmbeddedInfo.sensor_d_gain)
  return sensor_d_gain_;
}
inline ::google::protobuf::RepeatedField< float >*
CameraEmbeddedInfo::mutable_sensor_d_gain() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraEmbeddedInfo.sensor_d_gain)
  return &sensor_d_gain_;
}

// optional uint64 exp_start_camera_time_stamp = 7;
inline bool CameraEmbeddedInfo::has_exp_start_camera_time_stamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraEmbeddedInfo::set_has_exp_start_camera_time_stamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraEmbeddedInfo::clear_has_exp_start_camera_time_stamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraEmbeddedInfo::clear_exp_start_camera_time_stamp() {
  exp_start_camera_time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_exp_start_camera_time_stamp();
}
inline ::google::protobuf::uint64 CameraEmbeddedInfo::exp_start_camera_time_stamp() const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.exp_start_camera_time_stamp)
  return exp_start_camera_time_stamp_;
}
inline void CameraEmbeddedInfo::set_exp_start_camera_time_stamp(::google::protobuf::uint64 value) {
  set_has_exp_start_camera_time_stamp();
  exp_start_camera_time_stamp_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.exp_start_camera_time_stamp)
}

// optional uint64 exp_end_camera_time_stamp = 8;
inline bool CameraEmbeddedInfo::has_exp_end_camera_time_stamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraEmbeddedInfo::set_has_exp_end_camera_time_stamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraEmbeddedInfo::clear_has_exp_end_camera_time_stamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraEmbeddedInfo::clear_exp_end_camera_time_stamp() {
  exp_end_camera_time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_exp_end_camera_time_stamp();
}
inline ::google::protobuf::uint64 CameraEmbeddedInfo::exp_end_camera_time_stamp() const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.exp_end_camera_time_stamp)
  return exp_end_camera_time_stamp_;
}
inline void CameraEmbeddedInfo::set_exp_end_camera_time_stamp(::google::protobuf::uint64 value) {
  set_has_exp_end_camera_time_stamp();
  exp_end_camera_time_stamp_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.exp_end_camera_time_stamp)
}

// optional uint64 is_valid_bitmap = 64;
inline bool CameraEmbeddedInfo::has_is_valid_bitmap() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraEmbeddedInfo::set_has_is_valid_bitmap() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraEmbeddedInfo::clear_has_is_valid_bitmap() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraEmbeddedInfo::clear_is_valid_bitmap() {
  is_valid_bitmap_ = GOOGLE_ULONGLONG(0);
  clear_has_is_valid_bitmap();
}
inline ::google::protobuf::uint64 CameraEmbeddedInfo::is_valid_bitmap() const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.is_valid_bitmap)
  return is_valid_bitmap_;
}
inline void CameraEmbeddedInfo::set_is_valid_bitmap(::google::protobuf::uint64 value) {
  set_has_is_valid_bitmap();
  is_valid_bitmap_ = value;
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.is_valid_bitmap)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::minieye::ImageFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::ImageFormat>() {
  return ::minieye::ImageFormat_descriptor();
}
template <> struct is_proto_enum< ::minieye::CamDirect> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::CamDirect>() {
  return ::minieye::CamDirect_descriptor();
}
template <> struct is_proto_enum< ::minieye::CamFov> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::CamFov>() {
  return ::minieye::CamFov_descriptor();
}
template <> struct is_proto_enum< ::minieye::ProjectionModel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::ProjectionModel>() {
  return ::minieye::ProjectionModel_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_camera_2eproto__INCLUDED
