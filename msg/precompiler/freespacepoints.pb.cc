// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: freespacepoints.proto

#include "freespacepoints.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_freespacepoints_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleRects_freespacepoints_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_freespacepoints_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleSingleRect_freespacepoints_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_freespacepoints_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2D_freespacepoints_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_freespacepoints_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Points_freespacepoints_2eproto;
namespace freespacepoints {
class Point2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point2D> _instance;
} _Point2D_default_instance_;
class PointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Points> _instance;
} _Points_default_instance_;
class ObstacleSingleRectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleSingleRect> _instance;
} _ObstacleSingleRect_default_instance_;
class ObstacleRectsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleRects> _instance;
} _ObstacleRects_default_instance_;
class FreespacePointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FreespacePoints> _instance;
} _FreespacePoints_default_instance_;
}  // namespace freespacepoints
static void InitDefaultsscc_info_FreespacePoints_freespacepoints_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::freespacepoints::_FreespacePoints_default_instance_;
    new (ptr) ::freespacepoints::FreespacePoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::freespacepoints::FreespacePoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FreespacePoints_freespacepoints_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FreespacePoints_freespacepoints_2eproto}, {
      &scc_info_Points_freespacepoints_2eproto.base,
      &scc_info_ObstacleRects_freespacepoints_2eproto.base,}};

static void InitDefaultsscc_info_ObstacleRects_freespacepoints_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::freespacepoints::_ObstacleRects_default_instance_;
    new (ptr) ::freespacepoints::ObstacleRects();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::freespacepoints::ObstacleRects::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleRects_freespacepoints_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObstacleRects_freespacepoints_2eproto}, {
      &scc_info_ObstacleSingleRect_freespacepoints_2eproto.base,}};

static void InitDefaultsscc_info_ObstacleSingleRect_freespacepoints_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::freespacepoints::_ObstacleSingleRect_default_instance_;
    new (ptr) ::freespacepoints::ObstacleSingleRect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::freespacepoints::ObstacleSingleRect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleSingleRect_freespacepoints_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObstacleSingleRect_freespacepoints_2eproto}, {
      &scc_info_Point2D_freespacepoints_2eproto.base,}};

static void InitDefaultsscc_info_Point2D_freespacepoints_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::freespacepoints::_Point2D_default_instance_;
    new (ptr) ::freespacepoints::Point2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::freespacepoints::Point2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2D_freespacepoints_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point2D_freespacepoints_2eproto}, {}};

static void InitDefaultsscc_info_Points_freespacepoints_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::freespacepoints::_Points_default_instance_;
    new (ptr) ::freespacepoints::Points();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::freespacepoints::Points::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Points_freespacepoints_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Points_freespacepoints_2eproto}, {
      &scc_info_Point2D_freespacepoints_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_freespacepoints_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_freespacepoints_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_freespacepoints_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_freespacepoints_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::freespacepoints::Point2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::freespacepoints::Point2D, x_),
  PROTOBUF_FIELD_OFFSET(::freespacepoints::Point2D, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::freespacepoints::Points, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::freespacepoints::Points, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::freespacepoints::ObstacleSingleRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::freespacepoints::ObstacleSingleRect, conf_),
  PROTOBUF_FIELD_OFFSET(::freespacepoints::ObstacleSingleRect, type_),
  PROTOBUF_FIELD_OFFSET(::freespacepoints::ObstacleSingleRect, p0_),
  PROTOBUF_FIELD_OFFSET(::freespacepoints::ObstacleSingleRect, p1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::freespacepoints::ObstacleRects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::freespacepoints::ObstacleRects, rects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::freespacepoints::FreespacePoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::freespacepoints::FreespacePoints, timestamp_),
  PROTOBUF_FIELD_OFFSET(::freespacepoints::FreespacePoints, frame_id_),
  PROTOBUF_FIELD_OFFSET(::freespacepoints::FreespacePoints, tick_),
  PROTOBUF_FIELD_OFFSET(::freespacepoints::FreespacePoints, freespacepoints_),
  PROTOBUF_FIELD_OFFSET(::freespacepoints::FreespacePoints, obstacle_rects_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::freespacepoints::Point2D)},
  { 7, -1, sizeof(::freespacepoints::Points)},
  { 13, -1, sizeof(::freespacepoints::ObstacleSingleRect)},
  { 22, -1, sizeof(::freespacepoints::ObstacleRects)},
  { 28, -1, sizeof(::freespacepoints::FreespacePoints)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::freespacepoints::_Point2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::freespacepoints::_Points_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::freespacepoints::_ObstacleSingleRect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::freespacepoints::_ObstacleRects_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::freespacepoints::_FreespacePoints_default_instance_),
};

const char descriptor_table_protodef_freespacepoints_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025freespacepoints.proto\022\017freespacepoints"
  "\"\037\n\007Point2D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"2\n\006Poi"
  "nts\022(\n\006points\030\001 \003(\0132\030.freespacepoints.Po"
  "int2D\"\233\001\n\022ObstacleSingleRect\022\014\n\004conf\030\001 \001"
  "(\002\022+\n\004type\030\002 \001(\0162\035.freespacepoints.Obsta"
  "cleType\022$\n\002p0\030\003 \001(\0132\030.freespacepoints.Po"
  "int2D\022$\n\002p1\030\004 \001(\0132\030.freespacepoints.Poin"
  "t2D\"C\n\rObstacleRects\0222\n\005rects\030\002 \003(\0132#.fr"
  "eespacepoints.ObstacleSingleRect\"\256\001\n\017Fre"
  "espacePoints\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010frame"
  "_id\030\002 \001(\004\022\014\n\004tick\030\003 \001(\004\0220\n\017freespacepoin"
  "ts\030\004 \003(\0132\027.freespacepoints.Points\0226\n\016obs"
  "tacle_rects\030\005 \003(\0132\036.freespacepoints.Obst"
  "acleRects*\255\001\n\014ObstacleType\022\013\n\007kNormal\020\000\022"
  "\014\n\010kNoCrash\020\001\022\010\n\004kRod\020\002\022\014\n\010kVehicle\020\003\022\r\n"
  "\tkWheelTwo\020\004\022\n\n\006kRider\020\005\022\010\n\004kPed\020\006\022\t\n\005kC"
  "one\020\007\022\n\n\006kWsign\020\010\022\n\n\006kStone\020\t\022\n\n\006kPiles\020"
  "\n\022\t\n\005kLock\020\013\022\013\n\007kPillar\020\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_freespacepoints_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_freespacepoints_2eproto_sccs[5] = {
  &scc_info_FreespacePoints_freespacepoints_2eproto.base,
  &scc_info_ObstacleRects_freespacepoints_2eproto.base,
  &scc_info_ObstacleSingleRect_freespacepoints_2eproto.base,
  &scc_info_Point2D_freespacepoints_2eproto.base,
  &scc_info_Points_freespacepoints_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_freespacepoints_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_freespacepoints_2eproto = {
  false, false, descriptor_table_protodef_freespacepoints_2eproto, "freespacepoints.proto", 713,
  &descriptor_table_freespacepoints_2eproto_once, descriptor_table_freespacepoints_2eproto_sccs, descriptor_table_freespacepoints_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_freespacepoints_2eproto::offsets,
  file_level_metadata_freespacepoints_2eproto, 5, file_level_enum_descriptors_freespacepoints_2eproto, file_level_service_descriptors_freespacepoints_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_freespacepoints_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_freespacepoints_2eproto)), true);
namespace freespacepoints {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_freespacepoints_2eproto);
  return file_level_enum_descriptors_freespacepoints_2eproto[0];
}
bool ObstacleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Point2D::InitAsDefaultInstance() {
}
class Point2D::_Internal {
 public:
};

Point2D::Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:freespacepoints.Point2D)
}
Point2D::Point2D(const Point2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:freespacepoints.Point2D)
}

void Point2D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:freespacepoints.Point2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point2D::ArenaDtor(void* object) {
  Point2D* _this = reinterpret_cast< Point2D* >(object);
  (void)_this;
}
void Point2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point2D& Point2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point2D_freespacepoints_2eproto.base);
  return *internal_default_instance();
}


void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:freespacepoints.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:freespacepoints.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freespacepoints.Point2D)
  return target;
}

size_t Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:freespacepoints.Point2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:freespacepoints.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:freespacepoints.Point2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:freespacepoints.Point2D)
    MergeFrom(*source);
  }
}

void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:freespacepoints.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:freespacepoints.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:freespacepoints.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {
  return true;
}

void Point2D::InternalSwap(Point2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2D, y_)
      + sizeof(Point2D::y_)
      - PROTOBUF_FIELD_OFFSET(Point2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Points::InitAsDefaultInstance() {
}
class Points::_Internal {
 public:
};

Points::Points(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:freespacepoints.Points)
}
Points::Points(const Points& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:freespacepoints.Points)
}

void Points::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Points_freespacepoints_2eproto.base);
}

Points::~Points() {
  // @@protoc_insertion_point(destructor:freespacepoints.Points)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Points::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Points::ArenaDtor(void* object) {
  Points* _this = reinterpret_cast< Points* >(object);
  (void)_this;
}
void Points::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Points::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Points& Points::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Points_freespacepoints_2eproto.base);
  return *internal_default_instance();
}


void Points::Clear() {
// @@protoc_insertion_point(message_clear_start:freespacepoints.Points)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Points::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .freespacepoints.Point2D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Points::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:freespacepoints.Points)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .freespacepoints.Point2D points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freespacepoints.Points)
  return target;
}

size_t Points::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:freespacepoints.Points)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .freespacepoints.Point2D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Points::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:freespacepoints.Points)
  GOOGLE_DCHECK_NE(&from, this);
  const Points* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Points>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:freespacepoints.Points)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:freespacepoints.Points)
    MergeFrom(*source);
  }
}

void Points::MergeFrom(const Points& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:freespacepoints.Points)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void Points::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:freespacepoints.Points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Points::CopyFrom(const Points& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:freespacepoints.Points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Points::IsInitialized() const {
  return true;
}

void Points::InternalSwap(Points* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Points::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleSingleRect::InitAsDefaultInstance() {
  ::freespacepoints::_ObstacleSingleRect_default_instance_._instance.get_mutable()->p0_ = const_cast< ::freespacepoints::Point2D*>(
      ::freespacepoints::Point2D::internal_default_instance());
  ::freespacepoints::_ObstacleSingleRect_default_instance_._instance.get_mutable()->p1_ = const_cast< ::freespacepoints::Point2D*>(
      ::freespacepoints::Point2D::internal_default_instance());
}
class ObstacleSingleRect::_Internal {
 public:
  static const ::freespacepoints::Point2D& p0(const ObstacleSingleRect* msg);
  static const ::freespacepoints::Point2D& p1(const ObstacleSingleRect* msg);
};

const ::freespacepoints::Point2D&
ObstacleSingleRect::_Internal::p0(const ObstacleSingleRect* msg) {
  return *msg->p0_;
}
const ::freespacepoints::Point2D&
ObstacleSingleRect::_Internal::p1(const ObstacleSingleRect* msg) {
  return *msg->p1_;
}
ObstacleSingleRect::ObstacleSingleRect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:freespacepoints.ObstacleSingleRect)
}
ObstacleSingleRect::ObstacleSingleRect(const ObstacleSingleRect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_p0()) {
    p0_ = new ::freespacepoints::Point2D(*from.p0_);
  } else {
    p0_ = nullptr;
  }
  if (from._internal_has_p1()) {
    p1_ = new ::freespacepoints::Point2D(*from.p1_);
  } else {
    p1_ = nullptr;
  }
  ::memcpy(&conf_, &from.conf_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&conf_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:freespacepoints.ObstacleSingleRect)
}

void ObstacleSingleRect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleSingleRect_freespacepoints_2eproto.base);
  ::memset(&p0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&p0_)) + sizeof(type_));
}

ObstacleSingleRect::~ObstacleSingleRect() {
  // @@protoc_insertion_point(destructor:freespacepoints.ObstacleSingleRect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObstacleSingleRect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete p0_;
  if (this != internal_default_instance()) delete p1_;
}

void ObstacleSingleRect::ArenaDtor(void* object) {
  ObstacleSingleRect* _this = reinterpret_cast< ObstacleSingleRect* >(object);
  (void)_this;
}
void ObstacleSingleRect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleSingleRect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleSingleRect& ObstacleSingleRect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleSingleRect_freespacepoints_2eproto.base);
  return *internal_default_instance();
}


void ObstacleSingleRect::Clear() {
// @@protoc_insertion_point(message_clear_start:freespacepoints.ObstacleSingleRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && p0_ != nullptr) {
    delete p0_;
  }
  p0_ = nullptr;
  if (GetArena() == nullptr && p1_ != nullptr) {
    delete p1_;
  }
  p1_ = nullptr;
  ::memset(&conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&conf_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleSingleRect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          conf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .freespacepoints.ObstacleType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::freespacepoints::ObstacleType>(val));
        } else goto handle_unusual;
        continue;
      // .freespacepoints.Point2D p0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_p0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .freespacepoints.Point2D p1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_p1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleSingleRect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:freespacepoints.ObstacleSingleRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float conf = 1;
  if (!(this->conf() <= 0 && this->conf() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_conf(), target);
  }

  // .freespacepoints.ObstacleType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .freespacepoints.Point2D p0 = 3;
  if (this->has_p0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::p0(this), target, stream);
  }

  // .freespacepoints.Point2D p1 = 4;
  if (this->has_p1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::p1(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freespacepoints.ObstacleSingleRect)
  return target;
}

size_t ObstacleSingleRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:freespacepoints.ObstacleSingleRect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .freespacepoints.Point2D p0 = 3;
  if (this->has_p0()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p0_);
  }

  // .freespacepoints.Point2D p1 = 4;
  if (this->has_p1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p1_);
  }

  // float conf = 1;
  if (!(this->conf() <= 0 && this->conf() >= 0)) {
    total_size += 1 + 4;
  }

  // .freespacepoints.ObstacleType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleSingleRect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:freespacepoints.ObstacleSingleRect)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleSingleRect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleSingleRect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:freespacepoints.ObstacleSingleRect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:freespacepoints.ObstacleSingleRect)
    MergeFrom(*source);
  }
}

void ObstacleSingleRect::MergeFrom(const ObstacleSingleRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:freespacepoints.ObstacleSingleRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_p0()) {
    _internal_mutable_p0()->::freespacepoints::Point2D::MergeFrom(from._internal_p0());
  }
  if (from.has_p1()) {
    _internal_mutable_p1()->::freespacepoints::Point2D::MergeFrom(from._internal_p1());
  }
  if (!(from.conf() <= 0 && from.conf() >= 0)) {
    _internal_set_conf(from._internal_conf());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ObstacleSingleRect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:freespacepoints.ObstacleSingleRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleSingleRect::CopyFrom(const ObstacleSingleRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:freespacepoints.ObstacleSingleRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSingleRect::IsInitialized() const {
  return true;
}

void ObstacleSingleRect::InternalSwap(ObstacleSingleRect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleSingleRect, type_)
      + sizeof(ObstacleSingleRect::type_)
      - PROTOBUF_FIELD_OFFSET(ObstacleSingleRect, p0_)>(
          reinterpret_cast<char*>(&p0_),
          reinterpret_cast<char*>(&other->p0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleSingleRect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleRects::InitAsDefaultInstance() {
}
class ObstacleRects::_Internal {
 public:
};

ObstacleRects::ObstacleRects(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:freespacepoints.ObstacleRects)
}
ObstacleRects::ObstacleRects(const ObstacleRects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rects_(from.rects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:freespacepoints.ObstacleRects)
}

void ObstacleRects::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleRects_freespacepoints_2eproto.base);
}

ObstacleRects::~ObstacleRects() {
  // @@protoc_insertion_point(destructor:freespacepoints.ObstacleRects)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObstacleRects::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObstacleRects::ArenaDtor(void* object) {
  ObstacleRects* _this = reinterpret_cast< ObstacleRects* >(object);
  (void)_this;
}
void ObstacleRects::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleRects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleRects& ObstacleRects::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleRects_freespacepoints_2eproto.base);
  return *internal_default_instance();
}


void ObstacleRects::Clear() {
// @@protoc_insertion_point(message_clear_start:freespacepoints.ObstacleRects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleRects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .freespacepoints.ObstacleSingleRect rects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleRects::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:freespacepoints.ObstacleRects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .freespacepoints.ObstacleSingleRect rects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freespacepoints.ObstacleRects)
  return target;
}

size_t ObstacleRects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:freespacepoints.ObstacleRects)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .freespacepoints.ObstacleSingleRect rects = 2;
  total_size += 1UL * this->_internal_rects_size();
  for (const auto& msg : this->rects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleRects::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:freespacepoints.ObstacleRects)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleRects* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleRects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:freespacepoints.ObstacleRects)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:freespacepoints.ObstacleRects)
    MergeFrom(*source);
  }
}

void ObstacleRects::MergeFrom(const ObstacleRects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:freespacepoints.ObstacleRects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rects_.MergeFrom(from.rects_);
}

void ObstacleRects::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:freespacepoints.ObstacleRects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleRects::CopyFrom(const ObstacleRects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:freespacepoints.ObstacleRects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleRects::IsInitialized() const {
  return true;
}

void ObstacleRects::InternalSwap(ObstacleRects* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rects_.InternalSwap(&other->rects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleRects::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FreespacePoints::InitAsDefaultInstance() {
}
class FreespacePoints::_Internal {
 public:
};

FreespacePoints::FreespacePoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  freespacepoints_(arena),
  obstacle_rects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:freespacepoints.FreespacePoints)
}
FreespacePoints::FreespacePoints(const FreespacePoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      freespacepoints_(from.freespacepoints_),
      obstacle_rects_(from.obstacle_rects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:freespacepoints.FreespacePoints)
}

void FreespacePoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FreespacePoints_freespacepoints_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
}

FreespacePoints::~FreespacePoints() {
  // @@protoc_insertion_point(destructor:freespacepoints.FreespacePoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreespacePoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FreespacePoints::ArenaDtor(void* object) {
  FreespacePoints* _this = reinterpret_cast< FreespacePoints* >(object);
  (void)_this;
}
void FreespacePoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreespacePoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FreespacePoints& FreespacePoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FreespacePoints_freespacepoints_2eproto.base);
  return *internal_default_instance();
}


void FreespacePoints::Clear() {
// @@protoc_insertion_point(message_clear_start:freespacepoints.FreespacePoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  freespacepoints_.Clear();
  obstacle_rects_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreespacePoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .freespacepoints.Points freespacepoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_freespacepoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .freespacepoints.ObstacleRects obstacle_rects = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle_rects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreespacePoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:freespacepoints.FreespacePoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 frame_id = 2;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_frame_id(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  // repeated .freespacepoints.Points freespacepoints = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_freespacepoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_freespacepoints(i), target, stream);
  }

  // repeated .freespacepoints.ObstacleRects obstacle_rects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_rects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_obstacle_rects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freespacepoints.FreespacePoints)
  return target;
}

size_t FreespacePoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:freespacepoints.FreespacePoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .freespacepoints.Points freespacepoints = 4;
  total_size += 1UL * this->_internal_freespacepoints_size();
  for (const auto& msg : this->freespacepoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .freespacepoints.ObstacleRects obstacle_rects = 5;
  total_size += 1UL * this->_internal_obstacle_rects_size();
  for (const auto& msg : this->obstacle_rects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 frame_id = 2;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreespacePoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:freespacepoints.FreespacePoints)
  GOOGLE_DCHECK_NE(&from, this);
  const FreespacePoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreespacePoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:freespacepoints.FreespacePoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:freespacepoints.FreespacePoints)
    MergeFrom(*source);
  }
}

void FreespacePoints::MergeFrom(const FreespacePoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:freespacepoints.FreespacePoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  freespacepoints_.MergeFrom(from.freespacepoints_);
  obstacle_rects_.MergeFrom(from.obstacle_rects_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void FreespacePoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:freespacepoints.FreespacePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreespacePoints::CopyFrom(const FreespacePoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:freespacepoints.FreespacePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreespacePoints::IsInitialized() const {
  return true;
}

void FreespacePoints::InternalSwap(FreespacePoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  freespacepoints_.InternalSwap(&other->freespacepoints_);
  obstacle_rects_.InternalSwap(&other->obstacle_rects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreespacePoints, tick_)
      + sizeof(FreespacePoints::tick_)
      - PROTOBUF_FIELD_OFFSET(FreespacePoints, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreespacePoints::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace freespacepoints
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::freespacepoints::Point2D* Arena::CreateMaybeMessage< ::freespacepoints::Point2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::freespacepoints::Point2D >(arena);
}
template<> PROTOBUF_NOINLINE ::freespacepoints::Points* Arena::CreateMaybeMessage< ::freespacepoints::Points >(Arena* arena) {
  return Arena::CreateMessageInternal< ::freespacepoints::Points >(arena);
}
template<> PROTOBUF_NOINLINE ::freespacepoints::ObstacleSingleRect* Arena::CreateMaybeMessage< ::freespacepoints::ObstacleSingleRect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::freespacepoints::ObstacleSingleRect >(arena);
}
template<> PROTOBUF_NOINLINE ::freespacepoints::ObstacleRects* Arena::CreateMaybeMessage< ::freespacepoints::ObstacleRects >(Arena* arena) {
  return Arena::CreateMessageInternal< ::freespacepoints::ObstacleRects >(arena);
}
template<> PROTOBUF_NOINLINE ::freespacepoints::FreespacePoints* Arena::CreateMaybeMessage< ::freespacepoints::FreespacePoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::freespacepoints::FreespacePoints >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
