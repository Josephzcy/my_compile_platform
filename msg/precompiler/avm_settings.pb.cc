// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avm_settings.proto

#include "avm_settings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_avm_5fsettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AVMSettings_SettingsEntry_DoNotUse_avm_5fsettings_2eproto;
namespace minieye {
class AVMSettings_SettingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AVMSettings_SettingsEntry_DoNotUse> _instance;
} _AVMSettings_SettingsEntry_DoNotUse_default_instance_;
class AVMSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AVMSettings> _instance;
} _AVMSettings_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_AVMSettings_avm_5fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_AVMSettings_default_instance_;
    new (ptr) ::minieye::AVMSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::AVMSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AVMSettings_avm_5fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AVMSettings_avm_5fsettings_2eproto}, {
      &scc_info_AVMSettings_SettingsEntry_DoNotUse_avm_5fsettings_2eproto.base,}};

static void InitDefaultsscc_info_AVMSettings_SettingsEntry_DoNotUse_avm_5fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_AVMSettings_SettingsEntry_DoNotUse_default_instance_;
    new (ptr) ::minieye::AVMSettings_SettingsEntry_DoNotUse();
  }
  ::minieye::AVMSettings_SettingsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AVMSettings_SettingsEntry_DoNotUse_avm_5fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AVMSettings_SettingsEntry_DoNotUse_avm_5fsettings_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_avm_5fsettings_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_avm_5fsettings_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_avm_5fsettings_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_avm_5fsettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::minieye::AVMSettings_SettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minieye::AVMSettings_SettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::AVMSettings_SettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minieye::AVMSettings_SettingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::AVMSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::AVMSettings, settings_),
  PROTOBUF_FIELD_OFFSET(::minieye::AVMSettings, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::AVMSettings, tick_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::minieye::AVMSettings_SettingsEntry_DoNotUse)},
  { 9, -1, sizeof(::minieye::AVMSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_AVMSettings_SettingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_AVMSettings_default_instance_),
};

const char descriptor_table_protodef_avm_5fsettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022avm_settings.proto\022\007minieye\"\253\005\n\013AVMSet"
  "tings\0224\n\010settings\030\001 \003(\0132\".minieye.AVMSet"
  "tings.SettingsEntry\022\021\n\ttimestamp\030\002 \001(\004\022\014"
  "\n\004tick\030\003 \001(\004\032/\n\rSettingsEntry\022\013\n\003key\030\001 \001"
  "(\005\022\r\n\005value\030\002 \001(\005:\0028\001\"\223\004\n\013SettingType\022\026\n"
  "\022AVM_OP_VIEW_DVR_SW\020\000\022\027\n\023BtnPressInputVa"
  "lueX\020\001\022\027\n\023BtnPressInputValueY\020\002\022\014\n\010Touch"
  "Evt\020\003\022\025\n\021AVMViewModeSwitch\020\004\022\021\n\rLicenseP"
  "late1\020\005\022\021\n\rLicensePlate2\020\006\022\021\n\rLicensePla"
  "te3\020\007\022\021\n\rLicensePlate4\020\010\022\021\n\rLicensePlate"
  "5\020\t\022\021\n\rLicensePlate6\020\n\022\021\n\rLicensePlate7\020"
  "\013\022\021\n\rLicensePlate8\020\014\022\034\n\030AVMTransparentHo"
  "odSwitch\020\r\022\022\n\016AVMTrailSwitch\020\016\022\014\n\010Langua"
  "ge\020\017\022\021\n\rRadarWarining\020\020\022\020\n\014Transparency\020"
  "\021\022\020\n\014LicensePlate\020\022\022\r\n\tGuideLine\020\023\022\025\n\021AV"
  "MCalibrationReq\020\024\022\023\n\017RCTAWarningLeft\020\025\022\024"
  "\n\020RCTAWarningRight\020\026\022\022\n\016LHTurnlightSts\020\027"
  "\022\022\n\016RHTurnlightSts\020\030\022\r\n\tAPAStatus\020\031b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_avm_5fsettings_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_avm_5fsettings_2eproto_sccs[2] = {
  &scc_info_AVMSettings_avm_5fsettings_2eproto.base,
  &scc_info_AVMSettings_SettingsEntry_DoNotUse_avm_5fsettings_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_avm_5fsettings_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_avm_5fsettings_2eproto = {
  false, false, descriptor_table_protodef_avm_5fsettings_2eproto, "avm_settings.proto", 723,
  &descriptor_table_avm_5fsettings_2eproto_once, descriptor_table_avm_5fsettings_2eproto_sccs, descriptor_table_avm_5fsettings_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_avm_5fsettings_2eproto::offsets,
  file_level_metadata_avm_5fsettings_2eproto, 2, file_level_enum_descriptors_avm_5fsettings_2eproto, file_level_service_descriptors_avm_5fsettings_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_avm_5fsettings_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_avm_5fsettings_2eproto)), true);
namespace minieye {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AVMSettings_SettingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_avm_5fsettings_2eproto);
  return file_level_enum_descriptors_avm_5fsettings_2eproto[0];
}
bool AVMSettings_SettingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AVMSettings_SettingType AVMSettings::AVM_OP_VIEW_DVR_SW;
constexpr AVMSettings_SettingType AVMSettings::BtnPressInputValueX;
constexpr AVMSettings_SettingType AVMSettings::BtnPressInputValueY;
constexpr AVMSettings_SettingType AVMSettings::TouchEvt;
constexpr AVMSettings_SettingType AVMSettings::AVMViewModeSwitch;
constexpr AVMSettings_SettingType AVMSettings::LicensePlate1;
constexpr AVMSettings_SettingType AVMSettings::LicensePlate2;
constexpr AVMSettings_SettingType AVMSettings::LicensePlate3;
constexpr AVMSettings_SettingType AVMSettings::LicensePlate4;
constexpr AVMSettings_SettingType AVMSettings::LicensePlate5;
constexpr AVMSettings_SettingType AVMSettings::LicensePlate6;
constexpr AVMSettings_SettingType AVMSettings::LicensePlate7;
constexpr AVMSettings_SettingType AVMSettings::LicensePlate8;
constexpr AVMSettings_SettingType AVMSettings::AVMTransparentHoodSwitch;
constexpr AVMSettings_SettingType AVMSettings::AVMTrailSwitch;
constexpr AVMSettings_SettingType AVMSettings::Language;
constexpr AVMSettings_SettingType AVMSettings::RadarWarining;
constexpr AVMSettings_SettingType AVMSettings::Transparency;
constexpr AVMSettings_SettingType AVMSettings::LicensePlate;
constexpr AVMSettings_SettingType AVMSettings::GuideLine;
constexpr AVMSettings_SettingType AVMSettings::AVMCalibrationReq;
constexpr AVMSettings_SettingType AVMSettings::RCTAWarningLeft;
constexpr AVMSettings_SettingType AVMSettings::RCTAWarningRight;
constexpr AVMSettings_SettingType AVMSettings::LHTurnlightSts;
constexpr AVMSettings_SettingType AVMSettings::RHTurnlightSts;
constexpr AVMSettings_SettingType AVMSettings::APAStatus;
constexpr AVMSettings_SettingType AVMSettings::SettingType_MIN;
constexpr AVMSettings_SettingType AVMSettings::SettingType_MAX;
constexpr int AVMSettings::SettingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

AVMSettings_SettingsEntry_DoNotUse::AVMSettings_SettingsEntry_DoNotUse() {}
AVMSettings_SettingsEntry_DoNotUse::AVMSettings_SettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AVMSettings_SettingsEntry_DoNotUse::MergeFrom(const AVMSettings_SettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AVMSettings_SettingsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AVMSettings_SettingsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AVMSettings::InitAsDefaultInstance() {
}
class AVMSettings::_Internal {
 public:
};

AVMSettings::AVMSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  settings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.AVMSettings)
}
AVMSettings::AVMSettings(const AVMSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  settings_.MergeFrom(from.settings_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.AVMSettings)
}

void AVMSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AVMSettings_avm_5fsettings_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
}

AVMSettings::~AVMSettings() {
  // @@protoc_insertion_point(destructor:minieye.AVMSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AVMSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AVMSettings::ArenaDtor(void* object) {
  AVMSettings* _this = reinterpret_cast< AVMSettings* >(object);
  (void)_this;
}
void AVMSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AVMSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AVMSettings& AVMSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AVMSettings_avm_5fsettings_2eproto.base);
  return *internal_default_instance();
}


void AVMSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.AVMSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AVMSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, int32> settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&settings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AVMSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.AVMSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> settings = 1;
  if (!this->_internal_settings().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_settings().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_settings().begin();
          it != this->_internal_settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AVMSettings_SettingsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_settings().begin();
          it != this->_internal_settings().end(); ++it) {
        target = AVMSettings_SettingsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.AVMSettings)
  return target;
}

size_t AVMSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.AVMSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> settings = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_settings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_settings().begin();
      it != this->_internal_settings().end(); ++it) {
    total_size += AVMSettings_SettingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AVMSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.AVMSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const AVMSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AVMSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.AVMSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.AVMSettings)
    MergeFrom(*source);
  }
}

void AVMSettings::MergeFrom(const AVMSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.AVMSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void AVMSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.AVMSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AVMSettings::CopyFrom(const AVMSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.AVMSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AVMSettings::IsInitialized() const {
  return true;
}

void AVMSettings::InternalSwap(AVMSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  settings_.Swap(&other->settings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AVMSettings, tick_)
      + sizeof(AVMSettings::tick_)
      - PROTOBUF_FIELD_OFFSET(AVMSettings, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AVMSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::AVMSettings_SettingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::minieye::AVMSettings_SettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::AVMSettings_SettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::AVMSettings* Arena::CreateMaybeMessage< ::minieye::AVMSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::AVMSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
