// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RawInsParkingSpace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RawInsParkingSpace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RawInsParkingSpace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RawInsParkingSpace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RawInsParkingSpace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RawInsParkingSpace_2eproto;
namespace perception {
class RawCornerPt;
class RawCornerPtDefaultTypeInternal;
extern RawCornerPtDefaultTypeInternal _RawCornerPt_default_instance_;
class RawInsParkingSlot;
class RawInsParkingSlotDefaultTypeInternal;
extern RawInsParkingSlotDefaultTypeInternal _RawInsParkingSlot_default_instance_;
class RawInsParkingSpace;
class RawInsParkingSpaceDefaultTypeInternal;
extern RawInsParkingSpaceDefaultTypeInternal _RawInsParkingSpace_default_instance_;
class RawRodPt;
class RawRodPtDefaultTypeInternal;
extern RawRodPtDefaultTypeInternal _RawRodPt_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::RawCornerPt* Arena::CreateMaybeMessage<::perception::RawCornerPt>(Arena*);
template<> ::perception::RawInsParkingSlot* Arena::CreateMaybeMessage<::perception::RawInsParkingSlot>(Arena*);
template<> ::perception::RawInsParkingSpace* Arena::CreateMaybeMessage<::perception::RawInsParkingSpace>(Arena*);
template<> ::perception::RawRodPt* Arena::CreateMaybeMessage<::perception::RawRodPt>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

// ===================================================================

class RawCornerPt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.RawCornerPt) */ {
 public:
  inline RawCornerPt() : RawCornerPt(nullptr) {};
  virtual ~RawCornerPt();

  RawCornerPt(const RawCornerPt& from);
  RawCornerPt(RawCornerPt&& from) noexcept
    : RawCornerPt() {
    *this = ::std::move(from);
  }

  inline RawCornerPt& operator=(const RawCornerPt& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawCornerPt& operator=(RawCornerPt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawCornerPt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawCornerPt* internal_default_instance() {
    return reinterpret_cast<const RawCornerPt*>(
               &_RawCornerPt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RawCornerPt& a, RawCornerPt& b) {
    a.Swap(&b);
  }
  inline void Swap(RawCornerPt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawCornerPt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawCornerPt* New() const final {
    return CreateMaybeMessage<RawCornerPt>(nullptr);
  }

  RawCornerPt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawCornerPt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawCornerPt& from);
  void MergeFrom(const RawCornerPt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawCornerPt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.RawCornerPt";
  }
  protected:
  explicit RawCornerPt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RawInsParkingSpace_2eproto);
    return ::descriptor_table_RawInsParkingSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsEntryFieldNumber = 1,
    kIsGoodFieldNumber = 2,
    kMaskIdFieldNumber = 5,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // bool is_entry = 1;
  void clear_is_entry();
  bool is_entry() const;
  void set_is_entry(bool value);
  private:
  bool _internal_is_entry() const;
  void _internal_set_is_entry(bool value);
  public:

  // bool is_good = 2;
  void clear_is_good();
  bool is_good() const;
  void set_is_good(bool value);
  private:
  bool _internal_is_good() const;
  void _internal_set_is_good(bool value);
  public:

  // int32 mask_id = 5;
  void clear_mask_id();
  ::PROTOBUF_NAMESPACE_ID::int32 mask_id() const;
  void set_mask_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mask_id() const;
  void _internal_set_mask_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double x = 3;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 4;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:perception.RawCornerPt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_entry_;
  bool is_good_;
  ::PROTOBUF_NAMESPACE_ID::int32 mask_id_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RawInsParkingSpace_2eproto;
};
// -------------------------------------------------------------------

class RawRodPt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.RawRodPt) */ {
 public:
  inline RawRodPt() : RawRodPt(nullptr) {};
  virtual ~RawRodPt();

  RawRodPt(const RawRodPt& from);
  RawRodPt(RawRodPt&& from) noexcept
    : RawRodPt() {
    *this = ::std::move(from);
  }

  inline RawRodPt& operator=(const RawRodPt& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawRodPt& operator=(RawRodPt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawRodPt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawRodPt* internal_default_instance() {
    return reinterpret_cast<const RawRodPt*>(
               &_RawRodPt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RawRodPt& a, RawRodPt& b) {
    a.Swap(&b);
  }
  inline void Swap(RawRodPt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawRodPt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawRodPt* New() const final {
    return CreateMaybeMessage<RawRodPt>(nullptr);
  }

  RawRodPt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawRodPt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawRodPt& from);
  void MergeFrom(const RawRodPt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawRodPt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.RawRodPt";
  }
  protected:
  explicit RawRodPt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RawInsParkingSpace_2eproto);
    return ::descriptor_table_RawInsParkingSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:perception.RawRodPt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RawInsParkingSpace_2eproto;
};
// -------------------------------------------------------------------

class RawInsParkingSlot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.RawInsParkingSlot) */ {
 public:
  inline RawInsParkingSlot() : RawInsParkingSlot(nullptr) {};
  virtual ~RawInsParkingSlot();

  RawInsParkingSlot(const RawInsParkingSlot& from);
  RawInsParkingSlot(RawInsParkingSlot&& from) noexcept
    : RawInsParkingSlot() {
    *this = ::std::move(from);
  }

  inline RawInsParkingSlot& operator=(const RawInsParkingSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawInsParkingSlot& operator=(RawInsParkingSlot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawInsParkingSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawInsParkingSlot* internal_default_instance() {
    return reinterpret_cast<const RawInsParkingSlot*>(
               &_RawInsParkingSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RawInsParkingSlot& a, RawInsParkingSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(RawInsParkingSlot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawInsParkingSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawInsParkingSlot* New() const final {
    return CreateMaybeMessage<RawInsParkingSlot>(nullptr);
  }

  RawInsParkingSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawInsParkingSlot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawInsParkingSlot& from);
  void MergeFrom(const RawInsParkingSlot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawInsParkingSlot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.RawInsParkingSlot";
  }
  protected:
  explicit RawInsParkingSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RawInsParkingSpace_2eproto);
    return ::descriptor_table_RawInsParkingSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCornerPtsFieldNumber = 4,
    kRodPtsFieldNumber = 6,
    kCenterPtFieldNumber = 2,
    kConfidenceFieldNumber = 1,
    kOccupiedFieldNumber = 3,
    kExistRodFieldNumber = 5,
  };
  // repeated .perception.RawCornerPt corner_pts = 4;
  int corner_pts_size() const;
  private:
  int _internal_corner_pts_size() const;
  public:
  void clear_corner_pts();
  ::perception::RawCornerPt* mutable_corner_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawCornerPt >*
      mutable_corner_pts();
  private:
  const ::perception::RawCornerPt& _internal_corner_pts(int index) const;
  ::perception::RawCornerPt* _internal_add_corner_pts();
  public:
  const ::perception::RawCornerPt& corner_pts(int index) const;
  ::perception::RawCornerPt* add_corner_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawCornerPt >&
      corner_pts() const;

  // repeated .perception.RawRodPt rod_pts = 6;
  int rod_pts_size() const;
  private:
  int _internal_rod_pts_size() const;
  public:
  void clear_rod_pts();
  ::perception::RawRodPt* mutable_rod_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawRodPt >*
      mutable_rod_pts();
  private:
  const ::perception::RawRodPt& _internal_rod_pts(int index) const;
  ::perception::RawRodPt* _internal_add_rod_pts();
  public:
  const ::perception::RawRodPt& rod_pts(int index) const;
  ::perception::RawRodPt* add_rod_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawRodPt >&
      rod_pts() const;

  // .perception.RawCornerPt center_pt = 2;
  bool has_center_pt() const;
  private:
  bool _internal_has_center_pt() const;
  public:
  void clear_center_pt();
  const ::perception::RawCornerPt& center_pt() const;
  ::perception::RawCornerPt* release_center_pt();
  ::perception::RawCornerPt* mutable_center_pt();
  void set_allocated_center_pt(::perception::RawCornerPt* center_pt);
  private:
  const ::perception::RawCornerPt& _internal_center_pt() const;
  ::perception::RawCornerPt* _internal_mutable_center_pt();
  public:
  void unsafe_arena_set_allocated_center_pt(
      ::perception::RawCornerPt* center_pt);
  ::perception::RawCornerPt* unsafe_arena_release_center_pt();

  // double confidence = 1;
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // bool occupied = 3;
  void clear_occupied();
  bool occupied() const;
  void set_occupied(bool value);
  private:
  bool _internal_occupied() const;
  void _internal_set_occupied(bool value);
  public:

  // bool exist_rod = 5;
  void clear_exist_rod();
  bool exist_rod() const;
  void set_exist_rod(bool value);
  private:
  bool _internal_exist_rod() const;
  void _internal_set_exist_rod(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perception.RawInsParkingSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawCornerPt > corner_pts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawRodPt > rod_pts_;
  ::perception::RawCornerPt* center_pt_;
  double confidence_;
  bool occupied_;
  bool exist_rod_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RawInsParkingSpace_2eproto;
};
// -------------------------------------------------------------------

class RawInsParkingSpace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.RawInsParkingSpace) */ {
 public:
  inline RawInsParkingSpace() : RawInsParkingSpace(nullptr) {};
  virtual ~RawInsParkingSpace();

  RawInsParkingSpace(const RawInsParkingSpace& from);
  RawInsParkingSpace(RawInsParkingSpace&& from) noexcept
    : RawInsParkingSpace() {
    *this = ::std::move(from);
  }

  inline RawInsParkingSpace& operator=(const RawInsParkingSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawInsParkingSpace& operator=(RawInsParkingSpace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawInsParkingSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawInsParkingSpace* internal_default_instance() {
    return reinterpret_cast<const RawInsParkingSpace*>(
               &_RawInsParkingSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RawInsParkingSpace& a, RawInsParkingSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(RawInsParkingSpace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawInsParkingSpace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawInsParkingSpace* New() const final {
    return CreateMaybeMessage<RawInsParkingSpace>(nullptr);
  }

  RawInsParkingSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawInsParkingSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawInsParkingSpace& from);
  void MergeFrom(const RawInsParkingSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawInsParkingSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.RawInsParkingSpace";
  }
  protected:
  explicit RawInsParkingSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RawInsParkingSpace_2eproto);
    return ::descriptor_table_RawInsParkingSpace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsPsFieldNumber = 4,
    kHmRodPtsFieldNumber = 5,
    kFrameIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // repeated .perception.RawInsParkingSlot ins_ps = 4;
  int ins_ps_size() const;
  private:
  int _internal_ins_ps_size() const;
  public:
  void clear_ins_ps();
  ::perception::RawInsParkingSlot* mutable_ins_ps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawInsParkingSlot >*
      mutable_ins_ps();
  private:
  const ::perception::RawInsParkingSlot& _internal_ins_ps(int index) const;
  ::perception::RawInsParkingSlot* _internal_add_ins_ps();
  public:
  const ::perception::RawInsParkingSlot& ins_ps(int index) const;
  ::perception::RawInsParkingSlot* add_ins_ps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawInsParkingSlot >&
      ins_ps() const;

  // repeated .perception.RawRodPt hm_rod_pts = 5;
  int hm_rod_pts_size() const;
  private:
  int _internal_hm_rod_pts_size() const;
  public:
  void clear_hm_rod_pts();
  ::perception::RawRodPt* mutable_hm_rod_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawRodPt >*
      mutable_hm_rod_pts();
  private:
  const ::perception::RawRodPt& _internal_hm_rod_pts(int index) const;
  ::perception::RawRodPt* _internal_add_hm_rod_pts();
  public:
  const ::perception::RawRodPt& hm_rod_pts(int index) const;
  ::perception::RawRodPt* add_hm_rod_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawRodPt >&
      hm_rod_pts() const;

  // uint64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.RawInsParkingSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawInsParkingSlot > ins_ps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawRodPt > hm_rod_pts_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RawInsParkingSpace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RawCornerPt

// bool is_entry = 1;
inline void RawCornerPt::clear_is_entry() {
  is_entry_ = false;
}
inline bool RawCornerPt::_internal_is_entry() const {
  return is_entry_;
}
inline bool RawCornerPt::is_entry() const {
  // @@protoc_insertion_point(field_get:perception.RawCornerPt.is_entry)
  return _internal_is_entry();
}
inline void RawCornerPt::_internal_set_is_entry(bool value) {
  
  is_entry_ = value;
}
inline void RawCornerPt::set_is_entry(bool value) {
  _internal_set_is_entry(value);
  // @@protoc_insertion_point(field_set:perception.RawCornerPt.is_entry)
}

// bool is_good = 2;
inline void RawCornerPt::clear_is_good() {
  is_good_ = false;
}
inline bool RawCornerPt::_internal_is_good() const {
  return is_good_;
}
inline bool RawCornerPt::is_good() const {
  // @@protoc_insertion_point(field_get:perception.RawCornerPt.is_good)
  return _internal_is_good();
}
inline void RawCornerPt::_internal_set_is_good(bool value) {
  
  is_good_ = value;
}
inline void RawCornerPt::set_is_good(bool value) {
  _internal_set_is_good(value);
  // @@protoc_insertion_point(field_set:perception.RawCornerPt.is_good)
}

// double x = 3;
inline void RawCornerPt::clear_x() {
  x_ = 0;
}
inline double RawCornerPt::_internal_x() const {
  return x_;
}
inline double RawCornerPt::x() const {
  // @@protoc_insertion_point(field_get:perception.RawCornerPt.x)
  return _internal_x();
}
inline void RawCornerPt::_internal_set_x(double value) {
  
  x_ = value;
}
inline void RawCornerPt::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.RawCornerPt.x)
}

// double y = 4;
inline void RawCornerPt::clear_y() {
  y_ = 0;
}
inline double RawCornerPt::_internal_y() const {
  return y_;
}
inline double RawCornerPt::y() const {
  // @@protoc_insertion_point(field_get:perception.RawCornerPt.y)
  return _internal_y();
}
inline void RawCornerPt::_internal_set_y(double value) {
  
  y_ = value;
}
inline void RawCornerPt::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.RawCornerPt.y)
}

// int32 mask_id = 5;
inline void RawCornerPt::clear_mask_id() {
  mask_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RawCornerPt::_internal_mask_id() const {
  return mask_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RawCornerPt::mask_id() const {
  // @@protoc_insertion_point(field_get:perception.RawCornerPt.mask_id)
  return _internal_mask_id();
}
inline void RawCornerPt::_internal_set_mask_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mask_id_ = value;
}
inline void RawCornerPt::set_mask_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mask_id(value);
  // @@protoc_insertion_point(field_set:perception.RawCornerPt.mask_id)
}

// -------------------------------------------------------------------

// RawRodPt

// double x = 1;
inline void RawRodPt::clear_x() {
  x_ = 0;
}
inline double RawRodPt::_internal_x() const {
  return x_;
}
inline double RawRodPt::x() const {
  // @@protoc_insertion_point(field_get:perception.RawRodPt.x)
  return _internal_x();
}
inline void RawRodPt::_internal_set_x(double value) {
  
  x_ = value;
}
inline void RawRodPt::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.RawRodPt.x)
}

// double y = 2;
inline void RawRodPt::clear_y() {
  y_ = 0;
}
inline double RawRodPt::_internal_y() const {
  return y_;
}
inline double RawRodPt::y() const {
  // @@protoc_insertion_point(field_get:perception.RawRodPt.y)
  return _internal_y();
}
inline void RawRodPt::_internal_set_y(double value) {
  
  y_ = value;
}
inline void RawRodPt::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.RawRodPt.y)
}

// -------------------------------------------------------------------

// RawInsParkingSlot

// double confidence = 1;
inline void RawInsParkingSlot::clear_confidence() {
  confidence_ = 0;
}
inline double RawInsParkingSlot::_internal_confidence() const {
  return confidence_;
}
inline double RawInsParkingSlot::confidence() const {
  // @@protoc_insertion_point(field_get:perception.RawInsParkingSlot.confidence)
  return _internal_confidence();
}
inline void RawInsParkingSlot::_internal_set_confidence(double value) {
  
  confidence_ = value;
}
inline void RawInsParkingSlot::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:perception.RawInsParkingSlot.confidence)
}

// .perception.RawCornerPt center_pt = 2;
inline bool RawInsParkingSlot::_internal_has_center_pt() const {
  return this != internal_default_instance() && center_pt_ != nullptr;
}
inline bool RawInsParkingSlot::has_center_pt() const {
  return _internal_has_center_pt();
}
inline void RawInsParkingSlot::clear_center_pt() {
  if (GetArena() == nullptr && center_pt_ != nullptr) {
    delete center_pt_;
  }
  center_pt_ = nullptr;
}
inline const ::perception::RawCornerPt& RawInsParkingSlot::_internal_center_pt() const {
  const ::perception::RawCornerPt* p = center_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::RawCornerPt*>(
      &::perception::_RawCornerPt_default_instance_);
}
inline const ::perception::RawCornerPt& RawInsParkingSlot::center_pt() const {
  // @@protoc_insertion_point(field_get:perception.RawInsParkingSlot.center_pt)
  return _internal_center_pt();
}
inline void RawInsParkingSlot::unsafe_arena_set_allocated_center_pt(
    ::perception::RawCornerPt* center_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_pt_);
  }
  center_pt_ = center_pt;
  if (center_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.RawInsParkingSlot.center_pt)
}
inline ::perception::RawCornerPt* RawInsParkingSlot::release_center_pt() {
  auto temp = unsafe_arena_release_center_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::RawCornerPt* RawInsParkingSlot::unsafe_arena_release_center_pt() {
  // @@protoc_insertion_point(field_release:perception.RawInsParkingSlot.center_pt)
  
  ::perception::RawCornerPt* temp = center_pt_;
  center_pt_ = nullptr;
  return temp;
}
inline ::perception::RawCornerPt* RawInsParkingSlot::_internal_mutable_center_pt() {
  
  if (center_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::RawCornerPt>(GetArena());
    center_pt_ = p;
  }
  return center_pt_;
}
inline ::perception::RawCornerPt* RawInsParkingSlot::mutable_center_pt() {
  // @@protoc_insertion_point(field_mutable:perception.RawInsParkingSlot.center_pt)
  return _internal_mutable_center_pt();
}
inline void RawInsParkingSlot::set_allocated_center_pt(::perception::RawCornerPt* center_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_pt_;
  }
  if (center_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center_pt);
    if (message_arena != submessage_arena) {
      center_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_pt, submessage_arena);
    }
    
  } else {
    
  }
  center_pt_ = center_pt;
  // @@protoc_insertion_point(field_set_allocated:perception.RawInsParkingSlot.center_pt)
}

// bool occupied = 3;
inline void RawInsParkingSlot::clear_occupied() {
  occupied_ = false;
}
inline bool RawInsParkingSlot::_internal_occupied() const {
  return occupied_;
}
inline bool RawInsParkingSlot::occupied() const {
  // @@protoc_insertion_point(field_get:perception.RawInsParkingSlot.occupied)
  return _internal_occupied();
}
inline void RawInsParkingSlot::_internal_set_occupied(bool value) {
  
  occupied_ = value;
}
inline void RawInsParkingSlot::set_occupied(bool value) {
  _internal_set_occupied(value);
  // @@protoc_insertion_point(field_set:perception.RawInsParkingSlot.occupied)
}

// repeated .perception.RawCornerPt corner_pts = 4;
inline int RawInsParkingSlot::_internal_corner_pts_size() const {
  return corner_pts_.size();
}
inline int RawInsParkingSlot::corner_pts_size() const {
  return _internal_corner_pts_size();
}
inline void RawInsParkingSlot::clear_corner_pts() {
  corner_pts_.Clear();
}
inline ::perception::RawCornerPt* RawInsParkingSlot::mutable_corner_pts(int index) {
  // @@protoc_insertion_point(field_mutable:perception.RawInsParkingSlot.corner_pts)
  return corner_pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawCornerPt >*
RawInsParkingSlot::mutable_corner_pts() {
  // @@protoc_insertion_point(field_mutable_list:perception.RawInsParkingSlot.corner_pts)
  return &corner_pts_;
}
inline const ::perception::RawCornerPt& RawInsParkingSlot::_internal_corner_pts(int index) const {
  return corner_pts_.Get(index);
}
inline const ::perception::RawCornerPt& RawInsParkingSlot::corner_pts(int index) const {
  // @@protoc_insertion_point(field_get:perception.RawInsParkingSlot.corner_pts)
  return _internal_corner_pts(index);
}
inline ::perception::RawCornerPt* RawInsParkingSlot::_internal_add_corner_pts() {
  return corner_pts_.Add();
}
inline ::perception::RawCornerPt* RawInsParkingSlot::add_corner_pts() {
  // @@protoc_insertion_point(field_add:perception.RawInsParkingSlot.corner_pts)
  return _internal_add_corner_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawCornerPt >&
RawInsParkingSlot::corner_pts() const {
  // @@protoc_insertion_point(field_list:perception.RawInsParkingSlot.corner_pts)
  return corner_pts_;
}

// bool exist_rod = 5;
inline void RawInsParkingSlot::clear_exist_rod() {
  exist_rod_ = false;
}
inline bool RawInsParkingSlot::_internal_exist_rod() const {
  return exist_rod_;
}
inline bool RawInsParkingSlot::exist_rod() const {
  // @@protoc_insertion_point(field_get:perception.RawInsParkingSlot.exist_rod)
  return _internal_exist_rod();
}
inline void RawInsParkingSlot::_internal_set_exist_rod(bool value) {
  
  exist_rod_ = value;
}
inline void RawInsParkingSlot::set_exist_rod(bool value) {
  _internal_set_exist_rod(value);
  // @@protoc_insertion_point(field_set:perception.RawInsParkingSlot.exist_rod)
}

// repeated .perception.RawRodPt rod_pts = 6;
inline int RawInsParkingSlot::_internal_rod_pts_size() const {
  return rod_pts_.size();
}
inline int RawInsParkingSlot::rod_pts_size() const {
  return _internal_rod_pts_size();
}
inline void RawInsParkingSlot::clear_rod_pts() {
  rod_pts_.Clear();
}
inline ::perception::RawRodPt* RawInsParkingSlot::mutable_rod_pts(int index) {
  // @@protoc_insertion_point(field_mutable:perception.RawInsParkingSlot.rod_pts)
  return rod_pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawRodPt >*
RawInsParkingSlot::mutable_rod_pts() {
  // @@protoc_insertion_point(field_mutable_list:perception.RawInsParkingSlot.rod_pts)
  return &rod_pts_;
}
inline const ::perception::RawRodPt& RawInsParkingSlot::_internal_rod_pts(int index) const {
  return rod_pts_.Get(index);
}
inline const ::perception::RawRodPt& RawInsParkingSlot::rod_pts(int index) const {
  // @@protoc_insertion_point(field_get:perception.RawInsParkingSlot.rod_pts)
  return _internal_rod_pts(index);
}
inline ::perception::RawRodPt* RawInsParkingSlot::_internal_add_rod_pts() {
  return rod_pts_.Add();
}
inline ::perception::RawRodPt* RawInsParkingSlot::add_rod_pts() {
  // @@protoc_insertion_point(field_add:perception.RawInsParkingSlot.rod_pts)
  return _internal_add_rod_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawRodPt >&
RawInsParkingSlot::rod_pts() const {
  // @@protoc_insertion_point(field_list:perception.RawInsParkingSlot.rod_pts)
  return rod_pts_;
}

// -------------------------------------------------------------------

// RawInsParkingSpace

// uint64 frame_id = 1;
inline void RawInsParkingSpace::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawInsParkingSpace::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawInsParkingSpace::frame_id() const {
  // @@protoc_insertion_point(field_get:perception.RawInsParkingSpace.frame_id)
  return _internal_frame_id();
}
inline void RawInsParkingSpace::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void RawInsParkingSpace::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:perception.RawInsParkingSpace.frame_id)
}

// uint64 timestamp = 2;
inline void RawInsParkingSpace::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawInsParkingSpace::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawInsParkingSpace::timestamp() const {
  // @@protoc_insertion_point(field_get:perception.RawInsParkingSpace.timestamp)
  return _internal_timestamp();
}
inline void RawInsParkingSpace::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void RawInsParkingSpace::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perception.RawInsParkingSpace.timestamp)
}

// uint64 tick = 3;
inline void RawInsParkingSpace::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawInsParkingSpace::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawInsParkingSpace::tick() const {
  // @@protoc_insertion_point(field_get:perception.RawInsParkingSpace.tick)
  return _internal_tick();
}
inline void RawInsParkingSpace::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void RawInsParkingSpace::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:perception.RawInsParkingSpace.tick)
}

// repeated .perception.RawInsParkingSlot ins_ps = 4;
inline int RawInsParkingSpace::_internal_ins_ps_size() const {
  return ins_ps_.size();
}
inline int RawInsParkingSpace::ins_ps_size() const {
  return _internal_ins_ps_size();
}
inline void RawInsParkingSpace::clear_ins_ps() {
  ins_ps_.Clear();
}
inline ::perception::RawInsParkingSlot* RawInsParkingSpace::mutable_ins_ps(int index) {
  // @@protoc_insertion_point(field_mutable:perception.RawInsParkingSpace.ins_ps)
  return ins_ps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawInsParkingSlot >*
RawInsParkingSpace::mutable_ins_ps() {
  // @@protoc_insertion_point(field_mutable_list:perception.RawInsParkingSpace.ins_ps)
  return &ins_ps_;
}
inline const ::perception::RawInsParkingSlot& RawInsParkingSpace::_internal_ins_ps(int index) const {
  return ins_ps_.Get(index);
}
inline const ::perception::RawInsParkingSlot& RawInsParkingSpace::ins_ps(int index) const {
  // @@protoc_insertion_point(field_get:perception.RawInsParkingSpace.ins_ps)
  return _internal_ins_ps(index);
}
inline ::perception::RawInsParkingSlot* RawInsParkingSpace::_internal_add_ins_ps() {
  return ins_ps_.Add();
}
inline ::perception::RawInsParkingSlot* RawInsParkingSpace::add_ins_ps() {
  // @@protoc_insertion_point(field_add:perception.RawInsParkingSpace.ins_ps)
  return _internal_add_ins_ps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawInsParkingSlot >&
RawInsParkingSpace::ins_ps() const {
  // @@protoc_insertion_point(field_list:perception.RawInsParkingSpace.ins_ps)
  return ins_ps_;
}

// repeated .perception.RawRodPt hm_rod_pts = 5;
inline int RawInsParkingSpace::_internal_hm_rod_pts_size() const {
  return hm_rod_pts_.size();
}
inline int RawInsParkingSpace::hm_rod_pts_size() const {
  return _internal_hm_rod_pts_size();
}
inline void RawInsParkingSpace::clear_hm_rod_pts() {
  hm_rod_pts_.Clear();
}
inline ::perception::RawRodPt* RawInsParkingSpace::mutable_hm_rod_pts(int index) {
  // @@protoc_insertion_point(field_mutable:perception.RawInsParkingSpace.hm_rod_pts)
  return hm_rod_pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawRodPt >*
RawInsParkingSpace::mutable_hm_rod_pts() {
  // @@protoc_insertion_point(field_mutable_list:perception.RawInsParkingSpace.hm_rod_pts)
  return &hm_rod_pts_;
}
inline const ::perception::RawRodPt& RawInsParkingSpace::_internal_hm_rod_pts(int index) const {
  return hm_rod_pts_.Get(index);
}
inline const ::perception::RawRodPt& RawInsParkingSpace::hm_rod_pts(int index) const {
  // @@protoc_insertion_point(field_get:perception.RawInsParkingSpace.hm_rod_pts)
  return _internal_hm_rod_pts(index);
}
inline ::perception::RawRodPt* RawInsParkingSpace::_internal_add_hm_rod_pts() {
  return hm_rod_pts_.Add();
}
inline ::perception::RawRodPt* RawInsParkingSpace::add_hm_rod_pts() {
  // @@protoc_insertion_point(field_add:perception.RawInsParkingSpace.hm_rod_pts)
  return _internal_add_hm_rod_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RawRodPt >&
RawInsParkingSpace::hm_rod_pts() const {
  // @@protoc_insertion_point(field_list:perception.RawInsParkingSpace.hm_rod_pts)
  return hm_rod_pts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RawInsParkingSpace_2eproto
