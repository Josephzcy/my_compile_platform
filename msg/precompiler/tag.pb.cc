// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tag.proto

#include "tag.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tag_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataTag_tag_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tag_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Range_tag_2eproto;
namespace minieye {
class DataTagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataTag> _instance;
} _DataTag_default_instance_;
class RangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Range> _instance;
} _Range_default_instance_;
class TagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tags> _instance;
} _Tags_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_DataTag_tag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_DataTag_default_instance_;
    new (ptr) ::minieye::DataTag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::DataTag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataTag_tag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataTag_tag_2eproto}, {}};

static void InitDefaultsscc_info_Range_tag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_Range_default_instance_;
    new (ptr) ::minieye::Range();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::Range::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Range_tag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Range_tag_2eproto}, {
      &scc_info_DataTag_tag_2eproto.base,}};

static void InitDefaultsscc_info_Tags_tag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_Tags_default_instance_;
    new (ptr) ::minieye::Tags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::Tags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Tags_tag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Tags_tag_2eproto}, {
      &scc_info_DataTag_tag_2eproto.base,
      &scc_info_Range_tag_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tag_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tag_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tag_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tag_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::DataTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::DataTag, label_),
  PROTOBUF_FIELD_OFFSET(::minieye::DataTag, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::Range, start_time_ms_),
  PROTOBUF_FIELD_OFFSET(::minieye::Range, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::minieye::Range, start_frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::Range, end_frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::Range, tags_),
  PROTOBUF_FIELD_OFFSET(::minieye::Range, note_),
  PROTOBUF_FIELD_OFFSET(::minieye::Range, camera_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::Tags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::Tags, tags_),
  PROTOBUF_FIELD_OFFSET(::minieye::Tags, ranges_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::DataTag)},
  { 7, -1, sizeof(::minieye::Range)},
  { 19, -1, sizeof(::minieye::Tags)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_DataTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_Tags_default_instance_),
};

const char descriptor_table_protodef_tag_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ttag.proto\022\007minieye\"\262\002\n\007DataTag\022(\n\005labe"
  "l\030\001 \001(\0162\031.minieye.DataTag.TagLabel\022\013\n\003va"
  "l\030\002 \001(\005\"\357\001\n\010TagLabel\022\024\n\020RoadConditionTag"
  "\020\000\022\014\n\010ColorTag\020\001\022\023\n\017LanelineTypeTag\020\002\022\014\n"
  "\010SlopeTag\020\003\022\022\n\016WeatherCondTag\020\004\022\023\n\017Illum"
  "inationTag\020\005\022\016\n\nObjTypeTag\020\006\022\013\n\007AreaTag\020"
  "\007\022\024\n\020WorkConditionTag\020\010\022\016\n\nObjDistTag\020\t\022"
  "\016\n\nDensityTag\020\n\022\017\n\013PositionTag\020\013\022\017\n\013Stan"
  "dardTag\020\014\"\244\001\n\005Range\022\025\n\rstart_time_ms\030\001 \001"
  "(\004\022\023\n\013duration_ms\030\002 \001(\004\022\026\n\016start_frame_i"
  "d\030\003 \001(\004\022\024\n\014end_frame_id\030\004 \001(\004\022\036\n\004tags\030\005 "
  "\003(\0132\020.minieye.DataTag\022\014\n\004note\030\006 \001(\t\022\023\n\013c"
  "amera_name\030\007 \001(\t\"F\n\004Tags\022\036\n\004tags\030\001 \003(\0132\020"
  ".minieye.DataTag\022\036\n\006ranges\030\002 \003(\0132\016.minie"
  "ye.Range*\373\001\n\020RoadConditionTag\022\020\n\014Straigh"
  "tRoad\020\000\022\022\n\016SmallCurveRoad\020\001\022\023\n\017MiddleCur"
  "veRoad\020\002\022\020\n\014BigCurveRoad\020\003\022\016\n\nSCurveRoad"
  "\020\004\022\014\n\010Junction\020\005\022\017\n\013QuarterTurn\020\006\022\014\n\010Abr"
  "asion\020\007\022\025\n\021AbandonedLaneline\020\010\022\025\n\021Suspec"
  "tedLaneline\020\t\022\016\n\nCharacters\020\n\022\020\n\014ManHole"
  "Cover\020\013\022\r\n\tSpeedBump\020\014*\?\n\010ColorTag\022\t\n\005Wh"
  "ite\020\000\022\n\n\006Yellow\020\001\022\010\n\004Blue\020\002\022\007\n\003Red\020\003\022\t\n\005"
  "Green\020\004*\235\001\n\017LanelineTypeTag\022\n\n\006Dashed\020\000\022"
  "\t\n\005Solid\020\001\022\017\n\013DashedSolid\020\002\022\017\n\013DoubleSol"
  "id\020\003\022\020\n\014DoubleDashed\020\004\022\021\n\rDoubleDecLine\020"
  "\005\022\021\n\rSingleDecLine\020\006\022\010\n\004Bold\020\007\022\017\n\013SolidD"
  "ashed\020\010*:\n\010SlopeTag\022\010\n\004Flat\020\000\022\010\n\004Bump\020\001\022"
  "\013\n\007UpSlope\020\002\022\r\n\tDownSlope\020\003*\200\001\n\016WeatherC"
  "ondTag\022\t\n\005Shine\020\000\022\n\n\006Cloudy\020\001\022\r\n\tHeavyRa"
  "in\020\002\022\r\n\tLightRain\020\003\022\r\n\tSnowCover\020\004\022\016\n\nWa"
  "terCover\020\005\022\014\n\010HeavyFog\020\006\022\014\n\010LightFog\020\007*I"
  "\n\017IlluminationTag\022\007\n\003Day\020\000\022\t\n\005Night\020\001\022\n\n"
  "\006LowSun\020\002\022\n\n\006Shadow\020\003\022\n\n\006Tunnel\020\004*\311\002\n\nOb"
  "jTypeTag\022\007\n\003Car\020\000\022\007\n\003SUV\020\001\022\007\n\003Bus\020\002\022\013\n\007M"
  "iniBus\020\003\022\007\n\003MPV\020\004\022\014\n\010TipTruck\020\005\022\n\n\006PickU"
  "p\020\006\022\014\n\010BoxTruck\020\007\022\014\n\010Tricycle\020\010\022\013\n\007OilTa"
  "nk\020\t\022\020\n\014CementTanker\020\n\022\013\n\007SlagCar\020\013\022\t\n\005I"
  "veco\020\014\022\016\n\nStrangeVeh\020\r\022\020\n\014MunicipalVeh\020\016"
  "\022\r\n\tMotorBike\020\017\022\013\n\007Bicycle\020\020\022\016\n\nElectroC"
  "ar\020\021\022\t\n\005Adult\020\022\022\t\n\005Child\020\023\022\r\n\tPoliceCar\020"
  "\024\022\r\n\tAmbulance\020\025\022\r\n\tFireTruck\020\026\022\014\n\010kSpec"
  "ial\020\027*C\n\007AreaTag\022\010\n\004City\020\000\022\013\n\007Highway\020\001\022"
  "\013\n\007Village\020\002\022\010\n\004Town\020\003\022\n\n\006InDoor\020\004*\251\001\n\020W"
  "orkConditionTag\022\014\n\010Far2Near\020\000\022\014\n\010Near2Fa"
  "r\020\001\022\027\n\023CruisingByFollowing\020\002\022\023\n\017Cruising"
  "InCurve\020\003\022\007\n\003Jam\020\004\022\021\n\rInOutJunction\020\005\022\020\n"
  "\014TunnelEscape\020\006\022\016\n\nIntoTunnel\020\007\022\r\n\tTurnR"
  "ound\020\010*+\n\nObjDistTag\022\010\n\004Near\020\000\022\n\n\006Middle"
  "\020\001\022\007\n\003Far\020\002*#\n\nDensityTag\022\t\n\005Dense\020\000\022\n\n\006"
  "Sparse\020\001*\"\n\013PositionTag\022\t\n\005Front\020\000\022\010\n\004Si"
  "de\020\001*\?\n\013StandardTag\022\013\n\007S_33577\020\000\022\t\n\005S_88"
  "3\020\001\022\013\n\007S_Cncap\020\002\022\013\n\007S_Eucap\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tag_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tag_2eproto_sccs[3] = {
  &scc_info_DataTag_tag_2eproto.base,
  &scc_info_Range_tag_2eproto.base,
  &scc_info_Tags_tag_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tag_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tag_2eproto = {
  false, false, descriptor_table_protodef_tag_2eproto, "tag.proto", 2077,
  &descriptor_table_tag_2eproto_once, descriptor_table_tag_2eproto_sccs, descriptor_table_tag_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_tag_2eproto::offsets,
  file_level_metadata_tag_2eproto, 3, file_level_enum_descriptors_tag_2eproto, file_level_service_descriptors_tag_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tag_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tag_2eproto)), true);
namespace minieye {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataTag_TagLabel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[0];
}
bool DataTag_TagLabel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DataTag_TagLabel DataTag::RoadConditionTag;
constexpr DataTag_TagLabel DataTag::ColorTag;
constexpr DataTag_TagLabel DataTag::LanelineTypeTag;
constexpr DataTag_TagLabel DataTag::SlopeTag;
constexpr DataTag_TagLabel DataTag::WeatherCondTag;
constexpr DataTag_TagLabel DataTag::IlluminationTag;
constexpr DataTag_TagLabel DataTag::ObjTypeTag;
constexpr DataTag_TagLabel DataTag::AreaTag;
constexpr DataTag_TagLabel DataTag::WorkConditionTag;
constexpr DataTag_TagLabel DataTag::ObjDistTag;
constexpr DataTag_TagLabel DataTag::DensityTag;
constexpr DataTag_TagLabel DataTag::PositionTag;
constexpr DataTag_TagLabel DataTag::StandardTag;
constexpr DataTag_TagLabel DataTag::TagLabel_MIN;
constexpr DataTag_TagLabel DataTag::TagLabel_MAX;
constexpr int DataTag::TagLabel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadConditionTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[1];
}
bool RoadConditionTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColorTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[2];
}
bool ColorTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanelineTypeTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[3];
}
bool LanelineTypeTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SlopeTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[4];
}
bool SlopeTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeatherCondTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[5];
}
bool WeatherCondTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IlluminationTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[6];
}
bool IlluminationTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjTypeTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[7];
}
bool ObjTypeTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AreaTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[8];
}
bool AreaTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkConditionTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[9];
}
bool WorkConditionTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjDistTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[10];
}
bool ObjDistTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DensityTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[11];
}
bool DensityTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[12];
}
bool PositionTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StandardTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tag_2eproto);
  return file_level_enum_descriptors_tag_2eproto[13];
}
bool StandardTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DataTag::InitAsDefaultInstance() {
}
class DataTag::_Internal {
 public:
};

DataTag::DataTag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.DataTag)
}
DataTag::DataTag(const DataTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&label_, &from.label_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&label_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:minieye.DataTag)
}

void DataTag::SharedCtor() {
  ::memset(&label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&label_)) + sizeof(val_));
}

DataTag::~DataTag() {
  // @@protoc_insertion_point(destructor:minieye.DataTag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataTag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataTag::ArenaDtor(void* object) {
  DataTag* _this = reinterpret_cast< DataTag* >(object);
  (void)_this;
}
void DataTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataTag& DataTag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataTag_tag_2eproto.base);
  return *internal_default_instance();
}


void DataTag::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.DataTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&label_)) + sizeof(val_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.DataTag.TagLabel label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_label(static_cast<::minieye::DataTag_TagLabel>(val));
        } else goto handle_unusual;
        continue;
      // int32 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.DataTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.DataTag.TagLabel label = 1;
  if (this->label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_label(), target);
  }

  // int32 val = 2;
  if (this->val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.DataTag)
  return target;
}

size_t DataTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.DataTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.DataTag.TagLabel label = 1;
  if (this->label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_label());
  }

  // int32 val = 2;
  if (this->val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataTag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.DataTag)
  GOOGLE_DCHECK_NE(&from, this);
  const DataTag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.DataTag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.DataTag)
    MergeFrom(*source);
  }
}

void DataTag::MergeFrom(const DataTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.DataTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.label() != 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.val() != 0) {
    _internal_set_val(from._internal_val());
  }
}

void DataTag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.DataTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTag::CopyFrom(const DataTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.DataTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTag::IsInitialized() const {
  return true;
}

void DataTag::InternalSwap(DataTag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataTag, val_)
      + sizeof(DataTag::val_)
      - PROTOBUF_FIELD_OFFSET(DataTag, label_)>(
          reinterpret_cast<char*>(&label_),
          reinterpret_cast<char*>(&other->label_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataTag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Range::InitAsDefaultInstance() {
}
class Range::_Internal {
 public:
};

Range::Range(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.Range)
}
Range::Range(const Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_note().empty()) {
    note_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_note(),
      GetArena());
  }
  camera_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_camera_name().empty()) {
    camera_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_camera_name(),
      GetArena());
  }
  ::memcpy(&start_time_ms_, &from.start_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_frame_id_) -
    reinterpret_cast<char*>(&start_time_ms_)) + sizeof(end_frame_id_));
  // @@protoc_insertion_point(copy_constructor:minieye.Range)
}

void Range::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Range_tag_2eproto.base);
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_frame_id_) -
      reinterpret_cast<char*>(&start_time_ms_)) + sizeof(end_frame_id_));
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:minieye.Range)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Range::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Range::ArenaDtor(void* object) {
  Range* _this = reinterpret_cast< Range* >(object);
  (void)_this;
}
void Range::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Range& Range::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Range_tag_2eproto.base);
  return *internal_default_instance();
}


void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  note_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&start_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_frame_id_) -
      reinterpret_cast<char*>(&start_time_ms_)) + sizeof(end_frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 start_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minieye.DataTag tags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string note = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minieye.Range.note"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string camera_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minieye.Range.camera_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Range::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_time_ms = 1;
  if (this->start_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_start_time_ms(), target);
  }

  // uint64 duration_ms = 2;
  if (this->duration_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_duration_ms(), target);
  }

  // uint64 start_frame_id = 3;
  if (this->start_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_start_frame_id(), target);
  }

  // uint64 end_frame_id = 4;
  if (this->end_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_end_frame_id(), target);
  }

  // repeated .minieye.DataTag tags = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_tags(i), target, stream);
  }

  // string note = 6;
  if (this->note().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minieye.Range.note");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_note(), target);
  }

  // string camera_name = 7;
  if (this->camera_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_name().data(), static_cast<int>(this->_internal_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minieye.Range.camera_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_camera_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.Range)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.DataTag tags = 5;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string note = 6;
  if (this->note().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note());
  }

  // string camera_name = 7;
  if (this->camera_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_name());
  }

  // uint64 start_time_ms = 1;
  if (this->start_time_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_time_ms());
  }

  // uint64 duration_ms = 2;
  if (this->duration_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_duration_ms());
  }

  // uint64 start_frame_id = 3;
  if (this->start_frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_frame_id());
  }

  // uint64 end_frame_id = 4;
  if (this->end_frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Range::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Range* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Range>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.Range)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.Range)
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.note().size() > 0) {
    _internal_set_note(from._internal_note());
  }
  if (from.camera_name().size() > 0) {
    _internal_set_camera_name(from._internal_camera_name());
  }
  if (from.start_time_ms() != 0) {
    _internal_set_start_time_ms(from._internal_start_time_ms());
  }
  if (from.duration_ms() != 0) {
    _internal_set_duration_ms(from._internal_duration_ms());
  }
  if (from.start_frame_id() != 0) {
    _internal_set_start_frame_id(from._internal_start_frame_id());
  }
  if (from.end_frame_id() != 0) {
    _internal_set_end_frame_id(from._internal_end_frame_id());
  }
}

void Range::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::InternalSwap(Range* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  note_.Swap(&other->note_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera_name_.Swap(&other->camera_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Range, end_frame_id_)
      + sizeof(Range::end_frame_id_)
      - PROTOBUF_FIELD_OFFSET(Range, start_time_ms_)>(
          reinterpret_cast<char*>(&start_time_ms_),
          reinterpret_cast<char*>(&other->start_time_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Range::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tags::InitAsDefaultInstance() {
}
class Tags::_Internal {
 public:
};

Tags::Tags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena),
  ranges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.Tags)
}
Tags::Tags(const Tags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_),
      ranges_(from.ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minieye.Tags)
}

void Tags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tags_tag_2eproto.base);
}

Tags::~Tags() {
  // @@protoc_insertion_point(destructor:minieye.Tags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Tags::ArenaDtor(void* object) {
  Tags* _this = reinterpret_cast< Tags* >(object);
  (void)_this;
}
void Tags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tags& Tags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tags_tag_2eproto.base);
  return *internal_default_instance();
}


void Tags::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.Tags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  ranges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .minieye.DataTag tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.Range ranges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.Tags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minieye.DataTag tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tags(i), target, stream);
  }

  // repeated .minieye.Range ranges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.Tags)
  return target;
}

size_t Tags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.Tags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.DataTag tags = 1;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.Range ranges = 2;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.Tags)
  GOOGLE_DCHECK_NE(&from, this);
  const Tags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.Tags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.Tags)
    MergeFrom(*source);
  }
}

void Tags::MergeFrom(const Tags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.Tags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  ranges_.MergeFrom(from.ranges_);
}

void Tags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.Tags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tags::CopyFrom(const Tags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.Tags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tags::IsInitialized() const {
  return true;
}

void Tags::InternalSwap(Tags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  ranges_.InternalSwap(&other->ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tags::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::DataTag* Arena::CreateMaybeMessage< ::minieye::DataTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::DataTag >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::Range* Arena::CreateMaybeMessage< ::minieye::Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::Range >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::Tags* Arena::CreateMaybeMessage< ::minieye::Tags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::Tags >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
