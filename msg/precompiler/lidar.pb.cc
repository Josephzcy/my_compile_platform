// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidar.proto

#include "lidar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point3D_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lidar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_lidarFrame_Rect3D_lidar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lidar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_lidarFrame_SingleLidarTarget_lidar_2eproto;
namespace perception {
class lidarFrame_Rect3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<lidarFrame_Rect3D> _instance;
} _lidarFrame_Rect3D_default_instance_;
class lidarFrame_SingleLidarTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<lidarFrame_SingleLidarTarget> _instance;
} _lidarFrame_SingleLidarTarget_default_instance_;
class lidarFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<lidarFrame> _instance;
} _lidarFrame_default_instance_;
}  // namespace perception
static void InitDefaultsscc_info_lidarFrame_lidar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_lidarFrame_default_instance_;
    new (ptr) ::perception::lidarFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::lidarFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_lidarFrame_lidar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_lidarFrame_lidar_2eproto}, {
      &scc_info_lidarFrame_SingleLidarTarget_lidar_2eproto.base,}};

static void InitDefaultsscc_info_lidarFrame_Rect3D_lidar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_lidarFrame_Rect3D_default_instance_;
    new (ptr) ::perception::lidarFrame_Rect3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::lidarFrame_Rect3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_lidarFrame_Rect3D_lidar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_lidarFrame_Rect3D_lidar_2eproto}, {
      &scc_info_Point3D_geometry_2eproto.base,}};

static void InitDefaultsscc_info_lidarFrame_SingleLidarTarget_lidar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_lidarFrame_SingleLidarTarget_default_instance_;
    new (ptr) ::perception::lidarFrame_SingleLidarTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::lidarFrame_SingleLidarTarget::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_lidarFrame_SingleLidarTarget_lidar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_lidarFrame_SingleLidarTarget_lidar_2eproto}, {
      &scc_info_lidarFrame_Rect3D_lidar_2eproto.base,
      &scc_info_Point3D_geometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lidar_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lidar_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lidar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lidar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_Rect3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_Rect3D, center_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_Rect3D, center_std_dev_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_Rect3D, size_lwh_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_Rect3D, size_std_dev_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_Rect3D, corners_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_Rect3D, orientation_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_Rect3D, orientation_std_dev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_SingleLidarTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_SingleLidarTarget, id_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_SingleLidarTarget, cls_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_SingleLidarTarget, moving_state_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_SingleLidarTarget, track_state_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_SingleLidarTarget, confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_SingleLidarTarget, existence_probability_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_SingleLidarTarget, rect_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_SingleLidarTarget, velocity_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_SingleLidarTarget, contour_points_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame_SingleLidarTarget, time_creation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame, seq_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame, tick_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame, lidar_meas_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame, is_valid_),
  PROTOBUF_FIELD_OFFSET(::perception::lidarFrame, lidar_state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perception::lidarFrame_Rect3D)},
  { 12, -1, sizeof(::perception::lidarFrame_SingleLidarTarget)},
  { 27, -1, sizeof(::perception::lidarFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_lidarFrame_Rect3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_lidarFrame_SingleLidarTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_lidarFrame_default_instance_),
};

const char descriptor_table_protodef_lidar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013lidar.proto\022\nperception\032\016geometry.prot"
  "o\"\374\005\n\nlidarFrame\022\013\n\003seq\030\001 \001(\r\022\014\n\004tick\030\002 "
  "\001(\004\022\021\n\ttimestamp\030\003 \001(\004\022<\n\nlidar_meas\030\004 \003"
  "(\0132(.perception.lidarFrame.SingleLidarTa"
  "rget\022\020\n\010is_valid\030\005 \001(\010\022\023\n\013lidar_state\030\006 "
  "\001(\r\032\247\002\n\006Rect3D\022*\n\006center\030\001 \001(\0132\032.percept"
  "ion.common.Point3D\0222\n\016center_std_dev\030\002 \001"
  "(\0132\032.perception.common.Point3D\022,\n\010size_l"
  "wh\030\003 \001(\0132\032.perception.common.Point3D\0220\n\014"
  "size_std_dev\030\004 \001(\0132\032.perception.common.P"
  "oint3D\022+\n\007corners\030\005 \003(\0132\032.perception.com"
  "mon.Point3D\022\023\n\013orientation\030\006 \001(\002\022\033\n\023orie"
  "ntation_std_dev\030\007 \001(\002\032\260\002\n\021SingleLidarTar"
  "get\022\n\n\002id\030\001 \001(\r\022\013\n\003cls\030\002 \001(\r\022\024\n\014moving_s"
  "tate\030\003 \001(\r\022\023\n\013track_state\030\004 \001(\r\022\022\n\nconfi"
  "dence\030\005 \001(\002\022\035\n\025existence_probability\030\006 \001"
  "(\002\022+\n\004rect\030\007 \001(\0132\035.perception.lidarFrame"
  ".Rect3D\022,\n\010velocity\030\010 \001(\0132\032.perception.c"
  "ommon.Point3D\0222\n\016contour_points\030\t \003(\0132\032."
  "perception.common.Point3D\022\025\n\rtime_creati"
  "on\030\n \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lidar_2eproto_deps[1] = {
  &::descriptor_table_geometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lidar_2eproto_sccs[3] = {
  &scc_info_lidarFrame_lidar_2eproto.base,
  &scc_info_lidarFrame_Rect3D_lidar_2eproto.base,
  &scc_info_lidarFrame_SingleLidarTarget_lidar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lidar_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lidar_2eproto = {
  false, false, descriptor_table_protodef_lidar_2eproto, "lidar.proto", 816,
  &descriptor_table_lidar_2eproto_once, descriptor_table_lidar_2eproto_sccs, descriptor_table_lidar_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_lidar_2eproto::offsets,
  file_level_metadata_lidar_2eproto, 3, file_level_enum_descriptors_lidar_2eproto, file_level_service_descriptors_lidar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lidar_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lidar_2eproto)), true);
namespace perception {

// ===================================================================

void lidarFrame_Rect3D::InitAsDefaultInstance() {
  ::perception::_lidarFrame_Rect3D_default_instance_._instance.get_mutable()->center_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::_lidarFrame_Rect3D_default_instance_._instance.get_mutable()->center_std_dev_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::_lidarFrame_Rect3D_default_instance_._instance.get_mutable()->size_lwh_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::_lidarFrame_Rect3D_default_instance_._instance.get_mutable()->size_std_dev_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
}
class lidarFrame_Rect3D::_Internal {
 public:
  static const ::perception::common::Point3D& center(const lidarFrame_Rect3D* msg);
  static const ::perception::common::Point3D& center_std_dev(const lidarFrame_Rect3D* msg);
  static const ::perception::common::Point3D& size_lwh(const lidarFrame_Rect3D* msg);
  static const ::perception::common::Point3D& size_std_dev(const lidarFrame_Rect3D* msg);
};

const ::perception::common::Point3D&
lidarFrame_Rect3D::_Internal::center(const lidarFrame_Rect3D* msg) {
  return *msg->center_;
}
const ::perception::common::Point3D&
lidarFrame_Rect3D::_Internal::center_std_dev(const lidarFrame_Rect3D* msg) {
  return *msg->center_std_dev_;
}
const ::perception::common::Point3D&
lidarFrame_Rect3D::_Internal::size_lwh(const lidarFrame_Rect3D* msg) {
  return *msg->size_lwh_;
}
const ::perception::common::Point3D&
lidarFrame_Rect3D::_Internal::size_std_dev(const lidarFrame_Rect3D* msg) {
  return *msg->size_std_dev_;
}
void lidarFrame_Rect3D::clear_center() {
  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
void lidarFrame_Rect3D::clear_center_std_dev() {
  if (GetArena() == nullptr && center_std_dev_ != nullptr) {
    delete center_std_dev_;
  }
  center_std_dev_ = nullptr;
}
void lidarFrame_Rect3D::clear_size_lwh() {
  if (GetArena() == nullptr && size_lwh_ != nullptr) {
    delete size_lwh_;
  }
  size_lwh_ = nullptr;
}
void lidarFrame_Rect3D::clear_size_std_dev() {
  if (GetArena() == nullptr && size_std_dev_ != nullptr) {
    delete size_std_dev_;
  }
  size_std_dev_ = nullptr;
}
void lidarFrame_Rect3D::clear_corners() {
  corners_.Clear();
}
lidarFrame_Rect3D::lidarFrame_Rect3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  corners_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.lidarFrame.Rect3D)
}
lidarFrame_Rect3D::lidarFrame_Rect3D(const lidarFrame_Rect3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      corners_(from.corners_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::perception::common::Point3D(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_center_std_dev()) {
    center_std_dev_ = new ::perception::common::Point3D(*from.center_std_dev_);
  } else {
    center_std_dev_ = nullptr;
  }
  if (from._internal_has_size_lwh()) {
    size_lwh_ = new ::perception::common::Point3D(*from.size_lwh_);
  } else {
    size_lwh_ = nullptr;
  }
  if (from._internal_has_size_std_dev()) {
    size_std_dev_ = new ::perception::common::Point3D(*from.size_std_dev_);
  } else {
    size_std_dev_ = nullptr;
  }
  ::memcpy(&orientation_, &from.orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_std_dev_) -
    reinterpret_cast<char*>(&orientation_)) + sizeof(orientation_std_dev_));
  // @@protoc_insertion_point(copy_constructor:perception.lidarFrame.Rect3D)
}

void lidarFrame_Rect3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_lidarFrame_Rect3D_lidar_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_std_dev_) -
      reinterpret_cast<char*>(&center_)) + sizeof(orientation_std_dev_));
}

lidarFrame_Rect3D::~lidarFrame_Rect3D() {
  // @@protoc_insertion_point(destructor:perception.lidarFrame.Rect3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void lidarFrame_Rect3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete center_std_dev_;
  if (this != internal_default_instance()) delete size_lwh_;
  if (this != internal_default_instance()) delete size_std_dev_;
}

void lidarFrame_Rect3D::ArenaDtor(void* object) {
  lidarFrame_Rect3D* _this = reinterpret_cast< lidarFrame_Rect3D* >(object);
  (void)_this;
}
void lidarFrame_Rect3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void lidarFrame_Rect3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const lidarFrame_Rect3D& lidarFrame_Rect3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_lidarFrame_Rect3D_lidar_2eproto.base);
  return *internal_default_instance();
}


void lidarFrame_Rect3D::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.lidarFrame.Rect3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  corners_.Clear();
  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  if (GetArena() == nullptr && center_std_dev_ != nullptr) {
    delete center_std_dev_;
  }
  center_std_dev_ = nullptr;
  if (GetArena() == nullptr && size_lwh_ != nullptr) {
    delete size_lwh_;
  }
  size_lwh_ = nullptr;
  if (GetArena() == nullptr && size_std_dev_ != nullptr) {
    delete size_std_dev_;
  }
  size_std_dev_ = nullptr;
  ::memset(&orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_std_dev_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(orientation_std_dev_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* lidarFrame_Rect3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.Point3D center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D center_std_dev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_std_dev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D size_lwh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_size_lwh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D size_std_dev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_size_std_dev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.common.Point3D corners = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_corners(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // float orientation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float orientation_std_dev = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          orientation_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* lidarFrame_Rect3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.lidarFrame.Rect3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.Point3D center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // .perception.common.Point3D center_std_dev = 2;
  if (this->has_center_std_dev()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::center_std_dev(this), target, stream);
  }

  // .perception.common.Point3D size_lwh = 3;
  if (this->has_size_lwh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::size_lwh(this), target, stream);
  }

  // .perception.common.Point3D size_std_dev = 4;
  if (this->has_size_std_dev()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::size_std_dev(this), target, stream);
  }

  // repeated .perception.common.Point3D corners = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_corners_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_corners(i), target, stream);
  }

  // float orientation = 6;
  if (!(this->orientation() <= 0 && this->orientation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_orientation(), target);
  }

  // float orientation_std_dev = 7;
  if (!(this->orientation_std_dev() <= 0 && this->orientation_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_orientation_std_dev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.lidarFrame.Rect3D)
  return target;
}

size_t lidarFrame_Rect3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.lidarFrame.Rect3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.Point3D corners = 5;
  total_size += 1UL * this->_internal_corners_size();
  for (const auto& msg : this->corners_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.common.Point3D center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .perception.common.Point3D center_std_dev = 2;
  if (this->has_center_std_dev()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_std_dev_);
  }

  // .perception.common.Point3D size_lwh = 3;
  if (this->has_size_lwh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_lwh_);
  }

  // .perception.common.Point3D size_std_dev = 4;
  if (this->has_size_std_dev()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_std_dev_);
  }

  // float orientation = 6;
  if (!(this->orientation() <= 0 && this->orientation() >= 0)) {
    total_size += 1 + 4;
  }

  // float orientation_std_dev = 7;
  if (!(this->orientation_std_dev() <= 0 && this->orientation_std_dev() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lidarFrame_Rect3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.lidarFrame.Rect3D)
  GOOGLE_DCHECK_NE(&from, this);
  const lidarFrame_Rect3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<lidarFrame_Rect3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.lidarFrame.Rect3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.lidarFrame.Rect3D)
    MergeFrom(*source);
  }
}

void lidarFrame_Rect3D::MergeFrom(const lidarFrame_Rect3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.lidarFrame.Rect3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  corners_.MergeFrom(from.corners_);
  if (from.has_center()) {
    _internal_mutable_center()->::perception::common::Point3D::MergeFrom(from._internal_center());
  }
  if (from.has_center_std_dev()) {
    _internal_mutable_center_std_dev()->::perception::common::Point3D::MergeFrom(from._internal_center_std_dev());
  }
  if (from.has_size_lwh()) {
    _internal_mutable_size_lwh()->::perception::common::Point3D::MergeFrom(from._internal_size_lwh());
  }
  if (from.has_size_std_dev()) {
    _internal_mutable_size_std_dev()->::perception::common::Point3D::MergeFrom(from._internal_size_std_dev());
  }
  if (!(from.orientation() <= 0 && from.orientation() >= 0)) {
    _internal_set_orientation(from._internal_orientation());
  }
  if (!(from.orientation_std_dev() <= 0 && from.orientation_std_dev() >= 0)) {
    _internal_set_orientation_std_dev(from._internal_orientation_std_dev());
  }
}

void lidarFrame_Rect3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.lidarFrame.Rect3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lidarFrame_Rect3D::CopyFrom(const lidarFrame_Rect3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.lidarFrame.Rect3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lidarFrame_Rect3D::IsInitialized() const {
  return true;
}

void lidarFrame_Rect3D::InternalSwap(lidarFrame_Rect3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  corners_.InternalSwap(&other->corners_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(lidarFrame_Rect3D, orientation_std_dev_)
      + sizeof(lidarFrame_Rect3D::orientation_std_dev_)
      - PROTOBUF_FIELD_OFFSET(lidarFrame_Rect3D, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata lidarFrame_Rect3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void lidarFrame_SingleLidarTarget::InitAsDefaultInstance() {
  ::perception::_lidarFrame_SingleLidarTarget_default_instance_._instance.get_mutable()->rect_ = const_cast< ::perception::lidarFrame_Rect3D*>(
      ::perception::lidarFrame_Rect3D::internal_default_instance());
  ::perception::_lidarFrame_SingleLidarTarget_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
}
class lidarFrame_SingleLidarTarget::_Internal {
 public:
  static const ::perception::lidarFrame_Rect3D& rect(const lidarFrame_SingleLidarTarget* msg);
  static const ::perception::common::Point3D& velocity(const lidarFrame_SingleLidarTarget* msg);
};

const ::perception::lidarFrame_Rect3D&
lidarFrame_SingleLidarTarget::_Internal::rect(const lidarFrame_SingleLidarTarget* msg) {
  return *msg->rect_;
}
const ::perception::common::Point3D&
lidarFrame_SingleLidarTarget::_Internal::velocity(const lidarFrame_SingleLidarTarget* msg) {
  return *msg->velocity_;
}
void lidarFrame_SingleLidarTarget::clear_velocity() {
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
void lidarFrame_SingleLidarTarget::clear_contour_points() {
  contour_points_.Clear();
}
lidarFrame_SingleLidarTarget::lidarFrame_SingleLidarTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contour_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.lidarFrame.SingleLidarTarget)
}
lidarFrame_SingleLidarTarget::lidarFrame_SingleLidarTarget(const lidarFrame_SingleLidarTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contour_points_(from.contour_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rect()) {
    rect_ = new ::perception::lidarFrame_Rect3D(*from.rect_);
  } else {
    rect_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::perception::common::Point3D(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_creation_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_creation_));
  // @@protoc_insertion_point(copy_constructor:perception.lidarFrame.SingleLidarTarget)
}

void lidarFrame_SingleLidarTarget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_lidarFrame_SingleLidarTarget_lidar_2eproto.base);
  ::memset(&rect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_creation_) -
      reinterpret_cast<char*>(&rect_)) + sizeof(time_creation_));
}

lidarFrame_SingleLidarTarget::~lidarFrame_SingleLidarTarget() {
  // @@protoc_insertion_point(destructor:perception.lidarFrame.SingleLidarTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void lidarFrame_SingleLidarTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rect_;
  if (this != internal_default_instance()) delete velocity_;
}

void lidarFrame_SingleLidarTarget::ArenaDtor(void* object) {
  lidarFrame_SingleLidarTarget* _this = reinterpret_cast< lidarFrame_SingleLidarTarget* >(object);
  (void)_this;
}
void lidarFrame_SingleLidarTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void lidarFrame_SingleLidarTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const lidarFrame_SingleLidarTarget& lidarFrame_SingleLidarTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_lidarFrame_SingleLidarTarget_lidar_2eproto.base);
  return *internal_default_instance();
}


void lidarFrame_SingleLidarTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.lidarFrame.SingleLidarTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contour_points_.Clear();
  if (GetArena() == nullptr && rect_ != nullptr) {
    delete rect_;
  }
  rect_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_creation_) -
      reinterpret_cast<char*>(&id_)) + sizeof(time_creation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* lidarFrame_SingleLidarTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 moving_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          moving_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 track_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          track_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float existence_probability = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          existence_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .perception.lidarFrame.Rect3D rect = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D velocity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.common.Point3D contour_points = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contour_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 time_creation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          time_creation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* lidarFrame_SingleLidarTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.lidarFrame.SingleLidarTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 cls = 2;
  if (this->cls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cls(), target);
  }

  // uint32 moving_state = 3;
  if (this->moving_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_moving_state(), target);
  }

  // uint32 track_state = 4;
  if (this->track_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_track_state(), target);
  }

  // float confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_confidence(), target);
  }

  // float existence_probability = 6;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_existence_probability(), target);
  }

  // .perception.lidarFrame.Rect3D rect = 7;
  if (this->has_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::rect(this), target, stream);
  }

  // .perception.common.Point3D velocity = 8;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::velocity(this), target, stream);
  }

  // repeated .perception.common.Point3D contour_points = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contour_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_contour_points(i), target, stream);
  }

  // uint64 time_creation = 10;
  if (this->time_creation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_time_creation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.lidarFrame.SingleLidarTarget)
  return target;
}

size_t lidarFrame_SingleLidarTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.lidarFrame.SingleLidarTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.Point3D contour_points = 9;
  total_size += 1UL * this->_internal_contour_points_size();
  for (const auto& msg : this->contour_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.lidarFrame.Rect3D rect = 7;
  if (this->has_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rect_);
  }

  // .perception.common.Point3D velocity = 8;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 cls = 2;
  if (this->cls() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cls());
  }

  // uint32 moving_state = 3;
  if (this->moving_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_moving_state());
  }

  // uint32 track_state = 4;
  if (this->track_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_track_state());
  }

  // float confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float existence_probability = 6;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 time_creation = 10;
  if (this->time_creation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_creation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lidarFrame_SingleLidarTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.lidarFrame.SingleLidarTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const lidarFrame_SingleLidarTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<lidarFrame_SingleLidarTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.lidarFrame.SingleLidarTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.lidarFrame.SingleLidarTarget)
    MergeFrom(*source);
  }
}

void lidarFrame_SingleLidarTarget::MergeFrom(const lidarFrame_SingleLidarTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.lidarFrame.SingleLidarTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contour_points_.MergeFrom(from.contour_points_);
  if (from.has_rect()) {
    _internal_mutable_rect()->::perception::lidarFrame_Rect3D::MergeFrom(from._internal_rect());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::perception::common::Point3D::MergeFrom(from._internal_velocity());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.cls() != 0) {
    _internal_set_cls(from._internal_cls());
  }
  if (from.moving_state() != 0) {
    _internal_set_moving_state(from._internal_moving_state());
  }
  if (from.track_state() != 0) {
    _internal_set_track_state(from._internal_track_state());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.existence_probability() <= 0 && from.existence_probability() >= 0)) {
    _internal_set_existence_probability(from._internal_existence_probability());
  }
  if (from.time_creation() != 0) {
    _internal_set_time_creation(from._internal_time_creation());
  }
}

void lidarFrame_SingleLidarTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.lidarFrame.SingleLidarTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lidarFrame_SingleLidarTarget::CopyFrom(const lidarFrame_SingleLidarTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.lidarFrame.SingleLidarTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lidarFrame_SingleLidarTarget::IsInitialized() const {
  return true;
}

void lidarFrame_SingleLidarTarget::InternalSwap(lidarFrame_SingleLidarTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contour_points_.InternalSwap(&other->contour_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(lidarFrame_SingleLidarTarget, time_creation_)
      + sizeof(lidarFrame_SingleLidarTarget::time_creation_)
      - PROTOBUF_FIELD_OFFSET(lidarFrame_SingleLidarTarget, rect_)>(
          reinterpret_cast<char*>(&rect_),
          reinterpret_cast<char*>(&other->rect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata lidarFrame_SingleLidarTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void lidarFrame::InitAsDefaultInstance() {
}
class lidarFrame::_Internal {
 public:
};

lidarFrame::lidarFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lidar_meas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.lidarFrame)
}
lidarFrame::lidarFrame(const lidarFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lidar_meas_(from.lidar_meas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tick_, &from.tick_,
    static_cast<size_t>(reinterpret_cast<char*>(&lidar_state_) -
    reinterpret_cast<char*>(&tick_)) + sizeof(lidar_state_));
  // @@protoc_insertion_point(copy_constructor:perception.lidarFrame)
}

void lidarFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_lidarFrame_lidar_2eproto.base);
  ::memset(&tick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lidar_state_) -
      reinterpret_cast<char*>(&tick_)) + sizeof(lidar_state_));
}

lidarFrame::~lidarFrame() {
  // @@protoc_insertion_point(destructor:perception.lidarFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void lidarFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void lidarFrame::ArenaDtor(void* object) {
  lidarFrame* _this = reinterpret_cast< lidarFrame* >(object);
  (void)_this;
}
void lidarFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void lidarFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const lidarFrame& lidarFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_lidarFrame_lidar_2eproto.base);
  return *internal_default_instance();
}


void lidarFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.lidarFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lidar_meas_.Clear();
  ::memset(&tick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lidar_state_) -
      reinterpret_cast<char*>(&tick_)) + sizeof(lidar_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* lidarFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.lidarFrame.SingleLidarTarget lidar_meas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lidar_meas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lidar_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          lidar_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* lidarFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.lidarFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seq(), target);
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tick(), target);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // repeated .perception.lidarFrame.SingleLidarTarget lidar_meas = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lidar_meas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_lidar_meas(i), target, stream);
  }

  // bool is_valid = 5;
  if (this->is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_valid(), target);
  }

  // uint32 lidar_state = 6;
  if (this->lidar_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_lidar_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.lidarFrame)
  return target;
}

size_t lidarFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.lidarFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.lidarFrame.SingleLidarTarget lidar_meas = 4;
  total_size += 1UL * this->_internal_lidar_meas_size();
  for (const auto& msg : this->lidar_meas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint32 seq = 1;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // bool is_valid = 5;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // uint32 lidar_state = 6;
  if (this->lidar_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lidar_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lidarFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.lidarFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const lidarFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<lidarFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.lidarFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.lidarFrame)
    MergeFrom(*source);
  }
}

void lidarFrame::MergeFrom(const lidarFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.lidarFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lidar_meas_.MergeFrom(from.lidar_meas_);
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
  if (from.lidar_state() != 0) {
    _internal_set_lidar_state(from._internal_lidar_state());
  }
}

void lidarFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.lidarFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lidarFrame::CopyFrom(const lidarFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.lidarFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lidarFrame::IsInitialized() const {
  return true;
}

void lidarFrame::InternalSwap(lidarFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lidar_meas_.InternalSwap(&other->lidar_meas_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(lidarFrame, lidar_state_)
      + sizeof(lidarFrame::lidar_state_)
      - PROTOBUF_FIELD_OFFSET(lidarFrame, tick_)>(
          reinterpret_cast<char*>(&tick_),
          reinterpret_cast<char*>(&other->tick_));
}

::PROTOBUF_NAMESPACE_ID::Metadata lidarFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perception::lidarFrame_Rect3D* Arena::CreateMaybeMessage< ::perception::lidarFrame_Rect3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::lidarFrame_Rect3D >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::lidarFrame_SingleLidarTarget* Arena::CreateMaybeMessage< ::perception::lidarFrame_SingleLidarTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::lidarFrame_SingleLidarTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::lidarFrame* Arena::CreateMaybeMessage< ::perception::lidarFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::lidarFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
