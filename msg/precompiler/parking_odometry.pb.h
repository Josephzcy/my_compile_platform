// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parking_odometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parking_5fodometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parking_5fodometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parking_5fodometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parking_5fodometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parking_5fodometry_2eproto;
namespace minieye {
namespace parking {
class Odometry;
class OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class Point3d;
class Point3dDefaultTypeInternal;
extern Point3dDefaultTypeInternal _Point3d_default_instance_;
class Pose6d;
class Pose6dDefaultTypeInternal;
extern Pose6dDefaultTypeInternal _Pose6d_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
}  // namespace parking
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::parking::Odometry* Arena::CreateMaybeMessage<::minieye::parking::Odometry>(Arena*);
template<> ::minieye::parking::Point3d* Arena::CreateMaybeMessage<::minieye::parking::Point3d>(Arena*);
template<> ::minieye::parking::Pose6d* Arena::CreateMaybeMessage<::minieye::parking::Pose6d>(Arena*);
template<> ::minieye::parking::Quaternion* Arena::CreateMaybeMessage<::minieye::parking::Quaternion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {
namespace parking {

// ===================================================================

class Point3d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.Point3d) */ {
 public:
  inline Point3d() : Point3d(nullptr) {};
  virtual ~Point3d();

  Point3d(const Point3d& from);
  Point3d(Point3d&& from) noexcept
    : Point3d() {
    *this = ::std::move(from);
  }

  inline Point3d& operator=(const Point3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3d& operator=(Point3d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3d* internal_default_instance() {
    return reinterpret_cast<const Point3d*>(
               &_Point3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point3d& a, Point3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3d* New() const final {
    return CreateMaybeMessage<Point3d>(nullptr);
  }

  Point3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3d& from);
  void MergeFrom(const Point3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.Point3d";
  }
  protected:
  explicit Point3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fodometry_2eproto);
    return ::descriptor_table_parking_5fodometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.Point3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fodometry_2eproto;
};
// -------------------------------------------------------------------

class Pose6d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.Pose6d) */ {
 public:
  inline Pose6d() : Pose6d(nullptr) {};
  virtual ~Pose6d();

  Pose6d(const Pose6d& from);
  Pose6d(Pose6d&& from) noexcept
    : Pose6d() {
    *this = ::std::move(from);
  }

  inline Pose6d& operator=(const Pose6d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose6d& operator=(Pose6d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose6d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose6d* internal_default_instance() {
    return reinterpret_cast<const Pose6d*>(
               &_Pose6d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pose6d& a, Pose6d& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose6d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose6d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose6d* New() const final {
    return CreateMaybeMessage<Pose6d>(nullptr);
  }

  Pose6d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose6d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose6d& from);
  void MergeFrom(const Pose6d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose6d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.Pose6d";
  }
  protected:
  explicit Pose6d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fodometry_2eproto);
    return ::descriptor_table_parking_5fodometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kRollFieldNumber = 4,
    kPitchFieldNumber = 5,
    kYawFieldNumber = 6,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double roll = 4;
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // double pitch = 5;
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // double yaw = 6;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.Pose6d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double roll_;
  double pitch_;
  double yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fodometry_2eproto;
};
// -------------------------------------------------------------------

class Quaternion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {};
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fodometry_2eproto);
    return ::descriptor_table_parking_5fodometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQxFieldNumber = 1,
    kQyFieldNumber = 2,
    kQzFieldNumber = 3,
    kQwFieldNumber = 4,
  };
  // double qx = 1;
  void clear_qx();
  double qx() const;
  void set_qx(double value);
  private:
  double _internal_qx() const;
  void _internal_set_qx(double value);
  public:

  // double qy = 2;
  void clear_qy();
  double qy() const;
  void set_qy(double value);
  private:
  double _internal_qy() const;
  void _internal_set_qy(double value);
  public:

  // double qz = 3;
  void clear_qz();
  double qz() const;
  void set_qz(double value);
  private:
  double _internal_qz() const;
  void _internal_set_qz(double value);
  public:

  // double qw = 4;
  void clear_qw();
  double qw() const;
  void set_qw(double value);
  private:
  double _internal_qw() const;
  void _internal_set_qw(double value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double qx_;
  double qy_;
  double qz_;
  double qw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fodometry_2eproto;
};
// -------------------------------------------------------------------

class Odometry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {};
  virtual ~Odometry();

  Odometry(const Odometry& from);
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Odometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Odometry* New() const final {
    return CreateMaybeMessage<Odometry>(nullptr);
  }

  Odometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Odometry& from);
  void MergeFrom(const Odometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.Odometry";
  }
  protected:
  explicit Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fodometry_2eproto);
    return ::descriptor_table_parking_5fodometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 4,
    kOrientationFieldNumber = 5,
    kVelocityFieldNumber = 6,
    kLinearAccelerationFieldNumber = 8,
    kAngularVelocityFieldNumber = 9,
    kTimestampFieldNumber = 1,
    kTickFieldNumber = 2,
    kFrameIdFieldNumber = 3,
    kDistanceFieldNumber = 7,
    kStateFieldNumber = 10,
  };
  // .minieye.parking.Pose6d pose = 4;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::minieye::parking::Pose6d& pose() const;
  ::minieye::parking::Pose6d* release_pose();
  ::minieye::parking::Pose6d* mutable_pose();
  void set_allocated_pose(::minieye::parking::Pose6d* pose);
  private:
  const ::minieye::parking::Pose6d& _internal_pose() const;
  ::minieye::parking::Pose6d* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::minieye::parking::Pose6d* pose);
  ::minieye::parking::Pose6d* unsafe_arena_release_pose();

  // .minieye.parking.Quaternion orientation = 5;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::minieye::parking::Quaternion& orientation() const;
  ::minieye::parking::Quaternion* release_orientation();
  ::minieye::parking::Quaternion* mutable_orientation();
  void set_allocated_orientation(::minieye::parking::Quaternion* orientation);
  private:
  const ::minieye::parking::Quaternion& _internal_orientation() const;
  ::minieye::parking::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::minieye::parking::Quaternion* orientation);
  ::minieye::parking::Quaternion* unsafe_arena_release_orientation();

  // .minieye.parking.Point3d velocity = 6;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::minieye::parking::Point3d& velocity() const;
  ::minieye::parking::Point3d* release_velocity();
  ::minieye::parking::Point3d* mutable_velocity();
  void set_allocated_velocity(::minieye::parking::Point3d* velocity);
  private:
  const ::minieye::parking::Point3d& _internal_velocity() const;
  ::minieye::parking::Point3d* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::minieye::parking::Point3d* velocity);
  ::minieye::parking::Point3d* unsafe_arena_release_velocity();

  // .minieye.parking.Point3d linear_acceleration = 8;
  bool has_linear_acceleration() const;
  private:
  bool _internal_has_linear_acceleration() const;
  public:
  void clear_linear_acceleration();
  const ::minieye::parking::Point3d& linear_acceleration() const;
  ::minieye::parking::Point3d* release_linear_acceleration();
  ::minieye::parking::Point3d* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::minieye::parking::Point3d* linear_acceleration);
  private:
  const ::minieye::parking::Point3d& _internal_linear_acceleration() const;
  ::minieye::parking::Point3d* _internal_mutable_linear_acceleration();
  public:
  void unsafe_arena_set_allocated_linear_acceleration(
      ::minieye::parking::Point3d* linear_acceleration);
  ::minieye::parking::Point3d* unsafe_arena_release_linear_acceleration();

  // .minieye.parking.Point3d angular_velocity = 9;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::minieye::parking::Point3d& angular_velocity() const;
  ::minieye::parking::Point3d* release_angular_velocity();
  ::minieye::parking::Point3d* mutable_angular_velocity();
  void set_allocated_angular_velocity(::minieye::parking::Point3d* angular_velocity);
  private:
  const ::minieye::parking::Point3d& _internal_angular_velocity() const;
  ::minieye::parking::Point3d* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::minieye::parking::Point3d* angular_velocity);
  ::minieye::parking::Point3d* unsafe_arena_release_angular_velocity();

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 2;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 frame_id = 3;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double distance = 7;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // uint32 state = 10;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.Odometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::Pose6d* pose_;
  ::minieye::parking::Quaternion* orientation_;
  ::minieye::parking::Point3d* velocity_;
  ::minieye::parking::Point3d* linear_acceleration_;
  ::minieye::parking::Point3d* angular_velocity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  double distance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fodometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point3d

// double x = 1;
inline void Point3d::clear_x() {
  x_ = 0;
}
inline double Point3d::_internal_x() const {
  return x_;
}
inline double Point3d::x() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Point3d.x)
  return _internal_x();
}
inline void Point3d::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point3d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Point3d.x)
}

// double y = 2;
inline void Point3d::clear_y() {
  y_ = 0;
}
inline double Point3d::_internal_y() const {
  return y_;
}
inline double Point3d::y() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Point3d.y)
  return _internal_y();
}
inline void Point3d::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point3d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Point3d.y)
}

// double z = 3;
inline void Point3d::clear_z() {
  z_ = 0;
}
inline double Point3d::_internal_z() const {
  return z_;
}
inline double Point3d::z() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Point3d.z)
  return _internal_z();
}
inline void Point3d::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Point3d::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Point3d.z)
}

// -------------------------------------------------------------------

// Pose6d

// double x = 1;
inline void Pose6d::clear_x() {
  x_ = 0;
}
inline double Pose6d::_internal_x() const {
  return x_;
}
inline double Pose6d::x() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Pose6d.x)
  return _internal_x();
}
inline void Pose6d::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Pose6d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Pose6d.x)
}

// double y = 2;
inline void Pose6d::clear_y() {
  y_ = 0;
}
inline double Pose6d::_internal_y() const {
  return y_;
}
inline double Pose6d::y() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Pose6d.y)
  return _internal_y();
}
inline void Pose6d::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Pose6d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Pose6d.y)
}

// double z = 3;
inline void Pose6d::clear_z() {
  z_ = 0;
}
inline double Pose6d::_internal_z() const {
  return z_;
}
inline double Pose6d::z() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Pose6d.z)
  return _internal_z();
}
inline void Pose6d::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Pose6d::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Pose6d.z)
}

// double roll = 4;
inline void Pose6d::clear_roll() {
  roll_ = 0;
}
inline double Pose6d::_internal_roll() const {
  return roll_;
}
inline double Pose6d::roll() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Pose6d.roll)
  return _internal_roll();
}
inline void Pose6d::_internal_set_roll(double value) {
  
  roll_ = value;
}
inline void Pose6d::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Pose6d.roll)
}

// double pitch = 5;
inline void Pose6d::clear_pitch() {
  pitch_ = 0;
}
inline double Pose6d::_internal_pitch() const {
  return pitch_;
}
inline double Pose6d::pitch() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Pose6d.pitch)
  return _internal_pitch();
}
inline void Pose6d::_internal_set_pitch(double value) {
  
  pitch_ = value;
}
inline void Pose6d::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Pose6d.pitch)
}

// double yaw = 6;
inline void Pose6d::clear_yaw() {
  yaw_ = 0;
}
inline double Pose6d::_internal_yaw() const {
  return yaw_;
}
inline double Pose6d::yaw() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Pose6d.yaw)
  return _internal_yaw();
}
inline void Pose6d::_internal_set_yaw(double value) {
  
  yaw_ = value;
}
inline void Pose6d::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Pose6d.yaw)
}

// -------------------------------------------------------------------

// Quaternion

// double qx = 1;
inline void Quaternion::clear_qx() {
  qx_ = 0;
}
inline double Quaternion::_internal_qx() const {
  return qx_;
}
inline double Quaternion::qx() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Quaternion.qx)
  return _internal_qx();
}
inline void Quaternion::_internal_set_qx(double value) {
  
  qx_ = value;
}
inline void Quaternion::set_qx(double value) {
  _internal_set_qx(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Quaternion.qx)
}

// double qy = 2;
inline void Quaternion::clear_qy() {
  qy_ = 0;
}
inline double Quaternion::_internal_qy() const {
  return qy_;
}
inline double Quaternion::qy() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Quaternion.qy)
  return _internal_qy();
}
inline void Quaternion::_internal_set_qy(double value) {
  
  qy_ = value;
}
inline void Quaternion::set_qy(double value) {
  _internal_set_qy(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Quaternion.qy)
}

// double qz = 3;
inline void Quaternion::clear_qz() {
  qz_ = 0;
}
inline double Quaternion::_internal_qz() const {
  return qz_;
}
inline double Quaternion::qz() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Quaternion.qz)
  return _internal_qz();
}
inline void Quaternion::_internal_set_qz(double value) {
  
  qz_ = value;
}
inline void Quaternion::set_qz(double value) {
  _internal_set_qz(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Quaternion.qz)
}

// double qw = 4;
inline void Quaternion::clear_qw() {
  qw_ = 0;
}
inline double Quaternion::_internal_qw() const {
  return qw_;
}
inline double Quaternion::qw() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Quaternion.qw)
  return _internal_qw();
}
inline void Quaternion::_internal_set_qw(double value) {
  
  qw_ = value;
}
inline void Quaternion::set_qw(double value) {
  _internal_set_qw(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Quaternion.qw)
}

// -------------------------------------------------------------------

// Odometry

// uint64 timestamp = 1;
inline void Odometry::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Odometry::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Odometry::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Odometry.timestamp)
  return _internal_timestamp();
}
inline void Odometry::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Odometry::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Odometry.timestamp)
}

// uint64 tick = 2;
inline void Odometry::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Odometry::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Odometry::tick() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Odometry.tick)
  return _internal_tick();
}
inline void Odometry::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void Odometry::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Odometry.tick)
}

// uint64 frame_id = 3;
inline void Odometry::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Odometry::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Odometry::frame_id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Odometry.frame_id)
  return _internal_frame_id();
}
inline void Odometry::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void Odometry::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Odometry.frame_id)
}

// .minieye.parking.Pose6d pose = 4;
inline bool Odometry::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Odometry::has_pose() const {
  return _internal_has_pose();
}
inline void Odometry::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::minieye::parking::Pose6d& Odometry::_internal_pose() const {
  const ::minieye::parking::Pose6d* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Pose6d*>(
      &::minieye::parking::_Pose6d_default_instance_);
}
inline const ::minieye::parking::Pose6d& Odometry::pose() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Odometry.pose)
  return _internal_pose();
}
inline void Odometry::unsafe_arena_set_allocated_pose(
    ::minieye::parking::Pose6d* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Odometry.pose)
}
inline ::minieye::parking::Pose6d* Odometry::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Pose6d* Odometry::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:minieye.parking.Odometry.pose)
  
  ::minieye::parking::Pose6d* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::minieye::parking::Pose6d* Odometry::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Pose6d>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::minieye::parking::Pose6d* Odometry::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Odometry.pose)
  return _internal_mutable_pose();
}
inline void Odometry::set_allocated_pose(::minieye::parking::Pose6d* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Odometry.pose)
}

// .minieye.parking.Quaternion orientation = 5;
inline bool Odometry::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool Odometry::has_orientation() const {
  return _internal_has_orientation();
}
inline void Odometry::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::minieye::parking::Quaternion& Odometry::_internal_orientation() const {
  const ::minieye::parking::Quaternion* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Quaternion*>(
      &::minieye::parking::_Quaternion_default_instance_);
}
inline const ::minieye::parking::Quaternion& Odometry::orientation() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Odometry.orientation)
  return _internal_orientation();
}
inline void Odometry::unsafe_arena_set_allocated_orientation(
    ::minieye::parking::Quaternion* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Odometry.orientation)
}
inline ::minieye::parking::Quaternion* Odometry::release_orientation() {
  auto temp = unsafe_arena_release_orientation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Quaternion* Odometry::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:minieye.parking.Odometry.orientation)
  
  ::minieye::parking::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::minieye::parking::Quaternion* Odometry::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Quaternion>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::minieye::parking::Quaternion* Odometry::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Odometry.orientation)
  return _internal_mutable_orientation();
}
inline void Odometry::set_allocated_orientation(::minieye::parking::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Odometry.orientation)
}

// .minieye.parking.Point3d velocity = 6;
inline bool Odometry::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool Odometry::has_velocity() const {
  return _internal_has_velocity();
}
inline void Odometry::clear_velocity() {
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::minieye::parking::Point3d& Odometry::_internal_velocity() const {
  const ::minieye::parking::Point3d* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point3d*>(
      &::minieye::parking::_Point3d_default_instance_);
}
inline const ::minieye::parking::Point3d& Odometry::velocity() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Odometry.velocity)
  return _internal_velocity();
}
inline void Odometry::unsafe_arena_set_allocated_velocity(
    ::minieye::parking::Point3d* velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Odometry.velocity)
}
inline ::minieye::parking::Point3d* Odometry::release_velocity() {
  auto temp = unsafe_arena_release_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point3d* Odometry::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:minieye.parking.Odometry.velocity)
  
  ::minieye::parking::Point3d* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point3d* Odometry::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point3d>(GetArena());
    velocity_ = p;
  }
  return velocity_;
}
inline ::minieye::parking::Point3d* Odometry::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Odometry.velocity)
  return _internal_mutable_velocity();
}
inline void Odometry::set_allocated_velocity(::minieye::parking::Point3d* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Odometry.velocity)
}

// double distance = 7;
inline void Odometry::clear_distance() {
  distance_ = 0;
}
inline double Odometry::_internal_distance() const {
  return distance_;
}
inline double Odometry::distance() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Odometry.distance)
  return _internal_distance();
}
inline void Odometry::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void Odometry::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Odometry.distance)
}

// .minieye.parking.Point3d linear_acceleration = 8;
inline bool Odometry::_internal_has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != nullptr;
}
inline bool Odometry::has_linear_acceleration() const {
  return _internal_has_linear_acceleration();
}
inline void Odometry::clear_linear_acceleration() {
  if (GetArena() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
}
inline const ::minieye::parking::Point3d& Odometry::_internal_linear_acceleration() const {
  const ::minieye::parking::Point3d* p = linear_acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point3d*>(
      &::minieye::parking::_Point3d_default_instance_);
}
inline const ::minieye::parking::Point3d& Odometry::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Odometry.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void Odometry::unsafe_arena_set_allocated_linear_acceleration(
    ::minieye::parking::Point3d* linear_acceleration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Odometry.linear_acceleration)
}
inline ::minieye::parking::Point3d* Odometry::release_linear_acceleration() {
  auto temp = unsafe_arena_release_linear_acceleration();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point3d* Odometry::unsafe_arena_release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:minieye.parking.Odometry.linear_acceleration)
  
  ::minieye::parking::Point3d* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point3d* Odometry::_internal_mutable_linear_acceleration() {
  
  if (linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point3d>(GetArena());
    linear_acceleration_ = p;
  }
  return linear_acceleration_;
}
inline ::minieye::parking::Point3d* Odometry::mutable_linear_acceleration() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Odometry.linear_acceleration)
  return _internal_mutable_linear_acceleration();
}
inline void Odometry::set_allocated_linear_acceleration(::minieye::parking::Point3d* linear_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete linear_acceleration_;
  }
  if (linear_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linear_acceleration);
    if (message_arena != submessage_arena) {
      linear_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Odometry.linear_acceleration)
}

// .minieye.parking.Point3d angular_velocity = 9;
inline bool Odometry::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != nullptr;
}
inline bool Odometry::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void Odometry::clear_angular_velocity() {
  if (GetArena() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
}
inline const ::minieye::parking::Point3d& Odometry::_internal_angular_velocity() const {
  const ::minieye::parking::Point3d* p = angular_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point3d*>(
      &::minieye::parking::_Point3d_default_instance_);
}
inline const ::minieye::parking::Point3d& Odometry::angular_velocity() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Odometry.angular_velocity)
  return _internal_angular_velocity();
}
inline void Odometry::unsafe_arena_set_allocated_angular_velocity(
    ::minieye::parking::Point3d* angular_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Odometry.angular_velocity)
}
inline ::minieye::parking::Point3d* Odometry::release_angular_velocity() {
  auto temp = unsafe_arena_release_angular_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point3d* Odometry::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:minieye.parking.Odometry.angular_velocity)
  
  ::minieye::parking::Point3d* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point3d* Odometry::_internal_mutable_angular_velocity() {
  
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point3d>(GetArena());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::minieye::parking::Point3d* Odometry::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Odometry.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void Odometry::set_allocated_angular_velocity(::minieye::parking::Point3d* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete angular_velocity_;
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(angular_velocity);
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Odometry.angular_velocity)
}

// uint32 state = 10;
inline void Odometry::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Odometry::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Odometry::state() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Odometry.state)
  return _internal_state();
}
inline void Odometry::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void Odometry::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Odometry.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace parking
}  // namespace minieye

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parking_5fodometry_2eproto
