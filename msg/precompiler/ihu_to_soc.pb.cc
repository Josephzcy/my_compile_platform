// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ihu_to_soc.proto

#include "ihu_to_soc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace minieye {
class IHUToSocDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IHUToSoc> _instance;
} _IHUToSoc_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_IHUToSoc_ihu_5fto_5fsoc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_IHUToSoc_default_instance_;
    new (ptr) ::minieye::IHUToSoc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::IHUToSoc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IHUToSoc_ihu_5fto_5fsoc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IHUToSoc_ihu_5fto_5fsoc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ihu_5fto_5fsoc_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ihu_5fto_5fsoc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ihu_5fto_5fsoc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ihu_5fto_5fsoc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, apakeysts_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, open_switch_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, engage_confirm_switch_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, resume_switch_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, parking_free_confirm_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, phone_bluetooth_state_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, phone_open_switch_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, rpa_activebtn_sts_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, rpa_suspend_sts_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, rpa_parkingoutdirection_btn_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, ihu_status_feedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, rpa_key_sts_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, rpa_lock_car_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToSoc, tick_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::IHUToSoc)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_IHUToSoc_default_instance_),
};

const char descriptor_table_protodef_ihu_5fto_5fsoc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020ihu_to_soc.proto\022\007minieye\"\202\003\n\010IHUToSoc"
  "\022\021\n\tAPAKeySts\030\001 \001(\010\022\023\n\013Open_Switch\030\002 \001(\r"
  "\022\035\n\025Engage_Confirm_Switch\030\003 \001(\r\022\025\n\rResum"
  "e_Switch\030\004 \001(\r\022\034\n\024Parking_Free_Confirm\030\005"
  " \001(\010\022\035\n\025Phone_Bluetooth_State\030\006 \001(\010\022\031\n\021P"
  "hone_Open_Switch\030\007 \001(\r\022\031\n\021RPA_ActiveBtn_"
  "Sts\030\010 \001(\r\022\027\n\017RPA_Suspend_Sts\030\t \001(\r\022#\n\033RP"
  "A_ParkingOUtDirection_Btn\030\n \001(\r\022\033\n\023IHU_s"
  "tatus_Feedback\030\013 \001(\010\022\023\n\013RPA_Key_Sts\030\014 \001("
  "\010\022\024\n\014RPA_Lock_Car\030\r \001(\010\022\021\n\ttimestamp\030\016 \001"
  "(\004\022\014\n\004tick\030\017 \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ihu_5fto_5fsoc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ihu_5fto_5fsoc_2eproto_sccs[1] = {
  &scc_info_IHUToSoc_ihu_5fto_5fsoc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ihu_5fto_5fsoc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ihu_5fto_5fsoc_2eproto = {
  false, false, descriptor_table_protodef_ihu_5fto_5fsoc_2eproto, "ihu_to_soc.proto", 424,
  &descriptor_table_ihu_5fto_5fsoc_2eproto_once, descriptor_table_ihu_5fto_5fsoc_2eproto_sccs, descriptor_table_ihu_5fto_5fsoc_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_ihu_5fto_5fsoc_2eproto::offsets,
  file_level_metadata_ihu_5fto_5fsoc_2eproto, 1, file_level_enum_descriptors_ihu_5fto_5fsoc_2eproto, file_level_service_descriptors_ihu_5fto_5fsoc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ihu_5fto_5fsoc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ihu_5fto_5fsoc_2eproto)), true);
namespace minieye {

// ===================================================================

void IHUToSoc::InitAsDefaultInstance() {
}
class IHUToSoc::_Internal {
 public:
};

IHUToSoc::IHUToSoc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.IHUToSoc)
}
IHUToSoc::IHUToSoc(const IHUToSoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&open_switch_, &from.open_switch_,
    static_cast<size_t>(reinterpret_cast<char*>(&rpa_lock_car_) -
    reinterpret_cast<char*>(&open_switch_)) + sizeof(rpa_lock_car_));
  // @@protoc_insertion_point(copy_constructor:minieye.IHUToSoc)
}

void IHUToSoc::SharedCtor() {
  ::memset(&open_switch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rpa_lock_car_) -
      reinterpret_cast<char*>(&open_switch_)) + sizeof(rpa_lock_car_));
}

IHUToSoc::~IHUToSoc() {
  // @@protoc_insertion_point(destructor:minieye.IHUToSoc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IHUToSoc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IHUToSoc::ArenaDtor(void* object) {
  IHUToSoc* _this = reinterpret_cast< IHUToSoc* >(object);
  (void)_this;
}
void IHUToSoc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IHUToSoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IHUToSoc& IHUToSoc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IHUToSoc_ihu_5fto_5fsoc_2eproto.base);
  return *internal_default_instance();
}


void IHUToSoc::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.IHUToSoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&open_switch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rpa_lock_car_) -
      reinterpret_cast<char*>(&open_switch_)) + sizeof(rpa_lock_car_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IHUToSoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool APAKeySts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          apakeysts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Open_Switch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          open_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Engage_Confirm_Switch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          engage_confirm_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Resume_Switch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          resume_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Parking_Free_Confirm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          parking_free_confirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Phone_Bluetooth_State = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          phone_bluetooth_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Phone_Open_Switch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          phone_open_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 RPA_ActiveBtn_Sts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rpa_activebtn_sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 RPA_Suspend_Sts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          rpa_suspend_sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 RPA_ParkingOUtDirection_Btn = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          rpa_parkingoutdirection_btn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IHU_status_Feedback = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ihu_status_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool RPA_Key_Sts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          rpa_key_sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool RPA_Lock_Car = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          rpa_lock_car_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IHUToSoc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.IHUToSoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool APAKeySts = 1;
  if (this->apakeysts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_apakeysts(), target);
  }

  // uint32 Open_Switch = 2;
  if (this->open_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_open_switch(), target);
  }

  // uint32 Engage_Confirm_Switch = 3;
  if (this->engage_confirm_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_engage_confirm_switch(), target);
  }

  // uint32 Resume_Switch = 4;
  if (this->resume_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_resume_switch(), target);
  }

  // bool Parking_Free_Confirm = 5;
  if (this->parking_free_confirm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_parking_free_confirm(), target);
  }

  // bool Phone_Bluetooth_State = 6;
  if (this->phone_bluetooth_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_phone_bluetooth_state(), target);
  }

  // uint32 Phone_Open_Switch = 7;
  if (this->phone_open_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_phone_open_switch(), target);
  }

  // uint32 RPA_ActiveBtn_Sts = 8;
  if (this->rpa_activebtn_sts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rpa_activebtn_sts(), target);
  }

  // uint32 RPA_Suspend_Sts = 9;
  if (this->rpa_suspend_sts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_rpa_suspend_sts(), target);
  }

  // uint32 RPA_ParkingOUtDirection_Btn = 10;
  if (this->rpa_parkingoutdirection_btn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rpa_parkingoutdirection_btn(), target);
  }

  // bool IHU_status_Feedback = 11;
  if (this->ihu_status_feedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_ihu_status_feedback(), target);
  }

  // bool RPA_Key_Sts = 12;
  if (this->rpa_key_sts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_rpa_key_sts(), target);
  }

  // bool RPA_Lock_Car = 13;
  if (this->rpa_lock_car() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_rpa_lock_car(), target);
  }

  // uint64 timestamp = 14;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_timestamp(), target);
  }

  // uint64 tick = 15;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.IHUToSoc)
  return target;
}

size_t IHUToSoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.IHUToSoc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Open_Switch = 2;
  if (this->open_switch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_open_switch());
  }

  // uint32 Engage_Confirm_Switch = 3;
  if (this->engage_confirm_switch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_engage_confirm_switch());
  }

  // uint32 Resume_Switch = 4;
  if (this->resume_switch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_resume_switch());
  }

  // bool APAKeySts = 1;
  if (this->apakeysts() != 0) {
    total_size += 1 + 1;
  }

  // bool Parking_Free_Confirm = 5;
  if (this->parking_free_confirm() != 0) {
    total_size += 1 + 1;
  }

  // bool Phone_Bluetooth_State = 6;
  if (this->phone_bluetooth_state() != 0) {
    total_size += 1 + 1;
  }

  // bool IHU_status_Feedback = 11;
  if (this->ihu_status_feedback() != 0) {
    total_size += 1 + 1;
  }

  // uint32 Phone_Open_Switch = 7;
  if (this->phone_open_switch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_phone_open_switch());
  }

  // uint32 RPA_ActiveBtn_Sts = 8;
  if (this->rpa_activebtn_sts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rpa_activebtn_sts());
  }

  // uint32 RPA_Suspend_Sts = 9;
  if (this->rpa_suspend_sts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rpa_suspend_sts());
  }

  // uint32 RPA_ParkingOUtDirection_Btn = 10;
  if (this->rpa_parkingoutdirection_btn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rpa_parkingoutdirection_btn());
  }

  // uint64 timestamp = 14;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 15;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // bool RPA_Key_Sts = 12;
  if (this->rpa_key_sts() != 0) {
    total_size += 1 + 1;
  }

  // bool RPA_Lock_Car = 13;
  if (this->rpa_lock_car() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IHUToSoc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.IHUToSoc)
  GOOGLE_DCHECK_NE(&from, this);
  const IHUToSoc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IHUToSoc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.IHUToSoc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.IHUToSoc)
    MergeFrom(*source);
  }
}

void IHUToSoc::MergeFrom(const IHUToSoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.IHUToSoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.open_switch() != 0) {
    _internal_set_open_switch(from._internal_open_switch());
  }
  if (from.engage_confirm_switch() != 0) {
    _internal_set_engage_confirm_switch(from._internal_engage_confirm_switch());
  }
  if (from.resume_switch() != 0) {
    _internal_set_resume_switch(from._internal_resume_switch());
  }
  if (from.apakeysts() != 0) {
    _internal_set_apakeysts(from._internal_apakeysts());
  }
  if (from.parking_free_confirm() != 0) {
    _internal_set_parking_free_confirm(from._internal_parking_free_confirm());
  }
  if (from.phone_bluetooth_state() != 0) {
    _internal_set_phone_bluetooth_state(from._internal_phone_bluetooth_state());
  }
  if (from.ihu_status_feedback() != 0) {
    _internal_set_ihu_status_feedback(from._internal_ihu_status_feedback());
  }
  if (from.phone_open_switch() != 0) {
    _internal_set_phone_open_switch(from._internal_phone_open_switch());
  }
  if (from.rpa_activebtn_sts() != 0) {
    _internal_set_rpa_activebtn_sts(from._internal_rpa_activebtn_sts());
  }
  if (from.rpa_suspend_sts() != 0) {
    _internal_set_rpa_suspend_sts(from._internal_rpa_suspend_sts());
  }
  if (from.rpa_parkingoutdirection_btn() != 0) {
    _internal_set_rpa_parkingoutdirection_btn(from._internal_rpa_parkingoutdirection_btn());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.rpa_key_sts() != 0) {
    _internal_set_rpa_key_sts(from._internal_rpa_key_sts());
  }
  if (from.rpa_lock_car() != 0) {
    _internal_set_rpa_lock_car(from._internal_rpa_lock_car());
  }
}

void IHUToSoc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.IHUToSoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IHUToSoc::CopyFrom(const IHUToSoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.IHUToSoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IHUToSoc::IsInitialized() const {
  return true;
}

void IHUToSoc::InternalSwap(IHUToSoc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IHUToSoc, rpa_lock_car_)
      + sizeof(IHUToSoc::rpa_lock_car_)
      - PROTOBUF_FIELD_OFFSET(IHUToSoc, open_switch_)>(
          reinterpret_cast<char*>(&open_switch_),
          reinterpret_cast<char*>(&other->open_switch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IHUToSoc::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::IHUToSoc* Arena::CreateMaybeMessage< ::minieye::IHUToSoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::IHUToSoc >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
