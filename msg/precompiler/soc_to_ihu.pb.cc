// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: soc_to_ihu.proto

#include "soc_to_ihu.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace minieye {
class SocToIHUDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SocToIHU> _instance;
} _SocToIHU_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_SocToIHU_soc_5fto_5fihu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_SocToIHU_default_instance_;
    new (ptr) ::minieye::SocToIHU();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::SocToIHU::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SocToIHU_soc_5fto_5fihu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SocToIHU_soc_5fto_5fihu_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_soc_5fto_5fihu_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_soc_5fto_5fihu_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_soc_5fto_5fihu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_soc_5fto_5fihu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, faultstatuscamerafront_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, faultstatuscameraleft_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, faultstatuscamerarear_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, faultstatuscameraright_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, avmfuncsts_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, avmactdeactdisplay_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, avmdisplaymode_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, avmcalibrationstate_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, setturnindicationfeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, setbodycolorfeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, setautozoomfeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, setpdctriggerfeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, settransparencyfeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, setautoexitfeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, setlicenseplatefeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, setguidelinefeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, setfactorydefaultfeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, setradarwariningfeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, setsteeringwheelfeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, setlanguagefeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, transparenthoodswfeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, trailswfeedback_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::SocToIHU, tick_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::SocToIHU)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_SocToIHU_default_instance_),
};

const char descriptor_table_protodef_soc_5fto_5fihu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020soc_to_ihu.proto\022\007minieye\"\310\005\n\010SocToIHU"
  "\022\036\n\026FaultStatusCameraFront\030\001 \001(\r\022\035\n\025Faul"
  "tStatusCameraLeft\030\002 \001(\r\022\035\n\025FaultStatusCa"
  "meraRear\030\003 \001(\r\022\036\n\026FaultStatusCameraRight"
  "\030\004 \001(\r\022\022\n\nAVMFuncSts\030\005 \001(\r\022\032\n\022AVMActDeac"
  "tDisplay\030\006 \001(\r\022\026\n\016AVMDisplayMode\030\007 \001(\r\022\033"
  "\n\023AVMCalibrationState\030\010 \001(\r\022!\n\031SetTurnIn"
  "dicationFeedback\030\t \001(\r\022\034\n\024SetBodyColorFe"
  "edback\030\n \001(\r\022\033\n\023SetAutoZoomFeedback\030\013 \001("
  "\r\022\035\n\025SetPDCTriggerFeedback\030\014 \001(\r\022\037\n\027SetT"
  "ransparencyFeedback\030\r \001(\r\022\033\n\023SetAutoExit"
  "Feedback\030\016 \001(\r\022\037\n\027SetLicensePlateFeedbac"
  "k\030\017 \001(\r\022\034\n\024SetGuideLineFeedback\030\020 \001(\r\022!\n"
  "\031SetFactoryDefaultFeedback\030\021 \001(\r\022 \n\030SetR"
  "adarWariningFeedback\030\022 \001(\r\022 \n\030SetSteerin"
  "gWheelFeedback\030\023 \001(\r\022\033\n\023SetLanguageFeedb"
  "ack\030\024 \001(\r\022!\n\031TransparentHoodSwFeedback\030\025"
  " \001(\r\022\027\n\017TrailSwFeedback\030\026 \001(\r\022\021\n\ttimesta"
  "mp\030\027 \001(\004\022\014\n\004tick\030\030 \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_soc_5fto_5fihu_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_soc_5fto_5fihu_2eproto_sccs[1] = {
  &scc_info_SocToIHU_soc_5fto_5fihu_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_soc_5fto_5fihu_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_soc_5fto_5fihu_2eproto = {
  false, false, descriptor_table_protodef_soc_5fto_5fihu_2eproto, "soc_to_ihu.proto", 750,
  &descriptor_table_soc_5fto_5fihu_2eproto_once, descriptor_table_soc_5fto_5fihu_2eproto_sccs, descriptor_table_soc_5fto_5fihu_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_soc_5fto_5fihu_2eproto::offsets,
  file_level_metadata_soc_5fto_5fihu_2eproto, 1, file_level_enum_descriptors_soc_5fto_5fihu_2eproto, file_level_service_descriptors_soc_5fto_5fihu_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_soc_5fto_5fihu_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_soc_5fto_5fihu_2eproto)), true);
namespace minieye {

// ===================================================================

void SocToIHU::InitAsDefaultInstance() {
}
class SocToIHU::_Internal {
 public:
};

SocToIHU::SocToIHU(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.SocToIHU)
}
SocToIHU::SocToIHU(const SocToIHU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&faultstatuscamerafront_, &from.faultstatuscamerafront_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&faultstatuscamerafront_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.SocToIHU)
}

void SocToIHU::SharedCtor() {
  ::memset(&faultstatuscamerafront_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&faultstatuscamerafront_)) + sizeof(tick_));
}

SocToIHU::~SocToIHU() {
  // @@protoc_insertion_point(destructor:minieye.SocToIHU)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SocToIHU::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SocToIHU::ArenaDtor(void* object) {
  SocToIHU* _this = reinterpret_cast< SocToIHU* >(object);
  (void)_this;
}
void SocToIHU::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SocToIHU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SocToIHU& SocToIHU::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SocToIHU_soc_5fto_5fihu_2eproto.base);
  return *internal_default_instance();
}


void SocToIHU::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.SocToIHU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&faultstatuscamerafront_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&faultstatuscamerafront_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocToIHU::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 FaultStatusCameraFront = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          faultstatuscamerafront_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 FaultStatusCameraLeft = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          faultstatuscameraleft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 FaultStatusCameraRear = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          faultstatuscamerarear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 FaultStatusCameraRight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          faultstatuscameraright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AVMFuncSts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          avmfuncsts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AVMActDeactDisplay = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          avmactdeactdisplay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AVMDisplayMode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          avmdisplaymode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AVMCalibrationState = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          avmcalibrationstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SetTurnIndicationFeedback = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          setturnindicationfeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SetBodyColorFeedback = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          setbodycolorfeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SetAutoZoomFeedback = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          setautozoomfeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SetPDCTriggerFeedback = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          setpdctriggerfeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SetTransparencyFeedback = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          settransparencyfeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SetAutoExitFeedback = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          setautoexitfeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SetLicensePlateFeedback = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          setlicenseplatefeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SetGuideLineFeedback = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          setguidelinefeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SetFactoryDefaultFeedback = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          setfactorydefaultfeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SetRadarWariningFeedback = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          setradarwariningfeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SetSteeringWheelFeedback = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          setsteeringwheelfeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SetLanguageFeedback = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          setlanguagefeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 TransparentHoodSwFeedback = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          transparenthoodswfeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 TrailSwFeedback = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          trailswfeedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocToIHU::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.SocToIHU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 FaultStatusCameraFront = 1;
  if (this->faultstatuscamerafront() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_faultstatuscamerafront(), target);
  }

  // uint32 FaultStatusCameraLeft = 2;
  if (this->faultstatuscameraleft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_faultstatuscameraleft(), target);
  }

  // uint32 FaultStatusCameraRear = 3;
  if (this->faultstatuscamerarear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_faultstatuscamerarear(), target);
  }

  // uint32 FaultStatusCameraRight = 4;
  if (this->faultstatuscameraright() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_faultstatuscameraright(), target);
  }

  // uint32 AVMFuncSts = 5;
  if (this->avmfuncsts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_avmfuncsts(), target);
  }

  // uint32 AVMActDeactDisplay = 6;
  if (this->avmactdeactdisplay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_avmactdeactdisplay(), target);
  }

  // uint32 AVMDisplayMode = 7;
  if (this->avmdisplaymode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_avmdisplaymode(), target);
  }

  // uint32 AVMCalibrationState = 8;
  if (this->avmcalibrationstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_avmcalibrationstate(), target);
  }

  // uint32 SetTurnIndicationFeedback = 9;
  if (this->setturnindicationfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_setturnindicationfeedback(), target);
  }

  // uint32 SetBodyColorFeedback = 10;
  if (this->setbodycolorfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_setbodycolorfeedback(), target);
  }

  // uint32 SetAutoZoomFeedback = 11;
  if (this->setautozoomfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_setautozoomfeedback(), target);
  }

  // uint32 SetPDCTriggerFeedback = 12;
  if (this->setpdctriggerfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_setpdctriggerfeedback(), target);
  }

  // uint32 SetTransparencyFeedback = 13;
  if (this->settransparencyfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_settransparencyfeedback(), target);
  }

  // uint32 SetAutoExitFeedback = 14;
  if (this->setautoexitfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_setautoexitfeedback(), target);
  }

  // uint32 SetLicensePlateFeedback = 15;
  if (this->setlicenseplatefeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_setlicenseplatefeedback(), target);
  }

  // uint32 SetGuideLineFeedback = 16;
  if (this->setguidelinefeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_setguidelinefeedback(), target);
  }

  // uint32 SetFactoryDefaultFeedback = 17;
  if (this->setfactorydefaultfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_setfactorydefaultfeedback(), target);
  }

  // uint32 SetRadarWariningFeedback = 18;
  if (this->setradarwariningfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_setradarwariningfeedback(), target);
  }

  // uint32 SetSteeringWheelFeedback = 19;
  if (this->setsteeringwheelfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_setsteeringwheelfeedback(), target);
  }

  // uint32 SetLanguageFeedback = 20;
  if (this->setlanguagefeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_setlanguagefeedback(), target);
  }

  // uint32 TransparentHoodSwFeedback = 21;
  if (this->transparenthoodswfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_transparenthoodswfeedback(), target);
  }

  // uint32 TrailSwFeedback = 22;
  if (this->trailswfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_trailswfeedback(), target);
  }

  // uint64 timestamp = 23;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(23, this->_internal_timestamp(), target);
  }

  // uint64 tick = 24;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(24, this->_internal_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.SocToIHU)
  return target;
}

size_t SocToIHU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.SocToIHU)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 FaultStatusCameraFront = 1;
  if (this->faultstatuscamerafront() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_faultstatuscamerafront());
  }

  // uint32 FaultStatusCameraLeft = 2;
  if (this->faultstatuscameraleft() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_faultstatuscameraleft());
  }

  // uint32 FaultStatusCameraRear = 3;
  if (this->faultstatuscamerarear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_faultstatuscamerarear());
  }

  // uint32 FaultStatusCameraRight = 4;
  if (this->faultstatuscameraright() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_faultstatuscameraright());
  }

  // uint32 AVMFuncSts = 5;
  if (this->avmfuncsts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avmfuncsts());
  }

  // uint32 AVMActDeactDisplay = 6;
  if (this->avmactdeactdisplay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avmactdeactdisplay());
  }

  // uint32 AVMDisplayMode = 7;
  if (this->avmdisplaymode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avmdisplaymode());
  }

  // uint32 AVMCalibrationState = 8;
  if (this->avmcalibrationstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avmcalibrationstate());
  }

  // uint32 SetTurnIndicationFeedback = 9;
  if (this->setturnindicationfeedback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_setturnindicationfeedback());
  }

  // uint32 SetBodyColorFeedback = 10;
  if (this->setbodycolorfeedback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_setbodycolorfeedback());
  }

  // uint32 SetAutoZoomFeedback = 11;
  if (this->setautozoomfeedback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_setautozoomfeedback());
  }

  // uint32 SetPDCTriggerFeedback = 12;
  if (this->setpdctriggerfeedback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_setpdctriggerfeedback());
  }

  // uint32 SetTransparencyFeedback = 13;
  if (this->settransparencyfeedback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_settransparencyfeedback());
  }

  // uint32 SetAutoExitFeedback = 14;
  if (this->setautoexitfeedback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_setautoexitfeedback());
  }

  // uint32 SetLicensePlateFeedback = 15;
  if (this->setlicenseplatefeedback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_setlicenseplatefeedback());
  }

  // uint32 SetGuideLineFeedback = 16;
  if (this->setguidelinefeedback() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_setguidelinefeedback());
  }

  // uint32 SetFactoryDefaultFeedback = 17;
  if (this->setfactorydefaultfeedback() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_setfactorydefaultfeedback());
  }

  // uint32 SetRadarWariningFeedback = 18;
  if (this->setradarwariningfeedback() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_setradarwariningfeedback());
  }

  // uint32 SetSteeringWheelFeedback = 19;
  if (this->setsteeringwheelfeedback() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_setsteeringwheelfeedback());
  }

  // uint32 SetLanguageFeedback = 20;
  if (this->setlanguagefeedback() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_setlanguagefeedback());
  }

  // uint32 TransparentHoodSwFeedback = 21;
  if (this->transparenthoodswfeedback() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_transparenthoodswfeedback());
  }

  // uint32 TrailSwFeedback = 22;
  if (this->trailswfeedback() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trailswfeedback());
  }

  // uint64 timestamp = 23;
  if (this->timestamp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 24;
  if (this->tick() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocToIHU::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.SocToIHU)
  GOOGLE_DCHECK_NE(&from, this);
  const SocToIHU* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SocToIHU>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.SocToIHU)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.SocToIHU)
    MergeFrom(*source);
  }
}

void SocToIHU::MergeFrom(const SocToIHU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.SocToIHU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.faultstatuscamerafront() != 0) {
    _internal_set_faultstatuscamerafront(from._internal_faultstatuscamerafront());
  }
  if (from.faultstatuscameraleft() != 0) {
    _internal_set_faultstatuscameraleft(from._internal_faultstatuscameraleft());
  }
  if (from.faultstatuscamerarear() != 0) {
    _internal_set_faultstatuscamerarear(from._internal_faultstatuscamerarear());
  }
  if (from.faultstatuscameraright() != 0) {
    _internal_set_faultstatuscameraright(from._internal_faultstatuscameraright());
  }
  if (from.avmfuncsts() != 0) {
    _internal_set_avmfuncsts(from._internal_avmfuncsts());
  }
  if (from.avmactdeactdisplay() != 0) {
    _internal_set_avmactdeactdisplay(from._internal_avmactdeactdisplay());
  }
  if (from.avmdisplaymode() != 0) {
    _internal_set_avmdisplaymode(from._internal_avmdisplaymode());
  }
  if (from.avmcalibrationstate() != 0) {
    _internal_set_avmcalibrationstate(from._internal_avmcalibrationstate());
  }
  if (from.setturnindicationfeedback() != 0) {
    _internal_set_setturnindicationfeedback(from._internal_setturnindicationfeedback());
  }
  if (from.setbodycolorfeedback() != 0) {
    _internal_set_setbodycolorfeedback(from._internal_setbodycolorfeedback());
  }
  if (from.setautozoomfeedback() != 0) {
    _internal_set_setautozoomfeedback(from._internal_setautozoomfeedback());
  }
  if (from.setpdctriggerfeedback() != 0) {
    _internal_set_setpdctriggerfeedback(from._internal_setpdctriggerfeedback());
  }
  if (from.settransparencyfeedback() != 0) {
    _internal_set_settransparencyfeedback(from._internal_settransparencyfeedback());
  }
  if (from.setautoexitfeedback() != 0) {
    _internal_set_setautoexitfeedback(from._internal_setautoexitfeedback());
  }
  if (from.setlicenseplatefeedback() != 0) {
    _internal_set_setlicenseplatefeedback(from._internal_setlicenseplatefeedback());
  }
  if (from.setguidelinefeedback() != 0) {
    _internal_set_setguidelinefeedback(from._internal_setguidelinefeedback());
  }
  if (from.setfactorydefaultfeedback() != 0) {
    _internal_set_setfactorydefaultfeedback(from._internal_setfactorydefaultfeedback());
  }
  if (from.setradarwariningfeedback() != 0) {
    _internal_set_setradarwariningfeedback(from._internal_setradarwariningfeedback());
  }
  if (from.setsteeringwheelfeedback() != 0) {
    _internal_set_setsteeringwheelfeedback(from._internal_setsteeringwheelfeedback());
  }
  if (from.setlanguagefeedback() != 0) {
    _internal_set_setlanguagefeedback(from._internal_setlanguagefeedback());
  }
  if (from.transparenthoodswfeedback() != 0) {
    _internal_set_transparenthoodswfeedback(from._internal_transparenthoodswfeedback());
  }
  if (from.trailswfeedback() != 0) {
    _internal_set_trailswfeedback(from._internal_trailswfeedback());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void SocToIHU::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.SocToIHU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocToIHU::CopyFrom(const SocToIHU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.SocToIHU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocToIHU::IsInitialized() const {
  return true;
}

void SocToIHU::InternalSwap(SocToIHU* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SocToIHU, tick_)
      + sizeof(SocToIHU::tick_)
      - PROTOBUF_FIELD_OFFSET(SocToIHU, faultstatuscamerafront_)>(
          reinterpret_cast<char*>(&faultstatuscamerafront_),
          reinterpret_cast<char*>(&other->faultstatuscamerafront_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SocToIHU::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::SocToIHU* Arena::CreateMaybeMessage< ::minieye::SocToIHU >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::SocToIHU >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
