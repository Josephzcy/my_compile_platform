// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uss_output.proto

#include "uss_output.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_uss_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CornerPt_uss_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_uss_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Emap_uss_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_uss_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Obstacle_uss_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_uss_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2D_uss_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_uss_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UssOutput_uss_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_uss_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UssParkingSlot_uss_5foutput_2eproto;
namespace minieye {
class Point2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point2D> _instance;
} _Point2D_default_instance_;
class CornerPtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CornerPt> _instance;
} _CornerPt_default_instance_;
class UssParkingSlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UssParkingSlot> _instance;
} _UssParkingSlot_default_instance_;
class ObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacle> _instance;
} _Obstacle_default_instance_;
class EmapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Emap> _instance;
} _Emap_default_instance_;
class UssOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UssOutput> _instance;
} _UssOutput_default_instance_;
class UssOutputListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UssOutputList> _instance;
} _UssOutputList_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_CornerPt_uss_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_CornerPt_default_instance_;
    new (ptr) ::minieye::CornerPt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::CornerPt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CornerPt_uss_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CornerPt_uss_5foutput_2eproto}, {
      &scc_info_Point2D_uss_5foutput_2eproto.base,}};

static void InitDefaultsscc_info_Emap_uss_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_Emap_default_instance_;
    new (ptr) ::minieye::Emap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::Emap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Emap_uss_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Emap_uss_5foutput_2eproto}, {
      &scc_info_Point2D_uss_5foutput_2eproto.base,}};

static void InitDefaultsscc_info_Obstacle_uss_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_Obstacle_default_instance_;
    new (ptr) ::minieye::Obstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::Obstacle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Obstacle_uss_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Obstacle_uss_5foutput_2eproto}, {
      &scc_info_Point2D_uss_5foutput_2eproto.base,}};

static void InitDefaultsscc_info_Point2D_uss_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_Point2D_default_instance_;
    new (ptr) ::minieye::Point2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::Point2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2D_uss_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point2D_uss_5foutput_2eproto}, {}};

static void InitDefaultsscc_info_UssOutput_uss_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_UssOutput_default_instance_;
    new (ptr) ::minieye::UssOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::UssOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UssOutput_uss_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UssOutput_uss_5foutput_2eproto}, {
      &scc_info_UssParkingSlot_uss_5foutput_2eproto.base,
      &scc_info_Obstacle_uss_5foutput_2eproto.base,
      &scc_info_Emap_uss_5foutput_2eproto.base,}};

static void InitDefaultsscc_info_UssOutputList_uss_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_UssOutputList_default_instance_;
    new (ptr) ::minieye::UssOutputList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::UssOutputList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UssOutputList_uss_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UssOutputList_uss_5foutput_2eproto}, {
      &scc_info_UssOutput_uss_5foutput_2eproto.base,}};

static void InitDefaultsscc_info_UssParkingSlot_uss_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_UssParkingSlot_default_instance_;
    new (ptr) ::minieye::UssParkingSlot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::UssParkingSlot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UssParkingSlot_uss_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UssParkingSlot_uss_5foutput_2eproto}, {
      &scc_info_CornerPt_uss_5foutput_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_uss_5foutput_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_uss_5foutput_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_uss_5foutput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_uss_5foutput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::Point2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::Point2D, x_),
  PROTOBUF_FIELD_OFFSET(::minieye::Point2D, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::CornerPt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::CornerPt, id_),
  PROTOBUF_FIELD_OFFSET(::minieye::CornerPt, vehicle_pt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::UssParkingSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::UssParkingSlot, id_),
  PROTOBUF_FIELD_OFFSET(::minieye::UssParkingSlot, type_),
  PROTOBUF_FIELD_OFFSET(::minieye::UssParkingSlot, width_),
  PROTOBUF_FIELD_OFFSET(::minieye::UssParkingSlot, length_),
  PROTOBUF_FIELD_OFFSET(::minieye::UssParkingSlot, parking_stage_),
  PROTOBUF_FIELD_OFFSET(::minieye::UssParkingSlot, corner_pts_),
  PROTOBUF_FIELD_OFFSET(::minieye::UssParkingSlot, is_left_ps_),
  PROTOBUF_FIELD_OFFSET(::minieye::UssParkingSlot, single_tick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::Obstacle, type_),
  PROTOBUF_FIELD_OFFSET(::minieye::Obstacle, id_),
  PROTOBUF_FIELD_OFFSET(::minieye::Obstacle, score_),
  PROTOBUF_FIELD_OFFSET(::minieye::Obstacle, vehpt0_),
  PROTOBUF_FIELD_OFFSET(::minieye::Obstacle, vehpt1_),
  PROTOBUF_FIELD_OFFSET(::minieye::Obstacle, triangle_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::Obstacle, single_tick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::Emap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::Emap, id_),
  PROTOBUF_FIELD_OFFSET(::minieye::Emap, n_),
  PROTOBUF_FIELD_OFFSET(::minieye::Emap, vehpt_),
  PROTOBUF_FIELD_OFFSET(::minieye::Emap, is_left_point_),
  PROTOBUF_FIELD_OFFSET(::minieye::Emap, single_tick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::UssOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::UssOutput, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::UssOutput, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::UssOutput, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::UssOutput, parkslots_),
  PROTOBUF_FIELD_OFFSET(::minieye::UssOutput, obstacle_rects_),
  PROTOBUF_FIELD_OFFSET(::minieye::UssOutput, emap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::UssOutputList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::UssOutputList, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::UssOutputList, uss_outputs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::Point2D)},
  { 7, -1, sizeof(::minieye::CornerPt)},
  { 14, -1, sizeof(::minieye::UssParkingSlot)},
  { 27, -1, sizeof(::minieye::Obstacle)},
  { 39, -1, sizeof(::minieye::Emap)},
  { 49, -1, sizeof(::minieye::UssOutput)},
  { 60, -1, sizeof(::minieye::UssOutputList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_Point2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_CornerPt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_UssParkingSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_Obstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_Emap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_UssOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_UssOutputList_default_instance_),
};

const char descriptor_table_protodef_uss_5foutput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020uss_output.proto\022\007minieye\"\037\n\007Point2D\022\t"
  "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"<\n\010CornerPt\022\n\n\002id\030\001"
  " \001(\r\022$\n\nvehicle_pt\030\002 \001(\0132\020.minieye.Point"
  "2D\"\251\003\n\016UssParkingSlot\022\n\n\002id\030\001 \001(\r\022.\n\004typ"
  "e\030\002 \001(\0162 .minieye.UssParkingSlot.SlotTyp"
  "e\022\r\n\005width\030\003 \001(\001\022\016\n\006length\030\004 \001(\001\022;\n\rpark"
  "ing_stage\030\005 \001(\0162$.minieye.UssParkingSlot"
  ".ParkingStage\022%\n\ncorner_pts\030\006 \003(\0132\021.mini"
  "eye.CornerPt\022\022\n\nis_left_ps\030\007 \001(\010\022\023\n\013sing"
  "le_tick\030\010 \001(\004\"D\n\010SlotType\022\014\n\010kUnknown\020\000\022"
  "\r\n\tkVertical\020\001\022\r\n\tKParallel\020\002\022\014\n\010KDiamon"
  "d\020\003\"i\n\014ParkingStage\022\016\n\nkPsDefault\020\000\022\021\n\rk"
  "PsDiscontent\020\001\022\016\n\nkPsOutside\020\002\022\r\n\tkPsIns"
  "ide\020\003\022\027\n\023KInsideContinuously\020\004\"\321\001\n\010Obsta"
  "cle\022#\n\004type\030\001 \001(\0162\025.minieye.ObstacleType"
  "\022\n\n\002id\030\002 \001(\r\022\r\n\005score\030\003 \001(\002\022 \n\006vehPt0\030\004 "
  "\001(\0132\020.minieye.Point2D\022 \n\006vehPt1\030\005 \001(\0132\020."
  "minieye.Point2D\022,\n\rtriangle_type\030\006 \001(\0162\025"
  ".minieye.TriangleType\022\023\n\013single_tick\030\007 \001"
  "(\004\"\352\001\n\004Emap\022\n\n\002id\030\001 \001(\r\022\'\n\001n\030\002 \001(\0162\034.min"
  "ieye.Emap.EMapConfidence\022\037\n\005vehPt\030\003 \001(\0132"
  "\020.minieye.Point2D\022\025\n\ris_left_point\030\004 \001(\010"
  "\022\023\n\013single_tick\030\005 \001(\004\"`\n\016EMapConfidence\022"
  "\022\n\016kEMCDegreeNull\020\000\022\021\n\rkEMCDegreeLow\020\001\022\023"
  "\n\017kEMCDegreeFuzzy\020\002\022\022\n\016kEMCDegreeHigh\020\003\""
  "\262\001\n\tUssOutput\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010fram"
  "e_id\030\002 \001(\004\022\014\n\004tick\030\003 \001(\004\022*\n\tparkslots\030\004 "
  "\003(\0132\027.minieye.UssParkingSlot\022)\n\016obstacle"
  "_rects\030\005 \003(\0132\021.minieye.Obstacle\022\033\n\004emap\030"
  "\006 \003(\0132\r.minieye.Emap\"F\n\rUssOutputList\022\014\n"
  "\004tick\030\001 \001(\004\022\'\n\013uss_outputs\030\002 \003(\0132\022.minie"
  "ye.UssOutput*3\n\014ObstacleType\022\t\n\005kNone\020\000\022"
  "\n\n\006kPoint\020\001\022\014\n\010kSegment\020\002*n\n\014TriangleTyp"
  "e\022\021\n\rkTriangleRS_R\020\000\022\021\n\rkTriangleR_RM\020\001\022"
  "\022\n\016kTriangleRM_LM\020\002\022\021\n\rkTriangleLM_L\020\003\022\021"
  "\n\rkTriangleL_LS\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_uss_5foutput_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_uss_5foutput_2eproto_sccs[7] = {
  &scc_info_CornerPt_uss_5foutput_2eproto.base,
  &scc_info_Emap_uss_5foutput_2eproto.base,
  &scc_info_Obstacle_uss_5foutput_2eproto.base,
  &scc_info_Point2D_uss_5foutput_2eproto.base,
  &scc_info_UssOutput_uss_5foutput_2eproto.base,
  &scc_info_UssOutputList_uss_5foutput_2eproto.base,
  &scc_info_UssParkingSlot_uss_5foutput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_uss_5foutput_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uss_5foutput_2eproto = {
  false, false, descriptor_table_protodef_uss_5foutput_2eproto, "uss_output.proto", 1425,
  &descriptor_table_uss_5foutput_2eproto_once, descriptor_table_uss_5foutput_2eproto_sccs, descriptor_table_uss_5foutput_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_uss_5foutput_2eproto::offsets,
  file_level_metadata_uss_5foutput_2eproto, 7, file_level_enum_descriptors_uss_5foutput_2eproto, file_level_service_descriptors_uss_5foutput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_uss_5foutput_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_uss_5foutput_2eproto)), true);
namespace minieye {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UssParkingSlot_SlotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uss_5foutput_2eproto);
  return file_level_enum_descriptors_uss_5foutput_2eproto[0];
}
bool UssParkingSlot_SlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UssParkingSlot_SlotType UssParkingSlot::kUnknown;
constexpr UssParkingSlot_SlotType UssParkingSlot::kVertical;
constexpr UssParkingSlot_SlotType UssParkingSlot::KParallel;
constexpr UssParkingSlot_SlotType UssParkingSlot::KDiamond;
constexpr UssParkingSlot_SlotType UssParkingSlot::SlotType_MIN;
constexpr UssParkingSlot_SlotType UssParkingSlot::SlotType_MAX;
constexpr int UssParkingSlot::SlotType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UssParkingSlot_ParkingStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uss_5foutput_2eproto);
  return file_level_enum_descriptors_uss_5foutput_2eproto[1];
}
bool UssParkingSlot_ParkingStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UssParkingSlot_ParkingStage UssParkingSlot::kPsDefault;
constexpr UssParkingSlot_ParkingStage UssParkingSlot::kPsDiscontent;
constexpr UssParkingSlot_ParkingStage UssParkingSlot::kPsOutside;
constexpr UssParkingSlot_ParkingStage UssParkingSlot::kPsInside;
constexpr UssParkingSlot_ParkingStage UssParkingSlot::KInsideContinuously;
constexpr UssParkingSlot_ParkingStage UssParkingSlot::ParkingStage_MIN;
constexpr UssParkingSlot_ParkingStage UssParkingSlot::ParkingStage_MAX;
constexpr int UssParkingSlot::ParkingStage_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Emap_EMapConfidence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uss_5foutput_2eproto);
  return file_level_enum_descriptors_uss_5foutput_2eproto[2];
}
bool Emap_EMapConfidence_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Emap_EMapConfidence Emap::kEMCDegreeNull;
constexpr Emap_EMapConfidence Emap::kEMCDegreeLow;
constexpr Emap_EMapConfidence Emap::kEMCDegreeFuzzy;
constexpr Emap_EMapConfidence Emap::kEMCDegreeHigh;
constexpr Emap_EMapConfidence Emap::EMapConfidence_MIN;
constexpr Emap_EMapConfidence Emap::EMapConfidence_MAX;
constexpr int Emap::EMapConfidence_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uss_5foutput_2eproto);
  return file_level_enum_descriptors_uss_5foutput_2eproto[3];
}
bool ObstacleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TriangleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uss_5foutput_2eproto);
  return file_level_enum_descriptors_uss_5foutput_2eproto[4];
}
bool TriangleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Point2D::InitAsDefaultInstance() {
}
class Point2D::_Internal {
 public:
};

Point2D::Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.Point2D)
}
Point2D::Point2D(const Point2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:minieye.Point2D)
}

void Point2D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:minieye.Point2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point2D::ArenaDtor(void* object) {
  Point2D* _this = reinterpret_cast< Point2D* >(object);
  (void)_this;
}
void Point2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point2D& Point2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point2D_uss_5foutput_2eproto.base);
  return *internal_default_instance();
}


void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.Point2D)
  return target;
}

size_t Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.Point2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.Point2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.Point2D)
    MergeFrom(*source);
  }
}

void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {
  return true;
}

void Point2D::InternalSwap(Point2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2D, y_)
      + sizeof(Point2D::y_)
      - PROTOBUF_FIELD_OFFSET(Point2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CornerPt::InitAsDefaultInstance() {
  ::minieye::_CornerPt_default_instance_._instance.get_mutable()->vehicle_pt_ = const_cast< ::minieye::Point2D*>(
      ::minieye::Point2D::internal_default_instance());
}
class CornerPt::_Internal {
 public:
  static const ::minieye::Point2D& vehicle_pt(const CornerPt* msg);
};

const ::minieye::Point2D&
CornerPt::_Internal::vehicle_pt(const CornerPt* msg) {
  return *msg->vehicle_pt_;
}
CornerPt::CornerPt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.CornerPt)
}
CornerPt::CornerPt(const CornerPt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehicle_pt()) {
    vehicle_pt_ = new ::minieye::Point2D(*from.vehicle_pt_);
  } else {
    vehicle_pt_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:minieye.CornerPt)
}

void CornerPt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CornerPt_uss_5foutput_2eproto.base);
  ::memset(&vehicle_pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&vehicle_pt_)) + sizeof(id_));
}

CornerPt::~CornerPt() {
  // @@protoc_insertion_point(destructor:minieye.CornerPt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CornerPt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vehicle_pt_;
}

void CornerPt::ArenaDtor(void* object) {
  CornerPt* _this = reinterpret_cast< CornerPt* >(object);
  (void)_this;
}
void CornerPt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CornerPt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CornerPt& CornerPt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CornerPt_uss_5foutput_2eproto.base);
  return *internal_default_instance();
}


void CornerPt::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.CornerPt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vehicle_pt_ != nullptr) {
    delete vehicle_pt_;
  }
  vehicle_pt_ = nullptr;
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CornerPt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Point2D vehicle_pt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CornerPt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.CornerPt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .minieye.Point2D vehicle_pt = 2;
  if (this->has_vehicle_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vehicle_pt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.CornerPt)
  return target;
}

size_t CornerPt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.CornerPt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.Point2D vehicle_pt = 2;
  if (this->has_vehicle_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_pt_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CornerPt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.CornerPt)
  GOOGLE_DCHECK_NE(&from, this);
  const CornerPt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CornerPt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.CornerPt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.CornerPt)
    MergeFrom(*source);
  }
}

void CornerPt::MergeFrom(const CornerPt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.CornerPt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vehicle_pt()) {
    _internal_mutable_vehicle_pt()->::minieye::Point2D::MergeFrom(from._internal_vehicle_pt());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CornerPt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.CornerPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CornerPt::CopyFrom(const CornerPt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.CornerPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CornerPt::IsInitialized() const {
  return true;
}

void CornerPt::InternalSwap(CornerPt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CornerPt, id_)
      + sizeof(CornerPt::id_)
      - PROTOBUF_FIELD_OFFSET(CornerPt, vehicle_pt_)>(
          reinterpret_cast<char*>(&vehicle_pt_),
          reinterpret_cast<char*>(&other->vehicle_pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CornerPt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UssParkingSlot::InitAsDefaultInstance() {
}
class UssParkingSlot::_Internal {
 public:
};

UssParkingSlot::UssParkingSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  corner_pts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.UssParkingSlot)
}
UssParkingSlot::UssParkingSlot(const UssParkingSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      corner_pts_(from.corner_pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_tick_) -
    reinterpret_cast<char*>(&id_)) + sizeof(single_tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.UssParkingSlot)
}

void UssParkingSlot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UssParkingSlot_uss_5foutput_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&single_tick_) -
      reinterpret_cast<char*>(&id_)) + sizeof(single_tick_));
}

UssParkingSlot::~UssParkingSlot() {
  // @@protoc_insertion_point(destructor:minieye.UssParkingSlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UssParkingSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UssParkingSlot::ArenaDtor(void* object) {
  UssParkingSlot* _this = reinterpret_cast< UssParkingSlot* >(object);
  (void)_this;
}
void UssParkingSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UssParkingSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UssParkingSlot& UssParkingSlot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UssParkingSlot_uss_5foutput_2eproto.base);
  return *internal_default_instance();
}


void UssParkingSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.UssParkingSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  corner_pts_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&single_tick_) -
      reinterpret_cast<char*>(&id_)) + sizeof(single_tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UssParkingSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.UssParkingSlot.SlotType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::minieye::UssParkingSlot_SlotType>(val));
        } else goto handle_unusual;
        continue;
      // double width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .minieye.UssParkingSlot.ParkingStage parking_stage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_parking_stage(static_cast<::minieye::UssParkingSlot_ParkingStage>(val));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.CornerPt corner_pts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_corner_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_left_ps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_left_ps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 single_tick = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          single_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UssParkingSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.UssParkingSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .minieye.UssParkingSlot.SlotType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // double width = 3;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_width(), target);
  }

  // double length = 4;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_length(), target);
  }

  // .minieye.UssParkingSlot.ParkingStage parking_stage = 5;
  if (this->parking_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_parking_stage(), target);
  }

  // repeated .minieye.CornerPt corner_pts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_corner_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_corner_pts(i), target, stream);
  }

  // bool is_left_ps = 7;
  if (this->is_left_ps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_left_ps(), target);
  }

  // uint64 single_tick = 8;
  if (this->single_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_single_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.UssParkingSlot)
  return target;
}

size_t UssParkingSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.UssParkingSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.CornerPt corner_pts = 6;
  total_size += 1UL * this->_internal_corner_pts_size();
  for (const auto& msg : this->corner_pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .minieye.UssParkingSlot.SlotType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // double width = 3;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double length = 4;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 8;
  }

  // .minieye.UssParkingSlot.ParkingStage parking_stage = 5;
  if (this->parking_stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parking_stage());
  }

  // bool is_left_ps = 7;
  if (this->is_left_ps() != 0) {
    total_size += 1 + 1;
  }

  // uint64 single_tick = 8;
  if (this->single_tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_single_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UssParkingSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.UssParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const UssParkingSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UssParkingSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.UssParkingSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.UssParkingSlot)
    MergeFrom(*source);
  }
}

void UssParkingSlot::MergeFrom(const UssParkingSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.UssParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  corner_pts_.MergeFrom(from.corner_pts_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (from.parking_stage() != 0) {
    _internal_set_parking_stage(from._internal_parking_stage());
  }
  if (from.is_left_ps() != 0) {
    _internal_set_is_left_ps(from._internal_is_left_ps());
  }
  if (from.single_tick() != 0) {
    _internal_set_single_tick(from._internal_single_tick());
  }
}

void UssParkingSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.UssParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UssParkingSlot::CopyFrom(const UssParkingSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.UssParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UssParkingSlot::IsInitialized() const {
  return true;
}

void UssParkingSlot::InternalSwap(UssParkingSlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  corner_pts_.InternalSwap(&other->corner_pts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UssParkingSlot, single_tick_)
      + sizeof(UssParkingSlot::single_tick_)
      - PROTOBUF_FIELD_OFFSET(UssParkingSlot, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UssParkingSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Obstacle::InitAsDefaultInstance() {
  ::minieye::_Obstacle_default_instance_._instance.get_mutable()->vehpt0_ = const_cast< ::minieye::Point2D*>(
      ::minieye::Point2D::internal_default_instance());
  ::minieye::_Obstacle_default_instance_._instance.get_mutable()->vehpt1_ = const_cast< ::minieye::Point2D*>(
      ::minieye::Point2D::internal_default_instance());
}
class Obstacle::_Internal {
 public:
  static const ::minieye::Point2D& vehpt0(const Obstacle* msg);
  static const ::minieye::Point2D& vehpt1(const Obstacle* msg);
};

const ::minieye::Point2D&
Obstacle::_Internal::vehpt0(const Obstacle* msg) {
  return *msg->vehpt0_;
}
const ::minieye::Point2D&
Obstacle::_Internal::vehpt1(const Obstacle* msg) {
  return *msg->vehpt1_;
}
Obstacle::Obstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehpt0()) {
    vehpt0_ = new ::minieye::Point2D(*from.vehpt0_);
  } else {
    vehpt0_ = nullptr;
  }
  if (from._internal_has_vehpt1()) {
    vehpt1_ = new ::minieye::Point2D(*from.vehpt1_);
  } else {
    vehpt1_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_tick_) -
    reinterpret_cast<char*>(&type_)) + sizeof(single_tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.Obstacle)
}

void Obstacle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Obstacle_uss_5foutput_2eproto.base);
  ::memset(&vehpt0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&single_tick_) -
      reinterpret_cast<char*>(&vehpt0_)) + sizeof(single_tick_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:minieye.Obstacle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Obstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vehpt0_;
  if (this != internal_default_instance()) delete vehpt1_;
}

void Obstacle::ArenaDtor(void* object) {
  Obstacle* _this = reinterpret_cast< Obstacle* >(object);
  (void)_this;
}
void Obstacle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Obstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacle& Obstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obstacle_uss_5foutput_2eproto.base);
  return *internal_default_instance();
}


void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.Obstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vehpt0_ != nullptr) {
    delete vehpt0_;
  }
  vehpt0_ = nullptr;
  if (GetArena() == nullptr && vehpt1_ != nullptr) {
    delete vehpt1_;
  }
  vehpt1_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&single_tick_) -
      reinterpret_cast<char*>(&type_)) + sizeof(single_tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Obstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.ObstacleType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::minieye::ObstacleType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .minieye.Point2D vehPt0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehpt0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Point2D vehPt1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehpt1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.TriangleType triangle_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_triangle_type(static_cast<::minieye::TriangleType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 single_tick = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          single_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Obstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.Obstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.ObstacleType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // float score = 3;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_score(), target);
  }

  // .minieye.Point2D vehPt0 = 4;
  if (this->has_vehpt0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vehpt0(this), target, stream);
  }

  // .minieye.Point2D vehPt1 = 5;
  if (this->has_vehpt1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::vehpt1(this), target, stream);
  }

  // .minieye.TriangleType triangle_type = 6;
  if (this->triangle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_triangle_type(), target);
  }

  // uint64 single_tick = 7;
  if (this->single_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_single_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.Obstacle)
  return target;
}

size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.Obstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.Point2D vehPt0 = 4;
  if (this->has_vehpt0()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehpt0_);
  }

  // .minieye.Point2D vehPt1 = 5;
  if (this->has_vehpt1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehpt1_);
  }

  // .minieye.ObstacleType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // float score = 3;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  // .minieye.TriangleType triangle_type = 6;
  if (this->triangle_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_triangle_type());
  }

  // uint64 single_tick = 7;
  if (this->single_tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_single_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.Obstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.Obstacle)
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vehpt0()) {
    _internal_mutable_vehpt0()->::minieye::Point2D::MergeFrom(from._internal_vehpt0());
  }
  if (from.has_vehpt1()) {
    _internal_mutable_vehpt1()->::minieye::Point2D::MergeFrom(from._internal_vehpt1());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
  if (from.triangle_type() != 0) {
    _internal_set_triangle_type(from._internal_triangle_type());
  }
  if (from.single_tick() != 0) {
    _internal_set_single_tick(from._internal_single_tick());
  }
}

void Obstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  return true;
}

void Obstacle::InternalSwap(Obstacle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Obstacle, single_tick_)
      + sizeof(Obstacle::single_tick_)
      - PROTOBUF_FIELD_OFFSET(Obstacle, vehpt0_)>(
          reinterpret_cast<char*>(&vehpt0_),
          reinterpret_cast<char*>(&other->vehpt0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Emap::InitAsDefaultInstance() {
  ::minieye::_Emap_default_instance_._instance.get_mutable()->vehpt_ = const_cast< ::minieye::Point2D*>(
      ::minieye::Point2D::internal_default_instance());
}
class Emap::_Internal {
 public:
  static const ::minieye::Point2D& vehpt(const Emap* msg);
};

const ::minieye::Point2D&
Emap::_Internal::vehpt(const Emap* msg) {
  return *msg->vehpt_;
}
Emap::Emap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.Emap)
}
Emap::Emap(const Emap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehpt()) {
    vehpt_ = new ::minieye::Point2D(*from.vehpt_);
  } else {
    vehpt_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_left_point_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_left_point_));
  // @@protoc_insertion_point(copy_constructor:minieye.Emap)
}

void Emap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Emap_uss_5foutput_2eproto.base);
  ::memset(&vehpt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_left_point_) -
      reinterpret_cast<char*>(&vehpt_)) + sizeof(is_left_point_));
}

Emap::~Emap() {
  // @@protoc_insertion_point(destructor:minieye.Emap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Emap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vehpt_;
}

void Emap::ArenaDtor(void* object) {
  Emap* _this = reinterpret_cast< Emap* >(object);
  (void)_this;
}
void Emap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Emap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Emap& Emap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Emap_uss_5foutput_2eproto.base);
  return *internal_default_instance();
}


void Emap::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.Emap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vehpt_ != nullptr) {
    delete vehpt_;
  }
  vehpt_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_left_point_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_left_point_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Emap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Emap.EMapConfidence n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_n(static_cast<::minieye::Emap_EMapConfidence>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.Point2D vehPt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehpt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_left_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_left_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 single_tick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          single_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Emap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.Emap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .minieye.Emap.EMapConfidence n = 2;
  if (this->n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_n(), target);
  }

  // .minieye.Point2D vehPt = 3;
  if (this->has_vehpt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vehpt(this), target, stream);
  }

  // bool is_left_point = 4;
  if (this->is_left_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_left_point(), target);
  }

  // uint64 single_tick = 5;
  if (this->single_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_single_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.Emap)
  return target;
}

size_t Emap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.Emap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.Point2D vehPt = 3;
  if (this->has_vehpt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehpt_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .minieye.Emap.EMapConfidence n = 2;
  if (this->n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_n());
  }

  // uint64 single_tick = 5;
  if (this->single_tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_single_tick());
  }

  // bool is_left_point = 4;
  if (this->is_left_point() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Emap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.Emap)
  GOOGLE_DCHECK_NE(&from, this);
  const Emap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Emap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.Emap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.Emap)
    MergeFrom(*source);
  }
}

void Emap::MergeFrom(const Emap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.Emap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vehpt()) {
    _internal_mutable_vehpt()->::minieye::Point2D::MergeFrom(from._internal_vehpt());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.n() != 0) {
    _internal_set_n(from._internal_n());
  }
  if (from.single_tick() != 0) {
    _internal_set_single_tick(from._internal_single_tick());
  }
  if (from.is_left_point() != 0) {
    _internal_set_is_left_point(from._internal_is_left_point());
  }
}

void Emap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.Emap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emap::CopyFrom(const Emap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.Emap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emap::IsInitialized() const {
  return true;
}

void Emap::InternalSwap(Emap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Emap, is_left_point_)
      + sizeof(Emap::is_left_point_)
      - PROTOBUF_FIELD_OFFSET(Emap, vehpt_)>(
          reinterpret_cast<char*>(&vehpt_),
          reinterpret_cast<char*>(&other->vehpt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Emap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UssOutput::InitAsDefaultInstance() {
}
class UssOutput::_Internal {
 public:
};

UssOutput::UssOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parkslots_(arena),
  obstacle_rects_(arena),
  emap_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.UssOutput)
}
UssOutput::UssOutput(const UssOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parkslots_(from.parkslots_),
      obstacle_rects_(from.obstacle_rects_),
      emap_(from.emap_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.UssOutput)
}

void UssOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UssOutput_uss_5foutput_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
}

UssOutput::~UssOutput() {
  // @@protoc_insertion_point(destructor:minieye.UssOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UssOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UssOutput::ArenaDtor(void* object) {
  UssOutput* _this = reinterpret_cast< UssOutput* >(object);
  (void)_this;
}
void UssOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UssOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UssOutput& UssOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UssOutput_uss_5foutput_2eproto.base);
  return *internal_default_instance();
}


void UssOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.UssOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parkslots_.Clear();
  obstacle_rects_.Clear();
  emap_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UssOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minieye.UssParkingSlot parkslots = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parkslots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.Obstacle obstacle_rects = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle_rects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.Emap emap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_emap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UssOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.UssOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 frame_id = 2;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_frame_id(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  // repeated .minieye.UssParkingSlot parkslots = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parkslots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_parkslots(i), target, stream);
  }

  // repeated .minieye.Obstacle obstacle_rects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_rects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_obstacle_rects(i), target, stream);
  }

  // repeated .minieye.Emap emap = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_emap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_emap(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.UssOutput)
  return target;
}

size_t UssOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.UssOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.UssParkingSlot parkslots = 4;
  total_size += 1UL * this->_internal_parkslots_size();
  for (const auto& msg : this->parkslots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.Obstacle obstacle_rects = 5;
  total_size += 1UL * this->_internal_obstacle_rects_size();
  for (const auto& msg : this->obstacle_rects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.Emap emap = 6;
  total_size += 1UL * this->_internal_emap_size();
  for (const auto& msg : this->emap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 frame_id = 2;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UssOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.UssOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const UssOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UssOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.UssOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.UssOutput)
    MergeFrom(*source);
  }
}

void UssOutput::MergeFrom(const UssOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.UssOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parkslots_.MergeFrom(from.parkslots_);
  obstacle_rects_.MergeFrom(from.obstacle_rects_);
  emap_.MergeFrom(from.emap_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void UssOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.UssOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UssOutput::CopyFrom(const UssOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.UssOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UssOutput::IsInitialized() const {
  return true;
}

void UssOutput::InternalSwap(UssOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parkslots_.InternalSwap(&other->parkslots_);
  obstacle_rects_.InternalSwap(&other->obstacle_rects_);
  emap_.InternalSwap(&other->emap_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UssOutput, tick_)
      + sizeof(UssOutput::tick_)
      - PROTOBUF_FIELD_OFFSET(UssOutput, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UssOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UssOutputList::InitAsDefaultInstance() {
}
class UssOutputList::_Internal {
 public:
};

UssOutputList::UssOutputList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uss_outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.UssOutputList)
}
UssOutputList::UssOutputList(const UssOutputList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uss_outputs_(from.uss_outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tick_ = from.tick_;
  // @@protoc_insertion_point(copy_constructor:minieye.UssOutputList)
}

void UssOutputList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UssOutputList_uss_5foutput_2eproto.base);
  tick_ = PROTOBUF_ULONGLONG(0);
}

UssOutputList::~UssOutputList() {
  // @@protoc_insertion_point(destructor:minieye.UssOutputList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UssOutputList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UssOutputList::ArenaDtor(void* object) {
  UssOutputList* _this = reinterpret_cast< UssOutputList* >(object);
  (void)_this;
}
void UssOutputList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UssOutputList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UssOutputList& UssOutputList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UssOutputList_uss_5foutput_2eproto.base);
  return *internal_default_instance();
}


void UssOutputList::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.UssOutputList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uss_outputs_.Clear();
  tick_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UssOutputList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minieye.UssOutput uss_outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uss_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UssOutputList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.UssOutputList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tick = 1;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tick(), target);
  }

  // repeated .minieye.UssOutput uss_outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uss_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_uss_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.UssOutputList)
  return target;
}

size_t UssOutputList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.UssOutputList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.UssOutput uss_outputs = 2;
  total_size += 1UL * this->_internal_uss_outputs_size();
  for (const auto& msg : this->uss_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 tick = 1;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UssOutputList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.UssOutputList)
  GOOGLE_DCHECK_NE(&from, this);
  const UssOutputList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UssOutputList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.UssOutputList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.UssOutputList)
    MergeFrom(*source);
  }
}

void UssOutputList::MergeFrom(const UssOutputList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.UssOutputList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uss_outputs_.MergeFrom(from.uss_outputs_);
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void UssOutputList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.UssOutputList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UssOutputList::CopyFrom(const UssOutputList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.UssOutputList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UssOutputList::IsInitialized() const {
  return true;
}

void UssOutputList::InternalSwap(UssOutputList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uss_outputs_.InternalSwap(&other->uss_outputs_);
  swap(tick_, other->tick_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UssOutputList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::Point2D* Arena::CreateMaybeMessage< ::minieye::Point2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::Point2D >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::CornerPt* Arena::CreateMaybeMessage< ::minieye::CornerPt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::CornerPt >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::UssParkingSlot* Arena::CreateMaybeMessage< ::minieye::UssParkingSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::UssParkingSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::Obstacle* Arena::CreateMaybeMessage< ::minieye::Obstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::Obstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::Emap* Arena::CreateMaybeMessage< ::minieye::Emap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::Emap >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::UssOutput* Arena::CreateMaybeMessage< ::minieye::UssOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::UssOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::UssOutputList* Arena::CreateMaybeMessage< ::minieye::UssOutputList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::UssOutputList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
