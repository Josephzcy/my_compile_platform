// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parking_ins.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parking_5fins_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parking_5fins_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parking_5fins_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parking_5fins_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parking_5fins_2eproto;
namespace minieye {
namespace parking {
class AsensingINSData;
class AsensingINSDataDefaultTypeInternal;
extern AsensingINSDataDefaultTypeInternal _AsensingINSData_default_instance_;
class AsensingINSDatas;
class AsensingINSDatasDefaultTypeInternal;
extern AsensingINSDatasDefaultTypeInternal _AsensingINSDatas_default_instance_;
}  // namespace parking
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::parking::AsensingINSData* Arena::CreateMaybeMessage<::minieye::parking::AsensingINSData>(Arena*);
template<> ::minieye::parking::AsensingINSDatas* Arena::CreateMaybeMessage<::minieye::parking::AsensingINSDatas>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {
namespace parking {

enum SolutionType : int {
  NONE = 0,
  FIXEDPOS = 1,
  FIXEDHEIGHT = 2,
  FLOATCONV = 4,
  WIDELANE = 5,
  NARROWLANE = 6,
  DOPPLER_VELOCITY = 8,
  SINGLE = 16,
  PSRDIFF = 17,
  WAAS = 18,
  PROPOGATED = 19,
  OMNISTAR = 20,
  L1_FLOAT = 32,
  IONOFREE_FLOAT = 33,
  NARROW_FLOAT = 34,
  L1_INT = 48,
  WIDE_INT = 49,
  NARROW_INT = 50,
  RTK_DIRECT_INS = 51,
  INS_SBAS = 52,
  INS_PSRSP = 53,
  INS_PSRDIFF = 54,
  INS_RTKFLOAT = 55,
  INS_RTKFIXED = 56,
  INS_OMNISTAR = 57,
  INS_OMNISTAR_HP = 58,
  INS_OMNISTAR_XP = 59,
  OMNISTAR_HP = 64,
  OMNISTAR_XP = 65,
  PPP_CONVERGING = 68,
  PPP = 69,
  INS_PPP_CONVERGING = 73,
  INS_PPP = 74,
  SolutionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SolutionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SolutionType_IsValid(int value);
constexpr SolutionType SolutionType_MIN = NONE;
constexpr SolutionType SolutionType_MAX = INS_PPP;
constexpr int SolutionType_ARRAYSIZE = SolutionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolutionType_descriptor();
template<typename T>
inline const std::string& SolutionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SolutionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SolutionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SolutionType_descriptor(), enum_t_value);
}
inline bool SolutionType_Parse(
    const std::string& name, SolutionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SolutionType>(
    SolutionType_descriptor(), name, value);
}
// ===================================================================

class AsensingINSData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.AsensingINSData) */ {
 public:
  inline AsensingINSData() : AsensingINSData(nullptr) {};
  virtual ~AsensingINSData();

  AsensingINSData(const AsensingINSData& from);
  AsensingINSData(AsensingINSData&& from) noexcept
    : AsensingINSData() {
    *this = ::std::move(from);
  }

  inline AsensingINSData& operator=(const AsensingINSData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsensingINSData& operator=(AsensingINSData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsensingINSData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsensingINSData* internal_default_instance() {
    return reinterpret_cast<const AsensingINSData*>(
               &_AsensingINSData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AsensingINSData& a, AsensingINSData& b) {
    a.Swap(&b);
  }
  inline void Swap(AsensingINSData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AsensingINSData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsensingINSData* New() const final {
    return CreateMaybeMessage<AsensingINSData>(nullptr);
  }

  AsensingINSData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsensingINSData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsensingINSData& from);
  void MergeFrom(const AsensingINSData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsensingINSData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.AsensingINSData";
  }
  protected:
  explicit AsensingINSData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fins_2eproto);
    return ::descriptor_table_parking_5fins_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kTickFieldNumber = 2,
    kRollFieldNumber = 4,
    kPitchFieldNumber = 5,
    kYawFieldNumber = 6,
    kGyroXFieldNumber = 7,
    kGyroYFieldNumber = 8,
    kGyroZFieldNumber = 9,
    kAccXFieldNumber = 10,
    kAccYFieldNumber = 11,
    kAccZFieldNumber = 12,
    kLatitudeFieldNumber = 13,
    kLongitudeFieldNumber = 14,
    kHeightFieldNumber = 15,
    kEastVelocityFieldNumber = 16,
    kNorthVelocityFieldNumber = 17,
    kUpVelocityFieldNumber = 18,
    kStatusFieldNumber = 19,
    kPosAlignmentFieldNumber = 20,
    kVelAlignmentFieldNumber = 21,
    kAttAlignmentFieldNumber = 22,
    kYawAlignmentFieldNumber = 23,
    kTypeFieldNumber = 24,
    kData1FieldNumber = 25,
    kData2FieldNumber = 26,
    kData3FieldNumber = 27,
    kLatitudeStdDevFieldNumber = 28,
    kLongitudeStdDevFieldNumber = 29,
    kHeightStdDevFieldNumber = 30,
    kVnStdDevFieldNumber = 31,
    kVeStdDevFieldNumber = 32,
    kVdStdDevFieldNumber = 33,
    kRollStdDevFieldNumber = 34,
    kPitchStdDevFieldNumber = 35,
    kTemperatureFieldNumber = 37,
    kYawStdDevFieldNumber = 36,
    kPositionTypeFieldNumber = 38,
    kNumSatsFieldNumber = 39,
    kHeadingTypeFieldNumber = 40,
    kOdometryExistFieldNumber = 41,
  };
  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 2;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double roll = 4;
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // double pitch = 5;
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // double yaw = 6;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // double gyro_x = 7;
  void clear_gyro_x();
  double gyro_x() const;
  void set_gyro_x(double value);
  private:
  double _internal_gyro_x() const;
  void _internal_set_gyro_x(double value);
  public:

  // double gyro_y = 8;
  void clear_gyro_y();
  double gyro_y() const;
  void set_gyro_y(double value);
  private:
  double _internal_gyro_y() const;
  void _internal_set_gyro_y(double value);
  public:

  // double gyro_z = 9;
  void clear_gyro_z();
  double gyro_z() const;
  void set_gyro_z(double value);
  private:
  double _internal_gyro_z() const;
  void _internal_set_gyro_z(double value);
  public:

  // double acc_x = 10;
  void clear_acc_x();
  double acc_x() const;
  void set_acc_x(double value);
  private:
  double _internal_acc_x() const;
  void _internal_set_acc_x(double value);
  public:

  // double acc_y = 11;
  void clear_acc_y();
  double acc_y() const;
  void set_acc_y(double value);
  private:
  double _internal_acc_y() const;
  void _internal_set_acc_y(double value);
  public:

  // double acc_z = 12;
  void clear_acc_z();
  double acc_z() const;
  void set_acc_z(double value);
  private:
  double _internal_acc_z() const;
  void _internal_set_acc_z(double value);
  public:

  // double latitude = 13;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 14;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double height = 15;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double east_velocity = 16;
  void clear_east_velocity();
  double east_velocity() const;
  void set_east_velocity(double value);
  private:
  double _internal_east_velocity() const;
  void _internal_set_east_velocity(double value);
  public:

  // double north_velocity = 17;
  void clear_north_velocity();
  double north_velocity() const;
  void set_north_velocity(double value);
  private:
  double _internal_north_velocity() const;
  void _internal_set_north_velocity(double value);
  public:

  // double up_velocity = 18;
  void clear_up_velocity();
  double up_velocity() const;
  void set_up_velocity(double value);
  private:
  double _internal_up_velocity() const;
  void _internal_set_up_velocity(double value);
  public:

  // uint32 status = 19;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool pos_alignment = 20;
  void clear_pos_alignment();
  bool pos_alignment() const;
  void set_pos_alignment(bool value);
  private:
  bool _internal_pos_alignment() const;
  void _internal_set_pos_alignment(bool value);
  public:

  // bool vel_alignment = 21;
  void clear_vel_alignment();
  bool vel_alignment() const;
  void set_vel_alignment(bool value);
  private:
  bool _internal_vel_alignment() const;
  void _internal_set_vel_alignment(bool value);
  public:

  // bool att_alignment = 22;
  void clear_att_alignment();
  bool att_alignment() const;
  void set_att_alignment(bool value);
  private:
  bool _internal_att_alignment() const;
  void _internal_set_att_alignment(bool value);
  public:

  // bool yaw_alignment = 23;
  void clear_yaw_alignment();
  bool yaw_alignment() const;
  void set_yaw_alignment(bool value);
  private:
  bool _internal_yaw_alignment() const;
  void _internal_set_yaw_alignment(bool value);
  public:

  // uint32 type = 24;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 data1 = 25;
  void clear_data1();
  ::PROTOBUF_NAMESPACE_ID::int32 data1() const;
  void set_data1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data1() const;
  void _internal_set_data1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 data2 = 26;
  void clear_data2();
  ::PROTOBUF_NAMESPACE_ID::int32 data2() const;
  void set_data2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data2() const;
  void _internal_set_data2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 data3 = 27;
  void clear_data3();
  ::PROTOBUF_NAMESPACE_ID::int32 data3() const;
  void set_data3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data3() const;
  void _internal_set_data3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float latitude_std_dev = 28;
  void clear_latitude_std_dev();
  float latitude_std_dev() const;
  void set_latitude_std_dev(float value);
  private:
  float _internal_latitude_std_dev() const;
  void _internal_set_latitude_std_dev(float value);
  public:

  // float longitude_std_dev = 29;
  void clear_longitude_std_dev();
  float longitude_std_dev() const;
  void set_longitude_std_dev(float value);
  private:
  float _internal_longitude_std_dev() const;
  void _internal_set_longitude_std_dev(float value);
  public:

  // float height_std_dev = 30;
  void clear_height_std_dev();
  float height_std_dev() const;
  void set_height_std_dev(float value);
  private:
  float _internal_height_std_dev() const;
  void _internal_set_height_std_dev(float value);
  public:

  // float vn_std_dev = 31;
  void clear_vn_std_dev();
  float vn_std_dev() const;
  void set_vn_std_dev(float value);
  private:
  float _internal_vn_std_dev() const;
  void _internal_set_vn_std_dev(float value);
  public:

  // float ve_std_dev = 32;
  void clear_ve_std_dev();
  float ve_std_dev() const;
  void set_ve_std_dev(float value);
  private:
  float _internal_ve_std_dev() const;
  void _internal_set_ve_std_dev(float value);
  public:

  // float vd_std_dev = 33;
  void clear_vd_std_dev();
  float vd_std_dev() const;
  void set_vd_std_dev(float value);
  private:
  float _internal_vd_std_dev() const;
  void _internal_set_vd_std_dev(float value);
  public:

  // float roll_std_dev = 34;
  void clear_roll_std_dev();
  float roll_std_dev() const;
  void set_roll_std_dev(float value);
  private:
  float _internal_roll_std_dev() const;
  void _internal_set_roll_std_dev(float value);
  public:

  // float pitch_std_dev = 35;
  void clear_pitch_std_dev();
  float pitch_std_dev() const;
  void set_pitch_std_dev(float value);
  private:
  float _internal_pitch_std_dev() const;
  void _internal_set_pitch_std_dev(float value);
  public:

  // double temperature = 37;
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // float yaw_std_dev = 36;
  void clear_yaw_std_dev();
  float yaw_std_dev() const;
  void set_yaw_std_dev(float value);
  private:
  float _internal_yaw_std_dev() const;
  void _internal_set_yaw_std_dev(float value);
  public:

  // uint32 position_type = 38;
  void clear_position_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 position_type() const;
  void set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position_type() const;
  void _internal_set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_sats = 39;
  void clear_num_sats();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sats() const;
  void set_num_sats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_sats() const;
  void _internal_set_num_sats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 heading_type = 40;
  void clear_heading_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 heading_type() const;
  void set_heading_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heading_type() const;
  void _internal_set_heading_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool odometry_exist = 41;
  void clear_odometry_exist();
  bool odometry_exist() const;
  void set_odometry_exist(bool value);
  private:
  bool _internal_odometry_exist() const;
  void _internal_set_odometry_exist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.AsensingINSData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  double roll_;
  double pitch_;
  double yaw_;
  double gyro_x_;
  double gyro_y_;
  double gyro_z_;
  double acc_x_;
  double acc_y_;
  double acc_z_;
  double latitude_;
  double longitude_;
  double height_;
  double east_velocity_;
  double north_velocity_;
  double up_velocity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  bool pos_alignment_;
  bool vel_alignment_;
  bool att_alignment_;
  bool yaw_alignment_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 data1_;
  ::PROTOBUF_NAMESPACE_ID::int32 data2_;
  ::PROTOBUF_NAMESPACE_ID::int32 data3_;
  float latitude_std_dev_;
  float longitude_std_dev_;
  float height_std_dev_;
  float vn_std_dev_;
  float ve_std_dev_;
  float vd_std_dev_;
  float roll_std_dev_;
  float pitch_std_dev_;
  double temperature_;
  float yaw_std_dev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sats_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heading_type_;
  bool odometry_exist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fins_2eproto;
};
// -------------------------------------------------------------------

class AsensingINSDatas PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.AsensingINSDatas) */ {
 public:
  inline AsensingINSDatas() : AsensingINSDatas(nullptr) {};
  virtual ~AsensingINSDatas();

  AsensingINSDatas(const AsensingINSDatas& from);
  AsensingINSDatas(AsensingINSDatas&& from) noexcept
    : AsensingINSDatas() {
    *this = ::std::move(from);
  }

  inline AsensingINSDatas& operator=(const AsensingINSDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsensingINSDatas& operator=(AsensingINSDatas&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsensingINSDatas& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsensingINSDatas* internal_default_instance() {
    return reinterpret_cast<const AsensingINSDatas*>(
               &_AsensingINSDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AsensingINSDatas& a, AsensingINSDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(AsensingINSDatas* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AsensingINSDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsensingINSDatas* New() const final {
    return CreateMaybeMessage<AsensingINSDatas>(nullptr);
  }

  AsensingINSDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsensingINSDatas>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsensingINSDatas& from);
  void MergeFrom(const AsensingINSDatas& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsensingINSDatas* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.AsensingINSDatas";
  }
  protected:
  explicit AsensingINSDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fins_2eproto);
    return ::descriptor_table_parking_5fins_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsensingInsDatasFieldNumber = 1,
  };
  // repeated .minieye.parking.AsensingINSData asensing_ins_datas = 1;
  int asensing_ins_datas_size() const;
  private:
  int _internal_asensing_ins_datas_size() const;
  public:
  void clear_asensing_ins_datas();
  ::minieye::parking::AsensingINSData* mutable_asensing_ins_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::AsensingINSData >*
      mutable_asensing_ins_datas();
  private:
  const ::minieye::parking::AsensingINSData& _internal_asensing_ins_datas(int index) const;
  ::minieye::parking::AsensingINSData* _internal_add_asensing_ins_datas();
  public:
  const ::minieye::parking::AsensingINSData& asensing_ins_datas(int index) const;
  ::minieye::parking::AsensingINSData* add_asensing_ins_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::AsensingINSData >&
      asensing_ins_datas() const;

  // @@protoc_insertion_point(class_scope:minieye.parking.AsensingINSDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::AsensingINSData > asensing_ins_datas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fins_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AsensingINSData

// uint64 timestamp = 1;
inline void AsensingINSData::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingINSData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingINSData::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.timestamp)
  return _internal_timestamp();
}
inline void AsensingINSData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void AsensingINSData::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.timestamp)
}

// uint64 tick = 2;
inline void AsensingINSData::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingINSData::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingINSData::tick() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.tick)
  return _internal_tick();
}
inline void AsensingINSData::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void AsensingINSData::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.tick)
}

// double roll = 4;
inline void AsensingINSData::clear_roll() {
  roll_ = 0;
}
inline double AsensingINSData::_internal_roll() const {
  return roll_;
}
inline double AsensingINSData::roll() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.roll)
  return _internal_roll();
}
inline void AsensingINSData::_internal_set_roll(double value) {
  
  roll_ = value;
}
inline void AsensingINSData::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.roll)
}

// double pitch = 5;
inline void AsensingINSData::clear_pitch() {
  pitch_ = 0;
}
inline double AsensingINSData::_internal_pitch() const {
  return pitch_;
}
inline double AsensingINSData::pitch() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.pitch)
  return _internal_pitch();
}
inline void AsensingINSData::_internal_set_pitch(double value) {
  
  pitch_ = value;
}
inline void AsensingINSData::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.pitch)
}

// double yaw = 6;
inline void AsensingINSData::clear_yaw() {
  yaw_ = 0;
}
inline double AsensingINSData::_internal_yaw() const {
  return yaw_;
}
inline double AsensingINSData::yaw() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.yaw)
  return _internal_yaw();
}
inline void AsensingINSData::_internal_set_yaw(double value) {
  
  yaw_ = value;
}
inline void AsensingINSData::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.yaw)
}

// double gyro_x = 7;
inline void AsensingINSData::clear_gyro_x() {
  gyro_x_ = 0;
}
inline double AsensingINSData::_internal_gyro_x() const {
  return gyro_x_;
}
inline double AsensingINSData::gyro_x() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.gyro_x)
  return _internal_gyro_x();
}
inline void AsensingINSData::_internal_set_gyro_x(double value) {
  
  gyro_x_ = value;
}
inline void AsensingINSData::set_gyro_x(double value) {
  _internal_set_gyro_x(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.gyro_x)
}

// double gyro_y = 8;
inline void AsensingINSData::clear_gyro_y() {
  gyro_y_ = 0;
}
inline double AsensingINSData::_internal_gyro_y() const {
  return gyro_y_;
}
inline double AsensingINSData::gyro_y() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.gyro_y)
  return _internal_gyro_y();
}
inline void AsensingINSData::_internal_set_gyro_y(double value) {
  
  gyro_y_ = value;
}
inline void AsensingINSData::set_gyro_y(double value) {
  _internal_set_gyro_y(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.gyro_y)
}

// double gyro_z = 9;
inline void AsensingINSData::clear_gyro_z() {
  gyro_z_ = 0;
}
inline double AsensingINSData::_internal_gyro_z() const {
  return gyro_z_;
}
inline double AsensingINSData::gyro_z() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.gyro_z)
  return _internal_gyro_z();
}
inline void AsensingINSData::_internal_set_gyro_z(double value) {
  
  gyro_z_ = value;
}
inline void AsensingINSData::set_gyro_z(double value) {
  _internal_set_gyro_z(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.gyro_z)
}

// double acc_x = 10;
inline void AsensingINSData::clear_acc_x() {
  acc_x_ = 0;
}
inline double AsensingINSData::_internal_acc_x() const {
  return acc_x_;
}
inline double AsensingINSData::acc_x() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.acc_x)
  return _internal_acc_x();
}
inline void AsensingINSData::_internal_set_acc_x(double value) {
  
  acc_x_ = value;
}
inline void AsensingINSData::set_acc_x(double value) {
  _internal_set_acc_x(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.acc_x)
}

// double acc_y = 11;
inline void AsensingINSData::clear_acc_y() {
  acc_y_ = 0;
}
inline double AsensingINSData::_internal_acc_y() const {
  return acc_y_;
}
inline double AsensingINSData::acc_y() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.acc_y)
  return _internal_acc_y();
}
inline void AsensingINSData::_internal_set_acc_y(double value) {
  
  acc_y_ = value;
}
inline void AsensingINSData::set_acc_y(double value) {
  _internal_set_acc_y(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.acc_y)
}

// double acc_z = 12;
inline void AsensingINSData::clear_acc_z() {
  acc_z_ = 0;
}
inline double AsensingINSData::_internal_acc_z() const {
  return acc_z_;
}
inline double AsensingINSData::acc_z() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.acc_z)
  return _internal_acc_z();
}
inline void AsensingINSData::_internal_set_acc_z(double value) {
  
  acc_z_ = value;
}
inline void AsensingINSData::set_acc_z(double value) {
  _internal_set_acc_z(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.acc_z)
}

// double latitude = 13;
inline void AsensingINSData::clear_latitude() {
  latitude_ = 0;
}
inline double AsensingINSData::_internal_latitude() const {
  return latitude_;
}
inline double AsensingINSData::latitude() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.latitude)
  return _internal_latitude();
}
inline void AsensingINSData::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void AsensingINSData::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.latitude)
}

// double longitude = 14;
inline void AsensingINSData::clear_longitude() {
  longitude_ = 0;
}
inline double AsensingINSData::_internal_longitude() const {
  return longitude_;
}
inline double AsensingINSData::longitude() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.longitude)
  return _internal_longitude();
}
inline void AsensingINSData::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void AsensingINSData::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.longitude)
}

// double height = 15;
inline void AsensingINSData::clear_height() {
  height_ = 0;
}
inline double AsensingINSData::_internal_height() const {
  return height_;
}
inline double AsensingINSData::height() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.height)
  return _internal_height();
}
inline void AsensingINSData::_internal_set_height(double value) {
  
  height_ = value;
}
inline void AsensingINSData::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.height)
}

// double east_velocity = 16;
inline void AsensingINSData::clear_east_velocity() {
  east_velocity_ = 0;
}
inline double AsensingINSData::_internal_east_velocity() const {
  return east_velocity_;
}
inline double AsensingINSData::east_velocity() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.east_velocity)
  return _internal_east_velocity();
}
inline void AsensingINSData::_internal_set_east_velocity(double value) {
  
  east_velocity_ = value;
}
inline void AsensingINSData::set_east_velocity(double value) {
  _internal_set_east_velocity(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.east_velocity)
}

// double north_velocity = 17;
inline void AsensingINSData::clear_north_velocity() {
  north_velocity_ = 0;
}
inline double AsensingINSData::_internal_north_velocity() const {
  return north_velocity_;
}
inline double AsensingINSData::north_velocity() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.north_velocity)
  return _internal_north_velocity();
}
inline void AsensingINSData::_internal_set_north_velocity(double value) {
  
  north_velocity_ = value;
}
inline void AsensingINSData::set_north_velocity(double value) {
  _internal_set_north_velocity(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.north_velocity)
}

// double up_velocity = 18;
inline void AsensingINSData::clear_up_velocity() {
  up_velocity_ = 0;
}
inline double AsensingINSData::_internal_up_velocity() const {
  return up_velocity_;
}
inline double AsensingINSData::up_velocity() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.up_velocity)
  return _internal_up_velocity();
}
inline void AsensingINSData::_internal_set_up_velocity(double value) {
  
  up_velocity_ = value;
}
inline void AsensingINSData::set_up_velocity(double value) {
  _internal_set_up_velocity(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.up_velocity)
}

// uint32 status = 19;
inline void AsensingINSData::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingINSData::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingINSData::status() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.status)
  return _internal_status();
}
inline void AsensingINSData::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void AsensingINSData::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.status)
}

// bool pos_alignment = 20;
inline void AsensingINSData::clear_pos_alignment() {
  pos_alignment_ = false;
}
inline bool AsensingINSData::_internal_pos_alignment() const {
  return pos_alignment_;
}
inline bool AsensingINSData::pos_alignment() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.pos_alignment)
  return _internal_pos_alignment();
}
inline void AsensingINSData::_internal_set_pos_alignment(bool value) {
  
  pos_alignment_ = value;
}
inline void AsensingINSData::set_pos_alignment(bool value) {
  _internal_set_pos_alignment(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.pos_alignment)
}

// bool vel_alignment = 21;
inline void AsensingINSData::clear_vel_alignment() {
  vel_alignment_ = false;
}
inline bool AsensingINSData::_internal_vel_alignment() const {
  return vel_alignment_;
}
inline bool AsensingINSData::vel_alignment() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.vel_alignment)
  return _internal_vel_alignment();
}
inline void AsensingINSData::_internal_set_vel_alignment(bool value) {
  
  vel_alignment_ = value;
}
inline void AsensingINSData::set_vel_alignment(bool value) {
  _internal_set_vel_alignment(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.vel_alignment)
}

// bool att_alignment = 22;
inline void AsensingINSData::clear_att_alignment() {
  att_alignment_ = false;
}
inline bool AsensingINSData::_internal_att_alignment() const {
  return att_alignment_;
}
inline bool AsensingINSData::att_alignment() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.att_alignment)
  return _internal_att_alignment();
}
inline void AsensingINSData::_internal_set_att_alignment(bool value) {
  
  att_alignment_ = value;
}
inline void AsensingINSData::set_att_alignment(bool value) {
  _internal_set_att_alignment(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.att_alignment)
}

// bool yaw_alignment = 23;
inline void AsensingINSData::clear_yaw_alignment() {
  yaw_alignment_ = false;
}
inline bool AsensingINSData::_internal_yaw_alignment() const {
  return yaw_alignment_;
}
inline bool AsensingINSData::yaw_alignment() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.yaw_alignment)
  return _internal_yaw_alignment();
}
inline void AsensingINSData::_internal_set_yaw_alignment(bool value) {
  
  yaw_alignment_ = value;
}
inline void AsensingINSData::set_yaw_alignment(bool value) {
  _internal_set_yaw_alignment(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.yaw_alignment)
}

// uint32 type = 24;
inline void AsensingINSData::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingINSData::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingINSData::type() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.type)
  return _internal_type();
}
inline void AsensingINSData::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void AsensingINSData::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.type)
}

// int32 data1 = 25;
inline void AsensingINSData::clear_data1() {
  data1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AsensingINSData::_internal_data1() const {
  return data1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AsensingINSData::data1() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.data1)
  return _internal_data1();
}
inline void AsensingINSData::_internal_set_data1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data1_ = value;
}
inline void AsensingINSData::set_data1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data1(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.data1)
}

// int32 data2 = 26;
inline void AsensingINSData::clear_data2() {
  data2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AsensingINSData::_internal_data2() const {
  return data2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AsensingINSData::data2() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.data2)
  return _internal_data2();
}
inline void AsensingINSData::_internal_set_data2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data2_ = value;
}
inline void AsensingINSData::set_data2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data2(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.data2)
}

// int32 data3 = 27;
inline void AsensingINSData::clear_data3() {
  data3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AsensingINSData::_internal_data3() const {
  return data3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AsensingINSData::data3() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.data3)
  return _internal_data3();
}
inline void AsensingINSData::_internal_set_data3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data3_ = value;
}
inline void AsensingINSData::set_data3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data3(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.data3)
}

// float latitude_std_dev = 28;
inline void AsensingINSData::clear_latitude_std_dev() {
  latitude_std_dev_ = 0;
}
inline float AsensingINSData::_internal_latitude_std_dev() const {
  return latitude_std_dev_;
}
inline float AsensingINSData::latitude_std_dev() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.latitude_std_dev)
  return _internal_latitude_std_dev();
}
inline void AsensingINSData::_internal_set_latitude_std_dev(float value) {
  
  latitude_std_dev_ = value;
}
inline void AsensingINSData::set_latitude_std_dev(float value) {
  _internal_set_latitude_std_dev(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.latitude_std_dev)
}

// float longitude_std_dev = 29;
inline void AsensingINSData::clear_longitude_std_dev() {
  longitude_std_dev_ = 0;
}
inline float AsensingINSData::_internal_longitude_std_dev() const {
  return longitude_std_dev_;
}
inline float AsensingINSData::longitude_std_dev() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.longitude_std_dev)
  return _internal_longitude_std_dev();
}
inline void AsensingINSData::_internal_set_longitude_std_dev(float value) {
  
  longitude_std_dev_ = value;
}
inline void AsensingINSData::set_longitude_std_dev(float value) {
  _internal_set_longitude_std_dev(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.longitude_std_dev)
}

// float height_std_dev = 30;
inline void AsensingINSData::clear_height_std_dev() {
  height_std_dev_ = 0;
}
inline float AsensingINSData::_internal_height_std_dev() const {
  return height_std_dev_;
}
inline float AsensingINSData::height_std_dev() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.height_std_dev)
  return _internal_height_std_dev();
}
inline void AsensingINSData::_internal_set_height_std_dev(float value) {
  
  height_std_dev_ = value;
}
inline void AsensingINSData::set_height_std_dev(float value) {
  _internal_set_height_std_dev(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.height_std_dev)
}

// float vn_std_dev = 31;
inline void AsensingINSData::clear_vn_std_dev() {
  vn_std_dev_ = 0;
}
inline float AsensingINSData::_internal_vn_std_dev() const {
  return vn_std_dev_;
}
inline float AsensingINSData::vn_std_dev() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.vn_std_dev)
  return _internal_vn_std_dev();
}
inline void AsensingINSData::_internal_set_vn_std_dev(float value) {
  
  vn_std_dev_ = value;
}
inline void AsensingINSData::set_vn_std_dev(float value) {
  _internal_set_vn_std_dev(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.vn_std_dev)
}

// float ve_std_dev = 32;
inline void AsensingINSData::clear_ve_std_dev() {
  ve_std_dev_ = 0;
}
inline float AsensingINSData::_internal_ve_std_dev() const {
  return ve_std_dev_;
}
inline float AsensingINSData::ve_std_dev() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.ve_std_dev)
  return _internal_ve_std_dev();
}
inline void AsensingINSData::_internal_set_ve_std_dev(float value) {
  
  ve_std_dev_ = value;
}
inline void AsensingINSData::set_ve_std_dev(float value) {
  _internal_set_ve_std_dev(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.ve_std_dev)
}

// float vd_std_dev = 33;
inline void AsensingINSData::clear_vd_std_dev() {
  vd_std_dev_ = 0;
}
inline float AsensingINSData::_internal_vd_std_dev() const {
  return vd_std_dev_;
}
inline float AsensingINSData::vd_std_dev() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.vd_std_dev)
  return _internal_vd_std_dev();
}
inline void AsensingINSData::_internal_set_vd_std_dev(float value) {
  
  vd_std_dev_ = value;
}
inline void AsensingINSData::set_vd_std_dev(float value) {
  _internal_set_vd_std_dev(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.vd_std_dev)
}

// float roll_std_dev = 34;
inline void AsensingINSData::clear_roll_std_dev() {
  roll_std_dev_ = 0;
}
inline float AsensingINSData::_internal_roll_std_dev() const {
  return roll_std_dev_;
}
inline float AsensingINSData::roll_std_dev() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.roll_std_dev)
  return _internal_roll_std_dev();
}
inline void AsensingINSData::_internal_set_roll_std_dev(float value) {
  
  roll_std_dev_ = value;
}
inline void AsensingINSData::set_roll_std_dev(float value) {
  _internal_set_roll_std_dev(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.roll_std_dev)
}

// float pitch_std_dev = 35;
inline void AsensingINSData::clear_pitch_std_dev() {
  pitch_std_dev_ = 0;
}
inline float AsensingINSData::_internal_pitch_std_dev() const {
  return pitch_std_dev_;
}
inline float AsensingINSData::pitch_std_dev() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.pitch_std_dev)
  return _internal_pitch_std_dev();
}
inline void AsensingINSData::_internal_set_pitch_std_dev(float value) {
  
  pitch_std_dev_ = value;
}
inline void AsensingINSData::set_pitch_std_dev(float value) {
  _internal_set_pitch_std_dev(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.pitch_std_dev)
}

// float yaw_std_dev = 36;
inline void AsensingINSData::clear_yaw_std_dev() {
  yaw_std_dev_ = 0;
}
inline float AsensingINSData::_internal_yaw_std_dev() const {
  return yaw_std_dev_;
}
inline float AsensingINSData::yaw_std_dev() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.yaw_std_dev)
  return _internal_yaw_std_dev();
}
inline void AsensingINSData::_internal_set_yaw_std_dev(float value) {
  
  yaw_std_dev_ = value;
}
inline void AsensingINSData::set_yaw_std_dev(float value) {
  _internal_set_yaw_std_dev(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.yaw_std_dev)
}

// double temperature = 37;
inline void AsensingINSData::clear_temperature() {
  temperature_ = 0;
}
inline double AsensingINSData::_internal_temperature() const {
  return temperature_;
}
inline double AsensingINSData::temperature() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.temperature)
  return _internal_temperature();
}
inline void AsensingINSData::_internal_set_temperature(double value) {
  
  temperature_ = value;
}
inline void AsensingINSData::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.temperature)
}

// uint32 position_type = 38;
inline void AsensingINSData::clear_position_type() {
  position_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingINSData::_internal_position_type() const {
  return position_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingINSData::position_type() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.position_type)
  return _internal_position_type();
}
inline void AsensingINSData::_internal_set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  position_type_ = value;
}
inline void AsensingINSData::set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position_type(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.position_type)
}

// uint32 num_sats = 39;
inline void AsensingINSData::clear_num_sats() {
  num_sats_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingINSData::_internal_num_sats() const {
  return num_sats_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingINSData::num_sats() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.num_sats)
  return _internal_num_sats();
}
inline void AsensingINSData::_internal_set_num_sats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_sats_ = value;
}
inline void AsensingINSData::set_num_sats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_sats(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.num_sats)
}

// uint32 heading_type = 40;
inline void AsensingINSData::clear_heading_type() {
  heading_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingINSData::_internal_heading_type() const {
  return heading_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingINSData::heading_type() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.heading_type)
  return _internal_heading_type();
}
inline void AsensingINSData::_internal_set_heading_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  heading_type_ = value;
}
inline void AsensingINSData::set_heading_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heading_type(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.heading_type)
}

// bool odometry_exist = 41;
inline void AsensingINSData::clear_odometry_exist() {
  odometry_exist_ = false;
}
inline bool AsensingINSData::_internal_odometry_exist() const {
  return odometry_exist_;
}
inline bool AsensingINSData::odometry_exist() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSData.odometry_exist)
  return _internal_odometry_exist();
}
inline void AsensingINSData::_internal_set_odometry_exist(bool value) {
  
  odometry_exist_ = value;
}
inline void AsensingINSData::set_odometry_exist(bool value) {
  _internal_set_odometry_exist(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingINSData.odometry_exist)
}

// -------------------------------------------------------------------

// AsensingINSDatas

// repeated .minieye.parking.AsensingINSData asensing_ins_datas = 1;
inline int AsensingINSDatas::_internal_asensing_ins_datas_size() const {
  return asensing_ins_datas_.size();
}
inline int AsensingINSDatas::asensing_ins_datas_size() const {
  return _internal_asensing_ins_datas_size();
}
inline void AsensingINSDatas::clear_asensing_ins_datas() {
  asensing_ins_datas_.Clear();
}
inline ::minieye::parking::AsensingINSData* AsensingINSDatas::mutable_asensing_ins_datas(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.AsensingINSDatas.asensing_ins_datas)
  return asensing_ins_datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::AsensingINSData >*
AsensingINSDatas::mutable_asensing_ins_datas() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.AsensingINSDatas.asensing_ins_datas)
  return &asensing_ins_datas_;
}
inline const ::minieye::parking::AsensingINSData& AsensingINSDatas::_internal_asensing_ins_datas(int index) const {
  return asensing_ins_datas_.Get(index);
}
inline const ::minieye::parking::AsensingINSData& AsensingINSDatas::asensing_ins_datas(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingINSDatas.asensing_ins_datas)
  return _internal_asensing_ins_datas(index);
}
inline ::minieye::parking::AsensingINSData* AsensingINSDatas::_internal_add_asensing_ins_datas() {
  return asensing_ins_datas_.Add();
}
inline ::minieye::parking::AsensingINSData* AsensingINSDatas::add_asensing_ins_datas() {
  // @@protoc_insertion_point(field_add:minieye.parking.AsensingINSDatas.asensing_ins_datas)
  return _internal_add_asensing_ins_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::AsensingINSData >&
AsensingINSDatas::asensing_ins_datas() const {
  // @@protoc_insertion_point(field_list:minieye.parking.AsensingINSDatas.asensing_ins_datas)
  return asensing_ins_datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace parking
}  // namespace minieye

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minieye::parking::SolutionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::parking::SolutionType>() {
  return ::minieye::parking::SolutionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parking_5fins_2eproto
