// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avm_calib_ctrl.proto

#include "avm_calib_ctrl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_avm_5fcalib_5fctrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AVMCalibCtrl_SignalsEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_avm_5fcalib_5fctrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvmCalibState_StatesEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_avm_5fcalib_5fctrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvmCameraParams_SignalsEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto;
namespace minieye {
class AVMCalibCtrl_SignalsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AVMCalibCtrl_SignalsEntry_DoNotUse> _instance;
} _AVMCalibCtrl_SignalsEntry_DoNotUse_default_instance_;
class AVMCalibCtrlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AVMCalibCtrl> _instance;
} _AVMCalibCtrl_default_instance_;
class AvmCalibState_StatesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvmCalibState_StatesEntry_DoNotUse> _instance;
} _AvmCalibState_StatesEntry_DoNotUse_default_instance_;
class AvmCalibStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvmCalibState> _instance;
} _AvmCalibState_default_instance_;
class AvmCameraParams_SignalsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvmCameraParams_SignalsEntry_DoNotUse> _instance;
} _AvmCameraParams_SignalsEntry_DoNotUse_default_instance_;
class AvmCameraParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvmCameraParams> _instance;
} _AvmCameraParams_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_AVMCalibCtrl_avm_5fcalib_5fctrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_AVMCalibCtrl_default_instance_;
    new (ptr) ::minieye::AVMCalibCtrl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::AVMCalibCtrl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AVMCalibCtrl_avm_5fcalib_5fctrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AVMCalibCtrl_avm_5fcalib_5fctrl_2eproto}, {
      &scc_info_AVMCalibCtrl_SignalsEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto.base,}};

static void InitDefaultsscc_info_AVMCalibCtrl_SignalsEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_AVMCalibCtrl_SignalsEntry_DoNotUse_default_instance_;
    new (ptr) ::minieye::AVMCalibCtrl_SignalsEntry_DoNotUse();
  }
  ::minieye::AVMCalibCtrl_SignalsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AVMCalibCtrl_SignalsEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AVMCalibCtrl_SignalsEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto}, {}};

static void InitDefaultsscc_info_AvmCalibState_avm_5fcalib_5fctrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_AvmCalibState_default_instance_;
    new (ptr) ::minieye::AvmCalibState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::AvmCalibState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AvmCalibState_avm_5fcalib_5fctrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AvmCalibState_avm_5fcalib_5fctrl_2eproto}, {
      &scc_info_AvmCalibState_StatesEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto.base,}};

static void InitDefaultsscc_info_AvmCalibState_StatesEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_AvmCalibState_StatesEntry_DoNotUse_default_instance_;
    new (ptr) ::minieye::AvmCalibState_StatesEntry_DoNotUse();
  }
  ::minieye::AvmCalibState_StatesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvmCalibState_StatesEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvmCalibState_StatesEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto}, {}};

static void InitDefaultsscc_info_AvmCameraParams_avm_5fcalib_5fctrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_AvmCameraParams_default_instance_;
    new (ptr) ::minieye::AvmCameraParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::AvmCameraParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AvmCameraParams_avm_5fcalib_5fctrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AvmCameraParams_avm_5fcalib_5fctrl_2eproto}, {
      &scc_info_AvmCameraParams_SignalsEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto.base,}};

static void InitDefaultsscc_info_AvmCameraParams_SignalsEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_AvmCameraParams_SignalsEntry_DoNotUse_default_instance_;
    new (ptr) ::minieye::AvmCameraParams_SignalsEntry_DoNotUse();
  }
  ::minieye::AvmCameraParams_SignalsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvmCameraParams_SignalsEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvmCameraParams_SignalsEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_avm_5fcalib_5fctrl_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_avm_5fcalib_5fctrl_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_avm_5fcalib_5fctrl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_avm_5fcalib_5fctrl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::minieye::AVMCalibCtrl_SignalsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minieye::AVMCalibCtrl_SignalsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::AVMCalibCtrl_SignalsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minieye::AVMCalibCtrl_SignalsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::AVMCalibCtrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::AVMCalibCtrl, signals_),
  PROTOBUF_FIELD_OFFSET(::minieye::AVMCalibCtrl, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::AVMCalibCtrl, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::AvmCalibState_StatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minieye::AvmCalibState_StatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::AvmCalibState_StatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minieye::AvmCalibState_StatesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::AvmCalibState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::AvmCalibState, states_),
  PROTOBUF_FIELD_OFFSET(::minieye::AvmCalibState, err_code_),
  PROTOBUF_FIELD_OFFSET(::minieye::AvmCameraParams_SignalsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minieye::AvmCameraParams_SignalsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::AvmCameraParams_SignalsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minieye::AvmCameraParams_SignalsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::AvmCameraParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::AvmCameraParams, signals_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::minieye::AVMCalibCtrl_SignalsEntry_DoNotUse)},
  { 9, -1, sizeof(::minieye::AVMCalibCtrl)},
  { 17, 24, sizeof(::minieye::AvmCalibState_StatesEntry_DoNotUse)},
  { 26, -1, sizeof(::minieye::AvmCalibState)},
  { 33, 40, sizeof(::minieye::AvmCameraParams_SignalsEntry_DoNotUse)},
  { 42, -1, sizeof(::minieye::AvmCameraParams)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_AVMCalibCtrl_SignalsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_AVMCalibCtrl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_AvmCalibState_StatesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_AvmCalibState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_AvmCameraParams_SignalsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_AvmCameraParams_default_instance_),
};

const char descriptor_table_protodef_avm_5fcalib_5fctrl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024avm_calib_ctrl.proto\022\007minieye\"\375\001\n\014AVMC"
  "alibCtrl\0223\n\007signals\030\001 \003(\0132\".minieye.AVMC"
  "alibCtrl.SignalsEntry\022\021\n\ttimestamp\030\002 \001(\004"
  "\022\014\n\004tick\030\003 \001(\004\032.\n\014SignalsEntry\022\013\n\003key\030\001 "
  "\001(\005\022\r\n\005value\030\002 \001(\002:\0028\001\"g\n\tCalibCtrl\022\024\n\020S"
  "TART_AUTO_CALIB\020\000\022\026\n\022START_MANUAL_CALIB\020"
  "\001\022\016\n\nSTOP_CALIB\020\002\022\034\n\030START_AUTO_SERVICE_"
  "CALIB\020\003\"\242\006\n\rAvmCalibState\0222\n\006states\030\001 \003("
  "\0132\".minieye.AvmCalibState.StatesEntry\022\020\n"
  "\010err_code\030\002 \001(\005\032-\n\013StatesEntry\022\013\n\003key\030\001 "
  "\001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\"\330\001\n\nCalibState\022\014\n"
  "\010kSuccess\020\000\022\021\n\rkReadyToCalib\020\001\022\020\n\014kCalib"
  "rating\020\002\022\014\n\010kFailure\020\003\022\017\n\013kErrUnKnown\020\004\022"
  "\033\n\027kErrTimeOutGettingImage\020\005\022\022\n\016kErrLoad"
  "Config\020\006\022\027\n\023kErrCornerDetection\020\007\022\025\n\021kEr"
  "rSaveCalibFile\020\010\022\027\n\023kErrAbnormalExtrins\020"
  "\t\"\300\003\n\014CalibErrCode\022\014\n\010kNoError\020\000\022\025\n\021kErr"
  "UnKnownReason\020\001\022\027\n\023kErrGetImageTimeout\020\002"
  "\022\024\n\020kErrParaLoadFail\020\003\022\035\n\031kErrFrontCorne"
  "rDetectFail\020\004\022\034\n\030kErrRearCornerDetectFai"
  "l\020\005\022\034\n\030kErrLeftCornerDetectFail\020\006\022\035\n\031kEr"
  "rRightCornerDetectFail\020\007\022\035\n\031kErrFrontCam"
  "FileWriteFail\020\010\022\034\n\030kErrRearCamFileWriteF"
  "ail\020\t\022\034\n\030kErrLeftCamFileWriteFail\020\n\022\035\n\031k"
  "ErrRightCamFileWriteFail\020\013\022\031\n\025kErrFrontC"
  "amParaError\020\014\022\030\n\024kErrRearCamParaError\020\r\022"
  "\030\n\024kErrLeftCamParaError\020\016\022\031\n\025kErrRightCa"
  "mParaError\020\017\"\254\001\n\017AvmCameraParams\0226\n\007sign"
  "als\030\001 \003(\0132%.minieye.AvmCameraParams.Sign"
  "alsEntry\032.\n\014SignalsEntry\022\013\n\003key\030\001 \001(\005\022\r\n"
  "\005value\030\002 \001(\005:\0028\001\"1\n\023AvmCameraParamState\022"
  "\014\n\010kSuccess\020\000\022\014\n\010kFailure\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_avm_5fcalib_5fctrl_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_avm_5fcalib_5fctrl_2eproto_sccs[6] = {
  &scc_info_AVMCalibCtrl_avm_5fcalib_5fctrl_2eproto.base,
  &scc_info_AVMCalibCtrl_SignalsEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto.base,
  &scc_info_AvmCalibState_avm_5fcalib_5fctrl_2eproto.base,
  &scc_info_AvmCalibState_StatesEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto.base,
  &scc_info_AvmCameraParams_avm_5fcalib_5fctrl_2eproto.base,
  &scc_info_AvmCameraParams_SignalsEntry_DoNotUse_avm_5fcalib_5fctrl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_avm_5fcalib_5fctrl_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_avm_5fcalib_5fctrl_2eproto = {
  false, false, descriptor_table_protodef_avm_5fcalib_5fctrl_2eproto, "avm_calib_ctrl.proto", 1275,
  &descriptor_table_avm_5fcalib_5fctrl_2eproto_once, descriptor_table_avm_5fcalib_5fctrl_2eproto_sccs, descriptor_table_avm_5fcalib_5fctrl_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_avm_5fcalib_5fctrl_2eproto::offsets,
  file_level_metadata_avm_5fcalib_5fctrl_2eproto, 6, file_level_enum_descriptors_avm_5fcalib_5fctrl_2eproto, file_level_service_descriptors_avm_5fcalib_5fctrl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_avm_5fcalib_5fctrl_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_avm_5fcalib_5fctrl_2eproto)), true);
namespace minieye {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AVMCalibCtrl_CalibCtrl_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_avm_5fcalib_5fctrl_2eproto);
  return file_level_enum_descriptors_avm_5fcalib_5fctrl_2eproto[0];
}
bool AVMCalibCtrl_CalibCtrl_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AVMCalibCtrl_CalibCtrl AVMCalibCtrl::START_AUTO_CALIB;
constexpr AVMCalibCtrl_CalibCtrl AVMCalibCtrl::START_MANUAL_CALIB;
constexpr AVMCalibCtrl_CalibCtrl AVMCalibCtrl::STOP_CALIB;
constexpr AVMCalibCtrl_CalibCtrl AVMCalibCtrl::START_AUTO_SERVICE_CALIB;
constexpr AVMCalibCtrl_CalibCtrl AVMCalibCtrl::CalibCtrl_MIN;
constexpr AVMCalibCtrl_CalibCtrl AVMCalibCtrl::CalibCtrl_MAX;
constexpr int AVMCalibCtrl::CalibCtrl_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AvmCalibState_CalibState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_avm_5fcalib_5fctrl_2eproto);
  return file_level_enum_descriptors_avm_5fcalib_5fctrl_2eproto[1];
}
bool AvmCalibState_CalibState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AvmCalibState_CalibState AvmCalibState::kSuccess;
constexpr AvmCalibState_CalibState AvmCalibState::kReadyToCalib;
constexpr AvmCalibState_CalibState AvmCalibState::kCalibrating;
constexpr AvmCalibState_CalibState AvmCalibState::kFailure;
constexpr AvmCalibState_CalibState AvmCalibState::kErrUnKnown;
constexpr AvmCalibState_CalibState AvmCalibState::kErrTimeOutGettingImage;
constexpr AvmCalibState_CalibState AvmCalibState::kErrLoadConfig;
constexpr AvmCalibState_CalibState AvmCalibState::kErrCornerDetection;
constexpr AvmCalibState_CalibState AvmCalibState::kErrSaveCalibFile;
constexpr AvmCalibState_CalibState AvmCalibState::kErrAbnormalExtrins;
constexpr AvmCalibState_CalibState AvmCalibState::CalibState_MIN;
constexpr AvmCalibState_CalibState AvmCalibState::CalibState_MAX;
constexpr int AvmCalibState::CalibState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AvmCalibState_CalibErrCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_avm_5fcalib_5fctrl_2eproto);
  return file_level_enum_descriptors_avm_5fcalib_5fctrl_2eproto[2];
}
bool AvmCalibState_CalibErrCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AvmCalibState_CalibErrCode AvmCalibState::kNoError;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrUnKnownReason;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrGetImageTimeout;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrParaLoadFail;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrFrontCornerDetectFail;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrRearCornerDetectFail;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrLeftCornerDetectFail;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrRightCornerDetectFail;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrFrontCamFileWriteFail;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrRearCamFileWriteFail;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrLeftCamFileWriteFail;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrRightCamFileWriteFail;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrFrontCamParaError;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrRearCamParaError;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrLeftCamParaError;
constexpr AvmCalibState_CalibErrCode AvmCalibState::kErrRightCamParaError;
constexpr AvmCalibState_CalibErrCode AvmCalibState::CalibErrCode_MIN;
constexpr AvmCalibState_CalibErrCode AvmCalibState::CalibErrCode_MAX;
constexpr int AvmCalibState::CalibErrCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AvmCameraParams_AvmCameraParamState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_avm_5fcalib_5fctrl_2eproto);
  return file_level_enum_descriptors_avm_5fcalib_5fctrl_2eproto[3];
}
bool AvmCameraParams_AvmCameraParamState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AvmCameraParams_AvmCameraParamState AvmCameraParams::kSuccess;
constexpr AvmCameraParams_AvmCameraParamState AvmCameraParams::kFailure;
constexpr AvmCameraParams_AvmCameraParamState AvmCameraParams::AvmCameraParamState_MIN;
constexpr AvmCameraParams_AvmCameraParamState AvmCameraParams::AvmCameraParamState_MAX;
constexpr int AvmCameraParams::AvmCameraParamState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

AVMCalibCtrl_SignalsEntry_DoNotUse::AVMCalibCtrl_SignalsEntry_DoNotUse() {}
AVMCalibCtrl_SignalsEntry_DoNotUse::AVMCalibCtrl_SignalsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AVMCalibCtrl_SignalsEntry_DoNotUse::MergeFrom(const AVMCalibCtrl_SignalsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AVMCalibCtrl_SignalsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AVMCalibCtrl_SignalsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AVMCalibCtrl::InitAsDefaultInstance() {
}
class AVMCalibCtrl::_Internal {
 public:
};

AVMCalibCtrl::AVMCalibCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.AVMCalibCtrl)
}
AVMCalibCtrl::AVMCalibCtrl(const AVMCalibCtrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signals_.MergeFrom(from.signals_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.AVMCalibCtrl)
}

void AVMCalibCtrl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AVMCalibCtrl_avm_5fcalib_5fctrl_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
}

AVMCalibCtrl::~AVMCalibCtrl() {
  // @@protoc_insertion_point(destructor:minieye.AVMCalibCtrl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AVMCalibCtrl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AVMCalibCtrl::ArenaDtor(void* object) {
  AVMCalibCtrl* _this = reinterpret_cast< AVMCalibCtrl* >(object);
  (void)_this;
}
void AVMCalibCtrl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AVMCalibCtrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AVMCalibCtrl& AVMCalibCtrl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AVMCalibCtrl_avm_5fcalib_5fctrl_2eproto.base);
  return *internal_default_instance();
}


void AVMCalibCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.AVMCalibCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AVMCalibCtrl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, float> signals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&signals_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AVMCalibCtrl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.AVMCalibCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, float> signals = 1;
  if (!this->_internal_signals().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_signals().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_signals().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->_internal_signals().begin();
          it != this->_internal_signals().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AVMCalibCtrl_SignalsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->_internal_signals().begin();
          it != this->_internal_signals().end(); ++it) {
        target = AVMCalibCtrl_SignalsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.AVMCalibCtrl)
  return target;
}

size_t AVMCalibCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.AVMCalibCtrl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, float> signals = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_signals_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
      it = this->_internal_signals().begin();
      it != this->_internal_signals().end(); ++it) {
    total_size += AVMCalibCtrl_SignalsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AVMCalibCtrl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.AVMCalibCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  const AVMCalibCtrl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AVMCalibCtrl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.AVMCalibCtrl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.AVMCalibCtrl)
    MergeFrom(*source);
  }
}

void AVMCalibCtrl::MergeFrom(const AVMCalibCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.AVMCalibCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void AVMCalibCtrl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.AVMCalibCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AVMCalibCtrl::CopyFrom(const AVMCalibCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.AVMCalibCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AVMCalibCtrl::IsInitialized() const {
  return true;
}

void AVMCalibCtrl::InternalSwap(AVMCalibCtrl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signals_.Swap(&other->signals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AVMCalibCtrl, tick_)
      + sizeof(AVMCalibCtrl::tick_)
      - PROTOBUF_FIELD_OFFSET(AVMCalibCtrl, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AVMCalibCtrl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AvmCalibState_StatesEntry_DoNotUse::AvmCalibState_StatesEntry_DoNotUse() {}
AvmCalibState_StatesEntry_DoNotUse::AvmCalibState_StatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AvmCalibState_StatesEntry_DoNotUse::MergeFrom(const AvmCalibState_StatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AvmCalibState_StatesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AvmCalibState_StatesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AvmCalibState::InitAsDefaultInstance() {
}
class AvmCalibState::_Internal {
 public:
};

AvmCalibState::AvmCalibState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.AvmCalibState)
}
AvmCalibState::AvmCalibState(const AvmCalibState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  states_.MergeFrom(from.states_);
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:minieye.AvmCalibState)
}

void AvmCalibState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AvmCalibState_avm_5fcalib_5fctrl_2eproto.base);
  err_code_ = 0;
}

AvmCalibState::~AvmCalibState() {
  // @@protoc_insertion_point(destructor:minieye.AvmCalibState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AvmCalibState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AvmCalibState::ArenaDtor(void* object) {
  AvmCalibState* _this = reinterpret_cast< AvmCalibState* >(object);
  (void)_this;
}
void AvmCalibState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AvmCalibState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvmCalibState& AvmCalibState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvmCalibState_avm_5fcalib_5fctrl_2eproto.base);
  return *internal_default_instance();
}


void AvmCalibState::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.AvmCalibState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  err_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvmCalibState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, int32> states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&states_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvmCalibState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.AvmCalibState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> states = 1;
  if (!this->_internal_states().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_states().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_states().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_states().begin();
          it != this->_internal_states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AvmCalibState_StatesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_states().begin();
          it != this->_internal_states().end(); ++it) {
        target = AvmCalibState_StatesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // int32 err_code = 2;
  if (this->err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.AvmCalibState)
  return target;
}

size_t AvmCalibState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.AvmCalibState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> states = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_states_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_states().begin();
      it != this->_internal_states().end(); ++it) {
    total_size += AvmCalibState_StatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 err_code = 2;
  if (this->err_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_err_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvmCalibState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.AvmCalibState)
  GOOGLE_DCHECK_NE(&from, this);
  const AvmCalibState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AvmCalibState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.AvmCalibState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.AvmCalibState)
    MergeFrom(*source);
  }
}

void AvmCalibState::MergeFrom(const AvmCalibState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.AvmCalibState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (from.err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
}

void AvmCalibState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.AvmCalibState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvmCalibState::CopyFrom(const AvmCalibState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.AvmCalibState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvmCalibState::IsInitialized() const {
  return true;
}

void AvmCalibState::InternalSwap(AvmCalibState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  states_.Swap(&other->states_);
  swap(err_code_, other->err_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvmCalibState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AvmCameraParams_SignalsEntry_DoNotUse::AvmCameraParams_SignalsEntry_DoNotUse() {}
AvmCameraParams_SignalsEntry_DoNotUse::AvmCameraParams_SignalsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AvmCameraParams_SignalsEntry_DoNotUse::MergeFrom(const AvmCameraParams_SignalsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AvmCameraParams_SignalsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AvmCameraParams_SignalsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AvmCameraParams::InitAsDefaultInstance() {
}
class AvmCameraParams::_Internal {
 public:
};

AvmCameraParams::AvmCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.AvmCameraParams)
}
AvmCameraParams::AvmCameraParams(const AvmCameraParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signals_.MergeFrom(from.signals_);
  // @@protoc_insertion_point(copy_constructor:minieye.AvmCameraParams)
}

void AvmCameraParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AvmCameraParams_avm_5fcalib_5fctrl_2eproto.base);
}

AvmCameraParams::~AvmCameraParams() {
  // @@protoc_insertion_point(destructor:minieye.AvmCameraParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AvmCameraParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AvmCameraParams::ArenaDtor(void* object) {
  AvmCameraParams* _this = reinterpret_cast< AvmCameraParams* >(object);
  (void)_this;
}
void AvmCameraParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AvmCameraParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvmCameraParams& AvmCameraParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvmCameraParams_avm_5fcalib_5fctrl_2eproto.base);
  return *internal_default_instance();
}


void AvmCameraParams::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.AvmCameraParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvmCameraParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, int32> signals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&signals_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvmCameraParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.AvmCameraParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> signals = 1;
  if (!this->_internal_signals().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_signals().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_signals().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_signals().begin();
          it != this->_internal_signals().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AvmCameraParams_SignalsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_signals().begin();
          it != this->_internal_signals().end(); ++it) {
        target = AvmCameraParams_SignalsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.AvmCameraParams)
  return target;
}

size_t AvmCameraParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.AvmCameraParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> signals = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_signals_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_signals().begin();
      it != this->_internal_signals().end(); ++it) {
    total_size += AvmCameraParams_SignalsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvmCameraParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.AvmCameraParams)
  GOOGLE_DCHECK_NE(&from, this);
  const AvmCameraParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AvmCameraParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.AvmCameraParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.AvmCameraParams)
    MergeFrom(*source);
  }
}

void AvmCameraParams::MergeFrom(const AvmCameraParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.AvmCameraParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
}

void AvmCameraParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.AvmCameraParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvmCameraParams::CopyFrom(const AvmCameraParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.AvmCameraParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvmCameraParams::IsInitialized() const {
  return true;
}

void AvmCameraParams::InternalSwap(AvmCameraParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signals_.Swap(&other->signals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvmCameraParams::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::AVMCalibCtrl_SignalsEntry_DoNotUse* Arena::CreateMaybeMessage< ::minieye::AVMCalibCtrl_SignalsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::AVMCalibCtrl_SignalsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::AVMCalibCtrl* Arena::CreateMaybeMessage< ::minieye::AVMCalibCtrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::AVMCalibCtrl >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::AvmCalibState_StatesEntry_DoNotUse* Arena::CreateMaybeMessage< ::minieye::AvmCalibState_StatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::AvmCalibState_StatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::AvmCalibState* Arena::CreateMaybeMessage< ::minieye::AvmCalibState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::AvmCalibState >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::AvmCameraParams_SignalsEntry_DoNotUse* Arena::CreateMaybeMessage< ::minieye::AvmCameraParams_SignalsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::AvmCameraParams_SignalsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::AvmCameraParams* Arena::CreateMaybeMessage< ::minieye::AvmCameraParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::AvmCameraParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
