// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_control.proto

#include "vehicle_control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace minieye {
class VehicleControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleControl> _instance;
} _VehicleControl_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_VehicleControl_vehicle_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_VehicleControl_default_instance_;
    new (ptr) ::minieye::VehicleControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::VehicleControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleControl_vehicle_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleControl_vehicle_5fcontrol_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vehicle_5fcontrol_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vehicle_5fcontrol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vehicle_5fcontrol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vehicle_5fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleControl, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleControl, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleControl, control_state_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleControl, wheel_cmd_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleControl, speed_cmd_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleControl, gear_mode_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleControl, dist_cmd_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleControl, is_reach_pathend_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleControl, l_bias_err_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleControl, yaw_bias_err_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleControl, fail_reason_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleControl, brake_cmd_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::VehicleControl)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_VehicleControl_default_instance_),
};

const char descriptor_table_protodef_vehicle_5fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025vehicle_control.proto\022\007minieye\"\377\001\n\016Veh"
  "icleControl\022\021\n\ttimestamp\030\001 \001(\004\022\014\n\004tick\030\002"
  " \001(\004\022\025\n\rcontrol_state\030\003 \001(\r\022\021\n\twheel_cmd"
  "\030\004 \001(\002\022\021\n\tspeed_cmd\030\005 \001(\002\022\021\n\tgear_mode\030\006"
  " \001(\r\022\020\n\010dist_cmd\030\007 \001(\002\022\030\n\020is_reach_pathe"
  "nd\030\010 \001(\010\022\022\n\nl_bias_err\030\t \001(\002\022\024\n\014yaw_bias"
  "_err\030\n \001(\002\022\023\n\013fail_reason\030\013 \001(\r\022\021\n\tbrake"
  "_cmd\030\014 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vehicle_5fcontrol_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vehicle_5fcontrol_2eproto_sccs[1] = {
  &scc_info_VehicleControl_vehicle_5fcontrol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vehicle_5fcontrol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fcontrol_2eproto = {
  false, false, descriptor_table_protodef_vehicle_5fcontrol_2eproto, "vehicle_control.proto", 298,
  &descriptor_table_vehicle_5fcontrol_2eproto_once, descriptor_table_vehicle_5fcontrol_2eproto_sccs, descriptor_table_vehicle_5fcontrol_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_vehicle_5fcontrol_2eproto::offsets,
  file_level_metadata_vehicle_5fcontrol_2eproto, 1, file_level_enum_descriptors_vehicle_5fcontrol_2eproto, file_level_service_descriptors_vehicle_5fcontrol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_5fcontrol_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vehicle_5fcontrol_2eproto)), true);
namespace minieye {

// ===================================================================

void VehicleControl::InitAsDefaultInstance() {
}
class VehicleControl::_Internal {
 public:
};

VehicleControl::VehicleControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.VehicleControl)
}
VehicleControl::VehicleControl(const VehicleControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_cmd_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(brake_cmd_));
  // @@protoc_insertion_point(copy_constructor:minieye.VehicleControl)
}

void VehicleControl::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_cmd_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(brake_cmd_));
}

VehicleControl::~VehicleControl() {
  // @@protoc_insertion_point(destructor:minieye.VehicleControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VehicleControl::ArenaDtor(void* object) {
  VehicleControl* _this = reinterpret_cast< VehicleControl* >(object);
  (void)_this;
}
void VehicleControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleControl& VehicleControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleControl_vehicle_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void VehicleControl::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.VehicleControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_cmd_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(brake_cmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 control_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          control_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float wheel_cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          wheel_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speed_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          speed_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 gear_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gear_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dist_cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          dist_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_reach_pathend = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_reach_pathend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float l_bias_err = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          l_bias_err_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_bias_err = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          yaw_bias_err_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 fail_reason = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          fail_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 brake_cmd = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.VehicleControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tick(), target);
  }

  // uint32 control_state = 3;
  if (this->control_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_control_state(), target);
  }

  // float wheel_cmd = 4;
  if (!(this->wheel_cmd() <= 0 && this->wheel_cmd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_wheel_cmd(), target);
  }

  // float speed_cmd = 5;
  if (!(this->speed_cmd() <= 0 && this->speed_cmd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_speed_cmd(), target);
  }

  // uint32 gear_mode = 6;
  if (this->gear_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_gear_mode(), target);
  }

  // float dist_cmd = 7;
  if (!(this->dist_cmd() <= 0 && this->dist_cmd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_dist_cmd(), target);
  }

  // bool is_reach_pathend = 8;
  if (this->is_reach_pathend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_reach_pathend(), target);
  }

  // float l_bias_err = 9;
  if (!(this->l_bias_err() <= 0 && this->l_bias_err() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_l_bias_err(), target);
  }

  // float yaw_bias_err = 10;
  if (!(this->yaw_bias_err() <= 0 && this->yaw_bias_err() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_yaw_bias_err(), target);
  }

  // uint32 fail_reason = 11;
  if (this->fail_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_fail_reason(), target);
  }

  // uint32 brake_cmd = 12;
  if (this->brake_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_brake_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.VehicleControl)
  return target;
}

size_t VehicleControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.VehicleControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint32 control_state = 3;
  if (this->control_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_control_state());
  }

  // float wheel_cmd = 4;
  if (!(this->wheel_cmd() <= 0 && this->wheel_cmd() >= 0)) {
    total_size += 1 + 4;
  }

  // float speed_cmd = 5;
  if (!(this->speed_cmd() <= 0 && this->speed_cmd() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 gear_mode = 6;
  if (this->gear_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gear_mode());
  }

  // float dist_cmd = 7;
  if (!(this->dist_cmd() <= 0 && this->dist_cmd() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_reach_pathend = 8;
  if (this->is_reach_pathend() != 0) {
    total_size += 1 + 1;
  }

  // float l_bias_err = 9;
  if (!(this->l_bias_err() <= 0 && this->l_bias_err() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_bias_err = 10;
  if (!(this->yaw_bias_err() <= 0 && this->yaw_bias_err() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 fail_reason = 11;
  if (this->fail_reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fail_reason());
  }

  // uint32 brake_cmd = 12;
  if (this->brake_cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_brake_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.VehicleControl)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.VehicleControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.VehicleControl)
    MergeFrom(*source);
  }
}

void VehicleControl::MergeFrom(const VehicleControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.VehicleControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.control_state() != 0) {
    _internal_set_control_state(from._internal_control_state());
  }
  if (!(from.wheel_cmd() <= 0 && from.wheel_cmd() >= 0)) {
    _internal_set_wheel_cmd(from._internal_wheel_cmd());
  }
  if (!(from.speed_cmd() <= 0 && from.speed_cmd() >= 0)) {
    _internal_set_speed_cmd(from._internal_speed_cmd());
  }
  if (from.gear_mode() != 0) {
    _internal_set_gear_mode(from._internal_gear_mode());
  }
  if (!(from.dist_cmd() <= 0 && from.dist_cmd() >= 0)) {
    _internal_set_dist_cmd(from._internal_dist_cmd());
  }
  if (from.is_reach_pathend() != 0) {
    _internal_set_is_reach_pathend(from._internal_is_reach_pathend());
  }
  if (!(from.l_bias_err() <= 0 && from.l_bias_err() >= 0)) {
    _internal_set_l_bias_err(from._internal_l_bias_err());
  }
  if (!(from.yaw_bias_err() <= 0 && from.yaw_bias_err() >= 0)) {
    _internal_set_yaw_bias_err(from._internal_yaw_bias_err());
  }
  if (from.fail_reason() != 0) {
    _internal_set_fail_reason(from._internal_fail_reason());
  }
  if (from.brake_cmd() != 0) {
    _internal_set_brake_cmd(from._internal_brake_cmd());
  }
}

void VehicleControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.VehicleControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleControl::CopyFrom(const VehicleControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.VehicleControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleControl::IsInitialized() const {
  return true;
}

void VehicleControl::InternalSwap(VehicleControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleControl, brake_cmd_)
      + sizeof(VehicleControl::brake_cmd_)
      - PROTOBUF_FIELD_OFFSET(VehicleControl, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleControl::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::VehicleControl* Arena::CreateMaybeMessage< ::minieye::VehicleControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::VehicleControl >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
