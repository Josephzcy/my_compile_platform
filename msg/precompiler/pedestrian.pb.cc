// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pedestrian.proto

#include "pedestrian.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pedestrian_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pedestrian_PedDetExport_pedestrian_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pedestrian_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pedestrian_PedWarningExport_pedestrian_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rect2f_geometry_2eproto;
namespace perception {
class Pedestrian_PedDetExportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pedestrian_PedDetExport> _instance;
} _Pedestrian_PedDetExport_default_instance_;
class Pedestrian_PedWarningExportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pedestrian_PedWarningExport> _instance;
} _Pedestrian_PedWarningExport_default_instance_;
class PedestrianDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pedestrian> _instance;
} _Pedestrian_default_instance_;
}  // namespace perception
static void InitDefaultsscc_info_Pedestrian_pedestrian_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Pedestrian_default_instance_;
    new (ptr) ::perception::Pedestrian();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Pedestrian::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pedestrian_pedestrian_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Pedestrian_pedestrian_2eproto}, {
      &scc_info_Pedestrian_PedDetExport_pedestrian_2eproto.base,
      &scc_info_Pedestrian_PedWarningExport_pedestrian_2eproto.base,}};

static void InitDefaultsscc_info_Pedestrian_PedDetExport_pedestrian_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Pedestrian_PedDetExport_default_instance_;
    new (ptr) ::perception::Pedestrian_PedDetExport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Pedestrian_PedDetExport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pedestrian_PedDetExport_pedestrian_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Pedestrian_PedDetExport_pedestrian_2eproto}, {
      &scc_info_Rect2f_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Pedestrian_PedWarningExport_pedestrian_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Pedestrian_PedWarningExport_default_instance_;
    new (ptr) ::perception::Pedestrian_PedWarningExport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Pedestrian_PedWarningExport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pedestrian_PedWarningExport_pedestrian_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pedestrian_PedWarningExport_pedestrian_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pedestrian_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pedestrian_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pedestrian_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pedestrian_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, detect_box_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, reg_box_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, track_box_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, bike_box_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, detect_status_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, t_id_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, unique_id_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, time_ms_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, predicted_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, world_x_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, world_y_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, pos_angle_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, ttc_m_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, ttc_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, longitudinal_velocity_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, lateral_velocity_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, real_h_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, real_w_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, is_longitudinal_close_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, is_lateral_close_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, is_measure_not_stable_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, have_bike_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, is_key_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedDetExport, is_danger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedWarningExport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedWarningExport, ped_on_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian_PedWarningExport, pcw_on_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian, frame_id_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian, ped_list_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian, ped_warning_),
  PROTOBUF_FIELD_OFFSET(::perception::Pedestrian, data_source_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perception::Pedestrian_PedDetExport)},
  { 30, -1, sizeof(::perception::Pedestrian_PedWarningExport)},
  { 37, -1, sizeof(::perception::Pedestrian)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Pedestrian_PedDetExport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Pedestrian_PedWarningExport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Pedestrian_default_instance_),
};

const char descriptor_table_protodef_pedestrian_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020pedestrian.proto\022\nperception\032\016geometry"
  ".proto\032\021data_source.proto\"\363\006\n\nPedestrian"
  "\022\020\n\010frame_id\030\001 \001(\004\022\021\n\ttimestamp\030\002 \001(\004\0225\n"
  "\010ped_list\030\003 \003(\0132#.perception.Pedestrian."
  "PedDetExport\022<\n\013ped_warning\030\004 \001(\0132\'.perc"
  "eption.Pedestrian.PedWarningExport\022(\n\013da"
  "ta_source\030\005 \001(\0162\023.minieye.DataSource\032\354\004\n"
  "\014PedDetExport\022-\n\ndetect_box\030\001 \001(\0132\031.perc"
  "eption.common.Rect2f\022*\n\007reg_box\030\002 \001(\0132\031."
  "perception.common.Rect2f\022,\n\ttrack_box\030\003 "
  "\001(\0132\031.perception.common.Rect2f\022+\n\010bike_b"
  "ox\030\004 \001(\0132\031.perception.common.Rect2f\022\022\n\nc"
  "onfidence\030\005 \001(\002\022\025\n\rdetect_status\030\006 \001(\005\022\014"
  "\n\004t_id\030\007 \001(\005\022\021\n\tunique_id\030\010 \001(\005\022\017\n\007time_"
  "ms\030\t \001(\003\022\021\n\tpredicted\030\n \001(\010\022\017\n\007world_x\030\013"
  " \001(\002\022\017\n\007world_y\030\014 \001(\002\022\021\n\tpos_angle\030\r \001(\002"
  "\022\r\n\005ttc_m\030\016 \001(\002\022\013\n\003ttc\030\017 \001(\002\022\035\n\025longitud"
  "inal_velocity\030\020 \001(\002\022\030\n\020lateral_velocity\030"
  "\021 \001(\002\022\016\n\006real_H\030\022 \001(\002\022\016\n\006real_W\030\023 \001(\002\022\035\n"
  "\025is_longitudinal_close\030\024 \001(\010\022\030\n\020is_later"
  "al_close\030\025 \001(\010\022\035\n\025is_measure_not_stable\030"
  "\026 \001(\010\022\021\n\thave_bike\030\027 \001(\010\022\016\n\006is_key\030\030 \001(\010"
  "\022\021\n\tis_danger\030\031 \001(\010\0322\n\020PedWarningExport\022"
  "\016\n\006ped_on\030\001 \001(\010\022\016\n\006pcw_on\030\002 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pedestrian_2eproto_deps[2] = {
  &::descriptor_table_data_5fsource_2eproto,
  &::descriptor_table_geometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pedestrian_2eproto_sccs[3] = {
  &scc_info_Pedestrian_pedestrian_2eproto.base,
  &scc_info_Pedestrian_PedDetExport_pedestrian_2eproto.base,
  &scc_info_Pedestrian_PedWarningExport_pedestrian_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pedestrian_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pedestrian_2eproto = {
  false, false, descriptor_table_protodef_pedestrian_2eproto, "pedestrian.proto", 959,
  &descriptor_table_pedestrian_2eproto_once, descriptor_table_pedestrian_2eproto_sccs, descriptor_table_pedestrian_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_pedestrian_2eproto::offsets,
  file_level_metadata_pedestrian_2eproto, 3, file_level_enum_descriptors_pedestrian_2eproto, file_level_service_descriptors_pedestrian_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pedestrian_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pedestrian_2eproto)), true);
namespace perception {

// ===================================================================

void Pedestrian_PedDetExport::InitAsDefaultInstance() {
  ::perception::_Pedestrian_PedDetExport_default_instance_._instance.get_mutable()->detect_box_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
  ::perception::_Pedestrian_PedDetExport_default_instance_._instance.get_mutable()->reg_box_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
  ::perception::_Pedestrian_PedDetExport_default_instance_._instance.get_mutable()->track_box_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
  ::perception::_Pedestrian_PedDetExport_default_instance_._instance.get_mutable()->bike_box_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
}
class Pedestrian_PedDetExport::_Internal {
 public:
  static const ::perception::common::Rect2f& detect_box(const Pedestrian_PedDetExport* msg);
  static const ::perception::common::Rect2f& reg_box(const Pedestrian_PedDetExport* msg);
  static const ::perception::common::Rect2f& track_box(const Pedestrian_PedDetExport* msg);
  static const ::perception::common::Rect2f& bike_box(const Pedestrian_PedDetExport* msg);
};

const ::perception::common::Rect2f&
Pedestrian_PedDetExport::_Internal::detect_box(const Pedestrian_PedDetExport* msg) {
  return *msg->detect_box_;
}
const ::perception::common::Rect2f&
Pedestrian_PedDetExport::_Internal::reg_box(const Pedestrian_PedDetExport* msg) {
  return *msg->reg_box_;
}
const ::perception::common::Rect2f&
Pedestrian_PedDetExport::_Internal::track_box(const Pedestrian_PedDetExport* msg) {
  return *msg->track_box_;
}
const ::perception::common::Rect2f&
Pedestrian_PedDetExport::_Internal::bike_box(const Pedestrian_PedDetExport* msg) {
  return *msg->bike_box_;
}
void Pedestrian_PedDetExport::clear_detect_box() {
  if (GetArena() == nullptr && detect_box_ != nullptr) {
    delete detect_box_;
  }
  detect_box_ = nullptr;
}
void Pedestrian_PedDetExport::clear_reg_box() {
  if (GetArena() == nullptr && reg_box_ != nullptr) {
    delete reg_box_;
  }
  reg_box_ = nullptr;
}
void Pedestrian_PedDetExport::clear_track_box() {
  if (GetArena() == nullptr && track_box_ != nullptr) {
    delete track_box_;
  }
  track_box_ = nullptr;
}
void Pedestrian_PedDetExport::clear_bike_box() {
  if (GetArena() == nullptr && bike_box_ != nullptr) {
    delete bike_box_;
  }
  bike_box_ = nullptr;
}
Pedestrian_PedDetExport::Pedestrian_PedDetExport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Pedestrian.PedDetExport)
}
Pedestrian_PedDetExport::Pedestrian_PedDetExport(const Pedestrian_PedDetExport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_detect_box()) {
    detect_box_ = new ::perception::common::Rect2f(*from.detect_box_);
  } else {
    detect_box_ = nullptr;
  }
  if (from._internal_has_reg_box()) {
    reg_box_ = new ::perception::common::Rect2f(*from.reg_box_);
  } else {
    reg_box_ = nullptr;
  }
  if (from._internal_has_track_box()) {
    track_box_ = new ::perception::common::Rect2f(*from.track_box_);
  } else {
    track_box_ = nullptr;
  }
  if (from._internal_has_bike_box()) {
    bike_box_ = new ::perception::common::Rect2f(*from.bike_box_);
  } else {
    bike_box_ = nullptr;
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_danger_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(is_danger_));
  // @@protoc_insertion_point(copy_constructor:perception.Pedestrian.PedDetExport)
}

void Pedestrian_PedDetExport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pedestrian_PedDetExport_pedestrian_2eproto.base);
  ::memset(&detect_box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_danger_) -
      reinterpret_cast<char*>(&detect_box_)) + sizeof(is_danger_));
}

Pedestrian_PedDetExport::~Pedestrian_PedDetExport() {
  // @@protoc_insertion_point(destructor:perception.Pedestrian.PedDetExport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pedestrian_PedDetExport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete detect_box_;
  if (this != internal_default_instance()) delete reg_box_;
  if (this != internal_default_instance()) delete track_box_;
  if (this != internal_default_instance()) delete bike_box_;
}

void Pedestrian_PedDetExport::ArenaDtor(void* object) {
  Pedestrian_PedDetExport* _this = reinterpret_cast< Pedestrian_PedDetExport* >(object);
  (void)_this;
}
void Pedestrian_PedDetExport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pedestrian_PedDetExport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pedestrian_PedDetExport& Pedestrian_PedDetExport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pedestrian_PedDetExport_pedestrian_2eproto.base);
  return *internal_default_instance();
}


void Pedestrian_PedDetExport::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Pedestrian.PedDetExport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && detect_box_ != nullptr) {
    delete detect_box_;
  }
  detect_box_ = nullptr;
  if (GetArena() == nullptr && reg_box_ != nullptr) {
    delete reg_box_;
  }
  reg_box_ = nullptr;
  if (GetArena() == nullptr && track_box_ != nullptr) {
    delete track_box_;
  }
  track_box_ = nullptr;
  if (GetArena() == nullptr && bike_box_ != nullptr) {
    delete bike_box_;
  }
  bike_box_ = nullptr;
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_danger_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(is_danger_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pedestrian_PedDetExport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.Rect2f detect_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_detect_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Rect2f reg_box = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reg_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Rect2f track_box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Rect2f bike_box = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bike_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 detect_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          detect_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 t_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          t_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 unique_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool predicted = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          predicted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float world_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          world_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float world_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          world_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_angle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          pos_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ttc_m = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          ttc_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ttc = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          ttc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float longitudinal_velocity = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          longitudinal_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lateral_velocity = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          lateral_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float real_H = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          real_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float real_W = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          real_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_longitudinal_close = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_longitudinal_close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_lateral_close = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          is_lateral_close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_measure_not_stable = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          is_measure_not_stable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool have_bike = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          have_bike_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_key = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          is_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_danger = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          is_danger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pedestrian_PedDetExport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Pedestrian.PedDetExport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.Rect2f detect_box = 1;
  if (this->has_detect_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::detect_box(this), target, stream);
  }

  // .perception.common.Rect2f reg_box = 2;
  if (this->has_reg_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reg_box(this), target, stream);
  }

  // .perception.common.Rect2f track_box = 3;
  if (this->has_track_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::track_box(this), target, stream);
  }

  // .perception.common.Rect2f bike_box = 4;
  if (this->has_bike_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bike_box(this), target, stream);
  }

  // float confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_confidence(), target);
  }

  // int32 detect_status = 6;
  if (this->detect_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_detect_status(), target);
  }

  // int32 t_id = 7;
  if (this->t_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_t_id(), target);
  }

  // int32 unique_id = 8;
  if (this->unique_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_unique_id(), target);
  }

  // int64 time_ms = 9;
  if (this->time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_time_ms(), target);
  }

  // bool predicted = 10;
  if (this->predicted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_predicted(), target);
  }

  // float world_x = 11;
  if (!(this->world_x() <= 0 && this->world_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_world_x(), target);
  }

  // float world_y = 12;
  if (!(this->world_y() <= 0 && this->world_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_world_y(), target);
  }

  // float pos_angle = 13;
  if (!(this->pos_angle() <= 0 && this->pos_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_pos_angle(), target);
  }

  // float ttc_m = 14;
  if (!(this->ttc_m() <= 0 && this->ttc_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_ttc_m(), target);
  }

  // float ttc = 15;
  if (!(this->ttc() <= 0 && this->ttc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_ttc(), target);
  }

  // float longitudinal_velocity = 16;
  if (!(this->longitudinal_velocity() <= 0 && this->longitudinal_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_longitudinal_velocity(), target);
  }

  // float lateral_velocity = 17;
  if (!(this->lateral_velocity() <= 0 && this->lateral_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_lateral_velocity(), target);
  }

  // float real_H = 18;
  if (!(this->real_h() <= 0 && this->real_h() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_real_h(), target);
  }

  // float real_W = 19;
  if (!(this->real_w() <= 0 && this->real_w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_real_w(), target);
  }

  // bool is_longitudinal_close = 20;
  if (this->is_longitudinal_close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_longitudinal_close(), target);
  }

  // bool is_lateral_close = 21;
  if (this->is_lateral_close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_is_lateral_close(), target);
  }

  // bool is_measure_not_stable = 22;
  if (this->is_measure_not_stable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_is_measure_not_stable(), target);
  }

  // bool have_bike = 23;
  if (this->have_bike() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_have_bike(), target);
  }

  // bool is_key = 24;
  if (this->is_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_is_key(), target);
  }

  // bool is_danger = 25;
  if (this->is_danger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_is_danger(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Pedestrian.PedDetExport)
  return target;
}

size_t Pedestrian_PedDetExport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Pedestrian.PedDetExport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Rect2f detect_box = 1;
  if (this->has_detect_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detect_box_);
  }

  // .perception.common.Rect2f reg_box = 2;
  if (this->has_reg_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reg_box_);
  }

  // .perception.common.Rect2f track_box = 3;
  if (this->has_track_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *track_box_);
  }

  // .perception.common.Rect2f bike_box = 4;
  if (this->has_bike_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bike_box_);
  }

  // float confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 detect_status = 6;
  if (this->detect_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_detect_status());
  }

  // int32 t_id = 7;
  if (this->t_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_t_id());
  }

  // int32 unique_id = 8;
  if (this->unique_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unique_id());
  }

  // int64 time_ms = 9;
  if (this->time_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_ms());
  }

  // float world_x = 11;
  if (!(this->world_x() <= 0 && this->world_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float world_y = 12;
  if (!(this->world_y() <= 0 && this->world_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_angle = 13;
  if (!(this->pos_angle() <= 0 && this->pos_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // float ttc_m = 14;
  if (!(this->ttc_m() <= 0 && this->ttc_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float ttc = 15;
  if (!(this->ttc() <= 0 && this->ttc() >= 0)) {
    total_size += 1 + 4;
  }

  // float longitudinal_velocity = 16;
  if (!(this->longitudinal_velocity() <= 0 && this->longitudinal_velocity() >= 0)) {
    total_size += 2 + 4;
  }

  // float lateral_velocity = 17;
  if (!(this->lateral_velocity() <= 0 && this->lateral_velocity() >= 0)) {
    total_size += 2 + 4;
  }

  // float real_H = 18;
  if (!(this->real_h() <= 0 && this->real_h() >= 0)) {
    total_size += 2 + 4;
  }

  // bool predicted = 10;
  if (this->predicted() != 0) {
    total_size += 1 + 1;
  }

  // bool is_longitudinal_close = 20;
  if (this->is_longitudinal_close() != 0) {
    total_size += 2 + 1;
  }

  // bool is_lateral_close = 21;
  if (this->is_lateral_close() != 0) {
    total_size += 2 + 1;
  }

  // bool is_measure_not_stable = 22;
  if (this->is_measure_not_stable() != 0) {
    total_size += 2 + 1;
  }

  // float real_W = 19;
  if (!(this->real_w() <= 0 && this->real_w() >= 0)) {
    total_size += 2 + 4;
  }

  // bool have_bike = 23;
  if (this->have_bike() != 0) {
    total_size += 2 + 1;
  }

  // bool is_key = 24;
  if (this->is_key() != 0) {
    total_size += 2 + 1;
  }

  // bool is_danger = 25;
  if (this->is_danger() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pedestrian_PedDetExport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Pedestrian.PedDetExport)
  GOOGLE_DCHECK_NE(&from, this);
  const Pedestrian_PedDetExport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pedestrian_PedDetExport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Pedestrian.PedDetExport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Pedestrian.PedDetExport)
    MergeFrom(*source);
  }
}

void Pedestrian_PedDetExport::MergeFrom(const Pedestrian_PedDetExport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Pedestrian.PedDetExport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_detect_box()) {
    _internal_mutable_detect_box()->::perception::common::Rect2f::MergeFrom(from._internal_detect_box());
  }
  if (from.has_reg_box()) {
    _internal_mutable_reg_box()->::perception::common::Rect2f::MergeFrom(from._internal_reg_box());
  }
  if (from.has_track_box()) {
    _internal_mutable_track_box()->::perception::common::Rect2f::MergeFrom(from._internal_track_box());
  }
  if (from.has_bike_box()) {
    _internal_mutable_bike_box()->::perception::common::Rect2f::MergeFrom(from._internal_bike_box());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from.detect_status() != 0) {
    _internal_set_detect_status(from._internal_detect_status());
  }
  if (from.t_id() != 0) {
    _internal_set_t_id(from._internal_t_id());
  }
  if (from.unique_id() != 0) {
    _internal_set_unique_id(from._internal_unique_id());
  }
  if (from.time_ms() != 0) {
    _internal_set_time_ms(from._internal_time_ms());
  }
  if (!(from.world_x() <= 0 && from.world_x() >= 0)) {
    _internal_set_world_x(from._internal_world_x());
  }
  if (!(from.world_y() <= 0 && from.world_y() >= 0)) {
    _internal_set_world_y(from._internal_world_y());
  }
  if (!(from.pos_angle() <= 0 && from.pos_angle() >= 0)) {
    _internal_set_pos_angle(from._internal_pos_angle());
  }
  if (!(from.ttc_m() <= 0 && from.ttc_m() >= 0)) {
    _internal_set_ttc_m(from._internal_ttc_m());
  }
  if (!(from.ttc() <= 0 && from.ttc() >= 0)) {
    _internal_set_ttc(from._internal_ttc());
  }
  if (!(from.longitudinal_velocity() <= 0 && from.longitudinal_velocity() >= 0)) {
    _internal_set_longitudinal_velocity(from._internal_longitudinal_velocity());
  }
  if (!(from.lateral_velocity() <= 0 && from.lateral_velocity() >= 0)) {
    _internal_set_lateral_velocity(from._internal_lateral_velocity());
  }
  if (!(from.real_h() <= 0 && from.real_h() >= 0)) {
    _internal_set_real_h(from._internal_real_h());
  }
  if (from.predicted() != 0) {
    _internal_set_predicted(from._internal_predicted());
  }
  if (from.is_longitudinal_close() != 0) {
    _internal_set_is_longitudinal_close(from._internal_is_longitudinal_close());
  }
  if (from.is_lateral_close() != 0) {
    _internal_set_is_lateral_close(from._internal_is_lateral_close());
  }
  if (from.is_measure_not_stable() != 0) {
    _internal_set_is_measure_not_stable(from._internal_is_measure_not_stable());
  }
  if (!(from.real_w() <= 0 && from.real_w() >= 0)) {
    _internal_set_real_w(from._internal_real_w());
  }
  if (from.have_bike() != 0) {
    _internal_set_have_bike(from._internal_have_bike());
  }
  if (from.is_key() != 0) {
    _internal_set_is_key(from._internal_is_key());
  }
  if (from.is_danger() != 0) {
    _internal_set_is_danger(from._internal_is_danger());
  }
}

void Pedestrian_PedDetExport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Pedestrian.PedDetExport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pedestrian_PedDetExport::CopyFrom(const Pedestrian_PedDetExport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Pedestrian.PedDetExport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pedestrian_PedDetExport::IsInitialized() const {
  return true;
}

void Pedestrian_PedDetExport::InternalSwap(Pedestrian_PedDetExport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pedestrian_PedDetExport, is_danger_)
      + sizeof(Pedestrian_PedDetExport::is_danger_)
      - PROTOBUF_FIELD_OFFSET(Pedestrian_PedDetExport, detect_box_)>(
          reinterpret_cast<char*>(&detect_box_),
          reinterpret_cast<char*>(&other->detect_box_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pedestrian_PedDetExport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pedestrian_PedWarningExport::InitAsDefaultInstance() {
}
class Pedestrian_PedWarningExport::_Internal {
 public:
};

Pedestrian_PedWarningExport::Pedestrian_PedWarningExport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Pedestrian.PedWarningExport)
}
Pedestrian_PedWarningExport::Pedestrian_PedWarningExport(const Pedestrian_PedWarningExport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ped_on_, &from.ped_on_,
    static_cast<size_t>(reinterpret_cast<char*>(&pcw_on_) -
    reinterpret_cast<char*>(&ped_on_)) + sizeof(pcw_on_));
  // @@protoc_insertion_point(copy_constructor:perception.Pedestrian.PedWarningExport)
}

void Pedestrian_PedWarningExport::SharedCtor() {
  ::memset(&ped_on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pcw_on_) -
      reinterpret_cast<char*>(&ped_on_)) + sizeof(pcw_on_));
}

Pedestrian_PedWarningExport::~Pedestrian_PedWarningExport() {
  // @@protoc_insertion_point(destructor:perception.Pedestrian.PedWarningExport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pedestrian_PedWarningExport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pedestrian_PedWarningExport::ArenaDtor(void* object) {
  Pedestrian_PedWarningExport* _this = reinterpret_cast< Pedestrian_PedWarningExport* >(object);
  (void)_this;
}
void Pedestrian_PedWarningExport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pedestrian_PedWarningExport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pedestrian_PedWarningExport& Pedestrian_PedWarningExport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pedestrian_PedWarningExport_pedestrian_2eproto.base);
  return *internal_default_instance();
}


void Pedestrian_PedWarningExport::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Pedestrian.PedWarningExport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ped_on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pcw_on_) -
      reinterpret_cast<char*>(&ped_on_)) + sizeof(pcw_on_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pedestrian_PedWarningExport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ped_on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ped_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pcw_on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pcw_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pedestrian_PedWarningExport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Pedestrian.PedWarningExport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ped_on = 1;
  if (this->ped_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ped_on(), target);
  }

  // bool pcw_on = 2;
  if (this->pcw_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pcw_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Pedestrian.PedWarningExport)
  return target;
}

size_t Pedestrian_PedWarningExport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Pedestrian.PedWarningExport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ped_on = 1;
  if (this->ped_on() != 0) {
    total_size += 1 + 1;
  }

  // bool pcw_on = 2;
  if (this->pcw_on() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pedestrian_PedWarningExport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Pedestrian.PedWarningExport)
  GOOGLE_DCHECK_NE(&from, this);
  const Pedestrian_PedWarningExport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pedestrian_PedWarningExport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Pedestrian.PedWarningExport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Pedestrian.PedWarningExport)
    MergeFrom(*source);
  }
}

void Pedestrian_PedWarningExport::MergeFrom(const Pedestrian_PedWarningExport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Pedestrian.PedWarningExport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ped_on() != 0) {
    _internal_set_ped_on(from._internal_ped_on());
  }
  if (from.pcw_on() != 0) {
    _internal_set_pcw_on(from._internal_pcw_on());
  }
}

void Pedestrian_PedWarningExport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Pedestrian.PedWarningExport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pedestrian_PedWarningExport::CopyFrom(const Pedestrian_PedWarningExport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Pedestrian.PedWarningExport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pedestrian_PedWarningExport::IsInitialized() const {
  return true;
}

void Pedestrian_PedWarningExport::InternalSwap(Pedestrian_PedWarningExport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pedestrian_PedWarningExport, pcw_on_)
      + sizeof(Pedestrian_PedWarningExport::pcw_on_)
      - PROTOBUF_FIELD_OFFSET(Pedestrian_PedWarningExport, ped_on_)>(
          reinterpret_cast<char*>(&ped_on_),
          reinterpret_cast<char*>(&other->ped_on_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pedestrian_PedWarningExport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pedestrian::InitAsDefaultInstance() {
  ::perception::_Pedestrian_default_instance_._instance.get_mutable()->ped_warning_ = const_cast< ::perception::Pedestrian_PedWarningExport*>(
      ::perception::Pedestrian_PedWarningExport::internal_default_instance());
}
class Pedestrian::_Internal {
 public:
  static const ::perception::Pedestrian_PedWarningExport& ped_warning(const Pedestrian* msg);
};

const ::perception::Pedestrian_PedWarningExport&
Pedestrian::_Internal::ped_warning(const Pedestrian* msg) {
  return *msg->ped_warning_;
}
Pedestrian::Pedestrian(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ped_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Pedestrian)
}
Pedestrian::Pedestrian(const Pedestrian& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ped_list_(from.ped_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ped_warning()) {
    ped_warning_ = new ::perception::Pedestrian_PedWarningExport(*from.ped_warning_);
  } else {
    ped_warning_ = nullptr;
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_source_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(data_source_));
  // @@protoc_insertion_point(copy_constructor:perception.Pedestrian)
}

void Pedestrian::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pedestrian_pedestrian_2eproto.base);
  ::memset(&ped_warning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_source_) -
      reinterpret_cast<char*>(&ped_warning_)) + sizeof(data_source_));
}

Pedestrian::~Pedestrian() {
  // @@protoc_insertion_point(destructor:perception.Pedestrian)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pedestrian::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ped_warning_;
}

void Pedestrian::ArenaDtor(void* object) {
  Pedestrian* _this = reinterpret_cast< Pedestrian* >(object);
  (void)_this;
}
void Pedestrian::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pedestrian::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pedestrian& Pedestrian::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pedestrian_pedestrian_2eproto.base);
  return *internal_default_instance();
}


void Pedestrian::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Pedestrian)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ped_list_.Clear();
  if (GetArena() == nullptr && ped_warning_ != nullptr) {
    delete ped_warning_;
  }
  ped_warning_ = nullptr;
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_source_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(data_source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pedestrian::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.Pedestrian.PedDetExport ped_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ped_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.Pedestrian.PedWarningExport ped_warning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ped_warning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.DataSource data_source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_source(static_cast<::minieye::DataSource>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pedestrian::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Pedestrian)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // repeated .perception.Pedestrian.PedDetExport ped_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ped_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ped_list(i), target, stream);
  }

  // .perception.Pedestrian.PedWarningExport ped_warning = 4;
  if (this->has_ped_warning()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ped_warning(this), target, stream);
  }

  // .minieye.DataSource data_source = 5;
  if (this->data_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_data_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Pedestrian)
  return target;
}

size_t Pedestrian::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Pedestrian)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.Pedestrian.PedDetExport ped_list = 3;
  total_size += 1UL * this->_internal_ped_list_size();
  for (const auto& msg : this->ped_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.Pedestrian.PedWarningExport ped_warning = 4;
  if (this->has_ped_warning()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ped_warning_);
  }

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // .minieye.DataSource data_source = 5;
  if (this->data_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pedestrian::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Pedestrian)
  GOOGLE_DCHECK_NE(&from, this);
  const Pedestrian* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pedestrian>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Pedestrian)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Pedestrian)
    MergeFrom(*source);
  }
}

void Pedestrian::MergeFrom(const Pedestrian& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Pedestrian)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ped_list_.MergeFrom(from.ped_list_);
  if (from.has_ped_warning()) {
    _internal_mutable_ped_warning()->::perception::Pedestrian_PedWarningExport::MergeFrom(from._internal_ped_warning());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.data_source() != 0) {
    _internal_set_data_source(from._internal_data_source());
  }
}

void Pedestrian::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Pedestrian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pedestrian::CopyFrom(const Pedestrian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Pedestrian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pedestrian::IsInitialized() const {
  return true;
}

void Pedestrian::InternalSwap(Pedestrian* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ped_list_.InternalSwap(&other->ped_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pedestrian, data_source_)
      + sizeof(Pedestrian::data_source_)
      - PROTOBUF_FIELD_OFFSET(Pedestrian, ped_warning_)>(
          reinterpret_cast<char*>(&ped_warning_),
          reinterpret_cast<char*>(&other->ped_warning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pedestrian::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perception::Pedestrian_PedDetExport* Arena::CreateMaybeMessage< ::perception::Pedestrian_PedDetExport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Pedestrian_PedDetExport >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::Pedestrian_PedWarningExport* Arena::CreateMaybeMessage< ::perception::Pedestrian_PedWarningExport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Pedestrian_PedWarningExport >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::Pedestrian* Arena::CreateMaybeMessage< ::perception::Pedestrian >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Pedestrian >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
