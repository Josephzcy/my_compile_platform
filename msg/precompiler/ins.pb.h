// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ins.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ins_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ins_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "data_header.pb.h"
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ins_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ins_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ins_2eproto;
namespace minieye {
class InsData;
class InsDataDefaultTypeInternal;
extern InsDataDefaultTypeInternal _InsData_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::InsData* Arena::CreateMaybeMessage<::minieye::InsData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

// ===================================================================

class InsData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.InsData) */ {
 public:
  inline InsData() : InsData(nullptr) {};
  virtual ~InsData();

  InsData(const InsData& from);
  InsData(InsData&& from) noexcept
    : InsData() {
    *this = ::std::move(from);
  }

  inline InsData& operator=(const InsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsData& operator=(InsData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsData* internal_default_instance() {
    return reinterpret_cast<const InsData*>(
               &_InsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InsData& a, InsData& b) {
    a.Swap(&b);
  }
  inline void Swap(InsData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsData* New() const final {
    return CreateMaybeMessage<InsData>(nullptr);
  }

  InsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsData& from);
  void MergeFrom(const InsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.InsData";
  }
  protected:
  explicit InsData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ins_2eproto);
    return ::descriptor_table_ins_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kAttitudeFieldNumber = 8,
    kLinearVelocityFieldNumber = 9,
    kSdPositionFieldNumber = 10,
    kSdAttitudeFieldNumber = 11,
    kSdVelocityFieldNumber = 12,
    kCorrAngularVelocityFieldNumber = 16,
    kCorrLinearAccelFieldNumber = 17,
    kMountingErrorFieldNumber = 19,
    kIsValidFieldNumber = 2,
    kGpsWeekFieldNumber = 3,
    kGpsSecFieldNumber = 4,
    kLatitudeFieldNumber = 5,
    kLongitudeFieldNumber = 6,
    kElevationFieldNumber = 7,
    kSysStatusFieldNumber = 13,
    kGpsStatusFieldNumber = 14,
    kWarnInfoFieldNumber = 15,
    kHeadingFieldNumber = 18,
  };
  // .minieye.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::minieye::Header& header() const;
  ::minieye::Header* release_header();
  ::minieye::Header* mutable_header();
  void set_allocated_header(::minieye::Header* header);
  private:
  const ::minieye::Header& _internal_header() const;
  ::minieye::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::minieye::Header* header);
  ::minieye::Header* unsafe_arena_release_header();

  // .perception.common.Point3f attitude = 8;
  bool has_attitude() const;
  private:
  bool _internal_has_attitude() const;
  public:
  void clear_attitude();
  const ::perception::common::Point3f& attitude() const;
  ::perception::common::Point3f* release_attitude();
  ::perception::common::Point3f* mutable_attitude();
  void set_allocated_attitude(::perception::common::Point3f* attitude);
  private:
  const ::perception::common::Point3f& _internal_attitude() const;
  ::perception::common::Point3f* _internal_mutable_attitude();
  public:
  void unsafe_arena_set_allocated_attitude(
      ::perception::common::Point3f* attitude);
  ::perception::common::Point3f* unsafe_arena_release_attitude();

  // .perception.common.Point3f linear_velocity = 9;
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  const ::perception::common::Point3f& linear_velocity() const;
  ::perception::common::Point3f* release_linear_velocity();
  ::perception::common::Point3f* mutable_linear_velocity();
  void set_allocated_linear_velocity(::perception::common::Point3f* linear_velocity);
  private:
  const ::perception::common::Point3f& _internal_linear_velocity() const;
  ::perception::common::Point3f* _internal_mutable_linear_velocity();
  public:
  void unsafe_arena_set_allocated_linear_velocity(
      ::perception::common::Point3f* linear_velocity);
  ::perception::common::Point3f* unsafe_arena_release_linear_velocity();

  // .perception.common.Point3f sd_position = 10;
  bool has_sd_position() const;
  private:
  bool _internal_has_sd_position() const;
  public:
  void clear_sd_position();
  const ::perception::common::Point3f& sd_position() const;
  ::perception::common::Point3f* release_sd_position();
  ::perception::common::Point3f* mutable_sd_position();
  void set_allocated_sd_position(::perception::common::Point3f* sd_position);
  private:
  const ::perception::common::Point3f& _internal_sd_position() const;
  ::perception::common::Point3f* _internal_mutable_sd_position();
  public:
  void unsafe_arena_set_allocated_sd_position(
      ::perception::common::Point3f* sd_position);
  ::perception::common::Point3f* unsafe_arena_release_sd_position();

  // .perception.common.Point3f sd_attitude = 11;
  bool has_sd_attitude() const;
  private:
  bool _internal_has_sd_attitude() const;
  public:
  void clear_sd_attitude();
  const ::perception::common::Point3f& sd_attitude() const;
  ::perception::common::Point3f* release_sd_attitude();
  ::perception::common::Point3f* mutable_sd_attitude();
  void set_allocated_sd_attitude(::perception::common::Point3f* sd_attitude);
  private:
  const ::perception::common::Point3f& _internal_sd_attitude() const;
  ::perception::common::Point3f* _internal_mutable_sd_attitude();
  public:
  void unsafe_arena_set_allocated_sd_attitude(
      ::perception::common::Point3f* sd_attitude);
  ::perception::common::Point3f* unsafe_arena_release_sd_attitude();

  // .perception.common.Point3f sd_velocity = 12;
  bool has_sd_velocity() const;
  private:
  bool _internal_has_sd_velocity() const;
  public:
  void clear_sd_velocity();
  const ::perception::common::Point3f& sd_velocity() const;
  ::perception::common::Point3f* release_sd_velocity();
  ::perception::common::Point3f* mutable_sd_velocity();
  void set_allocated_sd_velocity(::perception::common::Point3f* sd_velocity);
  private:
  const ::perception::common::Point3f& _internal_sd_velocity() const;
  ::perception::common::Point3f* _internal_mutable_sd_velocity();
  public:
  void unsafe_arena_set_allocated_sd_velocity(
      ::perception::common::Point3f* sd_velocity);
  ::perception::common::Point3f* unsafe_arena_release_sd_velocity();

  // .perception.common.Point3f corr_angular_velocity = 16;
  bool has_corr_angular_velocity() const;
  private:
  bool _internal_has_corr_angular_velocity() const;
  public:
  void clear_corr_angular_velocity();
  const ::perception::common::Point3f& corr_angular_velocity() const;
  ::perception::common::Point3f* release_corr_angular_velocity();
  ::perception::common::Point3f* mutable_corr_angular_velocity();
  void set_allocated_corr_angular_velocity(::perception::common::Point3f* corr_angular_velocity);
  private:
  const ::perception::common::Point3f& _internal_corr_angular_velocity() const;
  ::perception::common::Point3f* _internal_mutable_corr_angular_velocity();
  public:
  void unsafe_arena_set_allocated_corr_angular_velocity(
      ::perception::common::Point3f* corr_angular_velocity);
  ::perception::common::Point3f* unsafe_arena_release_corr_angular_velocity();

  // .perception.common.Point3f corr_linear_accel = 17;
  bool has_corr_linear_accel() const;
  private:
  bool _internal_has_corr_linear_accel() const;
  public:
  void clear_corr_linear_accel();
  const ::perception::common::Point3f& corr_linear_accel() const;
  ::perception::common::Point3f* release_corr_linear_accel();
  ::perception::common::Point3f* mutable_corr_linear_accel();
  void set_allocated_corr_linear_accel(::perception::common::Point3f* corr_linear_accel);
  private:
  const ::perception::common::Point3f& _internal_corr_linear_accel() const;
  ::perception::common::Point3f* _internal_mutable_corr_linear_accel();
  public:
  void unsafe_arena_set_allocated_corr_linear_accel(
      ::perception::common::Point3f* corr_linear_accel);
  ::perception::common::Point3f* unsafe_arena_release_corr_linear_accel();

  // .perception.common.Point3f mounting_error = 19;
  bool has_mounting_error() const;
  private:
  bool _internal_has_mounting_error() const;
  public:
  void clear_mounting_error();
  const ::perception::common::Point3f& mounting_error() const;
  ::perception::common::Point3f* release_mounting_error();
  ::perception::common::Point3f* mutable_mounting_error();
  void set_allocated_mounting_error(::perception::common::Point3f* mounting_error);
  private:
  const ::perception::common::Point3f& _internal_mounting_error() const;
  ::perception::common::Point3f* _internal_mutable_mounting_error();
  public:
  void unsafe_arena_set_allocated_mounting_error(
      ::perception::common::Point3f* mounting_error);
  ::perception::common::Point3f* unsafe_arena_release_mounting_error();

  // bool is_valid = 2;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // uint32 gps_week = 3;
  void clear_gps_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_week() const;
  void set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gps_week() const;
  void _internal_set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double gps_sec = 4;
  void clear_gps_sec();
  double gps_sec() const;
  void set_gps_sec(double value);
  private:
  double _internal_gps_sec() const;
  void _internal_set_gps_sec(double value);
  public:

  // double latitude = 5;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 6;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double elevation = 7;
  void clear_elevation();
  double elevation() const;
  void set_elevation(double value);
  private:
  double _internal_elevation() const;
  void _internal_set_elevation(double value);
  public:

  // uint32 sys_status = 13;
  void clear_sys_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 sys_status() const;
  void set_sys_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sys_status() const;
  void _internal_set_sys_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gps_status = 14;
  void clear_gps_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_status() const;
  void set_gps_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gps_status() const;
  void _internal_set_gps_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 warn_info = 15;
  void clear_warn_info();
  ::PROTOBUF_NAMESPACE_ID::uint32 warn_info() const;
  void set_warn_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_warn_info() const;
  void _internal_set_warn_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float heading = 18;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.InsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::Header* header_;
  ::perception::common::Point3f* attitude_;
  ::perception::common::Point3f* linear_velocity_;
  ::perception::common::Point3f* sd_position_;
  ::perception::common::Point3f* sd_attitude_;
  ::perception::common::Point3f* sd_velocity_;
  ::perception::common::Point3f* corr_angular_velocity_;
  ::perception::common::Point3f* corr_linear_accel_;
  ::perception::common::Point3f* mounting_error_;
  bool is_valid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_week_;
  double gps_sec_;
  double latitude_;
  double longitude_;
  double elevation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sys_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 warn_info_;
  float heading_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ins_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InsData

// .minieye.Header header = 1;
inline bool InsData::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool InsData::has_header() const {
  return _internal_has_header();
}
inline const ::minieye::Header& InsData::_internal_header() const {
  const ::minieye::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::Header*>(
      &::minieye::_Header_default_instance_);
}
inline const ::minieye::Header& InsData::header() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.header)
  return _internal_header();
}
inline void InsData::unsafe_arena_set_allocated_header(
    ::minieye::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.InsData.header)
}
inline ::minieye::Header* InsData::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::Header* InsData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:minieye.InsData.header)
  
  ::minieye::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::minieye::Header* InsData::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::minieye::Header* InsData::mutable_header() {
  // @@protoc_insertion_point(field_mutable:minieye.InsData.header)
  return _internal_mutable_header();
}
inline void InsData::set_allocated_header(::minieye::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:minieye.InsData.header)
}

// bool is_valid = 2;
inline void InsData::clear_is_valid() {
  is_valid_ = false;
}
inline bool InsData::_internal_is_valid() const {
  return is_valid_;
}
inline bool InsData::is_valid() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.is_valid)
  return _internal_is_valid();
}
inline void InsData::_internal_set_is_valid(bool value) {
  
  is_valid_ = value;
}
inline void InsData::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:minieye.InsData.is_valid)
}

// uint32 gps_week = 3;
inline void InsData::clear_gps_week() {
  gps_week_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsData::_internal_gps_week() const {
  return gps_week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsData::gps_week() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.gps_week)
  return _internal_gps_week();
}
inline void InsData::_internal_set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gps_week_ = value;
}
inline void InsData::set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gps_week(value);
  // @@protoc_insertion_point(field_set:minieye.InsData.gps_week)
}

// double gps_sec = 4;
inline void InsData::clear_gps_sec() {
  gps_sec_ = 0;
}
inline double InsData::_internal_gps_sec() const {
  return gps_sec_;
}
inline double InsData::gps_sec() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.gps_sec)
  return _internal_gps_sec();
}
inline void InsData::_internal_set_gps_sec(double value) {
  
  gps_sec_ = value;
}
inline void InsData::set_gps_sec(double value) {
  _internal_set_gps_sec(value);
  // @@protoc_insertion_point(field_set:minieye.InsData.gps_sec)
}

// double latitude = 5;
inline void InsData::clear_latitude() {
  latitude_ = 0;
}
inline double InsData::_internal_latitude() const {
  return latitude_;
}
inline double InsData::latitude() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.latitude)
  return _internal_latitude();
}
inline void InsData::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void InsData::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:minieye.InsData.latitude)
}

// double longitude = 6;
inline void InsData::clear_longitude() {
  longitude_ = 0;
}
inline double InsData::_internal_longitude() const {
  return longitude_;
}
inline double InsData::longitude() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.longitude)
  return _internal_longitude();
}
inline void InsData::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void InsData::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:minieye.InsData.longitude)
}

// double elevation = 7;
inline void InsData::clear_elevation() {
  elevation_ = 0;
}
inline double InsData::_internal_elevation() const {
  return elevation_;
}
inline double InsData::elevation() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.elevation)
  return _internal_elevation();
}
inline void InsData::_internal_set_elevation(double value) {
  
  elevation_ = value;
}
inline void InsData::set_elevation(double value) {
  _internal_set_elevation(value);
  // @@protoc_insertion_point(field_set:minieye.InsData.elevation)
}

// .perception.common.Point3f attitude = 8;
inline bool InsData::_internal_has_attitude() const {
  return this != internal_default_instance() && attitude_ != nullptr;
}
inline bool InsData::has_attitude() const {
  return _internal_has_attitude();
}
inline const ::perception::common::Point3f& InsData::_internal_attitude() const {
  const ::perception::common::Point3f* p = attitude_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& InsData::attitude() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.attitude)
  return _internal_attitude();
}
inline void InsData::unsafe_arena_set_allocated_attitude(
    ::perception::common::Point3f* attitude) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attitude_);
  }
  attitude_ = attitude;
  if (attitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.InsData.attitude)
}
inline ::perception::common::Point3f* InsData::release_attitude() {
  auto temp = unsafe_arena_release_attitude();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* InsData::unsafe_arena_release_attitude() {
  // @@protoc_insertion_point(field_release:minieye.InsData.attitude)
  
  ::perception::common::Point3f* temp = attitude_;
  attitude_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* InsData::_internal_mutable_attitude() {
  
  if (attitude_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    attitude_ = p;
  }
  return attitude_;
}
inline ::perception::common::Point3f* InsData::mutable_attitude() {
  // @@protoc_insertion_point(field_mutable:minieye.InsData.attitude)
  return _internal_mutable_attitude();
}
inline void InsData::set_allocated_attitude(::perception::common::Point3f* attitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attitude_);
  }
  if (attitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attitude)->GetArena();
    if (message_arena != submessage_arena) {
      attitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude, submessage_arena);
    }
    
  } else {
    
  }
  attitude_ = attitude;
  // @@protoc_insertion_point(field_set_allocated:minieye.InsData.attitude)
}

// .perception.common.Point3f linear_velocity = 9;
inline bool InsData::_internal_has_linear_velocity() const {
  return this != internal_default_instance() && linear_velocity_ != nullptr;
}
inline bool InsData::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline const ::perception::common::Point3f& InsData::_internal_linear_velocity() const {
  const ::perception::common::Point3f* p = linear_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& InsData::linear_velocity() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.linear_velocity)
  return _internal_linear_velocity();
}
inline void InsData::unsafe_arena_set_allocated_linear_velocity(
    ::perception::common::Point3f* linear_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.InsData.linear_velocity)
}
inline ::perception::common::Point3f* InsData::release_linear_velocity() {
  auto temp = unsafe_arena_release_linear_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* InsData::unsafe_arena_release_linear_velocity() {
  // @@protoc_insertion_point(field_release:minieye.InsData.linear_velocity)
  
  ::perception::common::Point3f* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* InsData::_internal_mutable_linear_velocity() {
  
  if (linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    linear_velocity_ = p;
  }
  return linear_velocity_;
}
inline ::perception::common::Point3f* InsData::mutable_linear_velocity() {
  // @@protoc_insertion_point(field_mutable:minieye.InsData.linear_velocity)
  return _internal_mutable_linear_velocity();
}
inline void InsData::set_allocated_linear_velocity(::perception::common::Point3f* linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity)->GetArena();
    if (message_arena != submessage_arena) {
      linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:minieye.InsData.linear_velocity)
}

// .perception.common.Point3f sd_position = 10;
inline bool InsData::_internal_has_sd_position() const {
  return this != internal_default_instance() && sd_position_ != nullptr;
}
inline bool InsData::has_sd_position() const {
  return _internal_has_sd_position();
}
inline const ::perception::common::Point3f& InsData::_internal_sd_position() const {
  const ::perception::common::Point3f* p = sd_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& InsData::sd_position() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.sd_position)
  return _internal_sd_position();
}
inline void InsData::unsafe_arena_set_allocated_sd_position(
    ::perception::common::Point3f* sd_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sd_position_);
  }
  sd_position_ = sd_position;
  if (sd_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.InsData.sd_position)
}
inline ::perception::common::Point3f* InsData::release_sd_position() {
  auto temp = unsafe_arena_release_sd_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* InsData::unsafe_arena_release_sd_position() {
  // @@protoc_insertion_point(field_release:minieye.InsData.sd_position)
  
  ::perception::common::Point3f* temp = sd_position_;
  sd_position_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* InsData::_internal_mutable_sd_position() {
  
  if (sd_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    sd_position_ = p;
  }
  return sd_position_;
}
inline ::perception::common::Point3f* InsData::mutable_sd_position() {
  // @@protoc_insertion_point(field_mutable:minieye.InsData.sd_position)
  return _internal_mutable_sd_position();
}
inline void InsData::set_allocated_sd_position(::perception::common::Point3f* sd_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sd_position_);
  }
  if (sd_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sd_position)->GetArena();
    if (message_arena != submessage_arena) {
      sd_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sd_position, submessage_arena);
    }
    
  } else {
    
  }
  sd_position_ = sd_position;
  // @@protoc_insertion_point(field_set_allocated:minieye.InsData.sd_position)
}

// .perception.common.Point3f sd_attitude = 11;
inline bool InsData::_internal_has_sd_attitude() const {
  return this != internal_default_instance() && sd_attitude_ != nullptr;
}
inline bool InsData::has_sd_attitude() const {
  return _internal_has_sd_attitude();
}
inline const ::perception::common::Point3f& InsData::_internal_sd_attitude() const {
  const ::perception::common::Point3f* p = sd_attitude_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& InsData::sd_attitude() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.sd_attitude)
  return _internal_sd_attitude();
}
inline void InsData::unsafe_arena_set_allocated_sd_attitude(
    ::perception::common::Point3f* sd_attitude) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sd_attitude_);
  }
  sd_attitude_ = sd_attitude;
  if (sd_attitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.InsData.sd_attitude)
}
inline ::perception::common::Point3f* InsData::release_sd_attitude() {
  auto temp = unsafe_arena_release_sd_attitude();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* InsData::unsafe_arena_release_sd_attitude() {
  // @@protoc_insertion_point(field_release:minieye.InsData.sd_attitude)
  
  ::perception::common::Point3f* temp = sd_attitude_;
  sd_attitude_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* InsData::_internal_mutable_sd_attitude() {
  
  if (sd_attitude_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    sd_attitude_ = p;
  }
  return sd_attitude_;
}
inline ::perception::common::Point3f* InsData::mutable_sd_attitude() {
  // @@protoc_insertion_point(field_mutable:minieye.InsData.sd_attitude)
  return _internal_mutable_sd_attitude();
}
inline void InsData::set_allocated_sd_attitude(::perception::common::Point3f* sd_attitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sd_attitude_);
  }
  if (sd_attitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sd_attitude)->GetArena();
    if (message_arena != submessage_arena) {
      sd_attitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sd_attitude, submessage_arena);
    }
    
  } else {
    
  }
  sd_attitude_ = sd_attitude;
  // @@protoc_insertion_point(field_set_allocated:minieye.InsData.sd_attitude)
}

// .perception.common.Point3f sd_velocity = 12;
inline bool InsData::_internal_has_sd_velocity() const {
  return this != internal_default_instance() && sd_velocity_ != nullptr;
}
inline bool InsData::has_sd_velocity() const {
  return _internal_has_sd_velocity();
}
inline const ::perception::common::Point3f& InsData::_internal_sd_velocity() const {
  const ::perception::common::Point3f* p = sd_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& InsData::sd_velocity() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.sd_velocity)
  return _internal_sd_velocity();
}
inline void InsData::unsafe_arena_set_allocated_sd_velocity(
    ::perception::common::Point3f* sd_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sd_velocity_);
  }
  sd_velocity_ = sd_velocity;
  if (sd_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.InsData.sd_velocity)
}
inline ::perception::common::Point3f* InsData::release_sd_velocity() {
  auto temp = unsafe_arena_release_sd_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* InsData::unsafe_arena_release_sd_velocity() {
  // @@protoc_insertion_point(field_release:minieye.InsData.sd_velocity)
  
  ::perception::common::Point3f* temp = sd_velocity_;
  sd_velocity_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* InsData::_internal_mutable_sd_velocity() {
  
  if (sd_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    sd_velocity_ = p;
  }
  return sd_velocity_;
}
inline ::perception::common::Point3f* InsData::mutable_sd_velocity() {
  // @@protoc_insertion_point(field_mutable:minieye.InsData.sd_velocity)
  return _internal_mutable_sd_velocity();
}
inline void InsData::set_allocated_sd_velocity(::perception::common::Point3f* sd_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sd_velocity_);
  }
  if (sd_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sd_velocity)->GetArena();
    if (message_arena != submessage_arena) {
      sd_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sd_velocity, submessage_arena);
    }
    
  } else {
    
  }
  sd_velocity_ = sd_velocity;
  // @@protoc_insertion_point(field_set_allocated:minieye.InsData.sd_velocity)
}

// uint32 sys_status = 13;
inline void InsData::clear_sys_status() {
  sys_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsData::_internal_sys_status() const {
  return sys_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsData::sys_status() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.sys_status)
  return _internal_sys_status();
}
inline void InsData::_internal_set_sys_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sys_status_ = value;
}
inline void InsData::set_sys_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sys_status(value);
  // @@protoc_insertion_point(field_set:minieye.InsData.sys_status)
}

// uint32 gps_status = 14;
inline void InsData::clear_gps_status() {
  gps_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsData::_internal_gps_status() const {
  return gps_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsData::gps_status() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.gps_status)
  return _internal_gps_status();
}
inline void InsData::_internal_set_gps_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gps_status_ = value;
}
inline void InsData::set_gps_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gps_status(value);
  // @@protoc_insertion_point(field_set:minieye.InsData.gps_status)
}

// uint32 warn_info = 15;
inline void InsData::clear_warn_info() {
  warn_info_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsData::_internal_warn_info() const {
  return warn_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsData::warn_info() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.warn_info)
  return _internal_warn_info();
}
inline void InsData::_internal_set_warn_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  warn_info_ = value;
}
inline void InsData::set_warn_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_warn_info(value);
  // @@protoc_insertion_point(field_set:minieye.InsData.warn_info)
}

// .perception.common.Point3f corr_angular_velocity = 16;
inline bool InsData::_internal_has_corr_angular_velocity() const {
  return this != internal_default_instance() && corr_angular_velocity_ != nullptr;
}
inline bool InsData::has_corr_angular_velocity() const {
  return _internal_has_corr_angular_velocity();
}
inline const ::perception::common::Point3f& InsData::_internal_corr_angular_velocity() const {
  const ::perception::common::Point3f* p = corr_angular_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& InsData::corr_angular_velocity() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.corr_angular_velocity)
  return _internal_corr_angular_velocity();
}
inline void InsData::unsafe_arena_set_allocated_corr_angular_velocity(
    ::perception::common::Point3f* corr_angular_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corr_angular_velocity_);
  }
  corr_angular_velocity_ = corr_angular_velocity;
  if (corr_angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.InsData.corr_angular_velocity)
}
inline ::perception::common::Point3f* InsData::release_corr_angular_velocity() {
  auto temp = unsafe_arena_release_corr_angular_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* InsData::unsafe_arena_release_corr_angular_velocity() {
  // @@protoc_insertion_point(field_release:minieye.InsData.corr_angular_velocity)
  
  ::perception::common::Point3f* temp = corr_angular_velocity_;
  corr_angular_velocity_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* InsData::_internal_mutable_corr_angular_velocity() {
  
  if (corr_angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    corr_angular_velocity_ = p;
  }
  return corr_angular_velocity_;
}
inline ::perception::common::Point3f* InsData::mutable_corr_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:minieye.InsData.corr_angular_velocity)
  return _internal_mutable_corr_angular_velocity();
}
inline void InsData::set_allocated_corr_angular_velocity(::perception::common::Point3f* corr_angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(corr_angular_velocity_);
  }
  if (corr_angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corr_angular_velocity)->GetArena();
    if (message_arena != submessage_arena) {
      corr_angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, corr_angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  corr_angular_velocity_ = corr_angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:minieye.InsData.corr_angular_velocity)
}

// .perception.common.Point3f corr_linear_accel = 17;
inline bool InsData::_internal_has_corr_linear_accel() const {
  return this != internal_default_instance() && corr_linear_accel_ != nullptr;
}
inline bool InsData::has_corr_linear_accel() const {
  return _internal_has_corr_linear_accel();
}
inline const ::perception::common::Point3f& InsData::_internal_corr_linear_accel() const {
  const ::perception::common::Point3f* p = corr_linear_accel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& InsData::corr_linear_accel() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.corr_linear_accel)
  return _internal_corr_linear_accel();
}
inline void InsData::unsafe_arena_set_allocated_corr_linear_accel(
    ::perception::common::Point3f* corr_linear_accel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corr_linear_accel_);
  }
  corr_linear_accel_ = corr_linear_accel;
  if (corr_linear_accel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.InsData.corr_linear_accel)
}
inline ::perception::common::Point3f* InsData::release_corr_linear_accel() {
  auto temp = unsafe_arena_release_corr_linear_accel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* InsData::unsafe_arena_release_corr_linear_accel() {
  // @@protoc_insertion_point(field_release:minieye.InsData.corr_linear_accel)
  
  ::perception::common::Point3f* temp = corr_linear_accel_;
  corr_linear_accel_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* InsData::_internal_mutable_corr_linear_accel() {
  
  if (corr_linear_accel_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    corr_linear_accel_ = p;
  }
  return corr_linear_accel_;
}
inline ::perception::common::Point3f* InsData::mutable_corr_linear_accel() {
  // @@protoc_insertion_point(field_mutable:minieye.InsData.corr_linear_accel)
  return _internal_mutable_corr_linear_accel();
}
inline void InsData::set_allocated_corr_linear_accel(::perception::common::Point3f* corr_linear_accel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(corr_linear_accel_);
  }
  if (corr_linear_accel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(corr_linear_accel)->GetArena();
    if (message_arena != submessage_arena) {
      corr_linear_accel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, corr_linear_accel, submessage_arena);
    }
    
  } else {
    
  }
  corr_linear_accel_ = corr_linear_accel;
  // @@protoc_insertion_point(field_set_allocated:minieye.InsData.corr_linear_accel)
}

// float heading = 18;
inline void InsData::clear_heading() {
  heading_ = 0;
}
inline float InsData::_internal_heading() const {
  return heading_;
}
inline float InsData::heading() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.heading)
  return _internal_heading();
}
inline void InsData::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void InsData::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:minieye.InsData.heading)
}

// .perception.common.Point3f mounting_error = 19;
inline bool InsData::_internal_has_mounting_error() const {
  return this != internal_default_instance() && mounting_error_ != nullptr;
}
inline bool InsData::has_mounting_error() const {
  return _internal_has_mounting_error();
}
inline const ::perception::common::Point3f& InsData::_internal_mounting_error() const {
  const ::perception::common::Point3f* p = mounting_error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& InsData::mounting_error() const {
  // @@protoc_insertion_point(field_get:minieye.InsData.mounting_error)
  return _internal_mounting_error();
}
inline void InsData::unsafe_arena_set_allocated_mounting_error(
    ::perception::common::Point3f* mounting_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mounting_error_);
  }
  mounting_error_ = mounting_error;
  if (mounting_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.InsData.mounting_error)
}
inline ::perception::common::Point3f* InsData::release_mounting_error() {
  auto temp = unsafe_arena_release_mounting_error();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* InsData::unsafe_arena_release_mounting_error() {
  // @@protoc_insertion_point(field_release:minieye.InsData.mounting_error)
  
  ::perception::common::Point3f* temp = mounting_error_;
  mounting_error_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* InsData::_internal_mutable_mounting_error() {
  
  if (mounting_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    mounting_error_ = p;
  }
  return mounting_error_;
}
inline ::perception::common::Point3f* InsData::mutable_mounting_error() {
  // @@protoc_insertion_point(field_mutable:minieye.InsData.mounting_error)
  return _internal_mutable_mounting_error();
}
inline void InsData::set_allocated_mounting_error(::perception::common::Point3f* mounting_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mounting_error_);
  }
  if (mounting_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mounting_error)->GetArena();
    if (message_arena != submessage_arena) {
      mounting_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mounting_error, submessage_arena);
    }
    
  } else {
    
  }
  mounting_error_ = mounting_error;
  // @@protoc_insertion_point(field_set_allocated:minieye.InsData.mounting_error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ins_2eproto
