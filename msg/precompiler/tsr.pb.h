// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tsr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tsr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "geometry.pb.h"
#include "data_source.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tsr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tsr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tsr_2eproto;
namespace perception {
class Tsr;
class TsrDefaultTypeInternal;
extern TsrDefaultTypeInternal _Tsr_default_instance_;
class Tsr_TsrTraceRes;
class Tsr_TsrTraceResDefaultTypeInternal;
extern Tsr_TsrTraceResDefaultTypeInternal _Tsr_TsrTraceRes_default_instance_;
class Tsr_TsrWarning;
class Tsr_TsrWarningDefaultTypeInternal;
extern Tsr_TsrWarningDefaultTypeInternal _Tsr_TsrWarning_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::Tsr* Arena::CreateMaybeMessage<::perception::Tsr>(Arena*);
template<> ::perception::Tsr_TsrTraceRes* Arena::CreateMaybeMessage<::perception::Tsr_TsrTraceRes>(Arena*);
template<> ::perception::Tsr_TsrWarning* Arena::CreateMaybeMessage<::perception::Tsr_TsrWarning>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

// ===================================================================

class Tsr_TsrTraceRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Tsr.TsrTraceRes) */ {
 public:
  inline Tsr_TsrTraceRes() : Tsr_TsrTraceRes(nullptr) {};
  virtual ~Tsr_TsrTraceRes();

  Tsr_TsrTraceRes(const Tsr_TsrTraceRes& from);
  Tsr_TsrTraceRes(Tsr_TsrTraceRes&& from) noexcept
    : Tsr_TsrTraceRes() {
    *this = ::std::move(from);
  }

  inline Tsr_TsrTraceRes& operator=(const Tsr_TsrTraceRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tsr_TsrTraceRes& operator=(Tsr_TsrTraceRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tsr_TsrTraceRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tsr_TsrTraceRes* internal_default_instance() {
    return reinterpret_cast<const Tsr_TsrTraceRes*>(
               &_Tsr_TsrTraceRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tsr_TsrTraceRes& a, Tsr_TsrTraceRes& b) {
    a.Swap(&b);
  }
  inline void Swap(Tsr_TsrTraceRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tsr_TsrTraceRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tsr_TsrTraceRes* New() const final {
    return CreateMaybeMessage<Tsr_TsrTraceRes>(nullptr);
  }

  Tsr_TsrTraceRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tsr_TsrTraceRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tsr_TsrTraceRes& from);
  void MergeFrom(const Tsr_TsrTraceRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tsr_TsrTraceRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Tsr.TsrTraceRes";
  }
  protected:
  explicit Tsr_TsrTraceRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tsr_2eproto);
    return ::descriptor_table_tsr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetRectFieldNumber = 1,
    kConfidenceFieldNumber = 2,
    kHitTypeFieldNumber = 3,
    kTsrClassFieldNumber = 4,
    kTsrValueFieldNumber = 5,
    kTsrIdFieldNumber = 6,
    kTrackCntFieldNumber = 7,
    kLongitudinalDistFieldNumber = 8,
    kLateralDistFieldNumber = 9,
    kHeightFieldNumber = 10,
  };
  // .perception.common.Rect2f det_rect = 1;
  bool has_det_rect() const;
  private:
  bool _internal_has_det_rect() const;
  public:
  void clear_det_rect();
  const ::perception::common::Rect2f& det_rect() const;
  ::perception::common::Rect2f* release_det_rect();
  ::perception::common::Rect2f* mutable_det_rect();
  void set_allocated_det_rect(::perception::common::Rect2f* det_rect);
  private:
  const ::perception::common::Rect2f& _internal_det_rect() const;
  ::perception::common::Rect2f* _internal_mutable_det_rect();
  public:
  void unsafe_arena_set_allocated_det_rect(
      ::perception::common::Rect2f* det_rect);
  ::perception::common::Rect2f* unsafe_arena_release_det_rect();

  // float confidence = 2;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // int32 hit_type = 3;
  void clear_hit_type();
  ::PROTOBUF_NAMESPACE_ID::int32 hit_type() const;
  void set_hit_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hit_type() const;
  void _internal_set_hit_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tsr_class = 4;
  void clear_tsr_class();
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_class() const;
  void set_tsr_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tsr_class() const;
  void _internal_set_tsr_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tsr_value = 5;
  void clear_tsr_value();
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_value() const;
  void set_tsr_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tsr_value() const;
  void _internal_set_tsr_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tsr_id = 6;
  void clear_tsr_id();
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_id() const;
  void set_tsr_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tsr_id() const;
  void _internal_set_tsr_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 track_cnt = 7;
  void clear_track_cnt();
  ::PROTOBUF_NAMESPACE_ID::int32 track_cnt() const;
  void set_track_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_track_cnt() const;
  void _internal_set_track_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float longitudinal_dist = 8;
  void clear_longitudinal_dist();
  float longitudinal_dist() const;
  void set_longitudinal_dist(float value);
  private:
  float _internal_longitudinal_dist() const;
  void _internal_set_longitudinal_dist(float value);
  public:

  // float lateral_dist = 9;
  void clear_lateral_dist();
  float lateral_dist() const;
  void set_lateral_dist(float value);
  private:
  float _internal_lateral_dist() const;
  void _internal_set_lateral_dist(float value);
  public:

  // float height = 10;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Tsr.TsrTraceRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::Rect2f* det_rect_;
  float confidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 hit_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_class_;
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_cnt_;
  float longitudinal_dist_;
  float lateral_dist_;
  float height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tsr_2eproto;
};
// -------------------------------------------------------------------

class Tsr_TsrWarning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Tsr.TsrWarning) */ {
 public:
  inline Tsr_TsrWarning() : Tsr_TsrWarning(nullptr) {};
  virtual ~Tsr_TsrWarning();

  Tsr_TsrWarning(const Tsr_TsrWarning& from);
  Tsr_TsrWarning(Tsr_TsrWarning&& from) noexcept
    : Tsr_TsrWarning() {
    *this = ::std::move(from);
  }

  inline Tsr_TsrWarning& operator=(const Tsr_TsrWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tsr_TsrWarning& operator=(Tsr_TsrWarning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tsr_TsrWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tsr_TsrWarning* internal_default_instance() {
    return reinterpret_cast<const Tsr_TsrWarning*>(
               &_Tsr_TsrWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Tsr_TsrWarning& a, Tsr_TsrWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(Tsr_TsrWarning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tsr_TsrWarning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tsr_TsrWarning* New() const final {
    return CreateMaybeMessage<Tsr_TsrWarning>(nullptr);
  }

  Tsr_TsrWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tsr_TsrWarning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tsr_TsrWarning& from);
  void MergeFrom(const Tsr_TsrWarning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tsr_TsrWarning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Tsr.TsrWarning";
  }
  protected:
  explicit Tsr_TsrWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tsr_2eproto);
    return ::descriptor_table_tsr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightLimitFieldNumber = 1,
    kWeightLimitFieldNumber = 2,
    kSpeedLimitFieldNumber = 3,
    kTsrWarningLevelFieldNumber = 4,
  };
  // float height_limit = 1;
  void clear_height_limit();
  float height_limit() const;
  void set_height_limit(float value);
  private:
  float _internal_height_limit() const;
  void _internal_set_height_limit(float value);
  public:

  // float weight_limit = 2;
  void clear_weight_limit();
  float weight_limit() const;
  void set_weight_limit(float value);
  private:
  float _internal_weight_limit() const;
  void _internal_set_weight_limit(float value);
  public:

  // int32 speed_limit = 3;
  void clear_speed_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 speed_limit() const;
  void set_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed_limit() const;
  void _internal_set_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tsr_warning_level = 4;
  void clear_tsr_warning_level();
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_warning_level() const;
  void set_tsr_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tsr_warning_level() const;
  void _internal_set_tsr_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Tsr.TsrWarning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float height_limit_;
  float weight_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_warning_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tsr_2eproto;
};
// -------------------------------------------------------------------

class Tsr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Tsr) */ {
 public:
  inline Tsr() : Tsr(nullptr) {};
  virtual ~Tsr();

  Tsr(const Tsr& from);
  Tsr(Tsr&& from) noexcept
    : Tsr() {
    *this = ::std::move(from);
  }

  inline Tsr& operator=(const Tsr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tsr& operator=(Tsr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tsr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tsr* internal_default_instance() {
    return reinterpret_cast<const Tsr*>(
               &_Tsr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Tsr& a, Tsr& b) {
    a.Swap(&b);
  }
  inline void Swap(Tsr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tsr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tsr* New() const final {
    return CreateMaybeMessage<Tsr>(nullptr);
  }

  Tsr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tsr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tsr& from);
  void MergeFrom(const Tsr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tsr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Tsr";
  }
  protected:
  explicit Tsr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tsr_2eproto);
    return ::descriptor_table_tsr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Tsr_TsrTraceRes TsrTraceRes;
  typedef Tsr_TsrWarning TsrWarning;

  // accessors -------------------------------------------------------

  enum : int {
    kTsrListFieldNumber = 3,
    kTsrWarningFieldNumber = 4,
    kFrameIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kDataSourceFieldNumber = 5,
  };
  // repeated .perception.Tsr.TsrTraceRes tsr_list = 3;
  int tsr_list_size() const;
  private:
  int _internal_tsr_list_size() const;
  public:
  void clear_tsr_list();
  ::perception::Tsr_TsrTraceRes* mutable_tsr_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Tsr_TsrTraceRes >*
      mutable_tsr_list();
  private:
  const ::perception::Tsr_TsrTraceRes& _internal_tsr_list(int index) const;
  ::perception::Tsr_TsrTraceRes* _internal_add_tsr_list();
  public:
  const ::perception::Tsr_TsrTraceRes& tsr_list(int index) const;
  ::perception::Tsr_TsrTraceRes* add_tsr_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Tsr_TsrTraceRes >&
      tsr_list() const;

  // .perception.Tsr.TsrWarning tsr_warning = 4;
  bool has_tsr_warning() const;
  private:
  bool _internal_has_tsr_warning() const;
  public:
  void clear_tsr_warning();
  const ::perception::Tsr_TsrWarning& tsr_warning() const;
  ::perception::Tsr_TsrWarning* release_tsr_warning();
  ::perception::Tsr_TsrWarning* mutable_tsr_warning();
  void set_allocated_tsr_warning(::perception::Tsr_TsrWarning* tsr_warning);
  private:
  const ::perception::Tsr_TsrWarning& _internal_tsr_warning() const;
  ::perception::Tsr_TsrWarning* _internal_mutable_tsr_warning();
  public:
  void unsafe_arena_set_allocated_tsr_warning(
      ::perception::Tsr_TsrWarning* tsr_warning);
  ::perception::Tsr_TsrWarning* unsafe_arena_release_tsr_warning();

  // uint64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .minieye.DataSource data_source = 5;
  void clear_data_source();
  ::minieye::DataSource data_source() const;
  void set_data_source(::minieye::DataSource value);
  private:
  ::minieye::DataSource _internal_data_source() const;
  void _internal_set_data_source(::minieye::DataSource value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Tsr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Tsr_TsrTraceRes > tsr_list_;
  ::perception::Tsr_TsrWarning* tsr_warning_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  int data_source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tsr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tsr_TsrTraceRes

// .perception.common.Rect2f det_rect = 1;
inline bool Tsr_TsrTraceRes::_internal_has_det_rect() const {
  return this != internal_default_instance() && det_rect_ != nullptr;
}
inline bool Tsr_TsrTraceRes::has_det_rect() const {
  return _internal_has_det_rect();
}
inline const ::perception::common::Rect2f& Tsr_TsrTraceRes::_internal_det_rect() const {
  const ::perception::common::Rect2f* p = det_rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Rect2f*>(
      &::perception::common::_Rect2f_default_instance_);
}
inline const ::perception::common::Rect2f& Tsr_TsrTraceRes::det_rect() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrTraceRes.det_rect)
  return _internal_det_rect();
}
inline void Tsr_TsrTraceRes::unsafe_arena_set_allocated_det_rect(
    ::perception::common::Rect2f* det_rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(det_rect_);
  }
  det_rect_ = det_rect;
  if (det_rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.Tsr.TsrTraceRes.det_rect)
}
inline ::perception::common::Rect2f* Tsr_TsrTraceRes::release_det_rect() {
  auto temp = unsafe_arena_release_det_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Rect2f* Tsr_TsrTraceRes::unsafe_arena_release_det_rect() {
  // @@protoc_insertion_point(field_release:perception.Tsr.TsrTraceRes.det_rect)
  
  ::perception::common::Rect2f* temp = det_rect_;
  det_rect_ = nullptr;
  return temp;
}
inline ::perception::common::Rect2f* Tsr_TsrTraceRes::_internal_mutable_det_rect() {
  
  if (det_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Rect2f>(GetArena());
    det_rect_ = p;
  }
  return det_rect_;
}
inline ::perception::common::Rect2f* Tsr_TsrTraceRes::mutable_det_rect() {
  // @@protoc_insertion_point(field_mutable:perception.Tsr.TsrTraceRes.det_rect)
  return _internal_mutable_det_rect();
}
inline void Tsr_TsrTraceRes::set_allocated_det_rect(::perception::common::Rect2f* det_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(det_rect_);
  }
  if (det_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(det_rect)->GetArena();
    if (message_arena != submessage_arena) {
      det_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, det_rect, submessage_arena);
    }
    
  } else {
    
  }
  det_rect_ = det_rect;
  // @@protoc_insertion_point(field_set_allocated:perception.Tsr.TsrTraceRes.det_rect)
}

// float confidence = 2;
inline void Tsr_TsrTraceRes::clear_confidence() {
  confidence_ = 0;
}
inline float Tsr_TsrTraceRes::_internal_confidence() const {
  return confidence_;
}
inline float Tsr_TsrTraceRes::confidence() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrTraceRes.confidence)
  return _internal_confidence();
}
inline void Tsr_TsrTraceRes::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void Tsr_TsrTraceRes::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.TsrTraceRes.confidence)
}

// int32 hit_type = 3;
inline void Tsr_TsrTraceRes::clear_hit_type() {
  hit_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrTraceRes::_internal_hit_type() const {
  return hit_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrTraceRes::hit_type() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrTraceRes.hit_type)
  return _internal_hit_type();
}
inline void Tsr_TsrTraceRes::_internal_set_hit_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hit_type_ = value;
}
inline void Tsr_TsrTraceRes::set_hit_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hit_type(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.TsrTraceRes.hit_type)
}

// int32 tsr_class = 4;
inline void Tsr_TsrTraceRes::clear_tsr_class() {
  tsr_class_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrTraceRes::_internal_tsr_class() const {
  return tsr_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrTraceRes::tsr_class() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrTraceRes.tsr_class)
  return _internal_tsr_class();
}
inline void Tsr_TsrTraceRes::_internal_set_tsr_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tsr_class_ = value;
}
inline void Tsr_TsrTraceRes::set_tsr_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tsr_class(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.TsrTraceRes.tsr_class)
}

// int32 tsr_value = 5;
inline void Tsr_TsrTraceRes::clear_tsr_value() {
  tsr_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrTraceRes::_internal_tsr_value() const {
  return tsr_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrTraceRes::tsr_value() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrTraceRes.tsr_value)
  return _internal_tsr_value();
}
inline void Tsr_TsrTraceRes::_internal_set_tsr_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tsr_value_ = value;
}
inline void Tsr_TsrTraceRes::set_tsr_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tsr_value(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.TsrTraceRes.tsr_value)
}

// int32 tsr_id = 6;
inline void Tsr_TsrTraceRes::clear_tsr_id() {
  tsr_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrTraceRes::_internal_tsr_id() const {
  return tsr_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrTraceRes::tsr_id() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrTraceRes.tsr_id)
  return _internal_tsr_id();
}
inline void Tsr_TsrTraceRes::_internal_set_tsr_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tsr_id_ = value;
}
inline void Tsr_TsrTraceRes::set_tsr_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tsr_id(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.TsrTraceRes.tsr_id)
}

// int32 track_cnt = 7;
inline void Tsr_TsrTraceRes::clear_track_cnt() {
  track_cnt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrTraceRes::_internal_track_cnt() const {
  return track_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrTraceRes::track_cnt() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrTraceRes.track_cnt)
  return _internal_track_cnt();
}
inline void Tsr_TsrTraceRes::_internal_set_track_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  track_cnt_ = value;
}
inline void Tsr_TsrTraceRes::set_track_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_track_cnt(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.TsrTraceRes.track_cnt)
}

// float longitudinal_dist = 8;
inline void Tsr_TsrTraceRes::clear_longitudinal_dist() {
  longitudinal_dist_ = 0;
}
inline float Tsr_TsrTraceRes::_internal_longitudinal_dist() const {
  return longitudinal_dist_;
}
inline float Tsr_TsrTraceRes::longitudinal_dist() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrTraceRes.longitudinal_dist)
  return _internal_longitudinal_dist();
}
inline void Tsr_TsrTraceRes::_internal_set_longitudinal_dist(float value) {
  
  longitudinal_dist_ = value;
}
inline void Tsr_TsrTraceRes::set_longitudinal_dist(float value) {
  _internal_set_longitudinal_dist(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.TsrTraceRes.longitudinal_dist)
}

// float lateral_dist = 9;
inline void Tsr_TsrTraceRes::clear_lateral_dist() {
  lateral_dist_ = 0;
}
inline float Tsr_TsrTraceRes::_internal_lateral_dist() const {
  return lateral_dist_;
}
inline float Tsr_TsrTraceRes::lateral_dist() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrTraceRes.lateral_dist)
  return _internal_lateral_dist();
}
inline void Tsr_TsrTraceRes::_internal_set_lateral_dist(float value) {
  
  lateral_dist_ = value;
}
inline void Tsr_TsrTraceRes::set_lateral_dist(float value) {
  _internal_set_lateral_dist(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.TsrTraceRes.lateral_dist)
}

// float height = 10;
inline void Tsr_TsrTraceRes::clear_height() {
  height_ = 0;
}
inline float Tsr_TsrTraceRes::_internal_height() const {
  return height_;
}
inline float Tsr_TsrTraceRes::height() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrTraceRes.height)
  return _internal_height();
}
inline void Tsr_TsrTraceRes::_internal_set_height(float value) {
  
  height_ = value;
}
inline void Tsr_TsrTraceRes::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.TsrTraceRes.height)
}

// -------------------------------------------------------------------

// Tsr_TsrWarning

// float height_limit = 1;
inline void Tsr_TsrWarning::clear_height_limit() {
  height_limit_ = 0;
}
inline float Tsr_TsrWarning::_internal_height_limit() const {
  return height_limit_;
}
inline float Tsr_TsrWarning::height_limit() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrWarning.height_limit)
  return _internal_height_limit();
}
inline void Tsr_TsrWarning::_internal_set_height_limit(float value) {
  
  height_limit_ = value;
}
inline void Tsr_TsrWarning::set_height_limit(float value) {
  _internal_set_height_limit(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.TsrWarning.height_limit)
}

// float weight_limit = 2;
inline void Tsr_TsrWarning::clear_weight_limit() {
  weight_limit_ = 0;
}
inline float Tsr_TsrWarning::_internal_weight_limit() const {
  return weight_limit_;
}
inline float Tsr_TsrWarning::weight_limit() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrWarning.weight_limit)
  return _internal_weight_limit();
}
inline void Tsr_TsrWarning::_internal_set_weight_limit(float value) {
  
  weight_limit_ = value;
}
inline void Tsr_TsrWarning::set_weight_limit(float value) {
  _internal_set_weight_limit(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.TsrWarning.weight_limit)
}

// int32 speed_limit = 3;
inline void Tsr_TsrWarning::clear_speed_limit() {
  speed_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrWarning::_internal_speed_limit() const {
  return speed_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrWarning::speed_limit() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrWarning.speed_limit)
  return _internal_speed_limit();
}
inline void Tsr_TsrWarning::_internal_set_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_limit_ = value;
}
inline void Tsr_TsrWarning::set_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed_limit(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.TsrWarning.speed_limit)
}

// int32 tsr_warning_level = 4;
inline void Tsr_TsrWarning::clear_tsr_warning_level() {
  tsr_warning_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrWarning::_internal_tsr_warning_level() const {
  return tsr_warning_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tsr_TsrWarning::tsr_warning_level() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.TsrWarning.tsr_warning_level)
  return _internal_tsr_warning_level();
}
inline void Tsr_TsrWarning::_internal_set_tsr_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tsr_warning_level_ = value;
}
inline void Tsr_TsrWarning::set_tsr_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tsr_warning_level(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.TsrWarning.tsr_warning_level)
}

// -------------------------------------------------------------------

// Tsr

// uint64 frame_id = 1;
inline void Tsr::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tsr::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tsr::frame_id() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.frame_id)
  return _internal_frame_id();
}
inline void Tsr::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void Tsr::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.frame_id)
}

// uint64 timestamp = 2;
inline void Tsr::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tsr::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tsr::timestamp() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.timestamp)
  return _internal_timestamp();
}
inline void Tsr::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Tsr::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.timestamp)
}

// repeated .perception.Tsr.TsrTraceRes tsr_list = 3;
inline int Tsr::_internal_tsr_list_size() const {
  return tsr_list_.size();
}
inline int Tsr::tsr_list_size() const {
  return _internal_tsr_list_size();
}
inline void Tsr::clear_tsr_list() {
  tsr_list_.Clear();
}
inline ::perception::Tsr_TsrTraceRes* Tsr::mutable_tsr_list(int index) {
  // @@protoc_insertion_point(field_mutable:perception.Tsr.tsr_list)
  return tsr_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Tsr_TsrTraceRes >*
Tsr::mutable_tsr_list() {
  // @@protoc_insertion_point(field_mutable_list:perception.Tsr.tsr_list)
  return &tsr_list_;
}
inline const ::perception::Tsr_TsrTraceRes& Tsr::_internal_tsr_list(int index) const {
  return tsr_list_.Get(index);
}
inline const ::perception::Tsr_TsrTraceRes& Tsr::tsr_list(int index) const {
  // @@protoc_insertion_point(field_get:perception.Tsr.tsr_list)
  return _internal_tsr_list(index);
}
inline ::perception::Tsr_TsrTraceRes* Tsr::_internal_add_tsr_list() {
  return tsr_list_.Add();
}
inline ::perception::Tsr_TsrTraceRes* Tsr::add_tsr_list() {
  // @@protoc_insertion_point(field_add:perception.Tsr.tsr_list)
  return _internal_add_tsr_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Tsr_TsrTraceRes >&
Tsr::tsr_list() const {
  // @@protoc_insertion_point(field_list:perception.Tsr.tsr_list)
  return tsr_list_;
}

// .perception.Tsr.TsrWarning tsr_warning = 4;
inline bool Tsr::_internal_has_tsr_warning() const {
  return this != internal_default_instance() && tsr_warning_ != nullptr;
}
inline bool Tsr::has_tsr_warning() const {
  return _internal_has_tsr_warning();
}
inline void Tsr::clear_tsr_warning() {
  if (GetArena() == nullptr && tsr_warning_ != nullptr) {
    delete tsr_warning_;
  }
  tsr_warning_ = nullptr;
}
inline const ::perception::Tsr_TsrWarning& Tsr::_internal_tsr_warning() const {
  const ::perception::Tsr_TsrWarning* p = tsr_warning_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::Tsr_TsrWarning*>(
      &::perception::_Tsr_TsrWarning_default_instance_);
}
inline const ::perception::Tsr_TsrWarning& Tsr::tsr_warning() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.tsr_warning)
  return _internal_tsr_warning();
}
inline void Tsr::unsafe_arena_set_allocated_tsr_warning(
    ::perception::Tsr_TsrWarning* tsr_warning) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsr_warning_);
  }
  tsr_warning_ = tsr_warning;
  if (tsr_warning) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.Tsr.tsr_warning)
}
inline ::perception::Tsr_TsrWarning* Tsr::release_tsr_warning() {
  auto temp = unsafe_arena_release_tsr_warning();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::Tsr_TsrWarning* Tsr::unsafe_arena_release_tsr_warning() {
  // @@protoc_insertion_point(field_release:perception.Tsr.tsr_warning)
  
  ::perception::Tsr_TsrWarning* temp = tsr_warning_;
  tsr_warning_ = nullptr;
  return temp;
}
inline ::perception::Tsr_TsrWarning* Tsr::_internal_mutable_tsr_warning() {
  
  if (tsr_warning_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::Tsr_TsrWarning>(GetArena());
    tsr_warning_ = p;
  }
  return tsr_warning_;
}
inline ::perception::Tsr_TsrWarning* Tsr::mutable_tsr_warning() {
  // @@protoc_insertion_point(field_mutable:perception.Tsr.tsr_warning)
  return _internal_mutable_tsr_warning();
}
inline void Tsr::set_allocated_tsr_warning(::perception::Tsr_TsrWarning* tsr_warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tsr_warning_;
  }
  if (tsr_warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tsr_warning);
    if (message_arena != submessage_arena) {
      tsr_warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsr_warning, submessage_arena);
    }
    
  } else {
    
  }
  tsr_warning_ = tsr_warning;
  // @@protoc_insertion_point(field_set_allocated:perception.Tsr.tsr_warning)
}

// .minieye.DataSource data_source = 5;
inline void Tsr::clear_data_source() {
  data_source_ = 0;
}
inline ::minieye::DataSource Tsr::_internal_data_source() const {
  return static_cast< ::minieye::DataSource >(data_source_);
}
inline ::minieye::DataSource Tsr::data_source() const {
  // @@protoc_insertion_point(field_get:perception.Tsr.data_source)
  return _internal_data_source();
}
inline void Tsr::_internal_set_data_source(::minieye::DataSource value) {
  
  data_source_ = value;
}
inline void Tsr::set_data_source(::minieye::DataSource value) {
  _internal_set_data_source(value);
  // @@protoc_insertion_point(field_set:perception.Tsr.data_source)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tsr_2eproto
