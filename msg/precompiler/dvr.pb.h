// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dvr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dvr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dvr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dvr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dvr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dvr_2eproto;
namespace minieye {
class DvrSignal;
class DvrSignalDefaultTypeInternal;
extern DvrSignalDefaultTypeInternal _DvrSignal_default_instance_;
class DvrSignal_DoubleKeyValue;
class DvrSignal_DoubleKeyValueDefaultTypeInternal;
extern DvrSignal_DoubleKeyValueDefaultTypeInternal _DvrSignal_DoubleKeyValue_default_instance_;
class DvrSignal_FloatKeyValue;
class DvrSignal_FloatKeyValueDefaultTypeInternal;
extern DvrSignal_FloatKeyValueDefaultTypeInternal _DvrSignal_FloatKeyValue_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::DvrSignal* Arena::CreateMaybeMessage<::minieye::DvrSignal>(Arena*);
template<> ::minieye::DvrSignal_DoubleKeyValue* Arena::CreateMaybeMessage<::minieye::DvrSignal_DoubleKeyValue>(Arena*);
template<> ::minieye::DvrSignal_FloatKeyValue* Arena::CreateMaybeMessage<::minieye::DvrSignal_FloatKeyValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

// ===================================================================

class DvrSignal_FloatKeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.DvrSignal.FloatKeyValue) */ {
 public:
  inline DvrSignal_FloatKeyValue() : DvrSignal_FloatKeyValue(nullptr) {};
  virtual ~DvrSignal_FloatKeyValue();

  DvrSignal_FloatKeyValue(const DvrSignal_FloatKeyValue& from);
  DvrSignal_FloatKeyValue(DvrSignal_FloatKeyValue&& from) noexcept
    : DvrSignal_FloatKeyValue() {
    *this = ::std::move(from);
  }

  inline DvrSignal_FloatKeyValue& operator=(const DvrSignal_FloatKeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline DvrSignal_FloatKeyValue& operator=(DvrSignal_FloatKeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DvrSignal_FloatKeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DvrSignal_FloatKeyValue* internal_default_instance() {
    return reinterpret_cast<const DvrSignal_FloatKeyValue*>(
               &_DvrSignal_FloatKeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DvrSignal_FloatKeyValue& a, DvrSignal_FloatKeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(DvrSignal_FloatKeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DvrSignal_FloatKeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DvrSignal_FloatKeyValue* New() const final {
    return CreateMaybeMessage<DvrSignal_FloatKeyValue>(nullptr);
  }

  DvrSignal_FloatKeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DvrSignal_FloatKeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DvrSignal_FloatKeyValue& from);
  void MergeFrom(const DvrSignal_FloatKeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DvrSignal_FloatKeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.DvrSignal.FloatKeyValue";
  }
  protected:
  explicit DvrSignal_FloatKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dvr_2eproto);
    return ::descriptor_table_dvr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescripFieldNumber = 3,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string descrip = 3;
  void clear_descrip();
  const std::string& descrip() const;
  void set_descrip(const std::string& value);
  void set_descrip(std::string&& value);
  void set_descrip(const char* value);
  void set_descrip(const char* value, size_t size);
  std::string* mutable_descrip();
  std::string* release_descrip();
  void set_allocated_descrip(std::string* descrip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_descrip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_descrip(
      std::string* descrip);
  private:
  const std::string& _internal_descrip() const;
  void _internal_set_descrip(const std::string& value);
  std::string* _internal_mutable_descrip();
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.DvrSignal.FloatKeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descrip_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dvr_2eproto;
};
// -------------------------------------------------------------------

class DvrSignal_DoubleKeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.DvrSignal.DoubleKeyValue) */ {
 public:
  inline DvrSignal_DoubleKeyValue() : DvrSignal_DoubleKeyValue(nullptr) {};
  virtual ~DvrSignal_DoubleKeyValue();

  DvrSignal_DoubleKeyValue(const DvrSignal_DoubleKeyValue& from);
  DvrSignal_DoubleKeyValue(DvrSignal_DoubleKeyValue&& from) noexcept
    : DvrSignal_DoubleKeyValue() {
    *this = ::std::move(from);
  }

  inline DvrSignal_DoubleKeyValue& operator=(const DvrSignal_DoubleKeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline DvrSignal_DoubleKeyValue& operator=(DvrSignal_DoubleKeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DvrSignal_DoubleKeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DvrSignal_DoubleKeyValue* internal_default_instance() {
    return reinterpret_cast<const DvrSignal_DoubleKeyValue*>(
               &_DvrSignal_DoubleKeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DvrSignal_DoubleKeyValue& a, DvrSignal_DoubleKeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(DvrSignal_DoubleKeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DvrSignal_DoubleKeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DvrSignal_DoubleKeyValue* New() const final {
    return CreateMaybeMessage<DvrSignal_DoubleKeyValue>(nullptr);
  }

  DvrSignal_DoubleKeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DvrSignal_DoubleKeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DvrSignal_DoubleKeyValue& from);
  void MergeFrom(const DvrSignal_DoubleKeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DvrSignal_DoubleKeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.DvrSignal.DoubleKeyValue";
  }
  protected:
  explicit DvrSignal_DoubleKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dvr_2eproto);
    return ::descriptor_table_dvr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescripFieldNumber = 3,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string descrip = 3;
  void clear_descrip();
  const std::string& descrip() const;
  void set_descrip(const std::string& value);
  void set_descrip(std::string&& value);
  void set_descrip(const char* value);
  void set_descrip(const char* value, size_t size);
  std::string* mutable_descrip();
  std::string* release_descrip();
  void set_allocated_descrip(std::string* descrip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_descrip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_descrip(
      std::string* descrip);
  private:
  const std::string& _internal_descrip() const;
  void _internal_set_descrip(const std::string& value);
  std::string* _internal_mutable_descrip();
  public:

  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.DvrSignal.DoubleKeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descrip_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dvr_2eproto;
};
// -------------------------------------------------------------------

class DvrSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.DvrSignal) */ {
 public:
  inline DvrSignal() : DvrSignal(nullptr) {};
  virtual ~DvrSignal();

  DvrSignal(const DvrSignal& from);
  DvrSignal(DvrSignal&& from) noexcept
    : DvrSignal() {
    *this = ::std::move(from);
  }

  inline DvrSignal& operator=(const DvrSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline DvrSignal& operator=(DvrSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DvrSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DvrSignal* internal_default_instance() {
    return reinterpret_cast<const DvrSignal*>(
               &_DvrSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DvrSignal& a, DvrSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(DvrSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DvrSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DvrSignal* New() const final {
    return CreateMaybeMessage<DvrSignal>(nullptr);
  }

  DvrSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DvrSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DvrSignal& from);
  void MergeFrom(const DvrSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DvrSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.DvrSignal";
  }
  protected:
  explicit DvrSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dvr_2eproto);
    return ::descriptor_table_dvr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DvrSignal_FloatKeyValue FloatKeyValue;
  typedef DvrSignal_DoubleKeyValue DoubleKeyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValueListFieldNumber = 1,
    kDoubleValueListFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kTickFieldNumber = 4,
  };
  // repeated .minieye.DvrSignal.FloatKeyValue float_value_list = 1;
  int float_value_list_size() const;
  private:
  int _internal_float_value_list_size() const;
  public:
  void clear_float_value_list();
  ::minieye::DvrSignal_FloatKeyValue* mutable_float_value_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::DvrSignal_FloatKeyValue >*
      mutable_float_value_list();
  private:
  const ::minieye::DvrSignal_FloatKeyValue& _internal_float_value_list(int index) const;
  ::minieye::DvrSignal_FloatKeyValue* _internal_add_float_value_list();
  public:
  const ::minieye::DvrSignal_FloatKeyValue& float_value_list(int index) const;
  ::minieye::DvrSignal_FloatKeyValue* add_float_value_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::DvrSignal_FloatKeyValue >&
      float_value_list() const;

  // repeated .minieye.DvrSignal.DoubleKeyValue double_value_list = 2;
  int double_value_list_size() const;
  private:
  int _internal_double_value_list_size() const;
  public:
  void clear_double_value_list();
  ::minieye::DvrSignal_DoubleKeyValue* mutable_double_value_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::DvrSignal_DoubleKeyValue >*
      mutable_double_value_list();
  private:
  const ::minieye::DvrSignal_DoubleKeyValue& _internal_double_value_list(int index) const;
  ::minieye::DvrSignal_DoubleKeyValue* _internal_add_double_value_list();
  public:
  const ::minieye::DvrSignal_DoubleKeyValue& double_value_list(int index) const;
  ::minieye::DvrSignal_DoubleKeyValue* add_double_value_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::DvrSignal_DoubleKeyValue >&
      double_value_list() const;

  // uint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 4;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.DvrSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::DvrSignal_FloatKeyValue > float_value_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::DvrSignal_DoubleKeyValue > double_value_list_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dvr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DvrSignal_FloatKeyValue

// string name = 1;
inline void DvrSignal_FloatKeyValue::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DvrSignal_FloatKeyValue::name() const {
  // @@protoc_insertion_point(field_get:minieye.DvrSignal.FloatKeyValue.name)
  return _internal_name();
}
inline void DvrSignal_FloatKeyValue::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:minieye.DvrSignal.FloatKeyValue.name)
}
inline std::string* DvrSignal_FloatKeyValue::mutable_name() {
  // @@protoc_insertion_point(field_mutable:minieye.DvrSignal.FloatKeyValue.name)
  return _internal_mutable_name();
}
inline const std::string& DvrSignal_FloatKeyValue::_internal_name() const {
  return name_.Get();
}
inline void DvrSignal_FloatKeyValue::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DvrSignal_FloatKeyValue::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minieye.DvrSignal.FloatKeyValue.name)
}
inline void DvrSignal_FloatKeyValue::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minieye.DvrSignal.FloatKeyValue.name)
}
inline void DvrSignal_FloatKeyValue::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minieye.DvrSignal.FloatKeyValue.name)
}
inline std::string* DvrSignal_FloatKeyValue::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DvrSignal_FloatKeyValue::release_name() {
  // @@protoc_insertion_point(field_release:minieye.DvrSignal.FloatKeyValue.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DvrSignal_FloatKeyValue::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minieye.DvrSignal.FloatKeyValue.name)
}
inline std::string* DvrSignal_FloatKeyValue::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minieye.DvrSignal.FloatKeyValue.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DvrSignal_FloatKeyValue::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.DvrSignal.FloatKeyValue.name)
}

// float value = 2;
inline void DvrSignal_FloatKeyValue::clear_value() {
  value_ = 0;
}
inline float DvrSignal_FloatKeyValue::_internal_value() const {
  return value_;
}
inline float DvrSignal_FloatKeyValue::value() const {
  // @@protoc_insertion_point(field_get:minieye.DvrSignal.FloatKeyValue.value)
  return _internal_value();
}
inline void DvrSignal_FloatKeyValue::_internal_set_value(float value) {
  
  value_ = value;
}
inline void DvrSignal_FloatKeyValue::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:minieye.DvrSignal.FloatKeyValue.value)
}

// string descrip = 3;
inline void DvrSignal_FloatKeyValue::clear_descrip() {
  descrip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DvrSignal_FloatKeyValue::descrip() const {
  // @@protoc_insertion_point(field_get:minieye.DvrSignal.FloatKeyValue.descrip)
  return _internal_descrip();
}
inline void DvrSignal_FloatKeyValue::set_descrip(const std::string& value) {
  _internal_set_descrip(value);
  // @@protoc_insertion_point(field_set:minieye.DvrSignal.FloatKeyValue.descrip)
}
inline std::string* DvrSignal_FloatKeyValue::mutable_descrip() {
  // @@protoc_insertion_point(field_mutable:minieye.DvrSignal.FloatKeyValue.descrip)
  return _internal_mutable_descrip();
}
inline const std::string& DvrSignal_FloatKeyValue::_internal_descrip() const {
  return descrip_.Get();
}
inline void DvrSignal_FloatKeyValue::_internal_set_descrip(const std::string& value) {
  
  descrip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DvrSignal_FloatKeyValue::set_descrip(std::string&& value) {
  
  descrip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minieye.DvrSignal.FloatKeyValue.descrip)
}
inline void DvrSignal_FloatKeyValue::set_descrip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descrip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minieye.DvrSignal.FloatKeyValue.descrip)
}
inline void DvrSignal_FloatKeyValue::set_descrip(const char* value,
    size_t size) {
  
  descrip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minieye.DvrSignal.FloatKeyValue.descrip)
}
inline std::string* DvrSignal_FloatKeyValue::_internal_mutable_descrip() {
  
  return descrip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DvrSignal_FloatKeyValue::release_descrip() {
  // @@protoc_insertion_point(field_release:minieye.DvrSignal.FloatKeyValue.descrip)
  return descrip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DvrSignal_FloatKeyValue::set_allocated_descrip(std::string* descrip) {
  if (descrip != nullptr) {
    
  } else {
    
  }
  descrip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descrip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minieye.DvrSignal.FloatKeyValue.descrip)
}
inline std::string* DvrSignal_FloatKeyValue::unsafe_arena_release_descrip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minieye.DvrSignal.FloatKeyValue.descrip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return descrip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DvrSignal_FloatKeyValue::unsafe_arena_set_allocated_descrip(
    std::string* descrip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (descrip != nullptr) {
    
  } else {
    
  }
  descrip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      descrip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.DvrSignal.FloatKeyValue.descrip)
}

// -------------------------------------------------------------------

// DvrSignal_DoubleKeyValue

// string name = 1;
inline void DvrSignal_DoubleKeyValue::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DvrSignal_DoubleKeyValue::name() const {
  // @@protoc_insertion_point(field_get:minieye.DvrSignal.DoubleKeyValue.name)
  return _internal_name();
}
inline void DvrSignal_DoubleKeyValue::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:minieye.DvrSignal.DoubleKeyValue.name)
}
inline std::string* DvrSignal_DoubleKeyValue::mutable_name() {
  // @@protoc_insertion_point(field_mutable:minieye.DvrSignal.DoubleKeyValue.name)
  return _internal_mutable_name();
}
inline const std::string& DvrSignal_DoubleKeyValue::_internal_name() const {
  return name_.Get();
}
inline void DvrSignal_DoubleKeyValue::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DvrSignal_DoubleKeyValue::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minieye.DvrSignal.DoubleKeyValue.name)
}
inline void DvrSignal_DoubleKeyValue::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minieye.DvrSignal.DoubleKeyValue.name)
}
inline void DvrSignal_DoubleKeyValue::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minieye.DvrSignal.DoubleKeyValue.name)
}
inline std::string* DvrSignal_DoubleKeyValue::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DvrSignal_DoubleKeyValue::release_name() {
  // @@protoc_insertion_point(field_release:minieye.DvrSignal.DoubleKeyValue.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DvrSignal_DoubleKeyValue::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minieye.DvrSignal.DoubleKeyValue.name)
}
inline std::string* DvrSignal_DoubleKeyValue::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minieye.DvrSignal.DoubleKeyValue.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DvrSignal_DoubleKeyValue::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.DvrSignal.DoubleKeyValue.name)
}

// double value = 2;
inline void DvrSignal_DoubleKeyValue::clear_value() {
  value_ = 0;
}
inline double DvrSignal_DoubleKeyValue::_internal_value() const {
  return value_;
}
inline double DvrSignal_DoubleKeyValue::value() const {
  // @@protoc_insertion_point(field_get:minieye.DvrSignal.DoubleKeyValue.value)
  return _internal_value();
}
inline void DvrSignal_DoubleKeyValue::_internal_set_value(double value) {
  
  value_ = value;
}
inline void DvrSignal_DoubleKeyValue::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:minieye.DvrSignal.DoubleKeyValue.value)
}

// string descrip = 3;
inline void DvrSignal_DoubleKeyValue::clear_descrip() {
  descrip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DvrSignal_DoubleKeyValue::descrip() const {
  // @@protoc_insertion_point(field_get:minieye.DvrSignal.DoubleKeyValue.descrip)
  return _internal_descrip();
}
inline void DvrSignal_DoubleKeyValue::set_descrip(const std::string& value) {
  _internal_set_descrip(value);
  // @@protoc_insertion_point(field_set:minieye.DvrSignal.DoubleKeyValue.descrip)
}
inline std::string* DvrSignal_DoubleKeyValue::mutable_descrip() {
  // @@protoc_insertion_point(field_mutable:minieye.DvrSignal.DoubleKeyValue.descrip)
  return _internal_mutable_descrip();
}
inline const std::string& DvrSignal_DoubleKeyValue::_internal_descrip() const {
  return descrip_.Get();
}
inline void DvrSignal_DoubleKeyValue::_internal_set_descrip(const std::string& value) {
  
  descrip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DvrSignal_DoubleKeyValue::set_descrip(std::string&& value) {
  
  descrip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minieye.DvrSignal.DoubleKeyValue.descrip)
}
inline void DvrSignal_DoubleKeyValue::set_descrip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descrip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minieye.DvrSignal.DoubleKeyValue.descrip)
}
inline void DvrSignal_DoubleKeyValue::set_descrip(const char* value,
    size_t size) {
  
  descrip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minieye.DvrSignal.DoubleKeyValue.descrip)
}
inline std::string* DvrSignal_DoubleKeyValue::_internal_mutable_descrip() {
  
  return descrip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DvrSignal_DoubleKeyValue::release_descrip() {
  // @@protoc_insertion_point(field_release:minieye.DvrSignal.DoubleKeyValue.descrip)
  return descrip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DvrSignal_DoubleKeyValue::set_allocated_descrip(std::string* descrip) {
  if (descrip != nullptr) {
    
  } else {
    
  }
  descrip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descrip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minieye.DvrSignal.DoubleKeyValue.descrip)
}
inline std::string* DvrSignal_DoubleKeyValue::unsafe_arena_release_descrip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minieye.DvrSignal.DoubleKeyValue.descrip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return descrip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DvrSignal_DoubleKeyValue::unsafe_arena_set_allocated_descrip(
    std::string* descrip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (descrip != nullptr) {
    
  } else {
    
  }
  descrip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      descrip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.DvrSignal.DoubleKeyValue.descrip)
}

// -------------------------------------------------------------------

// DvrSignal

// repeated .minieye.DvrSignal.FloatKeyValue float_value_list = 1;
inline int DvrSignal::_internal_float_value_list_size() const {
  return float_value_list_.size();
}
inline int DvrSignal::float_value_list_size() const {
  return _internal_float_value_list_size();
}
inline void DvrSignal::clear_float_value_list() {
  float_value_list_.Clear();
}
inline ::minieye::DvrSignal_FloatKeyValue* DvrSignal::mutable_float_value_list(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.DvrSignal.float_value_list)
  return float_value_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::DvrSignal_FloatKeyValue >*
DvrSignal::mutable_float_value_list() {
  // @@protoc_insertion_point(field_mutable_list:minieye.DvrSignal.float_value_list)
  return &float_value_list_;
}
inline const ::minieye::DvrSignal_FloatKeyValue& DvrSignal::_internal_float_value_list(int index) const {
  return float_value_list_.Get(index);
}
inline const ::minieye::DvrSignal_FloatKeyValue& DvrSignal::float_value_list(int index) const {
  // @@protoc_insertion_point(field_get:minieye.DvrSignal.float_value_list)
  return _internal_float_value_list(index);
}
inline ::minieye::DvrSignal_FloatKeyValue* DvrSignal::_internal_add_float_value_list() {
  return float_value_list_.Add();
}
inline ::minieye::DvrSignal_FloatKeyValue* DvrSignal::add_float_value_list() {
  // @@protoc_insertion_point(field_add:minieye.DvrSignal.float_value_list)
  return _internal_add_float_value_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::DvrSignal_FloatKeyValue >&
DvrSignal::float_value_list() const {
  // @@protoc_insertion_point(field_list:minieye.DvrSignal.float_value_list)
  return float_value_list_;
}

// repeated .minieye.DvrSignal.DoubleKeyValue double_value_list = 2;
inline int DvrSignal::_internal_double_value_list_size() const {
  return double_value_list_.size();
}
inline int DvrSignal::double_value_list_size() const {
  return _internal_double_value_list_size();
}
inline void DvrSignal::clear_double_value_list() {
  double_value_list_.Clear();
}
inline ::minieye::DvrSignal_DoubleKeyValue* DvrSignal::mutable_double_value_list(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.DvrSignal.double_value_list)
  return double_value_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::DvrSignal_DoubleKeyValue >*
DvrSignal::mutable_double_value_list() {
  // @@protoc_insertion_point(field_mutable_list:minieye.DvrSignal.double_value_list)
  return &double_value_list_;
}
inline const ::minieye::DvrSignal_DoubleKeyValue& DvrSignal::_internal_double_value_list(int index) const {
  return double_value_list_.Get(index);
}
inline const ::minieye::DvrSignal_DoubleKeyValue& DvrSignal::double_value_list(int index) const {
  // @@protoc_insertion_point(field_get:minieye.DvrSignal.double_value_list)
  return _internal_double_value_list(index);
}
inline ::minieye::DvrSignal_DoubleKeyValue* DvrSignal::_internal_add_double_value_list() {
  return double_value_list_.Add();
}
inline ::minieye::DvrSignal_DoubleKeyValue* DvrSignal::add_double_value_list() {
  // @@protoc_insertion_point(field_add:minieye.DvrSignal.double_value_list)
  return _internal_add_double_value_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::DvrSignal_DoubleKeyValue >&
DvrSignal::double_value_list() const {
  // @@protoc_insertion_point(field_list:minieye.DvrSignal.double_value_list)
  return double_value_list_;
}

// uint64 timestamp = 3;
inline void DvrSignal::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DvrSignal::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DvrSignal::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.DvrSignal.timestamp)
  return _internal_timestamp();
}
inline void DvrSignal::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void DvrSignal::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.DvrSignal.timestamp)
}

// uint64 tick = 4;
inline void DvrSignal::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DvrSignal::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DvrSignal::tick() const {
  // @@protoc_insertion_point(field_get:minieye.DvrSignal.tick)
  return _internal_tick();
}
inline void DvrSignal::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void DvrSignal::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.DvrSignal.tick)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dvr_2eproto
