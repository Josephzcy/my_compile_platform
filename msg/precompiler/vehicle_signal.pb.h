// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_signal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicle_5fsignal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicle_5fsignal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_5fsignal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_5fsignal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fsignal_2eproto;
namespace minieye {
class AutoCalibRsp;
class AutoCalibRspDefaultTypeInternal;
extern AutoCalibRspDefaultTypeInternal _AutoCalibRsp_default_instance_;
class AutoCalibSigDetail;
class AutoCalibSigDetailDefaultTypeInternal;
extern AutoCalibSigDetailDefaultTypeInternal _AutoCalibSigDetail_default_instance_;
class CommandSignal;
class CommandSignalDefaultTypeInternal;
extern CommandSignalDefaultTypeInternal _CommandSignal_default_instance_;
class ObjectAlgDiagnoseDetail;
class ObjectAlgDiagnoseDetailDefaultTypeInternal;
extern ObjectAlgDiagnoseDetailDefaultTypeInternal _ObjectAlgDiagnoseDetail_default_instance_;
class OfflineCalibRsp;
class OfflineCalibRspDefaultTypeInternal;
extern OfflineCalibRspDefaultTypeInternal _OfflineCalibRsp_default_instance_;
class OfflineCalibSigDetail;
class OfflineCalibSigDetailDefaultTypeInternal;
extern OfflineCalibSigDetailDefaultTypeInternal _OfflineCalibSigDetail_default_instance_;
class SensitivitySigDetail;
class SensitivitySigDetailDefaultTypeInternal;
extern SensitivitySigDetailDefaultTypeInternal _SensitivitySigDetail_default_instance_;
class SwitchSigDetail;
class SwitchSigDetailDefaultTypeInternal;
extern SwitchSigDetailDefaultTypeInternal _SwitchSigDetail_default_instance_;
class VehicleSignal;
class VehicleSignalDefaultTypeInternal;
extern VehicleSignalDefaultTypeInternal _VehicleSignal_default_instance_;
class VehicleSignal_SignalsEntry_DoNotUse;
class VehicleSignal_SignalsEntry_DoNotUseDefaultTypeInternal;
extern VehicleSignal_SignalsEntry_DoNotUseDefaultTypeInternal _VehicleSignal_SignalsEntry_DoNotUse_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::AutoCalibRsp* Arena::CreateMaybeMessage<::minieye::AutoCalibRsp>(Arena*);
template<> ::minieye::AutoCalibSigDetail* Arena::CreateMaybeMessage<::minieye::AutoCalibSigDetail>(Arena*);
template<> ::minieye::CommandSignal* Arena::CreateMaybeMessage<::minieye::CommandSignal>(Arena*);
template<> ::minieye::ObjectAlgDiagnoseDetail* Arena::CreateMaybeMessage<::minieye::ObjectAlgDiagnoseDetail>(Arena*);
template<> ::minieye::OfflineCalibRsp* Arena::CreateMaybeMessage<::minieye::OfflineCalibRsp>(Arena*);
template<> ::minieye::OfflineCalibSigDetail* Arena::CreateMaybeMessage<::minieye::OfflineCalibSigDetail>(Arena*);
template<> ::minieye::SensitivitySigDetail* Arena::CreateMaybeMessage<::minieye::SensitivitySigDetail>(Arena*);
template<> ::minieye::SwitchSigDetail* Arena::CreateMaybeMessage<::minieye::SwitchSigDetail>(Arena*);
template<> ::minieye::VehicleSignal* Arena::CreateMaybeMessage<::minieye::VehicleSignal>(Arena*);
template<> ::minieye::VehicleSignal_SignalsEntry_DoNotUse* Arena::CreateMaybeMessage<::minieye::VehicleSignal_SignalsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

enum VehicleSignal_SignalType : int {
  VehicleSignal_SignalType_kCanSpeed = 0,
  VehicleSignal_SignalType_kTurnLamp = 1,
  VehicleSignal_SignalType_kHazardWarningLamp = 2,
  VehicleSignal_SignalType_kBraking = 3,
  VehicleSignal_SignalType_kAccelerator = 4,
  VehicleSignal_SignalType_kSteeringWheelAngle = 5,
  VehicleSignal_SignalType_kSteeringWheelAngleRate = 6,
  VehicleSignal_SignalType_kFrontWiper = 7,
  VehicleSignal_SignalType_kDriveMode = 8,
  VehicleSignal_SignalType_kMovingDir = 9,
  VehicleSignal_SignalType_kYawRate = 10,
  VehicleSignal_SignalType_kGearMode = 11,
  VehicleSignal_SignalType_kABSFullyOperational = 12,
  VehicleSignal_SignalType_kBrakPedalPosition = 13,
  VehicleSignal_SignalType_kLongiAcceleration = 14,
  VehicleSignal_SignalType_kLateralAcceleration = 15,
  VehicleSignal_SignalType_kACUCollisionDetected = 16,
  VehicleSignal_SignalType_kAutoLightSwitch = 17,
  VehicleSignal_SignalType_kLowBeanStatus = 18,
  VehicleSignal_SignalType_kESCStatus = 19,
  VehicleSignal_SignalType_kFrontWiperHighSt = 20,
  VehicleSignal_SignalType_kHBeanStatus = 21,
  VehicleSignal_SignalType_kTcsActiveSt = 22,
  VehicleSignal_SignalType_kVdcActiveSt = 23,
  VehicleSignal_SignalType_kEngSpd = 24,
  VehicleSignal_SignalType_kRLWheelSpd = 25,
  VehicleSignal_SignalType_kRLWheelRotate = 26,
  VehicleSignal_SignalType_kRRWheelSpd = 27,
  VehicleSignal_SignalType_kRRWheelRotate = 28,
  VehicleSignal_SignalType_kFLWheelSpd = 29,
  VehicleSignal_SignalType_kFLWheelRotate = 30,
  VehicleSignal_SignalType_kFRWheelSpd = 31,
  VehicleSignal_SignalType_kFRWheelRotate = 32,
  VehicleSignal_SignalType_kStrngWhlTorq = 33,
  VehicleSignal_SignalType_kSteeringModeSt = 34,
  VehicleSignal_SignalType_kHandsOffdetSt = 35,
  VehicleSignal_SignalType_kEpsLkaCtrlSt = 36,
  VehicleSignal_SignalType_kAccCtrlSt = 37,
  VehicleSignal_SignalType_kAccTargetSpd = 38,
  VehicleSignal_SignalType_kLkaTorqueReq = 39,
  VehicleSignal_SignalType_kLkaTorqueReqSt = 40,
  VehicleSignal_SignalType_kEmsEngTorq = 41,
  VehicleSignal_SignalType_kFrontLeftFogLightStatus = 42,
  VehicleSignal_SignalType_kFrontRightFogLightStatus = 43,
  VehicleSignal_SignalType_kRearFogLightStatus = 44,
  VehicleSignal_SignalType_kRLWheelPulseCounter = 45,
  VehicleSignal_SignalType_kRRWheelPulseCounter = 46,
  VehicleSignal_SignalType_kFLWheelPulseCounter = 47,
  VehicleSignal_SignalType_kFRWheelPulseCounter = 48,
  VehicleSignal_SignalType_kDriverDoorSt = 49,
  VehicleSignal_SignalType_kPassengerDoorSt = 50,
  VehicleSignal_SignalType_kRHRDoorSt = 51,
  VehicleSignal_SignalType_kLHRDoorSt = 52,
  VehicleSignal_SignalType_kDriverSeatBeltSw = 53,
  VehicleSignal_SignalType_kAutoParkingActive = 54,
  VehicleSignal_SignalType_kCarEngineHood = 55,
  VehicleSignal_SignalType_kCarBackCompartment = 56,
  VehicleSignal_SignalType_kCarWindowLeftFront = 57,
  VehicleSignal_SignalType_kCarWindowRightFront = 58,
  VehicleSignal_SignalType_kCarWindowLeftRear = 59,
  VehicleSignal_SignalType_kCarWindowRightRear = 60,
  VehicleSignal_SignalType_VehicleSignal_SignalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VehicleSignal_SignalType_VehicleSignal_SignalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VehicleSignal_SignalType_IsValid(int value);
constexpr VehicleSignal_SignalType VehicleSignal_SignalType_SignalType_MIN = VehicleSignal_SignalType_kCanSpeed;
constexpr VehicleSignal_SignalType VehicleSignal_SignalType_SignalType_MAX = VehicleSignal_SignalType_kCarWindowRightRear;
constexpr int VehicleSignal_SignalType_SignalType_ARRAYSIZE = VehicleSignal_SignalType_SignalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleSignal_SignalType_descriptor();
template<typename T>
inline const std::string& VehicleSignal_SignalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleSignal_SignalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleSignal_SignalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleSignal_SignalType_descriptor(), enum_t_value);
}
inline bool VehicleSignal_SignalType_Parse(
    const std::string& name, VehicleSignal_SignalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleSignal_SignalType>(
    VehicleSignal_SignalType_descriptor(), name, value);
}
enum CommandSignal_SignalType : int {
  CommandSignal_SignalType_kUnknown = 0,
  CommandSignal_SignalType_kStartAutocalib = 1,
  CommandSignal_SignalType_kStartOfflineCalibrate = 2,
  CommandSignal_SignalType_kModLdwSensitivity = 3,
  CommandSignal_SignalType_kModFcwSensitivity = 4,
  CommandSignal_SignalType_kModTsrSensitivity = 5,
  CommandSignal_SignalType_kModPCWSensitivity = 6,
  CommandSignal_SignalType_kFCWSwitch = 7,
  CommandSignal_SignalType_kFVSASwitch = 8,
  CommandSignal_SignalType_kHMWSwitch = 9,
  CommandSignal_SignalType_kIHCSwitch = 10,
  CommandSignal_SignalType_kLDWSwitch = 11,
  CommandSignal_SignalType_kSroverspdwarnSwitch = 12,
  CommandSignal_SignalType_kTSRSwitch = 13,
  CommandSignal_SignalType_kPCWSwitch = 14,
  CommandSignal_SignalType_kLKASwitch = 15,
  CommandSignal_SignalType_kESCSwitch = 16,
  CommandSignal_SignalType_kStopAutocalib = 17,
  CommandSignal_SignalType_kStopOfflineCalib = 18,
  CommandSignal_SignalType_kSAGSwitch = 19,
  CommandSignal_SignalType_kACCSwitch = 20,
  CommandSignal_SignalType_kTJAICASwitch = 21,
  CommandSignal_SignalType_kHMASwitch = 22,
  CommandSignal_SignalType_kObjectAlgDiagnoseSwitch = 23,
  CommandSignal_SignalType_CommandSignal_SignalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommandSignal_SignalType_CommandSignal_SignalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommandSignal_SignalType_IsValid(int value);
constexpr CommandSignal_SignalType CommandSignal_SignalType_SignalType_MIN = CommandSignal_SignalType_kUnknown;
constexpr CommandSignal_SignalType CommandSignal_SignalType_SignalType_MAX = CommandSignal_SignalType_kObjectAlgDiagnoseSwitch;
constexpr int CommandSignal_SignalType_SignalType_ARRAYSIZE = CommandSignal_SignalType_SignalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandSignal_SignalType_descriptor();
template<typename T>
inline const std::string& CommandSignal_SignalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandSignal_SignalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandSignal_SignalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandSignal_SignalType_descriptor(), enum_t_value);
}
inline bool CommandSignal_SignalType_Parse(
    const std::string& name, CommandSignal_SignalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandSignal_SignalType>(
    CommandSignal_SignalType_descriptor(), name, value);
}
// ===================================================================

class VehicleSignal_SignalsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VehicleSignal_SignalsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VehicleSignal_SignalsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  VehicleSignal_SignalsEntry_DoNotUse();
  VehicleSignal_SignalsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VehicleSignal_SignalsEntry_DoNotUse& other);
  static const VehicleSignal_SignalsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VehicleSignal_SignalsEntry_DoNotUse*>(&_VehicleSignal_SignalsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fsignal_2eproto);
    return ::descriptor_table_vehicle_5fsignal_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class VehicleSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.VehicleSignal) */ {
 public:
  inline VehicleSignal() : VehicleSignal(nullptr) {};
  virtual ~VehicleSignal();

  VehicleSignal(const VehicleSignal& from);
  VehicleSignal(VehicleSignal&& from) noexcept
    : VehicleSignal() {
    *this = ::std::move(from);
  }

  inline VehicleSignal& operator=(const VehicleSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleSignal& operator=(VehicleSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleSignal* internal_default_instance() {
    return reinterpret_cast<const VehicleSignal*>(
               &_VehicleSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VehicleSignal& a, VehicleSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleSignal* New() const final {
    return CreateMaybeMessage<VehicleSignal>(nullptr);
  }

  VehicleSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleSignal& from);
  void MergeFrom(const VehicleSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.VehicleSignal";
  }
  protected:
  explicit VehicleSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fsignal_2eproto);
    return ::descriptor_table_vehicle_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef VehicleSignal_SignalType SignalType;
  static constexpr SignalType kCanSpeed =
    VehicleSignal_SignalType_kCanSpeed;
  static constexpr SignalType kTurnLamp =
    VehicleSignal_SignalType_kTurnLamp;
  static constexpr SignalType kHazardWarningLamp =
    VehicleSignal_SignalType_kHazardWarningLamp;
  static constexpr SignalType kBraking =
    VehicleSignal_SignalType_kBraking;
  static constexpr SignalType kAccelerator =
    VehicleSignal_SignalType_kAccelerator;
  static constexpr SignalType kSteeringWheelAngle =
    VehicleSignal_SignalType_kSteeringWheelAngle;
  static constexpr SignalType kSteeringWheelAngleRate =
    VehicleSignal_SignalType_kSteeringWheelAngleRate;
  static constexpr SignalType kFrontWiper =
    VehicleSignal_SignalType_kFrontWiper;
  static constexpr SignalType kDriveMode =
    VehicleSignal_SignalType_kDriveMode;
  static constexpr SignalType kMovingDir =
    VehicleSignal_SignalType_kMovingDir;
  static constexpr SignalType kYawRate =
    VehicleSignal_SignalType_kYawRate;
  static constexpr SignalType kGearMode =
    VehicleSignal_SignalType_kGearMode;
  static constexpr SignalType kABSFullyOperational =
    VehicleSignal_SignalType_kABSFullyOperational;
  static constexpr SignalType kBrakPedalPosition =
    VehicleSignal_SignalType_kBrakPedalPosition;
  static constexpr SignalType kLongiAcceleration =
    VehicleSignal_SignalType_kLongiAcceleration;
  static constexpr SignalType kLateralAcceleration =
    VehicleSignal_SignalType_kLateralAcceleration;
  static constexpr SignalType kACUCollisionDetected =
    VehicleSignal_SignalType_kACUCollisionDetected;
  static constexpr SignalType kAutoLightSwitch =
    VehicleSignal_SignalType_kAutoLightSwitch;
  static constexpr SignalType kLowBeanStatus =
    VehicleSignal_SignalType_kLowBeanStatus;
  static constexpr SignalType kESCStatus =
    VehicleSignal_SignalType_kESCStatus;
  static constexpr SignalType kFrontWiperHighSt =
    VehicleSignal_SignalType_kFrontWiperHighSt;
  static constexpr SignalType kHBeanStatus =
    VehicleSignal_SignalType_kHBeanStatus;
  static constexpr SignalType kTcsActiveSt =
    VehicleSignal_SignalType_kTcsActiveSt;
  static constexpr SignalType kVdcActiveSt =
    VehicleSignal_SignalType_kVdcActiveSt;
  static constexpr SignalType kEngSpd =
    VehicleSignal_SignalType_kEngSpd;
  static constexpr SignalType kRLWheelSpd =
    VehicleSignal_SignalType_kRLWheelSpd;
  static constexpr SignalType kRLWheelRotate =
    VehicleSignal_SignalType_kRLWheelRotate;
  static constexpr SignalType kRRWheelSpd =
    VehicleSignal_SignalType_kRRWheelSpd;
  static constexpr SignalType kRRWheelRotate =
    VehicleSignal_SignalType_kRRWheelRotate;
  static constexpr SignalType kFLWheelSpd =
    VehicleSignal_SignalType_kFLWheelSpd;
  static constexpr SignalType kFLWheelRotate =
    VehicleSignal_SignalType_kFLWheelRotate;
  static constexpr SignalType kFRWheelSpd =
    VehicleSignal_SignalType_kFRWheelSpd;
  static constexpr SignalType kFRWheelRotate =
    VehicleSignal_SignalType_kFRWheelRotate;
  static constexpr SignalType kStrngWhlTorq =
    VehicleSignal_SignalType_kStrngWhlTorq;
  static constexpr SignalType kSteeringModeSt =
    VehicleSignal_SignalType_kSteeringModeSt;
  static constexpr SignalType kHandsOffdetSt =
    VehicleSignal_SignalType_kHandsOffdetSt;
  static constexpr SignalType kEpsLkaCtrlSt =
    VehicleSignal_SignalType_kEpsLkaCtrlSt;
  static constexpr SignalType kAccCtrlSt =
    VehicleSignal_SignalType_kAccCtrlSt;
  static constexpr SignalType kAccTargetSpd =
    VehicleSignal_SignalType_kAccTargetSpd;
  static constexpr SignalType kLkaTorqueReq =
    VehicleSignal_SignalType_kLkaTorqueReq;
  static constexpr SignalType kLkaTorqueReqSt =
    VehicleSignal_SignalType_kLkaTorqueReqSt;
  static constexpr SignalType kEmsEngTorq =
    VehicleSignal_SignalType_kEmsEngTorq;
  static constexpr SignalType kFrontLeftFogLightStatus =
    VehicleSignal_SignalType_kFrontLeftFogLightStatus;
  static constexpr SignalType kFrontRightFogLightStatus =
    VehicleSignal_SignalType_kFrontRightFogLightStatus;
  static constexpr SignalType kRearFogLightStatus =
    VehicleSignal_SignalType_kRearFogLightStatus;
  static constexpr SignalType kRLWheelPulseCounter =
    VehicleSignal_SignalType_kRLWheelPulseCounter;
  static constexpr SignalType kRRWheelPulseCounter =
    VehicleSignal_SignalType_kRRWheelPulseCounter;
  static constexpr SignalType kFLWheelPulseCounter =
    VehicleSignal_SignalType_kFLWheelPulseCounter;
  static constexpr SignalType kFRWheelPulseCounter =
    VehicleSignal_SignalType_kFRWheelPulseCounter;
  static constexpr SignalType kDriverDoorSt =
    VehicleSignal_SignalType_kDriverDoorSt;
  static constexpr SignalType kPassengerDoorSt =
    VehicleSignal_SignalType_kPassengerDoorSt;
  static constexpr SignalType kRHRDoorSt =
    VehicleSignal_SignalType_kRHRDoorSt;
  static constexpr SignalType kLHRDoorSt =
    VehicleSignal_SignalType_kLHRDoorSt;
  static constexpr SignalType kDriverSeatBeltSw =
    VehicleSignal_SignalType_kDriverSeatBeltSw;
  static constexpr SignalType kAutoParkingActive =
    VehicleSignal_SignalType_kAutoParkingActive;
  static constexpr SignalType kCarEngineHood =
    VehicleSignal_SignalType_kCarEngineHood;
  static constexpr SignalType kCarBackCompartment =
    VehicleSignal_SignalType_kCarBackCompartment;
  static constexpr SignalType kCarWindowLeftFront =
    VehicleSignal_SignalType_kCarWindowLeftFront;
  static constexpr SignalType kCarWindowRightFront =
    VehicleSignal_SignalType_kCarWindowRightFront;
  static constexpr SignalType kCarWindowLeftRear =
    VehicleSignal_SignalType_kCarWindowLeftRear;
  static constexpr SignalType kCarWindowRightRear =
    VehicleSignal_SignalType_kCarWindowRightRear;
  static inline bool SignalType_IsValid(int value) {
    return VehicleSignal_SignalType_IsValid(value);
  }
  static constexpr SignalType SignalType_MIN =
    VehicleSignal_SignalType_SignalType_MIN;
  static constexpr SignalType SignalType_MAX =
    VehicleSignal_SignalType_SignalType_MAX;
  static constexpr int SignalType_ARRAYSIZE =
    VehicleSignal_SignalType_SignalType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalType_descriptor() {
    return VehicleSignal_SignalType_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalType_Name.");
    return VehicleSignal_SignalType_Name(enum_t_value);
  }
  static inline bool SignalType_Parse(const std::string& name,
      SignalType* value) {
    return VehicleSignal_SignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignalsFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // map<int32, float> signals = 1;
  int signals_size() const;
  private:
  int _internal_signals_size() const;
  public:
  void clear_signals();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
      _internal_signals() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
      _internal_mutable_signals();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
      signals() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
      mutable_signals();

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.VehicleSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VehicleSignal_SignalsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > signals_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class CommandSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.CommandSignal) */ {
 public:
  inline CommandSignal() : CommandSignal(nullptr) {};
  virtual ~CommandSignal();

  CommandSignal(const CommandSignal& from);
  CommandSignal(CommandSignal&& from) noexcept
    : CommandSignal() {
    *this = ::std::move(from);
  }

  inline CommandSignal& operator=(const CommandSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSignal& operator=(CommandSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandSignal* internal_default_instance() {
    return reinterpret_cast<const CommandSignal*>(
               &_CommandSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandSignal& a, CommandSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSignal* New() const final {
    return CreateMaybeMessage<CommandSignal>(nullptr);
  }

  CommandSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSignal& from);
  void MergeFrom(const CommandSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.CommandSignal";
  }
  protected:
  explicit CommandSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fsignal_2eproto);
    return ::descriptor_table_vehicle_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CommandSignal_SignalType SignalType;
  static constexpr SignalType kUnknown =
    CommandSignal_SignalType_kUnknown;
  static constexpr SignalType kStartAutocalib =
    CommandSignal_SignalType_kStartAutocalib;
  static constexpr SignalType kStartOfflineCalibrate =
    CommandSignal_SignalType_kStartOfflineCalibrate;
  static constexpr SignalType kModLdwSensitivity =
    CommandSignal_SignalType_kModLdwSensitivity;
  static constexpr SignalType kModFcwSensitivity =
    CommandSignal_SignalType_kModFcwSensitivity;
  static constexpr SignalType kModTsrSensitivity =
    CommandSignal_SignalType_kModTsrSensitivity;
  static constexpr SignalType kModPCWSensitivity =
    CommandSignal_SignalType_kModPCWSensitivity;
  static constexpr SignalType kFCWSwitch =
    CommandSignal_SignalType_kFCWSwitch;
  static constexpr SignalType kFVSASwitch =
    CommandSignal_SignalType_kFVSASwitch;
  static constexpr SignalType kHMWSwitch =
    CommandSignal_SignalType_kHMWSwitch;
  static constexpr SignalType kIHCSwitch =
    CommandSignal_SignalType_kIHCSwitch;
  static constexpr SignalType kLDWSwitch =
    CommandSignal_SignalType_kLDWSwitch;
  static constexpr SignalType kSroverspdwarnSwitch =
    CommandSignal_SignalType_kSroverspdwarnSwitch;
  static constexpr SignalType kTSRSwitch =
    CommandSignal_SignalType_kTSRSwitch;
  static constexpr SignalType kPCWSwitch =
    CommandSignal_SignalType_kPCWSwitch;
  static constexpr SignalType kLKASwitch =
    CommandSignal_SignalType_kLKASwitch;
  static constexpr SignalType kESCSwitch =
    CommandSignal_SignalType_kESCSwitch;
  static constexpr SignalType kStopAutocalib =
    CommandSignal_SignalType_kStopAutocalib;
  static constexpr SignalType kStopOfflineCalib =
    CommandSignal_SignalType_kStopOfflineCalib;
  static constexpr SignalType kSAGSwitch =
    CommandSignal_SignalType_kSAGSwitch;
  static constexpr SignalType kACCSwitch =
    CommandSignal_SignalType_kACCSwitch;
  static constexpr SignalType kTJAICASwitch =
    CommandSignal_SignalType_kTJAICASwitch;
  static constexpr SignalType kHMASwitch =
    CommandSignal_SignalType_kHMASwitch;
  static constexpr SignalType kObjectAlgDiagnoseSwitch =
    CommandSignal_SignalType_kObjectAlgDiagnoseSwitch;
  static inline bool SignalType_IsValid(int value) {
    return CommandSignal_SignalType_IsValid(value);
  }
  static constexpr SignalType SignalType_MIN =
    CommandSignal_SignalType_SignalType_MIN;
  static constexpr SignalType SignalType_MAX =
    CommandSignal_SignalType_SignalType_MAX;
  static constexpr int SignalType_ARRAYSIZE =
    CommandSignal_SignalType_SignalType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalType_descriptor() {
    return CommandSignal_SignalType_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalType_Name.");
    return CommandSignal_SignalType_Name(enum_t_value);
  }
  static inline bool SignalType_Parse(const std::string& name,
      SignalType* value) {
    return CommandSignal_SignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 2,
    kSignalFieldNumber = 1,
  };
  // .google.protobuf.Any details = 2;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const PROTOBUF_NAMESPACE_ID::Any& details() const;
  PROTOBUF_NAMESPACE_ID::Any* release_details();
  PROTOBUF_NAMESPACE_ID::Any* mutable_details();
  void set_allocated_details(PROTOBUF_NAMESPACE_ID::Any* details);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_details() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      PROTOBUF_NAMESPACE_ID::Any* details);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_details();

  // .minieye.CommandSignal.SignalType signal = 1;
  void clear_signal();
  ::minieye::CommandSignal_SignalType signal() const;
  void set_signal(::minieye::CommandSignal_SignalType value);
  private:
  ::minieye::CommandSignal_SignalType _internal_signal() const;
  void _internal_set_signal(::minieye::CommandSignal_SignalType value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.CommandSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* details_;
  int signal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class OfflineCalibSigDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.OfflineCalibSigDetail) */ {
 public:
  inline OfflineCalibSigDetail() : OfflineCalibSigDetail(nullptr) {};
  virtual ~OfflineCalibSigDetail();

  OfflineCalibSigDetail(const OfflineCalibSigDetail& from);
  OfflineCalibSigDetail(OfflineCalibSigDetail&& from) noexcept
    : OfflineCalibSigDetail() {
    *this = ::std::move(from);
  }

  inline OfflineCalibSigDetail& operator=(const OfflineCalibSigDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineCalibSigDetail& operator=(OfflineCalibSigDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OfflineCalibSigDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OfflineCalibSigDetail* internal_default_instance() {
    return reinterpret_cast<const OfflineCalibSigDetail*>(
               &_OfflineCalibSigDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OfflineCalibSigDetail& a, OfflineCalibSigDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(OfflineCalibSigDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineCalibSigDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OfflineCalibSigDetail* New() const final {
    return CreateMaybeMessage<OfflineCalibSigDetail>(nullptr);
  }

  OfflineCalibSigDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OfflineCalibSigDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OfflineCalibSigDetail& from);
  void MergeFrom(const OfflineCalibSigDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfflineCalibSigDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.OfflineCalibSigDetail";
  }
  protected:
  explicit OfflineCalibSigDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fsignal_2eproto);
    return ::descriptor_table_vehicle_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraIdFieldNumber = 1,
    kMarkerTypeFieldNumber = 2,
    kCameraPitchFieldNumber = 3,
    kCameraYawFieldNumber = 4,
    kCameraRollFieldNumber = 5,
    kCameraHeightFieldNumber = 6,
    kLeftDistToCameraFieldNumber = 7,
    kRightDistToCameraFieldNumber = 8,
    kFrontWheelCameraDistFieldNumber = 9,
  };
  // int32 camera_id = 1;
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_camera_id() const;
  void _internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 marker_type = 2;
  void clear_marker_type();
  ::PROTOBUF_NAMESPACE_ID::int32 marker_type() const;
  void set_marker_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_marker_type() const;
  void _internal_set_marker_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double camera_pitch = 3;
  void clear_camera_pitch();
  double camera_pitch() const;
  void set_camera_pitch(double value);
  private:
  double _internal_camera_pitch() const;
  void _internal_set_camera_pitch(double value);
  public:

  // double camera_yaw = 4;
  void clear_camera_yaw();
  double camera_yaw() const;
  void set_camera_yaw(double value);
  private:
  double _internal_camera_yaw() const;
  void _internal_set_camera_yaw(double value);
  public:

  // double camera_roll = 5;
  void clear_camera_roll();
  double camera_roll() const;
  void set_camera_roll(double value);
  private:
  double _internal_camera_roll() const;
  void _internal_set_camera_roll(double value);
  public:

  // double camera_height = 6;
  void clear_camera_height();
  double camera_height() const;
  void set_camera_height(double value);
  private:
  double _internal_camera_height() const;
  void _internal_set_camera_height(double value);
  public:

  // double left_dist_to_camera = 7;
  void clear_left_dist_to_camera();
  double left_dist_to_camera() const;
  void set_left_dist_to_camera(double value);
  private:
  double _internal_left_dist_to_camera() const;
  void _internal_set_left_dist_to_camera(double value);
  public:

  // double right_dist_to_camera = 8;
  void clear_right_dist_to_camera();
  double right_dist_to_camera() const;
  void set_right_dist_to_camera(double value);
  private:
  double _internal_right_dist_to_camera() const;
  void _internal_set_right_dist_to_camera(double value);
  public:

  // double front_wheel_camera_dist = 9;
  void clear_front_wheel_camera_dist();
  double front_wheel_camera_dist() const;
  void set_front_wheel_camera_dist(double value);
  private:
  double _internal_front_wheel_camera_dist() const;
  void _internal_set_front_wheel_camera_dist(double value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.OfflineCalibSigDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 marker_type_;
  double camera_pitch_;
  double camera_yaw_;
  double camera_roll_;
  double camera_height_;
  double left_dist_to_camera_;
  double right_dist_to_camera_;
  double front_wheel_camera_dist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class OfflineCalibRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.OfflineCalibRsp) */ {
 public:
  inline OfflineCalibRsp() : OfflineCalibRsp(nullptr) {};
  virtual ~OfflineCalibRsp();

  OfflineCalibRsp(const OfflineCalibRsp& from);
  OfflineCalibRsp(OfflineCalibRsp&& from) noexcept
    : OfflineCalibRsp() {
    *this = ::std::move(from);
  }

  inline OfflineCalibRsp& operator=(const OfflineCalibRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineCalibRsp& operator=(OfflineCalibRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OfflineCalibRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OfflineCalibRsp* internal_default_instance() {
    return reinterpret_cast<const OfflineCalibRsp*>(
               &_OfflineCalibRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OfflineCalibRsp& a, OfflineCalibRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(OfflineCalibRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineCalibRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OfflineCalibRsp* New() const final {
    return CreateMaybeMessage<OfflineCalibRsp>(nullptr);
  }

  OfflineCalibRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OfflineCalibRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OfflineCalibRsp& from);
  void MergeFrom(const OfflineCalibRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfflineCalibRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.OfflineCalibRsp";
  }
  protected:
  explicit OfflineCalibRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fsignal_2eproto);
    return ::descriptor_table_vehicle_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraIdFieldNumber = 1,
    kStateFieldNumber = 2,
    kCameraPitchFieldNumber = 4,
    kCameraYawFieldNumber = 5,
    kCameraRollFieldNumber = 6,
    kCameraHeightFieldNumber = 7,
    kProcessFieldNumber = 8,
    kErrCodeFieldNumber = 3,
  };
  // int32 camera_id = 1;
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_camera_id() const;
  void _internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double camera_pitch = 4;
  void clear_camera_pitch();
  double camera_pitch() const;
  void set_camera_pitch(double value);
  private:
  double _internal_camera_pitch() const;
  void _internal_set_camera_pitch(double value);
  public:

  // double camera_yaw = 5;
  void clear_camera_yaw();
  double camera_yaw() const;
  void set_camera_yaw(double value);
  private:
  double _internal_camera_yaw() const;
  void _internal_set_camera_yaw(double value);
  public:

  // double camera_roll = 6;
  void clear_camera_roll();
  double camera_roll() const;
  void set_camera_roll(double value);
  private:
  double _internal_camera_roll() const;
  void _internal_set_camera_roll(double value);
  public:

  // double camera_height = 7;
  void clear_camera_height();
  double camera_height() const;
  void set_camera_height(double value);
  private:
  double _internal_camera_height() const;
  void _internal_set_camera_height(double value);
  public:

  // double process = 8;
  void clear_process();
  double process() const;
  void set_process(double value);
  private:
  double _internal_process() const;
  void _internal_set_process(double value);
  public:

  // int32 err_code = 3;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::int32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.OfflineCalibRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  double camera_pitch_;
  double camera_yaw_;
  double camera_roll_;
  double camera_height_;
  double process_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class AutoCalibSigDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.AutoCalibSigDetail) */ {
 public:
  inline AutoCalibSigDetail() : AutoCalibSigDetail(nullptr) {};
  virtual ~AutoCalibSigDetail();

  AutoCalibSigDetail(const AutoCalibSigDetail& from);
  AutoCalibSigDetail(AutoCalibSigDetail&& from) noexcept
    : AutoCalibSigDetail() {
    *this = ::std::move(from);
  }

  inline AutoCalibSigDetail& operator=(const AutoCalibSigDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoCalibSigDetail& operator=(AutoCalibSigDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoCalibSigDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoCalibSigDetail* internal_default_instance() {
    return reinterpret_cast<const AutoCalibSigDetail*>(
               &_AutoCalibSigDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AutoCalibSigDetail& a, AutoCalibSigDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoCalibSigDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoCalibSigDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoCalibSigDetail* New() const final {
    return CreateMaybeMessage<AutoCalibSigDetail>(nullptr);
  }

  AutoCalibSigDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoCalibSigDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoCalibSigDetail& from);
  void MergeFrom(const AutoCalibSigDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoCalibSigDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.AutoCalibSigDetail";
  }
  protected:
  explicit AutoCalibSigDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fsignal_2eproto);
    return ::descriptor_table_vehicle_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraHeightFieldNumber = 2,
    kLeftDistToCameraFieldNumber = 3,
    kRightDistToCameraFieldNumber = 4,
    kFrontWheelCameraDistFieldNumber = 5,
    kCameraIdFieldNumber = 1,
  };
  // double camera_height = 2;
  void clear_camera_height();
  double camera_height() const;
  void set_camera_height(double value);
  private:
  double _internal_camera_height() const;
  void _internal_set_camera_height(double value);
  public:

  // double left_dist_to_camera = 3;
  void clear_left_dist_to_camera();
  double left_dist_to_camera() const;
  void set_left_dist_to_camera(double value);
  private:
  double _internal_left_dist_to_camera() const;
  void _internal_set_left_dist_to_camera(double value);
  public:

  // double right_dist_to_camera = 4;
  void clear_right_dist_to_camera();
  double right_dist_to_camera() const;
  void set_right_dist_to_camera(double value);
  private:
  double _internal_right_dist_to_camera() const;
  void _internal_set_right_dist_to_camera(double value);
  public:

  // double front_wheel_camera_dist = 5;
  void clear_front_wheel_camera_dist();
  double front_wheel_camera_dist() const;
  void set_front_wheel_camera_dist(double value);
  private:
  double _internal_front_wheel_camera_dist() const;
  void _internal_set_front_wheel_camera_dist(double value);
  public:

  // int32 camera_id = 1;
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_camera_id() const;
  void _internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.AutoCalibSigDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double camera_height_;
  double left_dist_to_camera_;
  double right_dist_to_camera_;
  double front_wheel_camera_dist_;
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class AutoCalibRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.AutoCalibRsp) */ {
 public:
  inline AutoCalibRsp() : AutoCalibRsp(nullptr) {};
  virtual ~AutoCalibRsp();

  AutoCalibRsp(const AutoCalibRsp& from);
  AutoCalibRsp(AutoCalibRsp&& from) noexcept
    : AutoCalibRsp() {
    *this = ::std::move(from);
  }

  inline AutoCalibRsp& operator=(const AutoCalibRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoCalibRsp& operator=(AutoCalibRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoCalibRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoCalibRsp* internal_default_instance() {
    return reinterpret_cast<const AutoCalibRsp*>(
               &_AutoCalibRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AutoCalibRsp& a, AutoCalibRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoCalibRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoCalibRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoCalibRsp* New() const final {
    return CreateMaybeMessage<AutoCalibRsp>(nullptr);
  }

  AutoCalibRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoCalibRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoCalibRsp& from);
  void MergeFrom(const AutoCalibRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoCalibRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.AutoCalibRsp";
  }
  protected:
  explicit AutoCalibRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fsignal_2eproto);
    return ::descriptor_table_vehicle_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraIdFieldNumber = 1,
    kStateFieldNumber = 2,
    kCameraPitchFieldNumber = 4,
    kCameraYawFieldNumber = 5,
    kCameraRollFieldNumber = 6,
    kCameraHeightFieldNumber = 7,
    kProcessFieldNumber = 8,
    kErrCodeFieldNumber = 3,
  };
  // int32 camera_id = 1;
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_camera_id() const;
  void _internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double camera_pitch = 4;
  void clear_camera_pitch();
  double camera_pitch() const;
  void set_camera_pitch(double value);
  private:
  double _internal_camera_pitch() const;
  void _internal_set_camera_pitch(double value);
  public:

  // double camera_yaw = 5;
  void clear_camera_yaw();
  double camera_yaw() const;
  void set_camera_yaw(double value);
  private:
  double _internal_camera_yaw() const;
  void _internal_set_camera_yaw(double value);
  public:

  // double camera_roll = 6;
  void clear_camera_roll();
  double camera_roll() const;
  void set_camera_roll(double value);
  private:
  double _internal_camera_roll() const;
  void _internal_set_camera_roll(double value);
  public:

  // double camera_height = 7;
  void clear_camera_height();
  double camera_height() const;
  void set_camera_height(double value);
  private:
  double _internal_camera_height() const;
  void _internal_set_camera_height(double value);
  public:

  // double process = 8;
  void clear_process();
  double process() const;
  void set_process(double value);
  private:
  double _internal_process() const;
  void _internal_set_process(double value);
  public:

  // int32 err_code = 3;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::int32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.AutoCalibRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  double camera_pitch_;
  double camera_yaw_;
  double camera_roll_;
  double camera_height_;
  double process_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class SensitivitySigDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.SensitivitySigDetail) */ {
 public:
  inline SensitivitySigDetail() : SensitivitySigDetail(nullptr) {};
  virtual ~SensitivitySigDetail();

  SensitivitySigDetail(const SensitivitySigDetail& from);
  SensitivitySigDetail(SensitivitySigDetail&& from) noexcept
    : SensitivitySigDetail() {
    *this = ::std::move(from);
  }

  inline SensitivitySigDetail& operator=(const SensitivitySigDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensitivitySigDetail& operator=(SensitivitySigDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensitivitySigDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensitivitySigDetail* internal_default_instance() {
    return reinterpret_cast<const SensitivitySigDetail*>(
               &_SensitivitySigDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SensitivitySigDetail& a, SensitivitySigDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(SensitivitySigDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensitivitySigDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensitivitySigDetail* New() const final {
    return CreateMaybeMessage<SensitivitySigDetail>(nullptr);
  }

  SensitivitySigDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensitivitySigDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensitivitySigDetail& from);
  void MergeFrom(const SensitivitySigDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensitivitySigDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.SensitivitySigDetail";
  }
  protected:
  explicit SensitivitySigDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fsignal_2eproto);
    return ::descriptor_table_vehicle_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWarningLevelFieldNumber = 1,
  };
  // int32 warning_level = 1;
  void clear_warning_level();
  ::PROTOBUF_NAMESPACE_ID::int32 warning_level() const;
  void set_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_warning_level() const;
  void _internal_set_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.SensitivitySigDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 warning_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class SwitchSigDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.SwitchSigDetail) */ {
 public:
  inline SwitchSigDetail() : SwitchSigDetail(nullptr) {};
  virtual ~SwitchSigDetail();

  SwitchSigDetail(const SwitchSigDetail& from);
  SwitchSigDetail(SwitchSigDetail&& from) noexcept
    : SwitchSigDetail() {
    *this = ::std::move(from);
  }

  inline SwitchSigDetail& operator=(const SwitchSigDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchSigDetail& operator=(SwitchSigDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwitchSigDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchSigDetail* internal_default_instance() {
    return reinterpret_cast<const SwitchSigDetail*>(
               &_SwitchSigDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SwitchSigDetail& a, SwitchSigDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchSigDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchSigDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwitchSigDetail* New() const final {
    return CreateMaybeMessage<SwitchSigDetail>(nullptr);
  }

  SwitchSigDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwitchSigDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwitchSigDetail& from);
  void MergeFrom(const SwitchSigDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwitchSigDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.SwitchSigDetail";
  }
  protected:
  explicit SwitchSigDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fsignal_2eproto);
    return ::descriptor_table_vehicle_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchValueFieldNumber = 1,
  };
  // int32 switch_value = 1;
  void clear_switch_value();
  ::PROTOBUF_NAMESPACE_ID::int32 switch_value() const;
  void set_switch_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_switch_value() const;
  void _internal_set_switch_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.SwitchSigDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 switch_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class ObjectAlgDiagnoseDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.ObjectAlgDiagnoseDetail) */ {
 public:
  inline ObjectAlgDiagnoseDetail() : ObjectAlgDiagnoseDetail(nullptr) {};
  virtual ~ObjectAlgDiagnoseDetail();

  ObjectAlgDiagnoseDetail(const ObjectAlgDiagnoseDetail& from);
  ObjectAlgDiagnoseDetail(ObjectAlgDiagnoseDetail&& from) noexcept
    : ObjectAlgDiagnoseDetail() {
    *this = ::std::move(from);
  }

  inline ObjectAlgDiagnoseDetail& operator=(const ObjectAlgDiagnoseDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectAlgDiagnoseDetail& operator=(ObjectAlgDiagnoseDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectAlgDiagnoseDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectAlgDiagnoseDetail* internal_default_instance() {
    return reinterpret_cast<const ObjectAlgDiagnoseDetail*>(
               &_ObjectAlgDiagnoseDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ObjectAlgDiagnoseDetail& a, ObjectAlgDiagnoseDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectAlgDiagnoseDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectAlgDiagnoseDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectAlgDiagnoseDetail* New() const final {
    return CreateMaybeMessage<ObjectAlgDiagnoseDetail>(nullptr);
  }

  ObjectAlgDiagnoseDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectAlgDiagnoseDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectAlgDiagnoseDetail& from);
  void MergeFrom(const ObjectAlgDiagnoseDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectAlgDiagnoseDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.ObjectAlgDiagnoseDetail";
  }
  protected:
  explicit ObjectAlgDiagnoseDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fsignal_2eproto);
    return ::descriptor_table_vehicle_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqNoFieldNumber = 1,
  };
  // uint64 seq_no = 1;
  void clear_seq_no();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_no() const;
  void set_seq_no(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_no() const;
  void _internal_set_seq_no(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.ObjectAlgDiagnoseDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fsignal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VehicleSignal

// map<int32, float> signals = 1;
inline int VehicleSignal::_internal_signals_size() const {
  return signals_.size();
}
inline int VehicleSignal::signals_size() const {
  return _internal_signals_size();
}
inline void VehicleSignal::clear_signals() {
  signals_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
VehicleSignal::_internal_signals() const {
  return signals_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
VehicleSignal::signals() const {
  // @@protoc_insertion_point(field_map:minieye.VehicleSignal.signals)
  return _internal_signals();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
VehicleSignal::_internal_mutable_signals() {
  return signals_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
VehicleSignal::mutable_signals() {
  // @@protoc_insertion_point(field_mutable_map:minieye.VehicleSignal.signals)
  return _internal_mutable_signals();
}

// uint64 timestamp = 2;
inline void VehicleSignal::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VehicleSignal::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VehicleSignal::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.VehicleSignal.timestamp)
  return _internal_timestamp();
}
inline void VehicleSignal::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void VehicleSignal::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.VehicleSignal.timestamp)
}

// uint64 tick = 3;
inline void VehicleSignal::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VehicleSignal::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VehicleSignal::tick() const {
  // @@protoc_insertion_point(field_get:minieye.VehicleSignal.tick)
  return _internal_tick();
}
inline void VehicleSignal::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void VehicleSignal::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.VehicleSignal.tick)
}

// -------------------------------------------------------------------

// CommandSignal

// .minieye.CommandSignal.SignalType signal = 1;
inline void CommandSignal::clear_signal() {
  signal_ = 0;
}
inline ::minieye::CommandSignal_SignalType CommandSignal::_internal_signal() const {
  return static_cast< ::minieye::CommandSignal_SignalType >(signal_);
}
inline ::minieye::CommandSignal_SignalType CommandSignal::signal() const {
  // @@protoc_insertion_point(field_get:minieye.CommandSignal.signal)
  return _internal_signal();
}
inline void CommandSignal::_internal_set_signal(::minieye::CommandSignal_SignalType value) {
  
  signal_ = value;
}
inline void CommandSignal::set_signal(::minieye::CommandSignal_SignalType value) {
  _internal_set_signal(value);
  // @@protoc_insertion_point(field_set:minieye.CommandSignal.signal)
}

// .google.protobuf.Any details = 2;
inline bool CommandSignal::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool CommandSignal::has_details() const {
  return _internal_has_details();
}
inline const PROTOBUF_NAMESPACE_ID::Any& CommandSignal::_internal_details() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = details_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& CommandSignal::details() const {
  // @@protoc_insertion_point(field_get:minieye.CommandSignal.details)
  return _internal_details();
}
inline void CommandSignal::unsafe_arena_set_allocated_details(
    PROTOBUF_NAMESPACE_ID::Any* details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.CommandSignal.details)
}
inline PROTOBUF_NAMESPACE_ID::Any* CommandSignal::release_details() {
  auto temp = unsafe_arena_release_details();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* CommandSignal::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:minieye.CommandSignal.details)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = details_;
  details_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* CommandSignal::_internal_mutable_details() {
  
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    details_ = p;
  }
  return details_;
}
inline PROTOBUF_NAMESPACE_ID::Any* CommandSignal::mutable_details() {
  // @@protoc_insertion_point(field_mutable:minieye.CommandSignal.details)
  return _internal_mutable_details();
}
inline void CommandSignal::set_allocated_details(PROTOBUF_NAMESPACE_ID::Any* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details)->GetArena();
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:minieye.CommandSignal.details)
}

// -------------------------------------------------------------------

// OfflineCalibSigDetail

// int32 camera_id = 1;
inline void OfflineCalibSigDetail::clear_camera_id() {
  camera_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OfflineCalibSigDetail::_internal_camera_id() const {
  return camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OfflineCalibSigDetail::camera_id() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibSigDetail.camera_id)
  return _internal_camera_id();
}
inline void OfflineCalibSigDetail::_internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  camera_id_ = value;
}
inline void OfflineCalibSigDetail::set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibSigDetail.camera_id)
}

// int32 marker_type = 2;
inline void OfflineCalibSigDetail::clear_marker_type() {
  marker_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OfflineCalibSigDetail::_internal_marker_type() const {
  return marker_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OfflineCalibSigDetail::marker_type() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibSigDetail.marker_type)
  return _internal_marker_type();
}
inline void OfflineCalibSigDetail::_internal_set_marker_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  marker_type_ = value;
}
inline void OfflineCalibSigDetail::set_marker_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_marker_type(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibSigDetail.marker_type)
}

// double camera_pitch = 3;
inline void OfflineCalibSigDetail::clear_camera_pitch() {
  camera_pitch_ = 0;
}
inline double OfflineCalibSigDetail::_internal_camera_pitch() const {
  return camera_pitch_;
}
inline double OfflineCalibSigDetail::camera_pitch() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibSigDetail.camera_pitch)
  return _internal_camera_pitch();
}
inline void OfflineCalibSigDetail::_internal_set_camera_pitch(double value) {
  
  camera_pitch_ = value;
}
inline void OfflineCalibSigDetail::set_camera_pitch(double value) {
  _internal_set_camera_pitch(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibSigDetail.camera_pitch)
}

// double camera_yaw = 4;
inline void OfflineCalibSigDetail::clear_camera_yaw() {
  camera_yaw_ = 0;
}
inline double OfflineCalibSigDetail::_internal_camera_yaw() const {
  return camera_yaw_;
}
inline double OfflineCalibSigDetail::camera_yaw() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibSigDetail.camera_yaw)
  return _internal_camera_yaw();
}
inline void OfflineCalibSigDetail::_internal_set_camera_yaw(double value) {
  
  camera_yaw_ = value;
}
inline void OfflineCalibSigDetail::set_camera_yaw(double value) {
  _internal_set_camera_yaw(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibSigDetail.camera_yaw)
}

// double camera_roll = 5;
inline void OfflineCalibSigDetail::clear_camera_roll() {
  camera_roll_ = 0;
}
inline double OfflineCalibSigDetail::_internal_camera_roll() const {
  return camera_roll_;
}
inline double OfflineCalibSigDetail::camera_roll() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibSigDetail.camera_roll)
  return _internal_camera_roll();
}
inline void OfflineCalibSigDetail::_internal_set_camera_roll(double value) {
  
  camera_roll_ = value;
}
inline void OfflineCalibSigDetail::set_camera_roll(double value) {
  _internal_set_camera_roll(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibSigDetail.camera_roll)
}

// double camera_height = 6;
inline void OfflineCalibSigDetail::clear_camera_height() {
  camera_height_ = 0;
}
inline double OfflineCalibSigDetail::_internal_camera_height() const {
  return camera_height_;
}
inline double OfflineCalibSigDetail::camera_height() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibSigDetail.camera_height)
  return _internal_camera_height();
}
inline void OfflineCalibSigDetail::_internal_set_camera_height(double value) {
  
  camera_height_ = value;
}
inline void OfflineCalibSigDetail::set_camera_height(double value) {
  _internal_set_camera_height(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibSigDetail.camera_height)
}

// double left_dist_to_camera = 7;
inline void OfflineCalibSigDetail::clear_left_dist_to_camera() {
  left_dist_to_camera_ = 0;
}
inline double OfflineCalibSigDetail::_internal_left_dist_to_camera() const {
  return left_dist_to_camera_;
}
inline double OfflineCalibSigDetail::left_dist_to_camera() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibSigDetail.left_dist_to_camera)
  return _internal_left_dist_to_camera();
}
inline void OfflineCalibSigDetail::_internal_set_left_dist_to_camera(double value) {
  
  left_dist_to_camera_ = value;
}
inline void OfflineCalibSigDetail::set_left_dist_to_camera(double value) {
  _internal_set_left_dist_to_camera(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibSigDetail.left_dist_to_camera)
}

// double right_dist_to_camera = 8;
inline void OfflineCalibSigDetail::clear_right_dist_to_camera() {
  right_dist_to_camera_ = 0;
}
inline double OfflineCalibSigDetail::_internal_right_dist_to_camera() const {
  return right_dist_to_camera_;
}
inline double OfflineCalibSigDetail::right_dist_to_camera() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibSigDetail.right_dist_to_camera)
  return _internal_right_dist_to_camera();
}
inline void OfflineCalibSigDetail::_internal_set_right_dist_to_camera(double value) {
  
  right_dist_to_camera_ = value;
}
inline void OfflineCalibSigDetail::set_right_dist_to_camera(double value) {
  _internal_set_right_dist_to_camera(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibSigDetail.right_dist_to_camera)
}

// double front_wheel_camera_dist = 9;
inline void OfflineCalibSigDetail::clear_front_wheel_camera_dist() {
  front_wheel_camera_dist_ = 0;
}
inline double OfflineCalibSigDetail::_internal_front_wheel_camera_dist() const {
  return front_wheel_camera_dist_;
}
inline double OfflineCalibSigDetail::front_wheel_camera_dist() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibSigDetail.front_wheel_camera_dist)
  return _internal_front_wheel_camera_dist();
}
inline void OfflineCalibSigDetail::_internal_set_front_wheel_camera_dist(double value) {
  
  front_wheel_camera_dist_ = value;
}
inline void OfflineCalibSigDetail::set_front_wheel_camera_dist(double value) {
  _internal_set_front_wheel_camera_dist(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibSigDetail.front_wheel_camera_dist)
}

// -------------------------------------------------------------------

// OfflineCalibRsp

// int32 camera_id = 1;
inline void OfflineCalibRsp::clear_camera_id() {
  camera_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OfflineCalibRsp::_internal_camera_id() const {
  return camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OfflineCalibRsp::camera_id() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibRsp.camera_id)
  return _internal_camera_id();
}
inline void OfflineCalibRsp::_internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  camera_id_ = value;
}
inline void OfflineCalibRsp::set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibRsp.camera_id)
}

// int32 state = 2;
inline void OfflineCalibRsp::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OfflineCalibRsp::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OfflineCalibRsp::state() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibRsp.state)
  return _internal_state();
}
inline void OfflineCalibRsp::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void OfflineCalibRsp::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibRsp.state)
}

// int32 err_code = 3;
inline void OfflineCalibRsp::clear_err_code() {
  err_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OfflineCalibRsp::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OfflineCalibRsp::err_code() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibRsp.err_code)
  return _internal_err_code();
}
inline void OfflineCalibRsp::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  err_code_ = value;
}
inline void OfflineCalibRsp::set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibRsp.err_code)
}

// double camera_pitch = 4;
inline void OfflineCalibRsp::clear_camera_pitch() {
  camera_pitch_ = 0;
}
inline double OfflineCalibRsp::_internal_camera_pitch() const {
  return camera_pitch_;
}
inline double OfflineCalibRsp::camera_pitch() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibRsp.camera_pitch)
  return _internal_camera_pitch();
}
inline void OfflineCalibRsp::_internal_set_camera_pitch(double value) {
  
  camera_pitch_ = value;
}
inline void OfflineCalibRsp::set_camera_pitch(double value) {
  _internal_set_camera_pitch(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibRsp.camera_pitch)
}

// double camera_yaw = 5;
inline void OfflineCalibRsp::clear_camera_yaw() {
  camera_yaw_ = 0;
}
inline double OfflineCalibRsp::_internal_camera_yaw() const {
  return camera_yaw_;
}
inline double OfflineCalibRsp::camera_yaw() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibRsp.camera_yaw)
  return _internal_camera_yaw();
}
inline void OfflineCalibRsp::_internal_set_camera_yaw(double value) {
  
  camera_yaw_ = value;
}
inline void OfflineCalibRsp::set_camera_yaw(double value) {
  _internal_set_camera_yaw(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibRsp.camera_yaw)
}

// double camera_roll = 6;
inline void OfflineCalibRsp::clear_camera_roll() {
  camera_roll_ = 0;
}
inline double OfflineCalibRsp::_internal_camera_roll() const {
  return camera_roll_;
}
inline double OfflineCalibRsp::camera_roll() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibRsp.camera_roll)
  return _internal_camera_roll();
}
inline void OfflineCalibRsp::_internal_set_camera_roll(double value) {
  
  camera_roll_ = value;
}
inline void OfflineCalibRsp::set_camera_roll(double value) {
  _internal_set_camera_roll(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibRsp.camera_roll)
}

// double camera_height = 7;
inline void OfflineCalibRsp::clear_camera_height() {
  camera_height_ = 0;
}
inline double OfflineCalibRsp::_internal_camera_height() const {
  return camera_height_;
}
inline double OfflineCalibRsp::camera_height() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibRsp.camera_height)
  return _internal_camera_height();
}
inline void OfflineCalibRsp::_internal_set_camera_height(double value) {
  
  camera_height_ = value;
}
inline void OfflineCalibRsp::set_camera_height(double value) {
  _internal_set_camera_height(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibRsp.camera_height)
}

// double process = 8;
inline void OfflineCalibRsp::clear_process() {
  process_ = 0;
}
inline double OfflineCalibRsp::_internal_process() const {
  return process_;
}
inline double OfflineCalibRsp::process() const {
  // @@protoc_insertion_point(field_get:minieye.OfflineCalibRsp.process)
  return _internal_process();
}
inline void OfflineCalibRsp::_internal_set_process(double value) {
  
  process_ = value;
}
inline void OfflineCalibRsp::set_process(double value) {
  _internal_set_process(value);
  // @@protoc_insertion_point(field_set:minieye.OfflineCalibRsp.process)
}

// -------------------------------------------------------------------

// AutoCalibSigDetail

// int32 camera_id = 1;
inline void AutoCalibSigDetail::clear_camera_id() {
  camera_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoCalibSigDetail::_internal_camera_id() const {
  return camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoCalibSigDetail::camera_id() const {
  // @@protoc_insertion_point(field_get:minieye.AutoCalibSigDetail.camera_id)
  return _internal_camera_id();
}
inline void AutoCalibSigDetail::_internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  camera_id_ = value;
}
inline void AutoCalibSigDetail::set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:minieye.AutoCalibSigDetail.camera_id)
}

// double camera_height = 2;
inline void AutoCalibSigDetail::clear_camera_height() {
  camera_height_ = 0;
}
inline double AutoCalibSigDetail::_internal_camera_height() const {
  return camera_height_;
}
inline double AutoCalibSigDetail::camera_height() const {
  // @@protoc_insertion_point(field_get:minieye.AutoCalibSigDetail.camera_height)
  return _internal_camera_height();
}
inline void AutoCalibSigDetail::_internal_set_camera_height(double value) {
  
  camera_height_ = value;
}
inline void AutoCalibSigDetail::set_camera_height(double value) {
  _internal_set_camera_height(value);
  // @@protoc_insertion_point(field_set:minieye.AutoCalibSigDetail.camera_height)
}

// double left_dist_to_camera = 3;
inline void AutoCalibSigDetail::clear_left_dist_to_camera() {
  left_dist_to_camera_ = 0;
}
inline double AutoCalibSigDetail::_internal_left_dist_to_camera() const {
  return left_dist_to_camera_;
}
inline double AutoCalibSigDetail::left_dist_to_camera() const {
  // @@protoc_insertion_point(field_get:minieye.AutoCalibSigDetail.left_dist_to_camera)
  return _internal_left_dist_to_camera();
}
inline void AutoCalibSigDetail::_internal_set_left_dist_to_camera(double value) {
  
  left_dist_to_camera_ = value;
}
inline void AutoCalibSigDetail::set_left_dist_to_camera(double value) {
  _internal_set_left_dist_to_camera(value);
  // @@protoc_insertion_point(field_set:minieye.AutoCalibSigDetail.left_dist_to_camera)
}

// double right_dist_to_camera = 4;
inline void AutoCalibSigDetail::clear_right_dist_to_camera() {
  right_dist_to_camera_ = 0;
}
inline double AutoCalibSigDetail::_internal_right_dist_to_camera() const {
  return right_dist_to_camera_;
}
inline double AutoCalibSigDetail::right_dist_to_camera() const {
  // @@protoc_insertion_point(field_get:minieye.AutoCalibSigDetail.right_dist_to_camera)
  return _internal_right_dist_to_camera();
}
inline void AutoCalibSigDetail::_internal_set_right_dist_to_camera(double value) {
  
  right_dist_to_camera_ = value;
}
inline void AutoCalibSigDetail::set_right_dist_to_camera(double value) {
  _internal_set_right_dist_to_camera(value);
  // @@protoc_insertion_point(field_set:minieye.AutoCalibSigDetail.right_dist_to_camera)
}

// double front_wheel_camera_dist = 5;
inline void AutoCalibSigDetail::clear_front_wheel_camera_dist() {
  front_wheel_camera_dist_ = 0;
}
inline double AutoCalibSigDetail::_internal_front_wheel_camera_dist() const {
  return front_wheel_camera_dist_;
}
inline double AutoCalibSigDetail::front_wheel_camera_dist() const {
  // @@protoc_insertion_point(field_get:minieye.AutoCalibSigDetail.front_wheel_camera_dist)
  return _internal_front_wheel_camera_dist();
}
inline void AutoCalibSigDetail::_internal_set_front_wheel_camera_dist(double value) {
  
  front_wheel_camera_dist_ = value;
}
inline void AutoCalibSigDetail::set_front_wheel_camera_dist(double value) {
  _internal_set_front_wheel_camera_dist(value);
  // @@protoc_insertion_point(field_set:minieye.AutoCalibSigDetail.front_wheel_camera_dist)
}

// -------------------------------------------------------------------

// AutoCalibRsp

// int32 camera_id = 1;
inline void AutoCalibRsp::clear_camera_id() {
  camera_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoCalibRsp::_internal_camera_id() const {
  return camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoCalibRsp::camera_id() const {
  // @@protoc_insertion_point(field_get:minieye.AutoCalibRsp.camera_id)
  return _internal_camera_id();
}
inline void AutoCalibRsp::_internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  camera_id_ = value;
}
inline void AutoCalibRsp::set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:minieye.AutoCalibRsp.camera_id)
}

// int32 state = 2;
inline void AutoCalibRsp::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoCalibRsp::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoCalibRsp::state() const {
  // @@protoc_insertion_point(field_get:minieye.AutoCalibRsp.state)
  return _internal_state();
}
inline void AutoCalibRsp::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void AutoCalibRsp::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:minieye.AutoCalibRsp.state)
}

// int32 err_code = 3;
inline void AutoCalibRsp::clear_err_code() {
  err_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoCalibRsp::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AutoCalibRsp::err_code() const {
  // @@protoc_insertion_point(field_get:minieye.AutoCalibRsp.err_code)
  return _internal_err_code();
}
inline void AutoCalibRsp::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  err_code_ = value;
}
inline void AutoCalibRsp::set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:minieye.AutoCalibRsp.err_code)
}

// double camera_pitch = 4;
inline void AutoCalibRsp::clear_camera_pitch() {
  camera_pitch_ = 0;
}
inline double AutoCalibRsp::_internal_camera_pitch() const {
  return camera_pitch_;
}
inline double AutoCalibRsp::camera_pitch() const {
  // @@protoc_insertion_point(field_get:minieye.AutoCalibRsp.camera_pitch)
  return _internal_camera_pitch();
}
inline void AutoCalibRsp::_internal_set_camera_pitch(double value) {
  
  camera_pitch_ = value;
}
inline void AutoCalibRsp::set_camera_pitch(double value) {
  _internal_set_camera_pitch(value);
  // @@protoc_insertion_point(field_set:minieye.AutoCalibRsp.camera_pitch)
}

// double camera_yaw = 5;
inline void AutoCalibRsp::clear_camera_yaw() {
  camera_yaw_ = 0;
}
inline double AutoCalibRsp::_internal_camera_yaw() const {
  return camera_yaw_;
}
inline double AutoCalibRsp::camera_yaw() const {
  // @@protoc_insertion_point(field_get:minieye.AutoCalibRsp.camera_yaw)
  return _internal_camera_yaw();
}
inline void AutoCalibRsp::_internal_set_camera_yaw(double value) {
  
  camera_yaw_ = value;
}
inline void AutoCalibRsp::set_camera_yaw(double value) {
  _internal_set_camera_yaw(value);
  // @@protoc_insertion_point(field_set:minieye.AutoCalibRsp.camera_yaw)
}

// double camera_roll = 6;
inline void AutoCalibRsp::clear_camera_roll() {
  camera_roll_ = 0;
}
inline double AutoCalibRsp::_internal_camera_roll() const {
  return camera_roll_;
}
inline double AutoCalibRsp::camera_roll() const {
  // @@protoc_insertion_point(field_get:minieye.AutoCalibRsp.camera_roll)
  return _internal_camera_roll();
}
inline void AutoCalibRsp::_internal_set_camera_roll(double value) {
  
  camera_roll_ = value;
}
inline void AutoCalibRsp::set_camera_roll(double value) {
  _internal_set_camera_roll(value);
  // @@protoc_insertion_point(field_set:minieye.AutoCalibRsp.camera_roll)
}

// double camera_height = 7;
inline void AutoCalibRsp::clear_camera_height() {
  camera_height_ = 0;
}
inline double AutoCalibRsp::_internal_camera_height() const {
  return camera_height_;
}
inline double AutoCalibRsp::camera_height() const {
  // @@protoc_insertion_point(field_get:minieye.AutoCalibRsp.camera_height)
  return _internal_camera_height();
}
inline void AutoCalibRsp::_internal_set_camera_height(double value) {
  
  camera_height_ = value;
}
inline void AutoCalibRsp::set_camera_height(double value) {
  _internal_set_camera_height(value);
  // @@protoc_insertion_point(field_set:minieye.AutoCalibRsp.camera_height)
}

// double process = 8;
inline void AutoCalibRsp::clear_process() {
  process_ = 0;
}
inline double AutoCalibRsp::_internal_process() const {
  return process_;
}
inline double AutoCalibRsp::process() const {
  // @@protoc_insertion_point(field_get:minieye.AutoCalibRsp.process)
  return _internal_process();
}
inline void AutoCalibRsp::_internal_set_process(double value) {
  
  process_ = value;
}
inline void AutoCalibRsp::set_process(double value) {
  _internal_set_process(value);
  // @@protoc_insertion_point(field_set:minieye.AutoCalibRsp.process)
}

// -------------------------------------------------------------------

// SensitivitySigDetail

// int32 warning_level = 1;
inline void SensitivitySigDetail::clear_warning_level() {
  warning_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensitivitySigDetail::_internal_warning_level() const {
  return warning_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensitivitySigDetail::warning_level() const {
  // @@protoc_insertion_point(field_get:minieye.SensitivitySigDetail.warning_level)
  return _internal_warning_level();
}
inline void SensitivitySigDetail::_internal_set_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  warning_level_ = value;
}
inline void SensitivitySigDetail::set_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_warning_level(value);
  // @@protoc_insertion_point(field_set:minieye.SensitivitySigDetail.warning_level)
}

// -------------------------------------------------------------------

// SwitchSigDetail

// int32 switch_value = 1;
inline void SwitchSigDetail::clear_switch_value() {
  switch_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwitchSigDetail::_internal_switch_value() const {
  return switch_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwitchSigDetail::switch_value() const {
  // @@protoc_insertion_point(field_get:minieye.SwitchSigDetail.switch_value)
  return _internal_switch_value();
}
inline void SwitchSigDetail::_internal_set_switch_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  switch_value_ = value;
}
inline void SwitchSigDetail::set_switch_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_switch_value(value);
  // @@protoc_insertion_point(field_set:minieye.SwitchSigDetail.switch_value)
}

// -------------------------------------------------------------------

// ObjectAlgDiagnoseDetail

// uint64 seq_no = 1;
inline void ObjectAlgDiagnoseDetail::clear_seq_no() {
  seq_no_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectAlgDiagnoseDetail::_internal_seq_no() const {
  return seq_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectAlgDiagnoseDetail::seq_no() const {
  // @@protoc_insertion_point(field_get:minieye.ObjectAlgDiagnoseDetail.seq_no)
  return _internal_seq_no();
}
inline void ObjectAlgDiagnoseDetail::_internal_set_seq_no(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_no_ = value;
}
inline void ObjectAlgDiagnoseDetail::set_seq_no(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_no(value);
  // @@protoc_insertion_point(field_set:minieye.ObjectAlgDiagnoseDetail.seq_no)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minieye::VehicleSignal_SignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::VehicleSignal_SignalType>() {
  return ::minieye::VehicleSignal_SignalType_descriptor();
}
template <> struct is_proto_enum< ::minieye::CommandSignal_SignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::CommandSignal_SignalType>() {
  return ::minieye::CommandSignal_SignalType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicle_5fsignal_2eproto
