// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apa_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_apa_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_apa_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_apa_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_apa_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apa_5fstate_2eproto;
namespace minieye {
class APAStateControl;
class APAStateControlDefaultTypeInternal;
extern APAStateControlDefaultTypeInternal _APAStateControl_default_instance_;
class APAStateControl_SettingsEntry_DoNotUse;
class APAStateControl_SettingsEntry_DoNotUseDefaultTypeInternal;
extern APAStateControl_SettingsEntry_DoNotUseDefaultTypeInternal _APAStateControl_SettingsEntry_DoNotUse_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::APAStateControl* Arena::CreateMaybeMessage<::minieye::APAStateControl>(Arena*);
template<> ::minieye::APAStateControl_SettingsEntry_DoNotUse* Arena::CreateMaybeMessage<::minieye::APAStateControl_SettingsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

enum APAStateControl_SettingType : int {
  APAStateControl_SettingType_APA_Slot_Chosen = 0,
  APAStateControl_SettingType_APA_PullOut_Option = 1,
  APAStateControl_SettingType_APA_PullOut_Direction = 2,
  APAStateControl_SettingType_APA_ParkIn_Direction = 3,
  APAStateControl_SettingType_Shake_hand = 4,
  APAStateControl_SettingType_APA_HMI_Info = 5,
  APAStateControl_SettingType_Plan_type = 6,
  APAStateControl_SettingType_Park_Active = 7,
  APAStateControl_SettingType_Park_Status = 8,
  APAStateControl_SettingType_Park_Button_Available = 9,
  APAStateControl_SettingType_Park_Out_Available = 10,
  APAStateControl_SettingType_APA_Search_Display = 11,
  APAStateControl_SettingType_APA_Planning_Display = 12,
  APAStateControl_SettingType_Shakehand_Display = 13,
  APAStateControl_SettingType_APA_Active_Display = 14,
  APAStateControl_SettingType_APA_Suspend_Display = 15,
  APAStateControl_SettingType_APA_Terminate_Display = 16,
  APAStateControl_SettingType_Failure_Display = 17,
  APAStateControl_SettingType_VTR_Planning_Display = 18,
  APAStateControl_SettingType_VTR_Active_Display = 19,
  APAStateControl_SettingType_VTR_Terminate_Display = 20,
  APAStateControl_SettingType_RPA_phone_active = 21,
  APAStateControl_SettingType_APAStateControl_SettingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  APAStateControl_SettingType_APAStateControl_SettingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool APAStateControl_SettingType_IsValid(int value);
constexpr APAStateControl_SettingType APAStateControl_SettingType_SettingType_MIN = APAStateControl_SettingType_APA_Slot_Chosen;
constexpr APAStateControl_SettingType APAStateControl_SettingType_SettingType_MAX = APAStateControl_SettingType_RPA_phone_active;
constexpr int APAStateControl_SettingType_SettingType_ARRAYSIZE = APAStateControl_SettingType_SettingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAStateControl_SettingType_descriptor();
template<typename T>
inline const std::string& APAStateControl_SettingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, APAStateControl_SettingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function APAStateControl_SettingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    APAStateControl_SettingType_descriptor(), enum_t_value);
}
inline bool APAStateControl_SettingType_Parse(
    const std::string& name, APAStateControl_SettingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<APAStateControl_SettingType>(
    APAStateControl_SettingType_descriptor(), name, value);
}
enum APAStateControl_ApStateManagerType : int {
  APAStateControl_ApStateManagerType_ApaInit = 0,
  APAStateControl_ApStateManagerType_ApaStandby = 1,
  APAStateControl_ApStateManagerType_ApaSearching = 2,
  APAStateControl_ApStateManagerType_ApaActive = 3,
  APAStateControl_ApStateManagerType_ApaSuspend = 4,
  APAStateControl_ApStateManagerType_ApaOff = 5,
  APAStateControl_ApStateManagerType_ApaFailure = 6,
  APAStateControl_ApStateManagerType_ApaFinish = 7,
  APAStateControl_ApStateManagerType_ApaShakehand = 18,
  APAStateControl_ApStateManagerType_ApaPlanning = 19,
  APAStateControl_ApStateManagerType_ApaTerminated = 20,
  APAStateControl_ApStateManagerType_HavpStandby = 40,
  APAStateControl_ApStateManagerType_HavpLearning = 41,
  APAStateControl_ApStateManagerType_HavpReady = 42,
  APAStateControl_ApStateManagerType_HavpShakehand = 43,
  APAStateControl_ApStateManagerType_HavpControl = 44,
  APAStateControl_ApStateManagerType_HavpSuspend = 45,
  APAStateControl_ApStateManagerType_HavpFinish = 46,
  APAStateControl_ApStateManagerType_HavpStop = 47,
  APAStateControl_ApStateManagerType_HavpOff = 48,
  APAStateControl_ApStateManagerType_HavpFailure = 49,
  APAStateControl_ApStateManagerType_HavpDecelerate = 50,
  APAStateControl_ApStateManagerType_APAStateControl_ApStateManagerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  APAStateControl_ApStateManagerType_APAStateControl_ApStateManagerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool APAStateControl_ApStateManagerType_IsValid(int value);
constexpr APAStateControl_ApStateManagerType APAStateControl_ApStateManagerType_ApStateManagerType_MIN = APAStateControl_ApStateManagerType_ApaInit;
constexpr APAStateControl_ApStateManagerType APAStateControl_ApStateManagerType_ApStateManagerType_MAX = APAStateControl_ApStateManagerType_HavpDecelerate;
constexpr int APAStateControl_ApStateManagerType_ApStateManagerType_ARRAYSIZE = APAStateControl_ApStateManagerType_ApStateManagerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAStateControl_ApStateManagerType_descriptor();
template<typename T>
inline const std::string& APAStateControl_ApStateManagerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, APAStateControl_ApStateManagerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function APAStateControl_ApStateManagerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    APAStateControl_ApStateManagerType_descriptor(), enum_t_value);
}
inline bool APAStateControl_ApStateManagerType_Parse(
    const std::string& name, APAStateControl_ApStateManagerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<APAStateControl_ApStateManagerType>(
    APAStateControl_ApStateManagerType_descriptor(), name, value);
}
enum APAStateControl_ApMapResponseType : int {
  APAStateControl_ApMapResponseType_kChooseMap = 0,
  APAStateControl_ApMapResponseType_kParkingMappingReadyToMapping = 1,
  APAStateControl_ApMapResponseType_kParkingMapping = 2,
  APAStateControl_ApMapResponseType_kParkingMappingDone = 3,
  APAStateControl_ApMapResponseType_kParkingMappingFailed = 4,
  APAStateControl_ApMapResponseType_kParkingLocalizationReadyToMapping = 5,
  APAStateControl_ApMapResponseType_kParkingLocalizationReadyToLocalization = 6,
  APAStateControl_ApMapResponseType_kParkingLocalization = 7,
  APAStateControl_ApMapResponseType_kParkingLocalizationOutOfMap = 11,
  APAStateControl_ApMapResponseType_kParkingLocalizationDone = 8,
  APAStateControl_ApMapResponseType_kParkingLocalizationFailed = 9,
  APAStateControl_ApMapResponseType_kBackToGround = 10,
  APAStateControl_ApMapResponseType_APAStateControl_ApMapResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  APAStateControl_ApMapResponseType_APAStateControl_ApMapResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool APAStateControl_ApMapResponseType_IsValid(int value);
constexpr APAStateControl_ApMapResponseType APAStateControl_ApMapResponseType_ApMapResponseType_MIN = APAStateControl_ApMapResponseType_kChooseMap;
constexpr APAStateControl_ApMapResponseType APAStateControl_ApMapResponseType_ApMapResponseType_MAX = APAStateControl_ApMapResponseType_kParkingLocalizationOutOfMap;
constexpr int APAStateControl_ApMapResponseType_ApMapResponseType_ARRAYSIZE = APAStateControl_ApMapResponseType_ApMapResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAStateControl_ApMapResponseType_descriptor();
template<typename T>
inline const std::string& APAStateControl_ApMapResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, APAStateControl_ApMapResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function APAStateControl_ApMapResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    APAStateControl_ApMapResponseType_descriptor(), enum_t_value);
}
inline bool APAStateControl_ApMapResponseType_Parse(
    const std::string& name, APAStateControl_ApMapResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<APAStateControl_ApMapResponseType>(
    APAStateControl_ApMapResponseType_descriptor(), name, value);
}
enum APAStateControl_FailReason : int {
  APAStateControl_FailReason_kNotFail = 0,
  APAStateControl_FailReason_kBackwardTooFar = 1,
  APAStateControl_FailReason_kSpeeding = 2,
  APAStateControl_FailReason_APAStateControl_FailReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  APAStateControl_FailReason_APAStateControl_FailReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool APAStateControl_FailReason_IsValid(int value);
constexpr APAStateControl_FailReason APAStateControl_FailReason_FailReason_MIN = APAStateControl_FailReason_kNotFail;
constexpr APAStateControl_FailReason APAStateControl_FailReason_FailReason_MAX = APAStateControl_FailReason_kSpeeding;
constexpr int APAStateControl_FailReason_FailReason_ARRAYSIZE = APAStateControl_FailReason_FailReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAStateControl_FailReason_descriptor();
template<typename T>
inline const std::string& APAStateControl_FailReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, APAStateControl_FailReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function APAStateControl_FailReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    APAStateControl_FailReason_descriptor(), enum_t_value);
}
inline bool APAStateControl_FailReason_Parse(
    const std::string& name, APAStateControl_FailReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<APAStateControl_FailReason>(
    APAStateControl_FailReason_descriptor(), name, value);
}
enum APAStateControl_ReminderType : int {
  APAStateControl_ReminderType_HmiReminderNone = 0,
  APAStateControl_ReminderType_HmiOverSpeed = 1,
  APAStateControl_ReminderType_HmiCross = 2,
  APAStateControl_ReminderType_HmiTurn = 3,
  APAStateControl_ReminderType_HmiPedestrian = 4,
  APAStateControl_ReminderType_APAStateControl_ReminderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  APAStateControl_ReminderType_APAStateControl_ReminderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool APAStateControl_ReminderType_IsValid(int value);
constexpr APAStateControl_ReminderType APAStateControl_ReminderType_ReminderType_MIN = APAStateControl_ReminderType_HmiReminderNone;
constexpr APAStateControl_ReminderType APAStateControl_ReminderType_ReminderType_MAX = APAStateControl_ReminderType_HmiPedestrian;
constexpr int APAStateControl_ReminderType_ReminderType_ARRAYSIZE = APAStateControl_ReminderType_ReminderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAStateControl_ReminderType_descriptor();
template<typename T>
inline const std::string& APAStateControl_ReminderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, APAStateControl_ReminderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function APAStateControl_ReminderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    APAStateControl_ReminderType_descriptor(), enum_t_value);
}
inline bool APAStateControl_ReminderType_Parse(
    const std::string& name, APAStateControl_ReminderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<APAStateControl_ReminderType>(
    APAStateControl_ReminderType_descriptor(), name, value);
}
enum APAStateControl_HmiConditionType : int {
  APAStateControl_HmiConditionType_HmiConditionNone = 0,
  APAStateControl_HmiConditionType_HmiTriggerParking = 1,
  APAStateControl_HmiConditionType_HmiTriggerManualParking = 2,
  APAStateControl_HmiConditionType_HmiReadyToReachPathEnd = 3,
  APAStateControl_HmiConditionType_HmiReadyToApa = 4,
  APAStateControl_HmiConditionType_HmiVehicleStop = 5,
  APAStateControl_HmiConditionType_APAStateControl_HmiConditionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  APAStateControl_HmiConditionType_APAStateControl_HmiConditionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool APAStateControl_HmiConditionType_IsValid(int value);
constexpr APAStateControl_HmiConditionType APAStateControl_HmiConditionType_HmiConditionType_MIN = APAStateControl_HmiConditionType_HmiConditionNone;
constexpr APAStateControl_HmiConditionType APAStateControl_HmiConditionType_HmiConditionType_MAX = APAStateControl_HmiConditionType_HmiVehicleStop;
constexpr int APAStateControl_HmiConditionType_HmiConditionType_ARRAYSIZE = APAStateControl_HmiConditionType_HmiConditionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAStateControl_HmiConditionType_descriptor();
template<typename T>
inline const std::string& APAStateControl_HmiConditionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, APAStateControl_HmiConditionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function APAStateControl_HmiConditionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    APAStateControl_HmiConditionType_descriptor(), enum_t_value);
}
inline bool APAStateControl_HmiConditionType_Parse(
    const std::string& name, APAStateControl_HmiConditionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<APAStateControl_HmiConditionType>(
    APAStateControl_HmiConditionType_descriptor(), name, value);
}
// ===================================================================

class APAStateControl_SettingsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<APAStateControl_SettingsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<APAStateControl_SettingsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  APAStateControl_SettingsEntry_DoNotUse();
  APAStateControl_SettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const APAStateControl_SettingsEntry_DoNotUse& other);
  static const APAStateControl_SettingsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const APAStateControl_SettingsEntry_DoNotUse*>(&_APAStateControl_SettingsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apa_5fstate_2eproto);
    return ::descriptor_table_apa_5fstate_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class APAStateControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.APAStateControl) */ {
 public:
  inline APAStateControl() : APAStateControl(nullptr) {};
  virtual ~APAStateControl();

  APAStateControl(const APAStateControl& from);
  APAStateControl(APAStateControl&& from) noexcept
    : APAStateControl() {
    *this = ::std::move(from);
  }

  inline APAStateControl& operator=(const APAStateControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline APAStateControl& operator=(APAStateControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const APAStateControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const APAStateControl* internal_default_instance() {
    return reinterpret_cast<const APAStateControl*>(
               &_APAStateControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(APAStateControl& a, APAStateControl& b) {
    a.Swap(&b);
  }
  inline void Swap(APAStateControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(APAStateControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline APAStateControl* New() const final {
    return CreateMaybeMessage<APAStateControl>(nullptr);
  }

  APAStateControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<APAStateControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const APAStateControl& from);
  void MergeFrom(const APAStateControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APAStateControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.APAStateControl";
  }
  protected:
  explicit APAStateControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apa_5fstate_2eproto);
    return ::descriptor_table_apa_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef APAStateControl_SettingType SettingType;
  static constexpr SettingType APA_Slot_Chosen =
    APAStateControl_SettingType_APA_Slot_Chosen;
  static constexpr SettingType APA_PullOut_Option =
    APAStateControl_SettingType_APA_PullOut_Option;
  static constexpr SettingType APA_PullOut_Direction =
    APAStateControl_SettingType_APA_PullOut_Direction;
  static constexpr SettingType APA_ParkIn_Direction =
    APAStateControl_SettingType_APA_ParkIn_Direction;
  static constexpr SettingType Shake_hand =
    APAStateControl_SettingType_Shake_hand;
  static constexpr SettingType APA_HMI_Info =
    APAStateControl_SettingType_APA_HMI_Info;
  static constexpr SettingType Plan_type =
    APAStateControl_SettingType_Plan_type;
  static constexpr SettingType Park_Active =
    APAStateControl_SettingType_Park_Active;
  static constexpr SettingType Park_Status =
    APAStateControl_SettingType_Park_Status;
  static constexpr SettingType Park_Button_Available =
    APAStateControl_SettingType_Park_Button_Available;
  static constexpr SettingType Park_Out_Available =
    APAStateControl_SettingType_Park_Out_Available;
  static constexpr SettingType APA_Search_Display =
    APAStateControl_SettingType_APA_Search_Display;
  static constexpr SettingType APA_Planning_Display =
    APAStateControl_SettingType_APA_Planning_Display;
  static constexpr SettingType Shakehand_Display =
    APAStateControl_SettingType_Shakehand_Display;
  static constexpr SettingType APA_Active_Display =
    APAStateControl_SettingType_APA_Active_Display;
  static constexpr SettingType APA_Suspend_Display =
    APAStateControl_SettingType_APA_Suspend_Display;
  static constexpr SettingType APA_Terminate_Display =
    APAStateControl_SettingType_APA_Terminate_Display;
  static constexpr SettingType Failure_Display =
    APAStateControl_SettingType_Failure_Display;
  static constexpr SettingType VTR_Planning_Display =
    APAStateControl_SettingType_VTR_Planning_Display;
  static constexpr SettingType VTR_Active_Display =
    APAStateControl_SettingType_VTR_Active_Display;
  static constexpr SettingType VTR_Terminate_Display =
    APAStateControl_SettingType_VTR_Terminate_Display;
  static constexpr SettingType RPA_phone_active =
    APAStateControl_SettingType_RPA_phone_active;
  static inline bool SettingType_IsValid(int value) {
    return APAStateControl_SettingType_IsValid(value);
  }
  static constexpr SettingType SettingType_MIN =
    APAStateControl_SettingType_SettingType_MIN;
  static constexpr SettingType SettingType_MAX =
    APAStateControl_SettingType_SettingType_MAX;
  static constexpr int SettingType_ARRAYSIZE =
    APAStateControl_SettingType_SettingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SettingType_descriptor() {
    return APAStateControl_SettingType_descriptor();
  }
  template<typename T>
  static inline const std::string& SettingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SettingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SettingType_Name.");
    return APAStateControl_SettingType_Name(enum_t_value);
  }
  static inline bool SettingType_Parse(const std::string& name,
      SettingType* value) {
    return APAStateControl_SettingType_Parse(name, value);
  }

  typedef APAStateControl_ApStateManagerType ApStateManagerType;
  static constexpr ApStateManagerType ApaInit =
    APAStateControl_ApStateManagerType_ApaInit;
  static constexpr ApStateManagerType ApaStandby =
    APAStateControl_ApStateManagerType_ApaStandby;
  static constexpr ApStateManagerType ApaSearching =
    APAStateControl_ApStateManagerType_ApaSearching;
  static constexpr ApStateManagerType ApaActive =
    APAStateControl_ApStateManagerType_ApaActive;
  static constexpr ApStateManagerType ApaSuspend =
    APAStateControl_ApStateManagerType_ApaSuspend;
  static constexpr ApStateManagerType ApaOff =
    APAStateControl_ApStateManagerType_ApaOff;
  static constexpr ApStateManagerType ApaFailure =
    APAStateControl_ApStateManagerType_ApaFailure;
  static constexpr ApStateManagerType ApaFinish =
    APAStateControl_ApStateManagerType_ApaFinish;
  static constexpr ApStateManagerType ApaShakehand =
    APAStateControl_ApStateManagerType_ApaShakehand;
  static constexpr ApStateManagerType ApaPlanning =
    APAStateControl_ApStateManagerType_ApaPlanning;
  static constexpr ApStateManagerType ApaTerminated =
    APAStateControl_ApStateManagerType_ApaTerminated;
  static constexpr ApStateManagerType HavpStandby =
    APAStateControl_ApStateManagerType_HavpStandby;
  static constexpr ApStateManagerType HavpLearning =
    APAStateControl_ApStateManagerType_HavpLearning;
  static constexpr ApStateManagerType HavpReady =
    APAStateControl_ApStateManagerType_HavpReady;
  static constexpr ApStateManagerType HavpShakehand =
    APAStateControl_ApStateManagerType_HavpShakehand;
  static constexpr ApStateManagerType HavpControl =
    APAStateControl_ApStateManagerType_HavpControl;
  static constexpr ApStateManagerType HavpSuspend =
    APAStateControl_ApStateManagerType_HavpSuspend;
  static constexpr ApStateManagerType HavpFinish =
    APAStateControl_ApStateManagerType_HavpFinish;
  static constexpr ApStateManagerType HavpStop =
    APAStateControl_ApStateManagerType_HavpStop;
  static constexpr ApStateManagerType HavpOff =
    APAStateControl_ApStateManagerType_HavpOff;
  static constexpr ApStateManagerType HavpFailure =
    APAStateControl_ApStateManagerType_HavpFailure;
  static constexpr ApStateManagerType HavpDecelerate =
    APAStateControl_ApStateManagerType_HavpDecelerate;
  static inline bool ApStateManagerType_IsValid(int value) {
    return APAStateControl_ApStateManagerType_IsValid(value);
  }
  static constexpr ApStateManagerType ApStateManagerType_MIN =
    APAStateControl_ApStateManagerType_ApStateManagerType_MIN;
  static constexpr ApStateManagerType ApStateManagerType_MAX =
    APAStateControl_ApStateManagerType_ApStateManagerType_MAX;
  static constexpr int ApStateManagerType_ARRAYSIZE =
    APAStateControl_ApStateManagerType_ApStateManagerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ApStateManagerType_descriptor() {
    return APAStateControl_ApStateManagerType_descriptor();
  }
  template<typename T>
  static inline const std::string& ApStateManagerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ApStateManagerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ApStateManagerType_Name.");
    return APAStateControl_ApStateManagerType_Name(enum_t_value);
  }
  static inline bool ApStateManagerType_Parse(const std::string& name,
      ApStateManagerType* value) {
    return APAStateControl_ApStateManagerType_Parse(name, value);
  }

  typedef APAStateControl_ApMapResponseType ApMapResponseType;
  static constexpr ApMapResponseType kChooseMap =
    APAStateControl_ApMapResponseType_kChooseMap;
  static constexpr ApMapResponseType kParkingMappingReadyToMapping =
    APAStateControl_ApMapResponseType_kParkingMappingReadyToMapping;
  static constexpr ApMapResponseType kParkingMapping =
    APAStateControl_ApMapResponseType_kParkingMapping;
  static constexpr ApMapResponseType kParkingMappingDone =
    APAStateControl_ApMapResponseType_kParkingMappingDone;
  static constexpr ApMapResponseType kParkingMappingFailed =
    APAStateControl_ApMapResponseType_kParkingMappingFailed;
  static constexpr ApMapResponseType kParkingLocalizationReadyToMapping =
    APAStateControl_ApMapResponseType_kParkingLocalizationReadyToMapping;
  static constexpr ApMapResponseType kParkingLocalizationReadyToLocalization =
    APAStateControl_ApMapResponseType_kParkingLocalizationReadyToLocalization;
  static constexpr ApMapResponseType kParkingLocalization =
    APAStateControl_ApMapResponseType_kParkingLocalization;
  static constexpr ApMapResponseType kParkingLocalizationOutOfMap =
    APAStateControl_ApMapResponseType_kParkingLocalizationOutOfMap;
  static constexpr ApMapResponseType kParkingLocalizationDone =
    APAStateControl_ApMapResponseType_kParkingLocalizationDone;
  static constexpr ApMapResponseType kParkingLocalizationFailed =
    APAStateControl_ApMapResponseType_kParkingLocalizationFailed;
  static constexpr ApMapResponseType kBackToGround =
    APAStateControl_ApMapResponseType_kBackToGround;
  static inline bool ApMapResponseType_IsValid(int value) {
    return APAStateControl_ApMapResponseType_IsValid(value);
  }
  static constexpr ApMapResponseType ApMapResponseType_MIN =
    APAStateControl_ApMapResponseType_ApMapResponseType_MIN;
  static constexpr ApMapResponseType ApMapResponseType_MAX =
    APAStateControl_ApMapResponseType_ApMapResponseType_MAX;
  static constexpr int ApMapResponseType_ARRAYSIZE =
    APAStateControl_ApMapResponseType_ApMapResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ApMapResponseType_descriptor() {
    return APAStateControl_ApMapResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ApMapResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ApMapResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ApMapResponseType_Name.");
    return APAStateControl_ApMapResponseType_Name(enum_t_value);
  }
  static inline bool ApMapResponseType_Parse(const std::string& name,
      ApMapResponseType* value) {
    return APAStateControl_ApMapResponseType_Parse(name, value);
  }

  typedef APAStateControl_FailReason FailReason;
  static constexpr FailReason kNotFail =
    APAStateControl_FailReason_kNotFail;
  static constexpr FailReason kBackwardTooFar =
    APAStateControl_FailReason_kBackwardTooFar;
  static constexpr FailReason kSpeeding =
    APAStateControl_FailReason_kSpeeding;
  static inline bool FailReason_IsValid(int value) {
    return APAStateControl_FailReason_IsValid(value);
  }
  static constexpr FailReason FailReason_MIN =
    APAStateControl_FailReason_FailReason_MIN;
  static constexpr FailReason FailReason_MAX =
    APAStateControl_FailReason_FailReason_MAX;
  static constexpr int FailReason_ARRAYSIZE =
    APAStateControl_FailReason_FailReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FailReason_descriptor() {
    return APAStateControl_FailReason_descriptor();
  }
  template<typename T>
  static inline const std::string& FailReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FailReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FailReason_Name.");
    return APAStateControl_FailReason_Name(enum_t_value);
  }
  static inline bool FailReason_Parse(const std::string& name,
      FailReason* value) {
    return APAStateControl_FailReason_Parse(name, value);
  }

  typedef APAStateControl_ReminderType ReminderType;
  static constexpr ReminderType HmiReminderNone =
    APAStateControl_ReminderType_HmiReminderNone;
  static constexpr ReminderType HmiOverSpeed =
    APAStateControl_ReminderType_HmiOverSpeed;
  static constexpr ReminderType HmiCross =
    APAStateControl_ReminderType_HmiCross;
  static constexpr ReminderType HmiTurn =
    APAStateControl_ReminderType_HmiTurn;
  static constexpr ReminderType HmiPedestrian =
    APAStateControl_ReminderType_HmiPedestrian;
  static inline bool ReminderType_IsValid(int value) {
    return APAStateControl_ReminderType_IsValid(value);
  }
  static constexpr ReminderType ReminderType_MIN =
    APAStateControl_ReminderType_ReminderType_MIN;
  static constexpr ReminderType ReminderType_MAX =
    APAStateControl_ReminderType_ReminderType_MAX;
  static constexpr int ReminderType_ARRAYSIZE =
    APAStateControl_ReminderType_ReminderType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReminderType_descriptor() {
    return APAStateControl_ReminderType_descriptor();
  }
  template<typename T>
  static inline const std::string& ReminderType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReminderType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReminderType_Name.");
    return APAStateControl_ReminderType_Name(enum_t_value);
  }
  static inline bool ReminderType_Parse(const std::string& name,
      ReminderType* value) {
    return APAStateControl_ReminderType_Parse(name, value);
  }

  typedef APAStateControl_HmiConditionType HmiConditionType;
  static constexpr HmiConditionType HmiConditionNone =
    APAStateControl_HmiConditionType_HmiConditionNone;
  static constexpr HmiConditionType HmiTriggerParking =
    APAStateControl_HmiConditionType_HmiTriggerParking;
  static constexpr HmiConditionType HmiTriggerManualParking =
    APAStateControl_HmiConditionType_HmiTriggerManualParking;
  static constexpr HmiConditionType HmiReadyToReachPathEnd =
    APAStateControl_HmiConditionType_HmiReadyToReachPathEnd;
  static constexpr HmiConditionType HmiReadyToApa =
    APAStateControl_HmiConditionType_HmiReadyToApa;
  static constexpr HmiConditionType HmiVehicleStop =
    APAStateControl_HmiConditionType_HmiVehicleStop;
  static inline bool HmiConditionType_IsValid(int value) {
    return APAStateControl_HmiConditionType_IsValid(value);
  }
  static constexpr HmiConditionType HmiConditionType_MIN =
    APAStateControl_HmiConditionType_HmiConditionType_MIN;
  static constexpr HmiConditionType HmiConditionType_MAX =
    APAStateControl_HmiConditionType_HmiConditionType_MAX;
  static constexpr int HmiConditionType_ARRAYSIZE =
    APAStateControl_HmiConditionType_HmiConditionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HmiConditionType_descriptor() {
    return APAStateControl_HmiConditionType_descriptor();
  }
  template<typename T>
  static inline const std::string& HmiConditionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HmiConditionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HmiConditionType_Name.");
    return APAStateControl_HmiConditionType_Name(enum_t_value);
  }
  static inline bool HmiConditionType_Parse(const std::string& name,
      HmiConditionType* value) {
    return APAStateControl_HmiConditionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kStateFieldNumber = 2,
    kPilotApaModeFieldNumber = 5,
    kTickFieldNumber = 4,
    kApMapResponseTypeFieldNumber = 6,
    kAPAStateToHmiFieldNumber = 7,
    kApMapResponseFailReasonFieldNumber = 8,
    kHmiReminderTypeFieldNumber = 9,
    kHmiConditionTypeFieldNumber = 10,
    kHmiVehicleOnTrackFieldNumber = 11,
  };
  // map<int32, int32> settings = 1;
  int settings_size() const;
  private:
  int _internal_settings_size() const;
  public:
  void clear_settings();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_settings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_settings();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      settings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_settings();

  // uint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pilot_apa_mode = 5;
  void clear_pilot_apa_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 pilot_apa_mode() const;
  void set_pilot_apa_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pilot_apa_mode() const;
  void _internal_set_pilot_apa_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 tick = 4;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .minieye.APAStateControl.ApMapResponseType ap_map_response_type = 6;
  void clear_ap_map_response_type();
  ::minieye::APAStateControl_ApMapResponseType ap_map_response_type() const;
  void set_ap_map_response_type(::minieye::APAStateControl_ApMapResponseType value);
  private:
  ::minieye::APAStateControl_ApMapResponseType _internal_ap_map_response_type() const;
  void _internal_set_ap_map_response_type(::minieye::APAStateControl_ApMapResponseType value);
  public:

  // .minieye.APAStateControl.ApStateManagerType APA_state_to_hmi = 7;
  void clear_apa_state_to_hmi();
  ::minieye::APAStateControl_ApStateManagerType apa_state_to_hmi() const;
  void set_apa_state_to_hmi(::minieye::APAStateControl_ApStateManagerType value);
  private:
  ::minieye::APAStateControl_ApStateManagerType _internal_apa_state_to_hmi() const;
  void _internal_set_apa_state_to_hmi(::minieye::APAStateControl_ApStateManagerType value);
  public:

  // .minieye.APAStateControl.FailReason ap_map_response_fail_reason = 8;
  void clear_ap_map_response_fail_reason();
  ::minieye::APAStateControl_FailReason ap_map_response_fail_reason() const;
  void set_ap_map_response_fail_reason(::minieye::APAStateControl_FailReason value);
  private:
  ::minieye::APAStateControl_FailReason _internal_ap_map_response_fail_reason() const;
  void _internal_set_ap_map_response_fail_reason(::minieye::APAStateControl_FailReason value);
  public:

  // .minieye.APAStateControl.ReminderType hmi_reminder_type = 9;
  void clear_hmi_reminder_type();
  ::minieye::APAStateControl_ReminderType hmi_reminder_type() const;
  void set_hmi_reminder_type(::minieye::APAStateControl_ReminderType value);
  private:
  ::minieye::APAStateControl_ReminderType _internal_hmi_reminder_type() const;
  void _internal_set_hmi_reminder_type(::minieye::APAStateControl_ReminderType value);
  public:

  // .minieye.APAStateControl.HmiConditionType hmi_condition_type = 10;
  void clear_hmi_condition_type();
  ::minieye::APAStateControl_HmiConditionType hmi_condition_type() const;
  void set_hmi_condition_type(::minieye::APAStateControl_HmiConditionType value);
  private:
  ::minieye::APAStateControl_HmiConditionType _internal_hmi_condition_type() const;
  void _internal_set_hmi_condition_type(::minieye::APAStateControl_HmiConditionType value);
  public:

  // uint32 HmiVehicleOnTrack = 11;
  void clear_hmivehicleontrack();
  ::PROTOBUF_NAMESPACE_ID::uint32 hmivehicleontrack() const;
  void set_hmivehicleontrack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hmivehicleontrack() const;
  void _internal_set_hmivehicleontrack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.APAStateControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      APAStateControl_SettingsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > settings_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pilot_apa_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  int ap_map_response_type_;
  int apa_state_to_hmi_;
  int ap_map_response_fail_reason_;
  int hmi_reminder_type_;
  int hmi_condition_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hmivehicleontrack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apa_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// APAStateControl

// map<int32, int32> settings = 1;
inline int APAStateControl::_internal_settings_size() const {
  return settings_.size();
}
inline int APAStateControl::settings_size() const {
  return _internal_settings_size();
}
inline void APAStateControl::clear_settings() {
  settings_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
APAStateControl::_internal_settings() const {
  return settings_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
APAStateControl::settings() const {
  // @@protoc_insertion_point(field_map:minieye.APAStateControl.settings)
  return _internal_settings();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
APAStateControl::_internal_mutable_settings() {
  return settings_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
APAStateControl::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_map:minieye.APAStateControl.settings)
  return _internal_mutable_settings();
}

// uint32 state = 2;
inline void APAStateControl::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 APAStateControl::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 APAStateControl::state() const {
  // @@protoc_insertion_point(field_get:minieye.APAStateControl.state)
  return _internal_state();
}
inline void APAStateControl::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void APAStateControl::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:minieye.APAStateControl.state)
}

// uint64 timestamp = 3;
inline void APAStateControl::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 APAStateControl::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 APAStateControl::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.APAStateControl.timestamp)
  return _internal_timestamp();
}
inline void APAStateControl::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void APAStateControl::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.APAStateControl.timestamp)
}

// uint64 tick = 4;
inline void APAStateControl::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 APAStateControl::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 APAStateControl::tick() const {
  // @@protoc_insertion_point(field_get:minieye.APAStateControl.tick)
  return _internal_tick();
}
inline void APAStateControl::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void APAStateControl::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.APAStateControl.tick)
}

// uint32 pilot_apa_mode = 5;
inline void APAStateControl::clear_pilot_apa_mode() {
  pilot_apa_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 APAStateControl::_internal_pilot_apa_mode() const {
  return pilot_apa_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 APAStateControl::pilot_apa_mode() const {
  // @@protoc_insertion_point(field_get:minieye.APAStateControl.pilot_apa_mode)
  return _internal_pilot_apa_mode();
}
inline void APAStateControl::_internal_set_pilot_apa_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pilot_apa_mode_ = value;
}
inline void APAStateControl::set_pilot_apa_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pilot_apa_mode(value);
  // @@protoc_insertion_point(field_set:minieye.APAStateControl.pilot_apa_mode)
}

// .minieye.APAStateControl.ApMapResponseType ap_map_response_type = 6;
inline void APAStateControl::clear_ap_map_response_type() {
  ap_map_response_type_ = 0;
}
inline ::minieye::APAStateControl_ApMapResponseType APAStateControl::_internal_ap_map_response_type() const {
  return static_cast< ::minieye::APAStateControl_ApMapResponseType >(ap_map_response_type_);
}
inline ::minieye::APAStateControl_ApMapResponseType APAStateControl::ap_map_response_type() const {
  // @@protoc_insertion_point(field_get:minieye.APAStateControl.ap_map_response_type)
  return _internal_ap_map_response_type();
}
inline void APAStateControl::_internal_set_ap_map_response_type(::minieye::APAStateControl_ApMapResponseType value) {
  
  ap_map_response_type_ = value;
}
inline void APAStateControl::set_ap_map_response_type(::minieye::APAStateControl_ApMapResponseType value) {
  _internal_set_ap_map_response_type(value);
  // @@protoc_insertion_point(field_set:minieye.APAStateControl.ap_map_response_type)
}

// .minieye.APAStateControl.ApStateManagerType APA_state_to_hmi = 7;
inline void APAStateControl::clear_apa_state_to_hmi() {
  apa_state_to_hmi_ = 0;
}
inline ::minieye::APAStateControl_ApStateManagerType APAStateControl::_internal_apa_state_to_hmi() const {
  return static_cast< ::minieye::APAStateControl_ApStateManagerType >(apa_state_to_hmi_);
}
inline ::minieye::APAStateControl_ApStateManagerType APAStateControl::apa_state_to_hmi() const {
  // @@protoc_insertion_point(field_get:minieye.APAStateControl.APA_state_to_hmi)
  return _internal_apa_state_to_hmi();
}
inline void APAStateControl::_internal_set_apa_state_to_hmi(::minieye::APAStateControl_ApStateManagerType value) {
  
  apa_state_to_hmi_ = value;
}
inline void APAStateControl::set_apa_state_to_hmi(::minieye::APAStateControl_ApStateManagerType value) {
  _internal_set_apa_state_to_hmi(value);
  // @@protoc_insertion_point(field_set:minieye.APAStateControl.APA_state_to_hmi)
}

// .minieye.APAStateControl.FailReason ap_map_response_fail_reason = 8;
inline void APAStateControl::clear_ap_map_response_fail_reason() {
  ap_map_response_fail_reason_ = 0;
}
inline ::minieye::APAStateControl_FailReason APAStateControl::_internal_ap_map_response_fail_reason() const {
  return static_cast< ::minieye::APAStateControl_FailReason >(ap_map_response_fail_reason_);
}
inline ::minieye::APAStateControl_FailReason APAStateControl::ap_map_response_fail_reason() const {
  // @@protoc_insertion_point(field_get:minieye.APAStateControl.ap_map_response_fail_reason)
  return _internal_ap_map_response_fail_reason();
}
inline void APAStateControl::_internal_set_ap_map_response_fail_reason(::minieye::APAStateControl_FailReason value) {
  
  ap_map_response_fail_reason_ = value;
}
inline void APAStateControl::set_ap_map_response_fail_reason(::minieye::APAStateControl_FailReason value) {
  _internal_set_ap_map_response_fail_reason(value);
  // @@protoc_insertion_point(field_set:minieye.APAStateControl.ap_map_response_fail_reason)
}

// .minieye.APAStateControl.ReminderType hmi_reminder_type = 9;
inline void APAStateControl::clear_hmi_reminder_type() {
  hmi_reminder_type_ = 0;
}
inline ::minieye::APAStateControl_ReminderType APAStateControl::_internal_hmi_reminder_type() const {
  return static_cast< ::minieye::APAStateControl_ReminderType >(hmi_reminder_type_);
}
inline ::minieye::APAStateControl_ReminderType APAStateControl::hmi_reminder_type() const {
  // @@protoc_insertion_point(field_get:minieye.APAStateControl.hmi_reminder_type)
  return _internal_hmi_reminder_type();
}
inline void APAStateControl::_internal_set_hmi_reminder_type(::minieye::APAStateControl_ReminderType value) {
  
  hmi_reminder_type_ = value;
}
inline void APAStateControl::set_hmi_reminder_type(::minieye::APAStateControl_ReminderType value) {
  _internal_set_hmi_reminder_type(value);
  // @@protoc_insertion_point(field_set:minieye.APAStateControl.hmi_reminder_type)
}

// .minieye.APAStateControl.HmiConditionType hmi_condition_type = 10;
inline void APAStateControl::clear_hmi_condition_type() {
  hmi_condition_type_ = 0;
}
inline ::minieye::APAStateControl_HmiConditionType APAStateControl::_internal_hmi_condition_type() const {
  return static_cast< ::minieye::APAStateControl_HmiConditionType >(hmi_condition_type_);
}
inline ::minieye::APAStateControl_HmiConditionType APAStateControl::hmi_condition_type() const {
  // @@protoc_insertion_point(field_get:minieye.APAStateControl.hmi_condition_type)
  return _internal_hmi_condition_type();
}
inline void APAStateControl::_internal_set_hmi_condition_type(::minieye::APAStateControl_HmiConditionType value) {
  
  hmi_condition_type_ = value;
}
inline void APAStateControl::set_hmi_condition_type(::minieye::APAStateControl_HmiConditionType value) {
  _internal_set_hmi_condition_type(value);
  // @@protoc_insertion_point(field_set:minieye.APAStateControl.hmi_condition_type)
}

// uint32 HmiVehicleOnTrack = 11;
inline void APAStateControl::clear_hmivehicleontrack() {
  hmivehicleontrack_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 APAStateControl::_internal_hmivehicleontrack() const {
  return hmivehicleontrack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 APAStateControl::hmivehicleontrack() const {
  // @@protoc_insertion_point(field_get:minieye.APAStateControl.HmiVehicleOnTrack)
  return _internal_hmivehicleontrack();
}
inline void APAStateControl::_internal_set_hmivehicleontrack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hmivehicleontrack_ = value;
}
inline void APAStateControl::set_hmivehicleontrack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hmivehicleontrack(value);
  // @@protoc_insertion_point(field_set:minieye.APAStateControl.HmiVehicleOnTrack)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minieye::APAStateControl_SettingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::APAStateControl_SettingType>() {
  return ::minieye::APAStateControl_SettingType_descriptor();
}
template <> struct is_proto_enum< ::minieye::APAStateControl_ApStateManagerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::APAStateControl_ApStateManagerType>() {
  return ::minieye::APAStateControl_ApStateManagerType_descriptor();
}
template <> struct is_proto_enum< ::minieye::APAStateControl_ApMapResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::APAStateControl_ApMapResponseType>() {
  return ::minieye::APAStateControl_ApMapResponseType_descriptor();
}
template <> struct is_proto_enum< ::minieye::APAStateControl_FailReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::APAStateControl_FailReason>() {
  return ::minieye::APAStateControl_FailReason_descriptor();
}
template <> struct is_proto_enum< ::minieye::APAStateControl_ReminderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::APAStateControl_ReminderType>() {
  return ::minieye::APAStateControl_ReminderType_descriptor();
}
template <> struct is_proto_enum< ::minieye::APAStateControl_HmiConditionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::APAStateControl_HmiConditionType>() {
  return ::minieye::APAStateControl_HmiConditionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_apa_5fstate_2eproto
