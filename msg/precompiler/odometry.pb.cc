// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: odometry.proto

#include "odometry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_odometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OdometryPose_odometry_2eproto;
namespace minieye {
class OdometryPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OdometryPose> _instance;
} _OdometryPose_default_instance_;
class OdometryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Odometry> _instance;
} _Odometry_default_instance_;
class EgoMotionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EgoMotion> _instance;
} _EgoMotion_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_EgoMotion_odometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_EgoMotion_default_instance_;
    new (ptr) ::minieye::EgoMotion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::EgoMotion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EgoMotion_odometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EgoMotion_odometry_2eproto}, {}};

static void InitDefaultsscc_info_Odometry_odometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_Odometry_default_instance_;
    new (ptr) ::minieye::Odometry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::Odometry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Odometry_odometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Odometry_odometry_2eproto}, {
      &scc_info_OdometryPose_odometry_2eproto.base,}};

static void InitDefaultsscc_info_OdometryPose_odometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_OdometryPose_default_instance_;
    new (ptr) ::minieye::OdometryPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::OdometryPose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OdometryPose_odometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OdometryPose_odometry_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_odometry_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_odometry_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_odometry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_odometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, pitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, pitch_var_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, is_pitch_valid_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, rot_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, pos_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, vel_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, imu_acc_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, imu_gyr_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, ba_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, bg_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, vx_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, vx_var_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, is_vx_valid_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, ax_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, ax_var_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, is_ax_valid_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, yaw_rate_var_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, is_yaw_rate_valid_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, pitch_rate_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, pitch_rate_var_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, is_pitch_rate_valid_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, can_ax_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, can_ax_var_),
  PROTOBUF_FIELD_OFFSET(::minieye::OdometryPose, is_can_ax_valid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry, predict_pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::EgoMotion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::EgoMotion, speed_mps_),
  PROTOBUF_FIELD_OFFSET(::minieye::EgoMotion, is_imu_valid_),
  PROTOBUF_FIELD_OFFSET(::minieye::EgoMotion, dyaw_),
  PROTOBUF_FIELD_OFFSET(::minieye::EgoMotion, is_dyaw_valid_),
  PROTOBUF_FIELD_OFFSET(::minieye::EgoMotion, dpitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::EgoMotion, is_dpitch_valid_),
  PROTOBUF_FIELD_OFFSET(::minieye::EgoMotion, dt_ms_),
  PROTOBUF_FIELD_OFFSET(::minieye::EgoMotion, curr_timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::OdometryPose)},
  { 32, -1, sizeof(::minieye::Odometry)},
  { 38, -1, sizeof(::minieye::EgoMotion)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_OdometryPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_Odometry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_EgoMotion_default_instance_),
};

const char descriptor_table_protodef_odometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016odometry.proto\022\007minieye\"\365\003\n\014OdometryPo"
  "se\022\021\n\ttimestamp\030\001 \001(\004\022\014\n\004tick\030\002 \001(\004\022\r\n\005p"
  "itch\030\003 \001(\002\022\021\n\tpitch_var\030\004 \001(\002\022\026\n\016is_pitc"
  "h_valid\030\005 \001(\010\022\013\n\003rot\030\006 \003(\002\022\013\n\003pos\030\007 \003(\002\022"
  "\013\n\003vel\030\010 \003(\002\022\017\n\007imu_acc\030\t \003(\002\022\017\n\007imu_gyr"
  "\030\n \003(\002\022\n\n\002ba\030\013 \003(\002\022\n\n\002bg\030\014 \003(\002\022\n\n\002vx\030\r \001"
  "(\002\022\016\n\006vx_var\030\016 \001(\002\022\023\n\013is_vx_valid\030\017 \001(\010\022"
  "\n\n\002ax\030\020 \001(\002\022\016\n\006ax_var\030\021 \001(\002\022\023\n\013is_ax_val"
  "id\030\022 \001(\010\022\020\n\010yaw_rate\030\023 \001(\002\022\024\n\014yaw_rate_v"
  "ar\030\024 \001(\002\022\031\n\021is_yaw_rate_valid\030\025 \001(\010\022\022\n\np"
  "itch_rate\030\026 \001(\002\022\026\n\016pitch_rate_var\030\027 \001(\002\022"
  "\033\n\023is_pitch_rate_valid\030\030 \001(\010\022\016\n\006can_ax\030\031"
  " \001(\002\022\022\n\ncan_ax_var\030\032 \001(\002\022\027\n\017is_can_ax_va"
  "lid\030\033 \001(\010\"7\n\010Odometry\022+\n\014predict_pose\030\001 "
  "\003(\0132\025.minieye.OdometryPose\"\251\001\n\tEgoMotion"
  "\022\021\n\tspeed_mps\030\001 \001(\002\022\024\n\014is_imu_valid\030\002 \001("
  "\010\022\014\n\004dyaw\030\003 \001(\002\022\025\n\ris_dyaw_valid\030\004 \001(\010\022\016"
  "\n\006dpitch\030\005 \001(\002\022\027\n\017is_dpitch_valid\030\006 \001(\010\022"
  "\r\n\005dt_ms\030\007 \001(\005\022\026\n\016curr_timestamp\030\010 \001(\004b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_odometry_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_odometry_2eproto_sccs[3] = {
  &scc_info_EgoMotion_odometry_2eproto.base,
  &scc_info_Odometry_odometry_2eproto.base,
  &scc_info_OdometryPose_odometry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_odometry_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_odometry_2eproto = {
  false, false, descriptor_table_protodef_odometry_2eproto, "odometry.proto", 766,
  &descriptor_table_odometry_2eproto_once, descriptor_table_odometry_2eproto_sccs, descriptor_table_odometry_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_odometry_2eproto::offsets,
  file_level_metadata_odometry_2eproto, 3, file_level_enum_descriptors_odometry_2eproto, file_level_service_descriptors_odometry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_odometry_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_odometry_2eproto)), true);
namespace minieye {

// ===================================================================

void OdometryPose::InitAsDefaultInstance() {
}
class OdometryPose::_Internal {
 public:
};

OdometryPose::OdometryPose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rot_(arena),
  pos_(arena),
  vel_(arena),
  imu_acc_(arena),
  imu_gyr_(arena),
  ba_(arena),
  bg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.OdometryPose)
}
OdometryPose::OdometryPose(const OdometryPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rot_(from.rot_),
      pos_(from.pos_),
      vel_(from.vel_),
      imu_acc_(from.imu_acc_),
      imu_gyr_(from.imu_gyr_),
      ba_(from.ba_),
      bg_(from.bg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_ax_var_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(can_ax_var_));
  // @@protoc_insertion_point(copy_constructor:minieye.OdometryPose)
}

void OdometryPose::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_ax_var_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(can_ax_var_));
}

OdometryPose::~OdometryPose() {
  // @@protoc_insertion_point(destructor:minieye.OdometryPose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OdometryPose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OdometryPose::ArenaDtor(void* object) {
  OdometryPose* _this = reinterpret_cast< OdometryPose* >(object);
  (void)_this;
}
void OdometryPose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OdometryPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OdometryPose& OdometryPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OdometryPose_odometry_2eproto.base);
  return *internal_default_instance();
}


void OdometryPose::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.OdometryPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rot_.Clear();
  pos_.Clear();
  vel_.Clear();
  imu_acc_.Clear();
  imu_gyr_.Clear();
  ba_.Clear();
  bg_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_ax_var_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(can_ax_var_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OdometryPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pitch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_var = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          pitch_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_pitch_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_pitch_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float rot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_rot(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float vel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69) {
          _internal_add_vel(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float imu_acc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_imu_acc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_imu_acc(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float imu_gyr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_imu_gyr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85) {
          _internal_add_imu_gyr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float ba = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ba(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          _internal_add_ba(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float bg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bg(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          _internal_add_bg(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vx_var = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          vx_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_vx_valid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          is_vx_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ax = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          ax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ax_var = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          ax_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_ax_valid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          is_ax_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float yaw_rate = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_rate_var = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          yaw_rate_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_yaw_rate_valid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          is_yaw_rate_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pitch_rate = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          pitch_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_rate_var = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          pitch_rate_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_pitch_rate_valid = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          is_pitch_rate_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float can_ax = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          can_ax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float can_ax_var = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          can_ax_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_can_ax_valid = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          is_can_ax_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OdometryPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.OdometryPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tick(), target);
  }

  // float pitch = 3;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pitch(), target);
  }

  // float pitch_var = 4;
  if (!(this->pitch_var() <= 0 && this->pitch_var() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_pitch_var(), target);
  }

  // bool is_pitch_valid = 5;
  if (this->is_pitch_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_pitch_valid(), target);
  }

  // repeated float rot = 6;
  if (this->_internal_rot_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_rot(), target);
  }

  // repeated float pos = 7;
  if (this->_internal_pos_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_pos(), target);
  }

  // repeated float vel = 8;
  if (this->_internal_vel_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_vel(), target);
  }

  // repeated float imu_acc = 9;
  if (this->_internal_imu_acc_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_imu_acc(), target);
  }

  // repeated float imu_gyr = 10;
  if (this->_internal_imu_gyr_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_imu_gyr(), target);
  }

  // repeated float ba = 11;
  if (this->_internal_ba_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_ba(), target);
  }

  // repeated float bg = 12;
  if (this->_internal_bg_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_bg(), target);
  }

  // float vx = 13;
  if (!(this->vx() <= 0 && this->vx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_vx(), target);
  }

  // float vx_var = 14;
  if (!(this->vx_var() <= 0 && this->vx_var() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_vx_var(), target);
  }

  // bool is_vx_valid = 15;
  if (this->is_vx_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_vx_valid(), target);
  }

  // float ax = 16;
  if (!(this->ax() <= 0 && this->ax() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_ax(), target);
  }

  // float ax_var = 17;
  if (!(this->ax_var() <= 0 && this->ax_var() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_ax_var(), target);
  }

  // bool is_ax_valid = 18;
  if (this->is_ax_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_ax_valid(), target);
  }

  // float yaw_rate = 19;
  if (!(this->yaw_rate() <= 0 && this->yaw_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_yaw_rate(), target);
  }

  // float yaw_rate_var = 20;
  if (!(this->yaw_rate_var() <= 0 && this->yaw_rate_var() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_yaw_rate_var(), target);
  }

  // bool is_yaw_rate_valid = 21;
  if (this->is_yaw_rate_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_is_yaw_rate_valid(), target);
  }

  // float pitch_rate = 22;
  if (!(this->pitch_rate() <= 0 && this->pitch_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_pitch_rate(), target);
  }

  // float pitch_rate_var = 23;
  if (!(this->pitch_rate_var() <= 0 && this->pitch_rate_var() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_pitch_rate_var(), target);
  }

  // bool is_pitch_rate_valid = 24;
  if (this->is_pitch_rate_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_is_pitch_rate_valid(), target);
  }

  // float can_ax = 25;
  if (!(this->can_ax() <= 0 && this->can_ax() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_can_ax(), target);
  }

  // float can_ax_var = 26;
  if (!(this->can_ax_var() <= 0 && this->can_ax_var() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_can_ax_var(), target);
  }

  // bool is_can_ax_valid = 27;
  if (this->is_can_ax_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_is_can_ax_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.OdometryPose)
  return target;
}

size_t OdometryPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.OdometryPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float rot = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float pos = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float vel = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vel_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vel_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float imu_acc = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_imu_acc_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _imu_acc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float imu_gyr = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_imu_gyr_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _imu_gyr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float ba = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ba_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ba_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float bg = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bg_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bg_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // float pitch = 3;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch_var = 4;
  if (!(this->pitch_var() <= 0 && this->pitch_var() >= 0)) {
    total_size += 1 + 4;
  }

  // float vx = 13;
  if (!(this->vx() <= 0 && this->vx() >= 0)) {
    total_size += 1 + 4;
  }

  // float vx_var = 14;
  if (!(this->vx_var() <= 0 && this->vx_var() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_pitch_valid = 5;
  if (this->is_pitch_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_vx_valid = 15;
  if (this->is_vx_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_ax_valid = 18;
  if (this->is_ax_valid() != 0) {
    total_size += 2 + 1;
  }

  // bool is_yaw_rate_valid = 21;
  if (this->is_yaw_rate_valid() != 0) {
    total_size += 2 + 1;
  }

  // float ax = 16;
  if (!(this->ax() <= 0 && this->ax() >= 0)) {
    total_size += 2 + 4;
  }

  // float ax_var = 17;
  if (!(this->ax_var() <= 0 && this->ax_var() >= 0)) {
    total_size += 2 + 4;
  }

  // float yaw_rate = 19;
  if (!(this->yaw_rate() <= 0 && this->yaw_rate() >= 0)) {
    total_size += 2 + 4;
  }

  // float yaw_rate_var = 20;
  if (!(this->yaw_rate_var() <= 0 && this->yaw_rate_var() >= 0)) {
    total_size += 2 + 4;
  }

  // float pitch_rate = 22;
  if (!(this->pitch_rate() <= 0 && this->pitch_rate() >= 0)) {
    total_size += 2 + 4;
  }

  // float pitch_rate_var = 23;
  if (!(this->pitch_rate_var() <= 0 && this->pitch_rate_var() >= 0)) {
    total_size += 2 + 4;
  }

  // float can_ax = 25;
  if (!(this->can_ax() <= 0 && this->can_ax() >= 0)) {
    total_size += 2 + 4;
  }

  // bool is_pitch_rate_valid = 24;
  if (this->is_pitch_rate_valid() != 0) {
    total_size += 2 + 1;
  }

  // bool is_can_ax_valid = 27;
  if (this->is_can_ax_valid() != 0) {
    total_size += 2 + 1;
  }

  // float can_ax_var = 26;
  if (!(this->can_ax_var() <= 0 && this->can_ax_var() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdometryPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.OdometryPose)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OdometryPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.OdometryPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.OdometryPose)
    MergeFrom(*source);
  }
}

void OdometryPose::MergeFrom(const OdometryPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.OdometryPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rot_.MergeFrom(from.rot_);
  pos_.MergeFrom(from.pos_);
  vel_.MergeFrom(from.vel_);
  imu_acc_.MergeFrom(from.imu_acc_);
  imu_gyr_.MergeFrom(from.imu_gyr_);
  ba_.MergeFrom(from.ba_);
  bg_.MergeFrom(from.bg_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.pitch_var() <= 0 && from.pitch_var() >= 0)) {
    _internal_set_pitch_var(from._internal_pitch_var());
  }
  if (!(from.vx() <= 0 && from.vx() >= 0)) {
    _internal_set_vx(from._internal_vx());
  }
  if (!(from.vx_var() <= 0 && from.vx_var() >= 0)) {
    _internal_set_vx_var(from._internal_vx_var());
  }
  if (from.is_pitch_valid() != 0) {
    _internal_set_is_pitch_valid(from._internal_is_pitch_valid());
  }
  if (from.is_vx_valid() != 0) {
    _internal_set_is_vx_valid(from._internal_is_vx_valid());
  }
  if (from.is_ax_valid() != 0) {
    _internal_set_is_ax_valid(from._internal_is_ax_valid());
  }
  if (from.is_yaw_rate_valid() != 0) {
    _internal_set_is_yaw_rate_valid(from._internal_is_yaw_rate_valid());
  }
  if (!(from.ax() <= 0 && from.ax() >= 0)) {
    _internal_set_ax(from._internal_ax());
  }
  if (!(from.ax_var() <= 0 && from.ax_var() >= 0)) {
    _internal_set_ax_var(from._internal_ax_var());
  }
  if (!(from.yaw_rate() <= 0 && from.yaw_rate() >= 0)) {
    _internal_set_yaw_rate(from._internal_yaw_rate());
  }
  if (!(from.yaw_rate_var() <= 0 && from.yaw_rate_var() >= 0)) {
    _internal_set_yaw_rate_var(from._internal_yaw_rate_var());
  }
  if (!(from.pitch_rate() <= 0 && from.pitch_rate() >= 0)) {
    _internal_set_pitch_rate(from._internal_pitch_rate());
  }
  if (!(from.pitch_rate_var() <= 0 && from.pitch_rate_var() >= 0)) {
    _internal_set_pitch_rate_var(from._internal_pitch_rate_var());
  }
  if (!(from.can_ax() <= 0 && from.can_ax() >= 0)) {
    _internal_set_can_ax(from._internal_can_ax());
  }
  if (from.is_pitch_rate_valid() != 0) {
    _internal_set_is_pitch_rate_valid(from._internal_is_pitch_rate_valid());
  }
  if (from.is_can_ax_valid() != 0) {
    _internal_set_is_can_ax_valid(from._internal_is_can_ax_valid());
  }
  if (!(from.can_ax_var() <= 0 && from.can_ax_var() >= 0)) {
    _internal_set_can_ax_var(from._internal_can_ax_var());
  }
}

void OdometryPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.OdometryPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryPose::CopyFrom(const OdometryPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.OdometryPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryPose::IsInitialized() const {
  return true;
}

void OdometryPose::InternalSwap(OdometryPose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rot_.InternalSwap(&other->rot_);
  pos_.InternalSwap(&other->pos_);
  vel_.InternalSwap(&other->vel_);
  imu_acc_.InternalSwap(&other->imu_acc_);
  imu_gyr_.InternalSwap(&other->imu_gyr_);
  ba_.InternalSwap(&other->ba_);
  bg_.InternalSwap(&other->bg_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OdometryPose, can_ax_var_)
      + sizeof(OdometryPose::can_ax_var_)
      - PROTOBUF_FIELD_OFFSET(OdometryPose, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OdometryPose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Odometry::InitAsDefaultInstance() {
}
class Odometry::_Internal {
 public:
};

Odometry::Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  predict_pose_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.Odometry)
}
Odometry::Odometry(const Odometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      predict_pose_(from.predict_pose_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minieye.Odometry)
}

void Odometry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Odometry_odometry_2eproto.base);
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:minieye.Odometry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Odometry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Odometry::ArenaDtor(void* object) {
  Odometry* _this = reinterpret_cast< Odometry* >(object);
  (void)_this;
}
void Odometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Odometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Odometry& Odometry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Odometry_odometry_2eproto.base);
  return *internal_default_instance();
}


void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predict_pose_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Odometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .minieye.OdometryPose predict_pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predict_pose(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Odometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minieye.OdometryPose predict_pose = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predict_pose_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_predict_pose(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.Odometry)
  return target;
}

size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.Odometry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.OdometryPose predict_pose = 1;
  total_size += 1UL * this->_internal_predict_pose_size();
  for (const auto& msg : this->predict_pose_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odometry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Odometry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Odometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.Odometry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.Odometry)
    MergeFrom(*source);
  }
}

void Odometry::MergeFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predict_pose_.MergeFrom(from.predict_pose_);
}

void Odometry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry::IsInitialized() const {
  return true;
}

void Odometry::InternalSwap(Odometry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  predict_pose_.InternalSwap(&other->predict_pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Odometry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EgoMotion::InitAsDefaultInstance() {
}
class EgoMotion::_Internal {
 public:
};

EgoMotion::EgoMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.EgoMotion)
}
EgoMotion::EgoMotion(const EgoMotion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&speed_mps_, &from.speed_mps_,
    static_cast<size_t>(reinterpret_cast<char*>(&dt_ms_) -
    reinterpret_cast<char*>(&speed_mps_)) + sizeof(dt_ms_));
  // @@protoc_insertion_point(copy_constructor:minieye.EgoMotion)
}

void EgoMotion::SharedCtor() {
  ::memset(&speed_mps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dt_ms_) -
      reinterpret_cast<char*>(&speed_mps_)) + sizeof(dt_ms_));
}

EgoMotion::~EgoMotion() {
  // @@protoc_insertion_point(destructor:minieye.EgoMotion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EgoMotion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EgoMotion::ArenaDtor(void* object) {
  EgoMotion* _this = reinterpret_cast< EgoMotion* >(object);
  (void)_this;
}
void EgoMotion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EgoMotion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EgoMotion& EgoMotion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EgoMotion_odometry_2eproto.base);
  return *internal_default_instance();
}


void EgoMotion::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.EgoMotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speed_mps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dt_ms_) -
      reinterpret_cast<char*>(&speed_mps_)) + sizeof(dt_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EgoMotion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float speed_mps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          speed_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_imu_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_imu_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dyaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          dyaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_dyaw_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_dyaw_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dpitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          dpitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_dpitch_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_dpitch_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dt_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          dt_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 curr_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          curr_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EgoMotion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.EgoMotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speed_mps = 1;
  if (!(this->speed_mps() <= 0 && this->speed_mps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speed_mps(), target);
  }

  // bool is_imu_valid = 2;
  if (this->is_imu_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_imu_valid(), target);
  }

  // float dyaw = 3;
  if (!(this->dyaw() <= 0 && this->dyaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_dyaw(), target);
  }

  // bool is_dyaw_valid = 4;
  if (this->is_dyaw_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_dyaw_valid(), target);
  }

  // float dpitch = 5;
  if (!(this->dpitch() <= 0 && this->dpitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_dpitch(), target);
  }

  // bool is_dpitch_valid = 6;
  if (this->is_dpitch_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_dpitch_valid(), target);
  }

  // int32 dt_ms = 7;
  if (this->dt_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_dt_ms(), target);
  }

  // uint64 curr_timestamp = 8;
  if (this->curr_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_curr_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.EgoMotion)
  return target;
}

size_t EgoMotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.EgoMotion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float speed_mps = 1;
  if (!(this->speed_mps() <= 0 && this->speed_mps() >= 0)) {
    total_size += 1 + 4;
  }

  // float dyaw = 3;
  if (!(this->dyaw() <= 0 && this->dyaw() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_imu_valid = 2;
  if (this->is_imu_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dyaw_valid = 4;
  if (this->is_dyaw_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dpitch_valid = 6;
  if (this->is_dpitch_valid() != 0) {
    total_size += 1 + 1;
  }

  // float dpitch = 5;
  if (!(this->dpitch() <= 0 && this->dpitch() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 curr_timestamp = 8;
  if (this->curr_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_curr_timestamp());
  }

  // int32 dt_ms = 7;
  if (this->dt_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dt_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EgoMotion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.EgoMotion)
  GOOGLE_DCHECK_NE(&from, this);
  const EgoMotion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EgoMotion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.EgoMotion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.EgoMotion)
    MergeFrom(*source);
  }
}

void EgoMotion::MergeFrom(const EgoMotion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.EgoMotion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.speed_mps() <= 0 && from.speed_mps() >= 0)) {
    _internal_set_speed_mps(from._internal_speed_mps());
  }
  if (!(from.dyaw() <= 0 && from.dyaw() >= 0)) {
    _internal_set_dyaw(from._internal_dyaw());
  }
  if (from.is_imu_valid() != 0) {
    _internal_set_is_imu_valid(from._internal_is_imu_valid());
  }
  if (from.is_dyaw_valid() != 0) {
    _internal_set_is_dyaw_valid(from._internal_is_dyaw_valid());
  }
  if (from.is_dpitch_valid() != 0) {
    _internal_set_is_dpitch_valid(from._internal_is_dpitch_valid());
  }
  if (!(from.dpitch() <= 0 && from.dpitch() >= 0)) {
    _internal_set_dpitch(from._internal_dpitch());
  }
  if (from.curr_timestamp() != 0) {
    _internal_set_curr_timestamp(from._internal_curr_timestamp());
  }
  if (from.dt_ms() != 0) {
    _internal_set_dt_ms(from._internal_dt_ms());
  }
}

void EgoMotion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.EgoMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgoMotion::CopyFrom(const EgoMotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.EgoMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EgoMotion::IsInitialized() const {
  return true;
}

void EgoMotion::InternalSwap(EgoMotion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgoMotion, dt_ms_)
      + sizeof(EgoMotion::dt_ms_)
      - PROTOBUF_FIELD_OFFSET(EgoMotion, speed_mps_)>(
          reinterpret_cast<char*>(&speed_mps_),
          reinterpret_cast<char*>(&other->speed_mps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EgoMotion::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::OdometryPose* Arena::CreateMaybeMessage< ::minieye::OdometryPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::OdometryPose >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::Odometry* Arena::CreateMaybeMessage< ::minieye::Odometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::Odometry >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::EgoMotion* Arena::CreateMaybeMessage< ::minieye::EgoMotion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::EgoMotion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
