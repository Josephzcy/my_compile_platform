// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parking_object.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parking_5fobject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parking_5fobject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parking_5fobject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parking_5fobject_2eproto;
namespace minieye {
namespace parking {
class Co2Point2f;
class Co2Point2fDefaultTypeInternal;
extern Co2Point2fDefaultTypeInternal _Co2Point2f_default_instance_;
class Co3Point1f;
class Co3Point1fDefaultTypeInternal;
extern Co3Point1fDefaultTypeInternal _Co3Point1f_default_instance_;
class Co3Point2f;
class Co3Point2fDefaultTypeInternal;
extern Co3Point2fDefaultTypeInternal _Co3Point2f_default_instance_;
class Detect2dData;
class Detect2dDataDefaultTypeInternal;
extern Detect2dDataDefaultTypeInternal _Detect2dData_default_instance_;
class Detect3dData;
class Detect3dDataDefaultTypeInternal;
extern Detect3dDataDefaultTypeInternal _Detect3dData_default_instance_;
class ImageInfo;
class ImageInfoDefaultTypeInternal;
extern ImageInfoDefaultTypeInternal _ImageInfo_default_instance_;
class ObjectBev;
class ObjectBevDefaultTypeInternal;
extern ObjectBevDefaultTypeInternal _ObjectBev_default_instance_;
class ObjectList;
class ObjectListDefaultTypeInternal;
extern ObjectListDefaultTypeInternal _ObjectList_default_instance_;
class ObjectListV1;
class ObjectListV1DefaultTypeInternal;
extern ObjectListV1DefaultTypeInternal _ObjectListV1_default_instance_;
class ObjectMono3d;
class ObjectMono3dDefaultTypeInternal;
extern ObjectMono3dDefaultTypeInternal _ObjectMono3d_default_instance_;
class ObjectTrack;
class ObjectTrackDefaultTypeInternal;
extern ObjectTrackDefaultTypeInternal _ObjectTrack_default_instance_;
class ObjectTrackList;
class ObjectTrackListDefaultTypeInternal;
extern ObjectTrackListDefaultTypeInternal _ObjectTrackList_default_instance_;
class ObjectTrackListV1;
class ObjectTrackListV1DefaultTypeInternal;
extern ObjectTrackListV1DefaultTypeInternal _ObjectTrackListV1_default_instance_;
class ObjectTrackV1;
class ObjectTrackV1DefaultTypeInternal;
extern ObjectTrackV1DefaultTypeInternal _ObjectTrackV1_default_instance_;
class ObjectV1;
class ObjectV1DefaultTypeInternal;
extern ObjectV1DefaultTypeInternal _ObjectV1_default_instance_;
class OdomInfo;
class OdomInfoDefaultTypeInternal;
extern OdomInfoDefaultTypeInternal _OdomInfo_default_instance_;
class Point2f;
class Point2fDefaultTypeInternal;
extern Point2fDefaultTypeInternal _Point2f_default_instance_;
class Point3f;
class Point3fDefaultTypeInternal;
extern Point3fDefaultTypeInternal _Point3f_default_instance_;
class TrackDebug;
class TrackDebugDefaultTypeInternal;
extern TrackDebugDefaultTypeInternal _TrackDebug_default_instance_;
class TrackDebugObject;
class TrackDebugObjectDefaultTypeInternal;
extern TrackDebugObjectDefaultTypeInternal _TrackDebugObject_default_instance_;
class TrackEgoState;
class TrackEgoStateDefaultTypeInternal;
extern TrackEgoStateDefaultTypeInternal _TrackEgoState_default_instance_;
class TrackMixTargetState;
class TrackMixTargetStateDefaultTypeInternal;
extern TrackMixTargetStateDefaultTypeInternal _TrackMixTargetState_default_instance_;
class TrackModel;
class TrackModelDefaultTypeInternal;
extern TrackModelDefaultTypeInternal _TrackModel_default_instance_;
class VehicleInfo;
class VehicleInfoDefaultTypeInternal;
extern VehicleInfoDefaultTypeInternal _VehicleInfo_default_instance_;
}  // namespace parking
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::parking::Co2Point2f* Arena::CreateMaybeMessage<::minieye::parking::Co2Point2f>(Arena*);
template<> ::minieye::parking::Co3Point1f* Arena::CreateMaybeMessage<::minieye::parking::Co3Point1f>(Arena*);
template<> ::minieye::parking::Co3Point2f* Arena::CreateMaybeMessage<::minieye::parking::Co3Point2f>(Arena*);
template<> ::minieye::parking::Detect2dData* Arena::CreateMaybeMessage<::minieye::parking::Detect2dData>(Arena*);
template<> ::minieye::parking::Detect3dData* Arena::CreateMaybeMessage<::minieye::parking::Detect3dData>(Arena*);
template<> ::minieye::parking::ImageInfo* Arena::CreateMaybeMessage<::minieye::parking::ImageInfo>(Arena*);
template<> ::minieye::parking::ObjectBev* Arena::CreateMaybeMessage<::minieye::parking::ObjectBev>(Arena*);
template<> ::minieye::parking::ObjectList* Arena::CreateMaybeMessage<::minieye::parking::ObjectList>(Arena*);
template<> ::minieye::parking::ObjectListV1* Arena::CreateMaybeMessage<::minieye::parking::ObjectListV1>(Arena*);
template<> ::minieye::parking::ObjectMono3d* Arena::CreateMaybeMessage<::minieye::parking::ObjectMono3d>(Arena*);
template<> ::minieye::parking::ObjectTrack* Arena::CreateMaybeMessage<::minieye::parking::ObjectTrack>(Arena*);
template<> ::minieye::parking::ObjectTrackList* Arena::CreateMaybeMessage<::minieye::parking::ObjectTrackList>(Arena*);
template<> ::minieye::parking::ObjectTrackListV1* Arena::CreateMaybeMessage<::minieye::parking::ObjectTrackListV1>(Arena*);
template<> ::minieye::parking::ObjectTrackV1* Arena::CreateMaybeMessage<::minieye::parking::ObjectTrackV1>(Arena*);
template<> ::minieye::parking::ObjectV1* Arena::CreateMaybeMessage<::minieye::parking::ObjectV1>(Arena*);
template<> ::minieye::parking::OdomInfo* Arena::CreateMaybeMessage<::minieye::parking::OdomInfo>(Arena*);
template<> ::minieye::parking::Point2f* Arena::CreateMaybeMessage<::minieye::parking::Point2f>(Arena*);
template<> ::minieye::parking::Point3f* Arena::CreateMaybeMessage<::minieye::parking::Point3f>(Arena*);
template<> ::minieye::parking::TrackDebug* Arena::CreateMaybeMessage<::minieye::parking::TrackDebug>(Arena*);
template<> ::minieye::parking::TrackDebugObject* Arena::CreateMaybeMessage<::minieye::parking::TrackDebugObject>(Arena*);
template<> ::minieye::parking::TrackEgoState* Arena::CreateMaybeMessage<::minieye::parking::TrackEgoState>(Arena*);
template<> ::minieye::parking::TrackMixTargetState* Arena::CreateMaybeMessage<::minieye::parking::TrackMixTargetState>(Arena*);
template<> ::minieye::parking::TrackModel* Arena::CreateMaybeMessage<::minieye::parking::TrackModel>(Arena*);
template<> ::minieye::parking::VehicleInfo* Arena::CreateMaybeMessage<::minieye::parking::VehicleInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {
namespace parking {

enum ObjectType : int {
  kNone = 0,
  kVehicle = 1,
  kWheelTwo = 2,
  kRider = 3,
  kPed = 4,
  kCone = 5,
  kWsign = 6,
  kStone = 7,
  kPiles = 8,
  kLock = 9,
  kPillar = 10,
  ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ObjectType_IsValid(int value);
constexpr ObjectType ObjectType_MIN = kNone;
constexpr ObjectType ObjectType_MAX = kPillar;
constexpr int ObjectType_ARRAYSIZE = ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor();
template<typename T>
inline const std::string& ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectType_descriptor(), enum_t_value);
}
inline bool ObjectType_Parse(
    const std::string& name, ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectType>(
    ObjectType_descriptor(), name, value);
}
enum CameraId : int {
  kCameraNone = 0,
  kFisheyeFront = 1,
  kFisheyeRear = 2,
  kFisheyeLeft = 3,
  kFisheyeRight = 4,
  kMainFront = 5,
  kFrontSideLeft = 6,
  kFrontSideRight = 7,
  CameraId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CameraId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CameraId_IsValid(int value);
constexpr CameraId CameraId_MIN = kCameraNone;
constexpr CameraId CameraId_MAX = kFrontSideRight;
constexpr int CameraId_ARRAYSIZE = CameraId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraId_descriptor();
template<typename T>
inline const std::string& CameraId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraId_descriptor(), enum_t_value);
}
inline bool CameraId_Parse(
    const std::string& name, CameraId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraId>(
    CameraId_descriptor(), name, value);
}
enum TrackingStatus : int {
  kInit = 0,
  kPredict = 1,
  kTracking = 2,
  kLost = 4,
  TrackingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TrackingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TrackingStatus_IsValid(int value);
constexpr TrackingStatus TrackingStatus_MIN = kInit;
constexpr TrackingStatus TrackingStatus_MAX = kLost;
constexpr int TrackingStatus_ARRAYSIZE = TrackingStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackingStatus_descriptor();
template<typename T>
inline const std::string& TrackingStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackingStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackingStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackingStatus_descriptor(), enum_t_value);
}
inline bool TrackingStatus_Parse(
    const std::string& name, TrackingStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackingStatus>(
    TrackingStatus_descriptor(), name, value);
}
enum MotionStatus : int {
  kStatic = 0,
  kStaticToMoving = 1,
  kMovingToStatic = 2,
  kMoving = 3,
  MotionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MotionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MotionStatus_IsValid(int value);
constexpr MotionStatus MotionStatus_MIN = kStatic;
constexpr MotionStatus MotionStatus_MAX = kMoving;
constexpr int MotionStatus_ARRAYSIZE = MotionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionStatus_descriptor();
template<typename T>
inline const std::string& MotionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotionStatus_descriptor(), enum_t_value);
}
inline bool MotionStatus_Parse(
    const std::string& name, MotionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotionStatus>(
    MotionStatus_descriptor(), name, value);
}
enum TrackModelType : int {
  kTrackModelCV = 0,
  kTrackModelZV = 1,
  kTrackModelCA = 2,
  kTrackModelCTRV = 3,
  kTrackModelCTRA = 4,
  TrackModelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TrackModelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TrackModelType_IsValid(int value);
constexpr TrackModelType TrackModelType_MIN = kTrackModelCV;
constexpr TrackModelType TrackModelType_MAX = kTrackModelCTRA;
constexpr int TrackModelType_ARRAYSIZE = TrackModelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackModelType_descriptor();
template<typename T>
inline const std::string& TrackModelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackModelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackModelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrackModelType_descriptor(), enum_t_value);
}
inline bool TrackModelType_Parse(
    const std::string& name, TrackModelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrackModelType>(
    TrackModelType_descriptor(), name, value);
}
// ===================================================================

class Point2f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.Point2f) */ {
 public:
  inline Point2f() : Point2f(nullptr) {};
  virtual ~Point2f();

  Point2f(const Point2f& from);
  Point2f(Point2f&& from) noexcept
    : Point2f() {
    *this = ::std::move(from);
  }

  inline Point2f& operator=(const Point2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2f& operator=(Point2f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2f* internal_default_instance() {
    return reinterpret_cast<const Point2f*>(
               &_Point2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point2f& a, Point2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2f* New() const final {
    return CreateMaybeMessage<Point2f>(nullptr);
  }

  Point2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2f& from);
  void MergeFrom(const Point2f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.Point2f";
  }
  protected:
  explicit Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.Point2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class Point3f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.Point3f) */ {
 public:
  inline Point3f() : Point3f(nullptr) {};
  virtual ~Point3f();

  Point3f(const Point3f& from);
  Point3f(Point3f&& from) noexcept
    : Point3f() {
    *this = ::std::move(from);
  }

  inline Point3f& operator=(const Point3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3f& operator=(Point3f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3f* internal_default_instance() {
    return reinterpret_cast<const Point3f*>(
               &_Point3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point3f& a, Point3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3f* New() const final {
    return CreateMaybeMessage<Point3f>(nullptr);
  }

  Point3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3f& from);
  void MergeFrom(const Point3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.Point3f";
  }
  protected:
  explicit Point3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.Point3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class ObjectV1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ObjectV1) */ {
 public:
  inline ObjectV1() : ObjectV1(nullptr) {};
  virtual ~ObjectV1();

  ObjectV1(const ObjectV1& from);
  ObjectV1(ObjectV1&& from) noexcept
    : ObjectV1() {
    *this = ::std::move(from);
  }

  inline ObjectV1& operator=(const ObjectV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectV1& operator=(ObjectV1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectV1* internal_default_instance() {
    return reinterpret_cast<const ObjectV1*>(
               &_ObjectV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObjectV1& a, ObjectV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectV1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectV1* New() const final {
    return CreateMaybeMessage<ObjectV1>(nullptr);
  }

  ObjectV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectV1& from);
  void MergeFrom(const ObjectV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ObjectV1";
  }
  protected:
  explicit ObjectV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocateFieldNumber = 2,
    kSizeFieldNumber = 3,
    kTypeFieldNumber = 1,
    kRotationFieldNumber = 4,
  };
  // .minieye.parking.Point2f locate = 2;
  bool has_locate() const;
  private:
  bool _internal_has_locate() const;
  public:
  void clear_locate();
  const ::minieye::parking::Point2f& locate() const;
  ::minieye::parking::Point2f* release_locate();
  ::minieye::parking::Point2f* mutable_locate();
  void set_allocated_locate(::minieye::parking::Point2f* locate);
  private:
  const ::minieye::parking::Point2f& _internal_locate() const;
  ::minieye::parking::Point2f* _internal_mutable_locate();
  public:
  void unsafe_arena_set_allocated_locate(
      ::minieye::parking::Point2f* locate);
  ::minieye::parking::Point2f* unsafe_arena_release_locate();

  // .minieye.parking.Point2f size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::minieye::parking::Point2f& size() const;
  ::minieye::parking::Point2f* release_size();
  ::minieye::parking::Point2f* mutable_size();
  void set_allocated_size(::minieye::parking::Point2f* size);
  private:
  const ::minieye::parking::Point2f& _internal_size() const;
  ::minieye::parking::Point2f* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::minieye::parking::Point2f* size);
  ::minieye::parking::Point2f* unsafe_arena_release_size();

  // .minieye.parking.ObjectType type = 1;
  void clear_type();
  ::minieye::parking::ObjectType type() const;
  void set_type(::minieye::parking::ObjectType value);
  private:
  ::minieye::parking::ObjectType _internal_type() const;
  void _internal_set_type(::minieye::parking::ObjectType value);
  public:

  // float rotation = 4;
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ObjectV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::Point2f* locate_;
  ::minieye::parking::Point2f* size_;
  int type_;
  float rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class ObjectListV1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ObjectListV1) */ {
 public:
  inline ObjectListV1() : ObjectListV1(nullptr) {};
  virtual ~ObjectListV1();

  ObjectListV1(const ObjectListV1& from);
  ObjectListV1(ObjectListV1&& from) noexcept
    : ObjectListV1() {
    *this = ::std::move(from);
  }

  inline ObjectListV1& operator=(const ObjectListV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectListV1& operator=(ObjectListV1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectListV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectListV1* internal_default_instance() {
    return reinterpret_cast<const ObjectListV1*>(
               &_ObjectListV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ObjectListV1& a, ObjectListV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectListV1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectListV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectListV1* New() const final {
    return CreateMaybeMessage<ObjectListV1>(nullptr);
  }

  ObjectListV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectListV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectListV1& from);
  void MergeFrom(const ObjectListV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectListV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ObjectListV1";
  }
  protected:
  explicit ObjectListV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 4,
    kFrameIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // repeated .minieye.parking.ObjectV1 list = 4;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::minieye::parking::ObjectV1* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectV1 >*
      mutable_list();
  private:
  const ::minieye::parking::ObjectV1& _internal_list(int index) const;
  ::minieye::parking::ObjectV1* _internal_add_list();
  public:
  const ::minieye::parking::ObjectV1& list(int index) const;
  ::minieye::parking::ObjectV1* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectV1 >&
      list() const;

  // uint64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ObjectListV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectV1 > list_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class Co3Point2f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.Co3Point2f) */ {
 public:
  inline Co3Point2f() : Co3Point2f(nullptr) {};
  virtual ~Co3Point2f();

  Co3Point2f(const Co3Point2f& from);
  Co3Point2f(Co3Point2f&& from) noexcept
    : Co3Point2f() {
    *this = ::std::move(from);
  }

  inline Co3Point2f& operator=(const Co3Point2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Co3Point2f& operator=(Co3Point2f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Co3Point2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Co3Point2f* internal_default_instance() {
    return reinterpret_cast<const Co3Point2f*>(
               &_Co3Point2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Co3Point2f& a, Co3Point2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Co3Point2f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Co3Point2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Co3Point2f* New() const final {
    return CreateMaybeMessage<Co3Point2f>(nullptr);
  }

  Co3Point2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Co3Point2f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Co3Point2f& from);
  void MergeFrom(const Co3Point2f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Co3Point2f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.Co3Point2f";
  }
  protected:
  explicit Co3Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagePtFieldNumber = 1,
    kVehiclePtFieldNumber = 2,
    kOdomPtFieldNumber = 3,
  };
  // .minieye.parking.Point2f image_pt = 1;
  bool has_image_pt() const;
  private:
  bool _internal_has_image_pt() const;
  public:
  void clear_image_pt();
  const ::minieye::parking::Point2f& image_pt() const;
  ::minieye::parking::Point2f* release_image_pt();
  ::minieye::parking::Point2f* mutable_image_pt();
  void set_allocated_image_pt(::minieye::parking::Point2f* image_pt);
  private:
  const ::minieye::parking::Point2f& _internal_image_pt() const;
  ::minieye::parking::Point2f* _internal_mutable_image_pt();
  public:
  void unsafe_arena_set_allocated_image_pt(
      ::minieye::parking::Point2f* image_pt);
  ::minieye::parking::Point2f* unsafe_arena_release_image_pt();

  // .minieye.parking.Point2f vehicle_pt = 2;
  bool has_vehicle_pt() const;
  private:
  bool _internal_has_vehicle_pt() const;
  public:
  void clear_vehicle_pt();
  const ::minieye::parking::Point2f& vehicle_pt() const;
  ::minieye::parking::Point2f* release_vehicle_pt();
  ::minieye::parking::Point2f* mutable_vehicle_pt();
  void set_allocated_vehicle_pt(::minieye::parking::Point2f* vehicle_pt);
  private:
  const ::minieye::parking::Point2f& _internal_vehicle_pt() const;
  ::minieye::parking::Point2f* _internal_mutable_vehicle_pt();
  public:
  void unsafe_arena_set_allocated_vehicle_pt(
      ::minieye::parking::Point2f* vehicle_pt);
  ::minieye::parking::Point2f* unsafe_arena_release_vehicle_pt();

  // .minieye.parking.Point2f odom_pt = 3;
  bool has_odom_pt() const;
  private:
  bool _internal_has_odom_pt() const;
  public:
  void clear_odom_pt();
  const ::minieye::parking::Point2f& odom_pt() const;
  ::minieye::parking::Point2f* release_odom_pt();
  ::minieye::parking::Point2f* mutable_odom_pt();
  void set_allocated_odom_pt(::minieye::parking::Point2f* odom_pt);
  private:
  const ::minieye::parking::Point2f& _internal_odom_pt() const;
  ::minieye::parking::Point2f* _internal_mutable_odom_pt();
  public:
  void unsafe_arena_set_allocated_odom_pt(
      ::minieye::parking::Point2f* odom_pt);
  ::minieye::parking::Point2f* unsafe_arena_release_odom_pt();

  // @@protoc_insertion_point(class_scope:minieye.parking.Co3Point2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::Point2f* image_pt_;
  ::minieye::parking::Point2f* vehicle_pt_;
  ::minieye::parking::Point2f* odom_pt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class Co3Point1f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.Co3Point1f) */ {
 public:
  inline Co3Point1f() : Co3Point1f(nullptr) {};
  virtual ~Co3Point1f();

  Co3Point1f(const Co3Point1f& from);
  Co3Point1f(Co3Point1f&& from) noexcept
    : Co3Point1f() {
    *this = ::std::move(from);
  }

  inline Co3Point1f& operator=(const Co3Point1f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Co3Point1f& operator=(Co3Point1f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Co3Point1f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Co3Point1f* internal_default_instance() {
    return reinterpret_cast<const Co3Point1f*>(
               &_Co3Point1f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Co3Point1f& a, Co3Point1f& b) {
    a.Swap(&b);
  }
  inline void Swap(Co3Point1f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Co3Point1f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Co3Point1f* New() const final {
    return CreateMaybeMessage<Co3Point1f>(nullptr);
  }

  Co3Point1f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Co3Point1f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Co3Point1f& from);
  void MergeFrom(const Co3Point1f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Co3Point1f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.Co3Point1f";
  }
  protected:
  explicit Co3Point1f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagePtFieldNumber = 1,
    kVehiclePtFieldNumber = 2,
    kOdomPtFieldNumber = 3,
  };
  // float image_pt = 1;
  void clear_image_pt();
  float image_pt() const;
  void set_image_pt(float value);
  private:
  float _internal_image_pt() const;
  void _internal_set_image_pt(float value);
  public:

  // float vehicle_pt = 2;
  void clear_vehicle_pt();
  float vehicle_pt() const;
  void set_vehicle_pt(float value);
  private:
  float _internal_vehicle_pt() const;
  void _internal_set_vehicle_pt(float value);
  public:

  // float odom_pt = 3;
  void clear_odom_pt();
  float odom_pt() const;
  void set_odom_pt(float value);
  private:
  float _internal_odom_pt() const;
  void _internal_set_odom_pt(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.Co3Point1f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float image_pt_;
  float vehicle_pt_;
  float odom_pt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class Co2Point2f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.Co2Point2f) */ {
 public:
  inline Co2Point2f() : Co2Point2f(nullptr) {};
  virtual ~Co2Point2f();

  Co2Point2f(const Co2Point2f& from);
  Co2Point2f(Co2Point2f&& from) noexcept
    : Co2Point2f() {
    *this = ::std::move(from);
  }

  inline Co2Point2f& operator=(const Co2Point2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Co2Point2f& operator=(Co2Point2f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Co2Point2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Co2Point2f* internal_default_instance() {
    return reinterpret_cast<const Co2Point2f*>(
               &_Co2Point2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Co2Point2f& a, Co2Point2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Co2Point2f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Co2Point2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Co2Point2f* New() const final {
    return CreateMaybeMessage<Co2Point2f>(nullptr);
  }

  Co2Point2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Co2Point2f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Co2Point2f& from);
  void MergeFrom(const Co2Point2f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Co2Point2f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.Co2Point2f";
  }
  protected:
  explicit Co2Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagePtFieldNumber = 1,
    kVehiclePtFieldNumber = 2,
  };
  // .minieye.parking.Point2f image_pt = 1;
  bool has_image_pt() const;
  private:
  bool _internal_has_image_pt() const;
  public:
  void clear_image_pt();
  const ::minieye::parking::Point2f& image_pt() const;
  ::minieye::parking::Point2f* release_image_pt();
  ::minieye::parking::Point2f* mutable_image_pt();
  void set_allocated_image_pt(::minieye::parking::Point2f* image_pt);
  private:
  const ::minieye::parking::Point2f& _internal_image_pt() const;
  ::minieye::parking::Point2f* _internal_mutable_image_pt();
  public:
  void unsafe_arena_set_allocated_image_pt(
      ::minieye::parking::Point2f* image_pt);
  ::minieye::parking::Point2f* unsafe_arena_release_image_pt();

  // .minieye.parking.Point2f vehicle_pt = 2;
  bool has_vehicle_pt() const;
  private:
  bool _internal_has_vehicle_pt() const;
  public:
  void clear_vehicle_pt();
  const ::minieye::parking::Point2f& vehicle_pt() const;
  ::minieye::parking::Point2f* release_vehicle_pt();
  ::minieye::parking::Point2f* mutable_vehicle_pt();
  void set_allocated_vehicle_pt(::minieye::parking::Point2f* vehicle_pt);
  private:
  const ::minieye::parking::Point2f& _internal_vehicle_pt() const;
  ::minieye::parking::Point2f* _internal_mutable_vehicle_pt();
  public:
  void unsafe_arena_set_allocated_vehicle_pt(
      ::minieye::parking::Point2f* vehicle_pt);
  ::minieye::parking::Point2f* unsafe_arena_release_vehicle_pt();

  // @@protoc_insertion_point(class_scope:minieye.parking.Co2Point2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::Point2f* image_pt_;
  ::minieye::parking::Point2f* vehicle_pt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class ObjectTrackV1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ObjectTrackV1) */ {
 public:
  inline ObjectTrackV1() : ObjectTrackV1(nullptr) {};
  virtual ~ObjectTrackV1();

  ObjectTrackV1(const ObjectTrackV1& from);
  ObjectTrackV1(ObjectTrackV1&& from) noexcept
    : ObjectTrackV1() {
    *this = ::std::move(from);
  }

  inline ObjectTrackV1& operator=(const ObjectTrackV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectTrackV1& operator=(ObjectTrackV1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectTrackV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectTrackV1* internal_default_instance() {
    return reinterpret_cast<const ObjectTrackV1*>(
               &_ObjectTrackV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ObjectTrackV1& a, ObjectTrackV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectTrackV1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectTrackV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectTrackV1* New() const final {
    return CreateMaybeMessage<ObjectTrackV1>(nullptr);
  }

  ObjectTrackV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectTrackV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectTrackV1& from);
  void MergeFrom(const ObjectTrackV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectTrackV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ObjectTrackV1";
  }
  protected:
  explicit ObjectTrackV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocateFieldNumber = 1,
    kPreLocateFieldNumber = 2,
    kRotationFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kSizeFieldNumber = 5,
    kIdFieldNumber = 6,
  };
  // .minieye.parking.Co3Point2f locate = 1;
  bool has_locate() const;
  private:
  bool _internal_has_locate() const;
  public:
  void clear_locate();
  const ::minieye::parking::Co3Point2f& locate() const;
  ::minieye::parking::Co3Point2f* release_locate();
  ::minieye::parking::Co3Point2f* mutable_locate();
  void set_allocated_locate(::minieye::parking::Co3Point2f* locate);
  private:
  const ::minieye::parking::Co3Point2f& _internal_locate() const;
  ::minieye::parking::Co3Point2f* _internal_mutable_locate();
  public:
  void unsafe_arena_set_allocated_locate(
      ::minieye::parking::Co3Point2f* locate);
  ::minieye::parking::Co3Point2f* unsafe_arena_release_locate();

  // .minieye.parking.Co3Point2f pre_locate = 2;
  bool has_pre_locate() const;
  private:
  bool _internal_has_pre_locate() const;
  public:
  void clear_pre_locate();
  const ::minieye::parking::Co3Point2f& pre_locate() const;
  ::minieye::parking::Co3Point2f* release_pre_locate();
  ::minieye::parking::Co3Point2f* mutable_pre_locate();
  void set_allocated_pre_locate(::minieye::parking::Co3Point2f* pre_locate);
  private:
  const ::minieye::parking::Co3Point2f& _internal_pre_locate() const;
  ::minieye::parking::Co3Point2f* _internal_mutable_pre_locate();
  public:
  void unsafe_arena_set_allocated_pre_locate(
      ::minieye::parking::Co3Point2f* pre_locate);
  ::minieye::parking::Co3Point2f* unsafe_arena_release_pre_locate();

  // .minieye.parking.Co3Point1f rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::minieye::parking::Co3Point1f& rotation() const;
  ::minieye::parking::Co3Point1f* release_rotation();
  ::minieye::parking::Co3Point1f* mutable_rotation();
  void set_allocated_rotation(::minieye::parking::Co3Point1f* rotation);
  private:
  const ::minieye::parking::Co3Point1f& _internal_rotation() const;
  ::minieye::parking::Co3Point1f* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::minieye::parking::Co3Point1f* rotation);
  ::minieye::parking::Co3Point1f* unsafe_arena_release_rotation();

  // .minieye.parking.Co3Point2f velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::minieye::parking::Co3Point2f& velocity() const;
  ::minieye::parking::Co3Point2f* release_velocity();
  ::minieye::parking::Co3Point2f* mutable_velocity();
  void set_allocated_velocity(::minieye::parking::Co3Point2f* velocity);
  private:
  const ::minieye::parking::Co3Point2f& _internal_velocity() const;
  ::minieye::parking::Co3Point2f* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::minieye::parking::Co3Point2f* velocity);
  ::minieye::parking::Co3Point2f* unsafe_arena_release_velocity();

  // .minieye.parking.Co2Point2f size = 5;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::minieye::parking::Co2Point2f& size() const;
  ::minieye::parking::Co2Point2f* release_size();
  ::minieye::parking::Co2Point2f* mutable_size();
  void set_allocated_size(::minieye::parking::Co2Point2f* size);
  private:
  const ::minieye::parking::Co2Point2f& _internal_size() const;
  ::minieye::parking::Co2Point2f* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::minieye::parking::Co2Point2f* size);
  ::minieye::parking::Co2Point2f* unsafe_arena_release_size();

  // uint32 id = 6;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ObjectTrackV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::Co3Point2f* locate_;
  ::minieye::parking::Co3Point2f* pre_locate_;
  ::minieye::parking::Co3Point1f* rotation_;
  ::minieye::parking::Co3Point2f* velocity_;
  ::minieye::parking::Co2Point2f* size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class ObjectTrackListV1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ObjectTrackListV1) */ {
 public:
  inline ObjectTrackListV1() : ObjectTrackListV1(nullptr) {};
  virtual ~ObjectTrackListV1();

  ObjectTrackListV1(const ObjectTrackListV1& from);
  ObjectTrackListV1(ObjectTrackListV1&& from) noexcept
    : ObjectTrackListV1() {
    *this = ::std::move(from);
  }

  inline ObjectTrackListV1& operator=(const ObjectTrackListV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectTrackListV1& operator=(ObjectTrackListV1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectTrackListV1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectTrackListV1* internal_default_instance() {
    return reinterpret_cast<const ObjectTrackListV1*>(
               &_ObjectTrackListV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ObjectTrackListV1& a, ObjectTrackListV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectTrackListV1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectTrackListV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectTrackListV1* New() const final {
    return CreateMaybeMessage<ObjectTrackListV1>(nullptr);
  }

  ObjectTrackListV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectTrackListV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectTrackListV1& from);
  void MergeFrom(const ObjectTrackListV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectTrackListV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ObjectTrackListV1";
  }
  protected:
  explicit ObjectTrackListV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehiclesFieldNumber = 4,
    kPedestriansFieldNumber = 5,
    kConesFieldNumber = 6,
    kFrameIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // repeated .minieye.parking.ObjectTrackV1 vehicles = 4;
  int vehicles_size() const;
  private:
  int _internal_vehicles_size() const;
  public:
  void clear_vehicles();
  ::minieye::parking::ObjectTrackV1* mutable_vehicles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 >*
      mutable_vehicles();
  private:
  const ::minieye::parking::ObjectTrackV1& _internal_vehicles(int index) const;
  ::minieye::parking::ObjectTrackV1* _internal_add_vehicles();
  public:
  const ::minieye::parking::ObjectTrackV1& vehicles(int index) const;
  ::minieye::parking::ObjectTrackV1* add_vehicles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 >&
      vehicles() const;

  // repeated .minieye.parking.ObjectTrackV1 pedestrians = 5;
  int pedestrians_size() const;
  private:
  int _internal_pedestrians_size() const;
  public:
  void clear_pedestrians();
  ::minieye::parking::ObjectTrackV1* mutable_pedestrians(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 >*
      mutable_pedestrians();
  private:
  const ::minieye::parking::ObjectTrackV1& _internal_pedestrians(int index) const;
  ::minieye::parking::ObjectTrackV1* _internal_add_pedestrians();
  public:
  const ::minieye::parking::ObjectTrackV1& pedestrians(int index) const;
  ::minieye::parking::ObjectTrackV1* add_pedestrians();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 >&
      pedestrians() const;

  // repeated .minieye.parking.ObjectTrackV1 cones = 6;
  int cones_size() const;
  private:
  int _internal_cones_size() const;
  public:
  void clear_cones();
  ::minieye::parking::ObjectTrackV1* mutable_cones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 >*
      mutable_cones();
  private:
  const ::minieye::parking::ObjectTrackV1& _internal_cones(int index) const;
  ::minieye::parking::ObjectTrackV1* _internal_add_cones();
  public:
  const ::minieye::parking::ObjectTrackV1& cones(int index) const;
  ::minieye::parking::ObjectTrackV1* add_cones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 >&
      cones() const;

  // uint64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ObjectTrackListV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 > vehicles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 > pedestrians_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 > cones_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class ObjectBev PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ObjectBev) */ {
 public:
  inline ObjectBev() : ObjectBev(nullptr) {};
  virtual ~ObjectBev();

  ObjectBev(const ObjectBev& from);
  ObjectBev(ObjectBev&& from) noexcept
    : ObjectBev() {
    *this = ::std::move(from);
  }

  inline ObjectBev& operator=(const ObjectBev& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectBev& operator=(ObjectBev&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectBev& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectBev* internal_default_instance() {
    return reinterpret_cast<const ObjectBev*>(
               &_ObjectBev_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ObjectBev& a, ObjectBev& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectBev* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectBev* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectBev* New() const final {
    return CreateMaybeMessage<ObjectBev>(nullptr);
  }

  ObjectBev* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectBev>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectBev& from);
  void MergeFrom(const ObjectBev& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectBev* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ObjectBev";
  }
  protected:
  explicit ObjectBev(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocateFieldNumber = 2,
    kSizeFieldNumber = 3,
    kTypeFieldNumber = 1,
    kYawFieldNumber = 4,
  };
  // .minieye.parking.Point2f locate = 2;
  bool has_locate() const;
  private:
  bool _internal_has_locate() const;
  public:
  void clear_locate();
  const ::minieye::parking::Point2f& locate() const;
  ::minieye::parking::Point2f* release_locate();
  ::minieye::parking::Point2f* mutable_locate();
  void set_allocated_locate(::minieye::parking::Point2f* locate);
  private:
  const ::minieye::parking::Point2f& _internal_locate() const;
  ::minieye::parking::Point2f* _internal_mutable_locate();
  public:
  void unsafe_arena_set_allocated_locate(
      ::minieye::parking::Point2f* locate);
  ::minieye::parking::Point2f* unsafe_arena_release_locate();

  // .minieye.parking.Point2f size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::minieye::parking::Point2f& size() const;
  ::minieye::parking::Point2f* release_size();
  ::minieye::parking::Point2f* mutable_size();
  void set_allocated_size(::minieye::parking::Point2f* size);
  private:
  const ::minieye::parking::Point2f& _internal_size() const;
  ::minieye::parking::Point2f* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::minieye::parking::Point2f* size);
  ::minieye::parking::Point2f* unsafe_arena_release_size();

  // .minieye.parking.ObjectType type = 1;
  void clear_type();
  ::minieye::parking::ObjectType type() const;
  void set_type(::minieye::parking::ObjectType value);
  private:
  ::minieye::parking::ObjectType _internal_type() const;
  void _internal_set_type(::minieye::parking::ObjectType value);
  public:

  // float yaw = 4;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ObjectBev)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::Point2f* locate_;
  ::minieye::parking::Point2f* size_;
  int type_;
  float yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class Detect2dData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.Detect2dData) */ {
 public:
  inline Detect2dData() : Detect2dData(nullptr) {};
  virtual ~Detect2dData();

  Detect2dData(const Detect2dData& from);
  Detect2dData(Detect2dData&& from) noexcept
    : Detect2dData() {
    *this = ::std::move(from);
  }

  inline Detect2dData& operator=(const Detect2dData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detect2dData& operator=(Detect2dData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detect2dData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detect2dData* internal_default_instance() {
    return reinterpret_cast<const Detect2dData*>(
               &_Detect2dData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Detect2dData& a, Detect2dData& b) {
    a.Swap(&b);
  }
  inline void Swap(Detect2dData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detect2dData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detect2dData* New() const final {
    return CreateMaybeMessage<Detect2dData>(nullptr);
  }

  Detect2dData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detect2dData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detect2dData& from);
  void MergeFrom(const Detect2dData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detect2dData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.Detect2dData";
  }
  protected:
  explicit Detect2dData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLUPointFieldNumber = 1,
    kRDPointFieldNumber = 2,
  };
  // .minieye.parking.Point2f LUPoint = 1;
  bool has_lupoint() const;
  private:
  bool _internal_has_lupoint() const;
  public:
  void clear_lupoint();
  const ::minieye::parking::Point2f& lupoint() const;
  ::minieye::parking::Point2f* release_lupoint();
  ::minieye::parking::Point2f* mutable_lupoint();
  void set_allocated_lupoint(::minieye::parking::Point2f* lupoint);
  private:
  const ::minieye::parking::Point2f& _internal_lupoint() const;
  ::minieye::parking::Point2f* _internal_mutable_lupoint();
  public:
  void unsafe_arena_set_allocated_lupoint(
      ::minieye::parking::Point2f* lupoint);
  ::minieye::parking::Point2f* unsafe_arena_release_lupoint();

  // .minieye.parking.Point2f RDPoint = 2;
  bool has_rdpoint() const;
  private:
  bool _internal_has_rdpoint() const;
  public:
  void clear_rdpoint();
  const ::minieye::parking::Point2f& rdpoint() const;
  ::minieye::parking::Point2f* release_rdpoint();
  ::minieye::parking::Point2f* mutable_rdpoint();
  void set_allocated_rdpoint(::minieye::parking::Point2f* rdpoint);
  private:
  const ::minieye::parking::Point2f& _internal_rdpoint() const;
  ::minieye::parking::Point2f* _internal_mutable_rdpoint();
  public:
  void unsafe_arena_set_allocated_rdpoint(
      ::minieye::parking::Point2f* rdpoint);
  ::minieye::parking::Point2f* unsafe_arena_release_rdpoint();

  // @@protoc_insertion_point(class_scope:minieye.parking.Detect2dData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::Point2f* lupoint_;
  ::minieye::parking::Point2f* rdpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class Detect3dData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.Detect3dData) */ {
 public:
  inline Detect3dData() : Detect3dData(nullptr) {};
  virtual ~Detect3dData();

  Detect3dData(const Detect3dData& from);
  Detect3dData(Detect3dData&& from) noexcept
    : Detect3dData() {
    *this = ::std::move(from);
  }

  inline Detect3dData& operator=(const Detect3dData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detect3dData& operator=(Detect3dData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detect3dData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detect3dData* internal_default_instance() {
    return reinterpret_cast<const Detect3dData*>(
               &_Detect3dData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Detect3dData& a, Detect3dData& b) {
    a.Swap(&b);
  }
  inline void Swap(Detect3dData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detect3dData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detect3dData* New() const final {
    return CreateMaybeMessage<Detect3dData>(nullptr);
  }

  Detect3dData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detect3dData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detect3dData& from);
  void MergeFrom(const Detect3dData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detect3dData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.Detect3dData";
  }
  protected:
  explicit Detect3dData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kBoxsizeFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // .minieye.parking.Point3f center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::minieye::parking::Point3f& center() const;
  ::minieye::parking::Point3f* release_center();
  ::minieye::parking::Point3f* mutable_center();
  void set_allocated_center(::minieye::parking::Point3f* center);
  private:
  const ::minieye::parking::Point3f& _internal_center() const;
  ::minieye::parking::Point3f* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::minieye::parking::Point3f* center);
  ::minieye::parking::Point3f* unsafe_arena_release_center();

  // .minieye.parking.Point3f boxsize = 2;
  bool has_boxsize() const;
  private:
  bool _internal_has_boxsize() const;
  public:
  void clear_boxsize();
  const ::minieye::parking::Point3f& boxsize() const;
  ::minieye::parking::Point3f* release_boxsize();
  ::minieye::parking::Point3f* mutable_boxsize();
  void set_allocated_boxsize(::minieye::parking::Point3f* boxsize);
  private:
  const ::minieye::parking::Point3f& _internal_boxsize() const;
  ::minieye::parking::Point3f* _internal_mutable_boxsize();
  public:
  void unsafe_arena_set_allocated_boxsize(
      ::minieye::parking::Point3f* boxsize);
  ::minieye::parking::Point3f* unsafe_arena_release_boxsize();

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.Detect3dData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::Point3f* center_;
  ::minieye::parking::Point3f* boxsize_;
  float yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class ObjectMono3d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ObjectMono3d) */ {
 public:
  inline ObjectMono3d() : ObjectMono3d(nullptr) {};
  virtual ~ObjectMono3d();

  ObjectMono3d(const ObjectMono3d& from);
  ObjectMono3d(ObjectMono3d&& from) noexcept
    : ObjectMono3d() {
    *this = ::std::move(from);
  }

  inline ObjectMono3d& operator=(const ObjectMono3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectMono3d& operator=(ObjectMono3d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectMono3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectMono3d* internal_default_instance() {
    return reinterpret_cast<const ObjectMono3d*>(
               &_ObjectMono3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ObjectMono3d& a, ObjectMono3d& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectMono3d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectMono3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectMono3d* New() const final {
    return CreateMaybeMessage<ObjectMono3d>(nullptr);
  }

  ObjectMono3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectMono3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectMono3d& from);
  void MergeFrom(const ObjectMono3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectMono3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ObjectMono3d";
  }
  protected:
  explicit ObjectMono3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBox2DFieldNumber = 4,
    kBox3DFieldNumber = 5,
    kTypeFieldNumber = 1,
    kScoreFieldNumber = 2,
    kCameraidFieldNumber = 3,
  };
  // .minieye.parking.Detect2dData box2d = 4;
  bool has_box2d() const;
  private:
  bool _internal_has_box2d() const;
  public:
  void clear_box2d();
  const ::minieye::parking::Detect2dData& box2d() const;
  ::minieye::parking::Detect2dData* release_box2d();
  ::minieye::parking::Detect2dData* mutable_box2d();
  void set_allocated_box2d(::minieye::parking::Detect2dData* box2d);
  private:
  const ::minieye::parking::Detect2dData& _internal_box2d() const;
  ::minieye::parking::Detect2dData* _internal_mutable_box2d();
  public:
  void unsafe_arena_set_allocated_box2d(
      ::minieye::parking::Detect2dData* box2d);
  ::minieye::parking::Detect2dData* unsafe_arena_release_box2d();

  // .minieye.parking.Detect3dData box3d = 5;
  bool has_box3d() const;
  private:
  bool _internal_has_box3d() const;
  public:
  void clear_box3d();
  const ::minieye::parking::Detect3dData& box3d() const;
  ::minieye::parking::Detect3dData* release_box3d();
  ::minieye::parking::Detect3dData* mutable_box3d();
  void set_allocated_box3d(::minieye::parking::Detect3dData* box3d);
  private:
  const ::minieye::parking::Detect3dData& _internal_box3d() const;
  ::minieye::parking::Detect3dData* _internal_mutable_box3d();
  public:
  void unsafe_arena_set_allocated_box3d(
      ::minieye::parking::Detect3dData* box3d);
  ::minieye::parking::Detect3dData* unsafe_arena_release_box3d();

  // .minieye.parking.ObjectType type = 1;
  void clear_type();
  ::minieye::parking::ObjectType type() const;
  void set_type(::minieye::parking::ObjectType value);
  private:
  ::minieye::parking::ObjectType _internal_type() const;
  void _internal_set_type(::minieye::parking::ObjectType value);
  public:

  // float score = 2;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // .minieye.parking.CameraId cameraid = 3;
  void clear_cameraid();
  ::minieye::parking::CameraId cameraid() const;
  void set_cameraid(::minieye::parking::CameraId value);
  private:
  ::minieye::parking::CameraId _internal_cameraid() const;
  void _internal_set_cameraid(::minieye::parking::CameraId value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ObjectMono3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::Detect2dData* box2d_;
  ::minieye::parking::Detect3dData* box3d_;
  int type_;
  float score_;
  int cameraid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class ObjectList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ObjectList) */ {
 public:
  inline ObjectList() : ObjectList(nullptr) {};
  virtual ~ObjectList();

  ObjectList(const ObjectList& from);
  ObjectList(ObjectList&& from) noexcept
    : ObjectList() {
    *this = ::std::move(from);
  }

  inline ObjectList& operator=(const ObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectList& operator=(ObjectList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectList* internal_default_instance() {
    return reinterpret_cast<const ObjectList*>(
               &_ObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ObjectList& a, ObjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectList* New() const final {
    return CreateMaybeMessage<ObjectList>(nullptr);
  }

  ObjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectList& from);
  void MergeFrom(const ObjectList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ObjectList";
  }
  protected:
  explicit ObjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListObjectBevFieldNumber = 4,
    kListObject3DFieldNumber = 5,
    kFrameIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // repeated .minieye.parking.ObjectBev list_object_bev = 4;
  int list_object_bev_size() const;
  private:
  int _internal_list_object_bev_size() const;
  public:
  void clear_list_object_bev();
  ::minieye::parking::ObjectBev* mutable_list_object_bev(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectBev >*
      mutable_list_object_bev();
  private:
  const ::minieye::parking::ObjectBev& _internal_list_object_bev(int index) const;
  ::minieye::parking::ObjectBev* _internal_add_list_object_bev();
  public:
  const ::minieye::parking::ObjectBev& list_object_bev(int index) const;
  ::minieye::parking::ObjectBev* add_list_object_bev();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectBev >&
      list_object_bev() const;

  // repeated .minieye.parking.ObjectMono3d list_object_3d = 5;
  int list_object_3d_size() const;
  private:
  int _internal_list_object_3d_size() const;
  public:
  void clear_list_object_3d();
  ::minieye::parking::ObjectMono3d* mutable_list_object_3d(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectMono3d >*
      mutable_list_object_3d();
  private:
  const ::minieye::parking::ObjectMono3d& _internal_list_object_3d(int index) const;
  ::minieye::parking::ObjectMono3d* _internal_add_list_object_3d();
  public:
  const ::minieye::parking::ObjectMono3d& list_object_3d(int index) const;
  ::minieye::parking::ObjectMono3d* add_list_object_3d();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectMono3d >&
      list_object_3d() const;

  // uint64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ObjectList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectBev > list_object_bev_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectMono3d > list_object_3d_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class ImageInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ImageInfo) */ {
 public:
  inline ImageInfo() : ImageInfo(nullptr) {};
  virtual ~ImageInfo();

  ImageInfo(const ImageInfo& from);
  ImageInfo(ImageInfo&& from) noexcept
    : ImageInfo() {
    *this = ::std::move(from);
  }

  inline ImageInfo& operator=(const ImageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageInfo& operator=(ImageInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageInfo* internal_default_instance() {
    return reinterpret_cast<const ImageInfo*>(
               &_ImageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ImageInfo& a, ImageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageInfo* New() const final {
    return CreateMaybeMessage<ImageInfo>(nullptr);
  }

  ImageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageInfo& from);
  void MergeFrom(const ImageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ImageInfo";
  }
  protected:
  explicit ImageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionValueFieldNumber = 1,
    kSizeFieldNumber = 3,
    kHeadingValueFieldNumber = 2,
  };
  // .minieye.parking.Point2f position_value = 1;
  bool has_position_value() const;
  private:
  bool _internal_has_position_value() const;
  public:
  void clear_position_value();
  const ::minieye::parking::Point2f& position_value() const;
  ::minieye::parking::Point2f* release_position_value();
  ::minieye::parking::Point2f* mutable_position_value();
  void set_allocated_position_value(::minieye::parking::Point2f* position_value);
  private:
  const ::minieye::parking::Point2f& _internal_position_value() const;
  ::minieye::parking::Point2f* _internal_mutable_position_value();
  public:
  void unsafe_arena_set_allocated_position_value(
      ::minieye::parking::Point2f* position_value);
  ::minieye::parking::Point2f* unsafe_arena_release_position_value();

  // .minieye.parking.Point2f size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::minieye::parking::Point2f& size() const;
  ::minieye::parking::Point2f* release_size();
  ::minieye::parking::Point2f* mutable_size();
  void set_allocated_size(::minieye::parking::Point2f* size);
  private:
  const ::minieye::parking::Point2f& _internal_size() const;
  ::minieye::parking::Point2f* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::minieye::parking::Point2f* size);
  ::minieye::parking::Point2f* unsafe_arena_release_size();

  // float heading_value = 2;
  void clear_heading_value();
  float heading_value() const;
  void set_heading_value(float value);
  private:
  float _internal_heading_value() const;
  void _internal_set_heading_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ImageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::Point2f* position_value_;
  ::minieye::parking::Point2f* size_;
  float heading_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class VehicleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.VehicleInfo) */ {
 public:
  inline VehicleInfo() : VehicleInfo(nullptr) {};
  virtual ~VehicleInfo();

  VehicleInfo(const VehicleInfo& from);
  VehicleInfo(VehicleInfo&& from) noexcept
    : VehicleInfo() {
    *this = ::std::move(from);
  }

  inline VehicleInfo& operator=(const VehicleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleInfo& operator=(VehicleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleInfo* internal_default_instance() {
    return reinterpret_cast<const VehicleInfo*>(
               &_VehicleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VehicleInfo& a, VehicleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleInfo* New() const final {
    return CreateMaybeMessage<VehicleInfo>(nullptr);
  }

  VehicleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleInfo& from);
  void MergeFrom(const VehicleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.VehicleInfo";
  }
  protected:
  explicit VehicleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionValueFieldNumber = 1,
    kPositionVarianceFieldNumber = 2,
    kVelocityValueFieldNumber = 3,
    kVelocityVarianceFieldNumber = 4,
    kSizeFieldNumber = 9,
    kHeadingValueFieldNumber = 5,
    kHeadingVarianceFieldNumber = 6,
    kPalstanceValueFieldNumber = 7,
    kPalstanceVarianceFieldNumber = 8,
  };
  // .minieye.parking.Point2f position_value = 1;
  bool has_position_value() const;
  private:
  bool _internal_has_position_value() const;
  public:
  void clear_position_value();
  const ::minieye::parking::Point2f& position_value() const;
  ::minieye::parking::Point2f* release_position_value();
  ::minieye::parking::Point2f* mutable_position_value();
  void set_allocated_position_value(::minieye::parking::Point2f* position_value);
  private:
  const ::minieye::parking::Point2f& _internal_position_value() const;
  ::minieye::parking::Point2f* _internal_mutable_position_value();
  public:
  void unsafe_arena_set_allocated_position_value(
      ::minieye::parking::Point2f* position_value);
  ::minieye::parking::Point2f* unsafe_arena_release_position_value();

  // .minieye.parking.Point2f position_variance = 2;
  bool has_position_variance() const;
  private:
  bool _internal_has_position_variance() const;
  public:
  void clear_position_variance();
  const ::minieye::parking::Point2f& position_variance() const;
  ::minieye::parking::Point2f* release_position_variance();
  ::minieye::parking::Point2f* mutable_position_variance();
  void set_allocated_position_variance(::minieye::parking::Point2f* position_variance);
  private:
  const ::minieye::parking::Point2f& _internal_position_variance() const;
  ::minieye::parking::Point2f* _internal_mutable_position_variance();
  public:
  void unsafe_arena_set_allocated_position_variance(
      ::minieye::parking::Point2f* position_variance);
  ::minieye::parking::Point2f* unsafe_arena_release_position_variance();

  // .minieye.parking.Point2f velocity_value = 3;
  bool has_velocity_value() const;
  private:
  bool _internal_has_velocity_value() const;
  public:
  void clear_velocity_value();
  const ::minieye::parking::Point2f& velocity_value() const;
  ::minieye::parking::Point2f* release_velocity_value();
  ::minieye::parking::Point2f* mutable_velocity_value();
  void set_allocated_velocity_value(::minieye::parking::Point2f* velocity_value);
  private:
  const ::minieye::parking::Point2f& _internal_velocity_value() const;
  ::minieye::parking::Point2f* _internal_mutable_velocity_value();
  public:
  void unsafe_arena_set_allocated_velocity_value(
      ::minieye::parking::Point2f* velocity_value);
  ::minieye::parking::Point2f* unsafe_arena_release_velocity_value();

  // .minieye.parking.Point2f velocity_variance = 4;
  bool has_velocity_variance() const;
  private:
  bool _internal_has_velocity_variance() const;
  public:
  void clear_velocity_variance();
  const ::minieye::parking::Point2f& velocity_variance() const;
  ::minieye::parking::Point2f* release_velocity_variance();
  ::minieye::parking::Point2f* mutable_velocity_variance();
  void set_allocated_velocity_variance(::minieye::parking::Point2f* velocity_variance);
  private:
  const ::minieye::parking::Point2f& _internal_velocity_variance() const;
  ::minieye::parking::Point2f* _internal_mutable_velocity_variance();
  public:
  void unsafe_arena_set_allocated_velocity_variance(
      ::minieye::parking::Point2f* velocity_variance);
  ::minieye::parking::Point2f* unsafe_arena_release_velocity_variance();

  // .minieye.parking.Point3f size = 9;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::minieye::parking::Point3f& size() const;
  ::minieye::parking::Point3f* release_size();
  ::minieye::parking::Point3f* mutable_size();
  void set_allocated_size(::minieye::parking::Point3f* size);
  private:
  const ::minieye::parking::Point3f& _internal_size() const;
  ::minieye::parking::Point3f* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::minieye::parking::Point3f* size);
  ::minieye::parking::Point3f* unsafe_arena_release_size();

  // float heading_value = 5;
  void clear_heading_value();
  float heading_value() const;
  void set_heading_value(float value);
  private:
  float _internal_heading_value() const;
  void _internal_set_heading_value(float value);
  public:

  // float heading_variance = 6;
  void clear_heading_variance();
  float heading_variance() const;
  void set_heading_variance(float value);
  private:
  float _internal_heading_variance() const;
  void _internal_set_heading_variance(float value);
  public:

  // float palstance_value = 7;
  void clear_palstance_value();
  float palstance_value() const;
  void set_palstance_value(float value);
  private:
  float _internal_palstance_value() const;
  void _internal_set_palstance_value(float value);
  public:

  // float palstance_variance = 8;
  void clear_palstance_variance();
  float palstance_variance() const;
  void set_palstance_variance(float value);
  private:
  float _internal_palstance_variance() const;
  void _internal_set_palstance_variance(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.VehicleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::Point2f* position_value_;
  ::minieye::parking::Point2f* position_variance_;
  ::minieye::parking::Point2f* velocity_value_;
  ::minieye::parking::Point2f* velocity_variance_;
  ::minieye::parking::Point3f* size_;
  float heading_value_;
  float heading_variance_;
  float palstance_value_;
  float palstance_variance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class OdomInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.OdomInfo) */ {
 public:
  inline OdomInfo() : OdomInfo(nullptr) {};
  virtual ~OdomInfo();

  OdomInfo(const OdomInfo& from);
  OdomInfo(OdomInfo&& from) noexcept
    : OdomInfo() {
    *this = ::std::move(from);
  }

  inline OdomInfo& operator=(const OdomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdomInfo& operator=(OdomInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OdomInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OdomInfo* internal_default_instance() {
    return reinterpret_cast<const OdomInfo*>(
               &_OdomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(OdomInfo& a, OdomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OdomInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OdomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OdomInfo* New() const final {
    return CreateMaybeMessage<OdomInfo>(nullptr);
  }

  OdomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OdomInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OdomInfo& from);
  void MergeFrom(const OdomInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdomInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.OdomInfo";
  }
  protected:
  explicit OdomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionValueFieldNumber = 1,
    kPositionVarianceFieldNumber = 2,
    kVelocityValueFieldNumber = 3,
    kVelocityVarianceFieldNumber = 4,
    kSizeFieldNumber = 9,
    kHeadingValueFieldNumber = 5,
    kHeadingVarianceFieldNumber = 6,
    kPalstanceValueFieldNumber = 7,
    kPalstanceVarianceFieldNumber = 8,
  };
  // .minieye.parking.Point2f position_value = 1;
  bool has_position_value() const;
  private:
  bool _internal_has_position_value() const;
  public:
  void clear_position_value();
  const ::minieye::parking::Point2f& position_value() const;
  ::minieye::parking::Point2f* release_position_value();
  ::minieye::parking::Point2f* mutable_position_value();
  void set_allocated_position_value(::minieye::parking::Point2f* position_value);
  private:
  const ::minieye::parking::Point2f& _internal_position_value() const;
  ::minieye::parking::Point2f* _internal_mutable_position_value();
  public:
  void unsafe_arena_set_allocated_position_value(
      ::minieye::parking::Point2f* position_value);
  ::minieye::parking::Point2f* unsafe_arena_release_position_value();

  // .minieye.parking.Point2f position_variance = 2;
  bool has_position_variance() const;
  private:
  bool _internal_has_position_variance() const;
  public:
  void clear_position_variance();
  const ::minieye::parking::Point2f& position_variance() const;
  ::minieye::parking::Point2f* release_position_variance();
  ::minieye::parking::Point2f* mutable_position_variance();
  void set_allocated_position_variance(::minieye::parking::Point2f* position_variance);
  private:
  const ::minieye::parking::Point2f& _internal_position_variance() const;
  ::minieye::parking::Point2f* _internal_mutable_position_variance();
  public:
  void unsafe_arena_set_allocated_position_variance(
      ::minieye::parking::Point2f* position_variance);
  ::minieye::parking::Point2f* unsafe_arena_release_position_variance();

  // .minieye.parking.Point2f velocity_value = 3;
  bool has_velocity_value() const;
  private:
  bool _internal_has_velocity_value() const;
  public:
  void clear_velocity_value();
  const ::minieye::parking::Point2f& velocity_value() const;
  ::minieye::parking::Point2f* release_velocity_value();
  ::minieye::parking::Point2f* mutable_velocity_value();
  void set_allocated_velocity_value(::minieye::parking::Point2f* velocity_value);
  private:
  const ::minieye::parking::Point2f& _internal_velocity_value() const;
  ::minieye::parking::Point2f* _internal_mutable_velocity_value();
  public:
  void unsafe_arena_set_allocated_velocity_value(
      ::minieye::parking::Point2f* velocity_value);
  ::minieye::parking::Point2f* unsafe_arena_release_velocity_value();

  // .minieye.parking.Point2f velocity_variance = 4;
  bool has_velocity_variance() const;
  private:
  bool _internal_has_velocity_variance() const;
  public:
  void clear_velocity_variance();
  const ::minieye::parking::Point2f& velocity_variance() const;
  ::minieye::parking::Point2f* release_velocity_variance();
  ::minieye::parking::Point2f* mutable_velocity_variance();
  void set_allocated_velocity_variance(::minieye::parking::Point2f* velocity_variance);
  private:
  const ::minieye::parking::Point2f& _internal_velocity_variance() const;
  ::minieye::parking::Point2f* _internal_mutable_velocity_variance();
  public:
  void unsafe_arena_set_allocated_velocity_variance(
      ::minieye::parking::Point2f* velocity_variance);
  ::minieye::parking::Point2f* unsafe_arena_release_velocity_variance();

  // .minieye.parking.Point3f size = 9;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::minieye::parking::Point3f& size() const;
  ::minieye::parking::Point3f* release_size();
  ::minieye::parking::Point3f* mutable_size();
  void set_allocated_size(::minieye::parking::Point3f* size);
  private:
  const ::minieye::parking::Point3f& _internal_size() const;
  ::minieye::parking::Point3f* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::minieye::parking::Point3f* size);
  ::minieye::parking::Point3f* unsafe_arena_release_size();

  // float heading_value = 5;
  void clear_heading_value();
  float heading_value() const;
  void set_heading_value(float value);
  private:
  float _internal_heading_value() const;
  void _internal_set_heading_value(float value);
  public:

  // float heading_variance = 6;
  void clear_heading_variance();
  float heading_variance() const;
  void set_heading_variance(float value);
  private:
  float _internal_heading_variance() const;
  void _internal_set_heading_variance(float value);
  public:

  // float palstance_value = 7;
  void clear_palstance_value();
  float palstance_value() const;
  void set_palstance_value(float value);
  private:
  float _internal_palstance_value() const;
  void _internal_set_palstance_value(float value);
  public:

  // float palstance_variance = 8;
  void clear_palstance_variance();
  float palstance_variance() const;
  void set_palstance_variance(float value);
  private:
  float _internal_palstance_variance() const;
  void _internal_set_palstance_variance(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.OdomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::Point2f* position_value_;
  ::minieye::parking::Point2f* position_variance_;
  ::minieye::parking::Point2f* velocity_value_;
  ::minieye::parking::Point2f* velocity_variance_;
  ::minieye::parking::Point3f* size_;
  float heading_value_;
  float heading_variance_;
  float palstance_value_;
  float palstance_variance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class ObjectTrack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ObjectTrack) */ {
 public:
  inline ObjectTrack() : ObjectTrack(nullptr) {};
  virtual ~ObjectTrack();

  ObjectTrack(const ObjectTrack& from);
  ObjectTrack(ObjectTrack&& from) noexcept
    : ObjectTrack() {
    *this = ::std::move(from);
  }

  inline ObjectTrack& operator=(const ObjectTrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectTrack& operator=(ObjectTrack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectTrack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectTrack* internal_default_instance() {
    return reinterpret_cast<const ObjectTrack*>(
               &_ObjectTrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ObjectTrack& a, ObjectTrack& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectTrack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectTrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectTrack* New() const final {
    return CreateMaybeMessage<ObjectTrack>(nullptr);
  }

  ObjectTrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectTrack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectTrack& from);
  void MergeFrom(const ObjectTrack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectTrack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ObjectTrack";
  }
  protected:
  explicit ObjectTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgInfoFieldNumber = 5,
    kVehicleInfoFieldNumber = 6,
    kOdomInfoFieldNumber = 7,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTrackStatusFieldNumber = 3,
    kMotionStatusFieldNumber = 4,
    kScoreFieldNumber = 8,
  };
  // .minieye.parking.ImageInfo img_info = 5;
  bool has_img_info() const;
  private:
  bool _internal_has_img_info() const;
  public:
  void clear_img_info();
  const ::minieye::parking::ImageInfo& img_info() const;
  ::minieye::parking::ImageInfo* release_img_info();
  ::minieye::parking::ImageInfo* mutable_img_info();
  void set_allocated_img_info(::minieye::parking::ImageInfo* img_info);
  private:
  const ::minieye::parking::ImageInfo& _internal_img_info() const;
  ::minieye::parking::ImageInfo* _internal_mutable_img_info();
  public:
  void unsafe_arena_set_allocated_img_info(
      ::minieye::parking::ImageInfo* img_info);
  ::minieye::parking::ImageInfo* unsafe_arena_release_img_info();

  // .minieye.parking.VehicleInfo vehicle_info = 6;
  bool has_vehicle_info() const;
  private:
  bool _internal_has_vehicle_info() const;
  public:
  void clear_vehicle_info();
  const ::minieye::parking::VehicleInfo& vehicle_info() const;
  ::minieye::parking::VehicleInfo* release_vehicle_info();
  ::minieye::parking::VehicleInfo* mutable_vehicle_info();
  void set_allocated_vehicle_info(::minieye::parking::VehicleInfo* vehicle_info);
  private:
  const ::minieye::parking::VehicleInfo& _internal_vehicle_info() const;
  ::minieye::parking::VehicleInfo* _internal_mutable_vehicle_info();
  public:
  void unsafe_arena_set_allocated_vehicle_info(
      ::minieye::parking::VehicleInfo* vehicle_info);
  ::minieye::parking::VehicleInfo* unsafe_arena_release_vehicle_info();

  // .minieye.parking.OdomInfo odom_info = 7;
  bool has_odom_info() const;
  private:
  bool _internal_has_odom_info() const;
  public:
  void clear_odom_info();
  const ::minieye::parking::OdomInfo& odom_info() const;
  ::minieye::parking::OdomInfo* release_odom_info();
  ::minieye::parking::OdomInfo* mutable_odom_info();
  void set_allocated_odom_info(::minieye::parking::OdomInfo* odom_info);
  private:
  const ::minieye::parking::OdomInfo& _internal_odom_info() const;
  ::minieye::parking::OdomInfo* _internal_mutable_odom_info();
  public:
  void unsafe_arena_set_allocated_odom_info(
      ::minieye::parking::OdomInfo* odom_info);
  ::minieye::parking::OdomInfo* unsafe_arena_release_odom_info();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .minieye.parking.ObjectType type = 2;
  void clear_type();
  ::minieye::parking::ObjectType type() const;
  void set_type(::minieye::parking::ObjectType value);
  private:
  ::minieye::parking::ObjectType _internal_type() const;
  void _internal_set_type(::minieye::parking::ObjectType value);
  public:

  // .minieye.parking.TrackingStatus track_status = 3;
  void clear_track_status();
  ::minieye::parking::TrackingStatus track_status() const;
  void set_track_status(::minieye::parking::TrackingStatus value);
  private:
  ::minieye::parking::TrackingStatus _internal_track_status() const;
  void _internal_set_track_status(::minieye::parking::TrackingStatus value);
  public:

  // .minieye.parking.MotionStatus motion_status = 4;
  void clear_motion_status();
  ::minieye::parking::MotionStatus motion_status() const;
  void set_motion_status(::minieye::parking::MotionStatus value);
  private:
  ::minieye::parking::MotionStatus _internal_motion_status() const;
  void _internal_set_motion_status(::minieye::parking::MotionStatus value);
  public:

  // float score = 8;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ObjectTrack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::ImageInfo* img_info_;
  ::minieye::parking::VehicleInfo* vehicle_info_;
  ::minieye::parking::OdomInfo* odom_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int type_;
  int track_status_;
  int motion_status_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class ObjectTrackList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ObjectTrackList) */ {
 public:
  inline ObjectTrackList() : ObjectTrackList(nullptr) {};
  virtual ~ObjectTrackList();

  ObjectTrackList(const ObjectTrackList& from);
  ObjectTrackList(ObjectTrackList&& from) noexcept
    : ObjectTrackList() {
    *this = ::std::move(from);
  }

  inline ObjectTrackList& operator=(const ObjectTrackList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectTrackList& operator=(ObjectTrackList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectTrackList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectTrackList* internal_default_instance() {
    return reinterpret_cast<const ObjectTrackList*>(
               &_ObjectTrackList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ObjectTrackList& a, ObjectTrackList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectTrackList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectTrackList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectTrackList* New() const final {
    return CreateMaybeMessage<ObjectTrackList>(nullptr);
  }

  ObjectTrackList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectTrackList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectTrackList& from);
  void MergeFrom(const ObjectTrackList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectTrackList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ObjectTrackList";
  }
  protected:
  explicit ObjectTrackList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectTrackListFieldNumber = 4,
    kFrameIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // repeated .minieye.parking.ObjectTrack object_track_list = 4;
  int object_track_list_size() const;
  private:
  int _internal_object_track_list_size() const;
  public:
  void clear_object_track_list();
  ::minieye::parking::ObjectTrack* mutable_object_track_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrack >*
      mutable_object_track_list();
  private:
  const ::minieye::parking::ObjectTrack& _internal_object_track_list(int index) const;
  ::minieye::parking::ObjectTrack* _internal_add_object_track_list();
  public:
  const ::minieye::parking::ObjectTrack& object_track_list(int index) const;
  ::minieye::parking::ObjectTrack* add_object_track_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrack >&
      object_track_list() const;

  // uint64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ObjectTrackList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrack > object_track_list_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class TrackDebug PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.TrackDebug) */ {
 public:
  inline TrackDebug() : TrackDebug(nullptr) {};
  virtual ~TrackDebug();

  TrackDebug(const TrackDebug& from);
  TrackDebug(TrackDebug&& from) noexcept
    : TrackDebug() {
    *this = ::std::move(from);
  }

  inline TrackDebug& operator=(const TrackDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackDebug& operator=(TrackDebug&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackDebug* internal_default_instance() {
    return reinterpret_cast<const TrackDebug*>(
               &_TrackDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(TrackDebug& a, TrackDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackDebug* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackDebug* New() const final {
    return CreateMaybeMessage<TrackDebug>(nullptr);
  }

  TrackDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackDebug>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackDebug& from);
  void MergeFrom(const TrackDebug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackDebug* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.TrackDebug";
  }
  protected:
  explicit TrackDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 6,
    kEgoStateFieldNumber = 4,
    kEgoCovFieldNumber = 5,
    kFrameIdFieldNumber = 1,
    kTimestampUsFieldNumber = 2,
    kTickUsFieldNumber = 3,
  };
  // repeated .minieye.parking.TrackDebugObject objects = 6;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::minieye::parking::TrackDebugObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::TrackDebugObject >*
      mutable_objects();
  private:
  const ::minieye::parking::TrackDebugObject& _internal_objects(int index) const;
  ::minieye::parking::TrackDebugObject* _internal_add_objects();
  public:
  const ::minieye::parking::TrackDebugObject& objects(int index) const;
  ::minieye::parking::TrackDebugObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::TrackDebugObject >&
      objects() const;

  // .minieye.parking.TrackEgoState ego_state = 4;
  bool has_ego_state() const;
  private:
  bool _internal_has_ego_state() const;
  public:
  void clear_ego_state();
  const ::minieye::parking::TrackEgoState& ego_state() const;
  ::minieye::parking::TrackEgoState* release_ego_state();
  ::minieye::parking::TrackEgoState* mutable_ego_state();
  void set_allocated_ego_state(::minieye::parking::TrackEgoState* ego_state);
  private:
  const ::minieye::parking::TrackEgoState& _internal_ego_state() const;
  ::minieye::parking::TrackEgoState* _internal_mutable_ego_state();
  public:
  void unsafe_arena_set_allocated_ego_state(
      ::minieye::parking::TrackEgoState* ego_state);
  ::minieye::parking::TrackEgoState* unsafe_arena_release_ego_state();

  // .minieye.parking.TrackEgoState ego_cov = 5;
  bool has_ego_cov() const;
  private:
  bool _internal_has_ego_cov() const;
  public:
  void clear_ego_cov();
  const ::minieye::parking::TrackEgoState& ego_cov() const;
  ::minieye::parking::TrackEgoState* release_ego_cov();
  ::minieye::parking::TrackEgoState* mutable_ego_cov();
  void set_allocated_ego_cov(::minieye::parking::TrackEgoState* ego_cov);
  private:
  const ::minieye::parking::TrackEgoState& _internal_ego_cov() const;
  ::minieye::parking::TrackEgoState* _internal_mutable_ego_cov();
  public:
  void unsafe_arena_set_allocated_ego_cov(
      ::minieye::parking::TrackEgoState* ego_cov);
  ::minieye::parking::TrackEgoState* unsafe_arena_release_ego_cov();

  // uint64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp_us = 2;
  void clear_timestamp_us();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_us() const;
  void set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_us() const;
  void _internal_set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick_us = 3;
  void clear_tick_us();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_us() const;
  void set_tick_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick_us() const;
  void _internal_set_tick_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.TrackDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::TrackDebugObject > objects_;
  ::minieye::parking::TrackEgoState* ego_state_;
  ::minieye::parking::TrackEgoState* ego_cov_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_us_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_us_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class TrackDebugObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.TrackDebugObject) */ {
 public:
  inline TrackDebugObject() : TrackDebugObject(nullptr) {};
  virtual ~TrackDebugObject();

  TrackDebugObject(const TrackDebugObject& from);
  TrackDebugObject(TrackDebugObject&& from) noexcept
    : TrackDebugObject() {
    *this = ::std::move(from);
  }

  inline TrackDebugObject& operator=(const TrackDebugObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackDebugObject& operator=(TrackDebugObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackDebugObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackDebugObject* internal_default_instance() {
    return reinterpret_cast<const TrackDebugObject*>(
               &_TrackDebugObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TrackDebugObject& a, TrackDebugObject& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackDebugObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackDebugObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackDebugObject* New() const final {
    return CreateMaybeMessage<TrackDebugObject>(nullptr);
  }

  TrackDebugObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackDebugObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackDebugObject& from);
  void MergeFrom(const TrackDebugObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackDebugObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.TrackDebugObject";
  }
  protected:
  explicit TrackDebugObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionsFieldNumber = 3,
    kModelsFieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .minieye.parking.ObjectMono3d detections = 3;
  int detections_size() const;
  private:
  int _internal_detections_size() const;
  public:
  void clear_detections();
  ::minieye::parking::ObjectMono3d* mutable_detections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectMono3d >*
      mutable_detections();
  private:
  const ::minieye::parking::ObjectMono3d& _internal_detections(int index) const;
  ::minieye::parking::ObjectMono3d* _internal_add_detections();
  public:
  const ::minieye::parking::ObjectMono3d& detections(int index) const;
  ::minieye::parking::ObjectMono3d* add_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectMono3d >&
      detections() const;

  // repeated .minieye.parking.TrackModel models = 4;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::minieye::parking::TrackModel* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::TrackModel >*
      mutable_models();
  private:
  const ::minieye::parking::TrackModel& _internal_models(int index) const;
  ::minieye::parking::TrackModel* _internal_add_models();
  public:
  const ::minieye::parking::TrackModel& models(int index) const;
  ::minieye::parking::TrackModel* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::TrackModel >&
      models() const;

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .minieye.parking.ObjectType type = 2;
  void clear_type();
  ::minieye::parking::ObjectType type() const;
  void set_type(::minieye::parking::ObjectType value);
  private:
  ::minieye::parking::ObjectType _internal_type() const;
  void _internal_set_type(::minieye::parking::ObjectType value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.TrackDebugObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectMono3d > detections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::TrackModel > models_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class TrackMixTargetState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.TrackMixTargetState) */ {
 public:
  inline TrackMixTargetState() : TrackMixTargetState(nullptr) {};
  virtual ~TrackMixTargetState();

  TrackMixTargetState(const TrackMixTargetState& from);
  TrackMixTargetState(TrackMixTargetState&& from) noexcept
    : TrackMixTargetState() {
    *this = ::std::move(from);
  }

  inline TrackMixTargetState& operator=(const TrackMixTargetState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackMixTargetState& operator=(TrackMixTargetState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackMixTargetState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackMixTargetState* internal_default_instance() {
    return reinterpret_cast<const TrackMixTargetState*>(
               &_TrackMixTargetState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TrackMixTargetState& a, TrackMixTargetState& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackMixTargetState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackMixTargetState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackMixTargetState* New() const final {
    return CreateMaybeMessage<TrackMixTargetState>(nullptr);
  }

  TrackMixTargetState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackMixTargetState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackMixTargetState& from);
  void MergeFrom(const TrackMixTargetState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackMixTargetState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.TrackMixTargetState";
  }
  protected:
  explicit TrackMixTargetState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXVVtFieldNumber = 1,
    kYVVtFieldNumber = 2,
    kPsiVtFieldNumber = 3,
    kWGtFieldNumber = 4,
    kVGtFieldNumber = 5,
    kAGtFieldNumber = 6,
  };
  // float x_v_vt = 1;
  void clear_x_v_vt();
  float x_v_vt() const;
  void set_x_v_vt(float value);
  private:
  float _internal_x_v_vt() const;
  void _internal_set_x_v_vt(float value);
  public:

  // float y_v_vt = 2;
  void clear_y_v_vt();
  float y_v_vt() const;
  void set_y_v_vt(float value);
  private:
  float _internal_y_v_vt() const;
  void _internal_set_y_v_vt(float value);
  public:

  // float psi_vt = 3;
  void clear_psi_vt();
  float psi_vt() const;
  void set_psi_vt(float value);
  private:
  float _internal_psi_vt() const;
  void _internal_set_psi_vt(float value);
  public:

  // float w_gt = 4;
  void clear_w_gt();
  float w_gt() const;
  void set_w_gt(float value);
  private:
  float _internal_w_gt() const;
  void _internal_set_w_gt(float value);
  public:

  // float v_gt = 5;
  void clear_v_gt();
  float v_gt() const;
  void set_v_gt(float value);
  private:
  float _internal_v_gt() const;
  void _internal_set_v_gt(float value);
  public:

  // float a_gt = 6;
  void clear_a_gt();
  float a_gt() const;
  void set_a_gt(float value);
  private:
  float _internal_a_gt() const;
  void _internal_set_a_gt(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.TrackMixTargetState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_v_vt_;
  float y_v_vt_;
  float psi_vt_;
  float w_gt_;
  float v_gt_;
  float a_gt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class TrackEgoState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.TrackEgoState) */ {
 public:
  inline TrackEgoState() : TrackEgoState(nullptr) {};
  virtual ~TrackEgoState();

  TrackEgoState(const TrackEgoState& from);
  TrackEgoState(TrackEgoState&& from) noexcept
    : TrackEgoState() {
    *this = ::std::move(from);
  }

  inline TrackEgoState& operator=(const TrackEgoState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackEgoState& operator=(TrackEgoState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackEgoState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackEgoState* internal_default_instance() {
    return reinterpret_cast<const TrackEgoState*>(
               &_TrackEgoState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TrackEgoState& a, TrackEgoState& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackEgoState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackEgoState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackEgoState* New() const final {
    return CreateMaybeMessage<TrackEgoState>(nullptr);
  }

  TrackEgoState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackEgoState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackEgoState& from);
  void MergeFrom(const TrackEgoState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackEgoState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.TrackEgoState";
  }
  protected:
  explicit TrackEgoState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDxMFieldNumber = 1,
    kDyMFieldNumber = 2,
    kDyawRadFieldNumber = 3,
  };
  // float dx_m = 1;
  void clear_dx_m();
  float dx_m() const;
  void set_dx_m(float value);
  private:
  float _internal_dx_m() const;
  void _internal_set_dx_m(float value);
  public:

  // float dy_m = 2;
  void clear_dy_m();
  float dy_m() const;
  void set_dy_m(float value);
  private:
  float _internal_dy_m() const;
  void _internal_set_dy_m(float value);
  public:

  // float dyaw_rad = 3;
  void clear_dyaw_rad();
  float dyaw_rad() const;
  void set_dyaw_rad(float value);
  private:
  float _internal_dyaw_rad() const;
  void _internal_set_dyaw_rad(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.TrackEgoState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float dx_m_;
  float dy_m_;
  float dyaw_rad_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// -------------------------------------------------------------------

class TrackModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.TrackModel) */ {
 public:
  inline TrackModel() : TrackModel(nullptr) {};
  virtual ~TrackModel();

  TrackModel(const TrackModel& from);
  TrackModel(TrackModel&& from) noexcept
    : TrackModel() {
    *this = ::std::move(from);
  }

  inline TrackModel& operator=(const TrackModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackModel& operator=(TrackModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackModel* internal_default_instance() {
    return reinterpret_cast<const TrackModel*>(
               &_TrackModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TrackModel& a, TrackModel& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackModel* New() const final {
    return CreateMaybeMessage<TrackModel>(nullptr);
  }

  TrackModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackModel& from);
  void MergeFrom(const TrackModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.TrackModel";
  }
  protected:
  explicit TrackModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fobject_2eproto);
    return ::descriptor_table_parking_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorStateFieldNumber = 3,
    kPriorCovFieldNumber = 4,
    kPosteriorStateFieldNumber = 5,
    kPosteriorCovFieldNumber = 6,
    kTypeFieldNumber = 1,
    kProbFieldNumber = 2,
  };
  // .minieye.parking.TrackMixTargetState prior_state = 3;
  bool has_prior_state() const;
  private:
  bool _internal_has_prior_state() const;
  public:
  void clear_prior_state();
  const ::minieye::parking::TrackMixTargetState& prior_state() const;
  ::minieye::parking::TrackMixTargetState* release_prior_state();
  ::minieye::parking::TrackMixTargetState* mutable_prior_state();
  void set_allocated_prior_state(::minieye::parking::TrackMixTargetState* prior_state);
  private:
  const ::minieye::parking::TrackMixTargetState& _internal_prior_state() const;
  ::minieye::parking::TrackMixTargetState* _internal_mutable_prior_state();
  public:
  void unsafe_arena_set_allocated_prior_state(
      ::minieye::parking::TrackMixTargetState* prior_state);
  ::minieye::parking::TrackMixTargetState* unsafe_arena_release_prior_state();

  // .minieye.parking.TrackMixTargetState prior_cov = 4;
  bool has_prior_cov() const;
  private:
  bool _internal_has_prior_cov() const;
  public:
  void clear_prior_cov();
  const ::minieye::parking::TrackMixTargetState& prior_cov() const;
  ::minieye::parking::TrackMixTargetState* release_prior_cov();
  ::minieye::parking::TrackMixTargetState* mutable_prior_cov();
  void set_allocated_prior_cov(::minieye::parking::TrackMixTargetState* prior_cov);
  private:
  const ::minieye::parking::TrackMixTargetState& _internal_prior_cov() const;
  ::minieye::parking::TrackMixTargetState* _internal_mutable_prior_cov();
  public:
  void unsafe_arena_set_allocated_prior_cov(
      ::minieye::parking::TrackMixTargetState* prior_cov);
  ::minieye::parking::TrackMixTargetState* unsafe_arena_release_prior_cov();

  // .minieye.parking.TrackMixTargetState posterior_state = 5;
  bool has_posterior_state() const;
  private:
  bool _internal_has_posterior_state() const;
  public:
  void clear_posterior_state();
  const ::minieye::parking::TrackMixTargetState& posterior_state() const;
  ::minieye::parking::TrackMixTargetState* release_posterior_state();
  ::minieye::parking::TrackMixTargetState* mutable_posterior_state();
  void set_allocated_posterior_state(::minieye::parking::TrackMixTargetState* posterior_state);
  private:
  const ::minieye::parking::TrackMixTargetState& _internal_posterior_state() const;
  ::minieye::parking::TrackMixTargetState* _internal_mutable_posterior_state();
  public:
  void unsafe_arena_set_allocated_posterior_state(
      ::minieye::parking::TrackMixTargetState* posterior_state);
  ::minieye::parking::TrackMixTargetState* unsafe_arena_release_posterior_state();

  // .minieye.parking.TrackMixTargetState posterior_cov = 6;
  bool has_posterior_cov() const;
  private:
  bool _internal_has_posterior_cov() const;
  public:
  void clear_posterior_cov();
  const ::minieye::parking::TrackMixTargetState& posterior_cov() const;
  ::minieye::parking::TrackMixTargetState* release_posterior_cov();
  ::minieye::parking::TrackMixTargetState* mutable_posterior_cov();
  void set_allocated_posterior_cov(::minieye::parking::TrackMixTargetState* posterior_cov);
  private:
  const ::minieye::parking::TrackMixTargetState& _internal_posterior_cov() const;
  ::minieye::parking::TrackMixTargetState* _internal_mutable_posterior_cov();
  public:
  void unsafe_arena_set_allocated_posterior_cov(
      ::minieye::parking::TrackMixTargetState* posterior_cov);
  ::minieye::parking::TrackMixTargetState* unsafe_arena_release_posterior_cov();

  // .minieye.parking.TrackModelType type = 1;
  void clear_type();
  ::minieye::parking::TrackModelType type() const;
  void set_type(::minieye::parking::TrackModelType value);
  private:
  ::minieye::parking::TrackModelType _internal_type() const;
  void _internal_set_type(::minieye::parking::TrackModelType value);
  public:

  // float prob = 2;
  void clear_prob();
  float prob() const;
  void set_prob(float value);
  private:
  float _internal_prob() const;
  void _internal_set_prob(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.TrackModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::TrackMixTargetState* prior_state_;
  ::minieye::parking::TrackMixTargetState* prior_cov_;
  ::minieye::parking::TrackMixTargetState* posterior_state_;
  ::minieye::parking::TrackMixTargetState* posterior_cov_;
  int type_;
  float prob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fobject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point2f

// float x = 1;
inline void Point2f::clear_x() {
  x_ = 0;
}
inline float Point2f::_internal_x() const {
  return x_;
}
inline float Point2f::x() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Point2f.x)
  return _internal_x();
}
inline void Point2f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Point2f.x)
}

// float y = 2;
inline void Point2f::clear_y() {
  y_ = 0;
}
inline float Point2f::_internal_y() const {
  return y_;
}
inline float Point2f::y() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Point2f.y)
  return _internal_y();
}
inline void Point2f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Point2f.y)
}

// -------------------------------------------------------------------

// Point3f

// float x = 1;
inline void Point3f::clear_x() {
  x_ = 0;
}
inline float Point3f::_internal_x() const {
  return x_;
}
inline float Point3f::x() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Point3f.x)
  return _internal_x();
}
inline void Point3f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Point3f.x)
}

// float y = 2;
inline void Point3f::clear_y() {
  y_ = 0;
}
inline float Point3f::_internal_y() const {
  return y_;
}
inline float Point3f::y() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Point3f.y)
  return _internal_y();
}
inline void Point3f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Point3f.y)
}

// float z = 3;
inline void Point3f::clear_z() {
  z_ = 0;
}
inline float Point3f::_internal_z() const {
  return z_;
}
inline float Point3f::z() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Point3f.z)
  return _internal_z();
}
inline void Point3f::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Point3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Point3f.z)
}

// -------------------------------------------------------------------

// ObjectV1

// .minieye.parking.ObjectType type = 1;
inline void ObjectV1::clear_type() {
  type_ = 0;
}
inline ::minieye::parking::ObjectType ObjectV1::_internal_type() const {
  return static_cast< ::minieye::parking::ObjectType >(type_);
}
inline ::minieye::parking::ObjectType ObjectV1::type() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectV1.type)
  return _internal_type();
}
inline void ObjectV1::_internal_set_type(::minieye::parking::ObjectType value) {
  
  type_ = value;
}
inline void ObjectV1::set_type(::minieye::parking::ObjectType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectV1.type)
}

// .minieye.parking.Point2f locate = 2;
inline bool ObjectV1::_internal_has_locate() const {
  return this != internal_default_instance() && locate_ != nullptr;
}
inline bool ObjectV1::has_locate() const {
  return _internal_has_locate();
}
inline void ObjectV1::clear_locate() {
  if (GetArena() == nullptr && locate_ != nullptr) {
    delete locate_;
  }
  locate_ = nullptr;
}
inline const ::minieye::parking::Point2f& ObjectV1::_internal_locate() const {
  const ::minieye::parking::Point2f* p = locate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& ObjectV1::locate() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectV1.locate)
  return _internal_locate();
}
inline void ObjectV1::unsafe_arena_set_allocated_locate(
    ::minieye::parking::Point2f* locate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locate_);
  }
  locate_ = locate;
  if (locate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectV1.locate)
}
inline ::minieye::parking::Point2f* ObjectV1::release_locate() {
  auto temp = unsafe_arena_release_locate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* ObjectV1::unsafe_arena_release_locate() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectV1.locate)
  
  ::minieye::parking::Point2f* temp = locate_;
  locate_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* ObjectV1::_internal_mutable_locate() {
  
  if (locate_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    locate_ = p;
  }
  return locate_;
}
inline ::minieye::parking::Point2f* ObjectV1::mutable_locate() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectV1.locate)
  return _internal_mutable_locate();
}
inline void ObjectV1::set_allocated_locate(::minieye::parking::Point2f* locate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete locate_;
  }
  if (locate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(locate);
    if (message_arena != submessage_arena) {
      locate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locate, submessage_arena);
    }
    
  } else {
    
  }
  locate_ = locate;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectV1.locate)
}

// .minieye.parking.Point2f size = 3;
inline bool ObjectV1::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool ObjectV1::has_size() const {
  return _internal_has_size();
}
inline void ObjectV1::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
inline const ::minieye::parking::Point2f& ObjectV1::_internal_size() const {
  const ::minieye::parking::Point2f* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& ObjectV1::size() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectV1.size)
  return _internal_size();
}
inline void ObjectV1::unsafe_arena_set_allocated_size(
    ::minieye::parking::Point2f* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectV1.size)
}
inline ::minieye::parking::Point2f* ObjectV1::release_size() {
  auto temp = unsafe_arena_release_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* ObjectV1::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectV1.size)
  
  ::minieye::parking::Point2f* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* ObjectV1::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::minieye::parking::Point2f* ObjectV1::mutable_size() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectV1.size)
  return _internal_mutable_size();
}
inline void ObjectV1::set_allocated_size(::minieye::parking::Point2f* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectV1.size)
}

// float rotation = 4;
inline void ObjectV1::clear_rotation() {
  rotation_ = 0;
}
inline float ObjectV1::_internal_rotation() const {
  return rotation_;
}
inline float ObjectV1::rotation() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectV1.rotation)
  return _internal_rotation();
}
inline void ObjectV1::_internal_set_rotation(float value) {
  
  rotation_ = value;
}
inline void ObjectV1::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectV1.rotation)
}

// -------------------------------------------------------------------

// ObjectListV1

// uint64 frame_id = 1;
inline void ObjectListV1::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectListV1::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectListV1::frame_id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectListV1.frame_id)
  return _internal_frame_id();
}
inline void ObjectListV1::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void ObjectListV1::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectListV1.frame_id)
}

// uint64 timestamp = 2;
inline void ObjectListV1::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectListV1::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectListV1::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectListV1.timestamp)
  return _internal_timestamp();
}
inline void ObjectListV1::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ObjectListV1::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectListV1.timestamp)
}

// uint64 tick = 3;
inline void ObjectListV1::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectListV1::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectListV1::tick() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectListV1.tick)
  return _internal_tick();
}
inline void ObjectListV1::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void ObjectListV1::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectListV1.tick)
}

// repeated .minieye.parking.ObjectV1 list = 4;
inline int ObjectListV1::_internal_list_size() const {
  return list_.size();
}
inline int ObjectListV1::list_size() const {
  return _internal_list_size();
}
inline void ObjectListV1::clear_list() {
  list_.Clear();
}
inline ::minieye::parking::ObjectV1* ObjectListV1::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectListV1.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectV1 >*
ObjectListV1::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.ObjectListV1.list)
  return &list_;
}
inline const ::minieye::parking::ObjectV1& ObjectListV1::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::minieye::parking::ObjectV1& ObjectListV1::list(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectListV1.list)
  return _internal_list(index);
}
inline ::minieye::parking::ObjectV1* ObjectListV1::_internal_add_list() {
  return list_.Add();
}
inline ::minieye::parking::ObjectV1* ObjectListV1::add_list() {
  // @@protoc_insertion_point(field_add:minieye.parking.ObjectListV1.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectV1 >&
ObjectListV1::list() const {
  // @@protoc_insertion_point(field_list:minieye.parking.ObjectListV1.list)
  return list_;
}

// -------------------------------------------------------------------

// Co3Point2f

// .minieye.parking.Point2f image_pt = 1;
inline bool Co3Point2f::_internal_has_image_pt() const {
  return this != internal_default_instance() && image_pt_ != nullptr;
}
inline bool Co3Point2f::has_image_pt() const {
  return _internal_has_image_pt();
}
inline void Co3Point2f::clear_image_pt() {
  if (GetArena() == nullptr && image_pt_ != nullptr) {
    delete image_pt_;
  }
  image_pt_ = nullptr;
}
inline const ::minieye::parking::Point2f& Co3Point2f::_internal_image_pt() const {
  const ::minieye::parking::Point2f* p = image_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& Co3Point2f::image_pt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Co3Point2f.image_pt)
  return _internal_image_pt();
}
inline void Co3Point2f::unsafe_arena_set_allocated_image_pt(
    ::minieye::parking::Point2f* image_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_pt_);
  }
  image_pt_ = image_pt;
  if (image_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Co3Point2f.image_pt)
}
inline ::minieye::parking::Point2f* Co3Point2f::release_image_pt() {
  auto temp = unsafe_arena_release_image_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* Co3Point2f::unsafe_arena_release_image_pt() {
  // @@protoc_insertion_point(field_release:minieye.parking.Co3Point2f.image_pt)
  
  ::minieye::parking::Point2f* temp = image_pt_;
  image_pt_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* Co3Point2f::_internal_mutable_image_pt() {
  
  if (image_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    image_pt_ = p;
  }
  return image_pt_;
}
inline ::minieye::parking::Point2f* Co3Point2f::mutable_image_pt() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Co3Point2f.image_pt)
  return _internal_mutable_image_pt();
}
inline void Co3Point2f::set_allocated_image_pt(::minieye::parking::Point2f* image_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_pt_;
  }
  if (image_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_pt);
    if (message_arena != submessage_arena) {
      image_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_pt, submessage_arena);
    }
    
  } else {
    
  }
  image_pt_ = image_pt;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Co3Point2f.image_pt)
}

// .minieye.parking.Point2f vehicle_pt = 2;
inline bool Co3Point2f::_internal_has_vehicle_pt() const {
  return this != internal_default_instance() && vehicle_pt_ != nullptr;
}
inline bool Co3Point2f::has_vehicle_pt() const {
  return _internal_has_vehicle_pt();
}
inline void Co3Point2f::clear_vehicle_pt() {
  if (GetArena() == nullptr && vehicle_pt_ != nullptr) {
    delete vehicle_pt_;
  }
  vehicle_pt_ = nullptr;
}
inline const ::minieye::parking::Point2f& Co3Point2f::_internal_vehicle_pt() const {
  const ::minieye::parking::Point2f* p = vehicle_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& Co3Point2f::vehicle_pt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Co3Point2f.vehicle_pt)
  return _internal_vehicle_pt();
}
inline void Co3Point2f::unsafe_arena_set_allocated_vehicle_pt(
    ::minieye::parking::Point2f* vehicle_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_pt_);
  }
  vehicle_pt_ = vehicle_pt;
  if (vehicle_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Co3Point2f.vehicle_pt)
}
inline ::minieye::parking::Point2f* Co3Point2f::release_vehicle_pt() {
  auto temp = unsafe_arena_release_vehicle_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* Co3Point2f::unsafe_arena_release_vehicle_pt() {
  // @@protoc_insertion_point(field_release:minieye.parking.Co3Point2f.vehicle_pt)
  
  ::minieye::parking::Point2f* temp = vehicle_pt_;
  vehicle_pt_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* Co3Point2f::_internal_mutable_vehicle_pt() {
  
  if (vehicle_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    vehicle_pt_ = p;
  }
  return vehicle_pt_;
}
inline ::minieye::parking::Point2f* Co3Point2f::mutable_vehicle_pt() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Co3Point2f.vehicle_pt)
  return _internal_mutable_vehicle_pt();
}
inline void Co3Point2f::set_allocated_vehicle_pt(::minieye::parking::Point2f* vehicle_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vehicle_pt_;
  }
  if (vehicle_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vehicle_pt);
    if (message_arena != submessage_arena) {
      vehicle_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_pt, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_pt_ = vehicle_pt;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Co3Point2f.vehicle_pt)
}

// .minieye.parking.Point2f odom_pt = 3;
inline bool Co3Point2f::_internal_has_odom_pt() const {
  return this != internal_default_instance() && odom_pt_ != nullptr;
}
inline bool Co3Point2f::has_odom_pt() const {
  return _internal_has_odom_pt();
}
inline void Co3Point2f::clear_odom_pt() {
  if (GetArena() == nullptr && odom_pt_ != nullptr) {
    delete odom_pt_;
  }
  odom_pt_ = nullptr;
}
inline const ::minieye::parking::Point2f& Co3Point2f::_internal_odom_pt() const {
  const ::minieye::parking::Point2f* p = odom_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& Co3Point2f::odom_pt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Co3Point2f.odom_pt)
  return _internal_odom_pt();
}
inline void Co3Point2f::unsafe_arena_set_allocated_odom_pt(
    ::minieye::parking::Point2f* odom_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odom_pt_);
  }
  odom_pt_ = odom_pt;
  if (odom_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Co3Point2f.odom_pt)
}
inline ::minieye::parking::Point2f* Co3Point2f::release_odom_pt() {
  auto temp = unsafe_arena_release_odom_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* Co3Point2f::unsafe_arena_release_odom_pt() {
  // @@protoc_insertion_point(field_release:minieye.parking.Co3Point2f.odom_pt)
  
  ::minieye::parking::Point2f* temp = odom_pt_;
  odom_pt_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* Co3Point2f::_internal_mutable_odom_pt() {
  
  if (odom_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    odom_pt_ = p;
  }
  return odom_pt_;
}
inline ::minieye::parking::Point2f* Co3Point2f::mutable_odom_pt() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Co3Point2f.odom_pt)
  return _internal_mutable_odom_pt();
}
inline void Co3Point2f::set_allocated_odom_pt(::minieye::parking::Point2f* odom_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete odom_pt_;
  }
  if (odom_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(odom_pt);
    if (message_arena != submessage_arena) {
      odom_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odom_pt, submessage_arena);
    }
    
  } else {
    
  }
  odom_pt_ = odom_pt;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Co3Point2f.odom_pt)
}

// -------------------------------------------------------------------

// Co3Point1f

// float image_pt = 1;
inline void Co3Point1f::clear_image_pt() {
  image_pt_ = 0;
}
inline float Co3Point1f::_internal_image_pt() const {
  return image_pt_;
}
inline float Co3Point1f::image_pt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Co3Point1f.image_pt)
  return _internal_image_pt();
}
inline void Co3Point1f::_internal_set_image_pt(float value) {
  
  image_pt_ = value;
}
inline void Co3Point1f::set_image_pt(float value) {
  _internal_set_image_pt(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Co3Point1f.image_pt)
}

// float vehicle_pt = 2;
inline void Co3Point1f::clear_vehicle_pt() {
  vehicle_pt_ = 0;
}
inline float Co3Point1f::_internal_vehicle_pt() const {
  return vehicle_pt_;
}
inline float Co3Point1f::vehicle_pt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Co3Point1f.vehicle_pt)
  return _internal_vehicle_pt();
}
inline void Co3Point1f::_internal_set_vehicle_pt(float value) {
  
  vehicle_pt_ = value;
}
inline void Co3Point1f::set_vehicle_pt(float value) {
  _internal_set_vehicle_pt(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Co3Point1f.vehicle_pt)
}

// float odom_pt = 3;
inline void Co3Point1f::clear_odom_pt() {
  odom_pt_ = 0;
}
inline float Co3Point1f::_internal_odom_pt() const {
  return odom_pt_;
}
inline float Co3Point1f::odom_pt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Co3Point1f.odom_pt)
  return _internal_odom_pt();
}
inline void Co3Point1f::_internal_set_odom_pt(float value) {
  
  odom_pt_ = value;
}
inline void Co3Point1f::set_odom_pt(float value) {
  _internal_set_odom_pt(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Co3Point1f.odom_pt)
}

// -------------------------------------------------------------------

// Co2Point2f

// .minieye.parking.Point2f image_pt = 1;
inline bool Co2Point2f::_internal_has_image_pt() const {
  return this != internal_default_instance() && image_pt_ != nullptr;
}
inline bool Co2Point2f::has_image_pt() const {
  return _internal_has_image_pt();
}
inline void Co2Point2f::clear_image_pt() {
  if (GetArena() == nullptr && image_pt_ != nullptr) {
    delete image_pt_;
  }
  image_pt_ = nullptr;
}
inline const ::minieye::parking::Point2f& Co2Point2f::_internal_image_pt() const {
  const ::minieye::parking::Point2f* p = image_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& Co2Point2f::image_pt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Co2Point2f.image_pt)
  return _internal_image_pt();
}
inline void Co2Point2f::unsafe_arena_set_allocated_image_pt(
    ::minieye::parking::Point2f* image_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_pt_);
  }
  image_pt_ = image_pt;
  if (image_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Co2Point2f.image_pt)
}
inline ::minieye::parking::Point2f* Co2Point2f::release_image_pt() {
  auto temp = unsafe_arena_release_image_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* Co2Point2f::unsafe_arena_release_image_pt() {
  // @@protoc_insertion_point(field_release:minieye.parking.Co2Point2f.image_pt)
  
  ::minieye::parking::Point2f* temp = image_pt_;
  image_pt_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* Co2Point2f::_internal_mutable_image_pt() {
  
  if (image_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    image_pt_ = p;
  }
  return image_pt_;
}
inline ::minieye::parking::Point2f* Co2Point2f::mutable_image_pt() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Co2Point2f.image_pt)
  return _internal_mutable_image_pt();
}
inline void Co2Point2f::set_allocated_image_pt(::minieye::parking::Point2f* image_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_pt_;
  }
  if (image_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_pt);
    if (message_arena != submessage_arena) {
      image_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_pt, submessage_arena);
    }
    
  } else {
    
  }
  image_pt_ = image_pt;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Co2Point2f.image_pt)
}

// .minieye.parking.Point2f vehicle_pt = 2;
inline bool Co2Point2f::_internal_has_vehicle_pt() const {
  return this != internal_default_instance() && vehicle_pt_ != nullptr;
}
inline bool Co2Point2f::has_vehicle_pt() const {
  return _internal_has_vehicle_pt();
}
inline void Co2Point2f::clear_vehicle_pt() {
  if (GetArena() == nullptr && vehicle_pt_ != nullptr) {
    delete vehicle_pt_;
  }
  vehicle_pt_ = nullptr;
}
inline const ::minieye::parking::Point2f& Co2Point2f::_internal_vehicle_pt() const {
  const ::minieye::parking::Point2f* p = vehicle_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& Co2Point2f::vehicle_pt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Co2Point2f.vehicle_pt)
  return _internal_vehicle_pt();
}
inline void Co2Point2f::unsafe_arena_set_allocated_vehicle_pt(
    ::minieye::parking::Point2f* vehicle_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_pt_);
  }
  vehicle_pt_ = vehicle_pt;
  if (vehicle_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Co2Point2f.vehicle_pt)
}
inline ::minieye::parking::Point2f* Co2Point2f::release_vehicle_pt() {
  auto temp = unsafe_arena_release_vehicle_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* Co2Point2f::unsafe_arena_release_vehicle_pt() {
  // @@protoc_insertion_point(field_release:minieye.parking.Co2Point2f.vehicle_pt)
  
  ::minieye::parking::Point2f* temp = vehicle_pt_;
  vehicle_pt_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* Co2Point2f::_internal_mutable_vehicle_pt() {
  
  if (vehicle_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    vehicle_pt_ = p;
  }
  return vehicle_pt_;
}
inline ::minieye::parking::Point2f* Co2Point2f::mutable_vehicle_pt() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Co2Point2f.vehicle_pt)
  return _internal_mutable_vehicle_pt();
}
inline void Co2Point2f::set_allocated_vehicle_pt(::minieye::parking::Point2f* vehicle_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vehicle_pt_;
  }
  if (vehicle_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vehicle_pt);
    if (message_arena != submessage_arena) {
      vehicle_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_pt, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_pt_ = vehicle_pt;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Co2Point2f.vehicle_pt)
}

// -------------------------------------------------------------------

// ObjectTrackV1

// .minieye.parking.Co3Point2f locate = 1;
inline bool ObjectTrackV1::_internal_has_locate() const {
  return this != internal_default_instance() && locate_ != nullptr;
}
inline bool ObjectTrackV1::has_locate() const {
  return _internal_has_locate();
}
inline void ObjectTrackV1::clear_locate() {
  if (GetArena() == nullptr && locate_ != nullptr) {
    delete locate_;
  }
  locate_ = nullptr;
}
inline const ::minieye::parking::Co3Point2f& ObjectTrackV1::_internal_locate() const {
  const ::minieye::parking::Co3Point2f* p = locate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Co3Point2f*>(
      &::minieye::parking::_Co3Point2f_default_instance_);
}
inline const ::minieye::parking::Co3Point2f& ObjectTrackV1::locate() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackV1.locate)
  return _internal_locate();
}
inline void ObjectTrackV1::unsafe_arena_set_allocated_locate(
    ::minieye::parking::Co3Point2f* locate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locate_);
  }
  locate_ = locate;
  if (locate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectTrackV1.locate)
}
inline ::minieye::parking::Co3Point2f* ObjectTrackV1::release_locate() {
  auto temp = unsafe_arena_release_locate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Co3Point2f* ObjectTrackV1::unsafe_arena_release_locate() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectTrackV1.locate)
  
  ::minieye::parking::Co3Point2f* temp = locate_;
  locate_ = nullptr;
  return temp;
}
inline ::minieye::parking::Co3Point2f* ObjectTrackV1::_internal_mutable_locate() {
  
  if (locate_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Co3Point2f>(GetArena());
    locate_ = p;
  }
  return locate_;
}
inline ::minieye::parking::Co3Point2f* ObjectTrackV1::mutable_locate() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectTrackV1.locate)
  return _internal_mutable_locate();
}
inline void ObjectTrackV1::set_allocated_locate(::minieye::parking::Co3Point2f* locate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete locate_;
  }
  if (locate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(locate);
    if (message_arena != submessage_arena) {
      locate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locate, submessage_arena);
    }
    
  } else {
    
  }
  locate_ = locate;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectTrackV1.locate)
}

// .minieye.parking.Co3Point2f pre_locate = 2;
inline bool ObjectTrackV1::_internal_has_pre_locate() const {
  return this != internal_default_instance() && pre_locate_ != nullptr;
}
inline bool ObjectTrackV1::has_pre_locate() const {
  return _internal_has_pre_locate();
}
inline void ObjectTrackV1::clear_pre_locate() {
  if (GetArena() == nullptr && pre_locate_ != nullptr) {
    delete pre_locate_;
  }
  pre_locate_ = nullptr;
}
inline const ::minieye::parking::Co3Point2f& ObjectTrackV1::_internal_pre_locate() const {
  const ::minieye::parking::Co3Point2f* p = pre_locate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Co3Point2f*>(
      &::minieye::parking::_Co3Point2f_default_instance_);
}
inline const ::minieye::parking::Co3Point2f& ObjectTrackV1::pre_locate() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackV1.pre_locate)
  return _internal_pre_locate();
}
inline void ObjectTrackV1::unsafe_arena_set_allocated_pre_locate(
    ::minieye::parking::Co3Point2f* pre_locate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pre_locate_);
  }
  pre_locate_ = pre_locate;
  if (pre_locate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectTrackV1.pre_locate)
}
inline ::minieye::parking::Co3Point2f* ObjectTrackV1::release_pre_locate() {
  auto temp = unsafe_arena_release_pre_locate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Co3Point2f* ObjectTrackV1::unsafe_arena_release_pre_locate() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectTrackV1.pre_locate)
  
  ::minieye::parking::Co3Point2f* temp = pre_locate_;
  pre_locate_ = nullptr;
  return temp;
}
inline ::minieye::parking::Co3Point2f* ObjectTrackV1::_internal_mutable_pre_locate() {
  
  if (pre_locate_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Co3Point2f>(GetArena());
    pre_locate_ = p;
  }
  return pre_locate_;
}
inline ::minieye::parking::Co3Point2f* ObjectTrackV1::mutable_pre_locate() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectTrackV1.pre_locate)
  return _internal_mutable_pre_locate();
}
inline void ObjectTrackV1::set_allocated_pre_locate(::minieye::parking::Co3Point2f* pre_locate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pre_locate_;
  }
  if (pre_locate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pre_locate);
    if (message_arena != submessage_arena) {
      pre_locate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pre_locate, submessage_arena);
    }
    
  } else {
    
  }
  pre_locate_ = pre_locate;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectTrackV1.pre_locate)
}

// .minieye.parking.Co3Point1f rotation = 3;
inline bool ObjectTrackV1::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool ObjectTrackV1::has_rotation() const {
  return _internal_has_rotation();
}
inline void ObjectTrackV1::clear_rotation() {
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::minieye::parking::Co3Point1f& ObjectTrackV1::_internal_rotation() const {
  const ::minieye::parking::Co3Point1f* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Co3Point1f*>(
      &::minieye::parking::_Co3Point1f_default_instance_);
}
inline const ::minieye::parking::Co3Point1f& ObjectTrackV1::rotation() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackV1.rotation)
  return _internal_rotation();
}
inline void ObjectTrackV1::unsafe_arena_set_allocated_rotation(
    ::minieye::parking::Co3Point1f* rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectTrackV1.rotation)
}
inline ::minieye::parking::Co3Point1f* ObjectTrackV1::release_rotation() {
  auto temp = unsafe_arena_release_rotation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Co3Point1f* ObjectTrackV1::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectTrackV1.rotation)
  
  ::minieye::parking::Co3Point1f* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::minieye::parking::Co3Point1f* ObjectTrackV1::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Co3Point1f>(GetArena());
    rotation_ = p;
  }
  return rotation_;
}
inline ::minieye::parking::Co3Point1f* ObjectTrackV1::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectTrackV1.rotation)
  return _internal_mutable_rotation();
}
inline void ObjectTrackV1::set_allocated_rotation(::minieye::parking::Co3Point1f* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectTrackV1.rotation)
}

// .minieye.parking.Co3Point2f velocity = 4;
inline bool ObjectTrackV1::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool ObjectTrackV1::has_velocity() const {
  return _internal_has_velocity();
}
inline void ObjectTrackV1::clear_velocity() {
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::minieye::parking::Co3Point2f& ObjectTrackV1::_internal_velocity() const {
  const ::minieye::parking::Co3Point2f* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Co3Point2f*>(
      &::minieye::parking::_Co3Point2f_default_instance_);
}
inline const ::minieye::parking::Co3Point2f& ObjectTrackV1::velocity() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackV1.velocity)
  return _internal_velocity();
}
inline void ObjectTrackV1::unsafe_arena_set_allocated_velocity(
    ::minieye::parking::Co3Point2f* velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectTrackV1.velocity)
}
inline ::minieye::parking::Co3Point2f* ObjectTrackV1::release_velocity() {
  auto temp = unsafe_arena_release_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Co3Point2f* ObjectTrackV1::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectTrackV1.velocity)
  
  ::minieye::parking::Co3Point2f* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::minieye::parking::Co3Point2f* ObjectTrackV1::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Co3Point2f>(GetArena());
    velocity_ = p;
  }
  return velocity_;
}
inline ::minieye::parking::Co3Point2f* ObjectTrackV1::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectTrackV1.velocity)
  return _internal_mutable_velocity();
}
inline void ObjectTrackV1::set_allocated_velocity(::minieye::parking::Co3Point2f* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectTrackV1.velocity)
}

// .minieye.parking.Co2Point2f size = 5;
inline bool ObjectTrackV1::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool ObjectTrackV1::has_size() const {
  return _internal_has_size();
}
inline void ObjectTrackV1::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
inline const ::minieye::parking::Co2Point2f& ObjectTrackV1::_internal_size() const {
  const ::minieye::parking::Co2Point2f* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Co2Point2f*>(
      &::minieye::parking::_Co2Point2f_default_instance_);
}
inline const ::minieye::parking::Co2Point2f& ObjectTrackV1::size() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackV1.size)
  return _internal_size();
}
inline void ObjectTrackV1::unsafe_arena_set_allocated_size(
    ::minieye::parking::Co2Point2f* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectTrackV1.size)
}
inline ::minieye::parking::Co2Point2f* ObjectTrackV1::release_size() {
  auto temp = unsafe_arena_release_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Co2Point2f* ObjectTrackV1::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectTrackV1.size)
  
  ::minieye::parking::Co2Point2f* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::minieye::parking::Co2Point2f* ObjectTrackV1::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Co2Point2f>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::minieye::parking::Co2Point2f* ObjectTrackV1::mutable_size() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectTrackV1.size)
  return _internal_mutable_size();
}
inline void ObjectTrackV1::set_allocated_size(::minieye::parking::Co2Point2f* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectTrackV1.size)
}

// uint32 id = 6;
inline void ObjectTrackV1::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectTrackV1::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectTrackV1::id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackV1.id)
  return _internal_id();
}
inline void ObjectTrackV1::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ObjectTrackV1::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectTrackV1.id)
}

// -------------------------------------------------------------------

// ObjectTrackListV1

// uint64 frame_id = 1;
inline void ObjectTrackListV1::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectTrackListV1::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectTrackListV1::frame_id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackListV1.frame_id)
  return _internal_frame_id();
}
inline void ObjectTrackListV1::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void ObjectTrackListV1::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectTrackListV1.frame_id)
}

// uint64 timestamp = 2;
inline void ObjectTrackListV1::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectTrackListV1::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectTrackListV1::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackListV1.timestamp)
  return _internal_timestamp();
}
inline void ObjectTrackListV1::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ObjectTrackListV1::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectTrackListV1.timestamp)
}

// uint64 tick = 3;
inline void ObjectTrackListV1::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectTrackListV1::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectTrackListV1::tick() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackListV1.tick)
  return _internal_tick();
}
inline void ObjectTrackListV1::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void ObjectTrackListV1::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectTrackListV1.tick)
}

// repeated .minieye.parking.ObjectTrackV1 vehicles = 4;
inline int ObjectTrackListV1::_internal_vehicles_size() const {
  return vehicles_.size();
}
inline int ObjectTrackListV1::vehicles_size() const {
  return _internal_vehicles_size();
}
inline void ObjectTrackListV1::clear_vehicles() {
  vehicles_.Clear();
}
inline ::minieye::parking::ObjectTrackV1* ObjectTrackListV1::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectTrackListV1.vehicles)
  return vehicles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 >*
ObjectTrackListV1::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.ObjectTrackListV1.vehicles)
  return &vehicles_;
}
inline const ::minieye::parking::ObjectTrackV1& ObjectTrackListV1::_internal_vehicles(int index) const {
  return vehicles_.Get(index);
}
inline const ::minieye::parking::ObjectTrackV1& ObjectTrackListV1::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackListV1.vehicles)
  return _internal_vehicles(index);
}
inline ::minieye::parking::ObjectTrackV1* ObjectTrackListV1::_internal_add_vehicles() {
  return vehicles_.Add();
}
inline ::minieye::parking::ObjectTrackV1* ObjectTrackListV1::add_vehicles() {
  // @@protoc_insertion_point(field_add:minieye.parking.ObjectTrackListV1.vehicles)
  return _internal_add_vehicles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 >&
ObjectTrackListV1::vehicles() const {
  // @@protoc_insertion_point(field_list:minieye.parking.ObjectTrackListV1.vehicles)
  return vehicles_;
}

// repeated .minieye.parking.ObjectTrackV1 pedestrians = 5;
inline int ObjectTrackListV1::_internal_pedestrians_size() const {
  return pedestrians_.size();
}
inline int ObjectTrackListV1::pedestrians_size() const {
  return _internal_pedestrians_size();
}
inline void ObjectTrackListV1::clear_pedestrians() {
  pedestrians_.Clear();
}
inline ::minieye::parking::ObjectTrackV1* ObjectTrackListV1::mutable_pedestrians(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectTrackListV1.pedestrians)
  return pedestrians_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 >*
ObjectTrackListV1::mutable_pedestrians() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.ObjectTrackListV1.pedestrians)
  return &pedestrians_;
}
inline const ::minieye::parking::ObjectTrackV1& ObjectTrackListV1::_internal_pedestrians(int index) const {
  return pedestrians_.Get(index);
}
inline const ::minieye::parking::ObjectTrackV1& ObjectTrackListV1::pedestrians(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackListV1.pedestrians)
  return _internal_pedestrians(index);
}
inline ::minieye::parking::ObjectTrackV1* ObjectTrackListV1::_internal_add_pedestrians() {
  return pedestrians_.Add();
}
inline ::minieye::parking::ObjectTrackV1* ObjectTrackListV1::add_pedestrians() {
  // @@protoc_insertion_point(field_add:minieye.parking.ObjectTrackListV1.pedestrians)
  return _internal_add_pedestrians();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 >&
ObjectTrackListV1::pedestrians() const {
  // @@protoc_insertion_point(field_list:minieye.parking.ObjectTrackListV1.pedestrians)
  return pedestrians_;
}

// repeated .minieye.parking.ObjectTrackV1 cones = 6;
inline int ObjectTrackListV1::_internal_cones_size() const {
  return cones_.size();
}
inline int ObjectTrackListV1::cones_size() const {
  return _internal_cones_size();
}
inline void ObjectTrackListV1::clear_cones() {
  cones_.Clear();
}
inline ::minieye::parking::ObjectTrackV1* ObjectTrackListV1::mutable_cones(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectTrackListV1.cones)
  return cones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 >*
ObjectTrackListV1::mutable_cones() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.ObjectTrackListV1.cones)
  return &cones_;
}
inline const ::minieye::parking::ObjectTrackV1& ObjectTrackListV1::_internal_cones(int index) const {
  return cones_.Get(index);
}
inline const ::minieye::parking::ObjectTrackV1& ObjectTrackListV1::cones(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackListV1.cones)
  return _internal_cones(index);
}
inline ::minieye::parking::ObjectTrackV1* ObjectTrackListV1::_internal_add_cones() {
  return cones_.Add();
}
inline ::minieye::parking::ObjectTrackV1* ObjectTrackListV1::add_cones() {
  // @@protoc_insertion_point(field_add:minieye.parking.ObjectTrackListV1.cones)
  return _internal_add_cones();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrackV1 >&
ObjectTrackListV1::cones() const {
  // @@protoc_insertion_point(field_list:minieye.parking.ObjectTrackListV1.cones)
  return cones_;
}

// -------------------------------------------------------------------

// ObjectBev

// .minieye.parking.ObjectType type = 1;
inline void ObjectBev::clear_type() {
  type_ = 0;
}
inline ::minieye::parking::ObjectType ObjectBev::_internal_type() const {
  return static_cast< ::minieye::parking::ObjectType >(type_);
}
inline ::minieye::parking::ObjectType ObjectBev::type() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectBev.type)
  return _internal_type();
}
inline void ObjectBev::_internal_set_type(::minieye::parking::ObjectType value) {
  
  type_ = value;
}
inline void ObjectBev::set_type(::minieye::parking::ObjectType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectBev.type)
}

// .minieye.parking.Point2f locate = 2;
inline bool ObjectBev::_internal_has_locate() const {
  return this != internal_default_instance() && locate_ != nullptr;
}
inline bool ObjectBev::has_locate() const {
  return _internal_has_locate();
}
inline void ObjectBev::clear_locate() {
  if (GetArena() == nullptr && locate_ != nullptr) {
    delete locate_;
  }
  locate_ = nullptr;
}
inline const ::minieye::parking::Point2f& ObjectBev::_internal_locate() const {
  const ::minieye::parking::Point2f* p = locate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& ObjectBev::locate() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectBev.locate)
  return _internal_locate();
}
inline void ObjectBev::unsafe_arena_set_allocated_locate(
    ::minieye::parking::Point2f* locate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locate_);
  }
  locate_ = locate;
  if (locate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectBev.locate)
}
inline ::minieye::parking::Point2f* ObjectBev::release_locate() {
  auto temp = unsafe_arena_release_locate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* ObjectBev::unsafe_arena_release_locate() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectBev.locate)
  
  ::minieye::parking::Point2f* temp = locate_;
  locate_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* ObjectBev::_internal_mutable_locate() {
  
  if (locate_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    locate_ = p;
  }
  return locate_;
}
inline ::minieye::parking::Point2f* ObjectBev::mutable_locate() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectBev.locate)
  return _internal_mutable_locate();
}
inline void ObjectBev::set_allocated_locate(::minieye::parking::Point2f* locate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete locate_;
  }
  if (locate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(locate);
    if (message_arena != submessage_arena) {
      locate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locate, submessage_arena);
    }
    
  } else {
    
  }
  locate_ = locate;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectBev.locate)
}

// .minieye.parking.Point2f size = 3;
inline bool ObjectBev::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool ObjectBev::has_size() const {
  return _internal_has_size();
}
inline void ObjectBev::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
inline const ::minieye::parking::Point2f& ObjectBev::_internal_size() const {
  const ::minieye::parking::Point2f* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& ObjectBev::size() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectBev.size)
  return _internal_size();
}
inline void ObjectBev::unsafe_arena_set_allocated_size(
    ::minieye::parking::Point2f* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectBev.size)
}
inline ::minieye::parking::Point2f* ObjectBev::release_size() {
  auto temp = unsafe_arena_release_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* ObjectBev::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectBev.size)
  
  ::minieye::parking::Point2f* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* ObjectBev::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::minieye::parking::Point2f* ObjectBev::mutable_size() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectBev.size)
  return _internal_mutable_size();
}
inline void ObjectBev::set_allocated_size(::minieye::parking::Point2f* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectBev.size)
}

// float yaw = 4;
inline void ObjectBev::clear_yaw() {
  yaw_ = 0;
}
inline float ObjectBev::_internal_yaw() const {
  return yaw_;
}
inline float ObjectBev::yaw() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectBev.yaw)
  return _internal_yaw();
}
inline void ObjectBev::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void ObjectBev::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectBev.yaw)
}

// -------------------------------------------------------------------

// Detect2dData

// .minieye.parking.Point2f LUPoint = 1;
inline bool Detect2dData::_internal_has_lupoint() const {
  return this != internal_default_instance() && lupoint_ != nullptr;
}
inline bool Detect2dData::has_lupoint() const {
  return _internal_has_lupoint();
}
inline void Detect2dData::clear_lupoint() {
  if (GetArena() == nullptr && lupoint_ != nullptr) {
    delete lupoint_;
  }
  lupoint_ = nullptr;
}
inline const ::minieye::parking::Point2f& Detect2dData::_internal_lupoint() const {
  const ::minieye::parking::Point2f* p = lupoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& Detect2dData::lupoint() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Detect2dData.LUPoint)
  return _internal_lupoint();
}
inline void Detect2dData::unsafe_arena_set_allocated_lupoint(
    ::minieye::parking::Point2f* lupoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lupoint_);
  }
  lupoint_ = lupoint;
  if (lupoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Detect2dData.LUPoint)
}
inline ::minieye::parking::Point2f* Detect2dData::release_lupoint() {
  auto temp = unsafe_arena_release_lupoint();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* Detect2dData::unsafe_arena_release_lupoint() {
  // @@protoc_insertion_point(field_release:minieye.parking.Detect2dData.LUPoint)
  
  ::minieye::parking::Point2f* temp = lupoint_;
  lupoint_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* Detect2dData::_internal_mutable_lupoint() {
  
  if (lupoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    lupoint_ = p;
  }
  return lupoint_;
}
inline ::minieye::parking::Point2f* Detect2dData::mutable_lupoint() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Detect2dData.LUPoint)
  return _internal_mutable_lupoint();
}
inline void Detect2dData::set_allocated_lupoint(::minieye::parking::Point2f* lupoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lupoint_;
  }
  if (lupoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lupoint);
    if (message_arena != submessage_arena) {
      lupoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lupoint, submessage_arena);
    }
    
  } else {
    
  }
  lupoint_ = lupoint;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Detect2dData.LUPoint)
}

// .minieye.parking.Point2f RDPoint = 2;
inline bool Detect2dData::_internal_has_rdpoint() const {
  return this != internal_default_instance() && rdpoint_ != nullptr;
}
inline bool Detect2dData::has_rdpoint() const {
  return _internal_has_rdpoint();
}
inline void Detect2dData::clear_rdpoint() {
  if (GetArena() == nullptr && rdpoint_ != nullptr) {
    delete rdpoint_;
  }
  rdpoint_ = nullptr;
}
inline const ::minieye::parking::Point2f& Detect2dData::_internal_rdpoint() const {
  const ::minieye::parking::Point2f* p = rdpoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& Detect2dData::rdpoint() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Detect2dData.RDPoint)
  return _internal_rdpoint();
}
inline void Detect2dData::unsafe_arena_set_allocated_rdpoint(
    ::minieye::parking::Point2f* rdpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rdpoint_);
  }
  rdpoint_ = rdpoint;
  if (rdpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Detect2dData.RDPoint)
}
inline ::minieye::parking::Point2f* Detect2dData::release_rdpoint() {
  auto temp = unsafe_arena_release_rdpoint();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* Detect2dData::unsafe_arena_release_rdpoint() {
  // @@protoc_insertion_point(field_release:minieye.parking.Detect2dData.RDPoint)
  
  ::minieye::parking::Point2f* temp = rdpoint_;
  rdpoint_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* Detect2dData::_internal_mutable_rdpoint() {
  
  if (rdpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    rdpoint_ = p;
  }
  return rdpoint_;
}
inline ::minieye::parking::Point2f* Detect2dData::mutable_rdpoint() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Detect2dData.RDPoint)
  return _internal_mutable_rdpoint();
}
inline void Detect2dData::set_allocated_rdpoint(::minieye::parking::Point2f* rdpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rdpoint_;
  }
  if (rdpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rdpoint);
    if (message_arena != submessage_arena) {
      rdpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rdpoint, submessage_arena);
    }
    
  } else {
    
  }
  rdpoint_ = rdpoint;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Detect2dData.RDPoint)
}

// -------------------------------------------------------------------

// Detect3dData

// .minieye.parking.Point3f center = 1;
inline bool Detect3dData::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool Detect3dData::has_center() const {
  return _internal_has_center();
}
inline void Detect3dData::clear_center() {
  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::minieye::parking::Point3f& Detect3dData::_internal_center() const {
  const ::minieye::parking::Point3f* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point3f*>(
      &::minieye::parking::_Point3f_default_instance_);
}
inline const ::minieye::parking::Point3f& Detect3dData::center() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Detect3dData.center)
  return _internal_center();
}
inline void Detect3dData::unsafe_arena_set_allocated_center(
    ::minieye::parking::Point3f* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Detect3dData.center)
}
inline ::minieye::parking::Point3f* Detect3dData::release_center() {
  auto temp = unsafe_arena_release_center();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point3f* Detect3dData::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:minieye.parking.Detect3dData.center)
  
  ::minieye::parking::Point3f* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point3f* Detect3dData::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point3f>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::minieye::parking::Point3f* Detect3dData::mutable_center() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Detect3dData.center)
  return _internal_mutable_center();
}
inline void Detect3dData::set_allocated_center(::minieye::parking::Point3f* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Detect3dData.center)
}

// .minieye.parking.Point3f boxsize = 2;
inline bool Detect3dData::_internal_has_boxsize() const {
  return this != internal_default_instance() && boxsize_ != nullptr;
}
inline bool Detect3dData::has_boxsize() const {
  return _internal_has_boxsize();
}
inline void Detect3dData::clear_boxsize() {
  if (GetArena() == nullptr && boxsize_ != nullptr) {
    delete boxsize_;
  }
  boxsize_ = nullptr;
}
inline const ::minieye::parking::Point3f& Detect3dData::_internal_boxsize() const {
  const ::minieye::parking::Point3f* p = boxsize_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point3f*>(
      &::minieye::parking::_Point3f_default_instance_);
}
inline const ::minieye::parking::Point3f& Detect3dData::boxsize() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Detect3dData.boxsize)
  return _internal_boxsize();
}
inline void Detect3dData::unsafe_arena_set_allocated_boxsize(
    ::minieye::parking::Point3f* boxsize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boxsize_);
  }
  boxsize_ = boxsize;
  if (boxsize) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.Detect3dData.boxsize)
}
inline ::minieye::parking::Point3f* Detect3dData::release_boxsize() {
  auto temp = unsafe_arena_release_boxsize();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point3f* Detect3dData::unsafe_arena_release_boxsize() {
  // @@protoc_insertion_point(field_release:minieye.parking.Detect3dData.boxsize)
  
  ::minieye::parking::Point3f* temp = boxsize_;
  boxsize_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point3f* Detect3dData::_internal_mutable_boxsize() {
  
  if (boxsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point3f>(GetArena());
    boxsize_ = p;
  }
  return boxsize_;
}
inline ::minieye::parking::Point3f* Detect3dData::mutable_boxsize() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.Detect3dData.boxsize)
  return _internal_mutable_boxsize();
}
inline void Detect3dData::set_allocated_boxsize(::minieye::parking::Point3f* boxsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete boxsize_;
  }
  if (boxsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(boxsize);
    if (message_arena != submessage_arena) {
      boxsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boxsize, submessage_arena);
    }
    
  } else {
    
  }
  boxsize_ = boxsize;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.Detect3dData.boxsize)
}

// float yaw = 3;
inline void Detect3dData::clear_yaw() {
  yaw_ = 0;
}
inline float Detect3dData::_internal_yaw() const {
  return yaw_;
}
inline float Detect3dData::yaw() const {
  // @@protoc_insertion_point(field_get:minieye.parking.Detect3dData.yaw)
  return _internal_yaw();
}
inline void Detect3dData::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void Detect3dData::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:minieye.parking.Detect3dData.yaw)
}

// -------------------------------------------------------------------

// ObjectMono3d

// .minieye.parking.ObjectType type = 1;
inline void ObjectMono3d::clear_type() {
  type_ = 0;
}
inline ::minieye::parking::ObjectType ObjectMono3d::_internal_type() const {
  return static_cast< ::minieye::parking::ObjectType >(type_);
}
inline ::minieye::parking::ObjectType ObjectMono3d::type() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectMono3d.type)
  return _internal_type();
}
inline void ObjectMono3d::_internal_set_type(::minieye::parking::ObjectType value) {
  
  type_ = value;
}
inline void ObjectMono3d::set_type(::minieye::parking::ObjectType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectMono3d.type)
}

// float score = 2;
inline void ObjectMono3d::clear_score() {
  score_ = 0;
}
inline float ObjectMono3d::_internal_score() const {
  return score_;
}
inline float ObjectMono3d::score() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectMono3d.score)
  return _internal_score();
}
inline void ObjectMono3d::_internal_set_score(float value) {
  
  score_ = value;
}
inline void ObjectMono3d::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectMono3d.score)
}

// .minieye.parking.CameraId cameraid = 3;
inline void ObjectMono3d::clear_cameraid() {
  cameraid_ = 0;
}
inline ::minieye::parking::CameraId ObjectMono3d::_internal_cameraid() const {
  return static_cast< ::minieye::parking::CameraId >(cameraid_);
}
inline ::minieye::parking::CameraId ObjectMono3d::cameraid() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectMono3d.cameraid)
  return _internal_cameraid();
}
inline void ObjectMono3d::_internal_set_cameraid(::minieye::parking::CameraId value) {
  
  cameraid_ = value;
}
inline void ObjectMono3d::set_cameraid(::minieye::parking::CameraId value) {
  _internal_set_cameraid(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectMono3d.cameraid)
}

// .minieye.parking.Detect2dData box2d = 4;
inline bool ObjectMono3d::_internal_has_box2d() const {
  return this != internal_default_instance() && box2d_ != nullptr;
}
inline bool ObjectMono3d::has_box2d() const {
  return _internal_has_box2d();
}
inline void ObjectMono3d::clear_box2d() {
  if (GetArena() == nullptr && box2d_ != nullptr) {
    delete box2d_;
  }
  box2d_ = nullptr;
}
inline const ::minieye::parking::Detect2dData& ObjectMono3d::_internal_box2d() const {
  const ::minieye::parking::Detect2dData* p = box2d_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Detect2dData*>(
      &::minieye::parking::_Detect2dData_default_instance_);
}
inline const ::minieye::parking::Detect2dData& ObjectMono3d::box2d() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectMono3d.box2d)
  return _internal_box2d();
}
inline void ObjectMono3d::unsafe_arena_set_allocated_box2d(
    ::minieye::parking::Detect2dData* box2d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box2d_);
  }
  box2d_ = box2d;
  if (box2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectMono3d.box2d)
}
inline ::minieye::parking::Detect2dData* ObjectMono3d::release_box2d() {
  auto temp = unsafe_arena_release_box2d();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Detect2dData* ObjectMono3d::unsafe_arena_release_box2d() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectMono3d.box2d)
  
  ::minieye::parking::Detect2dData* temp = box2d_;
  box2d_ = nullptr;
  return temp;
}
inline ::minieye::parking::Detect2dData* ObjectMono3d::_internal_mutable_box2d() {
  
  if (box2d_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Detect2dData>(GetArena());
    box2d_ = p;
  }
  return box2d_;
}
inline ::minieye::parking::Detect2dData* ObjectMono3d::mutable_box2d() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectMono3d.box2d)
  return _internal_mutable_box2d();
}
inline void ObjectMono3d::set_allocated_box2d(::minieye::parking::Detect2dData* box2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete box2d_;
  }
  if (box2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(box2d);
    if (message_arena != submessage_arena) {
      box2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box2d, submessage_arena);
    }
    
  } else {
    
  }
  box2d_ = box2d;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectMono3d.box2d)
}

// .minieye.parking.Detect3dData box3d = 5;
inline bool ObjectMono3d::_internal_has_box3d() const {
  return this != internal_default_instance() && box3d_ != nullptr;
}
inline bool ObjectMono3d::has_box3d() const {
  return _internal_has_box3d();
}
inline void ObjectMono3d::clear_box3d() {
  if (GetArena() == nullptr && box3d_ != nullptr) {
    delete box3d_;
  }
  box3d_ = nullptr;
}
inline const ::minieye::parking::Detect3dData& ObjectMono3d::_internal_box3d() const {
  const ::minieye::parking::Detect3dData* p = box3d_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Detect3dData*>(
      &::minieye::parking::_Detect3dData_default_instance_);
}
inline const ::minieye::parking::Detect3dData& ObjectMono3d::box3d() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectMono3d.box3d)
  return _internal_box3d();
}
inline void ObjectMono3d::unsafe_arena_set_allocated_box3d(
    ::minieye::parking::Detect3dData* box3d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box3d_);
  }
  box3d_ = box3d;
  if (box3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectMono3d.box3d)
}
inline ::minieye::parking::Detect3dData* ObjectMono3d::release_box3d() {
  auto temp = unsafe_arena_release_box3d();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Detect3dData* ObjectMono3d::unsafe_arena_release_box3d() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectMono3d.box3d)
  
  ::minieye::parking::Detect3dData* temp = box3d_;
  box3d_ = nullptr;
  return temp;
}
inline ::minieye::parking::Detect3dData* ObjectMono3d::_internal_mutable_box3d() {
  
  if (box3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Detect3dData>(GetArena());
    box3d_ = p;
  }
  return box3d_;
}
inline ::minieye::parking::Detect3dData* ObjectMono3d::mutable_box3d() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectMono3d.box3d)
  return _internal_mutable_box3d();
}
inline void ObjectMono3d::set_allocated_box3d(::minieye::parking::Detect3dData* box3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete box3d_;
  }
  if (box3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(box3d);
    if (message_arena != submessage_arena) {
      box3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box3d, submessage_arena);
    }
    
  } else {
    
  }
  box3d_ = box3d;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectMono3d.box3d)
}

// -------------------------------------------------------------------

// ObjectList

// uint64 frame_id = 1;
inline void ObjectList::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectList::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectList::frame_id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectList.frame_id)
  return _internal_frame_id();
}
inline void ObjectList::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void ObjectList::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectList.frame_id)
}

// uint64 timestamp = 2;
inline void ObjectList::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectList::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectList::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectList.timestamp)
  return _internal_timestamp();
}
inline void ObjectList::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ObjectList::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectList.timestamp)
}

// uint64 tick = 3;
inline void ObjectList::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectList::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectList::tick() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectList.tick)
  return _internal_tick();
}
inline void ObjectList::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void ObjectList::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectList.tick)
}

// repeated .minieye.parking.ObjectBev list_object_bev = 4;
inline int ObjectList::_internal_list_object_bev_size() const {
  return list_object_bev_.size();
}
inline int ObjectList::list_object_bev_size() const {
  return _internal_list_object_bev_size();
}
inline void ObjectList::clear_list_object_bev() {
  list_object_bev_.Clear();
}
inline ::minieye::parking::ObjectBev* ObjectList::mutable_list_object_bev(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectList.list_object_bev)
  return list_object_bev_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectBev >*
ObjectList::mutable_list_object_bev() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.ObjectList.list_object_bev)
  return &list_object_bev_;
}
inline const ::minieye::parking::ObjectBev& ObjectList::_internal_list_object_bev(int index) const {
  return list_object_bev_.Get(index);
}
inline const ::minieye::parking::ObjectBev& ObjectList::list_object_bev(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectList.list_object_bev)
  return _internal_list_object_bev(index);
}
inline ::minieye::parking::ObjectBev* ObjectList::_internal_add_list_object_bev() {
  return list_object_bev_.Add();
}
inline ::minieye::parking::ObjectBev* ObjectList::add_list_object_bev() {
  // @@protoc_insertion_point(field_add:minieye.parking.ObjectList.list_object_bev)
  return _internal_add_list_object_bev();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectBev >&
ObjectList::list_object_bev() const {
  // @@protoc_insertion_point(field_list:minieye.parking.ObjectList.list_object_bev)
  return list_object_bev_;
}

// repeated .minieye.parking.ObjectMono3d list_object_3d = 5;
inline int ObjectList::_internal_list_object_3d_size() const {
  return list_object_3d_.size();
}
inline int ObjectList::list_object_3d_size() const {
  return _internal_list_object_3d_size();
}
inline void ObjectList::clear_list_object_3d() {
  list_object_3d_.Clear();
}
inline ::minieye::parking::ObjectMono3d* ObjectList::mutable_list_object_3d(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectList.list_object_3d)
  return list_object_3d_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectMono3d >*
ObjectList::mutable_list_object_3d() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.ObjectList.list_object_3d)
  return &list_object_3d_;
}
inline const ::minieye::parking::ObjectMono3d& ObjectList::_internal_list_object_3d(int index) const {
  return list_object_3d_.Get(index);
}
inline const ::minieye::parking::ObjectMono3d& ObjectList::list_object_3d(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectList.list_object_3d)
  return _internal_list_object_3d(index);
}
inline ::minieye::parking::ObjectMono3d* ObjectList::_internal_add_list_object_3d() {
  return list_object_3d_.Add();
}
inline ::minieye::parking::ObjectMono3d* ObjectList::add_list_object_3d() {
  // @@protoc_insertion_point(field_add:minieye.parking.ObjectList.list_object_3d)
  return _internal_add_list_object_3d();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectMono3d >&
ObjectList::list_object_3d() const {
  // @@protoc_insertion_point(field_list:minieye.parking.ObjectList.list_object_3d)
  return list_object_3d_;
}

// -------------------------------------------------------------------

// ImageInfo

// .minieye.parking.Point2f position_value = 1;
inline bool ImageInfo::_internal_has_position_value() const {
  return this != internal_default_instance() && position_value_ != nullptr;
}
inline bool ImageInfo::has_position_value() const {
  return _internal_has_position_value();
}
inline void ImageInfo::clear_position_value() {
  if (GetArena() == nullptr && position_value_ != nullptr) {
    delete position_value_;
  }
  position_value_ = nullptr;
}
inline const ::minieye::parking::Point2f& ImageInfo::_internal_position_value() const {
  const ::minieye::parking::Point2f* p = position_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& ImageInfo::position_value() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ImageInfo.position_value)
  return _internal_position_value();
}
inline void ImageInfo::unsafe_arena_set_allocated_position_value(
    ::minieye::parking::Point2f* position_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_value_);
  }
  position_value_ = position_value;
  if (position_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ImageInfo.position_value)
}
inline ::minieye::parking::Point2f* ImageInfo::release_position_value() {
  auto temp = unsafe_arena_release_position_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* ImageInfo::unsafe_arena_release_position_value() {
  // @@protoc_insertion_point(field_release:minieye.parking.ImageInfo.position_value)
  
  ::minieye::parking::Point2f* temp = position_value_;
  position_value_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* ImageInfo::_internal_mutable_position_value() {
  
  if (position_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    position_value_ = p;
  }
  return position_value_;
}
inline ::minieye::parking::Point2f* ImageInfo::mutable_position_value() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ImageInfo.position_value)
  return _internal_mutable_position_value();
}
inline void ImageInfo::set_allocated_position_value(::minieye::parking::Point2f* position_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_value_;
  }
  if (position_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position_value);
    if (message_arena != submessage_arena) {
      position_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_value, submessage_arena);
    }
    
  } else {
    
  }
  position_value_ = position_value;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ImageInfo.position_value)
}

// float heading_value = 2;
inline void ImageInfo::clear_heading_value() {
  heading_value_ = 0;
}
inline float ImageInfo::_internal_heading_value() const {
  return heading_value_;
}
inline float ImageInfo::heading_value() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ImageInfo.heading_value)
  return _internal_heading_value();
}
inline void ImageInfo::_internal_set_heading_value(float value) {
  
  heading_value_ = value;
}
inline void ImageInfo::set_heading_value(float value) {
  _internal_set_heading_value(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ImageInfo.heading_value)
}

// .minieye.parking.Point2f size = 3;
inline bool ImageInfo::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool ImageInfo::has_size() const {
  return _internal_has_size();
}
inline void ImageInfo::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
inline const ::minieye::parking::Point2f& ImageInfo::_internal_size() const {
  const ::minieye::parking::Point2f* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& ImageInfo::size() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ImageInfo.size)
  return _internal_size();
}
inline void ImageInfo::unsafe_arena_set_allocated_size(
    ::minieye::parking::Point2f* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ImageInfo.size)
}
inline ::minieye::parking::Point2f* ImageInfo::release_size() {
  auto temp = unsafe_arena_release_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* ImageInfo::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:minieye.parking.ImageInfo.size)
  
  ::minieye::parking::Point2f* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* ImageInfo::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::minieye::parking::Point2f* ImageInfo::mutable_size() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ImageInfo.size)
  return _internal_mutable_size();
}
inline void ImageInfo::set_allocated_size(::minieye::parking::Point2f* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ImageInfo.size)
}

// -------------------------------------------------------------------

// VehicleInfo

// .minieye.parking.Point2f position_value = 1;
inline bool VehicleInfo::_internal_has_position_value() const {
  return this != internal_default_instance() && position_value_ != nullptr;
}
inline bool VehicleInfo::has_position_value() const {
  return _internal_has_position_value();
}
inline void VehicleInfo::clear_position_value() {
  if (GetArena() == nullptr && position_value_ != nullptr) {
    delete position_value_;
  }
  position_value_ = nullptr;
}
inline const ::minieye::parking::Point2f& VehicleInfo::_internal_position_value() const {
  const ::minieye::parking::Point2f* p = position_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& VehicleInfo::position_value() const {
  // @@protoc_insertion_point(field_get:minieye.parking.VehicleInfo.position_value)
  return _internal_position_value();
}
inline void VehicleInfo::unsafe_arena_set_allocated_position_value(
    ::minieye::parking::Point2f* position_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_value_);
  }
  position_value_ = position_value;
  if (position_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.VehicleInfo.position_value)
}
inline ::minieye::parking::Point2f* VehicleInfo::release_position_value() {
  auto temp = unsafe_arena_release_position_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* VehicleInfo::unsafe_arena_release_position_value() {
  // @@protoc_insertion_point(field_release:minieye.parking.VehicleInfo.position_value)
  
  ::minieye::parking::Point2f* temp = position_value_;
  position_value_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* VehicleInfo::_internal_mutable_position_value() {
  
  if (position_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    position_value_ = p;
  }
  return position_value_;
}
inline ::minieye::parking::Point2f* VehicleInfo::mutable_position_value() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.VehicleInfo.position_value)
  return _internal_mutable_position_value();
}
inline void VehicleInfo::set_allocated_position_value(::minieye::parking::Point2f* position_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_value_;
  }
  if (position_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position_value);
    if (message_arena != submessage_arena) {
      position_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_value, submessage_arena);
    }
    
  } else {
    
  }
  position_value_ = position_value;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.VehicleInfo.position_value)
}

// .minieye.parking.Point2f position_variance = 2;
inline bool VehicleInfo::_internal_has_position_variance() const {
  return this != internal_default_instance() && position_variance_ != nullptr;
}
inline bool VehicleInfo::has_position_variance() const {
  return _internal_has_position_variance();
}
inline void VehicleInfo::clear_position_variance() {
  if (GetArena() == nullptr && position_variance_ != nullptr) {
    delete position_variance_;
  }
  position_variance_ = nullptr;
}
inline const ::minieye::parking::Point2f& VehicleInfo::_internal_position_variance() const {
  const ::minieye::parking::Point2f* p = position_variance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& VehicleInfo::position_variance() const {
  // @@protoc_insertion_point(field_get:minieye.parking.VehicleInfo.position_variance)
  return _internal_position_variance();
}
inline void VehicleInfo::unsafe_arena_set_allocated_position_variance(
    ::minieye::parking::Point2f* position_variance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_variance_);
  }
  position_variance_ = position_variance;
  if (position_variance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.VehicleInfo.position_variance)
}
inline ::minieye::parking::Point2f* VehicleInfo::release_position_variance() {
  auto temp = unsafe_arena_release_position_variance();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* VehicleInfo::unsafe_arena_release_position_variance() {
  // @@protoc_insertion_point(field_release:minieye.parking.VehicleInfo.position_variance)
  
  ::minieye::parking::Point2f* temp = position_variance_;
  position_variance_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* VehicleInfo::_internal_mutable_position_variance() {
  
  if (position_variance_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    position_variance_ = p;
  }
  return position_variance_;
}
inline ::minieye::parking::Point2f* VehicleInfo::mutable_position_variance() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.VehicleInfo.position_variance)
  return _internal_mutable_position_variance();
}
inline void VehicleInfo::set_allocated_position_variance(::minieye::parking::Point2f* position_variance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_variance_;
  }
  if (position_variance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position_variance);
    if (message_arena != submessage_arena) {
      position_variance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_variance, submessage_arena);
    }
    
  } else {
    
  }
  position_variance_ = position_variance;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.VehicleInfo.position_variance)
}

// .minieye.parking.Point2f velocity_value = 3;
inline bool VehicleInfo::_internal_has_velocity_value() const {
  return this != internal_default_instance() && velocity_value_ != nullptr;
}
inline bool VehicleInfo::has_velocity_value() const {
  return _internal_has_velocity_value();
}
inline void VehicleInfo::clear_velocity_value() {
  if (GetArena() == nullptr && velocity_value_ != nullptr) {
    delete velocity_value_;
  }
  velocity_value_ = nullptr;
}
inline const ::minieye::parking::Point2f& VehicleInfo::_internal_velocity_value() const {
  const ::minieye::parking::Point2f* p = velocity_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& VehicleInfo::velocity_value() const {
  // @@protoc_insertion_point(field_get:minieye.parking.VehicleInfo.velocity_value)
  return _internal_velocity_value();
}
inline void VehicleInfo::unsafe_arena_set_allocated_velocity_value(
    ::minieye::parking::Point2f* velocity_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_value_);
  }
  velocity_value_ = velocity_value;
  if (velocity_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.VehicleInfo.velocity_value)
}
inline ::minieye::parking::Point2f* VehicleInfo::release_velocity_value() {
  auto temp = unsafe_arena_release_velocity_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* VehicleInfo::unsafe_arena_release_velocity_value() {
  // @@protoc_insertion_point(field_release:minieye.parking.VehicleInfo.velocity_value)
  
  ::minieye::parking::Point2f* temp = velocity_value_;
  velocity_value_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* VehicleInfo::_internal_mutable_velocity_value() {
  
  if (velocity_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    velocity_value_ = p;
  }
  return velocity_value_;
}
inline ::minieye::parking::Point2f* VehicleInfo::mutable_velocity_value() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.VehicleInfo.velocity_value)
  return _internal_mutable_velocity_value();
}
inline void VehicleInfo::set_allocated_velocity_value(::minieye::parking::Point2f* velocity_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete velocity_value_;
  }
  if (velocity_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(velocity_value);
    if (message_arena != submessage_arena) {
      velocity_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_value, submessage_arena);
    }
    
  } else {
    
  }
  velocity_value_ = velocity_value;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.VehicleInfo.velocity_value)
}

// .minieye.parking.Point2f velocity_variance = 4;
inline bool VehicleInfo::_internal_has_velocity_variance() const {
  return this != internal_default_instance() && velocity_variance_ != nullptr;
}
inline bool VehicleInfo::has_velocity_variance() const {
  return _internal_has_velocity_variance();
}
inline void VehicleInfo::clear_velocity_variance() {
  if (GetArena() == nullptr && velocity_variance_ != nullptr) {
    delete velocity_variance_;
  }
  velocity_variance_ = nullptr;
}
inline const ::minieye::parking::Point2f& VehicleInfo::_internal_velocity_variance() const {
  const ::minieye::parking::Point2f* p = velocity_variance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& VehicleInfo::velocity_variance() const {
  // @@protoc_insertion_point(field_get:minieye.parking.VehicleInfo.velocity_variance)
  return _internal_velocity_variance();
}
inline void VehicleInfo::unsafe_arena_set_allocated_velocity_variance(
    ::minieye::parking::Point2f* velocity_variance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_variance_);
  }
  velocity_variance_ = velocity_variance;
  if (velocity_variance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.VehicleInfo.velocity_variance)
}
inline ::minieye::parking::Point2f* VehicleInfo::release_velocity_variance() {
  auto temp = unsafe_arena_release_velocity_variance();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* VehicleInfo::unsafe_arena_release_velocity_variance() {
  // @@protoc_insertion_point(field_release:minieye.parking.VehicleInfo.velocity_variance)
  
  ::minieye::parking::Point2f* temp = velocity_variance_;
  velocity_variance_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* VehicleInfo::_internal_mutable_velocity_variance() {
  
  if (velocity_variance_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    velocity_variance_ = p;
  }
  return velocity_variance_;
}
inline ::minieye::parking::Point2f* VehicleInfo::mutable_velocity_variance() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.VehicleInfo.velocity_variance)
  return _internal_mutable_velocity_variance();
}
inline void VehicleInfo::set_allocated_velocity_variance(::minieye::parking::Point2f* velocity_variance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete velocity_variance_;
  }
  if (velocity_variance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(velocity_variance);
    if (message_arena != submessage_arena) {
      velocity_variance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_variance, submessage_arena);
    }
    
  } else {
    
  }
  velocity_variance_ = velocity_variance;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.VehicleInfo.velocity_variance)
}

// float heading_value = 5;
inline void VehicleInfo::clear_heading_value() {
  heading_value_ = 0;
}
inline float VehicleInfo::_internal_heading_value() const {
  return heading_value_;
}
inline float VehicleInfo::heading_value() const {
  // @@protoc_insertion_point(field_get:minieye.parking.VehicleInfo.heading_value)
  return _internal_heading_value();
}
inline void VehicleInfo::_internal_set_heading_value(float value) {
  
  heading_value_ = value;
}
inline void VehicleInfo::set_heading_value(float value) {
  _internal_set_heading_value(value);
  // @@protoc_insertion_point(field_set:minieye.parking.VehicleInfo.heading_value)
}

// float heading_variance = 6;
inline void VehicleInfo::clear_heading_variance() {
  heading_variance_ = 0;
}
inline float VehicleInfo::_internal_heading_variance() const {
  return heading_variance_;
}
inline float VehicleInfo::heading_variance() const {
  // @@protoc_insertion_point(field_get:minieye.parking.VehicleInfo.heading_variance)
  return _internal_heading_variance();
}
inline void VehicleInfo::_internal_set_heading_variance(float value) {
  
  heading_variance_ = value;
}
inline void VehicleInfo::set_heading_variance(float value) {
  _internal_set_heading_variance(value);
  // @@protoc_insertion_point(field_set:minieye.parking.VehicleInfo.heading_variance)
}

// float palstance_value = 7;
inline void VehicleInfo::clear_palstance_value() {
  palstance_value_ = 0;
}
inline float VehicleInfo::_internal_palstance_value() const {
  return palstance_value_;
}
inline float VehicleInfo::palstance_value() const {
  // @@protoc_insertion_point(field_get:minieye.parking.VehicleInfo.palstance_value)
  return _internal_palstance_value();
}
inline void VehicleInfo::_internal_set_palstance_value(float value) {
  
  palstance_value_ = value;
}
inline void VehicleInfo::set_palstance_value(float value) {
  _internal_set_palstance_value(value);
  // @@protoc_insertion_point(field_set:minieye.parking.VehicleInfo.palstance_value)
}

// float palstance_variance = 8;
inline void VehicleInfo::clear_palstance_variance() {
  palstance_variance_ = 0;
}
inline float VehicleInfo::_internal_palstance_variance() const {
  return palstance_variance_;
}
inline float VehicleInfo::palstance_variance() const {
  // @@protoc_insertion_point(field_get:minieye.parking.VehicleInfo.palstance_variance)
  return _internal_palstance_variance();
}
inline void VehicleInfo::_internal_set_palstance_variance(float value) {
  
  palstance_variance_ = value;
}
inline void VehicleInfo::set_palstance_variance(float value) {
  _internal_set_palstance_variance(value);
  // @@protoc_insertion_point(field_set:minieye.parking.VehicleInfo.palstance_variance)
}

// .minieye.parking.Point3f size = 9;
inline bool VehicleInfo::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool VehicleInfo::has_size() const {
  return _internal_has_size();
}
inline void VehicleInfo::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
inline const ::minieye::parking::Point3f& VehicleInfo::_internal_size() const {
  const ::minieye::parking::Point3f* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point3f*>(
      &::minieye::parking::_Point3f_default_instance_);
}
inline const ::minieye::parking::Point3f& VehicleInfo::size() const {
  // @@protoc_insertion_point(field_get:minieye.parking.VehicleInfo.size)
  return _internal_size();
}
inline void VehicleInfo::unsafe_arena_set_allocated_size(
    ::minieye::parking::Point3f* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.VehicleInfo.size)
}
inline ::minieye::parking::Point3f* VehicleInfo::release_size() {
  auto temp = unsafe_arena_release_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point3f* VehicleInfo::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:minieye.parking.VehicleInfo.size)
  
  ::minieye::parking::Point3f* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point3f* VehicleInfo::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point3f>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::minieye::parking::Point3f* VehicleInfo::mutable_size() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.VehicleInfo.size)
  return _internal_mutable_size();
}
inline void VehicleInfo::set_allocated_size(::minieye::parking::Point3f* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.VehicleInfo.size)
}

// -------------------------------------------------------------------

// OdomInfo

// .minieye.parking.Point2f position_value = 1;
inline bool OdomInfo::_internal_has_position_value() const {
  return this != internal_default_instance() && position_value_ != nullptr;
}
inline bool OdomInfo::has_position_value() const {
  return _internal_has_position_value();
}
inline void OdomInfo::clear_position_value() {
  if (GetArena() == nullptr && position_value_ != nullptr) {
    delete position_value_;
  }
  position_value_ = nullptr;
}
inline const ::minieye::parking::Point2f& OdomInfo::_internal_position_value() const {
  const ::minieye::parking::Point2f* p = position_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& OdomInfo::position_value() const {
  // @@protoc_insertion_point(field_get:minieye.parking.OdomInfo.position_value)
  return _internal_position_value();
}
inline void OdomInfo::unsafe_arena_set_allocated_position_value(
    ::minieye::parking::Point2f* position_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_value_);
  }
  position_value_ = position_value;
  if (position_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.OdomInfo.position_value)
}
inline ::minieye::parking::Point2f* OdomInfo::release_position_value() {
  auto temp = unsafe_arena_release_position_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* OdomInfo::unsafe_arena_release_position_value() {
  // @@protoc_insertion_point(field_release:minieye.parking.OdomInfo.position_value)
  
  ::minieye::parking::Point2f* temp = position_value_;
  position_value_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* OdomInfo::_internal_mutable_position_value() {
  
  if (position_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    position_value_ = p;
  }
  return position_value_;
}
inline ::minieye::parking::Point2f* OdomInfo::mutable_position_value() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.OdomInfo.position_value)
  return _internal_mutable_position_value();
}
inline void OdomInfo::set_allocated_position_value(::minieye::parking::Point2f* position_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_value_;
  }
  if (position_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position_value);
    if (message_arena != submessage_arena) {
      position_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_value, submessage_arena);
    }
    
  } else {
    
  }
  position_value_ = position_value;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.OdomInfo.position_value)
}

// .minieye.parking.Point2f position_variance = 2;
inline bool OdomInfo::_internal_has_position_variance() const {
  return this != internal_default_instance() && position_variance_ != nullptr;
}
inline bool OdomInfo::has_position_variance() const {
  return _internal_has_position_variance();
}
inline void OdomInfo::clear_position_variance() {
  if (GetArena() == nullptr && position_variance_ != nullptr) {
    delete position_variance_;
  }
  position_variance_ = nullptr;
}
inline const ::minieye::parking::Point2f& OdomInfo::_internal_position_variance() const {
  const ::minieye::parking::Point2f* p = position_variance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& OdomInfo::position_variance() const {
  // @@protoc_insertion_point(field_get:minieye.parking.OdomInfo.position_variance)
  return _internal_position_variance();
}
inline void OdomInfo::unsafe_arena_set_allocated_position_variance(
    ::minieye::parking::Point2f* position_variance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_variance_);
  }
  position_variance_ = position_variance;
  if (position_variance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.OdomInfo.position_variance)
}
inline ::minieye::parking::Point2f* OdomInfo::release_position_variance() {
  auto temp = unsafe_arena_release_position_variance();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* OdomInfo::unsafe_arena_release_position_variance() {
  // @@protoc_insertion_point(field_release:minieye.parking.OdomInfo.position_variance)
  
  ::minieye::parking::Point2f* temp = position_variance_;
  position_variance_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* OdomInfo::_internal_mutable_position_variance() {
  
  if (position_variance_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    position_variance_ = p;
  }
  return position_variance_;
}
inline ::minieye::parking::Point2f* OdomInfo::mutable_position_variance() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.OdomInfo.position_variance)
  return _internal_mutable_position_variance();
}
inline void OdomInfo::set_allocated_position_variance(::minieye::parking::Point2f* position_variance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_variance_;
  }
  if (position_variance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position_variance);
    if (message_arena != submessage_arena) {
      position_variance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_variance, submessage_arena);
    }
    
  } else {
    
  }
  position_variance_ = position_variance;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.OdomInfo.position_variance)
}

// .minieye.parking.Point2f velocity_value = 3;
inline bool OdomInfo::_internal_has_velocity_value() const {
  return this != internal_default_instance() && velocity_value_ != nullptr;
}
inline bool OdomInfo::has_velocity_value() const {
  return _internal_has_velocity_value();
}
inline void OdomInfo::clear_velocity_value() {
  if (GetArena() == nullptr && velocity_value_ != nullptr) {
    delete velocity_value_;
  }
  velocity_value_ = nullptr;
}
inline const ::minieye::parking::Point2f& OdomInfo::_internal_velocity_value() const {
  const ::minieye::parking::Point2f* p = velocity_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& OdomInfo::velocity_value() const {
  // @@protoc_insertion_point(field_get:minieye.parking.OdomInfo.velocity_value)
  return _internal_velocity_value();
}
inline void OdomInfo::unsafe_arena_set_allocated_velocity_value(
    ::minieye::parking::Point2f* velocity_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_value_);
  }
  velocity_value_ = velocity_value;
  if (velocity_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.OdomInfo.velocity_value)
}
inline ::minieye::parking::Point2f* OdomInfo::release_velocity_value() {
  auto temp = unsafe_arena_release_velocity_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* OdomInfo::unsafe_arena_release_velocity_value() {
  // @@protoc_insertion_point(field_release:minieye.parking.OdomInfo.velocity_value)
  
  ::minieye::parking::Point2f* temp = velocity_value_;
  velocity_value_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* OdomInfo::_internal_mutable_velocity_value() {
  
  if (velocity_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    velocity_value_ = p;
  }
  return velocity_value_;
}
inline ::minieye::parking::Point2f* OdomInfo::mutable_velocity_value() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.OdomInfo.velocity_value)
  return _internal_mutable_velocity_value();
}
inline void OdomInfo::set_allocated_velocity_value(::minieye::parking::Point2f* velocity_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete velocity_value_;
  }
  if (velocity_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(velocity_value);
    if (message_arena != submessage_arena) {
      velocity_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_value, submessage_arena);
    }
    
  } else {
    
  }
  velocity_value_ = velocity_value;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.OdomInfo.velocity_value)
}

// .minieye.parking.Point2f velocity_variance = 4;
inline bool OdomInfo::_internal_has_velocity_variance() const {
  return this != internal_default_instance() && velocity_variance_ != nullptr;
}
inline bool OdomInfo::has_velocity_variance() const {
  return _internal_has_velocity_variance();
}
inline void OdomInfo::clear_velocity_variance() {
  if (GetArena() == nullptr && velocity_variance_ != nullptr) {
    delete velocity_variance_;
  }
  velocity_variance_ = nullptr;
}
inline const ::minieye::parking::Point2f& OdomInfo::_internal_velocity_variance() const {
  const ::minieye::parking::Point2f* p = velocity_variance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point2f*>(
      &::minieye::parking::_Point2f_default_instance_);
}
inline const ::minieye::parking::Point2f& OdomInfo::velocity_variance() const {
  // @@protoc_insertion_point(field_get:minieye.parking.OdomInfo.velocity_variance)
  return _internal_velocity_variance();
}
inline void OdomInfo::unsafe_arena_set_allocated_velocity_variance(
    ::minieye::parking::Point2f* velocity_variance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_variance_);
  }
  velocity_variance_ = velocity_variance;
  if (velocity_variance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.OdomInfo.velocity_variance)
}
inline ::minieye::parking::Point2f* OdomInfo::release_velocity_variance() {
  auto temp = unsafe_arena_release_velocity_variance();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point2f* OdomInfo::unsafe_arena_release_velocity_variance() {
  // @@protoc_insertion_point(field_release:minieye.parking.OdomInfo.velocity_variance)
  
  ::minieye::parking::Point2f* temp = velocity_variance_;
  velocity_variance_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point2f* OdomInfo::_internal_mutable_velocity_variance() {
  
  if (velocity_variance_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point2f>(GetArena());
    velocity_variance_ = p;
  }
  return velocity_variance_;
}
inline ::minieye::parking::Point2f* OdomInfo::mutable_velocity_variance() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.OdomInfo.velocity_variance)
  return _internal_mutable_velocity_variance();
}
inline void OdomInfo::set_allocated_velocity_variance(::minieye::parking::Point2f* velocity_variance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete velocity_variance_;
  }
  if (velocity_variance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(velocity_variance);
    if (message_arena != submessage_arena) {
      velocity_variance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_variance, submessage_arena);
    }
    
  } else {
    
  }
  velocity_variance_ = velocity_variance;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.OdomInfo.velocity_variance)
}

// float heading_value = 5;
inline void OdomInfo::clear_heading_value() {
  heading_value_ = 0;
}
inline float OdomInfo::_internal_heading_value() const {
  return heading_value_;
}
inline float OdomInfo::heading_value() const {
  // @@protoc_insertion_point(field_get:minieye.parking.OdomInfo.heading_value)
  return _internal_heading_value();
}
inline void OdomInfo::_internal_set_heading_value(float value) {
  
  heading_value_ = value;
}
inline void OdomInfo::set_heading_value(float value) {
  _internal_set_heading_value(value);
  // @@protoc_insertion_point(field_set:minieye.parking.OdomInfo.heading_value)
}

// float heading_variance = 6;
inline void OdomInfo::clear_heading_variance() {
  heading_variance_ = 0;
}
inline float OdomInfo::_internal_heading_variance() const {
  return heading_variance_;
}
inline float OdomInfo::heading_variance() const {
  // @@protoc_insertion_point(field_get:minieye.parking.OdomInfo.heading_variance)
  return _internal_heading_variance();
}
inline void OdomInfo::_internal_set_heading_variance(float value) {
  
  heading_variance_ = value;
}
inline void OdomInfo::set_heading_variance(float value) {
  _internal_set_heading_variance(value);
  // @@protoc_insertion_point(field_set:minieye.parking.OdomInfo.heading_variance)
}

// float palstance_value = 7;
inline void OdomInfo::clear_palstance_value() {
  palstance_value_ = 0;
}
inline float OdomInfo::_internal_palstance_value() const {
  return palstance_value_;
}
inline float OdomInfo::palstance_value() const {
  // @@protoc_insertion_point(field_get:minieye.parking.OdomInfo.palstance_value)
  return _internal_palstance_value();
}
inline void OdomInfo::_internal_set_palstance_value(float value) {
  
  palstance_value_ = value;
}
inline void OdomInfo::set_palstance_value(float value) {
  _internal_set_palstance_value(value);
  // @@protoc_insertion_point(field_set:minieye.parking.OdomInfo.palstance_value)
}

// float palstance_variance = 8;
inline void OdomInfo::clear_palstance_variance() {
  palstance_variance_ = 0;
}
inline float OdomInfo::_internal_palstance_variance() const {
  return palstance_variance_;
}
inline float OdomInfo::palstance_variance() const {
  // @@protoc_insertion_point(field_get:minieye.parking.OdomInfo.palstance_variance)
  return _internal_palstance_variance();
}
inline void OdomInfo::_internal_set_palstance_variance(float value) {
  
  palstance_variance_ = value;
}
inline void OdomInfo::set_palstance_variance(float value) {
  _internal_set_palstance_variance(value);
  // @@protoc_insertion_point(field_set:minieye.parking.OdomInfo.palstance_variance)
}

// .minieye.parking.Point3f size = 9;
inline bool OdomInfo::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool OdomInfo::has_size() const {
  return _internal_has_size();
}
inline void OdomInfo::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
inline const ::minieye::parking::Point3f& OdomInfo::_internal_size() const {
  const ::minieye::parking::Point3f* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::Point3f*>(
      &::minieye::parking::_Point3f_default_instance_);
}
inline const ::minieye::parking::Point3f& OdomInfo::size() const {
  // @@protoc_insertion_point(field_get:minieye.parking.OdomInfo.size)
  return _internal_size();
}
inline void OdomInfo::unsafe_arena_set_allocated_size(
    ::minieye::parking::Point3f* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.OdomInfo.size)
}
inline ::minieye::parking::Point3f* OdomInfo::release_size() {
  auto temp = unsafe_arena_release_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::Point3f* OdomInfo::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:minieye.parking.OdomInfo.size)
  
  ::minieye::parking::Point3f* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::minieye::parking::Point3f* OdomInfo::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::Point3f>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::minieye::parking::Point3f* OdomInfo::mutable_size() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.OdomInfo.size)
  return _internal_mutable_size();
}
inline void OdomInfo::set_allocated_size(::minieye::parking::Point3f* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.OdomInfo.size)
}

// -------------------------------------------------------------------

// ObjectTrack

// uint32 id = 1;
inline void ObjectTrack::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectTrack::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectTrack::id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrack.id)
  return _internal_id();
}
inline void ObjectTrack::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ObjectTrack::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectTrack.id)
}

// .minieye.parking.ObjectType type = 2;
inline void ObjectTrack::clear_type() {
  type_ = 0;
}
inline ::minieye::parking::ObjectType ObjectTrack::_internal_type() const {
  return static_cast< ::minieye::parking::ObjectType >(type_);
}
inline ::minieye::parking::ObjectType ObjectTrack::type() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrack.type)
  return _internal_type();
}
inline void ObjectTrack::_internal_set_type(::minieye::parking::ObjectType value) {
  
  type_ = value;
}
inline void ObjectTrack::set_type(::minieye::parking::ObjectType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectTrack.type)
}

// .minieye.parking.TrackingStatus track_status = 3;
inline void ObjectTrack::clear_track_status() {
  track_status_ = 0;
}
inline ::minieye::parking::TrackingStatus ObjectTrack::_internal_track_status() const {
  return static_cast< ::minieye::parking::TrackingStatus >(track_status_);
}
inline ::minieye::parking::TrackingStatus ObjectTrack::track_status() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrack.track_status)
  return _internal_track_status();
}
inline void ObjectTrack::_internal_set_track_status(::minieye::parking::TrackingStatus value) {
  
  track_status_ = value;
}
inline void ObjectTrack::set_track_status(::minieye::parking::TrackingStatus value) {
  _internal_set_track_status(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectTrack.track_status)
}

// .minieye.parking.MotionStatus motion_status = 4;
inline void ObjectTrack::clear_motion_status() {
  motion_status_ = 0;
}
inline ::minieye::parking::MotionStatus ObjectTrack::_internal_motion_status() const {
  return static_cast< ::minieye::parking::MotionStatus >(motion_status_);
}
inline ::minieye::parking::MotionStatus ObjectTrack::motion_status() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrack.motion_status)
  return _internal_motion_status();
}
inline void ObjectTrack::_internal_set_motion_status(::minieye::parking::MotionStatus value) {
  
  motion_status_ = value;
}
inline void ObjectTrack::set_motion_status(::minieye::parking::MotionStatus value) {
  _internal_set_motion_status(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectTrack.motion_status)
}

// .minieye.parking.ImageInfo img_info = 5;
inline bool ObjectTrack::_internal_has_img_info() const {
  return this != internal_default_instance() && img_info_ != nullptr;
}
inline bool ObjectTrack::has_img_info() const {
  return _internal_has_img_info();
}
inline void ObjectTrack::clear_img_info() {
  if (GetArena() == nullptr && img_info_ != nullptr) {
    delete img_info_;
  }
  img_info_ = nullptr;
}
inline const ::minieye::parking::ImageInfo& ObjectTrack::_internal_img_info() const {
  const ::minieye::parking::ImageInfo* p = img_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::ImageInfo*>(
      &::minieye::parking::_ImageInfo_default_instance_);
}
inline const ::minieye::parking::ImageInfo& ObjectTrack::img_info() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrack.img_info)
  return _internal_img_info();
}
inline void ObjectTrack::unsafe_arena_set_allocated_img_info(
    ::minieye::parking::ImageInfo* img_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(img_info_);
  }
  img_info_ = img_info;
  if (img_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectTrack.img_info)
}
inline ::minieye::parking::ImageInfo* ObjectTrack::release_img_info() {
  auto temp = unsafe_arena_release_img_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::ImageInfo* ObjectTrack::unsafe_arena_release_img_info() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectTrack.img_info)
  
  ::minieye::parking::ImageInfo* temp = img_info_;
  img_info_ = nullptr;
  return temp;
}
inline ::minieye::parking::ImageInfo* ObjectTrack::_internal_mutable_img_info() {
  
  if (img_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::ImageInfo>(GetArena());
    img_info_ = p;
  }
  return img_info_;
}
inline ::minieye::parking::ImageInfo* ObjectTrack::mutable_img_info() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectTrack.img_info)
  return _internal_mutable_img_info();
}
inline void ObjectTrack::set_allocated_img_info(::minieye::parking::ImageInfo* img_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete img_info_;
  }
  if (img_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(img_info);
    if (message_arena != submessage_arena) {
      img_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, img_info, submessage_arena);
    }
    
  } else {
    
  }
  img_info_ = img_info;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectTrack.img_info)
}

// .minieye.parking.VehicleInfo vehicle_info = 6;
inline bool ObjectTrack::_internal_has_vehicle_info() const {
  return this != internal_default_instance() && vehicle_info_ != nullptr;
}
inline bool ObjectTrack::has_vehicle_info() const {
  return _internal_has_vehicle_info();
}
inline void ObjectTrack::clear_vehicle_info() {
  if (GetArena() == nullptr && vehicle_info_ != nullptr) {
    delete vehicle_info_;
  }
  vehicle_info_ = nullptr;
}
inline const ::minieye::parking::VehicleInfo& ObjectTrack::_internal_vehicle_info() const {
  const ::minieye::parking::VehicleInfo* p = vehicle_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::VehicleInfo*>(
      &::minieye::parking::_VehicleInfo_default_instance_);
}
inline const ::minieye::parking::VehicleInfo& ObjectTrack::vehicle_info() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrack.vehicle_info)
  return _internal_vehicle_info();
}
inline void ObjectTrack::unsafe_arena_set_allocated_vehicle_info(
    ::minieye::parking::VehicleInfo* vehicle_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_info_);
  }
  vehicle_info_ = vehicle_info;
  if (vehicle_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectTrack.vehicle_info)
}
inline ::minieye::parking::VehicleInfo* ObjectTrack::release_vehicle_info() {
  auto temp = unsafe_arena_release_vehicle_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::VehicleInfo* ObjectTrack::unsafe_arena_release_vehicle_info() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectTrack.vehicle_info)
  
  ::minieye::parking::VehicleInfo* temp = vehicle_info_;
  vehicle_info_ = nullptr;
  return temp;
}
inline ::minieye::parking::VehicleInfo* ObjectTrack::_internal_mutable_vehicle_info() {
  
  if (vehicle_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::VehicleInfo>(GetArena());
    vehicle_info_ = p;
  }
  return vehicle_info_;
}
inline ::minieye::parking::VehicleInfo* ObjectTrack::mutable_vehicle_info() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectTrack.vehicle_info)
  return _internal_mutable_vehicle_info();
}
inline void ObjectTrack::set_allocated_vehicle_info(::minieye::parking::VehicleInfo* vehicle_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vehicle_info_;
  }
  if (vehicle_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vehicle_info);
    if (message_arena != submessage_arena) {
      vehicle_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_info, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_info_ = vehicle_info;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectTrack.vehicle_info)
}

// .minieye.parking.OdomInfo odom_info = 7;
inline bool ObjectTrack::_internal_has_odom_info() const {
  return this != internal_default_instance() && odom_info_ != nullptr;
}
inline bool ObjectTrack::has_odom_info() const {
  return _internal_has_odom_info();
}
inline void ObjectTrack::clear_odom_info() {
  if (GetArena() == nullptr && odom_info_ != nullptr) {
    delete odom_info_;
  }
  odom_info_ = nullptr;
}
inline const ::minieye::parking::OdomInfo& ObjectTrack::_internal_odom_info() const {
  const ::minieye::parking::OdomInfo* p = odom_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::OdomInfo*>(
      &::minieye::parking::_OdomInfo_default_instance_);
}
inline const ::minieye::parking::OdomInfo& ObjectTrack::odom_info() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrack.odom_info)
  return _internal_odom_info();
}
inline void ObjectTrack::unsafe_arena_set_allocated_odom_info(
    ::minieye::parking::OdomInfo* odom_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odom_info_);
  }
  odom_info_ = odom_info;
  if (odom_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ObjectTrack.odom_info)
}
inline ::minieye::parking::OdomInfo* ObjectTrack::release_odom_info() {
  auto temp = unsafe_arena_release_odom_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::OdomInfo* ObjectTrack::unsafe_arena_release_odom_info() {
  // @@protoc_insertion_point(field_release:minieye.parking.ObjectTrack.odom_info)
  
  ::minieye::parking::OdomInfo* temp = odom_info_;
  odom_info_ = nullptr;
  return temp;
}
inline ::minieye::parking::OdomInfo* ObjectTrack::_internal_mutable_odom_info() {
  
  if (odom_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::OdomInfo>(GetArena());
    odom_info_ = p;
  }
  return odom_info_;
}
inline ::minieye::parking::OdomInfo* ObjectTrack::mutable_odom_info() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectTrack.odom_info)
  return _internal_mutable_odom_info();
}
inline void ObjectTrack::set_allocated_odom_info(::minieye::parking::OdomInfo* odom_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete odom_info_;
  }
  if (odom_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(odom_info);
    if (message_arena != submessage_arena) {
      odom_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odom_info, submessage_arena);
    }
    
  } else {
    
  }
  odom_info_ = odom_info;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ObjectTrack.odom_info)
}

// float score = 8;
inline void ObjectTrack::clear_score() {
  score_ = 0;
}
inline float ObjectTrack::_internal_score() const {
  return score_;
}
inline float ObjectTrack::score() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrack.score)
  return _internal_score();
}
inline void ObjectTrack::_internal_set_score(float value) {
  
  score_ = value;
}
inline void ObjectTrack::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectTrack.score)
}

// -------------------------------------------------------------------

// ObjectTrackList

// uint64 frame_id = 1;
inline void ObjectTrackList::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectTrackList::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectTrackList::frame_id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackList.frame_id)
  return _internal_frame_id();
}
inline void ObjectTrackList::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void ObjectTrackList::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectTrackList.frame_id)
}

// uint64 timestamp = 2;
inline void ObjectTrackList::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectTrackList::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectTrackList::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackList.timestamp)
  return _internal_timestamp();
}
inline void ObjectTrackList::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ObjectTrackList::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectTrackList.timestamp)
}

// uint64 tick = 3;
inline void ObjectTrackList::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectTrackList::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectTrackList::tick() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackList.tick)
  return _internal_tick();
}
inline void ObjectTrackList::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void ObjectTrackList::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ObjectTrackList.tick)
}

// repeated .minieye.parking.ObjectTrack object_track_list = 4;
inline int ObjectTrackList::_internal_object_track_list_size() const {
  return object_track_list_.size();
}
inline int ObjectTrackList::object_track_list_size() const {
  return _internal_object_track_list_size();
}
inline void ObjectTrackList::clear_object_track_list() {
  object_track_list_.Clear();
}
inline ::minieye::parking::ObjectTrack* ObjectTrackList::mutable_object_track_list(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ObjectTrackList.object_track_list)
  return object_track_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrack >*
ObjectTrackList::mutable_object_track_list() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.ObjectTrackList.object_track_list)
  return &object_track_list_;
}
inline const ::minieye::parking::ObjectTrack& ObjectTrackList::_internal_object_track_list(int index) const {
  return object_track_list_.Get(index);
}
inline const ::minieye::parking::ObjectTrack& ObjectTrackList::object_track_list(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.ObjectTrackList.object_track_list)
  return _internal_object_track_list(index);
}
inline ::minieye::parking::ObjectTrack* ObjectTrackList::_internal_add_object_track_list() {
  return object_track_list_.Add();
}
inline ::minieye::parking::ObjectTrack* ObjectTrackList::add_object_track_list() {
  // @@protoc_insertion_point(field_add:minieye.parking.ObjectTrackList.object_track_list)
  return _internal_add_object_track_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectTrack >&
ObjectTrackList::object_track_list() const {
  // @@protoc_insertion_point(field_list:minieye.parking.ObjectTrackList.object_track_list)
  return object_track_list_;
}

// -------------------------------------------------------------------

// TrackDebug

// uint64 frame_id = 1;
inline void TrackDebug::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackDebug::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackDebug::frame_id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackDebug.frame_id)
  return _internal_frame_id();
}
inline void TrackDebug::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void TrackDebug::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackDebug.frame_id)
}

// uint64 timestamp_us = 2;
inline void TrackDebug::clear_timestamp_us() {
  timestamp_us_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackDebug::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackDebug::timestamp_us() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackDebug.timestamp_us)
  return _internal_timestamp_us();
}
inline void TrackDebug::_internal_set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_us_ = value;
}
inline void TrackDebug::set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackDebug.timestamp_us)
}

// uint64 tick_us = 3;
inline void TrackDebug::clear_tick_us() {
  tick_us_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackDebug::_internal_tick_us() const {
  return tick_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrackDebug::tick_us() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackDebug.tick_us)
  return _internal_tick_us();
}
inline void TrackDebug::_internal_set_tick_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_us_ = value;
}
inline void TrackDebug::set_tick_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick_us(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackDebug.tick_us)
}

// .minieye.parking.TrackEgoState ego_state = 4;
inline bool TrackDebug::_internal_has_ego_state() const {
  return this != internal_default_instance() && ego_state_ != nullptr;
}
inline bool TrackDebug::has_ego_state() const {
  return _internal_has_ego_state();
}
inline void TrackDebug::clear_ego_state() {
  if (GetArena() == nullptr && ego_state_ != nullptr) {
    delete ego_state_;
  }
  ego_state_ = nullptr;
}
inline const ::minieye::parking::TrackEgoState& TrackDebug::_internal_ego_state() const {
  const ::minieye::parking::TrackEgoState* p = ego_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::TrackEgoState*>(
      &::minieye::parking::_TrackEgoState_default_instance_);
}
inline const ::minieye::parking::TrackEgoState& TrackDebug::ego_state() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackDebug.ego_state)
  return _internal_ego_state();
}
inline void TrackDebug::unsafe_arena_set_allocated_ego_state(
    ::minieye::parking::TrackEgoState* ego_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ego_state_);
  }
  ego_state_ = ego_state;
  if (ego_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.TrackDebug.ego_state)
}
inline ::minieye::parking::TrackEgoState* TrackDebug::release_ego_state() {
  auto temp = unsafe_arena_release_ego_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::TrackEgoState* TrackDebug::unsafe_arena_release_ego_state() {
  // @@protoc_insertion_point(field_release:minieye.parking.TrackDebug.ego_state)
  
  ::minieye::parking::TrackEgoState* temp = ego_state_;
  ego_state_ = nullptr;
  return temp;
}
inline ::minieye::parking::TrackEgoState* TrackDebug::_internal_mutable_ego_state() {
  
  if (ego_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::TrackEgoState>(GetArena());
    ego_state_ = p;
  }
  return ego_state_;
}
inline ::minieye::parking::TrackEgoState* TrackDebug::mutable_ego_state() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.TrackDebug.ego_state)
  return _internal_mutable_ego_state();
}
inline void TrackDebug::set_allocated_ego_state(::minieye::parking::TrackEgoState* ego_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ego_state_;
  }
  if (ego_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ego_state);
    if (message_arena != submessage_arena) {
      ego_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ego_state, submessage_arena);
    }
    
  } else {
    
  }
  ego_state_ = ego_state;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.TrackDebug.ego_state)
}

// .minieye.parking.TrackEgoState ego_cov = 5;
inline bool TrackDebug::_internal_has_ego_cov() const {
  return this != internal_default_instance() && ego_cov_ != nullptr;
}
inline bool TrackDebug::has_ego_cov() const {
  return _internal_has_ego_cov();
}
inline void TrackDebug::clear_ego_cov() {
  if (GetArena() == nullptr && ego_cov_ != nullptr) {
    delete ego_cov_;
  }
  ego_cov_ = nullptr;
}
inline const ::minieye::parking::TrackEgoState& TrackDebug::_internal_ego_cov() const {
  const ::minieye::parking::TrackEgoState* p = ego_cov_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::TrackEgoState*>(
      &::minieye::parking::_TrackEgoState_default_instance_);
}
inline const ::minieye::parking::TrackEgoState& TrackDebug::ego_cov() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackDebug.ego_cov)
  return _internal_ego_cov();
}
inline void TrackDebug::unsafe_arena_set_allocated_ego_cov(
    ::minieye::parking::TrackEgoState* ego_cov) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ego_cov_);
  }
  ego_cov_ = ego_cov;
  if (ego_cov) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.TrackDebug.ego_cov)
}
inline ::minieye::parking::TrackEgoState* TrackDebug::release_ego_cov() {
  auto temp = unsafe_arena_release_ego_cov();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::TrackEgoState* TrackDebug::unsafe_arena_release_ego_cov() {
  // @@protoc_insertion_point(field_release:minieye.parking.TrackDebug.ego_cov)
  
  ::minieye::parking::TrackEgoState* temp = ego_cov_;
  ego_cov_ = nullptr;
  return temp;
}
inline ::minieye::parking::TrackEgoState* TrackDebug::_internal_mutable_ego_cov() {
  
  if (ego_cov_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::TrackEgoState>(GetArena());
    ego_cov_ = p;
  }
  return ego_cov_;
}
inline ::minieye::parking::TrackEgoState* TrackDebug::mutable_ego_cov() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.TrackDebug.ego_cov)
  return _internal_mutable_ego_cov();
}
inline void TrackDebug::set_allocated_ego_cov(::minieye::parking::TrackEgoState* ego_cov) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ego_cov_;
  }
  if (ego_cov) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ego_cov);
    if (message_arena != submessage_arena) {
      ego_cov = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ego_cov, submessage_arena);
    }
    
  } else {
    
  }
  ego_cov_ = ego_cov;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.TrackDebug.ego_cov)
}

// repeated .minieye.parking.TrackDebugObject objects = 6;
inline int TrackDebug::_internal_objects_size() const {
  return objects_.size();
}
inline int TrackDebug::objects_size() const {
  return _internal_objects_size();
}
inline void TrackDebug::clear_objects() {
  objects_.Clear();
}
inline ::minieye::parking::TrackDebugObject* TrackDebug::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.TrackDebug.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::TrackDebugObject >*
TrackDebug::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.TrackDebug.objects)
  return &objects_;
}
inline const ::minieye::parking::TrackDebugObject& TrackDebug::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::minieye::parking::TrackDebugObject& TrackDebug::objects(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackDebug.objects)
  return _internal_objects(index);
}
inline ::minieye::parking::TrackDebugObject* TrackDebug::_internal_add_objects() {
  return objects_.Add();
}
inline ::minieye::parking::TrackDebugObject* TrackDebug::add_objects() {
  // @@protoc_insertion_point(field_add:minieye.parking.TrackDebug.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::TrackDebugObject >&
TrackDebug::objects() const {
  // @@protoc_insertion_point(field_list:minieye.parking.TrackDebug.objects)
  return objects_;
}

// -------------------------------------------------------------------

// TrackDebugObject

// uint32 id = 1;
inline void TrackDebugObject::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackDebugObject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackDebugObject::id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackDebugObject.id)
  return _internal_id();
}
inline void TrackDebugObject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void TrackDebugObject::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackDebugObject.id)
}

// .minieye.parking.ObjectType type = 2;
inline void TrackDebugObject::clear_type() {
  type_ = 0;
}
inline ::minieye::parking::ObjectType TrackDebugObject::_internal_type() const {
  return static_cast< ::minieye::parking::ObjectType >(type_);
}
inline ::minieye::parking::ObjectType TrackDebugObject::type() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackDebugObject.type)
  return _internal_type();
}
inline void TrackDebugObject::_internal_set_type(::minieye::parking::ObjectType value) {
  
  type_ = value;
}
inline void TrackDebugObject::set_type(::minieye::parking::ObjectType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackDebugObject.type)
}

// repeated .minieye.parking.ObjectMono3d detections = 3;
inline int TrackDebugObject::_internal_detections_size() const {
  return detections_.size();
}
inline int TrackDebugObject::detections_size() const {
  return _internal_detections_size();
}
inline void TrackDebugObject::clear_detections() {
  detections_.Clear();
}
inline ::minieye::parking::ObjectMono3d* TrackDebugObject::mutable_detections(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.TrackDebugObject.detections)
  return detections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectMono3d >*
TrackDebugObject::mutable_detections() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.TrackDebugObject.detections)
  return &detections_;
}
inline const ::minieye::parking::ObjectMono3d& TrackDebugObject::_internal_detections(int index) const {
  return detections_.Get(index);
}
inline const ::minieye::parking::ObjectMono3d& TrackDebugObject::detections(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackDebugObject.detections)
  return _internal_detections(index);
}
inline ::minieye::parking::ObjectMono3d* TrackDebugObject::_internal_add_detections() {
  return detections_.Add();
}
inline ::minieye::parking::ObjectMono3d* TrackDebugObject::add_detections() {
  // @@protoc_insertion_point(field_add:minieye.parking.TrackDebugObject.detections)
  return _internal_add_detections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ObjectMono3d >&
TrackDebugObject::detections() const {
  // @@protoc_insertion_point(field_list:minieye.parking.TrackDebugObject.detections)
  return detections_;
}

// repeated .minieye.parking.TrackModel models = 4;
inline int TrackDebugObject::_internal_models_size() const {
  return models_.size();
}
inline int TrackDebugObject::models_size() const {
  return _internal_models_size();
}
inline void TrackDebugObject::clear_models() {
  models_.Clear();
}
inline ::minieye::parking::TrackModel* TrackDebugObject::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.TrackDebugObject.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::TrackModel >*
TrackDebugObject::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.TrackDebugObject.models)
  return &models_;
}
inline const ::minieye::parking::TrackModel& TrackDebugObject::_internal_models(int index) const {
  return models_.Get(index);
}
inline const ::minieye::parking::TrackModel& TrackDebugObject::models(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackDebugObject.models)
  return _internal_models(index);
}
inline ::minieye::parking::TrackModel* TrackDebugObject::_internal_add_models() {
  return models_.Add();
}
inline ::minieye::parking::TrackModel* TrackDebugObject::add_models() {
  // @@protoc_insertion_point(field_add:minieye.parking.TrackDebugObject.models)
  return _internal_add_models();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::TrackModel >&
TrackDebugObject::models() const {
  // @@protoc_insertion_point(field_list:minieye.parking.TrackDebugObject.models)
  return models_;
}

// -------------------------------------------------------------------

// TrackMixTargetState

// float x_v_vt = 1;
inline void TrackMixTargetState::clear_x_v_vt() {
  x_v_vt_ = 0;
}
inline float TrackMixTargetState::_internal_x_v_vt() const {
  return x_v_vt_;
}
inline float TrackMixTargetState::x_v_vt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackMixTargetState.x_v_vt)
  return _internal_x_v_vt();
}
inline void TrackMixTargetState::_internal_set_x_v_vt(float value) {
  
  x_v_vt_ = value;
}
inline void TrackMixTargetState::set_x_v_vt(float value) {
  _internal_set_x_v_vt(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackMixTargetState.x_v_vt)
}

// float y_v_vt = 2;
inline void TrackMixTargetState::clear_y_v_vt() {
  y_v_vt_ = 0;
}
inline float TrackMixTargetState::_internal_y_v_vt() const {
  return y_v_vt_;
}
inline float TrackMixTargetState::y_v_vt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackMixTargetState.y_v_vt)
  return _internal_y_v_vt();
}
inline void TrackMixTargetState::_internal_set_y_v_vt(float value) {
  
  y_v_vt_ = value;
}
inline void TrackMixTargetState::set_y_v_vt(float value) {
  _internal_set_y_v_vt(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackMixTargetState.y_v_vt)
}

// float psi_vt = 3;
inline void TrackMixTargetState::clear_psi_vt() {
  psi_vt_ = 0;
}
inline float TrackMixTargetState::_internal_psi_vt() const {
  return psi_vt_;
}
inline float TrackMixTargetState::psi_vt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackMixTargetState.psi_vt)
  return _internal_psi_vt();
}
inline void TrackMixTargetState::_internal_set_psi_vt(float value) {
  
  psi_vt_ = value;
}
inline void TrackMixTargetState::set_psi_vt(float value) {
  _internal_set_psi_vt(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackMixTargetState.psi_vt)
}

// float w_gt = 4;
inline void TrackMixTargetState::clear_w_gt() {
  w_gt_ = 0;
}
inline float TrackMixTargetState::_internal_w_gt() const {
  return w_gt_;
}
inline float TrackMixTargetState::w_gt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackMixTargetState.w_gt)
  return _internal_w_gt();
}
inline void TrackMixTargetState::_internal_set_w_gt(float value) {
  
  w_gt_ = value;
}
inline void TrackMixTargetState::set_w_gt(float value) {
  _internal_set_w_gt(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackMixTargetState.w_gt)
}

// float v_gt = 5;
inline void TrackMixTargetState::clear_v_gt() {
  v_gt_ = 0;
}
inline float TrackMixTargetState::_internal_v_gt() const {
  return v_gt_;
}
inline float TrackMixTargetState::v_gt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackMixTargetState.v_gt)
  return _internal_v_gt();
}
inline void TrackMixTargetState::_internal_set_v_gt(float value) {
  
  v_gt_ = value;
}
inline void TrackMixTargetState::set_v_gt(float value) {
  _internal_set_v_gt(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackMixTargetState.v_gt)
}

// float a_gt = 6;
inline void TrackMixTargetState::clear_a_gt() {
  a_gt_ = 0;
}
inline float TrackMixTargetState::_internal_a_gt() const {
  return a_gt_;
}
inline float TrackMixTargetState::a_gt() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackMixTargetState.a_gt)
  return _internal_a_gt();
}
inline void TrackMixTargetState::_internal_set_a_gt(float value) {
  
  a_gt_ = value;
}
inline void TrackMixTargetState::set_a_gt(float value) {
  _internal_set_a_gt(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackMixTargetState.a_gt)
}

// -------------------------------------------------------------------

// TrackEgoState

// float dx_m = 1;
inline void TrackEgoState::clear_dx_m() {
  dx_m_ = 0;
}
inline float TrackEgoState::_internal_dx_m() const {
  return dx_m_;
}
inline float TrackEgoState::dx_m() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackEgoState.dx_m)
  return _internal_dx_m();
}
inline void TrackEgoState::_internal_set_dx_m(float value) {
  
  dx_m_ = value;
}
inline void TrackEgoState::set_dx_m(float value) {
  _internal_set_dx_m(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackEgoState.dx_m)
}

// float dy_m = 2;
inline void TrackEgoState::clear_dy_m() {
  dy_m_ = 0;
}
inline float TrackEgoState::_internal_dy_m() const {
  return dy_m_;
}
inline float TrackEgoState::dy_m() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackEgoState.dy_m)
  return _internal_dy_m();
}
inline void TrackEgoState::_internal_set_dy_m(float value) {
  
  dy_m_ = value;
}
inline void TrackEgoState::set_dy_m(float value) {
  _internal_set_dy_m(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackEgoState.dy_m)
}

// float dyaw_rad = 3;
inline void TrackEgoState::clear_dyaw_rad() {
  dyaw_rad_ = 0;
}
inline float TrackEgoState::_internal_dyaw_rad() const {
  return dyaw_rad_;
}
inline float TrackEgoState::dyaw_rad() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackEgoState.dyaw_rad)
  return _internal_dyaw_rad();
}
inline void TrackEgoState::_internal_set_dyaw_rad(float value) {
  
  dyaw_rad_ = value;
}
inline void TrackEgoState::set_dyaw_rad(float value) {
  _internal_set_dyaw_rad(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackEgoState.dyaw_rad)
}

// -------------------------------------------------------------------

// TrackModel

// .minieye.parking.TrackModelType type = 1;
inline void TrackModel::clear_type() {
  type_ = 0;
}
inline ::minieye::parking::TrackModelType TrackModel::_internal_type() const {
  return static_cast< ::minieye::parking::TrackModelType >(type_);
}
inline ::minieye::parking::TrackModelType TrackModel::type() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackModel.type)
  return _internal_type();
}
inline void TrackModel::_internal_set_type(::minieye::parking::TrackModelType value) {
  
  type_ = value;
}
inline void TrackModel::set_type(::minieye::parking::TrackModelType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackModel.type)
}

// float prob = 2;
inline void TrackModel::clear_prob() {
  prob_ = 0;
}
inline float TrackModel::_internal_prob() const {
  return prob_;
}
inline float TrackModel::prob() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackModel.prob)
  return _internal_prob();
}
inline void TrackModel::_internal_set_prob(float value) {
  
  prob_ = value;
}
inline void TrackModel::set_prob(float value) {
  _internal_set_prob(value);
  // @@protoc_insertion_point(field_set:minieye.parking.TrackModel.prob)
}

// .minieye.parking.TrackMixTargetState prior_state = 3;
inline bool TrackModel::_internal_has_prior_state() const {
  return this != internal_default_instance() && prior_state_ != nullptr;
}
inline bool TrackModel::has_prior_state() const {
  return _internal_has_prior_state();
}
inline void TrackModel::clear_prior_state() {
  if (GetArena() == nullptr && prior_state_ != nullptr) {
    delete prior_state_;
  }
  prior_state_ = nullptr;
}
inline const ::minieye::parking::TrackMixTargetState& TrackModel::_internal_prior_state() const {
  const ::minieye::parking::TrackMixTargetState* p = prior_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::TrackMixTargetState*>(
      &::minieye::parking::_TrackMixTargetState_default_instance_);
}
inline const ::minieye::parking::TrackMixTargetState& TrackModel::prior_state() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackModel.prior_state)
  return _internal_prior_state();
}
inline void TrackModel::unsafe_arena_set_allocated_prior_state(
    ::minieye::parking::TrackMixTargetState* prior_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prior_state_);
  }
  prior_state_ = prior_state;
  if (prior_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.TrackModel.prior_state)
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::release_prior_state() {
  auto temp = unsafe_arena_release_prior_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::unsafe_arena_release_prior_state() {
  // @@protoc_insertion_point(field_release:minieye.parking.TrackModel.prior_state)
  
  ::minieye::parking::TrackMixTargetState* temp = prior_state_;
  prior_state_ = nullptr;
  return temp;
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::_internal_mutable_prior_state() {
  
  if (prior_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::TrackMixTargetState>(GetArena());
    prior_state_ = p;
  }
  return prior_state_;
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::mutable_prior_state() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.TrackModel.prior_state)
  return _internal_mutable_prior_state();
}
inline void TrackModel::set_allocated_prior_state(::minieye::parking::TrackMixTargetState* prior_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prior_state_;
  }
  if (prior_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prior_state);
    if (message_arena != submessage_arena) {
      prior_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prior_state, submessage_arena);
    }
    
  } else {
    
  }
  prior_state_ = prior_state;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.TrackModel.prior_state)
}

// .minieye.parking.TrackMixTargetState prior_cov = 4;
inline bool TrackModel::_internal_has_prior_cov() const {
  return this != internal_default_instance() && prior_cov_ != nullptr;
}
inline bool TrackModel::has_prior_cov() const {
  return _internal_has_prior_cov();
}
inline void TrackModel::clear_prior_cov() {
  if (GetArena() == nullptr && prior_cov_ != nullptr) {
    delete prior_cov_;
  }
  prior_cov_ = nullptr;
}
inline const ::minieye::parking::TrackMixTargetState& TrackModel::_internal_prior_cov() const {
  const ::minieye::parking::TrackMixTargetState* p = prior_cov_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::TrackMixTargetState*>(
      &::minieye::parking::_TrackMixTargetState_default_instance_);
}
inline const ::minieye::parking::TrackMixTargetState& TrackModel::prior_cov() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackModel.prior_cov)
  return _internal_prior_cov();
}
inline void TrackModel::unsafe_arena_set_allocated_prior_cov(
    ::minieye::parking::TrackMixTargetState* prior_cov) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prior_cov_);
  }
  prior_cov_ = prior_cov;
  if (prior_cov) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.TrackModel.prior_cov)
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::release_prior_cov() {
  auto temp = unsafe_arena_release_prior_cov();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::unsafe_arena_release_prior_cov() {
  // @@protoc_insertion_point(field_release:minieye.parking.TrackModel.prior_cov)
  
  ::minieye::parking::TrackMixTargetState* temp = prior_cov_;
  prior_cov_ = nullptr;
  return temp;
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::_internal_mutable_prior_cov() {
  
  if (prior_cov_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::TrackMixTargetState>(GetArena());
    prior_cov_ = p;
  }
  return prior_cov_;
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::mutable_prior_cov() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.TrackModel.prior_cov)
  return _internal_mutable_prior_cov();
}
inline void TrackModel::set_allocated_prior_cov(::minieye::parking::TrackMixTargetState* prior_cov) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prior_cov_;
  }
  if (prior_cov) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prior_cov);
    if (message_arena != submessage_arena) {
      prior_cov = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prior_cov, submessage_arena);
    }
    
  } else {
    
  }
  prior_cov_ = prior_cov;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.TrackModel.prior_cov)
}

// .minieye.parking.TrackMixTargetState posterior_state = 5;
inline bool TrackModel::_internal_has_posterior_state() const {
  return this != internal_default_instance() && posterior_state_ != nullptr;
}
inline bool TrackModel::has_posterior_state() const {
  return _internal_has_posterior_state();
}
inline void TrackModel::clear_posterior_state() {
  if (GetArena() == nullptr && posterior_state_ != nullptr) {
    delete posterior_state_;
  }
  posterior_state_ = nullptr;
}
inline const ::minieye::parking::TrackMixTargetState& TrackModel::_internal_posterior_state() const {
  const ::minieye::parking::TrackMixTargetState* p = posterior_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::TrackMixTargetState*>(
      &::minieye::parking::_TrackMixTargetState_default_instance_);
}
inline const ::minieye::parking::TrackMixTargetState& TrackModel::posterior_state() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackModel.posterior_state)
  return _internal_posterior_state();
}
inline void TrackModel::unsafe_arena_set_allocated_posterior_state(
    ::minieye::parking::TrackMixTargetState* posterior_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posterior_state_);
  }
  posterior_state_ = posterior_state;
  if (posterior_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.TrackModel.posterior_state)
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::release_posterior_state() {
  auto temp = unsafe_arena_release_posterior_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::unsafe_arena_release_posterior_state() {
  // @@protoc_insertion_point(field_release:minieye.parking.TrackModel.posterior_state)
  
  ::minieye::parking::TrackMixTargetState* temp = posterior_state_;
  posterior_state_ = nullptr;
  return temp;
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::_internal_mutable_posterior_state() {
  
  if (posterior_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::TrackMixTargetState>(GetArena());
    posterior_state_ = p;
  }
  return posterior_state_;
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::mutable_posterior_state() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.TrackModel.posterior_state)
  return _internal_mutable_posterior_state();
}
inline void TrackModel::set_allocated_posterior_state(::minieye::parking::TrackMixTargetState* posterior_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete posterior_state_;
  }
  if (posterior_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(posterior_state);
    if (message_arena != submessage_arena) {
      posterior_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posterior_state, submessage_arena);
    }
    
  } else {
    
  }
  posterior_state_ = posterior_state;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.TrackModel.posterior_state)
}

// .minieye.parking.TrackMixTargetState posterior_cov = 6;
inline bool TrackModel::_internal_has_posterior_cov() const {
  return this != internal_default_instance() && posterior_cov_ != nullptr;
}
inline bool TrackModel::has_posterior_cov() const {
  return _internal_has_posterior_cov();
}
inline void TrackModel::clear_posterior_cov() {
  if (GetArena() == nullptr && posterior_cov_ != nullptr) {
    delete posterior_cov_;
  }
  posterior_cov_ = nullptr;
}
inline const ::minieye::parking::TrackMixTargetState& TrackModel::_internal_posterior_cov() const {
  const ::minieye::parking::TrackMixTargetState* p = posterior_cov_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::TrackMixTargetState*>(
      &::minieye::parking::_TrackMixTargetState_default_instance_);
}
inline const ::minieye::parking::TrackMixTargetState& TrackModel::posterior_cov() const {
  // @@protoc_insertion_point(field_get:minieye.parking.TrackModel.posterior_cov)
  return _internal_posterior_cov();
}
inline void TrackModel::unsafe_arena_set_allocated_posterior_cov(
    ::minieye::parking::TrackMixTargetState* posterior_cov) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posterior_cov_);
  }
  posterior_cov_ = posterior_cov;
  if (posterior_cov) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.TrackModel.posterior_cov)
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::release_posterior_cov() {
  auto temp = unsafe_arena_release_posterior_cov();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::unsafe_arena_release_posterior_cov() {
  // @@protoc_insertion_point(field_release:minieye.parking.TrackModel.posterior_cov)
  
  ::minieye::parking::TrackMixTargetState* temp = posterior_cov_;
  posterior_cov_ = nullptr;
  return temp;
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::_internal_mutable_posterior_cov() {
  
  if (posterior_cov_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::TrackMixTargetState>(GetArena());
    posterior_cov_ = p;
  }
  return posterior_cov_;
}
inline ::minieye::parking::TrackMixTargetState* TrackModel::mutable_posterior_cov() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.TrackModel.posterior_cov)
  return _internal_mutable_posterior_cov();
}
inline void TrackModel::set_allocated_posterior_cov(::minieye::parking::TrackMixTargetState* posterior_cov) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete posterior_cov_;
  }
  if (posterior_cov) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(posterior_cov);
    if (message_arena != submessage_arena) {
      posterior_cov = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posterior_cov, submessage_arena);
    }
    
  } else {
    
  }
  posterior_cov_ = posterior_cov;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.TrackModel.posterior_cov)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace parking
}  // namespace minieye

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minieye::parking::ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::parking::ObjectType>() {
  return ::minieye::parking::ObjectType_descriptor();
}
template <> struct is_proto_enum< ::minieye::parking::CameraId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::parking::CameraId>() {
  return ::minieye::parking::CameraId_descriptor();
}
template <> struct is_proto_enum< ::minieye::parking::TrackingStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::parking::TrackingStatus>() {
  return ::minieye::parking::TrackingStatus_descriptor();
}
template <> struct is_proto_enum< ::minieye::parking::MotionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::parking::MotionStatus>() {
  return ::minieye::parking::MotionStatus_descriptor();
}
template <> struct is_proto_enum< ::minieye::parking::TrackModelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::parking::TrackModelType>() {
  return ::minieye::parking::TrackModelType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parking_5fobject_2eproto
