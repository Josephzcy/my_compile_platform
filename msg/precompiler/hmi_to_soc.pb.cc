// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_to_soc.proto

#include "hmi_to_soc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hmi_5fto_5fsoc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HMI_HAVP_CALLBACKS_hmi_5fto_5fsoc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hmi_5fto_5fsoc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RRM_1_AVM_hmi_5fto_5fsoc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hmi_5fto_5fsoc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RRM_2_AVM_hmi_5fto_5fsoc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hmi_5fto_5fsoc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RRM_3_AVM_hmi_5fto_5fsoc_2eproto;
namespace minieye {
class RRM_1_AVMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RRM_1_AVM> _instance;
} _RRM_1_AVM_default_instance_;
class RRM_2_AVMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RRM_2_AVM> _instance;
} _RRM_2_AVM_default_instance_;
class RRM_3_AVMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RRM_3_AVM> _instance;
} _RRM_3_AVM_default_instance_;
class HMI_HAVP_CALLBACKSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMI_HAVP_CALLBACKS> _instance;
} _HMI_HAVP_CALLBACKS_default_instance_;
class HmiToSocDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HmiToSoc> _instance;
} _HmiToSoc_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_HMI_HAVP_CALLBACKS_hmi_5fto_5fsoc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_HMI_HAVP_CALLBACKS_default_instance_;
    new (ptr) ::minieye::HMI_HAVP_CALLBACKS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::HMI_HAVP_CALLBACKS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HMI_HAVP_CALLBACKS_hmi_5fto_5fsoc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HMI_HAVP_CALLBACKS_hmi_5fto_5fsoc_2eproto}, {}};

static void InitDefaultsscc_info_HmiToSoc_hmi_5fto_5fsoc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_HmiToSoc_default_instance_;
    new (ptr) ::minieye::HmiToSoc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::HmiToSoc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_HmiToSoc_hmi_5fto_5fsoc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_HmiToSoc_hmi_5fto_5fsoc_2eproto}, {
      &scc_info_RRM_1_AVM_hmi_5fto_5fsoc_2eproto.base,
      &scc_info_RRM_2_AVM_hmi_5fto_5fsoc_2eproto.base,
      &scc_info_RRM_3_AVM_hmi_5fto_5fsoc_2eproto.base,
      &scc_info_HMI_HAVP_CALLBACKS_hmi_5fto_5fsoc_2eproto.base,}};

static void InitDefaultsscc_info_RRM_1_AVM_hmi_5fto_5fsoc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_RRM_1_AVM_default_instance_;
    new (ptr) ::minieye::RRM_1_AVM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::RRM_1_AVM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RRM_1_AVM_hmi_5fto_5fsoc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RRM_1_AVM_hmi_5fto_5fsoc_2eproto}, {}};

static void InitDefaultsscc_info_RRM_2_AVM_hmi_5fto_5fsoc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_RRM_2_AVM_default_instance_;
    new (ptr) ::minieye::RRM_2_AVM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::RRM_2_AVM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RRM_2_AVM_hmi_5fto_5fsoc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RRM_2_AVM_hmi_5fto_5fsoc_2eproto}, {}};

static void InitDefaultsscc_info_RRM_3_AVM_hmi_5fto_5fsoc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_RRM_3_AVM_default_instance_;
    new (ptr) ::minieye::RRM_3_AVM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::RRM_3_AVM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RRM_3_AVM_hmi_5fto_5fsoc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RRM_3_AVM_hmi_5fto_5fsoc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hmi_5fto_5fsoc_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hmi_5fto_5fsoc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hmi_5fto_5fsoc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hmi_5fto_5fsoc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_1_AVM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_1_AVM, licenseplate_1_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_1_AVM, licenseplate_2_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_1_AVM, licenseplate_3_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_1_AVM, licenseplate_4_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_1_AVM, licenseplate_5_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_1_AVM, licenseplate_6_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_1_AVM, licenseplate_7_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_1_AVM, licenseplate_8_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_2_AVM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_2_AVM, btnpressinputvaluex_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_2_AVM, btnpressinputvaluey_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_2_AVM, touchevt_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_2_AVM, avmviewmodeswitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_2_AVM, avmtransparenthoodswitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_2_AVM, avmtrailswitch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, apa_op_sw_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, apa_slot_chosen_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, apa_engage_confirm_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, apa_suspend_resume_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, apa_pullout_option_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, apa_pullout_direction_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, apa_parkin_direction_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, avm_op_view_dvr_sw_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, set_steeringwheel_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, set_language_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, set_radarwarining_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, set_turnindication_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, set_bodycolor_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, set_autozoom_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, set_pastrigger_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, set_transparency_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, set_autoexit_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, set_licenseplate_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, set_guideline_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, set_factorydefault_),
  PROTOBUF_FIELD_OFFSET(::minieye::RRM_3_AVM, plan_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::HMI_HAVP_CALLBACKS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::HMI_HAVP_CALLBACKS, havp_engage_confim_),
  PROTOBUF_FIELD_OFFSET(::minieye::HMI_HAVP_CALLBACKS, havp_build_map_confirm_),
  PROTOBUF_FIELD_OFFSET(::minieye::HMI_HAVP_CALLBACKS, havp_build_map_finished_),
  PROTOBUF_FIELD_OFFSET(::minieye::HMI_HAVP_CALLBACKS, havp_exit_),
  PROTOBUF_FIELD_OFFSET(::minieye::HMI_HAVP_CALLBACKS, havp_build_map_park_manual_),
  PROTOBUF_FIELD_OFFSET(::minieye::HMI_HAVP_CALLBACKS, havp_start_),
  PROTOBUF_FIELD_OFFSET(::minieye::HMI_HAVP_CALLBACKS, havp_build_map_back_to_learning_),
  PROTOBUF_FIELD_OFFSET(::minieye::HMI_HAVP_CALLBACKS, havp_parking_control_deceleration_enum_),
  PROTOBUF_FIELD_OFFSET(::minieye::HMI_HAVP_CALLBACKS, havp_parking_continue_search_parking_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::HmiToSoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::HmiToSoc, rrm_1_avm_),
  PROTOBUF_FIELD_OFFSET(::minieye::HmiToSoc, rrm_2_avm_),
  PROTOBUF_FIELD_OFFSET(::minieye::HmiToSoc, rrm_3_avm_),
  PROTOBUF_FIELD_OFFSET(::minieye::HmiToSoc, hmi_havp_callbacks_),
  PROTOBUF_FIELD_OFFSET(::minieye::HmiToSoc, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::HmiToSoc, tick_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::RRM_1_AVM)},
  { 13, -1, sizeof(::minieye::RRM_2_AVM)},
  { 24, -1, sizeof(::minieye::RRM_3_AVM)},
  { 50, -1, sizeof(::minieye::HMI_HAVP_CALLBACKS)},
  { 64, -1, sizeof(::minieye::HmiToSoc)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_RRM_1_AVM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_RRM_2_AVM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_RRM_3_AVM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_HMI_HAVP_CALLBACKS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_HmiToSoc_default_instance_),
};

const char descriptor_table_protodef_hmi_5fto_5fsoc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020hmi_to_soc.proto\022\007minieye\"\313\001\n\tRRM_1_AV"
  "M\022\026\n\016licenseplate_1\030\001 \001(\r\022\026\n\016licenseplat"
  "e_2\030\002 \001(\r\022\026\n\016licenseplate_3\030\003 \001(\r\022\026\n\016lic"
  "enseplate_4\030\004 \001(\r\022\026\n\016licenseplate_5\030\005 \001("
  "\r\022\026\n\016licenseplate_6\030\006 \001(\r\022\026\n\016licenseplat"
  "e_7\030\007 \001(\r\022\026\n\016licenseplate_8\030\010 \001(\r\"\254\001\n\tRR"
  "M_2_AVM\022\033\n\023BtnPressInputValueX\030\001 \001(\r\022\033\n\023"
  "BtnPressInputValueY\030\002 \001(\r\022\020\n\010TouchEvt\030\003 "
  "\001(\r\022\031\n\021AVMViewModeSwitch\030\004 \001(\r\022 \n\030AVMTra"
  "nsparentHoodSwitch\030\005 \001(\010\022\026\n\016AVMTrailSwit"
  "ch\030\006 \001(\010\"\241\004\n\tRRM_3_AVM\022\021\n\tAPA_OP_SW\030\001 \001("
  "\r\022\027\n\017APA_Slot_Chosen\030\002 \001(\r\022\032\n\022APA_Engage"
  "_Confirm\030\003 \001(\010\022\032\n\022APA_Suspend_Resume\030\004 \001"
  "(\r\022\032\n\022APA_PullOut_Option\030\005 \001(\r\022\035\n\025APA_Pu"
  "llOut_Direction\030\006 \001(\r\022\034\n\024APA_ParkIn_Dire"
  "ction\030\007 \001(\r\022\032\n\022AVM_OP_VIEW_DVR_SW\030\010 \001(\r\022"
  "\031\n\021Set_SteeringWheel\030\t \001(\r\022\024\n\014Set_Langua"
  "ge\030\n \001(\r\022\031\n\021Set_RadarWarining\030\013 \001(\r\022\032\n\022S"
  "et_TurnIndication\030\014 \001(\r\022\025\n\rSet_BodyColor"
  "\030\r \001(\r\022\024\n\014Set_AutoZoom\030\016 \001(\r\022\026\n\016Set_PAST"
  "rigger\030\017 \001(\r\022\030\n\020Set_Transparency\030\020 \001(\r\022\024"
  "\n\014Set_AutoExit\030\021 \001(\r\022\030\n\020Set_LicensePlate"
  "\030\022 \001(\r\022\025\n\rSet_GuideLine\030\023 \001(\r\022\032\n\022Set_Fac"
  "toryDefault\030\024 \001(\r\022\021\n\tPlan_type\030\025 \001(\r\"\303\002\n"
  "\022HMI_HAVP_CALLBACKS\022\032\n\022HAVP_Engage_Confi"
  "m\030\001 \001(\010\022\036\n\026HAVP_Build_Map_Confirm\030\002 \001(\010\022"
  "\037\n\027HAVP_Build_Map_Finished\030\003 \001(\010\022\021\n\tHAVP"
  "_Exit\030\004 \001(\010\022\"\n\032HAVP_Build_Map_Park_Manua"
  "l\030\005 \001(\010\022\022\n\nHAVP_Start\030\006 \001(\010\022\'\n\037HAVP_Buil"
  "d_Map_Back_To_Learning\030\007 \001(\010\022.\n&HAVP_Par"
  "king_Control_Deceleration_Enum\030\010 \001(\r\022,\n$"
  "HAVP_Parking_Continue_Search_Parking\030\t \001"
  "(\010\"\331\001\n\010HmiToSoc\022%\n\trrm_1_avm\030\001 \001(\0132\022.min"
  "ieye.RRM_1_AVM\022%\n\trrm_2_avm\030\002 \001(\0132\022.mini"
  "eye.RRM_2_AVM\022%\n\trrm_3_avm\030\003 \001(\0132\022.minie"
  "ye.RRM_3_AVM\0227\n\022hmi_havp_callbacks\030\004 \001(\013"
  "2\033.minieye.HMI_HAVP_CALLBACKS\022\021\n\ttimesta"
  "mp\030\005 \001(\004\022\014\n\004tick\030\006 \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hmi_5fto_5fsoc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hmi_5fto_5fsoc_2eproto_sccs[5] = {
  &scc_info_HMI_HAVP_CALLBACKS_hmi_5fto_5fsoc_2eproto.base,
  &scc_info_HmiToSoc_hmi_5fto_5fsoc_2eproto.base,
  &scc_info_RRM_1_AVM_hmi_5fto_5fsoc_2eproto.base,
  &scc_info_RRM_2_AVM_hmi_5fto_5fsoc_2eproto.base,
  &scc_info_RRM_3_AVM_hmi_5fto_5fsoc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hmi_5fto_5fsoc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5fto_5fsoc_2eproto = {
  false, false, descriptor_table_protodef_hmi_5fto_5fsoc_2eproto, "hmi_to_soc.proto", 1510,
  &descriptor_table_hmi_5fto_5fsoc_2eproto_once, descriptor_table_hmi_5fto_5fsoc_2eproto_sccs, descriptor_table_hmi_5fto_5fsoc_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_hmi_5fto_5fsoc_2eproto::offsets,
  file_level_metadata_hmi_5fto_5fsoc_2eproto, 5, file_level_enum_descriptors_hmi_5fto_5fsoc_2eproto, file_level_service_descriptors_hmi_5fto_5fsoc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hmi_5fto_5fsoc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hmi_5fto_5fsoc_2eproto)), true);
namespace minieye {

// ===================================================================

void RRM_1_AVM::InitAsDefaultInstance() {
}
class RRM_1_AVM::_Internal {
 public:
};

RRM_1_AVM::RRM_1_AVM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.RRM_1_AVM)
}
RRM_1_AVM::RRM_1_AVM(const RRM_1_AVM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&licenseplate_1_, &from.licenseplate_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&licenseplate_8_) -
    reinterpret_cast<char*>(&licenseplate_1_)) + sizeof(licenseplate_8_));
  // @@protoc_insertion_point(copy_constructor:minieye.RRM_1_AVM)
}

void RRM_1_AVM::SharedCtor() {
  ::memset(&licenseplate_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&licenseplate_8_) -
      reinterpret_cast<char*>(&licenseplate_1_)) + sizeof(licenseplate_8_));
}

RRM_1_AVM::~RRM_1_AVM() {
  // @@protoc_insertion_point(destructor:minieye.RRM_1_AVM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RRM_1_AVM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RRM_1_AVM::ArenaDtor(void* object) {
  RRM_1_AVM* _this = reinterpret_cast< RRM_1_AVM* >(object);
  (void)_this;
}
void RRM_1_AVM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RRM_1_AVM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RRM_1_AVM& RRM_1_AVM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RRM_1_AVM_hmi_5fto_5fsoc_2eproto.base);
  return *internal_default_instance();
}


void RRM_1_AVM::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.RRM_1_AVM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&licenseplate_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&licenseplate_8_) -
      reinterpret_cast<char*>(&licenseplate_1_)) + sizeof(licenseplate_8_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RRM_1_AVM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 licenseplate_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          licenseplate_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 licenseplate_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          licenseplate_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 licenseplate_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          licenseplate_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 licenseplate_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          licenseplate_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 licenseplate_5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          licenseplate_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 licenseplate_6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          licenseplate_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 licenseplate_7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          licenseplate_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 licenseplate_8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          licenseplate_8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RRM_1_AVM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.RRM_1_AVM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 licenseplate_1 = 1;
  if (this->licenseplate_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_licenseplate_1(), target);
  }

  // uint32 licenseplate_2 = 2;
  if (this->licenseplate_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_licenseplate_2(), target);
  }

  // uint32 licenseplate_3 = 3;
  if (this->licenseplate_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_licenseplate_3(), target);
  }

  // uint32 licenseplate_4 = 4;
  if (this->licenseplate_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_licenseplate_4(), target);
  }

  // uint32 licenseplate_5 = 5;
  if (this->licenseplate_5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_licenseplate_5(), target);
  }

  // uint32 licenseplate_6 = 6;
  if (this->licenseplate_6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_licenseplate_6(), target);
  }

  // uint32 licenseplate_7 = 7;
  if (this->licenseplate_7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_licenseplate_7(), target);
  }

  // uint32 licenseplate_8 = 8;
  if (this->licenseplate_8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_licenseplate_8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.RRM_1_AVM)
  return target;
}

size_t RRM_1_AVM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.RRM_1_AVM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 licenseplate_1 = 1;
  if (this->licenseplate_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate_1());
  }

  // uint32 licenseplate_2 = 2;
  if (this->licenseplate_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate_2());
  }

  // uint32 licenseplate_3 = 3;
  if (this->licenseplate_3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate_3());
  }

  // uint32 licenseplate_4 = 4;
  if (this->licenseplate_4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate_4());
  }

  // uint32 licenseplate_5 = 5;
  if (this->licenseplate_5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate_5());
  }

  // uint32 licenseplate_6 = 6;
  if (this->licenseplate_6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate_6());
  }

  // uint32 licenseplate_7 = 7;
  if (this->licenseplate_7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate_7());
  }

  // uint32 licenseplate_8 = 8;
  if (this->licenseplate_8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate_8());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RRM_1_AVM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.RRM_1_AVM)
  GOOGLE_DCHECK_NE(&from, this);
  const RRM_1_AVM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RRM_1_AVM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.RRM_1_AVM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.RRM_1_AVM)
    MergeFrom(*source);
  }
}

void RRM_1_AVM::MergeFrom(const RRM_1_AVM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.RRM_1_AVM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.licenseplate_1() != 0) {
    _internal_set_licenseplate_1(from._internal_licenseplate_1());
  }
  if (from.licenseplate_2() != 0) {
    _internal_set_licenseplate_2(from._internal_licenseplate_2());
  }
  if (from.licenseplate_3() != 0) {
    _internal_set_licenseplate_3(from._internal_licenseplate_3());
  }
  if (from.licenseplate_4() != 0) {
    _internal_set_licenseplate_4(from._internal_licenseplate_4());
  }
  if (from.licenseplate_5() != 0) {
    _internal_set_licenseplate_5(from._internal_licenseplate_5());
  }
  if (from.licenseplate_6() != 0) {
    _internal_set_licenseplate_6(from._internal_licenseplate_6());
  }
  if (from.licenseplate_7() != 0) {
    _internal_set_licenseplate_7(from._internal_licenseplate_7());
  }
  if (from.licenseplate_8() != 0) {
    _internal_set_licenseplate_8(from._internal_licenseplate_8());
  }
}

void RRM_1_AVM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.RRM_1_AVM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RRM_1_AVM::CopyFrom(const RRM_1_AVM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.RRM_1_AVM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RRM_1_AVM::IsInitialized() const {
  return true;
}

void RRM_1_AVM::InternalSwap(RRM_1_AVM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RRM_1_AVM, licenseplate_8_)
      + sizeof(RRM_1_AVM::licenseplate_8_)
      - PROTOBUF_FIELD_OFFSET(RRM_1_AVM, licenseplate_1_)>(
          reinterpret_cast<char*>(&licenseplate_1_),
          reinterpret_cast<char*>(&other->licenseplate_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RRM_1_AVM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RRM_2_AVM::InitAsDefaultInstance() {
}
class RRM_2_AVM::_Internal {
 public:
};

RRM_2_AVM::RRM_2_AVM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.RRM_2_AVM)
}
RRM_2_AVM::RRM_2_AVM(const RRM_2_AVM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&btnpressinputvaluex_, &from.btnpressinputvaluex_,
    static_cast<size_t>(reinterpret_cast<char*>(&avmtrailswitch_) -
    reinterpret_cast<char*>(&btnpressinputvaluex_)) + sizeof(avmtrailswitch_));
  // @@protoc_insertion_point(copy_constructor:minieye.RRM_2_AVM)
}

void RRM_2_AVM::SharedCtor() {
  ::memset(&btnpressinputvaluex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avmtrailswitch_) -
      reinterpret_cast<char*>(&btnpressinputvaluex_)) + sizeof(avmtrailswitch_));
}

RRM_2_AVM::~RRM_2_AVM() {
  // @@protoc_insertion_point(destructor:minieye.RRM_2_AVM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RRM_2_AVM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RRM_2_AVM::ArenaDtor(void* object) {
  RRM_2_AVM* _this = reinterpret_cast< RRM_2_AVM* >(object);
  (void)_this;
}
void RRM_2_AVM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RRM_2_AVM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RRM_2_AVM& RRM_2_AVM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RRM_2_AVM_hmi_5fto_5fsoc_2eproto.base);
  return *internal_default_instance();
}


void RRM_2_AVM::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.RRM_2_AVM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&btnpressinputvaluex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avmtrailswitch_) -
      reinterpret_cast<char*>(&btnpressinputvaluex_)) + sizeof(avmtrailswitch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RRM_2_AVM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 BtnPressInputValueX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          btnpressinputvaluex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BtnPressInputValueY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          btnpressinputvaluey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 TouchEvt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          touchevt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AVMViewModeSwitch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          avmviewmodeswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AVMTransparentHoodSwitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          avmtransparenthoodswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AVMTrailSwitch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          avmtrailswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RRM_2_AVM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.RRM_2_AVM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 BtnPressInputValueX = 1;
  if (this->btnpressinputvaluex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_btnpressinputvaluex(), target);
  }

  // uint32 BtnPressInputValueY = 2;
  if (this->btnpressinputvaluey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_btnpressinputvaluey(), target);
  }

  // uint32 TouchEvt = 3;
  if (this->touchevt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_touchevt(), target);
  }

  // uint32 AVMViewModeSwitch = 4;
  if (this->avmviewmodeswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_avmviewmodeswitch(), target);
  }

  // bool AVMTransparentHoodSwitch = 5;
  if (this->avmtransparenthoodswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_avmtransparenthoodswitch(), target);
  }

  // bool AVMTrailSwitch = 6;
  if (this->avmtrailswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_avmtrailswitch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.RRM_2_AVM)
  return target;
}

size_t RRM_2_AVM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.RRM_2_AVM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 BtnPressInputValueX = 1;
  if (this->btnpressinputvaluex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_btnpressinputvaluex());
  }

  // uint32 BtnPressInputValueY = 2;
  if (this->btnpressinputvaluey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_btnpressinputvaluey());
  }

  // uint32 TouchEvt = 3;
  if (this->touchevt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_touchevt());
  }

  // uint32 AVMViewModeSwitch = 4;
  if (this->avmviewmodeswitch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avmviewmodeswitch());
  }

  // bool AVMTransparentHoodSwitch = 5;
  if (this->avmtransparenthoodswitch() != 0) {
    total_size += 1 + 1;
  }

  // bool AVMTrailSwitch = 6;
  if (this->avmtrailswitch() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RRM_2_AVM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.RRM_2_AVM)
  GOOGLE_DCHECK_NE(&from, this);
  const RRM_2_AVM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RRM_2_AVM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.RRM_2_AVM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.RRM_2_AVM)
    MergeFrom(*source);
  }
}

void RRM_2_AVM::MergeFrom(const RRM_2_AVM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.RRM_2_AVM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.btnpressinputvaluex() != 0) {
    _internal_set_btnpressinputvaluex(from._internal_btnpressinputvaluex());
  }
  if (from.btnpressinputvaluey() != 0) {
    _internal_set_btnpressinputvaluey(from._internal_btnpressinputvaluey());
  }
  if (from.touchevt() != 0) {
    _internal_set_touchevt(from._internal_touchevt());
  }
  if (from.avmviewmodeswitch() != 0) {
    _internal_set_avmviewmodeswitch(from._internal_avmviewmodeswitch());
  }
  if (from.avmtransparenthoodswitch() != 0) {
    _internal_set_avmtransparenthoodswitch(from._internal_avmtransparenthoodswitch());
  }
  if (from.avmtrailswitch() != 0) {
    _internal_set_avmtrailswitch(from._internal_avmtrailswitch());
  }
}

void RRM_2_AVM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.RRM_2_AVM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RRM_2_AVM::CopyFrom(const RRM_2_AVM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.RRM_2_AVM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RRM_2_AVM::IsInitialized() const {
  return true;
}

void RRM_2_AVM::InternalSwap(RRM_2_AVM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RRM_2_AVM, avmtrailswitch_)
      + sizeof(RRM_2_AVM::avmtrailswitch_)
      - PROTOBUF_FIELD_OFFSET(RRM_2_AVM, btnpressinputvaluex_)>(
          reinterpret_cast<char*>(&btnpressinputvaluex_),
          reinterpret_cast<char*>(&other->btnpressinputvaluex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RRM_2_AVM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RRM_3_AVM::InitAsDefaultInstance() {
}
class RRM_3_AVM::_Internal {
 public:
};

RRM_3_AVM::RRM_3_AVM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.RRM_3_AVM)
}
RRM_3_AVM::RRM_3_AVM(const RRM_3_AVM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&apa_op_sw_, &from.apa_op_sw_,
    static_cast<size_t>(reinterpret_cast<char*>(&plan_type_) -
    reinterpret_cast<char*>(&apa_op_sw_)) + sizeof(plan_type_));
  // @@protoc_insertion_point(copy_constructor:minieye.RRM_3_AVM)
}

void RRM_3_AVM::SharedCtor() {
  ::memset(&apa_op_sw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plan_type_) -
      reinterpret_cast<char*>(&apa_op_sw_)) + sizeof(plan_type_));
}

RRM_3_AVM::~RRM_3_AVM() {
  // @@protoc_insertion_point(destructor:minieye.RRM_3_AVM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RRM_3_AVM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RRM_3_AVM::ArenaDtor(void* object) {
  RRM_3_AVM* _this = reinterpret_cast< RRM_3_AVM* >(object);
  (void)_this;
}
void RRM_3_AVM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RRM_3_AVM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RRM_3_AVM& RRM_3_AVM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RRM_3_AVM_hmi_5fto_5fsoc_2eproto.base);
  return *internal_default_instance();
}


void RRM_3_AVM::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.RRM_3_AVM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&apa_op_sw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plan_type_) -
      reinterpret_cast<char*>(&apa_op_sw_)) + sizeof(plan_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RRM_3_AVM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 APA_OP_SW = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          apa_op_sw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 APA_Slot_Chosen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          apa_slot_chosen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool APA_Engage_Confirm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          apa_engage_confirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 APA_Suspend_Resume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          apa_suspend_resume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 APA_PullOut_Option = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          apa_pullout_option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 APA_PullOut_Direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          apa_pullout_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 APA_ParkIn_Direction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          apa_parkin_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AVM_OP_VIEW_DVR_SW = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          avm_op_view_dvr_sw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_SteeringWheel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          set_steeringwheel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_Language = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          set_language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_RadarWarining = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          set_radarwarining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_TurnIndication = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          set_turnindication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_BodyColor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          set_bodycolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_AutoZoom = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          set_autozoom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_PASTrigger = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          set_pastrigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_Transparency = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          set_transparency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_AutoExit = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          set_autoexit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_LicensePlate = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          set_licenseplate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_GuideLine = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          set_guideline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_FactoryDefault = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          set_factorydefault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Plan_type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          plan_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RRM_3_AVM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.RRM_3_AVM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 APA_OP_SW = 1;
  if (this->apa_op_sw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_apa_op_sw(), target);
  }

  // uint32 APA_Slot_Chosen = 2;
  if (this->apa_slot_chosen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_apa_slot_chosen(), target);
  }

  // bool APA_Engage_Confirm = 3;
  if (this->apa_engage_confirm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_apa_engage_confirm(), target);
  }

  // uint32 APA_Suspend_Resume = 4;
  if (this->apa_suspend_resume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_apa_suspend_resume(), target);
  }

  // uint32 APA_PullOut_Option = 5;
  if (this->apa_pullout_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_apa_pullout_option(), target);
  }

  // uint32 APA_PullOut_Direction = 6;
  if (this->apa_pullout_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_apa_pullout_direction(), target);
  }

  // uint32 APA_ParkIn_Direction = 7;
  if (this->apa_parkin_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_apa_parkin_direction(), target);
  }

  // uint32 AVM_OP_VIEW_DVR_SW = 8;
  if (this->avm_op_view_dvr_sw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_avm_op_view_dvr_sw(), target);
  }

  // uint32 Set_SteeringWheel = 9;
  if (this->set_steeringwheel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_set_steeringwheel(), target);
  }

  // uint32 Set_Language = 10;
  if (this->set_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_set_language(), target);
  }

  // uint32 Set_RadarWarining = 11;
  if (this->set_radarwarining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_set_radarwarining(), target);
  }

  // uint32 Set_TurnIndication = 12;
  if (this->set_turnindication() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_set_turnindication(), target);
  }

  // uint32 Set_BodyColor = 13;
  if (this->set_bodycolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_set_bodycolor(), target);
  }

  // uint32 Set_AutoZoom = 14;
  if (this->set_autozoom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_set_autozoom(), target);
  }

  // uint32 Set_PASTrigger = 15;
  if (this->set_pastrigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_set_pastrigger(), target);
  }

  // uint32 Set_Transparency = 16;
  if (this->set_transparency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_set_transparency(), target);
  }

  // uint32 Set_AutoExit = 17;
  if (this->set_autoexit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_set_autoexit(), target);
  }

  // uint32 Set_LicensePlate = 18;
  if (this->set_licenseplate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_set_licenseplate(), target);
  }

  // uint32 Set_GuideLine = 19;
  if (this->set_guideline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_set_guideline(), target);
  }

  // uint32 Set_FactoryDefault = 20;
  if (this->set_factorydefault() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_set_factorydefault(), target);
  }

  // uint32 Plan_type = 21;
  if (this->plan_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_plan_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.RRM_3_AVM)
  return target;
}

size_t RRM_3_AVM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.RRM_3_AVM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 APA_OP_SW = 1;
  if (this->apa_op_sw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_apa_op_sw());
  }

  // uint32 APA_Slot_Chosen = 2;
  if (this->apa_slot_chosen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_apa_slot_chosen());
  }

  // bool APA_Engage_Confirm = 3;
  if (this->apa_engage_confirm() != 0) {
    total_size += 1 + 1;
  }

  // uint32 APA_Suspend_Resume = 4;
  if (this->apa_suspend_resume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_apa_suspend_resume());
  }

  // uint32 APA_PullOut_Option = 5;
  if (this->apa_pullout_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_apa_pullout_option());
  }

  // uint32 APA_PullOut_Direction = 6;
  if (this->apa_pullout_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_apa_pullout_direction());
  }

  // uint32 APA_ParkIn_Direction = 7;
  if (this->apa_parkin_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_apa_parkin_direction());
  }

  // uint32 AVM_OP_VIEW_DVR_SW = 8;
  if (this->avm_op_view_dvr_sw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avm_op_view_dvr_sw());
  }

  // uint32 Set_SteeringWheel = 9;
  if (this->set_steeringwheel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_steeringwheel());
  }

  // uint32 Set_Language = 10;
  if (this->set_language() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_language());
  }

  // uint32 Set_RadarWarining = 11;
  if (this->set_radarwarining() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_radarwarining());
  }

  // uint32 Set_TurnIndication = 12;
  if (this->set_turnindication() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_turnindication());
  }

  // uint32 Set_BodyColor = 13;
  if (this->set_bodycolor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_bodycolor());
  }

  // uint32 Set_AutoZoom = 14;
  if (this->set_autozoom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_autozoom());
  }

  // uint32 Set_PASTrigger = 15;
  if (this->set_pastrigger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_pastrigger());
  }

  // uint32 Set_Transparency = 16;
  if (this->set_transparency() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_transparency());
  }

  // uint32 Set_AutoExit = 17;
  if (this->set_autoexit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_autoexit());
  }

  // uint32 Set_LicensePlate = 18;
  if (this->set_licenseplate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_licenseplate());
  }

  // uint32 Set_GuideLine = 19;
  if (this->set_guideline() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_guideline());
  }

  // uint32 Set_FactoryDefault = 20;
  if (this->set_factorydefault() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_factorydefault());
  }

  // uint32 Plan_type = 21;
  if (this->plan_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_plan_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RRM_3_AVM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.RRM_3_AVM)
  GOOGLE_DCHECK_NE(&from, this);
  const RRM_3_AVM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RRM_3_AVM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.RRM_3_AVM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.RRM_3_AVM)
    MergeFrom(*source);
  }
}

void RRM_3_AVM::MergeFrom(const RRM_3_AVM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.RRM_3_AVM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.apa_op_sw() != 0) {
    _internal_set_apa_op_sw(from._internal_apa_op_sw());
  }
  if (from.apa_slot_chosen() != 0) {
    _internal_set_apa_slot_chosen(from._internal_apa_slot_chosen());
  }
  if (from.apa_engage_confirm() != 0) {
    _internal_set_apa_engage_confirm(from._internal_apa_engage_confirm());
  }
  if (from.apa_suspend_resume() != 0) {
    _internal_set_apa_suspend_resume(from._internal_apa_suspend_resume());
  }
  if (from.apa_pullout_option() != 0) {
    _internal_set_apa_pullout_option(from._internal_apa_pullout_option());
  }
  if (from.apa_pullout_direction() != 0) {
    _internal_set_apa_pullout_direction(from._internal_apa_pullout_direction());
  }
  if (from.apa_parkin_direction() != 0) {
    _internal_set_apa_parkin_direction(from._internal_apa_parkin_direction());
  }
  if (from.avm_op_view_dvr_sw() != 0) {
    _internal_set_avm_op_view_dvr_sw(from._internal_avm_op_view_dvr_sw());
  }
  if (from.set_steeringwheel() != 0) {
    _internal_set_set_steeringwheel(from._internal_set_steeringwheel());
  }
  if (from.set_language() != 0) {
    _internal_set_set_language(from._internal_set_language());
  }
  if (from.set_radarwarining() != 0) {
    _internal_set_set_radarwarining(from._internal_set_radarwarining());
  }
  if (from.set_turnindication() != 0) {
    _internal_set_set_turnindication(from._internal_set_turnindication());
  }
  if (from.set_bodycolor() != 0) {
    _internal_set_set_bodycolor(from._internal_set_bodycolor());
  }
  if (from.set_autozoom() != 0) {
    _internal_set_set_autozoom(from._internal_set_autozoom());
  }
  if (from.set_pastrigger() != 0) {
    _internal_set_set_pastrigger(from._internal_set_pastrigger());
  }
  if (from.set_transparency() != 0) {
    _internal_set_set_transparency(from._internal_set_transparency());
  }
  if (from.set_autoexit() != 0) {
    _internal_set_set_autoexit(from._internal_set_autoexit());
  }
  if (from.set_licenseplate() != 0) {
    _internal_set_set_licenseplate(from._internal_set_licenseplate());
  }
  if (from.set_guideline() != 0) {
    _internal_set_set_guideline(from._internal_set_guideline());
  }
  if (from.set_factorydefault() != 0) {
    _internal_set_set_factorydefault(from._internal_set_factorydefault());
  }
  if (from.plan_type() != 0) {
    _internal_set_plan_type(from._internal_plan_type());
  }
}

void RRM_3_AVM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.RRM_3_AVM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RRM_3_AVM::CopyFrom(const RRM_3_AVM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.RRM_3_AVM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RRM_3_AVM::IsInitialized() const {
  return true;
}

void RRM_3_AVM::InternalSwap(RRM_3_AVM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RRM_3_AVM, plan_type_)
      + sizeof(RRM_3_AVM::plan_type_)
      - PROTOBUF_FIELD_OFFSET(RRM_3_AVM, apa_op_sw_)>(
          reinterpret_cast<char*>(&apa_op_sw_),
          reinterpret_cast<char*>(&other->apa_op_sw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RRM_3_AVM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HMI_HAVP_CALLBACKS::InitAsDefaultInstance() {
}
class HMI_HAVP_CALLBACKS::_Internal {
 public:
};

HMI_HAVP_CALLBACKS::HMI_HAVP_CALLBACKS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.HMI_HAVP_CALLBACKS)
}
HMI_HAVP_CALLBACKS::HMI_HAVP_CALLBACKS(const HMI_HAVP_CALLBACKS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&havp_engage_confim_, &from.havp_engage_confim_,
    static_cast<size_t>(reinterpret_cast<char*>(&havp_parking_control_deceleration_enum_) -
    reinterpret_cast<char*>(&havp_engage_confim_)) + sizeof(havp_parking_control_deceleration_enum_));
  // @@protoc_insertion_point(copy_constructor:minieye.HMI_HAVP_CALLBACKS)
}

void HMI_HAVP_CALLBACKS::SharedCtor() {
  ::memset(&havp_engage_confim_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&havp_parking_control_deceleration_enum_) -
      reinterpret_cast<char*>(&havp_engage_confim_)) + sizeof(havp_parking_control_deceleration_enum_));
}

HMI_HAVP_CALLBACKS::~HMI_HAVP_CALLBACKS() {
  // @@protoc_insertion_point(destructor:minieye.HMI_HAVP_CALLBACKS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HMI_HAVP_CALLBACKS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HMI_HAVP_CALLBACKS::ArenaDtor(void* object) {
  HMI_HAVP_CALLBACKS* _this = reinterpret_cast< HMI_HAVP_CALLBACKS* >(object);
  (void)_this;
}
void HMI_HAVP_CALLBACKS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HMI_HAVP_CALLBACKS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HMI_HAVP_CALLBACKS& HMI_HAVP_CALLBACKS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HMI_HAVP_CALLBACKS_hmi_5fto_5fsoc_2eproto.base);
  return *internal_default_instance();
}


void HMI_HAVP_CALLBACKS::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.HMI_HAVP_CALLBACKS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&havp_engage_confim_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&havp_parking_control_deceleration_enum_) -
      reinterpret_cast<char*>(&havp_engage_confim_)) + sizeof(havp_parking_control_deceleration_enum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMI_HAVP_CALLBACKS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool HAVP_Engage_Confim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          havp_engage_confim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HAVP_Build_Map_Confirm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          havp_build_map_confirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HAVP_Build_Map_Finished = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          havp_build_map_finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HAVP_Exit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          havp_exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HAVP_Build_Map_Park_Manual = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          havp_build_map_park_manual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HAVP_Start = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          havp_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HAVP_Build_Map_Back_To_Learning = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          havp_build_map_back_to_learning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 HAVP_Parking_Control_Deceleration_Enum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          havp_parking_control_deceleration_enum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HAVP_Parking_Continue_Search_Parking = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          havp_parking_continue_search_parking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HMI_HAVP_CALLBACKS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.HMI_HAVP_CALLBACKS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool HAVP_Engage_Confim = 1;
  if (this->havp_engage_confim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_havp_engage_confim(), target);
  }

  // bool HAVP_Build_Map_Confirm = 2;
  if (this->havp_build_map_confirm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_havp_build_map_confirm(), target);
  }

  // bool HAVP_Build_Map_Finished = 3;
  if (this->havp_build_map_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_havp_build_map_finished(), target);
  }

  // bool HAVP_Exit = 4;
  if (this->havp_exit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_havp_exit(), target);
  }

  // bool HAVP_Build_Map_Park_Manual = 5;
  if (this->havp_build_map_park_manual() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_havp_build_map_park_manual(), target);
  }

  // bool HAVP_Start = 6;
  if (this->havp_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_havp_start(), target);
  }

  // bool HAVP_Build_Map_Back_To_Learning = 7;
  if (this->havp_build_map_back_to_learning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_havp_build_map_back_to_learning(), target);
  }

  // uint32 HAVP_Parking_Control_Deceleration_Enum = 8;
  if (this->havp_parking_control_deceleration_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_havp_parking_control_deceleration_enum(), target);
  }

  // bool HAVP_Parking_Continue_Search_Parking = 9;
  if (this->havp_parking_continue_search_parking() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_havp_parking_continue_search_parking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.HMI_HAVP_CALLBACKS)
  return target;
}

size_t HMI_HAVP_CALLBACKS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.HMI_HAVP_CALLBACKS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool HAVP_Engage_Confim = 1;
  if (this->havp_engage_confim() != 0) {
    total_size += 1 + 1;
  }

  // bool HAVP_Build_Map_Confirm = 2;
  if (this->havp_build_map_confirm() != 0) {
    total_size += 1 + 1;
  }

  // bool HAVP_Build_Map_Finished = 3;
  if (this->havp_build_map_finished() != 0) {
    total_size += 1 + 1;
  }

  // bool HAVP_Exit = 4;
  if (this->havp_exit() != 0) {
    total_size += 1 + 1;
  }

  // bool HAVP_Build_Map_Park_Manual = 5;
  if (this->havp_build_map_park_manual() != 0) {
    total_size += 1 + 1;
  }

  // bool HAVP_Start = 6;
  if (this->havp_start() != 0) {
    total_size += 1 + 1;
  }

  // bool HAVP_Build_Map_Back_To_Learning = 7;
  if (this->havp_build_map_back_to_learning() != 0) {
    total_size += 1 + 1;
  }

  // bool HAVP_Parking_Continue_Search_Parking = 9;
  if (this->havp_parking_continue_search_parking() != 0) {
    total_size += 1 + 1;
  }

  // uint32 HAVP_Parking_Control_Deceleration_Enum = 8;
  if (this->havp_parking_control_deceleration_enum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_havp_parking_control_deceleration_enum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HMI_HAVP_CALLBACKS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.HMI_HAVP_CALLBACKS)
  GOOGLE_DCHECK_NE(&from, this);
  const HMI_HAVP_CALLBACKS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HMI_HAVP_CALLBACKS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.HMI_HAVP_CALLBACKS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.HMI_HAVP_CALLBACKS)
    MergeFrom(*source);
  }
}

void HMI_HAVP_CALLBACKS::MergeFrom(const HMI_HAVP_CALLBACKS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.HMI_HAVP_CALLBACKS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.havp_engage_confim() != 0) {
    _internal_set_havp_engage_confim(from._internal_havp_engage_confim());
  }
  if (from.havp_build_map_confirm() != 0) {
    _internal_set_havp_build_map_confirm(from._internal_havp_build_map_confirm());
  }
  if (from.havp_build_map_finished() != 0) {
    _internal_set_havp_build_map_finished(from._internal_havp_build_map_finished());
  }
  if (from.havp_exit() != 0) {
    _internal_set_havp_exit(from._internal_havp_exit());
  }
  if (from.havp_build_map_park_manual() != 0) {
    _internal_set_havp_build_map_park_manual(from._internal_havp_build_map_park_manual());
  }
  if (from.havp_start() != 0) {
    _internal_set_havp_start(from._internal_havp_start());
  }
  if (from.havp_build_map_back_to_learning() != 0) {
    _internal_set_havp_build_map_back_to_learning(from._internal_havp_build_map_back_to_learning());
  }
  if (from.havp_parking_continue_search_parking() != 0) {
    _internal_set_havp_parking_continue_search_parking(from._internal_havp_parking_continue_search_parking());
  }
  if (from.havp_parking_control_deceleration_enum() != 0) {
    _internal_set_havp_parking_control_deceleration_enum(from._internal_havp_parking_control_deceleration_enum());
  }
}

void HMI_HAVP_CALLBACKS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.HMI_HAVP_CALLBACKS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMI_HAVP_CALLBACKS::CopyFrom(const HMI_HAVP_CALLBACKS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.HMI_HAVP_CALLBACKS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMI_HAVP_CALLBACKS::IsInitialized() const {
  return true;
}

void HMI_HAVP_CALLBACKS::InternalSwap(HMI_HAVP_CALLBACKS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HMI_HAVP_CALLBACKS, havp_parking_control_deceleration_enum_)
      + sizeof(HMI_HAVP_CALLBACKS::havp_parking_control_deceleration_enum_)
      - PROTOBUF_FIELD_OFFSET(HMI_HAVP_CALLBACKS, havp_engage_confim_)>(
          reinterpret_cast<char*>(&havp_engage_confim_),
          reinterpret_cast<char*>(&other->havp_engage_confim_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HMI_HAVP_CALLBACKS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HmiToSoc::InitAsDefaultInstance() {
  ::minieye::_HmiToSoc_default_instance_._instance.get_mutable()->rrm_1_avm_ = const_cast< ::minieye::RRM_1_AVM*>(
      ::minieye::RRM_1_AVM::internal_default_instance());
  ::minieye::_HmiToSoc_default_instance_._instance.get_mutable()->rrm_2_avm_ = const_cast< ::minieye::RRM_2_AVM*>(
      ::minieye::RRM_2_AVM::internal_default_instance());
  ::minieye::_HmiToSoc_default_instance_._instance.get_mutable()->rrm_3_avm_ = const_cast< ::minieye::RRM_3_AVM*>(
      ::minieye::RRM_3_AVM::internal_default_instance());
  ::minieye::_HmiToSoc_default_instance_._instance.get_mutable()->hmi_havp_callbacks_ = const_cast< ::minieye::HMI_HAVP_CALLBACKS*>(
      ::minieye::HMI_HAVP_CALLBACKS::internal_default_instance());
}
class HmiToSoc::_Internal {
 public:
  static const ::minieye::RRM_1_AVM& rrm_1_avm(const HmiToSoc* msg);
  static const ::minieye::RRM_2_AVM& rrm_2_avm(const HmiToSoc* msg);
  static const ::minieye::RRM_3_AVM& rrm_3_avm(const HmiToSoc* msg);
  static const ::minieye::HMI_HAVP_CALLBACKS& hmi_havp_callbacks(const HmiToSoc* msg);
};

const ::minieye::RRM_1_AVM&
HmiToSoc::_Internal::rrm_1_avm(const HmiToSoc* msg) {
  return *msg->rrm_1_avm_;
}
const ::minieye::RRM_2_AVM&
HmiToSoc::_Internal::rrm_2_avm(const HmiToSoc* msg) {
  return *msg->rrm_2_avm_;
}
const ::minieye::RRM_3_AVM&
HmiToSoc::_Internal::rrm_3_avm(const HmiToSoc* msg) {
  return *msg->rrm_3_avm_;
}
const ::minieye::HMI_HAVP_CALLBACKS&
HmiToSoc::_Internal::hmi_havp_callbacks(const HmiToSoc* msg) {
  return *msg->hmi_havp_callbacks_;
}
HmiToSoc::HmiToSoc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.HmiToSoc)
}
HmiToSoc::HmiToSoc(const HmiToSoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rrm_1_avm()) {
    rrm_1_avm_ = new ::minieye::RRM_1_AVM(*from.rrm_1_avm_);
  } else {
    rrm_1_avm_ = nullptr;
  }
  if (from._internal_has_rrm_2_avm()) {
    rrm_2_avm_ = new ::minieye::RRM_2_AVM(*from.rrm_2_avm_);
  } else {
    rrm_2_avm_ = nullptr;
  }
  if (from._internal_has_rrm_3_avm()) {
    rrm_3_avm_ = new ::minieye::RRM_3_AVM(*from.rrm_3_avm_);
  } else {
    rrm_3_avm_ = nullptr;
  }
  if (from._internal_has_hmi_havp_callbacks()) {
    hmi_havp_callbacks_ = new ::minieye::HMI_HAVP_CALLBACKS(*from.hmi_havp_callbacks_);
  } else {
    hmi_havp_callbacks_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.HmiToSoc)
}

void HmiToSoc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HmiToSoc_hmi_5fto_5fsoc_2eproto.base);
  ::memset(&rrm_1_avm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&rrm_1_avm_)) + sizeof(tick_));
}

HmiToSoc::~HmiToSoc() {
  // @@protoc_insertion_point(destructor:minieye.HmiToSoc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HmiToSoc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rrm_1_avm_;
  if (this != internal_default_instance()) delete rrm_2_avm_;
  if (this != internal_default_instance()) delete rrm_3_avm_;
  if (this != internal_default_instance()) delete hmi_havp_callbacks_;
}

void HmiToSoc::ArenaDtor(void* object) {
  HmiToSoc* _this = reinterpret_cast< HmiToSoc* >(object);
  (void)_this;
}
void HmiToSoc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HmiToSoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HmiToSoc& HmiToSoc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HmiToSoc_hmi_5fto_5fsoc_2eproto.base);
  return *internal_default_instance();
}


void HmiToSoc::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.HmiToSoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rrm_1_avm_ != nullptr) {
    delete rrm_1_avm_;
  }
  rrm_1_avm_ = nullptr;
  if (GetArena() == nullptr && rrm_2_avm_ != nullptr) {
    delete rrm_2_avm_;
  }
  rrm_2_avm_ = nullptr;
  if (GetArena() == nullptr && rrm_3_avm_ != nullptr) {
    delete rrm_3_avm_;
  }
  rrm_3_avm_ = nullptr;
  if (GetArena() == nullptr && hmi_havp_callbacks_ != nullptr) {
    delete hmi_havp_callbacks_;
  }
  hmi_havp_callbacks_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HmiToSoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.RRM_1_AVM rrm_1_avm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rrm_1_avm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.RRM_2_AVM rrm_2_avm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rrm_2_avm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.RRM_3_AVM rrm_3_avm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rrm_3_avm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.HMI_HAVP_CALLBACKS hmi_havp_callbacks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hmi_havp_callbacks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HmiToSoc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.HmiToSoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.RRM_1_AVM rrm_1_avm = 1;
  if (this->has_rrm_1_avm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rrm_1_avm(this), target, stream);
  }

  // .minieye.RRM_2_AVM rrm_2_avm = 2;
  if (this->has_rrm_2_avm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rrm_2_avm(this), target, stream);
  }

  // .minieye.RRM_3_AVM rrm_3_avm = 3;
  if (this->has_rrm_3_avm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rrm_3_avm(this), target, stream);
  }

  // .minieye.HMI_HAVP_CALLBACKS hmi_havp_callbacks = 4;
  if (this->has_hmi_havp_callbacks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hmi_havp_callbacks(this), target, stream);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // uint64 tick = 6;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.HmiToSoc)
  return target;
}

size_t HmiToSoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.HmiToSoc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.RRM_1_AVM rrm_1_avm = 1;
  if (this->has_rrm_1_avm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rrm_1_avm_);
  }

  // .minieye.RRM_2_AVM rrm_2_avm = 2;
  if (this->has_rrm_2_avm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rrm_2_avm_);
  }

  // .minieye.RRM_3_AVM rrm_3_avm = 3;
  if (this->has_rrm_3_avm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rrm_3_avm_);
  }

  // .minieye.HMI_HAVP_CALLBACKS hmi_havp_callbacks = 4;
  if (this->has_hmi_havp_callbacks()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hmi_havp_callbacks_);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 6;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HmiToSoc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.HmiToSoc)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiToSoc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HmiToSoc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.HmiToSoc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.HmiToSoc)
    MergeFrom(*source);
  }
}

void HmiToSoc::MergeFrom(const HmiToSoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.HmiToSoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rrm_1_avm()) {
    _internal_mutable_rrm_1_avm()->::minieye::RRM_1_AVM::MergeFrom(from._internal_rrm_1_avm());
  }
  if (from.has_rrm_2_avm()) {
    _internal_mutable_rrm_2_avm()->::minieye::RRM_2_AVM::MergeFrom(from._internal_rrm_2_avm());
  }
  if (from.has_rrm_3_avm()) {
    _internal_mutable_rrm_3_avm()->::minieye::RRM_3_AVM::MergeFrom(from._internal_rrm_3_avm());
  }
  if (from.has_hmi_havp_callbacks()) {
    _internal_mutable_hmi_havp_callbacks()->::minieye::HMI_HAVP_CALLBACKS::MergeFrom(from._internal_hmi_havp_callbacks());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void HmiToSoc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.HmiToSoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiToSoc::CopyFrom(const HmiToSoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.HmiToSoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiToSoc::IsInitialized() const {
  return true;
}

void HmiToSoc::InternalSwap(HmiToSoc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HmiToSoc, tick_)
      + sizeof(HmiToSoc::tick_)
      - PROTOBUF_FIELD_OFFSET(HmiToSoc, rrm_1_avm_)>(
          reinterpret_cast<char*>(&rrm_1_avm_),
          reinterpret_cast<char*>(&other->rrm_1_avm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HmiToSoc::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::RRM_1_AVM* Arena::CreateMaybeMessage< ::minieye::RRM_1_AVM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::RRM_1_AVM >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::RRM_2_AVM* Arena::CreateMaybeMessage< ::minieye::RRM_2_AVM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::RRM_2_AVM >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::RRM_3_AVM* Arena::CreateMaybeMessage< ::minieye::RRM_3_AVM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::RRM_3_AVM >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::HMI_HAVP_CALLBACKS* Arena::CreateMaybeMessage< ::minieye::HMI_HAVP_CALLBACKS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::HMI_HAVP_CALLBACKS >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::HmiToSoc* Arena::CreateMaybeMessage< ::minieye::HmiToSoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::HmiToSoc >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
