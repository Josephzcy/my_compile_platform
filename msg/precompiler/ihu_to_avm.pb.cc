// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ihu_to_avm.proto

#include "ihu_to_avm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace minieye {
class IHUToAVMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IHUToAVM> _instance;
} _IHUToAVM_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_IHUToAVM_ihu_5fto_5favm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_IHUToAVM_default_instance_;
    new (ptr) ::minieye::IHUToAVM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::IHUToAVM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IHUToAVM_ihu_5fto_5favm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IHUToAVM_ihu_5fto_5favm_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ihu_5fto_5favm_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ihu_5fto_5favm_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ihu_5fto_5favm_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ihu_5fto_5favm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, btnpress_inputvaluex_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, btnpress_inputvaluey_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, touch_event_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, view_mode_switch_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, calibrationreq_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, avmtransparenthoodswitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, avmtrailswitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, avm_op_sw_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, radarwariningsw_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, steeringwheelsw_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, turnindicationsw_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, autozoomsw_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, bodycolor_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, set_language_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, licenseplatesw_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, guidelinesw_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, pastrigger_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, set_transparency_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, autoexitsw_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, factorydefault_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, apa_systemsts_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, licenseplate1_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, licenseplate2_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, licenseplate3_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, licenseplate4_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, licenseplate5_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, licenseplate6_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, licenseplate7_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, licenseplate8_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::IHUToAVM, timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::IHUToAVM)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_IHUToAVM_default_instance_),
};

const char descriptor_table_protodef_ihu_5fto_5favm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020ihu_to_avm.proto\022\007minieye\"\332\005\n\010IHUToAVM"
  "\022\034\n\024BtnPress_InputValueX\030\001 \001(\r\022\034\n\024BtnPre"
  "ss_InputValueY\030\002 \001(\r\022\023\n\013Touch_Event\030\003 \001("
  "\r\022\030\n\020View_Mode_Switch\030\004 \001(\r\022\026\n\016Calibrati"
  "onReq\030\005 \001(\r\022 \n\030AVMTransparentHoodSwitch\030"
  "\006 \001(\r\022\026\n\016AVMTrailSwitch\030\007 \001(\r\022\021\n\tAVM_OP_"
  "SW\030\010 \001(\r\022\027\n\017RadarWariningSW\030\t \001(\r\022\027\n\017Ste"
  "eringWheelSW\030\n \001(\r\022\030\n\020TurnIndicationSW\030\013"
  " \001(\r\022\022\n\nAutoZoomSW\030\014 \001(\r\022\021\n\tBodyColor\030\r "
  "\001(\r\022\024\n\014Set_Language\030\016 \001(\r\022\026\n\016LicensePlat"
  "eSW\030\017 \001(\r\022\023\n\013GuideLineSW\030\020 \001(\r\022\022\n\nPASTri"
  "gger\030\021 \001(\r\022\030\n\020Set_Transparency\030\022 \001(\r\022\022\n\n"
  "AutoExitSW\030\023 \001(\r\022\026\n\016FactoryDefault\030\024 \001(\r"
  "\022\025\n\rAPA_SystemSts\030\025 \001(\r\022\025\n\rLicensePlate1"
  "\030\026 \001(\r\022\025\n\rLicensePlate2\030\027 \001(\r\022\025\n\rLicense"
  "Plate3\030\030 \001(\r\022\025\n\rLicensePlate4\030\031 \001(\r\022\025\n\rL"
  "icensePlate5\030\032 \001(\r\022\025\n\rLicensePlate6\030\033 \001("
  "\r\022\025\n\rLicensePlate7\030\034 \001(\r\022\025\n\rLicensePlate"
  "8\030\035 \001(\r\022\014\n\004tick\030\036 \001(\004\022\021\n\ttimestamp\030\037 \001(\004"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ihu_5fto_5favm_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ihu_5fto_5favm_2eproto_sccs[1] = {
  &scc_info_IHUToAVM_ihu_5fto_5favm_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ihu_5fto_5favm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ihu_5fto_5favm_2eproto = {
  false, false, descriptor_table_protodef_ihu_5fto_5favm_2eproto, "ihu_to_avm.proto", 768,
  &descriptor_table_ihu_5fto_5favm_2eproto_once, descriptor_table_ihu_5fto_5favm_2eproto_sccs, descriptor_table_ihu_5fto_5favm_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_ihu_5fto_5favm_2eproto::offsets,
  file_level_metadata_ihu_5fto_5favm_2eproto, 1, file_level_enum_descriptors_ihu_5fto_5favm_2eproto, file_level_service_descriptors_ihu_5fto_5favm_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ihu_5fto_5favm_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ihu_5fto_5favm_2eproto)), true);
namespace minieye {

// ===================================================================

void IHUToAVM::InitAsDefaultInstance() {
}
class IHUToAVM::_Internal {
 public:
};

IHUToAVM::IHUToAVM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.IHUToAVM)
}
IHUToAVM::IHUToAVM(const IHUToAVM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&btnpress_inputvaluex_, &from.btnpress_inputvaluex_,
    static_cast<size_t>(reinterpret_cast<char*>(&licenseplate8_) -
    reinterpret_cast<char*>(&btnpress_inputvaluex_)) + sizeof(licenseplate8_));
  // @@protoc_insertion_point(copy_constructor:minieye.IHUToAVM)
}

void IHUToAVM::SharedCtor() {
  ::memset(&btnpress_inputvaluex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&licenseplate8_) -
      reinterpret_cast<char*>(&btnpress_inputvaluex_)) + sizeof(licenseplate8_));
}

IHUToAVM::~IHUToAVM() {
  // @@protoc_insertion_point(destructor:minieye.IHUToAVM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IHUToAVM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IHUToAVM::ArenaDtor(void* object) {
  IHUToAVM* _this = reinterpret_cast< IHUToAVM* >(object);
  (void)_this;
}
void IHUToAVM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IHUToAVM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IHUToAVM& IHUToAVM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IHUToAVM_ihu_5fto_5favm_2eproto.base);
  return *internal_default_instance();
}


void IHUToAVM::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.IHUToAVM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&btnpress_inputvaluex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&licenseplate8_) -
      reinterpret_cast<char*>(&btnpress_inputvaluex_)) + sizeof(licenseplate8_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IHUToAVM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 BtnPress_InputValueX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          btnpress_inputvaluex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BtnPress_InputValueY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          btnpress_inputvaluey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Touch_Event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          touch_event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 View_Mode_Switch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          view_mode_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 CalibrationReq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          calibrationreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AVMTransparentHoodSwitch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          avmtransparenthoodswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AVMTrailSwitch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          avmtrailswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AVM_OP_SW = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          avm_op_sw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 RadarWariningSW = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          radarwariningsw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SteeringWheelSW = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          steeringwheelsw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 TurnIndicationSW = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          turnindicationsw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AutoZoomSW = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          autozoomsw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BodyColor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          bodycolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_Language = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          set_language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LicensePlateSW = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          licenseplatesw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 GuideLineSW = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          guidelinesw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 PASTrigger = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          pastrigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Set_Transparency = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          set_transparency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AutoExitSW = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          autoexitsw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 FactoryDefault = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          factorydefault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 APA_SystemSts = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          apa_systemsts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LicensePlate1 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          licenseplate1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LicensePlate2 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          licenseplate2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LicensePlate3 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          licenseplate3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LicensePlate4 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          licenseplate4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LicensePlate5 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          licenseplate5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LicensePlate6 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          licenseplate6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LicensePlate7 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          licenseplate7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LicensePlate8 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          licenseplate8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IHUToAVM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.IHUToAVM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 BtnPress_InputValueX = 1;
  if (this->btnpress_inputvaluex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_btnpress_inputvaluex(), target);
  }

  // uint32 BtnPress_InputValueY = 2;
  if (this->btnpress_inputvaluey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_btnpress_inputvaluey(), target);
  }

  // uint32 Touch_Event = 3;
  if (this->touch_event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_touch_event(), target);
  }

  // uint32 View_Mode_Switch = 4;
  if (this->view_mode_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_view_mode_switch(), target);
  }

  // uint32 CalibrationReq = 5;
  if (this->calibrationreq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_calibrationreq(), target);
  }

  // uint32 AVMTransparentHoodSwitch = 6;
  if (this->avmtransparenthoodswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_avmtransparenthoodswitch(), target);
  }

  // uint32 AVMTrailSwitch = 7;
  if (this->avmtrailswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_avmtrailswitch(), target);
  }

  // uint32 AVM_OP_SW = 8;
  if (this->avm_op_sw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_avm_op_sw(), target);
  }

  // uint32 RadarWariningSW = 9;
  if (this->radarwariningsw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_radarwariningsw(), target);
  }

  // uint32 SteeringWheelSW = 10;
  if (this->steeringwheelsw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_steeringwheelsw(), target);
  }

  // uint32 TurnIndicationSW = 11;
  if (this->turnindicationsw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_turnindicationsw(), target);
  }

  // uint32 AutoZoomSW = 12;
  if (this->autozoomsw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_autozoomsw(), target);
  }

  // uint32 BodyColor = 13;
  if (this->bodycolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_bodycolor(), target);
  }

  // uint32 Set_Language = 14;
  if (this->set_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_set_language(), target);
  }

  // uint32 LicensePlateSW = 15;
  if (this->licenseplatesw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_licenseplatesw(), target);
  }

  // uint32 GuideLineSW = 16;
  if (this->guidelinesw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_guidelinesw(), target);
  }

  // uint32 PASTrigger = 17;
  if (this->pastrigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_pastrigger(), target);
  }

  // uint32 Set_Transparency = 18;
  if (this->set_transparency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_set_transparency(), target);
  }

  // uint32 AutoExitSW = 19;
  if (this->autoexitsw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_autoexitsw(), target);
  }

  // uint32 FactoryDefault = 20;
  if (this->factorydefault() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_factorydefault(), target);
  }

  // uint32 APA_SystemSts = 21;
  if (this->apa_systemsts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_apa_systemsts(), target);
  }

  // uint32 LicensePlate1 = 22;
  if (this->licenseplate1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_licenseplate1(), target);
  }

  // uint32 LicensePlate2 = 23;
  if (this->licenseplate2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_licenseplate2(), target);
  }

  // uint32 LicensePlate3 = 24;
  if (this->licenseplate3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_licenseplate3(), target);
  }

  // uint32 LicensePlate4 = 25;
  if (this->licenseplate4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_licenseplate4(), target);
  }

  // uint32 LicensePlate5 = 26;
  if (this->licenseplate5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_licenseplate5(), target);
  }

  // uint32 LicensePlate6 = 27;
  if (this->licenseplate6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_licenseplate6(), target);
  }

  // uint32 LicensePlate7 = 28;
  if (this->licenseplate7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_licenseplate7(), target);
  }

  // uint32 LicensePlate8 = 29;
  if (this->licenseplate8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_licenseplate8(), target);
  }

  // uint64 tick = 30;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_tick(), target);
  }

  // uint64 timestamp = 31;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(31, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.IHUToAVM)
  return target;
}

size_t IHUToAVM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.IHUToAVM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 BtnPress_InputValueX = 1;
  if (this->btnpress_inputvaluex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_btnpress_inputvaluex());
  }

  // uint32 BtnPress_InputValueY = 2;
  if (this->btnpress_inputvaluey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_btnpress_inputvaluey());
  }

  // uint32 Touch_Event = 3;
  if (this->touch_event() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_touch_event());
  }

  // uint32 View_Mode_Switch = 4;
  if (this->view_mode_switch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_view_mode_switch());
  }

  // uint32 CalibrationReq = 5;
  if (this->calibrationreq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_calibrationreq());
  }

  // uint32 AVMTransparentHoodSwitch = 6;
  if (this->avmtransparenthoodswitch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avmtransparenthoodswitch());
  }

  // uint32 AVMTrailSwitch = 7;
  if (this->avmtrailswitch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avmtrailswitch());
  }

  // uint32 AVM_OP_SW = 8;
  if (this->avm_op_sw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avm_op_sw());
  }

  // uint32 RadarWariningSW = 9;
  if (this->radarwariningsw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_radarwariningsw());
  }

  // uint32 SteeringWheelSW = 10;
  if (this->steeringwheelsw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_steeringwheelsw());
  }

  // uint32 TurnIndicationSW = 11;
  if (this->turnindicationsw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_turnindicationsw());
  }

  // uint32 AutoZoomSW = 12;
  if (this->autozoomsw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_autozoomsw());
  }

  // uint32 BodyColor = 13;
  if (this->bodycolor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bodycolor());
  }

  // uint32 Set_Language = 14;
  if (this->set_language() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_language());
  }

  // uint32 LicensePlateSW = 15;
  if (this->licenseplatesw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplatesw());
  }

  // uint32 GuideLineSW = 16;
  if (this->guidelinesw() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_guidelinesw());
  }

  // uint32 PASTrigger = 17;
  if (this->pastrigger() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pastrigger());
  }

  // uint32 Set_Transparency = 18;
  if (this->set_transparency() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_set_transparency());
  }

  // uint32 AutoExitSW = 19;
  if (this->autoexitsw() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_autoexitsw());
  }

  // uint32 FactoryDefault = 20;
  if (this->factorydefault() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_factorydefault());
  }

  // uint32 APA_SystemSts = 21;
  if (this->apa_systemsts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_apa_systemsts());
  }

  // uint32 LicensePlate1 = 22;
  if (this->licenseplate1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate1());
  }

  // uint32 LicensePlate2 = 23;
  if (this->licenseplate2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate2());
  }

  // uint32 LicensePlate3 = 24;
  if (this->licenseplate3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate3());
  }

  // uint32 LicensePlate4 = 25;
  if (this->licenseplate4() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate4());
  }

  // uint32 LicensePlate5 = 26;
  if (this->licenseplate5() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate5());
  }

  // uint32 LicensePlate6 = 27;
  if (this->licenseplate6() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate6());
  }

  // uint32 LicensePlate7 = 28;
  if (this->licenseplate7() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate7());
  }

  // uint64 tick = 30;
  if (this->tick() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 timestamp = 31;
  if (this->timestamp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint32 LicensePlate8 = 29;
  if (this->licenseplate8() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_licenseplate8());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IHUToAVM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.IHUToAVM)
  GOOGLE_DCHECK_NE(&from, this);
  const IHUToAVM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IHUToAVM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.IHUToAVM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.IHUToAVM)
    MergeFrom(*source);
  }
}

void IHUToAVM::MergeFrom(const IHUToAVM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.IHUToAVM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.btnpress_inputvaluex() != 0) {
    _internal_set_btnpress_inputvaluex(from._internal_btnpress_inputvaluex());
  }
  if (from.btnpress_inputvaluey() != 0) {
    _internal_set_btnpress_inputvaluey(from._internal_btnpress_inputvaluey());
  }
  if (from.touch_event() != 0) {
    _internal_set_touch_event(from._internal_touch_event());
  }
  if (from.view_mode_switch() != 0) {
    _internal_set_view_mode_switch(from._internal_view_mode_switch());
  }
  if (from.calibrationreq() != 0) {
    _internal_set_calibrationreq(from._internal_calibrationreq());
  }
  if (from.avmtransparenthoodswitch() != 0) {
    _internal_set_avmtransparenthoodswitch(from._internal_avmtransparenthoodswitch());
  }
  if (from.avmtrailswitch() != 0) {
    _internal_set_avmtrailswitch(from._internal_avmtrailswitch());
  }
  if (from.avm_op_sw() != 0) {
    _internal_set_avm_op_sw(from._internal_avm_op_sw());
  }
  if (from.radarwariningsw() != 0) {
    _internal_set_radarwariningsw(from._internal_radarwariningsw());
  }
  if (from.steeringwheelsw() != 0) {
    _internal_set_steeringwheelsw(from._internal_steeringwheelsw());
  }
  if (from.turnindicationsw() != 0) {
    _internal_set_turnindicationsw(from._internal_turnindicationsw());
  }
  if (from.autozoomsw() != 0) {
    _internal_set_autozoomsw(from._internal_autozoomsw());
  }
  if (from.bodycolor() != 0) {
    _internal_set_bodycolor(from._internal_bodycolor());
  }
  if (from.set_language() != 0) {
    _internal_set_set_language(from._internal_set_language());
  }
  if (from.licenseplatesw() != 0) {
    _internal_set_licenseplatesw(from._internal_licenseplatesw());
  }
  if (from.guidelinesw() != 0) {
    _internal_set_guidelinesw(from._internal_guidelinesw());
  }
  if (from.pastrigger() != 0) {
    _internal_set_pastrigger(from._internal_pastrigger());
  }
  if (from.set_transparency() != 0) {
    _internal_set_set_transparency(from._internal_set_transparency());
  }
  if (from.autoexitsw() != 0) {
    _internal_set_autoexitsw(from._internal_autoexitsw());
  }
  if (from.factorydefault() != 0) {
    _internal_set_factorydefault(from._internal_factorydefault());
  }
  if (from.apa_systemsts() != 0) {
    _internal_set_apa_systemsts(from._internal_apa_systemsts());
  }
  if (from.licenseplate1() != 0) {
    _internal_set_licenseplate1(from._internal_licenseplate1());
  }
  if (from.licenseplate2() != 0) {
    _internal_set_licenseplate2(from._internal_licenseplate2());
  }
  if (from.licenseplate3() != 0) {
    _internal_set_licenseplate3(from._internal_licenseplate3());
  }
  if (from.licenseplate4() != 0) {
    _internal_set_licenseplate4(from._internal_licenseplate4());
  }
  if (from.licenseplate5() != 0) {
    _internal_set_licenseplate5(from._internal_licenseplate5());
  }
  if (from.licenseplate6() != 0) {
    _internal_set_licenseplate6(from._internal_licenseplate6());
  }
  if (from.licenseplate7() != 0) {
    _internal_set_licenseplate7(from._internal_licenseplate7());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.licenseplate8() != 0) {
    _internal_set_licenseplate8(from._internal_licenseplate8());
  }
}

void IHUToAVM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.IHUToAVM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IHUToAVM::CopyFrom(const IHUToAVM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.IHUToAVM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IHUToAVM::IsInitialized() const {
  return true;
}

void IHUToAVM::InternalSwap(IHUToAVM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IHUToAVM, licenseplate8_)
      + sizeof(IHUToAVM::licenseplate8_)
      - PROTOBUF_FIELD_OFFSET(IHUToAVM, btnpress_inputvaluex_)>(
          reinterpret_cast<char*>(&btnpress_inputvaluex_),
          reinterpret_cast<char*>(&other->btnpress_inputvaluex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IHUToAVM::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::IHUToAVM* Arena::CreateMaybeMessage< ::minieye::IHUToAVM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::IHUToAVM >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
