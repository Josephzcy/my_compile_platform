// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fail_detection.proto

#include "fail_detection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_fail_5fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageFailStatus_fail_5fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Polygon_geometry_2eproto;
namespace minieye {
class ImageFailStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageFailStatus> _instance;
} _ImageFailStatus_default_instance_;
class ImageFailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageFail> _instance;
} _ImageFail_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_ImageFail_fail_5fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_ImageFail_default_instance_;
    new (ptr) ::minieye::ImageFail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::ImageFail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageFail_fail_5fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageFail_fail_5fdetection_2eproto}, {
      &scc_info_ImageFailStatus_fail_5fdetection_2eproto.base,}};

static void InitDefaultsscc_info_ImageFailStatus_fail_5fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_ImageFailStatus_default_instance_;
    new (ptr) ::minieye::ImageFailStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::ImageFailStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageFailStatus_fail_5fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageFailStatus_fail_5fdetection_2eproto}, {
      &scc_info_Polygon_geometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fail_5fdetection_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_fail_5fdetection_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fail_5fdetection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fail_5fdetection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::ImageFailStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::ImageFailStatus, fail_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImageFailStatus, score_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImageFailStatus, level_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImageFailStatus, regions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::ImageFail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::ImageFail, cam_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImageFail, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImageFail, fail_status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::ImageFailStatus)},
  { 9, -1, sizeof(::minieye::ImageFail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_ImageFailStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_ImageFail_default_instance_),
};

const char descriptor_table_protodef_fail_5fdetection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024fail_detection.proto\022\007minieye\032\016geometr"
  "y.proto\"\237\002\n\017ImageFailStatus\022\021\n\tfail_type"
  "\030\001 \001(\005\022\r\n\005score\030\002 \001(\002\022\r\n\005level\030\003 \001(\005\022+\n\007"
  "regions\030\004 \003(\0132\032.perception.common.Polygo"
  "n\"\\\n\014ImgFailTypes\022\016\n\nIMG_NORMAL\020\000\022\014\n\010IMG"
  "_BLUR\020\001\022\017\n\013IMG_SHELTER\020\002\022\016\n\nIMG_FREEZE\020\004"
  "\022\r\n\tIMG_GLARE\020\010\"P\n\014ImgFailLevel\022\r\n\tFAIL_"
  "NONE\020\000\022\r\n\tFAIL_MILD\020\001\022\021\n\rFAIL_MODERATE\020\002"
  "\022\017\n\013FAIL_SEVERE\020\003\"\\\n\tImageFail\022\016\n\006cam_id"
  "\030\001 \001(\005\022\020\n\010frame_id\030\002 \001(\005\022-\n\013fail_status\030"
  "\003 \003(\0132\030.minieye.ImageFailStatusb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fail_5fdetection_2eproto_deps[1] = {
  &::descriptor_table_geometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fail_5fdetection_2eproto_sccs[2] = {
  &scc_info_ImageFail_fail_5fdetection_2eproto.base,
  &scc_info_ImageFailStatus_fail_5fdetection_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fail_5fdetection_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fail_5fdetection_2eproto = {
  false, false, descriptor_table_protodef_fail_5fdetection_2eproto, "fail_detection.proto", 439,
  &descriptor_table_fail_5fdetection_2eproto_once, descriptor_table_fail_5fdetection_2eproto_sccs, descriptor_table_fail_5fdetection_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_fail_5fdetection_2eproto::offsets,
  file_level_metadata_fail_5fdetection_2eproto, 2, file_level_enum_descriptors_fail_5fdetection_2eproto, file_level_service_descriptors_fail_5fdetection_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fail_5fdetection_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fail_5fdetection_2eproto)), true);
namespace minieye {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFailStatus_ImgFailTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fail_5fdetection_2eproto);
  return file_level_enum_descriptors_fail_5fdetection_2eproto[0];
}
bool ImageFailStatus_ImgFailTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::IMG_NORMAL;
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::IMG_BLUR;
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::IMG_SHELTER;
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::IMG_FREEZE;
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::IMG_GLARE;
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::ImgFailTypes_MIN;
constexpr ImageFailStatus_ImgFailTypes ImageFailStatus::ImgFailTypes_MAX;
constexpr int ImageFailStatus::ImgFailTypes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFailStatus_ImgFailLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fail_5fdetection_2eproto);
  return file_level_enum_descriptors_fail_5fdetection_2eproto[1];
}
bool ImageFailStatus_ImgFailLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus::FAIL_NONE;
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus::FAIL_MILD;
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus::FAIL_MODERATE;
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus::FAIL_SEVERE;
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus::ImgFailLevel_MIN;
constexpr ImageFailStatus_ImgFailLevel ImageFailStatus::ImgFailLevel_MAX;
constexpr int ImageFailStatus::ImgFailLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ImageFailStatus::InitAsDefaultInstance() {
}
class ImageFailStatus::_Internal {
 public:
};

void ImageFailStatus::clear_regions() {
  regions_.Clear();
}
ImageFailStatus::ImageFailStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  regions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.ImageFailStatus)
}
ImageFailStatus::ImageFailStatus(const ImageFailStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      regions_(from.regions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fail_type_, &from.fail_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&fail_type_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:minieye.ImageFailStatus)
}

void ImageFailStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageFailStatus_fail_5fdetection_2eproto.base);
  ::memset(&fail_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&fail_type_)) + sizeof(level_));
}

ImageFailStatus::~ImageFailStatus() {
  // @@protoc_insertion_point(destructor:minieye.ImageFailStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageFailStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ImageFailStatus::ArenaDtor(void* object) {
  ImageFailStatus* _this = reinterpret_cast< ImageFailStatus* >(object);
  (void)_this;
}
void ImageFailStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageFailStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageFailStatus& ImageFailStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageFailStatus_fail_5fdetection_2eproto.base);
  return *internal_default_instance();
}


void ImageFailStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.ImageFailStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regions_.Clear();
  ::memset(&fail_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&fail_type_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageFailStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fail_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fail_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.common.Polygon regions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageFailStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.ImageFailStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fail_type = 1;
  if (this->fail_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fail_type(), target);
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  // int32 level = 3;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // repeated .perception.common.Polygon regions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_regions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_regions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.ImageFailStatus)
  return target;
}

size_t ImageFailStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.ImageFailStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.Polygon regions = 4;
  total_size += 1UL * this->_internal_regions_size();
  for (const auto& msg : this->regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 fail_type = 1;
  if (this->fail_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fail_type());
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageFailStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.ImageFailStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageFailStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageFailStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.ImageFailStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.ImageFailStatus)
    MergeFrom(*source);
  }
}

void ImageFailStatus::MergeFrom(const ImageFailStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.ImageFailStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
  if (from.fail_type() != 0) {
    _internal_set_fail_type(from._internal_fail_type());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void ImageFailStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.ImageFailStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFailStatus::CopyFrom(const ImageFailStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.ImageFailStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFailStatus::IsInitialized() const {
  return true;
}

void ImageFailStatus::InternalSwap(ImageFailStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  regions_.InternalSwap(&other->regions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageFailStatus, level_)
      + sizeof(ImageFailStatus::level_)
      - PROTOBUF_FIELD_OFFSET(ImageFailStatus, fail_type_)>(
          reinterpret_cast<char*>(&fail_type_),
          reinterpret_cast<char*>(&other->fail_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageFailStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageFail::InitAsDefaultInstance() {
}
class ImageFail::_Internal {
 public:
};

ImageFail::ImageFail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fail_status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.ImageFail)
}
ImageFail::ImageFail(const ImageFail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fail_status_(from.fail_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cam_id_, &from.cam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
    reinterpret_cast<char*>(&cam_id_)) + sizeof(frame_id_));
  // @@protoc_insertion_point(copy_constructor:minieye.ImageFail)
}

void ImageFail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageFail_fail_5fdetection_2eproto.base);
  ::memset(&cam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&cam_id_)) + sizeof(frame_id_));
}

ImageFail::~ImageFail() {
  // @@protoc_insertion_point(destructor:minieye.ImageFail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageFail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ImageFail::ArenaDtor(void* object) {
  ImageFail* _this = reinterpret_cast< ImageFail* >(object);
  (void)_this;
}
void ImageFail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageFail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageFail& ImageFail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageFail_fail_5fdetection_2eproto.base);
  return *internal_default_instance();
}


void ImageFail::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.ImageFail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fail_status_.Clear();
  ::memset(&cam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&cam_id_)) + sizeof(frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageFail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minieye.ImageFailStatus fail_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fail_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageFail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.ImageFail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cam_id = 1;
  if (this->cam_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cam_id(), target);
  }

  // int32 frame_id = 2;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_frame_id(), target);
  }

  // repeated .minieye.ImageFailStatus fail_status = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fail_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fail_status(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.ImageFail)
  return target;
}

size_t ImageFail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.ImageFail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.ImageFailStatus fail_status = 3;
  total_size += 1UL * this->_internal_fail_status_size();
  for (const auto& msg : this->fail_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 cam_id = 1;
  if (this->cam_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cam_id());
  }

  // int32 frame_id = 2;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageFail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.ImageFail)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageFail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageFail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.ImageFail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.ImageFail)
    MergeFrom(*source);
  }
}

void ImageFail::MergeFrom(const ImageFail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.ImageFail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fail_status_.MergeFrom(from.fail_status_);
  if (from.cam_id() != 0) {
    _internal_set_cam_id(from._internal_cam_id());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void ImageFail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.ImageFail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFail::CopyFrom(const ImageFail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.ImageFail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFail::IsInitialized() const {
  return true;
}

void ImageFail::InternalSwap(ImageFail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fail_status_.InternalSwap(&other->fail_status_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageFail, frame_id_)
      + sizeof(ImageFail::frame_id_)
      - PROTOBUF_FIELD_OFFSET(ImageFail, cam_id_)>(
          reinterpret_cast<char*>(&cam_id_),
          reinterpret_cast<char*>(&other->cam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageFail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::ImageFailStatus* Arena::CreateMaybeMessage< ::minieye::ImageFailStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::ImageFailStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::ImageFail* Arena::CreateMaybeMessage< ::minieye::ImageFail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::ImageFail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
