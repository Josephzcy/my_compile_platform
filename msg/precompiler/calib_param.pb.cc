// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calib_param.proto

#include "calib_param.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_calib_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CalibReqDetail_calib_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_calib_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CalibRspDetail_calib_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraParam_camera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_calib_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleParam_calib_5fparam_2eproto;
namespace minieye {
class CalibParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalibParam> _instance;
} _CalibParam_default_instance_;
class HomographyMatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HomographyMatrix> _instance;
} _HomographyMatrix_default_instance_;
class PreCheckReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreCheckReq> _instance;
} _PreCheckReq_default_instance_;
class PreCheckRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreCheckRsp> _instance;
} _PreCheckRsp_default_instance_;
class VehicleParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleParam> _instance;
} _VehicleParam_default_instance_;
class CalibReqDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalibReqDetail> _instance;
} _CalibReqDetail_default_instance_;
class CalibReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalibReq> _instance;
} _CalibReq_default_instance_;
class CalibRspDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalibRspDetail> _instance;
} _CalibRspDetail_default_instance_;
class CalibRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalibRsp> _instance;
} _CalibRsp_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_CalibParam_calib_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_CalibParam_default_instance_;
    new (ptr) ::minieye::CalibParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::CalibParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalibParam_calib_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CalibParam_calib_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_CalibReq_calib_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_CalibReq_default_instance_;
    new (ptr) ::minieye::CalibReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::CalibReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CalibReq_calib_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CalibReq_calib_5fparam_2eproto}, {
      &scc_info_CalibReqDetail_calib_5fparam_2eproto.base,
      &scc_info_VehicleParam_calib_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_CalibReqDetail_calib_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_CalibReqDetail_default_instance_;
    new (ptr) ::minieye::CalibReqDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::CalibReqDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CalibReqDetail_calib_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CalibReqDetail_calib_5fparam_2eproto}, {
      &scc_info_CameraParam_camera_2eproto.base,}};

static void InitDefaultsscc_info_CalibRsp_calib_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_CalibRsp_default_instance_;
    new (ptr) ::minieye::CalibRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::CalibRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CalibRsp_calib_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CalibRsp_calib_5fparam_2eproto}, {
      &scc_info_CalibRspDetail_calib_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_CalibRspDetail_calib_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_CalibRspDetail_default_instance_;
    new (ptr) ::minieye::CalibRspDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::CalibRspDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CalibRspDetail_calib_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CalibRspDetail_calib_5fparam_2eproto}, {
      &scc_info_CameraParam_camera_2eproto.base,}};

static void InitDefaultsscc_info_HomographyMatrix_calib_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_HomographyMatrix_default_instance_;
    new (ptr) ::minieye::HomographyMatrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::HomographyMatrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HomographyMatrix_calib_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HomographyMatrix_calib_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_PreCheckReq_calib_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_PreCheckReq_default_instance_;
    new (ptr) ::minieye::PreCheckReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::PreCheckReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreCheckReq_calib_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PreCheckReq_calib_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_PreCheckRsp_calib_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_PreCheckRsp_default_instance_;
    new (ptr) ::minieye::PreCheckRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::PreCheckRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreCheckRsp_calib_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PreCheckRsp_calib_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_VehicleParam_calib_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_VehicleParam_default_instance_;
    new (ptr) ::minieye::VehicleParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::VehicleParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleParam_calib_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleParam_calib_5fparam_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_calib_5fparam_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_calib_5fparam_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_calib_5fparam_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_calib_5fparam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, camera_pitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, camera_yaw_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, camera_roll_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, camera_cu_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, camera_cv_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, camera_fov_h_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, camera_fov_w_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, camera_height_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, left_dist_to_camera_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, right_dist_to_camera_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, front_dist_to_camera_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, front_wheel_camera_dist_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibParam, camera_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::HomographyMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::HomographyMatrix, src_camera_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::HomographyMatrix, dst_camera_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::HomographyMatrix, src2dst_h_matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::PreCheckReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::PreCheckReq, need_check_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::PreCheckRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::PreCheckRsp, state_),
  PROTOBUF_FIELD_OFFSET(::minieye::PreCheckRsp, err_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleParam, car_width_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleParam, wheel_base_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleParam, front_overhang_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleParam, rear_overhang_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::CalibReqDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::CalibReqDetail, camera_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibReqDetail, calib_method_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibReqDetail, designated_cam_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::CalibReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::CalibReq, details_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibReq, vhs_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::CalibRspDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::CalibRspDetail, camera_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibRspDetail, calib_method_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibRspDetail, state_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibRspDetail, err_code_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibRspDetail, process_),
  PROTOBUF_FIELD_OFFSET(::minieye::CalibRspDetail, calib_res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::CalibRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::CalibRsp, details_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::CalibParam)},
  { 18, -1, sizeof(::minieye::HomographyMatrix)},
  { 26, -1, sizeof(::minieye::PreCheckReq)},
  { 32, -1, sizeof(::minieye::PreCheckRsp)},
  { 39, -1, sizeof(::minieye::VehicleParam)},
  { 48, -1, sizeof(::minieye::CalibReqDetail)},
  { 56, -1, sizeof(::minieye::CalibReq)},
  { 63, -1, sizeof(::minieye::CalibRspDetail)},
  { 74, -1, sizeof(::minieye::CalibRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_CalibParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_HomographyMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_PreCheckReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_PreCheckRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_VehicleParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_CalibReqDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_CalibReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_CalibRspDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_CalibRsp_default_instance_),
};

const char descriptor_table_protodef_calib_5fparam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021calib_param.proto\022\007minieye\032\014camera.pro"
  "to\"\301\002\n\nCalibParam\022\024\n\014camera_pitch\030\001 \001(\001\022"
  "\022\n\ncamera_yaw\030\002 \001(\001\022\023\n\013camera_roll\030\003 \001(\001"
  "\022\021\n\tcamera_cu\030\004 \001(\001\022\021\n\tcamera_cv\030\005 \001(\001\022\024"
  "\n\014camera_fov_h\030\006 \001(\001\022\024\n\014camera_fov_w\030\007 \001"
  "(\001\022\025\n\rcamera_height\030\010 \001(\001\022\033\n\023left_dist_t"
  "o_camera\030\t \001(\001\022\034\n\024right_dist_to_camera\030\n"
  " \001(\001\022\034\n\024front_dist_to_camera\030\013 \001(\001\022\037\n\027fr"
  "ont_wheel_camera_dist\030\014 \001(\001\022\021\n\tcamera_id"
  "\030\r \001(\r\"Z\n\020HomographyMatrix\022\025\n\rsrc_camera"
  "_id\030\001 \001(\r\022\025\n\rdst_camera_id\030\002 \001(\r\022\030\n\020src2"
  "dst_h_matrix\030\003 \003(\002\"!\n\013PreCheckReq\022\022\n\nnee"
  "d_check\030\001 \001(\010\"`\n\013PreCheckRsp\022%\n\005state\030\001 "
  "\001(\0162\026.minieye.PreCheckState\022*\n\010err_code\030"
  "\002 \001(\0162\030.minieye.PrecheckErrCode\"d\n\014Vehic"
  "leParam\022\021\n\tcar_width\030\001 \001(\001\022\022\n\nwheel_base"
  "\030\002 \001(\001\022\026\n\016front_overhang\030\003 \001(\001\022\025\n\rrear_o"
  "verhang\030\004 \001(\001\"m\n\016CalibReqDetail\022\021\n\tcamer"
  "a_id\030\001 \001(\005\022\024\n\014calib_method\030\002 \001(\005\0222\n\024desi"
  "gnated_cam_param\030\003 \001(\0132\024.minieye.CameraP"
  "aram\"^\n\010CalibReq\022(\n\007details\030\001 \003(\0132\027.mini"
  "eye.CalibReqDetail\022(\n\tvhs_param\030\002 \001(\0132\025."
  "minieye.VehicleParam\"\303\001\n\016CalibRspDetail\022"
  "\021\n\tcamera_id\030\001 \001(\005\022\024\n\014calib_method\030\002 \001(\005"
  "\022%\n\005state\030\003 \001(\0162\026.minieye.CalibResState\022"
  "\'\n\010err_code\030\004 \001(\0162\025.minieye.CalibErrCode"
  "\022\017\n\007process\030\005 \001(\001\022\'\n\tcalib_res\030\006 \001(\0132\024.m"
  "inieye.CameraParam\"4\n\010CalibRsp\022(\n\007detail"
  "s\030\001 \003(\0132\027.minieye.CalibRspDetail*h\n\rPreC"
  "heckState\022\025\n\021kPreCheckAbnormal\020\000\022\021\n\rkPre"
  "CheckPass\020\001\022\026\n\022kPreCheckInProcess\020\002\022\025\n\021k"
  "PreCheckNotStart\020\003*\307\001\n\017PrecheckErrCode\022\017"
  "\n\013kFLDoorAjar\020\000\022\017\n\013kRLDoorAjar\020\001\022\017\n\013kFRD"
  "oorAjar\020\002\022\017\n\013kRRDoorAjar\020\003\022\020\n\014kTurnLight"
  "On\020\004\022\017\n\013kHighBeamOn\020\005\022\016\n\nkLowBeamOn\020\006\022\013\n"
  "\007kTGOpen\020\007\022\r\n\tkHoodOpen\020\010\022\017\n\013kMirrorFold"
  "\020\t\022\020\n\014kWiperMoving\020\n*\210\001\n\rCalibResState\022\017"
  "\n\013kCalibStart\020\000\022\r\n\tkNotCalib\020\001\022\017\n\013kCalib"
  "rated\020\002\022\023\n\017kCalibInProcess\020\003\022\017\n\013kCalibPa"
  "use\020\004\022\016\n\nkCalibPass\020\005\022\020\n\014kCalibFailed\020\006*"
  "\322\004\n\014CalibErrCode\022\017\n\013kCECSuccess\020\000\022\021\n\rkCE"
  "CInProcess\020\001\022\021\n\rkCECImageNull\020\002\022\024\n\020kCECN"
  "oTargetInfo\020\003\022\025\n\021kCECTargetInfoErr\020\004\022\025\n\021"
  "kCECDetTargetFail\020\005\022\025\n\021kCECInterLogicErr"
  "\020\006\022\024\n\020kCECInvalidPitch\020\007\022\022\n\016kCECInvalidY"
  "aw\020\010\022\023\n\017kCECInvalidRoll\020\t\022\020\n\014kCECInvalid"
  "X\020\n\022\020\n\014kCECInvalidY\020\013\022\020\n\014kCECInvalidZ\020\014\022"
  "\020\n\014kCECOvertime\020\r\022\025\n\021kCECPersistFailed\020\016"
  "\022\026\n\022kCECNoDynCalibConf\020\017\022\027\n\023kCECDynCalib"
  "ConfErr\020\020\022\022\n\016kCECTooManyCar\020\021\022\021\n\rkCECEmp"
  "tyRoad\020\022\022\021\n\rkCECCalibStop\020\023\022\024\n\020kCECImuCh"
  "eckFail\020\024\022\021\n\rkCECHighSpeed\020\025\022\020\n\014kCECLowS"
  "peed\020\026\022\030\n\024kCECYawRateCheckFail\020\027\022\025\n\021kCEC"
  "HighOcclusion\020\030\022\026\n\022kCECHighBrightness\020\031\022"
  "\025\n\021kCECLowBrightness\020\032\022\014\n\010kCECAlgo\020\033*\226\002\n"
  "\013CalibMethod\022\013\n\007UNKNOWN\020\000\022\007\n\003EOL\020\001\022\017\n\013ST"
  "ATIC_LANE\020\002\022\020\n\014DYNAMIC_LANE\020\003\022\022\n\016PARAM_T"
  "O_CALIB\020\004\022\024\n\020CALIB_RESULT_REQ\020\005\022\016\n\nSTOP_"
  "CALIB\020\006\022\017\n\013PAUSE_CALIB\020\007\022\022\n\016CONTINUE_CAL"
  "IB\020\010\022\013\n\007TARGET1\020\n\022\013\n\007TARGET2\020\013\022\013\n\007TARGET"
  "3\020\014\022\013\n\007TARGET4\020\r\022\013\n\007TARGET5\020\016\022\007\n\003SNA\020\017\022\024"
  "\n\020ONLINE_AFTERSALE\020\020\022\017\n\013ONLINE_AUTO\020\021b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_calib_5fparam_2eproto_deps[1] = {
  &::descriptor_table_camera_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_calib_5fparam_2eproto_sccs[9] = {
  &scc_info_CalibParam_calib_5fparam_2eproto.base,
  &scc_info_CalibReq_calib_5fparam_2eproto.base,
  &scc_info_CalibReqDetail_calib_5fparam_2eproto.base,
  &scc_info_CalibRsp_calib_5fparam_2eproto.base,
  &scc_info_CalibRspDetail_calib_5fparam_2eproto.base,
  &scc_info_HomographyMatrix_calib_5fparam_2eproto.base,
  &scc_info_PreCheckReq_calib_5fparam_2eproto.base,
  &scc_info_PreCheckRsp_calib_5fparam_2eproto.base,
  &scc_info_VehicleParam_calib_5fparam_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_calib_5fparam_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_calib_5fparam_2eproto = {
  false, false, descriptor_table_protodef_calib_5fparam_2eproto, "calib_param.proto", 2485,
  &descriptor_table_calib_5fparam_2eproto_once, descriptor_table_calib_5fparam_2eproto_sccs, descriptor_table_calib_5fparam_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_calib_5fparam_2eproto::offsets,
  file_level_metadata_calib_5fparam_2eproto, 9, file_level_enum_descriptors_calib_5fparam_2eproto, file_level_service_descriptors_calib_5fparam_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_calib_5fparam_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_calib_5fparam_2eproto)), true);
namespace minieye {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PreCheckState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_calib_5fparam_2eproto);
  return file_level_enum_descriptors_calib_5fparam_2eproto[0];
}
bool PreCheckState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrecheckErrCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_calib_5fparam_2eproto);
  return file_level_enum_descriptors_calib_5fparam_2eproto[1];
}
bool PrecheckErrCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalibResState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_calib_5fparam_2eproto);
  return file_level_enum_descriptors_calib_5fparam_2eproto[2];
}
bool CalibResState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalibErrCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_calib_5fparam_2eproto);
  return file_level_enum_descriptors_calib_5fparam_2eproto[3];
}
bool CalibErrCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalibMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_calib_5fparam_2eproto);
  return file_level_enum_descriptors_calib_5fparam_2eproto[4];
}
bool CalibMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CalibParam::InitAsDefaultInstance() {
}
class CalibParam::_Internal {
 public:
};

CalibParam::CalibParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.CalibParam)
}
CalibParam::CalibParam(const CalibParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&camera_pitch_, &from.camera_pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_id_) -
    reinterpret_cast<char*>(&camera_pitch_)) + sizeof(camera_id_));
  // @@protoc_insertion_point(copy_constructor:minieye.CalibParam)
}

void CalibParam::SharedCtor() {
  ::memset(&camera_pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&camera_pitch_)) + sizeof(camera_id_));
}

CalibParam::~CalibParam() {
  // @@protoc_insertion_point(destructor:minieye.CalibParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalibParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CalibParam::ArenaDtor(void* object) {
  CalibParam* _this = reinterpret_cast< CalibParam* >(object);
  (void)_this;
}
void CalibParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalibParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibParam& CalibParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalibParam_calib_5fparam_2eproto.base);
  return *internal_default_instance();
}


void CalibParam::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.CalibParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camera_pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&camera_pitch_)) + sizeof(camera_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalibParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double camera_pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          camera_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          camera_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          camera_roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_cu = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          camera_cu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_cv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          camera_cv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_fov_h = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          camera_fov_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_fov_w = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          camera_fov_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double left_dist_to_camera = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          left_dist_to_camera_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double right_dist_to_camera = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          right_dist_to_camera_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double front_dist_to_camera = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          front_dist_to_camera_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double front_wheel_camera_dist = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          front_wheel_camera_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 camera_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.CalibParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double camera_pitch = 1;
  if (!(this->camera_pitch() <= 0 && this->camera_pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_camera_pitch(), target);
  }

  // double camera_yaw = 2;
  if (!(this->camera_yaw() <= 0 && this->camera_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_camera_yaw(), target);
  }

  // double camera_roll = 3;
  if (!(this->camera_roll() <= 0 && this->camera_roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_camera_roll(), target);
  }

  // double camera_cu = 4;
  if (!(this->camera_cu() <= 0 && this->camera_cu() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_camera_cu(), target);
  }

  // double camera_cv = 5;
  if (!(this->camera_cv() <= 0 && this->camera_cv() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_camera_cv(), target);
  }

  // double camera_fov_h = 6;
  if (!(this->camera_fov_h() <= 0 && this->camera_fov_h() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_camera_fov_h(), target);
  }

  // double camera_fov_w = 7;
  if (!(this->camera_fov_w() <= 0 && this->camera_fov_w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_camera_fov_w(), target);
  }

  // double camera_height = 8;
  if (!(this->camera_height() <= 0 && this->camera_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_camera_height(), target);
  }

  // double left_dist_to_camera = 9;
  if (!(this->left_dist_to_camera() <= 0 && this->left_dist_to_camera() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_left_dist_to_camera(), target);
  }

  // double right_dist_to_camera = 10;
  if (!(this->right_dist_to_camera() <= 0 && this->right_dist_to_camera() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_right_dist_to_camera(), target);
  }

  // double front_dist_to_camera = 11;
  if (!(this->front_dist_to_camera() <= 0 && this->front_dist_to_camera() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_front_dist_to_camera(), target);
  }

  // double front_wheel_camera_dist = 12;
  if (!(this->front_wheel_camera_dist() <= 0 && this->front_wheel_camera_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_front_wheel_camera_dist(), target);
  }

  // uint32 camera_id = 13;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_camera_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.CalibParam)
  return target;
}

size_t CalibParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.CalibParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double camera_pitch = 1;
  if (!(this->camera_pitch() <= 0 && this->camera_pitch() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_yaw = 2;
  if (!(this->camera_yaw() <= 0 && this->camera_yaw() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_roll = 3;
  if (!(this->camera_roll() <= 0 && this->camera_roll() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_cu = 4;
  if (!(this->camera_cu() <= 0 && this->camera_cu() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_cv = 5;
  if (!(this->camera_cv() <= 0 && this->camera_cv() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_fov_h = 6;
  if (!(this->camera_fov_h() <= 0 && this->camera_fov_h() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_fov_w = 7;
  if (!(this->camera_fov_w() <= 0 && this->camera_fov_w() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_height = 8;
  if (!(this->camera_height() <= 0 && this->camera_height() >= 0)) {
    total_size += 1 + 8;
  }

  // double left_dist_to_camera = 9;
  if (!(this->left_dist_to_camera() <= 0 && this->left_dist_to_camera() >= 0)) {
    total_size += 1 + 8;
  }

  // double right_dist_to_camera = 10;
  if (!(this->right_dist_to_camera() <= 0 && this->right_dist_to_camera() >= 0)) {
    total_size += 1 + 8;
  }

  // double front_dist_to_camera = 11;
  if (!(this->front_dist_to_camera() <= 0 && this->front_dist_to_camera() >= 0)) {
    total_size += 1 + 8;
  }

  // double front_wheel_camera_dist = 12;
  if (!(this->front_wheel_camera_dist() <= 0 && this->front_wheel_camera_dist() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 camera_id = 13;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_camera_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.CalibParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.CalibParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.CalibParam)
    MergeFrom(*source);
  }
}

void CalibParam::MergeFrom(const CalibParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.CalibParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.camera_pitch() <= 0 && from.camera_pitch() >= 0)) {
    _internal_set_camera_pitch(from._internal_camera_pitch());
  }
  if (!(from.camera_yaw() <= 0 && from.camera_yaw() >= 0)) {
    _internal_set_camera_yaw(from._internal_camera_yaw());
  }
  if (!(from.camera_roll() <= 0 && from.camera_roll() >= 0)) {
    _internal_set_camera_roll(from._internal_camera_roll());
  }
  if (!(from.camera_cu() <= 0 && from.camera_cu() >= 0)) {
    _internal_set_camera_cu(from._internal_camera_cu());
  }
  if (!(from.camera_cv() <= 0 && from.camera_cv() >= 0)) {
    _internal_set_camera_cv(from._internal_camera_cv());
  }
  if (!(from.camera_fov_h() <= 0 && from.camera_fov_h() >= 0)) {
    _internal_set_camera_fov_h(from._internal_camera_fov_h());
  }
  if (!(from.camera_fov_w() <= 0 && from.camera_fov_w() >= 0)) {
    _internal_set_camera_fov_w(from._internal_camera_fov_w());
  }
  if (!(from.camera_height() <= 0 && from.camera_height() >= 0)) {
    _internal_set_camera_height(from._internal_camera_height());
  }
  if (!(from.left_dist_to_camera() <= 0 && from.left_dist_to_camera() >= 0)) {
    _internal_set_left_dist_to_camera(from._internal_left_dist_to_camera());
  }
  if (!(from.right_dist_to_camera() <= 0 && from.right_dist_to_camera() >= 0)) {
    _internal_set_right_dist_to_camera(from._internal_right_dist_to_camera());
  }
  if (!(from.front_dist_to_camera() <= 0 && from.front_dist_to_camera() >= 0)) {
    _internal_set_front_dist_to_camera(from._internal_front_dist_to_camera());
  }
  if (!(from.front_wheel_camera_dist() <= 0 && from.front_wheel_camera_dist() >= 0)) {
    _internal_set_front_wheel_camera_dist(from._internal_front_wheel_camera_dist());
  }
  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
}

void CalibParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.CalibParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibParam::CopyFrom(const CalibParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.CalibParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibParam::IsInitialized() const {
  return true;
}

void CalibParam::InternalSwap(CalibParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalibParam, camera_id_)
      + sizeof(CalibParam::camera_id_)
      - PROTOBUF_FIELD_OFFSET(CalibParam, camera_pitch_)>(
          reinterpret_cast<char*>(&camera_pitch_),
          reinterpret_cast<char*>(&other->camera_pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HomographyMatrix::InitAsDefaultInstance() {
}
class HomographyMatrix::_Internal {
 public:
};

HomographyMatrix::HomographyMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  src2dst_h_matrix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.HomographyMatrix)
}
HomographyMatrix::HomographyMatrix(const HomographyMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      src2dst_h_matrix_(from.src2dst_h_matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&src_camera_id_, &from.src_camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_camera_id_) -
    reinterpret_cast<char*>(&src_camera_id_)) + sizeof(dst_camera_id_));
  // @@protoc_insertion_point(copy_constructor:minieye.HomographyMatrix)
}

void HomographyMatrix::SharedCtor() {
  ::memset(&src_camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_camera_id_) -
      reinterpret_cast<char*>(&src_camera_id_)) + sizeof(dst_camera_id_));
}

HomographyMatrix::~HomographyMatrix() {
  // @@protoc_insertion_point(destructor:minieye.HomographyMatrix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HomographyMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HomographyMatrix::ArenaDtor(void* object) {
  HomographyMatrix* _this = reinterpret_cast< HomographyMatrix* >(object);
  (void)_this;
}
void HomographyMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HomographyMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HomographyMatrix& HomographyMatrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HomographyMatrix_calib_5fparam_2eproto.base);
  return *internal_default_instance();
}


void HomographyMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.HomographyMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  src2dst_h_matrix_.Clear();
  ::memset(&src_camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_camera_id_) -
      reinterpret_cast<char*>(&src_camera_id_)) + sizeof(dst_camera_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HomographyMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 src_camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          src_camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dst_camera_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dst_camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float src2dst_h_matrix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_src2dst_h_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_src2dst_h_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HomographyMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.HomographyMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 src_camera_id = 1;
  if (this->src_camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src_camera_id(), target);
  }

  // uint32 dst_camera_id = 2;
  if (this->dst_camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dst_camera_id(), target);
  }

  // repeated float src2dst_h_matrix = 3;
  if (this->_internal_src2dst_h_matrix_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_src2dst_h_matrix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.HomographyMatrix)
  return target;
}

size_t HomographyMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.HomographyMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float src2dst_h_matrix = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_src2dst_h_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _src2dst_h_matrix_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 src_camera_id = 1;
  if (this->src_camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_camera_id());
  }

  // uint32 dst_camera_id = 2;
  if (this->dst_camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst_camera_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HomographyMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.HomographyMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const HomographyMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HomographyMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.HomographyMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.HomographyMatrix)
    MergeFrom(*source);
  }
}

void HomographyMatrix::MergeFrom(const HomographyMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.HomographyMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  src2dst_h_matrix_.MergeFrom(from.src2dst_h_matrix_);
  if (from.src_camera_id() != 0) {
    _internal_set_src_camera_id(from._internal_src_camera_id());
  }
  if (from.dst_camera_id() != 0) {
    _internal_set_dst_camera_id(from._internal_dst_camera_id());
  }
}

void HomographyMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.HomographyMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomographyMatrix::CopyFrom(const HomographyMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.HomographyMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomographyMatrix::IsInitialized() const {
  return true;
}

void HomographyMatrix::InternalSwap(HomographyMatrix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  src2dst_h_matrix_.InternalSwap(&other->src2dst_h_matrix_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HomographyMatrix, dst_camera_id_)
      + sizeof(HomographyMatrix::dst_camera_id_)
      - PROTOBUF_FIELD_OFFSET(HomographyMatrix, src_camera_id_)>(
          reinterpret_cast<char*>(&src_camera_id_),
          reinterpret_cast<char*>(&other->src_camera_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HomographyMatrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PreCheckReq::InitAsDefaultInstance() {
}
class PreCheckReq::_Internal {
 public:
};

PreCheckReq::PreCheckReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.PreCheckReq)
}
PreCheckReq::PreCheckReq(const PreCheckReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  need_check_ = from.need_check_;
  // @@protoc_insertion_point(copy_constructor:minieye.PreCheckReq)
}

void PreCheckReq::SharedCtor() {
  need_check_ = false;
}

PreCheckReq::~PreCheckReq() {
  // @@protoc_insertion_point(destructor:minieye.PreCheckReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreCheckReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PreCheckReq::ArenaDtor(void* object) {
  PreCheckReq* _this = reinterpret_cast< PreCheckReq* >(object);
  (void)_this;
}
void PreCheckReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreCheckReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreCheckReq& PreCheckReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreCheckReq_calib_5fparam_2eproto.base);
  return *internal_default_instance();
}


void PreCheckReq::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.PreCheckReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  need_check_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreCheckReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool need_check = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          need_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreCheckReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.PreCheckReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool need_check = 1;
  if (this->need_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_need_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.PreCheckReq)
  return target;
}

size_t PreCheckReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.PreCheckReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool need_check = 1;
  if (this->need_check() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreCheckReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.PreCheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PreCheckReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreCheckReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.PreCheckReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.PreCheckReq)
    MergeFrom(*source);
  }
}

void PreCheckReq::MergeFrom(const PreCheckReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.PreCheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.need_check() != 0) {
    _internal_set_need_check(from._internal_need_check());
  }
}

void PreCheckReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.PreCheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreCheckReq::CopyFrom(const PreCheckReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.PreCheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreCheckReq::IsInitialized() const {
  return true;
}

void PreCheckReq::InternalSwap(PreCheckReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(need_check_, other->need_check_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreCheckReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PreCheckRsp::InitAsDefaultInstance() {
}
class PreCheckRsp::_Internal {
 public:
};

PreCheckRsp::PreCheckRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.PreCheckRsp)
}
PreCheckRsp::PreCheckRsp(const PreCheckRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&state_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:minieye.PreCheckRsp)
}

void PreCheckRsp::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&state_)) + sizeof(err_code_));
}

PreCheckRsp::~PreCheckRsp() {
  // @@protoc_insertion_point(destructor:minieye.PreCheckRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreCheckRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PreCheckRsp::ArenaDtor(void* object) {
  PreCheckRsp* _this = reinterpret_cast< PreCheckRsp* >(object);
  (void)_this;
}
void PreCheckRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreCheckRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreCheckRsp& PreCheckRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreCheckRsp_calib_5fparam_2eproto.base);
  return *internal_default_instance();
}


void PreCheckRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.PreCheckRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&state_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreCheckRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.PreCheckState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::minieye::PreCheckState>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.PrecheckErrCode err_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err_code(static_cast<::minieye::PrecheckErrCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreCheckRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.PreCheckRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.PreCheckState state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // .minieye.PrecheckErrCode err_code = 2;
  if (this->err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_err_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.PreCheckRsp)
  return target;
}

size_t PreCheckRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.PreCheckRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.PreCheckState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .minieye.PrecheckErrCode err_code = 2;
  if (this->err_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreCheckRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.PreCheckRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PreCheckRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreCheckRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.PreCheckRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.PreCheckRsp)
    MergeFrom(*source);
  }
}

void PreCheckRsp::MergeFrom(const PreCheckRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.PreCheckRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
}

void PreCheckRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.PreCheckRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreCheckRsp::CopyFrom(const PreCheckRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.PreCheckRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreCheckRsp::IsInitialized() const {
  return true;
}

void PreCheckRsp::InternalSwap(PreCheckRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreCheckRsp, err_code_)
      + sizeof(PreCheckRsp::err_code_)
      - PROTOBUF_FIELD_OFFSET(PreCheckRsp, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PreCheckRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleParam::InitAsDefaultInstance() {
}
class VehicleParam::_Internal {
 public:
};

VehicleParam::VehicleParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.VehicleParam)
}
VehicleParam::VehicleParam(const VehicleParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&car_width_, &from.car_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&rear_overhang_) -
    reinterpret_cast<char*>(&car_width_)) + sizeof(rear_overhang_));
  // @@protoc_insertion_point(copy_constructor:minieye.VehicleParam)
}

void VehicleParam::SharedCtor() {
  ::memset(&car_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rear_overhang_) -
      reinterpret_cast<char*>(&car_width_)) + sizeof(rear_overhang_));
}

VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:minieye.VehicleParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VehicleParam::ArenaDtor(void* object) {
  VehicleParam* _this = reinterpret_cast< VehicleParam* >(object);
  (void)_this;
}
void VehicleParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleParam& VehicleParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleParam_calib_5fparam_2eproto.base);
  return *internal_default_instance();
}


void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.VehicleParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&car_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rear_overhang_) -
      reinterpret_cast<char*>(&car_width_)) + sizeof(rear_overhang_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double car_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          car_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double wheel_base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          wheel_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double front_overhang = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          front_overhang_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rear_overhang = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rear_overhang_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.VehicleParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double car_width = 1;
  if (!(this->car_width() <= 0 && this->car_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_car_width(), target);
  }

  // double wheel_base = 2;
  if (!(this->wheel_base() <= 0 && this->wheel_base() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_wheel_base(), target);
  }

  // double front_overhang = 3;
  if (!(this->front_overhang() <= 0 && this->front_overhang() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_front_overhang(), target);
  }

  // double rear_overhang = 4;
  if (!(this->rear_overhang() <= 0 && this->rear_overhang() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rear_overhang(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.VehicleParam)
  return target;
}

size_t VehicleParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.VehicleParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double car_width = 1;
  if (!(this->car_width() <= 0 && this->car_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double wheel_base = 2;
  if (!(this->wheel_base() <= 0 && this->wheel_base() >= 0)) {
    total_size += 1 + 8;
  }

  // double front_overhang = 3;
  if (!(this->front_overhang() <= 0 && this->front_overhang() >= 0)) {
    total_size += 1 + 8;
  }

  // double rear_overhang = 4;
  if (!(this->rear_overhang() <= 0 && this->rear_overhang() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.VehicleParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.VehicleParam)
    MergeFrom(*source);
  }
}

void VehicleParam::MergeFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.car_width() <= 0 && from.car_width() >= 0)) {
    _internal_set_car_width(from._internal_car_width());
  }
  if (!(from.wheel_base() <= 0 && from.wheel_base() >= 0)) {
    _internal_set_wheel_base(from._internal_wheel_base());
  }
  if (!(from.front_overhang() <= 0 && from.front_overhang() >= 0)) {
    _internal_set_front_overhang(from._internal_front_overhang());
  }
  if (!(from.rear_overhang() <= 0 && from.rear_overhang() >= 0)) {
    _internal_set_rear_overhang(from._internal_rear_overhang());
  }
}

void VehicleParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam::IsInitialized() const {
  return true;
}

void VehicleParam::InternalSwap(VehicleParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleParam, rear_overhang_)
      + sizeof(VehicleParam::rear_overhang_)
      - PROTOBUF_FIELD_OFFSET(VehicleParam, car_width_)>(
          reinterpret_cast<char*>(&car_width_),
          reinterpret_cast<char*>(&other->car_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalibReqDetail::InitAsDefaultInstance() {
  ::minieye::_CalibReqDetail_default_instance_._instance.get_mutable()->designated_cam_param_ = const_cast< ::minieye::CameraParam*>(
      ::minieye::CameraParam::internal_default_instance());
}
class CalibReqDetail::_Internal {
 public:
  static const ::minieye::CameraParam& designated_cam_param(const CalibReqDetail* msg);
};

const ::minieye::CameraParam&
CalibReqDetail::_Internal::designated_cam_param(const CalibReqDetail* msg) {
  return *msg->designated_cam_param_;
}
void CalibReqDetail::clear_designated_cam_param() {
  if (GetArena() == nullptr && designated_cam_param_ != nullptr) {
    delete designated_cam_param_;
  }
  designated_cam_param_ = nullptr;
}
CalibReqDetail::CalibReqDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.CalibReqDetail)
}
CalibReqDetail::CalibReqDetail(const CalibReqDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_designated_cam_param()) {
    designated_cam_param_ = new ::minieye::CameraParam(*from.designated_cam_param_);
  } else {
    designated_cam_param_ = nullptr;
  }
  ::memcpy(&camera_id_, &from.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&calib_method_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(calib_method_));
  // @@protoc_insertion_point(copy_constructor:minieye.CalibReqDetail)
}

void CalibReqDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalibReqDetail_calib_5fparam_2eproto.base);
  ::memset(&designated_cam_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calib_method_) -
      reinterpret_cast<char*>(&designated_cam_param_)) + sizeof(calib_method_));
}

CalibReqDetail::~CalibReqDetail() {
  // @@protoc_insertion_point(destructor:minieye.CalibReqDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalibReqDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete designated_cam_param_;
}

void CalibReqDetail::ArenaDtor(void* object) {
  CalibReqDetail* _this = reinterpret_cast< CalibReqDetail* >(object);
  (void)_this;
}
void CalibReqDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalibReqDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibReqDetail& CalibReqDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalibReqDetail_calib_5fparam_2eproto.base);
  return *internal_default_instance();
}


void CalibReqDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.CalibReqDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && designated_cam_param_ != nullptr) {
    delete designated_cam_param_;
  }
  designated_cam_param_ = nullptr;
  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calib_method_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(calib_method_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalibReqDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 calib_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          calib_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.CameraParam designated_cam_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_designated_cam_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibReqDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.CalibReqDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_camera_id(), target);
  }

  // int32 calib_method = 2;
  if (this->calib_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_calib_method(), target);
  }

  // .minieye.CameraParam designated_cam_param = 3;
  if (this->has_designated_cam_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::designated_cam_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.CalibReqDetail)
  return target;
}

size_t CalibReqDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.CalibReqDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.CameraParam designated_cam_param = 3;
  if (this->has_designated_cam_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *designated_cam_param_);
  }

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camera_id());
  }

  // int32 calib_method = 2;
  if (this->calib_method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_calib_method());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibReqDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.CalibReqDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibReqDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibReqDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.CalibReqDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.CalibReqDetail)
    MergeFrom(*source);
  }
}

void CalibReqDetail::MergeFrom(const CalibReqDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.CalibReqDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_designated_cam_param()) {
    _internal_mutable_designated_cam_param()->::minieye::CameraParam::MergeFrom(from._internal_designated_cam_param());
  }
  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.calib_method() != 0) {
    _internal_set_calib_method(from._internal_calib_method());
  }
}

void CalibReqDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.CalibReqDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibReqDetail::CopyFrom(const CalibReqDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.CalibReqDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibReqDetail::IsInitialized() const {
  return true;
}

void CalibReqDetail::InternalSwap(CalibReqDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalibReqDetail, calib_method_)
      + sizeof(CalibReqDetail::calib_method_)
      - PROTOBUF_FIELD_OFFSET(CalibReqDetail, designated_cam_param_)>(
          reinterpret_cast<char*>(&designated_cam_param_),
          reinterpret_cast<char*>(&other->designated_cam_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibReqDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalibReq::InitAsDefaultInstance() {
  ::minieye::_CalibReq_default_instance_._instance.get_mutable()->vhs_param_ = const_cast< ::minieye::VehicleParam*>(
      ::minieye::VehicleParam::internal_default_instance());
}
class CalibReq::_Internal {
 public:
  static const ::minieye::VehicleParam& vhs_param(const CalibReq* msg);
};

const ::minieye::VehicleParam&
CalibReq::_Internal::vhs_param(const CalibReq* msg) {
  return *msg->vhs_param_;
}
CalibReq::CalibReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  details_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.CalibReq)
}
CalibReq::CalibReq(const CalibReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      details_(from.details_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vhs_param()) {
    vhs_param_ = new ::minieye::VehicleParam(*from.vhs_param_);
  } else {
    vhs_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minieye.CalibReq)
}

void CalibReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalibReq_calib_5fparam_2eproto.base);
  vhs_param_ = nullptr;
}

CalibReq::~CalibReq() {
  // @@protoc_insertion_point(destructor:minieye.CalibReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalibReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vhs_param_;
}

void CalibReq::ArenaDtor(void* object) {
  CalibReq* _this = reinterpret_cast< CalibReq* >(object);
  (void)_this;
}
void CalibReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalibReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibReq& CalibReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalibReq_calib_5fparam_2eproto.base);
  return *internal_default_instance();
}


void CalibReq::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.CalibReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.Clear();
  if (GetArena() == nullptr && vhs_param_ != nullptr) {
    delete vhs_param_;
  }
  vhs_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalibReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .minieye.CalibReqDetail details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .minieye.VehicleParam vhs_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vhs_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.CalibReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minieye.CalibReqDetail details = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_details(i), target, stream);
  }

  // .minieye.VehicleParam vhs_param = 2;
  if (this->has_vhs_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vhs_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.CalibReq)
  return target;
}

size_t CalibReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.CalibReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.CalibReqDetail details = 1;
  total_size += 1UL * this->_internal_details_size();
  for (const auto& msg : this->details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .minieye.VehicleParam vhs_param = 2;
  if (this->has_vhs_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vhs_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.CalibReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.CalibReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.CalibReq)
    MergeFrom(*source);
  }
}

void CalibReq::MergeFrom(const CalibReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.CalibReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  details_.MergeFrom(from.details_);
  if (from.has_vhs_param()) {
    _internal_mutable_vhs_param()->::minieye::VehicleParam::MergeFrom(from._internal_vhs_param());
  }
}

void CalibReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.CalibReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibReq::CopyFrom(const CalibReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.CalibReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibReq::IsInitialized() const {
  return true;
}

void CalibReq::InternalSwap(CalibReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  details_.InternalSwap(&other->details_);
  swap(vhs_param_, other->vhs_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalibRspDetail::InitAsDefaultInstance() {
  ::minieye::_CalibRspDetail_default_instance_._instance.get_mutable()->calib_res_ = const_cast< ::minieye::CameraParam*>(
      ::minieye::CameraParam::internal_default_instance());
}
class CalibRspDetail::_Internal {
 public:
  static const ::minieye::CameraParam& calib_res(const CalibRspDetail* msg);
};

const ::minieye::CameraParam&
CalibRspDetail::_Internal::calib_res(const CalibRspDetail* msg) {
  return *msg->calib_res_;
}
void CalibRspDetail::clear_calib_res() {
  if (GetArena() == nullptr && calib_res_ != nullptr) {
    delete calib_res_;
  }
  calib_res_ = nullptr;
}
CalibRspDetail::CalibRspDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.CalibRspDetail)
}
CalibRspDetail::CalibRspDetail(const CalibRspDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_calib_res()) {
    calib_res_ = new ::minieye::CameraParam(*from.calib_res_);
  } else {
    calib_res_ = nullptr;
  }
  ::memcpy(&camera_id_, &from.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&process_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(process_));
  // @@protoc_insertion_point(copy_constructor:minieye.CalibRspDetail)
}

void CalibRspDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalibRspDetail_calib_5fparam_2eproto.base);
  ::memset(&calib_res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&process_) -
      reinterpret_cast<char*>(&calib_res_)) + sizeof(process_));
}

CalibRspDetail::~CalibRspDetail() {
  // @@protoc_insertion_point(destructor:minieye.CalibRspDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalibRspDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete calib_res_;
}

void CalibRspDetail::ArenaDtor(void* object) {
  CalibRspDetail* _this = reinterpret_cast< CalibRspDetail* >(object);
  (void)_this;
}
void CalibRspDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalibRspDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibRspDetail& CalibRspDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalibRspDetail_calib_5fparam_2eproto.base);
  return *internal_default_instance();
}


void CalibRspDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.CalibRspDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && calib_res_ != nullptr) {
    delete calib_res_;
  }
  calib_res_ = nullptr;
  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&process_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(process_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalibRspDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 calib_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          calib_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.CalibResState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::minieye::CalibResState>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.CalibErrCode err_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err_code(static_cast<::minieye::CalibErrCode>(val));
        } else goto handle_unusual;
        continue;
      // double process = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          process_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .minieye.CameraParam calib_res = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_calib_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibRspDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.CalibRspDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_camera_id(), target);
  }

  // int32 calib_method = 2;
  if (this->calib_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_calib_method(), target);
  }

  // .minieye.CalibResState state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // .minieye.CalibErrCode err_code = 4;
  if (this->err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_err_code(), target);
  }

  // double process = 5;
  if (!(this->process() <= 0 && this->process() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_process(), target);
  }

  // .minieye.CameraParam calib_res = 6;
  if (this->has_calib_res()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::calib_res(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.CalibRspDetail)
  return target;
}

size_t CalibRspDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.CalibRspDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.CameraParam calib_res = 6;
  if (this->has_calib_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calib_res_);
  }

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camera_id());
  }

  // int32 calib_method = 2;
  if (this->calib_method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_calib_method());
  }

  // .minieye.CalibResState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .minieye.CalibErrCode err_code = 4;
  if (this->err_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err_code());
  }

  // double process = 5;
  if (!(this->process() <= 0 && this->process() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibRspDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.CalibRspDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibRspDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibRspDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.CalibRspDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.CalibRspDetail)
    MergeFrom(*source);
  }
}

void CalibRspDetail::MergeFrom(const CalibRspDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.CalibRspDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_calib_res()) {
    _internal_mutable_calib_res()->::minieye::CameraParam::MergeFrom(from._internal_calib_res());
  }
  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.calib_method() != 0) {
    _internal_set_calib_method(from._internal_calib_method());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  if (!(from.process() <= 0 && from.process() >= 0)) {
    _internal_set_process(from._internal_process());
  }
}

void CalibRspDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.CalibRspDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibRspDetail::CopyFrom(const CalibRspDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.CalibRspDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibRspDetail::IsInitialized() const {
  return true;
}

void CalibRspDetail::InternalSwap(CalibRspDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalibRspDetail, process_)
      + sizeof(CalibRspDetail::process_)
      - PROTOBUF_FIELD_OFFSET(CalibRspDetail, calib_res_)>(
          reinterpret_cast<char*>(&calib_res_),
          reinterpret_cast<char*>(&other->calib_res_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibRspDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalibRsp::InitAsDefaultInstance() {
}
class CalibRsp::_Internal {
 public:
};

CalibRsp::CalibRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  details_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.CalibRsp)
}
CalibRsp::CalibRsp(const CalibRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      details_(from.details_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minieye.CalibRsp)
}

void CalibRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalibRsp_calib_5fparam_2eproto.base);
}

CalibRsp::~CalibRsp() {
  // @@protoc_insertion_point(destructor:minieye.CalibRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalibRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CalibRsp::ArenaDtor(void* object) {
  CalibRsp* _this = reinterpret_cast< CalibRsp* >(object);
  (void)_this;
}
void CalibRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalibRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibRsp& CalibRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalibRsp_calib_5fparam_2eproto.base);
  return *internal_default_instance();
}


void CalibRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.CalibRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalibRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .minieye.CalibRspDetail details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.CalibRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minieye.CalibRspDetail details = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_details(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.CalibRsp)
  return target;
}

size_t CalibRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.CalibRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.CalibRspDetail details = 1;
  total_size += 1UL * this->_internal_details_size();
  for (const auto& msg : this->details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.CalibRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.CalibRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.CalibRsp)
    MergeFrom(*source);
  }
}

void CalibRsp::MergeFrom(const CalibRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.CalibRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  details_.MergeFrom(from.details_);
}

void CalibRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.CalibRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibRsp::CopyFrom(const CalibRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.CalibRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibRsp::IsInitialized() const {
  return true;
}

void CalibRsp::InternalSwap(CalibRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  details_.InternalSwap(&other->details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::CalibParam* Arena::CreateMaybeMessage< ::minieye::CalibParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::CalibParam >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::HomographyMatrix* Arena::CreateMaybeMessage< ::minieye::HomographyMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::HomographyMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::PreCheckReq* Arena::CreateMaybeMessage< ::minieye::PreCheckReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::PreCheckReq >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::PreCheckRsp* Arena::CreateMaybeMessage< ::minieye::PreCheckRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::PreCheckRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::VehicleParam* Arena::CreateMaybeMessage< ::minieye::VehicleParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::VehicleParam >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::CalibReqDetail* Arena::CreateMaybeMessage< ::minieye::CalibReqDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::CalibReqDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::CalibReq* Arena::CreateMaybeMessage< ::minieye::CalibReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::CalibReq >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::CalibRspDetail* Arena::CreateMaybeMessage< ::minieye::CalibRspDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::CalibRspDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::CalibRsp* Arena::CreateMaybeMessage< ::minieye::CalibRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::CalibRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
