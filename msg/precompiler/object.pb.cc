// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#include "object.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_calib_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalibParam_calib_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CamID_camera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraParam_camera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleSignal_vehicle_5fsignal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Object_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Object_FusionInfo_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Object_ImageInfo_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Object_VehicleRigid_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Object_WorldInfo_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Angle3f_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Box3D_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Float_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatArray_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Int_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point2f_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point3D_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseAngle_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rect2f_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Size3D_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XY_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_XYZ_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_object_5fwarning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_Warning_object_5fwarning_2eproto;
namespace perception {
class Object_ImageInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object_ImageInfo> _instance;
} _Object_ImageInfo_default_instance_;
class Object_VehicleRigidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object_VehicleRigid> _instance;
} _Object_VehicleRigid_default_instance_;
class Object_WorldInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object_WorldInfo> _instance;
} _Object_WorldInfo_default_instance_;
class Object_FusionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object_FusionInfo> _instance;
} _Object_FusionInfo_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object> _instance;
} _Object_default_instance_;
class ObjectListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectList> _instance;
} _ObjectList_default_instance_;
}  // namespace perception
static void InitDefaultsscc_info_Object_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Object_default_instance_;
    new (ptr) ::perception::Object();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Object::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Object_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Object_object_2eproto}, {
      &scc_info_Object_ImageInfo_object_2eproto.base,
      &scc_info_Object_WorldInfo_object_2eproto.base,
      &scc_info_Object_FusionInfo_object_2eproto.base,
      &scc_info_Int_geometry_2eproto.base,
      &scc_info_Float_geometry_2eproto.base,
      &scc_info_Object_VehicleRigid_object_2eproto.base,
      &scc_info_FloatArray_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Object_FusionInfo_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Object_FusionInfo_default_instance_;
    new (ptr) ::perception::Object_FusionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Object_FusionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Object_FusionInfo_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Object_FusionInfo_object_2eproto}, {
      &scc_info_Object_ImageInfo_object_2eproto.base,
      &scc_info_Object_WorldInfo_object_2eproto.base,}};

static void InitDefaultsscc_info_Object_ImageInfo_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Object_ImageInfo_default_instance_;
    new (ptr) ::perception::Object_ImageInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Object_ImageInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Object_ImageInfo_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Object_ImageInfo_object_2eproto}, {
      &scc_info_Rect2f_geometry_2eproto.base,
      &scc_info_Point2f_geometry_2eproto.base,
      &scc_info_Box3D_geometry_2eproto.base,
      &scc_info_CamID_camera_2eproto.base,}};

static void InitDefaultsscc_info_Object_VehicleRigid_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Object_VehicleRigid_default_instance_;
    new (ptr) ::perception::Object_VehicleRigid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Object_VehicleRigid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Object_VehicleRigid_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Object_VehicleRigid_object_2eproto}, {
      &scc_info_Float_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Object_WorldInfo_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Object_WorldInfo_default_instance_;
    new (ptr) ::perception::Object_WorldInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Object_WorldInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Object_WorldInfo_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Object_WorldInfo_object_2eproto}, {
      &scc_info_XYZ_geometry_2eproto.base,
      &scc_info_Size3D_geometry_2eproto.base,
      &scc_info_Angle3f_geometry_2eproto.base,
      &scc_info_Box3D_geometry_2eproto.base,
      &scc_info_Int_geometry_2eproto.base,
      &scc_info_PoseAngle_geometry_2eproto.base,
      &scc_info_Point3D_geometry_2eproto.base,
      &scc_info_XY_geometry_2eproto.base,}};

static void InitDefaultsscc_info_ObjectList_object_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_ObjectList_default_instance_;
    new (ptr) ::perception::ObjectList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::ObjectList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ObjectList_object_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_ObjectList_object_2eproto}, {
      &scc_info_Object_object_2eproto.base,
      &scc_info_Warning_object_5fwarning_2eproto.base,
      &scc_info_Rect2f_geometry_2eproto.base,
      &scc_info_CalibParam_calib_5fparam_2eproto.base,
      &scc_info_VehicleSignal_vehicle_5fsignal_2eproto.base,
      &scc_info_CameraParam_camera_2eproto.base,
      &scc_info_CamID_camera_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_object_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_object_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_object_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_object_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Object_ImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Object_ImageInfo, det_rect_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_ImageInfo, reg_rect_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_ImageInfo, track_rect_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_ImageInfo, smooth_rect_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_ImageInfo, plate_rect_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_ImageInfo, wheel_list_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_ImageInfo, reg_pt_list_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_ImageInfo, box_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_ImageInfo, camera_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Object_VehicleRigid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Object_VehicleRigid, meas_along_length_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_VehicleRigid, w_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_VehicleRigid, h_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, vel_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, rel_vel_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, acc_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, pos_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, size_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, angle_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, box_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, id_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, cls_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, val_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, pose_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, ttc_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, headway_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, cipv_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, cipp_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, pose_angle_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, motion_state_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, anchor_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, pos_var_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, size_var_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, pose_angle_var_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, anchor_offset_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_WorldInfo, odom_trace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Object_FusionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Object_FusionInfo, associated_image_infos_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_FusionInfo, associated_world_infos_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_FusionInfo, associated_conf_matrix_),
  PROTOBUF_FIELD_OFFSET(::perception::Object_FusionInfo, fusion_world_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Object, hit_id_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, hit_type_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, hit_type_str_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, frame_cnt_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, life_time_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, time_creation_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, image_info_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, world_info_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, track_status_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, trace_status_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, select_level_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, id_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, fusion_info_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, measure_type_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, frame_id_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, lane_assignment_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, has_cut_lane_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, veh_rigid_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, features_),
  PROTOBUF_FIELD_OFFSET(::perception::Object, key_components_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, list_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, version_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, frame_id_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, warning_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, roi_list_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, tick_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, start_time_us_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, end_time_us_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, profiling_time_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, data_source_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, calib_param_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, vehicle_signal_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, camera_param_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, cam_id_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjectList, cam_prj_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perception::Object_ImageInfo)},
  { 14, -1, sizeof(::perception::Object_VehicleRigid)},
  { 22, -1, sizeof(::perception::Object_WorldInfo)},
  { 50, -1, sizeof(::perception::Object_FusionInfo)},
  { 59, -1, sizeof(::perception::Object)},
  { 86, -1, sizeof(::perception::ObjectList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Object_ImageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Object_VehicleRigid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Object_WorldInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Object_FusionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Object_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_ObjectList_default_instance_),
};

const char descriptor_table_protodef_object_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014object.proto\022\nperception\032\016geometry.pro"
  "to\032\021data_source.proto\032\021calib_param.proto"
  "\032\024vehicle_signal.proto\032\024object_warning.p"
  "roto\032\014camera.proto\"\341\"\n\006Object\022\016\n\006hit_id\030"
  "\001 \001(\005\022/\n\010hit_type\030\002 \001(\0162\035.perception.Obj"
  "ect.ObjectType\022\024\n\014hit_type_str\030\006 \001(\t\022\022\n\n"
  "confidence\030\003 \001(\002\022\021\n\tframe_cnt\030\004 \001(\005\022\021\n\tl"
  "ife_time\030\005 \001(\005\022\025\n\rtime_creation\030\007 \001(\004\0220\n"
  "\nimage_info\030\010 \001(\0132\034.perception.Object.Im"
  "ageInfo\0220\n\nworld_info\030\t \001(\0132\034.perception"
  ".Object.WorldInfo\022\024\n\014track_status\030\n \001(\005\022"
  "\024\n\014trace_status\030\013 \001(\005\022\024\n\014select_level\030\014 "
  "\001(\005\022\n\n\002id\030\017 \001(\r\0222\n\013fusion_info\030\020 \001(\0132\035.p"
  "erception.Object.FusionInfo\0224\n\014measure_t"
  "ype\030\021 \001(\0162\036.perception.Object.MeasureTyp"
  "e\022\021\n\ttimestamp\030\022 \001(\004\022\020\n\010frame_id\030\023 \001(\004\022/"
  "\n\017lane_assignment\030\025 \001(\0132\026.perception.com"
  "mon.Int\022.\n\014has_cut_lane\030\026 \001(\0132\030.percepti"
  "on.common.Float\0222\n\tveh_rigid\030\027 \001(\0132\037.per"
  "ception.Object.VehicleRigid\022/\n\010features\030"
  "\030 \001(\0132\035.perception.common.FloatArray\022*\n\016"
  "key_components\030< \003(\0132\022.perception.Object"
  "\032\235\003\n\tImageInfo\022+\n\010det_rect\030\001 \001(\0132\031.perce"
  "ption.common.Rect2f\022+\n\010reg_rect\030\002 \001(\0132\031."
  "perception.common.Rect2f\022-\n\ntrack_rect\030\003"
  " \001(\0132\031.perception.common.Rect2f\022.\n\013smoot"
  "h_rect\030\004 \001(\0132\031.perception.common.Rect2f\022"
  "-\n\nplate_rect\030\005 \001(\0132\031.perception.common."
  "Rect2f\022-\n\nwheel_list\030\006 \003(\0132\031.perception."
  "common.Rect2f\022/\n\013reg_pt_list\030\007 \003(\0132\032.per"
  "ception.common.Point2f\022%\n\003box\030\n \001(\0132\030.pe"
  "rception.common.Box3D\022!\n\tcamera_id\030\013 \001(\013"
  "2\016.minieye.CamID\032\215\001\n\014VehicleRigid\0223\n\021mea"
  "s_along_length\030\001 \003(\0132\030.perception.common"
  ".Float\022#\n\001w\030\002 \001(\0132\030.perception.common.Fl"
  "oat\022#\n\001h\030\003 \001(\0132\030.perception.common.Float"
  "\032\266\006\n\tWorldInfo\022#\n\003vel\030\001 \001(\0132\026.perception"
  ".common.XYZ\022\'\n\007rel_vel\030\002 \001(\0132\026.perceptio"
  "n.common.XYZ\022#\n\003acc\030\003 \001(\0132\026.perception.c"
  "ommon.XYZ\022#\n\003pos\030\004 \001(\0132\026.perception.comm"
  "on.XYZ\022\'\n\004size\030\005 \001(\0132\031.perception.common"
  ".Size3D\022)\n\005angle\030\006 \001(\0132\032.perception.comm"
  "on.Angle3f\022%\n\003box\030\n \001(\0132\030.perception.com"
  "mon.Box3D\022\n\n\002id\030\013 \001(\r\022#\n\003cls\030\014 \001(\0132\026.per"
  "ception.common.Int\022\013\n\003val\030\r \001(\002\022$\n\004pose\030"
  "\016 \001(\0132\026.perception.common.Int\022\013\n\003ttc\030\017 \001"
  "(\002\022\017\n\007headway\030\020 \001(\002\022\014\n\004cipv\030\021 \001(\005\022\014\n\004cip"
  "p\030\022 \001(\005\0220\n\npose_angle\030\023 \001(\0132\034.perception"
  ".common.PoseAngle\022,\n\014motion_state\030\024 \001(\0132"
  "\026.perception.common.Int\022/\n\006anchor\030\025 \001(\0162"
  "\037.perception.Object.AnchorPtInfo\022+\n\007pos_"
  "var\030\026 \001(\0132\032.perception.common.Point3D\022,\n"
  "\010size_var\030\027 \001(\0132\032.perception.common.Poin"
  "t3D\0222\n\016pose_angle_var\030\030 \001(\0132\032.perception"
  ".common.Point3D\022-\n\ranchor_offset\030\031 \001(\0132\026"
  ".perception.common.XYZ\022)\n\nodom_trace\030\032 \003"
  "(\0132\025.perception.common.XY\032\341\001\n\nFusionInfo"
  "\022<\n\026associated_image_infos\030\001 \003(\0132\034.perce"
  "ption.Object.ImageInfo\022<\n\026associated_wor"
  "ld_infos\030\002 \003(\0132\034.perception.Object.World"
  "Info\022\036\n\026associated_conf_matrix\030\003 \003(\002\0227\n\021"
  "fusion_world_info\030\004 \001(\0132\034.perception.Obj"
  "ect.WorldInfo\"\376\001\n\nObjectType\022\t\n\005kNone\020\000\022"
  "\014\n\010kVehicle\020\001\022\010\n\004kPed\020\002\022\t\n\005kBike\020\003\022\t\n\005kC"
  "one\020\004\022\021\n\rkVehicleWheel\020\005\022\021\n\rkVehiclePlat"
  "e\020\006\022\014\n\010kPedHead\020\007\022\025\n\021kSmallTrafficSign\020\n"
  "\022\023\n\017kBigTrafficSign\020\013\022\021\n\rkTrafficLight\020\014"
  "\022\014\n\010kAnimals\020\r\022\021\n\rkVehicleLight\020\016\022\017\n\013kSt"
  "reetLamp\020\017\022\022\n\016kObjectTypeNum\020\020\"\371\001\n\013Vehic"
  "lePose\022\014\n\010kInvalid\020\000\022\r\n\tkLeftTail\020\001\022\014\n\010k"
  "MidTail\020\002\022\016\n\nkRightTail\020\003\022\r\n\tkLeftHead\020\004"
  "\022\014\n\010kMidHead\020\005\022\016\n\nkRightHead\020\006\022\r\n\tkLeftS"
  "ide\020\007\022\016\n\nkRightSide\020\010\022\016\n\nkLeftCutIn\020\t\022\017\n"
  "\013kRightCutIn\020\n\022\017\n\013kLeftCutOut\020\013\022\020\n\014kRigh"
  "tCutOut\020\014\022\r\n\tkOccluded\020\r\022\020\n\014kUnknownPose"
  "\020\024\"\201\002\n\014AnchorPtInfo\022\020\n\014kVehicleHead\020\000\022\020\n"
  "\014kVehicleTail\020\001\022\026\n\022kVehicleFrontWheel\020\002\022"
  "\025\n\021kVehicleRearWheel\020\003\022\025\n\021kVehicleSomeWh"
  "eel\020\004\022\027\n\023kDetectBottomCenter\020\005\022\032\n\026kVehic"
  "leLeftFrontWheel\020\006\022\031\n\025kVehicleLeftRearWh"
  "eel\020\007\022\033\n\027kVehicleRightFrontWheel\020\010\022\032\n\026kV"
  "ehicleRightRearWheel\020\t\"\224\001\n\013MeasureType\022\032"
  "\n\026kVehicleMeasureHeadReg\020\000\022\032\n\026kVehicleMe"
  "asureTailReg\020\001\022\031\n\025kVehicleMeasureDetect\020"
  "\002\022\030\n\024kVehicleMeasureWheel\020\003\022\030\n\024kVehicleM"
  "easurePlate\020\004\"\372\001\n\014VehicleClass\022\r\n\tkNegat"
  "ive\020\000\022\010\n\004kBus\020\001\022\010\n\004kCar\020\002\022\014\n\010kMiniBus\020\003\022"
  "\020\n\014kBucketTruck\020\004\022\023\n\017kContainerTruck\020\005\022\r"
  "\n\tkTricycle\020\006\022\013\n\007kTanker\020\007\022\024\n\020kCementTan"
  "kTruck\020\010\022\013\n\007kPickup\020\t\022\022\n\016kSedimentTruck\020"
  "\n\022\n\n\006kIveco\020\013\022\017\n\013kSpecialCar\020\014\022\r\n\tkCityA"
  "uto\020\r\022\023\n\017kVehicleUnknown\020\016\"\212\001\n\021TrafficLi"
  "ghtClass\022\016\n\nkTLUnknown\020\000\022\025\n\021kTLMix2Horiz"
  "ontal\020\001\022\023\n\017kTLMix2Vertical\020\002\022\025\n\021kTLMix3H"
  "orizontal\020\003\022\023\n\017kTLMix3Vertical\020\004\022\r\n\tkTLS"
  "ingle\020\005\"Q\n\022TrafficLightStatus\022\017\n\013kTLSUnk"
  "nown\020\000\022\013\n\007kTLSRed\020\001\022\r\n\tkTLSGreen\020\002\022\016\n\nkT"
  "LSYellow\020\003\"\207\001\n\021VehicleLightClass\022\016\n\nkVLU"
  "nknown\020\000\022\020\n\014kVLHeadLight\020\001\022\020\n\014kVLTailLig"
  "ht\020\002\022\021\n\rkVLBrakeLight\020\004\022\024\n\020kVLTurnLeftLi"
  "ght\020\010\022\025\n\021kVLTurnRightLight\020\020\"M\n\022VehicleL"
  "ightStatus\022\017\n\013kVLSUnknown\020\000\022\n\n\006kVLSOn\020\001\022"
  "\013\n\007kVLSOff\020\002\022\r\n\tkVLSFlash\020\003\"\233\001\n\tMoveStat"
  "e\022\016\n\nkMSUnknown\020\000\022\030\n\024kEgoDirectionDrivin"
  "g\020\001\022\030\n\024kEgoDirectionStopped\020\002\022\032\n\026kEgoDir"
  "ectionReversing\020\003\022\016\n\nkOnComming\020\004\022\r\n\tkCr"
  "ossing\020\005\022\017\n\013kStationary\020\006\"f\n\022VehicleRigi"
  "dAnchor\022\014\n\010kVRARear\020\000\022\021\n\rkVRARearWheel\020\001"
  "\022\021\n\rkVRAHeadWheel\020\002\022\014\n\010kVRAHead\020\003\022\016\n\nkVR"
  "AMaxNum\020\004\"S\n\013TrackStatus\022\016\n\nkTSUnknown\020\000"
  "\022\023\n\017kTSFirstDetectd\020\001\022\017\n\013kTSTracking\020\002\022\016"
  "\n\nkTSPredict\020\003\"\205\001\n\021SelectLevelStatus\022\020\n\014"
  "kSLOriginDet\020\000\022\032\n\026kSLDetAfterInnerROINMS"
  "\020\001\022\032\n\026kSLDetAfterCrossROINMS\020\002\022\021\n\rkSLRes"
  "ervered\020\003\022\023\n\017kSLCandidateDet\020\004\"\364\003\n\nObjec"
  "tList\022 \n\004list\030\001 \003(\0132\022.perception.Object\022"
  "\017\n\007version\030\003 \001(\t\022\020\n\010frame_id\030\004 \001(\004\022\021\n\tti"
  "mestamp\030\005 \001(\004\022+\n\007warning\030\006 \001(\0132\032.percept"
  "ion.object.Warning\022+\n\010roi_list\030\007 \003(\0132\031.p"
  "erception.common.Rect2f\022\014\n\004tick\030\t \001(\004\022\025\n"
  "\rstart_time_us\030\n \001(\004\022\023\n\013end_time_us\030\013 \001("
  "\004\022\026\n\016profiling_time\030\014 \003(\004\022(\n\013data_source"
  "\030\017 \001(\0162\023.minieye.DataSource\022(\n\013calib_par"
  "am\030\020 \001(\0132\023.minieye.CalibParam\022.\n\016vehicle"
  "_signal\030\021 \001(\0132\026.minieye.VehicleSignal\022*\n"
  "\014camera_param\030\022 \001(\0132\024.minieye.CameraPara"
  "m\022\036\n\006cam_id\030\023 \001(\0132\016.minieye.CamID\022\022\n\ncam"
  "_prj_id\030\024 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_object_2eproto_deps[6] = {
  &::descriptor_table_calib_5fparam_2eproto,
  &::descriptor_table_camera_2eproto,
  &::descriptor_table_data_5fsource_2eproto,
  &::descriptor_table_geometry_2eproto,
  &::descriptor_table_object_5fwarning_2eproto,
  &::descriptor_table_vehicle_5fsignal_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_object_2eproto_sccs[6] = {
  &scc_info_Object_object_2eproto.base,
  &scc_info_Object_FusionInfo_object_2eproto.base,
  &scc_info_Object_ImageInfo_object_2eproto.base,
  &scc_info_Object_VehicleRigid_object_2eproto.base,
  &scc_info_Object_WorldInfo_object_2eproto.base,
  &scc_info_ObjectList_object_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_object_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_2eproto = {
  false, false, descriptor_table_protodef_object_2eproto, "object.proto", 5101,
  &descriptor_table_object_2eproto_once, descriptor_table_object_2eproto_sccs, descriptor_table_object_2eproto_deps, 6, 6,
  schemas, file_default_instances, TableStruct_object_2eproto::offsets,
  file_level_metadata_object_2eproto, 6, file_level_enum_descriptors_object_2eproto, file_level_service_descriptors_object_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_object_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_object_2eproto)), true);
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_ObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[0];
}
bool Object_ObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_ObjectType Object::kNone;
constexpr Object_ObjectType Object::kVehicle;
constexpr Object_ObjectType Object::kPed;
constexpr Object_ObjectType Object::kBike;
constexpr Object_ObjectType Object::kCone;
constexpr Object_ObjectType Object::kVehicleWheel;
constexpr Object_ObjectType Object::kVehiclePlate;
constexpr Object_ObjectType Object::kPedHead;
constexpr Object_ObjectType Object::kSmallTrafficSign;
constexpr Object_ObjectType Object::kBigTrafficSign;
constexpr Object_ObjectType Object::kTrafficLight;
constexpr Object_ObjectType Object::kAnimals;
constexpr Object_ObjectType Object::kVehicleLight;
constexpr Object_ObjectType Object::kStreetLamp;
constexpr Object_ObjectType Object::kObjectTypeNum;
constexpr Object_ObjectType Object::ObjectType_MIN;
constexpr Object_ObjectType Object::ObjectType_MAX;
constexpr int Object::ObjectType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_VehiclePose_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[1];
}
bool Object_VehiclePose_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_VehiclePose Object::kInvalid;
constexpr Object_VehiclePose Object::kLeftTail;
constexpr Object_VehiclePose Object::kMidTail;
constexpr Object_VehiclePose Object::kRightTail;
constexpr Object_VehiclePose Object::kLeftHead;
constexpr Object_VehiclePose Object::kMidHead;
constexpr Object_VehiclePose Object::kRightHead;
constexpr Object_VehiclePose Object::kLeftSide;
constexpr Object_VehiclePose Object::kRightSide;
constexpr Object_VehiclePose Object::kLeftCutIn;
constexpr Object_VehiclePose Object::kRightCutIn;
constexpr Object_VehiclePose Object::kLeftCutOut;
constexpr Object_VehiclePose Object::kRightCutOut;
constexpr Object_VehiclePose Object::kOccluded;
constexpr Object_VehiclePose Object::kUnknownPose;
constexpr Object_VehiclePose Object::VehiclePose_MIN;
constexpr Object_VehiclePose Object::VehiclePose_MAX;
constexpr int Object::VehiclePose_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_AnchorPtInfo_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[2];
}
bool Object_AnchorPtInfo_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_AnchorPtInfo Object::kVehicleHead;
constexpr Object_AnchorPtInfo Object::kVehicleTail;
constexpr Object_AnchorPtInfo Object::kVehicleFrontWheel;
constexpr Object_AnchorPtInfo Object::kVehicleRearWheel;
constexpr Object_AnchorPtInfo Object::kVehicleSomeWheel;
constexpr Object_AnchorPtInfo Object::kDetectBottomCenter;
constexpr Object_AnchorPtInfo Object::kVehicleLeftFrontWheel;
constexpr Object_AnchorPtInfo Object::kVehicleLeftRearWheel;
constexpr Object_AnchorPtInfo Object::kVehicleRightFrontWheel;
constexpr Object_AnchorPtInfo Object::kVehicleRightRearWheel;
constexpr Object_AnchorPtInfo Object::AnchorPtInfo_MIN;
constexpr Object_AnchorPtInfo Object::AnchorPtInfo_MAX;
constexpr int Object::AnchorPtInfo_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_MeasureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[3];
}
bool Object_MeasureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_MeasureType Object::kVehicleMeasureHeadReg;
constexpr Object_MeasureType Object::kVehicleMeasureTailReg;
constexpr Object_MeasureType Object::kVehicleMeasureDetect;
constexpr Object_MeasureType Object::kVehicleMeasureWheel;
constexpr Object_MeasureType Object::kVehicleMeasurePlate;
constexpr Object_MeasureType Object::MeasureType_MIN;
constexpr Object_MeasureType Object::MeasureType_MAX;
constexpr int Object::MeasureType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_VehicleClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[4];
}
bool Object_VehicleClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_VehicleClass Object::kNegative;
constexpr Object_VehicleClass Object::kBus;
constexpr Object_VehicleClass Object::kCar;
constexpr Object_VehicleClass Object::kMiniBus;
constexpr Object_VehicleClass Object::kBucketTruck;
constexpr Object_VehicleClass Object::kContainerTruck;
constexpr Object_VehicleClass Object::kTricycle;
constexpr Object_VehicleClass Object::kTanker;
constexpr Object_VehicleClass Object::kCementTankTruck;
constexpr Object_VehicleClass Object::kPickup;
constexpr Object_VehicleClass Object::kSedimentTruck;
constexpr Object_VehicleClass Object::kIveco;
constexpr Object_VehicleClass Object::kSpecialCar;
constexpr Object_VehicleClass Object::kCityAuto;
constexpr Object_VehicleClass Object::kVehicleUnknown;
constexpr Object_VehicleClass Object::VehicleClass_MIN;
constexpr Object_VehicleClass Object::VehicleClass_MAX;
constexpr int Object::VehicleClass_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_TrafficLightClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[5];
}
bool Object_TrafficLightClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_TrafficLightClass Object::kTLUnknown;
constexpr Object_TrafficLightClass Object::kTLMix2Horizontal;
constexpr Object_TrafficLightClass Object::kTLMix2Vertical;
constexpr Object_TrafficLightClass Object::kTLMix3Horizontal;
constexpr Object_TrafficLightClass Object::kTLMix3Vertical;
constexpr Object_TrafficLightClass Object::kTLSingle;
constexpr Object_TrafficLightClass Object::TrafficLightClass_MIN;
constexpr Object_TrafficLightClass Object::TrafficLightClass_MAX;
constexpr int Object::TrafficLightClass_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_TrafficLightStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[6];
}
bool Object_TrafficLightStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_TrafficLightStatus Object::kTLSUnknown;
constexpr Object_TrafficLightStatus Object::kTLSRed;
constexpr Object_TrafficLightStatus Object::kTLSGreen;
constexpr Object_TrafficLightStatus Object::kTLSYellow;
constexpr Object_TrafficLightStatus Object::TrafficLightStatus_MIN;
constexpr Object_TrafficLightStatus Object::TrafficLightStatus_MAX;
constexpr int Object::TrafficLightStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_VehicleLightClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[7];
}
bool Object_VehicleLightClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_VehicleLightClass Object::kVLUnknown;
constexpr Object_VehicleLightClass Object::kVLHeadLight;
constexpr Object_VehicleLightClass Object::kVLTailLight;
constexpr Object_VehicleLightClass Object::kVLBrakeLight;
constexpr Object_VehicleLightClass Object::kVLTurnLeftLight;
constexpr Object_VehicleLightClass Object::kVLTurnRightLight;
constexpr Object_VehicleLightClass Object::VehicleLightClass_MIN;
constexpr Object_VehicleLightClass Object::VehicleLightClass_MAX;
constexpr int Object::VehicleLightClass_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_VehicleLightStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[8];
}
bool Object_VehicleLightStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_VehicleLightStatus Object::kVLSUnknown;
constexpr Object_VehicleLightStatus Object::kVLSOn;
constexpr Object_VehicleLightStatus Object::kVLSOff;
constexpr Object_VehicleLightStatus Object::kVLSFlash;
constexpr Object_VehicleLightStatus Object::VehicleLightStatus_MIN;
constexpr Object_VehicleLightStatus Object::VehicleLightStatus_MAX;
constexpr int Object::VehicleLightStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_MoveState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[9];
}
bool Object_MoveState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_MoveState Object::kMSUnknown;
constexpr Object_MoveState Object::kEgoDirectionDriving;
constexpr Object_MoveState Object::kEgoDirectionStopped;
constexpr Object_MoveState Object::kEgoDirectionReversing;
constexpr Object_MoveState Object::kOnComming;
constexpr Object_MoveState Object::kCrossing;
constexpr Object_MoveState Object::kStationary;
constexpr Object_MoveState Object::MoveState_MIN;
constexpr Object_MoveState Object::MoveState_MAX;
constexpr int Object::MoveState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_VehicleRigidAnchor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[10];
}
bool Object_VehicleRigidAnchor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_VehicleRigidAnchor Object::kVRARear;
constexpr Object_VehicleRigidAnchor Object::kVRARearWheel;
constexpr Object_VehicleRigidAnchor Object::kVRAHeadWheel;
constexpr Object_VehicleRigidAnchor Object::kVRAHead;
constexpr Object_VehicleRigidAnchor Object::kVRAMaxNum;
constexpr Object_VehicleRigidAnchor Object::VehicleRigidAnchor_MIN;
constexpr Object_VehicleRigidAnchor Object::VehicleRigidAnchor_MAX;
constexpr int Object::VehicleRigidAnchor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_TrackStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[11];
}
bool Object_TrackStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_TrackStatus Object::kTSUnknown;
constexpr Object_TrackStatus Object::kTSFirstDetectd;
constexpr Object_TrackStatus Object::kTSTracking;
constexpr Object_TrackStatus Object::kTSPredict;
constexpr Object_TrackStatus Object::TrackStatus_MIN;
constexpr Object_TrackStatus Object::TrackStatus_MAX;
constexpr int Object::TrackStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_SelectLevelStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_object_2eproto);
  return file_level_enum_descriptors_object_2eproto[12];
}
bool Object_SelectLevelStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_SelectLevelStatus Object::kSLOriginDet;
constexpr Object_SelectLevelStatus Object::kSLDetAfterInnerROINMS;
constexpr Object_SelectLevelStatus Object::kSLDetAfterCrossROINMS;
constexpr Object_SelectLevelStatus Object::kSLReservered;
constexpr Object_SelectLevelStatus Object::kSLCandidateDet;
constexpr Object_SelectLevelStatus Object::SelectLevelStatus_MIN;
constexpr Object_SelectLevelStatus Object::SelectLevelStatus_MAX;
constexpr int Object::SelectLevelStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Object_ImageInfo::InitAsDefaultInstance() {
  ::perception::_Object_ImageInfo_default_instance_._instance.get_mutable()->det_rect_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
  ::perception::_Object_ImageInfo_default_instance_._instance.get_mutable()->reg_rect_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
  ::perception::_Object_ImageInfo_default_instance_._instance.get_mutable()->track_rect_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
  ::perception::_Object_ImageInfo_default_instance_._instance.get_mutable()->smooth_rect_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
  ::perception::_Object_ImageInfo_default_instance_._instance.get_mutable()->plate_rect_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
  ::perception::_Object_ImageInfo_default_instance_._instance.get_mutable()->box_ = const_cast< ::perception::common::Box3D*>(
      ::perception::common::Box3D::internal_default_instance());
  ::perception::_Object_ImageInfo_default_instance_._instance.get_mutable()->camera_id_ = const_cast< ::minieye::CamID*>(
      ::minieye::CamID::internal_default_instance());
}
class Object_ImageInfo::_Internal {
 public:
  static const ::perception::common::Rect2f& det_rect(const Object_ImageInfo* msg);
  static const ::perception::common::Rect2f& reg_rect(const Object_ImageInfo* msg);
  static const ::perception::common::Rect2f& track_rect(const Object_ImageInfo* msg);
  static const ::perception::common::Rect2f& smooth_rect(const Object_ImageInfo* msg);
  static const ::perception::common::Rect2f& plate_rect(const Object_ImageInfo* msg);
  static const ::perception::common::Box3D& box(const Object_ImageInfo* msg);
  static const ::minieye::CamID& camera_id(const Object_ImageInfo* msg);
};

const ::perception::common::Rect2f&
Object_ImageInfo::_Internal::det_rect(const Object_ImageInfo* msg) {
  return *msg->det_rect_;
}
const ::perception::common::Rect2f&
Object_ImageInfo::_Internal::reg_rect(const Object_ImageInfo* msg) {
  return *msg->reg_rect_;
}
const ::perception::common::Rect2f&
Object_ImageInfo::_Internal::track_rect(const Object_ImageInfo* msg) {
  return *msg->track_rect_;
}
const ::perception::common::Rect2f&
Object_ImageInfo::_Internal::smooth_rect(const Object_ImageInfo* msg) {
  return *msg->smooth_rect_;
}
const ::perception::common::Rect2f&
Object_ImageInfo::_Internal::plate_rect(const Object_ImageInfo* msg) {
  return *msg->plate_rect_;
}
const ::perception::common::Box3D&
Object_ImageInfo::_Internal::box(const Object_ImageInfo* msg) {
  return *msg->box_;
}
const ::minieye::CamID&
Object_ImageInfo::_Internal::camera_id(const Object_ImageInfo* msg) {
  return *msg->camera_id_;
}
void Object_ImageInfo::clear_det_rect() {
  if (GetArena() == nullptr && det_rect_ != nullptr) {
    delete det_rect_;
  }
  det_rect_ = nullptr;
}
void Object_ImageInfo::clear_reg_rect() {
  if (GetArena() == nullptr && reg_rect_ != nullptr) {
    delete reg_rect_;
  }
  reg_rect_ = nullptr;
}
void Object_ImageInfo::clear_track_rect() {
  if (GetArena() == nullptr && track_rect_ != nullptr) {
    delete track_rect_;
  }
  track_rect_ = nullptr;
}
void Object_ImageInfo::clear_smooth_rect() {
  if (GetArena() == nullptr && smooth_rect_ != nullptr) {
    delete smooth_rect_;
  }
  smooth_rect_ = nullptr;
}
void Object_ImageInfo::clear_plate_rect() {
  if (GetArena() == nullptr && plate_rect_ != nullptr) {
    delete plate_rect_;
  }
  plate_rect_ = nullptr;
}
void Object_ImageInfo::clear_wheel_list() {
  wheel_list_.Clear();
}
void Object_ImageInfo::clear_reg_pt_list() {
  reg_pt_list_.Clear();
}
void Object_ImageInfo::clear_box() {
  if (GetArena() == nullptr && box_ != nullptr) {
    delete box_;
  }
  box_ = nullptr;
}
void Object_ImageInfo::clear_camera_id() {
  if (GetArena() == nullptr && camera_id_ != nullptr) {
    delete camera_id_;
  }
  camera_id_ = nullptr;
}
Object_ImageInfo::Object_ImageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wheel_list_(arena),
  reg_pt_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Object.ImageInfo)
}
Object_ImageInfo::Object_ImageInfo(const Object_ImageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wheel_list_(from.wheel_list_),
      reg_pt_list_(from.reg_pt_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_det_rect()) {
    det_rect_ = new ::perception::common::Rect2f(*from.det_rect_);
  } else {
    det_rect_ = nullptr;
  }
  if (from._internal_has_reg_rect()) {
    reg_rect_ = new ::perception::common::Rect2f(*from.reg_rect_);
  } else {
    reg_rect_ = nullptr;
  }
  if (from._internal_has_track_rect()) {
    track_rect_ = new ::perception::common::Rect2f(*from.track_rect_);
  } else {
    track_rect_ = nullptr;
  }
  if (from._internal_has_smooth_rect()) {
    smooth_rect_ = new ::perception::common::Rect2f(*from.smooth_rect_);
  } else {
    smooth_rect_ = nullptr;
  }
  if (from._internal_has_plate_rect()) {
    plate_rect_ = new ::perception::common::Rect2f(*from.plate_rect_);
  } else {
    plate_rect_ = nullptr;
  }
  if (from._internal_has_box()) {
    box_ = new ::perception::common::Box3D(*from.box_);
  } else {
    box_ = nullptr;
  }
  if (from._internal_has_camera_id()) {
    camera_id_ = new ::minieye::CamID(*from.camera_id_);
  } else {
    camera_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perception.Object.ImageInfo)
}

void Object_ImageInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object_ImageInfo_object_2eproto.base);
  ::memset(&det_rect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&det_rect_)) + sizeof(camera_id_));
}

Object_ImageInfo::~Object_ImageInfo() {
  // @@protoc_insertion_point(destructor:perception.Object.ImageInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object_ImageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete det_rect_;
  if (this != internal_default_instance()) delete reg_rect_;
  if (this != internal_default_instance()) delete track_rect_;
  if (this != internal_default_instance()) delete smooth_rect_;
  if (this != internal_default_instance()) delete plate_rect_;
  if (this != internal_default_instance()) delete box_;
  if (this != internal_default_instance()) delete camera_id_;
}

void Object_ImageInfo::ArenaDtor(void* object) {
  Object_ImageInfo* _this = reinterpret_cast< Object_ImageInfo* >(object);
  (void)_this;
}
void Object_ImageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object_ImageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object_ImageInfo& Object_ImageInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object_ImageInfo_object_2eproto.base);
  return *internal_default_instance();
}


void Object_ImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Object.ImageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wheel_list_.Clear();
  reg_pt_list_.Clear();
  if (GetArena() == nullptr && det_rect_ != nullptr) {
    delete det_rect_;
  }
  det_rect_ = nullptr;
  if (GetArena() == nullptr && reg_rect_ != nullptr) {
    delete reg_rect_;
  }
  reg_rect_ = nullptr;
  if (GetArena() == nullptr && track_rect_ != nullptr) {
    delete track_rect_;
  }
  track_rect_ = nullptr;
  if (GetArena() == nullptr && smooth_rect_ != nullptr) {
    delete smooth_rect_;
  }
  smooth_rect_ = nullptr;
  if (GetArena() == nullptr && plate_rect_ != nullptr) {
    delete plate_rect_;
  }
  plate_rect_ = nullptr;
  if (GetArena() == nullptr && box_ != nullptr) {
    delete box_;
  }
  box_ = nullptr;
  if (GetArena() == nullptr && camera_id_ != nullptr) {
    delete camera_id_;
  }
  camera_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object_ImageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.Rect2f det_rect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_det_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Rect2f reg_rect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reg_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Rect2f track_rect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Rect2f smooth_rect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_smooth_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Rect2f plate_rect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_plate_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.common.Rect2f wheel_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wheel_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .perception.common.Point2f reg_pt_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reg_pt_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.common.Box3D box = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.CamID camera_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object_ImageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Object.ImageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.Rect2f det_rect = 1;
  if (this->has_det_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::det_rect(this), target, stream);
  }

  // .perception.common.Rect2f reg_rect = 2;
  if (this->has_reg_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reg_rect(this), target, stream);
  }

  // .perception.common.Rect2f track_rect = 3;
  if (this->has_track_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::track_rect(this), target, stream);
  }

  // .perception.common.Rect2f smooth_rect = 4;
  if (this->has_smooth_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::smooth_rect(this), target, stream);
  }

  // .perception.common.Rect2f plate_rect = 5;
  if (this->has_plate_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::plate_rect(this), target, stream);
  }

  // repeated .perception.common.Rect2f wheel_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wheel_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_wheel_list(i), target, stream);
  }

  // repeated .perception.common.Point2f reg_pt_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reg_pt_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_reg_pt_list(i), target, stream);
  }

  // .perception.common.Box3D box = 10;
  if (this->has_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::box(this), target, stream);
  }

  // .minieye.CamID camera_id = 11;
  if (this->has_camera_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::camera_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Object.ImageInfo)
  return target;
}

size_t Object_ImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Object.ImageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.Rect2f wheel_list = 6;
  total_size += 1UL * this->_internal_wheel_list_size();
  for (const auto& msg : this->wheel_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perception.common.Point2f reg_pt_list = 7;
  total_size += 1UL * this->_internal_reg_pt_list_size();
  for (const auto& msg : this->reg_pt_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.common.Rect2f det_rect = 1;
  if (this->has_det_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *det_rect_);
  }

  // .perception.common.Rect2f reg_rect = 2;
  if (this->has_reg_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reg_rect_);
  }

  // .perception.common.Rect2f track_rect = 3;
  if (this->has_track_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *track_rect_);
  }

  // .perception.common.Rect2f smooth_rect = 4;
  if (this->has_smooth_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *smooth_rect_);
  }

  // .perception.common.Rect2f plate_rect = 5;
  if (this->has_plate_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plate_rect_);
  }

  // .perception.common.Box3D box = 10;
  if (this->has_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_);
  }

  // .minieye.CamID camera_id = 11;
  if (this->has_camera_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object_ImageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Object.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Object_ImageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object_ImageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Object.ImageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Object.ImageInfo)
    MergeFrom(*source);
  }
}

void Object_ImageInfo::MergeFrom(const Object_ImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Object.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wheel_list_.MergeFrom(from.wheel_list_);
  reg_pt_list_.MergeFrom(from.reg_pt_list_);
  if (from.has_det_rect()) {
    _internal_mutable_det_rect()->::perception::common::Rect2f::MergeFrom(from._internal_det_rect());
  }
  if (from.has_reg_rect()) {
    _internal_mutable_reg_rect()->::perception::common::Rect2f::MergeFrom(from._internal_reg_rect());
  }
  if (from.has_track_rect()) {
    _internal_mutable_track_rect()->::perception::common::Rect2f::MergeFrom(from._internal_track_rect());
  }
  if (from.has_smooth_rect()) {
    _internal_mutable_smooth_rect()->::perception::common::Rect2f::MergeFrom(from._internal_smooth_rect());
  }
  if (from.has_plate_rect()) {
    _internal_mutable_plate_rect()->::perception::common::Rect2f::MergeFrom(from._internal_plate_rect());
  }
  if (from.has_box()) {
    _internal_mutable_box()->::perception::common::Box3D::MergeFrom(from._internal_box());
  }
  if (from.has_camera_id()) {
    _internal_mutable_camera_id()->::minieye::CamID::MergeFrom(from._internal_camera_id());
  }
}

void Object_ImageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Object.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object_ImageInfo::CopyFrom(const Object_ImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Object.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_ImageInfo::IsInitialized() const {
  return true;
}

void Object_ImageInfo::InternalSwap(Object_ImageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wheel_list_.InternalSwap(&other->wheel_list_);
  reg_pt_list_.InternalSwap(&other->reg_pt_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Object_ImageInfo, camera_id_)
      + sizeof(Object_ImageInfo::camera_id_)
      - PROTOBUF_FIELD_OFFSET(Object_ImageInfo, det_rect_)>(
          reinterpret_cast<char*>(&det_rect_),
          reinterpret_cast<char*>(&other->det_rect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Object_ImageInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Object_VehicleRigid::InitAsDefaultInstance() {
  ::perception::_Object_VehicleRigid_default_instance_._instance.get_mutable()->w_ = const_cast< ::perception::common::Float*>(
      ::perception::common::Float::internal_default_instance());
  ::perception::_Object_VehicleRigid_default_instance_._instance.get_mutable()->h_ = const_cast< ::perception::common::Float*>(
      ::perception::common::Float::internal_default_instance());
}
class Object_VehicleRigid::_Internal {
 public:
  static const ::perception::common::Float& w(const Object_VehicleRigid* msg);
  static const ::perception::common::Float& h(const Object_VehicleRigid* msg);
};

const ::perception::common::Float&
Object_VehicleRigid::_Internal::w(const Object_VehicleRigid* msg) {
  return *msg->w_;
}
const ::perception::common::Float&
Object_VehicleRigid::_Internal::h(const Object_VehicleRigid* msg) {
  return *msg->h_;
}
void Object_VehicleRigid::clear_meas_along_length() {
  meas_along_length_.Clear();
}
void Object_VehicleRigid::clear_w() {
  if (GetArena() == nullptr && w_ != nullptr) {
    delete w_;
  }
  w_ = nullptr;
}
void Object_VehicleRigid::clear_h() {
  if (GetArena() == nullptr && h_ != nullptr) {
    delete h_;
  }
  h_ = nullptr;
}
Object_VehicleRigid::Object_VehicleRigid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  meas_along_length_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Object.VehicleRigid)
}
Object_VehicleRigid::Object_VehicleRigid(const Object_VehicleRigid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      meas_along_length_(from.meas_along_length_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_w()) {
    w_ = new ::perception::common::Float(*from.w_);
  } else {
    w_ = nullptr;
  }
  if (from._internal_has_h()) {
    h_ = new ::perception::common::Float(*from.h_);
  } else {
    h_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perception.Object.VehicleRigid)
}

void Object_VehicleRigid::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object_VehicleRigid_object_2eproto.base);
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&w_)) + sizeof(h_));
}

Object_VehicleRigid::~Object_VehicleRigid() {
  // @@protoc_insertion_point(destructor:perception.Object.VehicleRigid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object_VehicleRigid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete w_;
  if (this != internal_default_instance()) delete h_;
}

void Object_VehicleRigid::ArenaDtor(void* object) {
  Object_VehicleRigid* _this = reinterpret_cast< Object_VehicleRigid* >(object);
  (void)_this;
}
void Object_VehicleRigid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object_VehicleRigid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object_VehicleRigid& Object_VehicleRigid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object_VehicleRigid_object_2eproto.base);
  return *internal_default_instance();
}


void Object_VehicleRigid::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Object.VehicleRigid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meas_along_length_.Clear();
  if (GetArena() == nullptr && w_ != nullptr) {
    delete w_;
  }
  w_ = nullptr;
  if (GetArena() == nullptr && h_ != nullptr) {
    delete h_;
  }
  h_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object_VehicleRigid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.common.Float meas_along_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_meas_along_length(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.common.Float w = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_w(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Float h = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_h(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object_VehicleRigid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Object.VehicleRigid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.common.Float meas_along_length = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_meas_along_length_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_meas_along_length(i), target, stream);
  }

  // .perception.common.Float w = 2;
  if (this->has_w()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::w(this), target, stream);
  }

  // .perception.common.Float h = 3;
  if (this->has_h()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::h(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Object.VehicleRigid)
  return target;
}

size_t Object_VehicleRigid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Object.VehicleRigid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.Float meas_along_length = 1;
  total_size += 1UL * this->_internal_meas_along_length_size();
  for (const auto& msg : this->meas_along_length_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.common.Float w = 2;
  if (this->has_w()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *w_);
  }

  // .perception.common.Float h = 3;
  if (this->has_h()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *h_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object_VehicleRigid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Object.VehicleRigid)
  GOOGLE_DCHECK_NE(&from, this);
  const Object_VehicleRigid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object_VehicleRigid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Object.VehicleRigid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Object.VehicleRigid)
    MergeFrom(*source);
  }
}

void Object_VehicleRigid::MergeFrom(const Object_VehicleRigid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Object.VehicleRigid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  meas_along_length_.MergeFrom(from.meas_along_length_);
  if (from.has_w()) {
    _internal_mutable_w()->::perception::common::Float::MergeFrom(from._internal_w());
  }
  if (from.has_h()) {
    _internal_mutable_h()->::perception::common::Float::MergeFrom(from._internal_h());
  }
}

void Object_VehicleRigid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Object.VehicleRigid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object_VehicleRigid::CopyFrom(const Object_VehicleRigid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Object.VehicleRigid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_VehicleRigid::IsInitialized() const {
  return true;
}

void Object_VehicleRigid::InternalSwap(Object_VehicleRigid* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  meas_along_length_.InternalSwap(&other->meas_along_length_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Object_VehicleRigid, h_)
      + sizeof(Object_VehicleRigid::h_)
      - PROTOBUF_FIELD_OFFSET(Object_VehicleRigid, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Object_VehicleRigid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Object_WorldInfo::InitAsDefaultInstance() {
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->vel_ = const_cast< ::perception::common::XYZ*>(
      ::perception::common::XYZ::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->rel_vel_ = const_cast< ::perception::common::XYZ*>(
      ::perception::common::XYZ::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->acc_ = const_cast< ::perception::common::XYZ*>(
      ::perception::common::XYZ::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->pos_ = const_cast< ::perception::common::XYZ*>(
      ::perception::common::XYZ::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->size_ = const_cast< ::perception::common::Size3D*>(
      ::perception::common::Size3D::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->angle_ = const_cast< ::perception::common::Angle3f*>(
      ::perception::common::Angle3f::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->box_ = const_cast< ::perception::common::Box3D*>(
      ::perception::common::Box3D::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->cls_ = const_cast< ::perception::common::Int*>(
      ::perception::common::Int::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->pose_ = const_cast< ::perception::common::Int*>(
      ::perception::common::Int::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->pose_angle_ = const_cast< ::perception::common::PoseAngle*>(
      ::perception::common::PoseAngle::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->motion_state_ = const_cast< ::perception::common::Int*>(
      ::perception::common::Int::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->pos_var_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->size_var_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->pose_angle_var_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::_Object_WorldInfo_default_instance_._instance.get_mutable()->anchor_offset_ = const_cast< ::perception::common::XYZ*>(
      ::perception::common::XYZ::internal_default_instance());
}
class Object_WorldInfo::_Internal {
 public:
  static const ::perception::common::XYZ& vel(const Object_WorldInfo* msg);
  static const ::perception::common::XYZ& rel_vel(const Object_WorldInfo* msg);
  static const ::perception::common::XYZ& acc(const Object_WorldInfo* msg);
  static const ::perception::common::XYZ& pos(const Object_WorldInfo* msg);
  static const ::perception::common::Size3D& size(const Object_WorldInfo* msg);
  static const ::perception::common::Angle3f& angle(const Object_WorldInfo* msg);
  static const ::perception::common::Box3D& box(const Object_WorldInfo* msg);
  static const ::perception::common::Int& cls(const Object_WorldInfo* msg);
  static const ::perception::common::Int& pose(const Object_WorldInfo* msg);
  static const ::perception::common::PoseAngle& pose_angle(const Object_WorldInfo* msg);
  static const ::perception::common::Int& motion_state(const Object_WorldInfo* msg);
  static const ::perception::common::Point3D& pos_var(const Object_WorldInfo* msg);
  static const ::perception::common::Point3D& size_var(const Object_WorldInfo* msg);
  static const ::perception::common::Point3D& pose_angle_var(const Object_WorldInfo* msg);
  static const ::perception::common::XYZ& anchor_offset(const Object_WorldInfo* msg);
};

const ::perception::common::XYZ&
Object_WorldInfo::_Internal::vel(const Object_WorldInfo* msg) {
  return *msg->vel_;
}
const ::perception::common::XYZ&
Object_WorldInfo::_Internal::rel_vel(const Object_WorldInfo* msg) {
  return *msg->rel_vel_;
}
const ::perception::common::XYZ&
Object_WorldInfo::_Internal::acc(const Object_WorldInfo* msg) {
  return *msg->acc_;
}
const ::perception::common::XYZ&
Object_WorldInfo::_Internal::pos(const Object_WorldInfo* msg) {
  return *msg->pos_;
}
const ::perception::common::Size3D&
Object_WorldInfo::_Internal::size(const Object_WorldInfo* msg) {
  return *msg->size_;
}
const ::perception::common::Angle3f&
Object_WorldInfo::_Internal::angle(const Object_WorldInfo* msg) {
  return *msg->angle_;
}
const ::perception::common::Box3D&
Object_WorldInfo::_Internal::box(const Object_WorldInfo* msg) {
  return *msg->box_;
}
const ::perception::common::Int&
Object_WorldInfo::_Internal::cls(const Object_WorldInfo* msg) {
  return *msg->cls_;
}
const ::perception::common::Int&
Object_WorldInfo::_Internal::pose(const Object_WorldInfo* msg) {
  return *msg->pose_;
}
const ::perception::common::PoseAngle&
Object_WorldInfo::_Internal::pose_angle(const Object_WorldInfo* msg) {
  return *msg->pose_angle_;
}
const ::perception::common::Int&
Object_WorldInfo::_Internal::motion_state(const Object_WorldInfo* msg) {
  return *msg->motion_state_;
}
const ::perception::common::Point3D&
Object_WorldInfo::_Internal::pos_var(const Object_WorldInfo* msg) {
  return *msg->pos_var_;
}
const ::perception::common::Point3D&
Object_WorldInfo::_Internal::size_var(const Object_WorldInfo* msg) {
  return *msg->size_var_;
}
const ::perception::common::Point3D&
Object_WorldInfo::_Internal::pose_angle_var(const Object_WorldInfo* msg) {
  return *msg->pose_angle_var_;
}
const ::perception::common::XYZ&
Object_WorldInfo::_Internal::anchor_offset(const Object_WorldInfo* msg) {
  return *msg->anchor_offset_;
}
void Object_WorldInfo::clear_vel() {
  if (GetArena() == nullptr && vel_ != nullptr) {
    delete vel_;
  }
  vel_ = nullptr;
}
void Object_WorldInfo::clear_rel_vel() {
  if (GetArena() == nullptr && rel_vel_ != nullptr) {
    delete rel_vel_;
  }
  rel_vel_ = nullptr;
}
void Object_WorldInfo::clear_acc() {
  if (GetArena() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
}
void Object_WorldInfo::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
void Object_WorldInfo::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
void Object_WorldInfo::clear_angle() {
  if (GetArena() == nullptr && angle_ != nullptr) {
    delete angle_;
  }
  angle_ = nullptr;
}
void Object_WorldInfo::clear_box() {
  if (GetArena() == nullptr && box_ != nullptr) {
    delete box_;
  }
  box_ = nullptr;
}
void Object_WorldInfo::clear_cls() {
  if (GetArena() == nullptr && cls_ != nullptr) {
    delete cls_;
  }
  cls_ = nullptr;
}
void Object_WorldInfo::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
void Object_WorldInfo::clear_pose_angle() {
  if (GetArena() == nullptr && pose_angle_ != nullptr) {
    delete pose_angle_;
  }
  pose_angle_ = nullptr;
}
void Object_WorldInfo::clear_motion_state() {
  if (GetArena() == nullptr && motion_state_ != nullptr) {
    delete motion_state_;
  }
  motion_state_ = nullptr;
}
void Object_WorldInfo::clear_pos_var() {
  if (GetArena() == nullptr && pos_var_ != nullptr) {
    delete pos_var_;
  }
  pos_var_ = nullptr;
}
void Object_WorldInfo::clear_size_var() {
  if (GetArena() == nullptr && size_var_ != nullptr) {
    delete size_var_;
  }
  size_var_ = nullptr;
}
void Object_WorldInfo::clear_pose_angle_var() {
  if (GetArena() == nullptr && pose_angle_var_ != nullptr) {
    delete pose_angle_var_;
  }
  pose_angle_var_ = nullptr;
}
void Object_WorldInfo::clear_anchor_offset() {
  if (GetArena() == nullptr && anchor_offset_ != nullptr) {
    delete anchor_offset_;
  }
  anchor_offset_ = nullptr;
}
void Object_WorldInfo::clear_odom_trace() {
  odom_trace_.Clear();
}
Object_WorldInfo::Object_WorldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  odom_trace_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Object.WorldInfo)
}
Object_WorldInfo::Object_WorldInfo(const Object_WorldInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      odom_trace_(from.odom_trace_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vel()) {
    vel_ = new ::perception::common::XYZ(*from.vel_);
  } else {
    vel_ = nullptr;
  }
  if (from._internal_has_rel_vel()) {
    rel_vel_ = new ::perception::common::XYZ(*from.rel_vel_);
  } else {
    rel_vel_ = nullptr;
  }
  if (from._internal_has_acc()) {
    acc_ = new ::perception::common::XYZ(*from.acc_);
  } else {
    acc_ = nullptr;
  }
  if (from._internal_has_pos()) {
    pos_ = new ::perception::common::XYZ(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::perception::common::Size3D(*from.size_);
  } else {
    size_ = nullptr;
  }
  if (from._internal_has_angle()) {
    angle_ = new ::perception::common::Angle3f(*from.angle_);
  } else {
    angle_ = nullptr;
  }
  if (from._internal_has_box()) {
    box_ = new ::perception::common::Box3D(*from.box_);
  } else {
    box_ = nullptr;
  }
  if (from._internal_has_cls()) {
    cls_ = new ::perception::common::Int(*from.cls_);
  } else {
    cls_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::perception::common::Int(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_pose_angle()) {
    pose_angle_ = new ::perception::common::PoseAngle(*from.pose_angle_);
  } else {
    pose_angle_ = nullptr;
  }
  if (from._internal_has_motion_state()) {
    motion_state_ = new ::perception::common::Int(*from.motion_state_);
  } else {
    motion_state_ = nullptr;
  }
  if (from._internal_has_pos_var()) {
    pos_var_ = new ::perception::common::Point3D(*from.pos_var_);
  } else {
    pos_var_ = nullptr;
  }
  if (from._internal_has_size_var()) {
    size_var_ = new ::perception::common::Point3D(*from.size_var_);
  } else {
    size_var_ = nullptr;
  }
  if (from._internal_has_pose_angle_var()) {
    pose_angle_var_ = new ::perception::common::Point3D(*from.pose_angle_var_);
  } else {
    pose_angle_var_ = nullptr;
  }
  if (from._internal_has_anchor_offset()) {
    anchor_offset_ = new ::perception::common::XYZ(*from.anchor_offset_);
  } else {
    anchor_offset_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&anchor_) -
    reinterpret_cast<char*>(&id_)) + sizeof(anchor_));
  // @@protoc_insertion_point(copy_constructor:perception.Object.WorldInfo)
}

void Object_WorldInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object_WorldInfo_object_2eproto.base);
  ::memset(&vel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anchor_) -
      reinterpret_cast<char*>(&vel_)) + sizeof(anchor_));
}

Object_WorldInfo::~Object_WorldInfo() {
  // @@protoc_insertion_point(destructor:perception.Object.WorldInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object_WorldInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vel_;
  if (this != internal_default_instance()) delete rel_vel_;
  if (this != internal_default_instance()) delete acc_;
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete angle_;
  if (this != internal_default_instance()) delete box_;
  if (this != internal_default_instance()) delete cls_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete pose_angle_;
  if (this != internal_default_instance()) delete motion_state_;
  if (this != internal_default_instance()) delete pos_var_;
  if (this != internal_default_instance()) delete size_var_;
  if (this != internal_default_instance()) delete pose_angle_var_;
  if (this != internal_default_instance()) delete anchor_offset_;
}

void Object_WorldInfo::ArenaDtor(void* object) {
  Object_WorldInfo* _this = reinterpret_cast< Object_WorldInfo* >(object);
  (void)_this;
}
void Object_WorldInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object_WorldInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object_WorldInfo& Object_WorldInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object_WorldInfo_object_2eproto.base);
  return *internal_default_instance();
}


void Object_WorldInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Object.WorldInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  odom_trace_.Clear();
  if (GetArena() == nullptr && vel_ != nullptr) {
    delete vel_;
  }
  vel_ = nullptr;
  if (GetArena() == nullptr && rel_vel_ != nullptr) {
    delete rel_vel_;
  }
  rel_vel_ = nullptr;
  if (GetArena() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  if (GetArena() == nullptr && angle_ != nullptr) {
    delete angle_;
  }
  angle_ = nullptr;
  if (GetArena() == nullptr && box_ != nullptr) {
    delete box_;
  }
  box_ = nullptr;
  if (GetArena() == nullptr && cls_ != nullptr) {
    delete cls_;
  }
  cls_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && pose_angle_ != nullptr) {
    delete pose_angle_;
  }
  pose_angle_ = nullptr;
  if (GetArena() == nullptr && motion_state_ != nullptr) {
    delete motion_state_;
  }
  motion_state_ = nullptr;
  if (GetArena() == nullptr && pos_var_ != nullptr) {
    delete pos_var_;
  }
  pos_var_ = nullptr;
  if (GetArena() == nullptr && size_var_ != nullptr) {
    delete size_var_;
  }
  size_var_ = nullptr;
  if (GetArena() == nullptr && pose_angle_var_ != nullptr) {
    delete pose_angle_var_;
  }
  pose_angle_var_ = nullptr;
  if (GetArena() == nullptr && anchor_offset_ != nullptr) {
    delete anchor_offset_;
  }
  anchor_offset_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anchor_) -
      reinterpret_cast<char*>(&id_)) + sizeof(anchor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object_WorldInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.XYZ vel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.XYZ rel_vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rel_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.XYZ acc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.XYZ pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Size3D size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Angle3f angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Box3D box = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Int cls = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float val = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .perception.common.Int pose = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ttc = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          ttc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float headway = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          headway_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 cipv = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          cipv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cipp = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          cipp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.PoseAngle pose_angle = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Int motion_state = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.Object.AnchorPtInfo anchor = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_anchor(static_cast<::perception::Object_AnchorPtInfo>(val));
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D pos_var = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_var(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D size_var = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_size_var(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D pose_angle_var = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_angle_var(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.XYZ anchor_offset = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.common.XY odom_trace = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_odom_trace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object_WorldInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Object.WorldInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.XYZ vel = 1;
  if (this->has_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vel(this), target, stream);
  }

  // .perception.common.XYZ rel_vel = 2;
  if (this->has_rel_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rel_vel(this), target, stream);
  }

  // .perception.common.XYZ acc = 3;
  if (this->has_acc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acc(this), target, stream);
  }

  // .perception.common.XYZ pos = 4;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pos(this), target, stream);
  }

  // .perception.common.Size3D size = 5;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::size(this), target, stream);
  }

  // .perception.common.Angle3f angle = 6;
  if (this->has_angle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::angle(this), target, stream);
  }

  // .perception.common.Box3D box = 10;
  if (this->has_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::box(this), target, stream);
  }

  // uint32 id = 11;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_id(), target);
  }

  // .perception.common.Int cls = 12;
  if (this->has_cls()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::cls(this), target, stream);
  }

  // float val = 13;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_val(), target);
  }

  // .perception.common.Int pose = 14;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::pose(this), target, stream);
  }

  // float ttc = 15;
  if (!(this->ttc() <= 0 && this->ttc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_ttc(), target);
  }

  // float headway = 16;
  if (!(this->headway() <= 0 && this->headway() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_headway(), target);
  }

  // int32 cipv = 17;
  if (this->cipv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_cipv(), target);
  }

  // int32 cipp = 18;
  if (this->cipp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_cipp(), target);
  }

  // .perception.common.PoseAngle pose_angle = 19;
  if (this->has_pose_angle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::pose_angle(this), target, stream);
  }

  // .perception.common.Int motion_state = 20;
  if (this->has_motion_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::motion_state(this), target, stream);
  }

  // .perception.Object.AnchorPtInfo anchor = 21;
  if (this->anchor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_anchor(), target);
  }

  // .perception.common.Point3D pos_var = 22;
  if (this->has_pos_var()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::pos_var(this), target, stream);
  }

  // .perception.common.Point3D size_var = 23;
  if (this->has_size_var()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::size_var(this), target, stream);
  }

  // .perception.common.Point3D pose_angle_var = 24;
  if (this->has_pose_angle_var()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::pose_angle_var(this), target, stream);
  }

  // .perception.common.XYZ anchor_offset = 25;
  if (this->has_anchor_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::anchor_offset(this), target, stream);
  }

  // repeated .perception.common.XY odom_trace = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_odom_trace_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_odom_trace(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Object.WorldInfo)
  return target;
}

size_t Object_WorldInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Object.WorldInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.XY odom_trace = 26;
  total_size += 2UL * this->_internal_odom_trace_size();
  for (const auto& msg : this->odom_trace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.common.XYZ vel = 1;
  if (this->has_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_);
  }

  // .perception.common.XYZ rel_vel = 2;
  if (this->has_rel_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rel_vel_);
  }

  // .perception.common.XYZ acc = 3;
  if (this->has_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_);
  }

  // .perception.common.XYZ pos = 4;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .perception.common.Size3D size = 5;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .perception.common.Angle3f angle = 6;
  if (this->has_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angle_);
  }

  // .perception.common.Box3D box = 10;
  if (this->has_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_);
  }

  // .perception.common.Int cls = 12;
  if (this->has_cls()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cls_);
  }

  // .perception.common.Int pose = 14;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .perception.common.PoseAngle pose_angle = 19;
  if (this->has_pose_angle()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_angle_);
  }

  // .perception.common.Int motion_state = 20;
  if (this->has_motion_state()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *motion_state_);
  }

  // .perception.common.Point3D pos_var = 22;
  if (this->has_pos_var()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_var_);
  }

  // .perception.common.Point3D size_var = 23;
  if (this->has_size_var()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_var_);
  }

  // .perception.common.Point3D pose_angle_var = 24;
  if (this->has_pose_angle_var()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_angle_var_);
  }

  // .perception.common.XYZ anchor_offset = 25;
  if (this->has_anchor_offset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anchor_offset_);
  }

  // uint32 id = 11;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // float val = 13;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    total_size += 1 + 4;
  }

  // float ttc = 15;
  if (!(this->ttc() <= 0 && this->ttc() >= 0)) {
    total_size += 1 + 4;
  }

  // float headway = 16;
  if (!(this->headway() <= 0 && this->headway() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 cipv = 17;
  if (this->cipv() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cipv());
  }

  // int32 cipp = 18;
  if (this->cipp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cipp());
  }

  // .perception.Object.AnchorPtInfo anchor = 21;
  if (this->anchor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_anchor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object_WorldInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Object.WorldInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Object_WorldInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object_WorldInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Object.WorldInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Object.WorldInfo)
    MergeFrom(*source);
  }
}

void Object_WorldInfo::MergeFrom(const Object_WorldInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Object.WorldInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  odom_trace_.MergeFrom(from.odom_trace_);
  if (from.has_vel()) {
    _internal_mutable_vel()->::perception::common::XYZ::MergeFrom(from._internal_vel());
  }
  if (from.has_rel_vel()) {
    _internal_mutable_rel_vel()->::perception::common::XYZ::MergeFrom(from._internal_rel_vel());
  }
  if (from.has_acc()) {
    _internal_mutable_acc()->::perception::common::XYZ::MergeFrom(from._internal_acc());
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::perception::common::XYZ::MergeFrom(from._internal_pos());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::perception::common::Size3D::MergeFrom(from._internal_size());
  }
  if (from.has_angle()) {
    _internal_mutable_angle()->::perception::common::Angle3f::MergeFrom(from._internal_angle());
  }
  if (from.has_box()) {
    _internal_mutable_box()->::perception::common::Box3D::MergeFrom(from._internal_box());
  }
  if (from.has_cls()) {
    _internal_mutable_cls()->::perception::common::Int::MergeFrom(from._internal_cls());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::perception::common::Int::MergeFrom(from._internal_pose());
  }
  if (from.has_pose_angle()) {
    _internal_mutable_pose_angle()->::perception::common::PoseAngle::MergeFrom(from._internal_pose_angle());
  }
  if (from.has_motion_state()) {
    _internal_mutable_motion_state()->::perception::common::Int::MergeFrom(from._internal_motion_state());
  }
  if (from.has_pos_var()) {
    _internal_mutable_pos_var()->::perception::common::Point3D::MergeFrom(from._internal_pos_var());
  }
  if (from.has_size_var()) {
    _internal_mutable_size_var()->::perception::common::Point3D::MergeFrom(from._internal_size_var());
  }
  if (from.has_pose_angle_var()) {
    _internal_mutable_pose_angle_var()->::perception::common::Point3D::MergeFrom(from._internal_pose_angle_var());
  }
  if (from.has_anchor_offset()) {
    _internal_mutable_anchor_offset()->::perception::common::XYZ::MergeFrom(from._internal_anchor_offset());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.val() <= 0 && from.val() >= 0)) {
    _internal_set_val(from._internal_val());
  }
  if (!(from.ttc() <= 0 && from.ttc() >= 0)) {
    _internal_set_ttc(from._internal_ttc());
  }
  if (!(from.headway() <= 0 && from.headway() >= 0)) {
    _internal_set_headway(from._internal_headway());
  }
  if (from.cipv() != 0) {
    _internal_set_cipv(from._internal_cipv());
  }
  if (from.cipp() != 0) {
    _internal_set_cipp(from._internal_cipp());
  }
  if (from.anchor() != 0) {
    _internal_set_anchor(from._internal_anchor());
  }
}

void Object_WorldInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Object.WorldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object_WorldInfo::CopyFrom(const Object_WorldInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Object.WorldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_WorldInfo::IsInitialized() const {
  return true;
}

void Object_WorldInfo::InternalSwap(Object_WorldInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  odom_trace_.InternalSwap(&other->odom_trace_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Object_WorldInfo, anchor_)
      + sizeof(Object_WorldInfo::anchor_)
      - PROTOBUF_FIELD_OFFSET(Object_WorldInfo, vel_)>(
          reinterpret_cast<char*>(&vel_),
          reinterpret_cast<char*>(&other->vel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Object_WorldInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Object_FusionInfo::InitAsDefaultInstance() {
  ::perception::_Object_FusionInfo_default_instance_._instance.get_mutable()->fusion_world_info_ = const_cast< ::perception::Object_WorldInfo*>(
      ::perception::Object_WorldInfo::internal_default_instance());
}
class Object_FusionInfo::_Internal {
 public:
  static const ::perception::Object_WorldInfo& fusion_world_info(const Object_FusionInfo* msg);
};

const ::perception::Object_WorldInfo&
Object_FusionInfo::_Internal::fusion_world_info(const Object_FusionInfo* msg) {
  return *msg->fusion_world_info_;
}
Object_FusionInfo::Object_FusionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  associated_image_infos_(arena),
  associated_world_infos_(arena),
  associated_conf_matrix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Object.FusionInfo)
}
Object_FusionInfo::Object_FusionInfo(const Object_FusionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      associated_image_infos_(from.associated_image_infos_),
      associated_world_infos_(from.associated_world_infos_),
      associated_conf_matrix_(from.associated_conf_matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fusion_world_info()) {
    fusion_world_info_ = new ::perception::Object_WorldInfo(*from.fusion_world_info_);
  } else {
    fusion_world_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perception.Object.FusionInfo)
}

void Object_FusionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object_FusionInfo_object_2eproto.base);
  fusion_world_info_ = nullptr;
}

Object_FusionInfo::~Object_FusionInfo() {
  // @@protoc_insertion_point(destructor:perception.Object.FusionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object_FusionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fusion_world_info_;
}

void Object_FusionInfo::ArenaDtor(void* object) {
  Object_FusionInfo* _this = reinterpret_cast< Object_FusionInfo* >(object);
  (void)_this;
}
void Object_FusionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object_FusionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object_FusionInfo& Object_FusionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object_FusionInfo_object_2eproto.base);
  return *internal_default_instance();
}


void Object_FusionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Object.FusionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  associated_image_infos_.Clear();
  associated_world_infos_.Clear();
  associated_conf_matrix_.Clear();
  if (GetArena() == nullptr && fusion_world_info_ != nullptr) {
    delete fusion_world_info_;
  }
  fusion_world_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object_FusionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.Object.ImageInfo associated_image_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_associated_image_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .perception.Object.WorldInfo associated_world_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_associated_world_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float associated_conf_matrix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_associated_conf_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_associated_conf_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .perception.Object.WorldInfo fusion_world_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fusion_world_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object_FusionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Object.FusionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.Object.ImageInfo associated_image_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_associated_image_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_associated_image_infos(i), target, stream);
  }

  // repeated .perception.Object.WorldInfo associated_world_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_associated_world_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_associated_world_infos(i), target, stream);
  }

  // repeated float associated_conf_matrix = 3;
  if (this->_internal_associated_conf_matrix_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_associated_conf_matrix(), target);
  }

  // .perception.Object.WorldInfo fusion_world_info = 4;
  if (this->has_fusion_world_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fusion_world_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Object.FusionInfo)
  return target;
}

size_t Object_FusionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Object.FusionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.Object.ImageInfo associated_image_infos = 1;
  total_size += 1UL * this->_internal_associated_image_infos_size();
  for (const auto& msg : this->associated_image_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perception.Object.WorldInfo associated_world_infos = 2;
  total_size += 1UL * this->_internal_associated_world_infos_size();
  for (const auto& msg : this->associated_world_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float associated_conf_matrix = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_associated_conf_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _associated_conf_matrix_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .perception.Object.WorldInfo fusion_world_info = 4;
  if (this->has_fusion_world_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fusion_world_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object_FusionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Object.FusionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Object_FusionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object_FusionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Object.FusionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Object.FusionInfo)
    MergeFrom(*source);
  }
}

void Object_FusionInfo::MergeFrom(const Object_FusionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Object.FusionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  associated_image_infos_.MergeFrom(from.associated_image_infos_);
  associated_world_infos_.MergeFrom(from.associated_world_infos_);
  associated_conf_matrix_.MergeFrom(from.associated_conf_matrix_);
  if (from.has_fusion_world_info()) {
    _internal_mutable_fusion_world_info()->::perception::Object_WorldInfo::MergeFrom(from._internal_fusion_world_info());
  }
}

void Object_FusionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Object.FusionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object_FusionInfo::CopyFrom(const Object_FusionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Object.FusionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_FusionInfo::IsInitialized() const {
  return true;
}

void Object_FusionInfo::InternalSwap(Object_FusionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  associated_image_infos_.InternalSwap(&other->associated_image_infos_);
  associated_world_infos_.InternalSwap(&other->associated_world_infos_);
  associated_conf_matrix_.InternalSwap(&other->associated_conf_matrix_);
  swap(fusion_world_info_, other->fusion_world_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Object_FusionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Object::InitAsDefaultInstance() {
  ::perception::_Object_default_instance_._instance.get_mutable()->image_info_ = const_cast< ::perception::Object_ImageInfo*>(
      ::perception::Object_ImageInfo::internal_default_instance());
  ::perception::_Object_default_instance_._instance.get_mutable()->world_info_ = const_cast< ::perception::Object_WorldInfo*>(
      ::perception::Object_WorldInfo::internal_default_instance());
  ::perception::_Object_default_instance_._instance.get_mutable()->fusion_info_ = const_cast< ::perception::Object_FusionInfo*>(
      ::perception::Object_FusionInfo::internal_default_instance());
  ::perception::_Object_default_instance_._instance.get_mutable()->lane_assignment_ = const_cast< ::perception::common::Int*>(
      ::perception::common::Int::internal_default_instance());
  ::perception::_Object_default_instance_._instance.get_mutable()->has_cut_lane_ = const_cast< ::perception::common::Float*>(
      ::perception::common::Float::internal_default_instance());
  ::perception::_Object_default_instance_._instance.get_mutable()->veh_rigid_ = const_cast< ::perception::Object_VehicleRigid*>(
      ::perception::Object_VehicleRigid::internal_default_instance());
  ::perception::_Object_default_instance_._instance.get_mutable()->features_ = const_cast< ::perception::common::FloatArray*>(
      ::perception::common::FloatArray::internal_default_instance());
}
class Object::_Internal {
 public:
  static const ::perception::Object_ImageInfo& image_info(const Object* msg);
  static const ::perception::Object_WorldInfo& world_info(const Object* msg);
  static const ::perception::Object_FusionInfo& fusion_info(const Object* msg);
  static const ::perception::common::Int& lane_assignment(const Object* msg);
  static const ::perception::common::Float& has_cut_lane(const Object* msg);
  static const ::perception::Object_VehicleRigid& veh_rigid(const Object* msg);
  static const ::perception::common::FloatArray& features(const Object* msg);
};

const ::perception::Object_ImageInfo&
Object::_Internal::image_info(const Object* msg) {
  return *msg->image_info_;
}
const ::perception::Object_WorldInfo&
Object::_Internal::world_info(const Object* msg) {
  return *msg->world_info_;
}
const ::perception::Object_FusionInfo&
Object::_Internal::fusion_info(const Object* msg) {
  return *msg->fusion_info_;
}
const ::perception::common::Int&
Object::_Internal::lane_assignment(const Object* msg) {
  return *msg->lane_assignment_;
}
const ::perception::common::Float&
Object::_Internal::has_cut_lane(const Object* msg) {
  return *msg->has_cut_lane_;
}
const ::perception::Object_VehicleRigid&
Object::_Internal::veh_rigid(const Object* msg) {
  return *msg->veh_rigid_;
}
const ::perception::common::FloatArray&
Object::_Internal::features(const Object* msg) {
  return *msg->features_;
}
void Object::clear_lane_assignment() {
  if (GetArena() == nullptr && lane_assignment_ != nullptr) {
    delete lane_assignment_;
  }
  lane_assignment_ = nullptr;
}
void Object::clear_has_cut_lane() {
  if (GetArena() == nullptr && has_cut_lane_ != nullptr) {
    delete has_cut_lane_;
  }
  has_cut_lane_ = nullptr;
}
void Object::clear_features() {
  if (GetArena() == nullptr && features_ != nullptr) {
    delete features_;
  }
  features_ = nullptr;
}
Object::Object(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  key_components_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Object)
}
Object::Object(const Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      key_components_(from.key_components_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hit_type_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hit_type_str().empty()) {
    hit_type_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hit_type_str(),
      GetArena());
  }
  if (from._internal_has_image_info()) {
    image_info_ = new ::perception::Object_ImageInfo(*from.image_info_);
  } else {
    image_info_ = nullptr;
  }
  if (from._internal_has_world_info()) {
    world_info_ = new ::perception::Object_WorldInfo(*from.world_info_);
  } else {
    world_info_ = nullptr;
  }
  if (from._internal_has_fusion_info()) {
    fusion_info_ = new ::perception::Object_FusionInfo(*from.fusion_info_);
  } else {
    fusion_info_ = nullptr;
  }
  if (from._internal_has_lane_assignment()) {
    lane_assignment_ = new ::perception::common::Int(*from.lane_assignment_);
  } else {
    lane_assignment_ = nullptr;
  }
  if (from._internal_has_has_cut_lane()) {
    has_cut_lane_ = new ::perception::common::Float(*from.has_cut_lane_);
  } else {
    has_cut_lane_ = nullptr;
  }
  if (from._internal_has_veh_rigid()) {
    veh_rigid_ = new ::perception::Object_VehicleRigid(*from.veh_rigid_);
  } else {
    veh_rigid_ = nullptr;
  }
  if (from._internal_has_features()) {
    features_ = new ::perception::common::FloatArray(*from.features_);
  } else {
    features_ = nullptr;
  }
  ::memcpy(&hit_id_, &from.hit_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
    reinterpret_cast<char*>(&hit_id_)) + sizeof(frame_id_));
  // @@protoc_insertion_point(copy_constructor:perception.Object)
}

void Object::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object_object_2eproto.base);
  hit_type_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&image_info_)) + sizeof(frame_id_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:perception.Object)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hit_type_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_info_;
  if (this != internal_default_instance()) delete world_info_;
  if (this != internal_default_instance()) delete fusion_info_;
  if (this != internal_default_instance()) delete lane_assignment_;
  if (this != internal_default_instance()) delete has_cut_lane_;
  if (this != internal_default_instance()) delete veh_rigid_;
  if (this != internal_default_instance()) delete features_;
}

void Object::ArenaDtor(void* object) {
  Object* _this = reinterpret_cast< Object* >(object);
  (void)_this;
}
void Object::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object& Object::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object_object_2eproto.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_components_.Clear();
  hit_type_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && image_info_ != nullptr) {
    delete image_info_;
  }
  image_info_ = nullptr;
  if (GetArena() == nullptr && world_info_ != nullptr) {
    delete world_info_;
  }
  world_info_ = nullptr;
  if (GetArena() == nullptr && fusion_info_ != nullptr) {
    delete fusion_info_;
  }
  fusion_info_ = nullptr;
  if (GetArena() == nullptr && lane_assignment_ != nullptr) {
    delete lane_assignment_;
  }
  lane_assignment_ = nullptr;
  if (GetArena() == nullptr && has_cut_lane_ != nullptr) {
    delete has_cut_lane_;
  }
  has_cut_lane_ = nullptr;
  if (GetArena() == nullptr && veh_rigid_ != nullptr) {
    delete veh_rigid_;
  }
  veh_rigid_ = nullptr;
  if (GetArena() == nullptr && features_ != nullptr) {
    delete features_;
  }
  features_ = nullptr;
  ::memset(&hit_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&hit_id_)) + sizeof(frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 hit_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.Object.ObjectType hit_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hit_type(static_cast<::perception::Object_ObjectType>(val));
        } else goto handle_unusual;
        continue;
      // float confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 frame_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frame_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 life_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          life_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hit_type_str = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_hit_type_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "perception.Object.hit_type_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 time_creation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          time_creation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.Object.ImageInfo image_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.Object.WorldInfo world_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 track_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          track_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trace_status = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          trace_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 select_level = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          select_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.Object.FusionInfo fusion_info = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_fusion_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.Object.MeasureType measure_type = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_measure_type(static_cast<::perception::Object_MeasureType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Int lane_assignment = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Float has_cut_lane = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_has_cut_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.Object.VehicleRigid veh_rigid = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_veh_rigid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.FloatArray features = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_features(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.Object key_components = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_key_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<482>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hit_id = 1;
  if (this->hit_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hit_id(), target);
  }

  // .perception.Object.ObjectType hit_type = 2;
  if (this->hit_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_hit_type(), target);
  }

  // float confidence = 3;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_confidence(), target);
  }

  // int32 frame_cnt = 4;
  if (this->frame_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_frame_cnt(), target);
  }

  // int32 life_time = 5;
  if (this->life_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_life_time(), target);
  }

  // string hit_type_str = 6;
  if (this->hit_type_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hit_type_str().data(), static_cast<int>(this->_internal_hit_type_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "perception.Object.hit_type_str");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hit_type_str(), target);
  }

  // uint64 time_creation = 7;
  if (this->time_creation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_time_creation(), target);
  }

  // .perception.Object.ImageInfo image_info = 8;
  if (this->has_image_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::image_info(this), target, stream);
  }

  // .perception.Object.WorldInfo world_info = 9;
  if (this->has_world_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::world_info(this), target, stream);
  }

  // int32 track_status = 10;
  if (this->track_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_track_status(), target);
  }

  // int32 trace_status = 11;
  if (this->trace_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_trace_status(), target);
  }

  // int32 select_level = 12;
  if (this->select_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_select_level(), target);
  }

  // uint32 id = 15;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_id(), target);
  }

  // .perception.Object.FusionInfo fusion_info = 16;
  if (this->has_fusion_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::fusion_info(this), target, stream);
  }

  // .perception.Object.MeasureType measure_type = 17;
  if (this->measure_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_measure_type(), target);
  }

  // uint64 timestamp = 18;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_timestamp(), target);
  }

  // uint64 frame_id = 19;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_frame_id(), target);
  }

  // .perception.common.Int lane_assignment = 21;
  if (this->has_lane_assignment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::lane_assignment(this), target, stream);
  }

  // .perception.common.Float has_cut_lane = 22;
  if (this->has_has_cut_lane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::has_cut_lane(this), target, stream);
  }

  // .perception.Object.VehicleRigid veh_rigid = 23;
  if (this->has_veh_rigid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::veh_rigid(this), target, stream);
  }

  // .perception.common.FloatArray features = 24;
  if (this->has_features()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::features(this), target, stream);
  }

  // repeated .perception.Object key_components = 60;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_key_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, this->_internal_key_components(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Object)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.Object key_components = 60;
  total_size += 2UL * this->_internal_key_components_size();
  for (const auto& msg : this->key_components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string hit_type_str = 6;
  if (this->hit_type_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hit_type_str());
  }

  // .perception.Object.ImageInfo image_info = 8;
  if (this->has_image_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_info_);
  }

  // .perception.Object.WorldInfo world_info = 9;
  if (this->has_world_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_info_);
  }

  // .perception.Object.FusionInfo fusion_info = 16;
  if (this->has_fusion_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fusion_info_);
  }

  // .perception.common.Int lane_assignment = 21;
  if (this->has_lane_assignment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lane_assignment_);
  }

  // .perception.common.Float has_cut_lane = 22;
  if (this->has_has_cut_lane()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *has_cut_lane_);
  }

  // .perception.Object.VehicleRigid veh_rigid = 23;
  if (this->has_veh_rigid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *veh_rigid_);
  }

  // .perception.common.FloatArray features = 24;
  if (this->has_features()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *features_);
  }

  // int32 hit_id = 1;
  if (this->hit_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hit_id());
  }

  // .perception.Object.ObjectType hit_type = 2;
  if (this->hit_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hit_type());
  }

  // float confidence = 3;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 frame_cnt = 4;
  if (this->frame_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_cnt());
  }

  // uint64 time_creation = 7;
  if (this->time_creation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_creation());
  }

  // int32 life_time = 5;
  if (this->life_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_life_time());
  }

  // int32 track_status = 10;
  if (this->track_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_track_status());
  }

  // int32 trace_status = 11;
  if (this->trace_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trace_status());
  }

  // int32 select_level = 12;
  if (this->select_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_select_level());
  }

  // uint32 id = 15;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .perception.Object.MeasureType measure_type = 17;
  if (this->measure_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_measure_type());
  }

  // uint64 timestamp = 18;
  if (this->timestamp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 frame_id = 19;
  if (this->frame_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Object)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_components_.MergeFrom(from.key_components_);
  if (from.hit_type_str().size() > 0) {
    _internal_set_hit_type_str(from._internal_hit_type_str());
  }
  if (from.has_image_info()) {
    _internal_mutable_image_info()->::perception::Object_ImageInfo::MergeFrom(from._internal_image_info());
  }
  if (from.has_world_info()) {
    _internal_mutable_world_info()->::perception::Object_WorldInfo::MergeFrom(from._internal_world_info());
  }
  if (from.has_fusion_info()) {
    _internal_mutable_fusion_info()->::perception::Object_FusionInfo::MergeFrom(from._internal_fusion_info());
  }
  if (from.has_lane_assignment()) {
    _internal_mutable_lane_assignment()->::perception::common::Int::MergeFrom(from._internal_lane_assignment());
  }
  if (from.has_has_cut_lane()) {
    _internal_mutable_has_cut_lane()->::perception::common::Float::MergeFrom(from._internal_has_cut_lane());
  }
  if (from.has_veh_rigid()) {
    _internal_mutable_veh_rigid()->::perception::Object_VehicleRigid::MergeFrom(from._internal_veh_rigid());
  }
  if (from.has_features()) {
    _internal_mutable_features()->::perception::common::FloatArray::MergeFrom(from._internal_features());
  }
  if (from.hit_id() != 0) {
    _internal_set_hit_id(from._internal_hit_id());
  }
  if (from.hit_type() != 0) {
    _internal_set_hit_type(from._internal_hit_type());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from.frame_cnt() != 0) {
    _internal_set_frame_cnt(from._internal_frame_cnt());
  }
  if (from.time_creation() != 0) {
    _internal_set_time_creation(from._internal_time_creation());
  }
  if (from.life_time() != 0) {
    _internal_set_life_time(from._internal_life_time());
  }
  if (from.track_status() != 0) {
    _internal_set_track_status(from._internal_track_status());
  }
  if (from.trace_status() != 0) {
    _internal_set_trace_status(from._internal_trace_status());
  }
  if (from.select_level() != 0) {
    _internal_set_select_level(from._internal_select_level());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.measure_type() != 0) {
    _internal_set_measure_type(from._internal_measure_type());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void Object::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::InternalSwap(Object* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_components_.InternalSwap(&other->key_components_);
  hit_type_str_.Swap(&other->hit_type_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Object, frame_id_)
      + sizeof(Object::frame_id_)
      - PROTOBUF_FIELD_OFFSET(Object, image_info_)>(
          reinterpret_cast<char*>(&image_info_),
          reinterpret_cast<char*>(&other->image_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Object::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectList::InitAsDefaultInstance() {
  ::perception::_ObjectList_default_instance_._instance.get_mutable()->warning_ = const_cast< ::perception::object::Warning*>(
      ::perception::object::Warning::internal_default_instance());
  ::perception::_ObjectList_default_instance_._instance.get_mutable()->calib_param_ = const_cast< ::minieye::CalibParam*>(
      ::minieye::CalibParam::internal_default_instance());
  ::perception::_ObjectList_default_instance_._instance.get_mutable()->vehicle_signal_ = const_cast< ::minieye::VehicleSignal*>(
      ::minieye::VehicleSignal::internal_default_instance());
  ::perception::_ObjectList_default_instance_._instance.get_mutable()->camera_param_ = const_cast< ::minieye::CameraParam*>(
      ::minieye::CameraParam::internal_default_instance());
  ::perception::_ObjectList_default_instance_._instance.get_mutable()->cam_id_ = const_cast< ::minieye::CamID*>(
      ::minieye::CamID::internal_default_instance());
}
class ObjectList::_Internal {
 public:
  static const ::perception::object::Warning& warning(const ObjectList* msg);
  static const ::minieye::CalibParam& calib_param(const ObjectList* msg);
  static const ::minieye::VehicleSignal& vehicle_signal(const ObjectList* msg);
  static const ::minieye::CameraParam& camera_param(const ObjectList* msg);
  static const ::minieye::CamID& cam_id(const ObjectList* msg);
};

const ::perception::object::Warning&
ObjectList::_Internal::warning(const ObjectList* msg) {
  return *msg->warning_;
}
const ::minieye::CalibParam&
ObjectList::_Internal::calib_param(const ObjectList* msg) {
  return *msg->calib_param_;
}
const ::minieye::VehicleSignal&
ObjectList::_Internal::vehicle_signal(const ObjectList* msg) {
  return *msg->vehicle_signal_;
}
const ::minieye::CameraParam&
ObjectList::_Internal::camera_param(const ObjectList* msg) {
  return *msg->camera_param_;
}
const ::minieye::CamID&
ObjectList::_Internal::cam_id(const ObjectList* msg) {
  return *msg->cam_id_;
}
void ObjectList::clear_warning() {
  if (GetArena() == nullptr && warning_ != nullptr) {
    delete warning_;
  }
  warning_ = nullptr;
}
void ObjectList::clear_roi_list() {
  roi_list_.Clear();
}
void ObjectList::clear_calib_param() {
  if (GetArena() == nullptr && calib_param_ != nullptr) {
    delete calib_param_;
  }
  calib_param_ = nullptr;
}
void ObjectList::clear_vehicle_signal() {
  if (GetArena() == nullptr && vehicle_signal_ != nullptr) {
    delete vehicle_signal_;
  }
  vehicle_signal_ = nullptr;
}
void ObjectList::clear_camera_param() {
  if (GetArena() == nullptr && camera_param_ != nullptr) {
    delete camera_param_;
  }
  camera_param_ = nullptr;
}
void ObjectList::clear_cam_id() {
  if (GetArena() == nullptr && cam_id_ != nullptr) {
    delete cam_id_;
  }
  cam_id_ = nullptr;
}
ObjectList::ObjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena),
  roi_list_(arena),
  profiling_time_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.ObjectList)
}
ObjectList::ObjectList(const ObjectList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_),
      roi_list_(from.roi_list_),
      profiling_time_(from.profiling_time_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_warning()) {
    warning_ = new ::perception::object::Warning(*from.warning_);
  } else {
    warning_ = nullptr;
  }
  if (from._internal_has_calib_param()) {
    calib_param_ = new ::minieye::CalibParam(*from.calib_param_);
  } else {
    calib_param_ = nullptr;
  }
  if (from._internal_has_vehicle_signal()) {
    vehicle_signal_ = new ::minieye::VehicleSignal(*from.vehicle_signal_);
  } else {
    vehicle_signal_ = nullptr;
  }
  if (from._internal_has_camera_param()) {
    camera_param_ = new ::minieye::CameraParam(*from.camera_param_);
  } else {
    camera_param_ = nullptr;
  }
  if (from._internal_has_cam_id()) {
    cam_id_ = new ::minieye::CamID(*from.cam_id_);
  } else {
    cam_id_ = nullptr;
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cam_prj_id_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(cam_prj_id_));
  // @@protoc_insertion_point(copy_constructor:perception.ObjectList)
}

void ObjectList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectList_object_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&warning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cam_prj_id_) -
      reinterpret_cast<char*>(&warning_)) + sizeof(cam_prj_id_));
}

ObjectList::~ObjectList() {
  // @@protoc_insertion_point(destructor:perception.ObjectList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete warning_;
  if (this != internal_default_instance()) delete calib_param_;
  if (this != internal_default_instance()) delete vehicle_signal_;
  if (this != internal_default_instance()) delete camera_param_;
  if (this != internal_default_instance()) delete cam_id_;
}

void ObjectList::ArenaDtor(void* object) {
  ObjectList* _this = reinterpret_cast< ObjectList* >(object);
  (void)_this;
}
void ObjectList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectList& ObjectList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectList_object_2eproto.base);
  return *internal_default_instance();
}


void ObjectList::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.ObjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  roi_list_.Clear();
  profiling_time_.Clear();
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && warning_ != nullptr) {
    delete warning_;
  }
  warning_ = nullptr;
  if (GetArena() == nullptr && calib_param_ != nullptr) {
    delete calib_param_;
  }
  calib_param_ = nullptr;
  if (GetArena() == nullptr && vehicle_signal_ != nullptr) {
    delete vehicle_signal_;
  }
  vehicle_signal_ = nullptr;
  if (GetArena() == nullptr && camera_param_ != nullptr) {
    delete camera_param_;
  }
  camera_param_ = nullptr;
  if (GetArena() == nullptr && cam_id_ != nullptr) {
    delete cam_id_;
  }
  cam_id_ = nullptr;
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cam_prj_id_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(cam_prj_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.Object list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "perception.ObjectList.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.object.Warning warning = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_warning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.common.Rect2f roi_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roi_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 tick = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_time_us = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          start_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_time_us = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          end_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 profiling_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_profiling_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_profiling_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.DataSource data_source = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_source(static_cast<::minieye::DataSource>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.CalibParam calib_param = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_calib_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.VehicleSignal vehicle_signal = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.CameraParam camera_param = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.CamID cam_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_cam_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cam_prj_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          cam_prj_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.ObjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.Object list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "perception.ObjectList.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // uint64 frame_id = 4;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // .perception.object.Warning warning = 6;
  if (this->has_warning()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::warning(this), target, stream);
  }

  // repeated .perception.common.Rect2f roi_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roi_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_roi_list(i), target, stream);
  }

  // uint64 tick = 9;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_tick(), target);
  }

  // uint64 start_time_us = 10;
  if (this->start_time_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_start_time_us(), target);
  }

  // uint64 end_time_us = 11;
  if (this->end_time_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_end_time_us(), target);
  }

  // repeated uint64 profiling_time = 12;
  {
    int byte_size = _profiling_time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          12, _internal_profiling_time(), byte_size, target);
    }
  }

  // .minieye.DataSource data_source = 15;
  if (this->data_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_data_source(), target);
  }

  // .minieye.CalibParam calib_param = 16;
  if (this->has_calib_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::calib_param(this), target, stream);
  }

  // .minieye.VehicleSignal vehicle_signal = 17;
  if (this->has_vehicle_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::vehicle_signal(this), target, stream);
  }

  // .minieye.CameraParam camera_param = 18;
  if (this->has_camera_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::camera_param(this), target, stream);
  }

  // .minieye.CamID cam_id = 19;
  if (this->has_cam_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::cam_id(this), target, stream);
  }

  // uint32 cam_prj_id = 20;
  if (this->cam_prj_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_cam_prj_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.ObjectList)
  return target;
}

size_t ObjectList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.ObjectList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.Object list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perception.common.Rect2f roi_list = 7;
  total_size += 1UL * this->_internal_roi_list_size();
  for (const auto& msg : this->roi_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 profiling_time = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->profiling_time_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _profiling_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .perception.object.Warning warning = 6;
  if (this->has_warning()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *warning_);
  }

  // .minieye.CalibParam calib_param = 16;
  if (this->has_calib_param()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calib_param_);
  }

  // .minieye.VehicleSignal vehicle_signal = 17;
  if (this->has_vehicle_signal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_signal_);
  }

  // .minieye.CameraParam camera_param = 18;
  if (this->has_camera_param()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_param_);
  }

  // .minieye.CamID cam_id = 19;
  if (this->has_cam_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cam_id_);
  }

  // uint64 frame_id = 4;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 9;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 start_time_us = 10;
  if (this->start_time_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_time_us());
  }

  // uint64 end_time_us = 11;
  if (this->end_time_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_time_us());
  }

  // .minieye.DataSource data_source = 15;
  if (this->data_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_source());
  }

  // uint32 cam_prj_id = 20;
  if (this->cam_prj_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cam_prj_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.ObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.ObjectList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.ObjectList)
    MergeFrom(*source);
  }
}

void ObjectList::MergeFrom(const ObjectList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.ObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  roi_list_.MergeFrom(from.roi_list_);
  profiling_time_.MergeFrom(from.profiling_time_);
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.has_warning()) {
    _internal_mutable_warning()->::perception::object::Warning::MergeFrom(from._internal_warning());
  }
  if (from.has_calib_param()) {
    _internal_mutable_calib_param()->::minieye::CalibParam::MergeFrom(from._internal_calib_param());
  }
  if (from.has_vehicle_signal()) {
    _internal_mutable_vehicle_signal()->::minieye::VehicleSignal::MergeFrom(from._internal_vehicle_signal());
  }
  if (from.has_camera_param()) {
    _internal_mutable_camera_param()->::minieye::CameraParam::MergeFrom(from._internal_camera_param());
  }
  if (from.has_cam_id()) {
    _internal_mutable_cam_id()->::minieye::CamID::MergeFrom(from._internal_cam_id());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.start_time_us() != 0) {
    _internal_set_start_time_us(from._internal_start_time_us());
  }
  if (from.end_time_us() != 0) {
    _internal_set_end_time_us(from._internal_end_time_us());
  }
  if (from.data_source() != 0) {
    _internal_set_data_source(from._internal_data_source());
  }
  if (from.cam_prj_id() != 0) {
    _internal_set_cam_prj_id(from._internal_cam_prj_id());
  }
}

void ObjectList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.ObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectList::CopyFrom(const ObjectList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.ObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectList::IsInitialized() const {
  return true;
}

void ObjectList::InternalSwap(ObjectList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  roi_list_.InternalSwap(&other->roi_list_);
  profiling_time_.InternalSwap(&other->profiling_time_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectList, cam_prj_id_)
      + sizeof(ObjectList::cam_prj_id_)
      - PROTOBUF_FIELD_OFFSET(ObjectList, warning_)>(
          reinterpret_cast<char*>(&warning_),
          reinterpret_cast<char*>(&other->warning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perception::Object_ImageInfo* Arena::CreateMaybeMessage< ::perception::Object_ImageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Object_ImageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::Object_VehicleRigid* Arena::CreateMaybeMessage< ::perception::Object_VehicleRigid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Object_VehicleRigid >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::Object_WorldInfo* Arena::CreateMaybeMessage< ::perception::Object_WorldInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Object_WorldInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::Object_FusionInfo* Arena::CreateMaybeMessage< ::perception::Object_FusionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Object_FusionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::Object* Arena::CreateMaybeMessage< ::perception::Object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::ObjectList* Arena::CreateMaybeMessage< ::perception::ObjectList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::ObjectList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
