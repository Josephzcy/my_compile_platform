// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apa_hmi_signal.proto

#include "apa_hmi_signal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace minieye {
class APAHmiSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APAHmiSignal> _instance;
} _APAHmiSignal_default_instance_;
class APAHmiSignalResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APAHmiSignalRes> _instance;
} _APAHmiSignalRes_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_APAHmiSignal_apa_5fhmi_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_APAHmiSignal_default_instance_;
    new (ptr) ::minieye::APAHmiSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::APAHmiSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APAHmiSignal_apa_5fhmi_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_APAHmiSignal_apa_5fhmi_5fsignal_2eproto}, {}};

static void InitDefaultsscc_info_APAHmiSignalRes_apa_5fhmi_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_APAHmiSignalRes_default_instance_;
    new (ptr) ::minieye::APAHmiSignalRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::APAHmiSignalRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APAHmiSignalRes_apa_5fhmi_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_APAHmiSignalRes_apa_5fhmi_5fsignal_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_apa_5fhmi_5fsignal_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_apa_5fhmi_5fsignal_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_apa_5fhmi_5fsignal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_apa_5fhmi_5fsignal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::APAHmiSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::APAHmiSignal, signal_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAHmiSignal, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAHmiSignal, tick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::APAHmiSignalRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::APAHmiSignalRes, rescurmode_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAHmiSignalRes, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAHmiSignalRes, tick_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::APAHmiSignal)},
  { 8, -1, sizeof(::minieye::APAHmiSignalRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_APAHmiSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_APAHmiSignalRes_default_instance_),
};

const char descriptor_table_protodef_apa_5fhmi_5fsignal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024apa_hmi_signal.proto\022\007minieye\"\254\001\n\014APAH"
  "miSignal\022\016\n\006signal\030\001 \001(\r\022\021\n\ttimestamp\030\002 "
  "\001(\004\022\014\n\004tick\030\003 \001(\004\"k\n\020APAHmiSignalType\022\032\n"
  "\026APA_HMI_SIGNAL_UNKNOWN\020\000\022\034\n\030APA_HMI_SIG"
  "NAL_SWITCH_ON\020\001\022\035\n\031APA_HMI_SIGNAL_SWITCH"
  "_OFF\020\002\"\355\001\n\017APAHmiSignalRes\022\022\n\nresCurMode"
  "\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\004\022\014\n\004tick\030\003 \001(\004\""
  "\244\001\n\023APAHmiSignalResType\022\034\n\030APA_HMI_CUR_M"
  "ODE_UNKNOWN\020\000\022\030\n\024APA_HMI_CUR_MODE_APA\020\001\022"
  "\032\n\026APA_HMI_CUR_MODE_POLIT\020\002\022\031\n\025APA_HMI_C"
  "UR_MODE_IDLE\020\003\022\036\n\032APA_HMI_CUR_MODE_MANTA"
  "INCE\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_apa_5fhmi_5fsignal_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_apa_5fhmi_5fsignal_2eproto_sccs[2] = {
  &scc_info_APAHmiSignal_apa_5fhmi_5fsignal_2eproto.base,
  &scc_info_APAHmiSignalRes_apa_5fhmi_5fsignal_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_apa_5fhmi_5fsignal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apa_5fhmi_5fsignal_2eproto = {
  false, false, descriptor_table_protodef_apa_5fhmi_5fsignal_2eproto, "apa_hmi_signal.proto", 454,
  &descriptor_table_apa_5fhmi_5fsignal_2eproto_once, descriptor_table_apa_5fhmi_5fsignal_2eproto_sccs, descriptor_table_apa_5fhmi_5fsignal_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_apa_5fhmi_5fsignal_2eproto::offsets,
  file_level_metadata_apa_5fhmi_5fsignal_2eproto, 2, file_level_enum_descriptors_apa_5fhmi_5fsignal_2eproto, file_level_service_descriptors_apa_5fhmi_5fsignal_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_apa_5fhmi_5fsignal_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_apa_5fhmi_5fsignal_2eproto)), true);
namespace minieye {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAHmiSignal_APAHmiSignalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apa_5fhmi_5fsignal_2eproto);
  return file_level_enum_descriptors_apa_5fhmi_5fsignal_2eproto[0];
}
bool APAHmiSignal_APAHmiSignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr APAHmiSignal_APAHmiSignalType APAHmiSignal::APA_HMI_SIGNAL_UNKNOWN;
constexpr APAHmiSignal_APAHmiSignalType APAHmiSignal::APA_HMI_SIGNAL_SWITCH_ON;
constexpr APAHmiSignal_APAHmiSignalType APAHmiSignal::APA_HMI_SIGNAL_SWITCH_OFF;
constexpr APAHmiSignal_APAHmiSignalType APAHmiSignal::APAHmiSignalType_MIN;
constexpr APAHmiSignal_APAHmiSignalType APAHmiSignal::APAHmiSignalType_MAX;
constexpr int APAHmiSignal::APAHmiSignalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAHmiSignalRes_APAHmiSignalResType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apa_5fhmi_5fsignal_2eproto);
  return file_level_enum_descriptors_apa_5fhmi_5fsignal_2eproto[1];
}
bool APAHmiSignalRes_APAHmiSignalResType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr APAHmiSignalRes_APAHmiSignalResType APAHmiSignalRes::APA_HMI_CUR_MODE_UNKNOWN;
constexpr APAHmiSignalRes_APAHmiSignalResType APAHmiSignalRes::APA_HMI_CUR_MODE_APA;
constexpr APAHmiSignalRes_APAHmiSignalResType APAHmiSignalRes::APA_HMI_CUR_MODE_POLIT;
constexpr APAHmiSignalRes_APAHmiSignalResType APAHmiSignalRes::APA_HMI_CUR_MODE_IDLE;
constexpr APAHmiSignalRes_APAHmiSignalResType APAHmiSignalRes::APA_HMI_CUR_MODE_MANTAINCE;
constexpr APAHmiSignalRes_APAHmiSignalResType APAHmiSignalRes::APAHmiSignalResType_MIN;
constexpr APAHmiSignalRes_APAHmiSignalResType APAHmiSignalRes::APAHmiSignalResType_MAX;
constexpr int APAHmiSignalRes::APAHmiSignalResType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void APAHmiSignal::InitAsDefaultInstance() {
}
class APAHmiSignal::_Internal {
 public:
};

APAHmiSignal::APAHmiSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.APAHmiSignal)
}
APAHmiSignal::APAHmiSignal(const APAHmiSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(signal_));
  // @@protoc_insertion_point(copy_constructor:minieye.APAHmiSignal)
}

void APAHmiSignal::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(signal_));
}

APAHmiSignal::~APAHmiSignal() {
  // @@protoc_insertion_point(destructor:minieye.APAHmiSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void APAHmiSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void APAHmiSignal::ArenaDtor(void* object) {
  APAHmiSignal* _this = reinterpret_cast< APAHmiSignal* >(object);
  (void)_this;
}
void APAHmiSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void APAHmiSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APAHmiSignal& APAHmiSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APAHmiSignal_apa_5fhmi_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void APAHmiSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.APAHmiSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(signal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APAHmiSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 signal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APAHmiSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.APAHmiSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 signal = 1;
  if (this->signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_signal(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.APAHmiSignal)
  return target;
}

size_t APAHmiSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.APAHmiSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint32 signal = 1;
  if (this->signal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signal());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APAHmiSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.APAHmiSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const APAHmiSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APAHmiSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.APAHmiSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.APAHmiSignal)
    MergeFrom(*source);
  }
}

void APAHmiSignal::MergeFrom(const APAHmiSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.APAHmiSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.signal() != 0) {
    _internal_set_signal(from._internal_signal());
  }
}

void APAHmiSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.APAHmiSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APAHmiSignal::CopyFrom(const APAHmiSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.APAHmiSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APAHmiSignal::IsInitialized() const {
  return true;
}

void APAHmiSignal::InternalSwap(APAHmiSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APAHmiSignal, signal_)
      + sizeof(APAHmiSignal::signal_)
      - PROTOBUF_FIELD_OFFSET(APAHmiSignal, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APAHmiSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void APAHmiSignalRes::InitAsDefaultInstance() {
}
class APAHmiSignalRes::_Internal {
 public:
};

APAHmiSignalRes::APAHmiSignalRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.APAHmiSignalRes)
}
APAHmiSignalRes::APAHmiSignalRes(const APAHmiSignalRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&rescurmode_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(rescurmode_));
  // @@protoc_insertion_point(copy_constructor:minieye.APAHmiSignalRes)
}

void APAHmiSignalRes::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rescurmode_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(rescurmode_));
}

APAHmiSignalRes::~APAHmiSignalRes() {
  // @@protoc_insertion_point(destructor:minieye.APAHmiSignalRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void APAHmiSignalRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void APAHmiSignalRes::ArenaDtor(void* object) {
  APAHmiSignalRes* _this = reinterpret_cast< APAHmiSignalRes* >(object);
  (void)_this;
}
void APAHmiSignalRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void APAHmiSignalRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APAHmiSignalRes& APAHmiSignalRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APAHmiSignalRes_apa_5fhmi_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void APAHmiSignalRes::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.APAHmiSignalRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rescurmode_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(rescurmode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APAHmiSignalRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 resCurMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rescurmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APAHmiSignalRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.APAHmiSignalRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 resCurMode = 1;
  if (this->rescurmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rescurmode(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.APAHmiSignalRes)
  return target;
}

size_t APAHmiSignalRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.APAHmiSignalRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint32 resCurMode = 1;
  if (this->rescurmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rescurmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APAHmiSignalRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.APAHmiSignalRes)
  GOOGLE_DCHECK_NE(&from, this);
  const APAHmiSignalRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APAHmiSignalRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.APAHmiSignalRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.APAHmiSignalRes)
    MergeFrom(*source);
  }
}

void APAHmiSignalRes::MergeFrom(const APAHmiSignalRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.APAHmiSignalRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.rescurmode() != 0) {
    _internal_set_rescurmode(from._internal_rescurmode());
  }
}

void APAHmiSignalRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.APAHmiSignalRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APAHmiSignalRes::CopyFrom(const APAHmiSignalRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.APAHmiSignalRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APAHmiSignalRes::IsInitialized() const {
  return true;
}

void APAHmiSignalRes::InternalSwap(APAHmiSignalRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APAHmiSignalRes, rescurmode_)
      + sizeof(APAHmiSignalRes::rescurmode_)
      - PROTOBUF_FIELD_OFFSET(APAHmiSignalRes, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APAHmiSignalRes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::APAHmiSignal* Arena::CreateMaybeMessage< ::minieye::APAHmiSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::APAHmiSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::APAHmiSignalRes* Arena::CreateMaybeMessage< ::minieye::APAHmiSignalRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::APAHmiSignalRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
