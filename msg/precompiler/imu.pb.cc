// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu.proto

#include "imu.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_data_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_data_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_imu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuCorrPhyData_imu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_imu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuData_imu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_imu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuPhyData_imu_2eproto;
namespace minieye {
class ImuDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImuData> _instance;
} _ImuData_default_instance_;
class ImuPhyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImuPhyData> _instance;
} _ImuPhyData_default_instance_;
class ImuCorrPhyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImuCorrPhyData> _instance;
} _ImuCorrPhyData_default_instance_;
class ImuDataListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImuDataList> _instance;
} _ImuDataList_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_ImuCorrPhyData_imu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_ImuCorrPhyData_default_instance_;
    new (ptr) ::minieye::ImuCorrPhyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::ImuCorrPhyData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuCorrPhyData_imu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImuCorrPhyData_imu_2eproto}, {
      &scc_info_Header_data_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_ImuData_imu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_ImuData_default_instance_;
    new (ptr) ::minieye::ImuData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::ImuData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuData_imu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImuData_imu_2eproto}, {
      &scc_info_Header_data_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_ImuDataList_imu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_ImuDataList_default_instance_;
    new (ptr) ::minieye::ImuDataList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::ImuDataList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImuDataList_imu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ImuDataList_imu_2eproto}, {
      &scc_info_ImuData_imu_2eproto.base,
      &scc_info_ImuPhyData_imu_2eproto.base,
      &scc_info_ImuCorrPhyData_imu_2eproto.base,}};

static void InitDefaultsscc_info_ImuPhyData_imu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_ImuPhyData_default_instance_;
    new (ptr) ::minieye::ImuPhyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::ImuPhyData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuPhyData_imu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImuPhyData_imu_2eproto}, {
      &scc_info_Header_data_5fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_imu_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_imu_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_imu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_imu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::ImuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::ImuData, accel_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuData, gyro_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuData, temp_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuData, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuData, header_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuData, gps_week_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuData, gps_sec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::ImuPhyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::ImuPhyData, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuPhyData, linear_accel_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuPhyData, temp_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuPhyData, imu_status_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuPhyData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuPhyData, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuPhyData, seq_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuPhyData, header_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuPhyData, gps_week_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuPhyData, gps_sec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::ImuCorrPhyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::ImuCorrPhyData, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuCorrPhyData, linear_accel_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuCorrPhyData, temp_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuCorrPhyData, imu_status_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuCorrPhyData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuCorrPhyData, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuCorrPhyData, seq_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuCorrPhyData, header_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuCorrPhyData, gps_week_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuCorrPhyData, gps_sec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::ImuDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::ImuDataList, imu_datas_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuDataList, id_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuDataList, phy_imu_datas_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuDataList, phy_corr_imu_datas_),
  PROTOBUF_FIELD_OFFSET(::minieye::ImuDataList, data_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::ImuData)},
  { 13, -1, sizeof(::minieye::ImuPhyData)},
  { 28, -1, sizeof(::minieye::ImuCorrPhyData)},
  { 43, -1, sizeof(::minieye::ImuDataList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_ImuData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_ImuPhyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_ImuCorrPhyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_ImuDataList_default_instance_),
};

const char descriptor_table_protodef_imu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\timu.proto\022\007minieye\032\021data_header.proto\""
  "\231\001\n\007ImuData\022\r\n\005accel\030\001 \003(\005\022\014\n\004gyro\030\002 \003(\005"
  "\022\014\n\004temp\030\003 \001(\005\022\021\n\ttimestamp\030\004 \001(\004\022\014\n\004tic"
  "k\030\005 \001(\004\022\037\n\006header\030\006 \001(\0132\017.minieye.Header"
  "\022\020\n\010gps_week\030\007 \001(\r\022\017\n\007gps_sec\030\010 \001(\001\"\320\001\n\n"
  "ImuPhyData\022\030\n\020angular_velocity\030\001 \003(\002\022\024\n\014"
  "linear_accel\030\002 \003(\002\022\014\n\004temp\030\003 \001(\002\022\022\n\nimu_"
  "status\030\004 \001(\005\022\021\n\ttimestamp\030\005 \001(\004\022\014\n\004tick\030"
  "\006 \001(\004\022\013\n\003seq\030\007 \001(\004\022\037\n\006header\030\010 \001(\0132\017.min"
  "ieye.Header\022\020\n\010gps_week\030\t \001(\r\022\017\n\007gps_sec"
  "\030\n \001(\001\"\324\001\n\016ImuCorrPhyData\022\030\n\020angular_vel"
  "ocity\030\001 \003(\002\022\024\n\014linear_accel\030\002 \003(\002\022\014\n\004tem"
  "p\030\003 \001(\002\022\022\n\nimu_status\030\004 \001(\005\022\021\n\ttimestamp"
  "\030\005 \001(\004\022\014\n\004tick\030\006 \001(\004\022\013\n\003seq\030\007 \001(\004\022\037\n\006hea"
  "der\030\010 \001(\0132\017.minieye.Header\022\020\n\010gps_week\030\t"
  " \001(\r\022\017\n\007gps_sec\030\n \001(\001\"\262\001\n\013ImuDataList\022#\n"
  "\timu_datas\030\001 \003(\0132\020.minieye.ImuData\022\n\n\002id"
  "\030\002 \001(\004\022*\n\rphy_imu_datas\030\003 \003(\0132\023.minieye."
  "ImuPhyData\0223\n\022phy_corr_imu_datas\030\004 \003(\0132\027"
  ".minieye.ImuCorrPhyData\022\021\n\tdata_type\030\005 \001"
  "(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_imu_2eproto_deps[1] = {
  &::descriptor_table_data_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_imu_2eproto_sccs[4] = {
  &scc_info_ImuCorrPhyData_imu_2eproto.base,
  &scc_info_ImuData_imu_2eproto.base,
  &scc_info_ImuDataList_imu_2eproto.base,
  &scc_info_ImuPhyData_imu_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_imu_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_imu_2eproto = {
  false, false, descriptor_table_protodef_imu_2eproto, "imu.proto", 810,
  &descriptor_table_imu_2eproto_once, descriptor_table_imu_2eproto_sccs, descriptor_table_imu_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_imu_2eproto::offsets,
  file_level_metadata_imu_2eproto, 4, file_level_enum_descriptors_imu_2eproto, file_level_service_descriptors_imu_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_imu_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_imu_2eproto)), true);
namespace minieye {

// ===================================================================

void ImuData::InitAsDefaultInstance() {
  ::minieye::_ImuData_default_instance_._instance.get_mutable()->header_ = const_cast< ::minieye::Header*>(
      ::minieye::Header::internal_default_instance());
}
class ImuData::_Internal {
 public:
  static const ::minieye::Header& header(const ImuData* msg);
};

const ::minieye::Header&
ImuData::_Internal::header(const ImuData* msg) {
  return *msg->header_;
}
void ImuData::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ImuData::ImuData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accel_(arena),
  gyro_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.ImuData)
}
ImuData::ImuData(const ImuData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accel_(from.accel_),
      gyro_(from.gyro_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::minieye::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&gps_sec_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(gps_sec_));
  // @@protoc_insertion_point(copy_constructor:minieye.ImuData)
}

void ImuData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImuData_imu_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_sec_) -
      reinterpret_cast<char*>(&header_)) + sizeof(gps_sec_));
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:minieye.ImuData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImuData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ImuData::ArenaDtor(void* object) {
  ImuData* _this = reinterpret_cast< ImuData* >(object);
  (void)_this;
}
void ImuData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImuData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImuData& ImuData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImuData_imu_2eproto.base);
  return *internal_default_instance();
}


void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.ImuData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accel_.Clear();
  gyro_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_sec_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(gps_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 accel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_accel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_accel(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 gyro = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gyro(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_gyro(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 temp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Header header = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gps_week = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gps_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double gps_sec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          gps_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.ImuData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 accel = 1;
  {
    int byte_size = _accel_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_accel(), byte_size, target);
    }
  }

  // repeated int32 gyro = 2;
  {
    int byte_size = _gyro_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_gyro(), byte_size, target);
    }
  }

  // int32 temp = 3;
  if (this->temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_temp(), target);
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // uint64 tick = 5;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_tick(), target);
  }

  // .minieye.Header header = 6;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::header(this), target, stream);
  }

  // uint32 gps_week = 7;
  if (this->gps_week() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_gps_week(), target);
  }

  // double gps_sec = 8;
  if (!(this->gps_sec() <= 0 && this->gps_sec() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_gps_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.ImuData)
  return target;
}

size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.ImuData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 accel = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->accel_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _accel_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 gyro = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gyro_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gyro_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .minieye.Header header = 6;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 5;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // int32 temp = 3;
  if (this->temp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_temp());
  }

  // uint32 gps_week = 7;
  if (this->gps_week() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gps_week());
  }

  // double gps_sec = 8;
  if (!(this->gps_sec() <= 0 && this->gps_sec() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImuData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.ImuData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.ImuData)
    MergeFrom(*source);
  }
}

void ImuData::MergeFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accel_.MergeFrom(from.accel_);
  gyro_.MergeFrom(from.gyro_);
  if (from.has_header()) {
    _internal_mutable_header()->::minieye::Header::MergeFrom(from._internal_header());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.temp() != 0) {
    _internal_set_temp(from._internal_temp());
  }
  if (from.gps_week() != 0) {
    _internal_set_gps_week(from._internal_gps_week());
  }
  if (!(from.gps_sec() <= 0 && from.gps_sec() >= 0)) {
    _internal_set_gps_sec(from._internal_gps_sec());
  }
}

void ImuData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {
  return true;
}

void ImuData::InternalSwap(ImuData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accel_.InternalSwap(&other->accel_);
  gyro_.InternalSwap(&other->gyro_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImuData, gps_sec_)
      + sizeof(ImuData::gps_sec_)
      - PROTOBUF_FIELD_OFFSET(ImuData, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImuPhyData::InitAsDefaultInstance() {
  ::minieye::_ImuPhyData_default_instance_._instance.get_mutable()->header_ = const_cast< ::minieye::Header*>(
      ::minieye::Header::internal_default_instance());
}
class ImuPhyData::_Internal {
 public:
  static const ::minieye::Header& header(const ImuPhyData* msg);
};

const ::minieye::Header&
ImuPhyData::_Internal::header(const ImuPhyData* msg) {
  return *msg->header_;
}
void ImuPhyData::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ImuPhyData::ImuPhyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  angular_velocity_(arena),
  linear_accel_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.ImuPhyData)
}
ImuPhyData::ImuPhyData(const ImuPhyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      angular_velocity_(from.angular_velocity_),
      linear_accel_(from.linear_accel_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::minieye::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&temp_, &from.temp_,
    static_cast<size_t>(reinterpret_cast<char*>(&gps_week_) -
    reinterpret_cast<char*>(&temp_)) + sizeof(gps_week_));
  // @@protoc_insertion_point(copy_constructor:minieye.ImuPhyData)
}

void ImuPhyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImuPhyData_imu_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_week_) -
      reinterpret_cast<char*>(&header_)) + sizeof(gps_week_));
}

ImuPhyData::~ImuPhyData() {
  // @@protoc_insertion_point(destructor:minieye.ImuPhyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImuPhyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ImuPhyData::ArenaDtor(void* object) {
  ImuPhyData* _this = reinterpret_cast< ImuPhyData* >(object);
  (void)_this;
}
void ImuPhyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImuPhyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImuPhyData& ImuPhyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImuPhyData_imu_2eproto.base);
  return *internal_default_instance();
}


void ImuPhyData::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.ImuPhyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angular_velocity_.Clear();
  linear_accel_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_week_) -
      reinterpret_cast<char*>(&temp_)) + sizeof(gps_week_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuPhyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float angular_velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_angular_velocity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_angular_velocity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float linear_accel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_linear_accel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_linear_accel(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float temp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 imu_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          imu_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Header header = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gps_week = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          gps_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double gps_sec = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          gps_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuPhyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.ImuPhyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float angular_velocity = 1;
  if (this->_internal_angular_velocity_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_angular_velocity(), target);
  }

  // repeated float linear_accel = 2;
  if (this->_internal_linear_accel_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_linear_accel(), target);
  }

  // float temp = 3;
  if (!(this->temp() <= 0 && this->temp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_temp(), target);
  }

  // int32 imu_status = 4;
  if (this->imu_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_imu_status(), target);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // uint64 tick = 6;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_tick(), target);
  }

  // uint64 seq = 7;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_seq(), target);
  }

  // .minieye.Header header = 8;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::header(this), target, stream);
  }

  // uint32 gps_week = 9;
  if (this->gps_week() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_gps_week(), target);
  }

  // double gps_sec = 10;
  if (!(this->gps_sec() <= 0 && this->gps_sec() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_gps_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.ImuPhyData)
  return target;
}

size_t ImuPhyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.ImuPhyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float angular_velocity = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_angular_velocity_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _angular_velocity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float linear_accel = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_linear_accel_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _linear_accel_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .minieye.Header header = 8;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // float temp = 3;
  if (!(this->temp() <= 0 && this->temp() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 imu_status = 4;
  if (this->imu_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_imu_status());
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 6;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 seq = 7;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq());
  }

  // double gps_sec = 10;
  if (!(this->gps_sec() <= 0 && this->gps_sec() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 gps_week = 9;
  if (this->gps_week() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gps_week());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuPhyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.ImuPhyData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuPhyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImuPhyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.ImuPhyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.ImuPhyData)
    MergeFrom(*source);
  }
}

void ImuPhyData::MergeFrom(const ImuPhyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.ImuPhyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  angular_velocity_.MergeFrom(from.angular_velocity_);
  linear_accel_.MergeFrom(from.linear_accel_);
  if (from.has_header()) {
    _internal_mutable_header()->::minieye::Header::MergeFrom(from._internal_header());
  }
  if (!(from.temp() <= 0 && from.temp() >= 0)) {
    _internal_set_temp(from._internal_temp());
  }
  if (from.imu_status() != 0) {
    _internal_set_imu_status(from._internal_imu_status());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (!(from.gps_sec() <= 0 && from.gps_sec() >= 0)) {
    _internal_set_gps_sec(from._internal_gps_sec());
  }
  if (from.gps_week() != 0) {
    _internal_set_gps_week(from._internal_gps_week());
  }
}

void ImuPhyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.ImuPhyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuPhyData::CopyFrom(const ImuPhyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.ImuPhyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuPhyData::IsInitialized() const {
  return true;
}

void ImuPhyData::InternalSwap(ImuPhyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  angular_velocity_.InternalSwap(&other->angular_velocity_);
  linear_accel_.InternalSwap(&other->linear_accel_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImuPhyData, gps_week_)
      + sizeof(ImuPhyData::gps_week_)
      - PROTOBUF_FIELD_OFFSET(ImuPhyData, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuPhyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImuCorrPhyData::InitAsDefaultInstance() {
  ::minieye::_ImuCorrPhyData_default_instance_._instance.get_mutable()->header_ = const_cast< ::minieye::Header*>(
      ::minieye::Header::internal_default_instance());
}
class ImuCorrPhyData::_Internal {
 public:
  static const ::minieye::Header& header(const ImuCorrPhyData* msg);
};

const ::minieye::Header&
ImuCorrPhyData::_Internal::header(const ImuCorrPhyData* msg) {
  return *msg->header_;
}
void ImuCorrPhyData::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ImuCorrPhyData::ImuCorrPhyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  angular_velocity_(arena),
  linear_accel_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.ImuCorrPhyData)
}
ImuCorrPhyData::ImuCorrPhyData(const ImuCorrPhyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      angular_velocity_(from.angular_velocity_),
      linear_accel_(from.linear_accel_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::minieye::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&temp_, &from.temp_,
    static_cast<size_t>(reinterpret_cast<char*>(&gps_week_) -
    reinterpret_cast<char*>(&temp_)) + sizeof(gps_week_));
  // @@protoc_insertion_point(copy_constructor:minieye.ImuCorrPhyData)
}

void ImuCorrPhyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImuCorrPhyData_imu_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_week_) -
      reinterpret_cast<char*>(&header_)) + sizeof(gps_week_));
}

ImuCorrPhyData::~ImuCorrPhyData() {
  // @@protoc_insertion_point(destructor:minieye.ImuCorrPhyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImuCorrPhyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ImuCorrPhyData::ArenaDtor(void* object) {
  ImuCorrPhyData* _this = reinterpret_cast< ImuCorrPhyData* >(object);
  (void)_this;
}
void ImuCorrPhyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImuCorrPhyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImuCorrPhyData& ImuCorrPhyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImuCorrPhyData_imu_2eproto.base);
  return *internal_default_instance();
}


void ImuCorrPhyData::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.ImuCorrPhyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angular_velocity_.Clear();
  linear_accel_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&temp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_week_) -
      reinterpret_cast<char*>(&temp_)) + sizeof(gps_week_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuCorrPhyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float angular_velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_angular_velocity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_angular_velocity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float linear_accel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_linear_accel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_linear_accel(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float temp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 imu_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          imu_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Header header = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gps_week = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          gps_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double gps_sec = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          gps_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuCorrPhyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.ImuCorrPhyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float angular_velocity = 1;
  if (this->_internal_angular_velocity_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_angular_velocity(), target);
  }

  // repeated float linear_accel = 2;
  if (this->_internal_linear_accel_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_linear_accel(), target);
  }

  // float temp = 3;
  if (!(this->temp() <= 0 && this->temp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_temp(), target);
  }

  // int32 imu_status = 4;
  if (this->imu_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_imu_status(), target);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // uint64 tick = 6;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_tick(), target);
  }

  // uint64 seq = 7;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_seq(), target);
  }

  // .minieye.Header header = 8;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::header(this), target, stream);
  }

  // uint32 gps_week = 9;
  if (this->gps_week() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_gps_week(), target);
  }

  // double gps_sec = 10;
  if (!(this->gps_sec() <= 0 && this->gps_sec() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_gps_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.ImuCorrPhyData)
  return target;
}

size_t ImuCorrPhyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.ImuCorrPhyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float angular_velocity = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_angular_velocity_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _angular_velocity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float linear_accel = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_linear_accel_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _linear_accel_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .minieye.Header header = 8;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // float temp = 3;
  if (!(this->temp() <= 0 && this->temp() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 imu_status = 4;
  if (this->imu_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_imu_status());
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 6;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 seq = 7;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq());
  }

  // double gps_sec = 10;
  if (!(this->gps_sec() <= 0 && this->gps_sec() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 gps_week = 9;
  if (this->gps_week() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gps_week());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuCorrPhyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.ImuCorrPhyData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuCorrPhyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImuCorrPhyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.ImuCorrPhyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.ImuCorrPhyData)
    MergeFrom(*source);
  }
}

void ImuCorrPhyData::MergeFrom(const ImuCorrPhyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.ImuCorrPhyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  angular_velocity_.MergeFrom(from.angular_velocity_);
  linear_accel_.MergeFrom(from.linear_accel_);
  if (from.has_header()) {
    _internal_mutable_header()->::minieye::Header::MergeFrom(from._internal_header());
  }
  if (!(from.temp() <= 0 && from.temp() >= 0)) {
    _internal_set_temp(from._internal_temp());
  }
  if (from.imu_status() != 0) {
    _internal_set_imu_status(from._internal_imu_status());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (!(from.gps_sec() <= 0 && from.gps_sec() >= 0)) {
    _internal_set_gps_sec(from._internal_gps_sec());
  }
  if (from.gps_week() != 0) {
    _internal_set_gps_week(from._internal_gps_week());
  }
}

void ImuCorrPhyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.ImuCorrPhyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuCorrPhyData::CopyFrom(const ImuCorrPhyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.ImuCorrPhyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuCorrPhyData::IsInitialized() const {
  return true;
}

void ImuCorrPhyData::InternalSwap(ImuCorrPhyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  angular_velocity_.InternalSwap(&other->angular_velocity_);
  linear_accel_.InternalSwap(&other->linear_accel_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImuCorrPhyData, gps_week_)
      + sizeof(ImuCorrPhyData::gps_week_)
      - PROTOBUF_FIELD_OFFSET(ImuCorrPhyData, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuCorrPhyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImuDataList::InitAsDefaultInstance() {
}
class ImuDataList::_Internal {
 public:
};

ImuDataList::ImuDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  imu_datas_(arena),
  phy_imu_datas_(arena),
  phy_corr_imu_datas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.ImuDataList)
}
ImuDataList::ImuDataList(const ImuDataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      imu_datas_(from.imu_datas_),
      phy_imu_datas_(from.phy_imu_datas_),
      phy_corr_imu_datas_(from.phy_corr_imu_datas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:minieye.ImuDataList)
}

void ImuDataList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImuDataList_imu_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(data_type_));
}

ImuDataList::~ImuDataList() {
  // @@protoc_insertion_point(destructor:minieye.ImuDataList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImuDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ImuDataList::ArenaDtor(void* object) {
  ImuDataList* _this = reinterpret_cast< ImuDataList* >(object);
  (void)_this;
}
void ImuDataList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImuDataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImuDataList& ImuDataList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImuDataList_imu_2eproto.base);
  return *internal_default_instance();
}


void ImuDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.ImuDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imu_datas_.Clear();
  phy_imu_datas_.Clear();
  phy_corr_imu_datas_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(data_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuDataList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .minieye.ImuData imu_datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_imu_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minieye.ImuPhyData phy_imu_datas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phy_imu_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.ImuCorrPhyData phy_corr_imu_datas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phy_corr_imu_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 data_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuDataList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.ImuDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minieye.ImuData imu_datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_imu_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_imu_datas(i), target, stream);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  // repeated .minieye.ImuPhyData phy_imu_datas = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phy_imu_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_phy_imu_datas(i), target, stream);
  }

  // repeated .minieye.ImuCorrPhyData phy_corr_imu_datas = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phy_corr_imu_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_phy_corr_imu_datas(i), target, stream);
  }

  // int32 data_type = 5;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_data_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.ImuDataList)
  return target;
}

size_t ImuDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.ImuDataList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.ImuData imu_datas = 1;
  total_size += 1UL * this->_internal_imu_datas_size();
  for (const auto& msg : this->imu_datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.ImuPhyData phy_imu_datas = 3;
  total_size += 1UL * this->_internal_phy_imu_datas_size();
  for (const auto& msg : this->phy_imu_datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.ImuCorrPhyData phy_corr_imu_datas = 4;
  total_size += 1UL * this->_internal_phy_corr_imu_datas_size();
  for (const auto& msg : this->phy_corr_imu_datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // int32 data_type = 5;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuDataList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.ImuDataList)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuDataList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImuDataList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.ImuDataList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.ImuDataList)
    MergeFrom(*source);
  }
}

void ImuDataList::MergeFrom(const ImuDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.ImuDataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imu_datas_.MergeFrom(from.imu_datas_);
  phy_imu_datas_.MergeFrom(from.phy_imu_datas_);
  phy_corr_imu_datas_.MergeFrom(from.phy_corr_imu_datas_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
}

void ImuDataList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.ImuDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuDataList::CopyFrom(const ImuDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.ImuDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuDataList::IsInitialized() const {
  return true;
}

void ImuDataList::InternalSwap(ImuDataList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imu_datas_.InternalSwap(&other->imu_datas_);
  phy_imu_datas_.InternalSwap(&other->phy_imu_datas_);
  phy_corr_imu_datas_.InternalSwap(&other->phy_corr_imu_datas_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImuDataList, data_type_)
      + sizeof(ImuDataList::data_type_)
      - PROTOBUF_FIELD_OFFSET(ImuDataList, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuDataList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::ImuData* Arena::CreateMaybeMessage< ::minieye::ImuData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::ImuData >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::ImuPhyData* Arena::CreateMaybeMessage< ::minieye::ImuPhyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::ImuPhyData >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::ImuCorrPhyData* Arena::CreateMaybeMessage< ::minieye::ImuCorrPhyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::ImuCorrPhyData >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::ImuDataList* Arena::CreateMaybeMessage< ::minieye::ImuDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::ImuDataList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
