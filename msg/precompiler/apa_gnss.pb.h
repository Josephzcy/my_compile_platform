// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apa_gnss.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_apa_5fgnss_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_apa_5fgnss_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "data_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_apa_5fgnss_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_apa_5fgnss_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apa_5fgnss_2eproto;
namespace minieye {
class GnssData;
class GnssDataDefaultTypeInternal;
extern GnssDataDefaultTypeInternal _GnssData_default_instance_;
class GnssheadingData;
class GnssheadingDataDefaultTypeInternal;
extern GnssheadingDataDefaultTypeInternal _GnssheadingData_default_instance_;
class GnssposData;
class GnssposDataDefaultTypeInternal;
extern GnssposDataDefaultTypeInternal _GnssposData_default_instance_;
class GnssvelData;
class GnssvelDataDefaultTypeInternal;
extern GnssvelDataDefaultTypeInternal _GnssvelData_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::GnssData* Arena::CreateMaybeMessage<::minieye::GnssData>(Arena*);
template<> ::minieye::GnssheadingData* Arena::CreateMaybeMessage<::minieye::GnssheadingData>(Arena*);
template<> ::minieye::GnssposData* Arena::CreateMaybeMessage<::minieye::GnssposData>(Arena*);
template<> ::minieye::GnssvelData* Arena::CreateMaybeMessage<::minieye::GnssvelData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

// ===================================================================

class GnssposData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.GnssposData) */ {
 public:
  inline GnssposData() : GnssposData(nullptr) {};
  virtual ~GnssposData();

  GnssposData(const GnssposData& from);
  GnssposData(GnssposData&& from) noexcept
    : GnssposData() {
    *this = ::std::move(from);
  }

  inline GnssposData& operator=(const GnssposData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssposData& operator=(GnssposData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GnssposData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GnssposData* internal_default_instance() {
    return reinterpret_cast<const GnssposData*>(
               &_GnssposData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GnssposData& a, GnssposData& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssposData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GnssposData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GnssposData* New() const final {
    return CreateMaybeMessage<GnssposData>(nullptr);
  }

  GnssposData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GnssposData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GnssposData& from);
  void MergeFrom(const GnssposData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssposData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.GnssposData";
  }
  protected:
  explicit GnssposData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apa_5fgnss_2eproto);
    return ::descriptor_table_apa_5fgnss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kGpsWeekFieldNumber = 3,
    kGpsSecFieldNumber = 4,
    kPosTypeFieldNumber = 5,
    kLatitudeFieldNumber = 6,
    kLongitudeFieldNumber = 7,
    kUndulationFieldNumber = 8,
    kHeightFieldNumber = 9,
    kLatStdFieldNumber = 10,
    kLonStdFieldNumber = 11,
    kHgtStdFieldNumber = 12,
    kSvsFieldNumber = 13,
    kSolnSvsFieldNumber = 14,
    kDiffAgeFieldNumber = 15,
    kHdopFieldNumber = 16,
    kPdopFieldNumber = 17,
    kTdopFieldNumber = 18,
    kVdopFieldNumber = 19,
    kGdopFieldNumber = 20,
    kIsValidFieldNumber = 2,
  };
  // .minieye.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::minieye::Header& header() const;
  ::minieye::Header* release_header();
  ::minieye::Header* mutable_header();
  void set_allocated_header(::minieye::Header* header);
  private:
  const ::minieye::Header& _internal_header() const;
  ::minieye::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::minieye::Header* header);
  ::minieye::Header* unsafe_arena_release_header();

  // .google.protobuf.UInt32Value gps_week = 3;
  bool has_gps_week() const;
  private:
  bool _internal_has_gps_week() const;
  public:
  void clear_gps_week();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& gps_week() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_gps_week();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_gps_week();
  void set_allocated_gps_week(PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_gps_week() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_gps_week();
  public:
  void unsafe_arena_set_allocated_gps_week(
      PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_gps_week();

  // .google.protobuf.DoubleValue gps_sec = 4;
  bool has_gps_sec() const;
  private:
  bool _internal_has_gps_sec() const;
  public:
  void clear_gps_sec();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& gps_sec() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_gps_sec();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_gps_sec();
  void set_allocated_gps_sec(PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_gps_sec() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_gps_sec();
  public:
  void unsafe_arena_set_allocated_gps_sec(
      PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_gps_sec();

  // .google.protobuf.UInt32Value pos_type = 5;
  bool has_pos_type() const;
  private:
  bool _internal_has_pos_type() const;
  public:
  void clear_pos_type();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& pos_type() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_pos_type();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_pos_type();
  void set_allocated_pos_type(PROTOBUF_NAMESPACE_ID::UInt32Value* pos_type);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_pos_type() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_pos_type();
  public:
  void unsafe_arena_set_allocated_pos_type(
      PROTOBUF_NAMESPACE_ID::UInt32Value* pos_type);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_pos_type();

  // .google.protobuf.DoubleValue latitude = 6;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& latitude() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_latitude();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_latitude();
  void set_allocated_latitude(PROTOBUF_NAMESPACE_ID::DoubleValue* latitude);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_latitude() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_latitude();
  public:
  void unsafe_arena_set_allocated_latitude(
      PROTOBUF_NAMESPACE_ID::DoubleValue* latitude);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_latitude();

  // .google.protobuf.DoubleValue longitude = 7;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& longitude() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_longitude();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_longitude();
  void set_allocated_longitude(PROTOBUF_NAMESPACE_ID::DoubleValue* longitude);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_longitude() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_longitude();
  public:
  void unsafe_arena_set_allocated_longitude(
      PROTOBUF_NAMESPACE_ID::DoubleValue* longitude);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_longitude();

  // .google.protobuf.FloatValue undulation = 8;
  bool has_undulation() const;
  private:
  bool _internal_has_undulation() const;
  public:
  void clear_undulation();
  const PROTOBUF_NAMESPACE_ID::FloatValue& undulation() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_undulation();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_undulation();
  void set_allocated_undulation(PROTOBUF_NAMESPACE_ID::FloatValue* undulation);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_undulation() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_undulation();
  public:
  void unsafe_arena_set_allocated_undulation(
      PROTOBUF_NAMESPACE_ID::FloatValue* undulation);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_undulation();

  // .google.protobuf.FloatValue height = 9;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  const PROTOBUF_NAMESPACE_ID::FloatValue& height() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_height();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_height();
  void set_allocated_height(PROTOBUF_NAMESPACE_ID::FloatValue* height);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_height() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_height();
  public:
  void unsafe_arena_set_allocated_height(
      PROTOBUF_NAMESPACE_ID::FloatValue* height);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_height();

  // .google.protobuf.FloatValue lat_std = 10;
  bool has_lat_std() const;
  private:
  bool _internal_has_lat_std() const;
  public:
  void clear_lat_std();
  const PROTOBUF_NAMESPACE_ID::FloatValue& lat_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_lat_std();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_lat_std();
  void set_allocated_lat_std(PROTOBUF_NAMESPACE_ID::FloatValue* lat_std);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_lat_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_lat_std();
  public:
  void unsafe_arena_set_allocated_lat_std(
      PROTOBUF_NAMESPACE_ID::FloatValue* lat_std);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_lat_std();

  // .google.protobuf.FloatValue lon_std = 11;
  bool has_lon_std() const;
  private:
  bool _internal_has_lon_std() const;
  public:
  void clear_lon_std();
  const PROTOBUF_NAMESPACE_ID::FloatValue& lon_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_lon_std();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_lon_std();
  void set_allocated_lon_std(PROTOBUF_NAMESPACE_ID::FloatValue* lon_std);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_lon_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_lon_std();
  public:
  void unsafe_arena_set_allocated_lon_std(
      PROTOBUF_NAMESPACE_ID::FloatValue* lon_std);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_lon_std();

  // .google.protobuf.FloatValue hgt_std = 12;
  bool has_hgt_std() const;
  private:
  bool _internal_has_hgt_std() const;
  public:
  void clear_hgt_std();
  const PROTOBUF_NAMESPACE_ID::FloatValue& hgt_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_hgt_std();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_hgt_std();
  void set_allocated_hgt_std(PROTOBUF_NAMESPACE_ID::FloatValue* hgt_std);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_hgt_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_hgt_std();
  public:
  void unsafe_arena_set_allocated_hgt_std(
      PROTOBUF_NAMESPACE_ID::FloatValue* hgt_std);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_hgt_std();

  // .google.protobuf.UInt32Value svs = 13;
  bool has_svs() const;
  private:
  bool _internal_has_svs() const;
  public:
  void clear_svs();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& svs() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_svs();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_svs();
  void set_allocated_svs(PROTOBUF_NAMESPACE_ID::UInt32Value* svs);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_svs() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_svs();
  public:
  void unsafe_arena_set_allocated_svs(
      PROTOBUF_NAMESPACE_ID::UInt32Value* svs);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_svs();

  // .google.protobuf.UInt32Value soln_svs = 14;
  bool has_soln_svs() const;
  private:
  bool _internal_has_soln_svs() const;
  public:
  void clear_soln_svs();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& soln_svs() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_soln_svs();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_soln_svs();
  void set_allocated_soln_svs(PROTOBUF_NAMESPACE_ID::UInt32Value* soln_svs);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_soln_svs() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_soln_svs();
  public:
  void unsafe_arena_set_allocated_soln_svs(
      PROTOBUF_NAMESPACE_ID::UInt32Value* soln_svs);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_soln_svs();

  // .google.protobuf.UInt32Value diff_age = 15;
  bool has_diff_age() const;
  private:
  bool _internal_has_diff_age() const;
  public:
  void clear_diff_age();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& diff_age() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_diff_age();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_diff_age();
  void set_allocated_diff_age(PROTOBUF_NAMESPACE_ID::UInt32Value* diff_age);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_diff_age() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_diff_age();
  public:
  void unsafe_arena_set_allocated_diff_age(
      PROTOBUF_NAMESPACE_ID::UInt32Value* diff_age);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_diff_age();

  // .google.protobuf.FloatValue hdop = 16;
  bool has_hdop() const;
  private:
  bool _internal_has_hdop() const;
  public:
  void clear_hdop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& hdop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_hdop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_hdop();
  void set_allocated_hdop(PROTOBUF_NAMESPACE_ID::FloatValue* hdop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_hdop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_hdop();
  public:
  void unsafe_arena_set_allocated_hdop(
      PROTOBUF_NAMESPACE_ID::FloatValue* hdop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_hdop();

  // .google.protobuf.FloatValue pdop = 17;
  bool has_pdop() const;
  private:
  bool _internal_has_pdop() const;
  public:
  void clear_pdop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& pdop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_pdop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_pdop();
  void set_allocated_pdop(PROTOBUF_NAMESPACE_ID::FloatValue* pdop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_pdop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_pdop();
  public:
  void unsafe_arena_set_allocated_pdop(
      PROTOBUF_NAMESPACE_ID::FloatValue* pdop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_pdop();

  // .google.protobuf.FloatValue tdop = 18;
  bool has_tdop() const;
  private:
  bool _internal_has_tdop() const;
  public:
  void clear_tdop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& tdop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_tdop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_tdop();
  void set_allocated_tdop(PROTOBUF_NAMESPACE_ID::FloatValue* tdop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_tdop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_tdop();
  public:
  void unsafe_arena_set_allocated_tdop(
      PROTOBUF_NAMESPACE_ID::FloatValue* tdop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_tdop();

  // .google.protobuf.FloatValue vdop = 19;
  bool has_vdop() const;
  private:
  bool _internal_has_vdop() const;
  public:
  void clear_vdop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& vdop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_vdop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_vdop();
  void set_allocated_vdop(PROTOBUF_NAMESPACE_ID::FloatValue* vdop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_vdop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_vdop();
  public:
  void unsafe_arena_set_allocated_vdop(
      PROTOBUF_NAMESPACE_ID::FloatValue* vdop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_vdop();

  // .google.protobuf.FloatValue gdop = 20;
  bool has_gdop() const;
  private:
  bool _internal_has_gdop() const;
  public:
  void clear_gdop();
  const PROTOBUF_NAMESPACE_ID::FloatValue& gdop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_gdop();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_gdop();
  void set_allocated_gdop(PROTOBUF_NAMESPACE_ID::FloatValue* gdop);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_gdop() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_gdop();
  public:
  void unsafe_arena_set_allocated_gdop(
      PROTOBUF_NAMESPACE_ID::FloatValue* gdop);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_gdop();

  // bool is_valid = 2;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.GnssposData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::Header* header_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* pos_type_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* latitude_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* longitude_;
  PROTOBUF_NAMESPACE_ID::FloatValue* undulation_;
  PROTOBUF_NAMESPACE_ID::FloatValue* height_;
  PROTOBUF_NAMESPACE_ID::FloatValue* lat_std_;
  PROTOBUF_NAMESPACE_ID::FloatValue* lon_std_;
  PROTOBUF_NAMESPACE_ID::FloatValue* hgt_std_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* svs_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* soln_svs_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* diff_age_;
  PROTOBUF_NAMESPACE_ID::FloatValue* hdop_;
  PROTOBUF_NAMESPACE_ID::FloatValue* pdop_;
  PROTOBUF_NAMESPACE_ID::FloatValue* tdop_;
  PROTOBUF_NAMESPACE_ID::FloatValue* vdop_;
  PROTOBUF_NAMESPACE_ID::FloatValue* gdop_;
  bool is_valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apa_5fgnss_2eproto;
};
// -------------------------------------------------------------------

class GnssvelData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.GnssvelData) */ {
 public:
  inline GnssvelData() : GnssvelData(nullptr) {};
  virtual ~GnssvelData();

  GnssvelData(const GnssvelData& from);
  GnssvelData(GnssvelData&& from) noexcept
    : GnssvelData() {
    *this = ::std::move(from);
  }

  inline GnssvelData& operator=(const GnssvelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssvelData& operator=(GnssvelData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GnssvelData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GnssvelData* internal_default_instance() {
    return reinterpret_cast<const GnssvelData*>(
               &_GnssvelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GnssvelData& a, GnssvelData& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssvelData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GnssvelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GnssvelData* New() const final {
    return CreateMaybeMessage<GnssvelData>(nullptr);
  }

  GnssvelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GnssvelData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GnssvelData& from);
  void MergeFrom(const GnssvelData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssvelData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.GnssvelData";
  }
  protected:
  explicit GnssvelData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apa_5fgnss_2eproto);
    return ::descriptor_table_apa_5fgnss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kGpsWeekFieldNumber = 3,
    kGpsSecFieldNumber = 4,
    kSolStatusFieldNumber = 5,
    kVelTypeFieldNumber = 6,
    kHorSpdFieldNumber = 7,
    kVertSpdFieldNumber = 8,
    kTrkGndFieldNumber = 9,
    kLatencyFieldNumber = 10,
    kVelXFieldNumber = 11,
    kVelYFieldNumber = 12,
    kVelZFieldNumber = 13,
    kVelXStdFieldNumber = 14,
    kVelYStdFieldNumber = 15,
    kVelZStdFieldNumber = 16,
    kIsValidFieldNumber = 2,
  };
  // .minieye.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::minieye::Header& header() const;
  ::minieye::Header* release_header();
  ::minieye::Header* mutable_header();
  void set_allocated_header(::minieye::Header* header);
  private:
  const ::minieye::Header& _internal_header() const;
  ::minieye::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::minieye::Header* header);
  ::minieye::Header* unsafe_arena_release_header();

  // .google.protobuf.UInt32Value gps_week = 3;
  bool has_gps_week() const;
  private:
  bool _internal_has_gps_week() const;
  public:
  void clear_gps_week();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& gps_week() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_gps_week();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_gps_week();
  void set_allocated_gps_week(PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_gps_week() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_gps_week();
  public:
  void unsafe_arena_set_allocated_gps_week(
      PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_gps_week();

  // .google.protobuf.DoubleValue gps_sec = 4;
  bool has_gps_sec() const;
  private:
  bool _internal_has_gps_sec() const;
  public:
  void clear_gps_sec();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& gps_sec() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_gps_sec();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_gps_sec();
  void set_allocated_gps_sec(PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_gps_sec() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_gps_sec();
  public:
  void unsafe_arena_set_allocated_gps_sec(
      PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_gps_sec();

  // .google.protobuf.UInt32Value sol_status = 5;
  bool has_sol_status() const;
  private:
  bool _internal_has_sol_status() const;
  public:
  void clear_sol_status();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& sol_status() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_sol_status();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_sol_status();
  void set_allocated_sol_status(PROTOBUF_NAMESPACE_ID::UInt32Value* sol_status);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_sol_status() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_sol_status();
  public:
  void unsafe_arena_set_allocated_sol_status(
      PROTOBUF_NAMESPACE_ID::UInt32Value* sol_status);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_sol_status();

  // .google.protobuf.UInt32Value vel_type = 6;
  bool has_vel_type() const;
  private:
  bool _internal_has_vel_type() const;
  public:
  void clear_vel_type();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& vel_type() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_vel_type();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_vel_type();
  void set_allocated_vel_type(PROTOBUF_NAMESPACE_ID::UInt32Value* vel_type);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_vel_type() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_vel_type();
  public:
  void unsafe_arena_set_allocated_vel_type(
      PROTOBUF_NAMESPACE_ID::UInt32Value* vel_type);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_vel_type();

  // .google.protobuf.FloatValue hor_spd = 7;
  bool has_hor_spd() const;
  private:
  bool _internal_has_hor_spd() const;
  public:
  void clear_hor_spd();
  const PROTOBUF_NAMESPACE_ID::FloatValue& hor_spd() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_hor_spd();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_hor_spd();
  void set_allocated_hor_spd(PROTOBUF_NAMESPACE_ID::FloatValue* hor_spd);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_hor_spd() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_hor_spd();
  public:
  void unsafe_arena_set_allocated_hor_spd(
      PROTOBUF_NAMESPACE_ID::FloatValue* hor_spd);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_hor_spd();

  // .google.protobuf.FloatValue vert_spd = 8;
  bool has_vert_spd() const;
  private:
  bool _internal_has_vert_spd() const;
  public:
  void clear_vert_spd();
  const PROTOBUF_NAMESPACE_ID::FloatValue& vert_spd() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_vert_spd();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_vert_spd();
  void set_allocated_vert_spd(PROTOBUF_NAMESPACE_ID::FloatValue* vert_spd);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_vert_spd() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_vert_spd();
  public:
  void unsafe_arena_set_allocated_vert_spd(
      PROTOBUF_NAMESPACE_ID::FloatValue* vert_spd);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_vert_spd();

  // .google.protobuf.FloatValue trk_gnd = 9;
  bool has_trk_gnd() const;
  private:
  bool _internal_has_trk_gnd() const;
  public:
  void clear_trk_gnd();
  const PROTOBUF_NAMESPACE_ID::FloatValue& trk_gnd() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_trk_gnd();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_trk_gnd();
  void set_allocated_trk_gnd(PROTOBUF_NAMESPACE_ID::FloatValue* trk_gnd);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_trk_gnd() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_trk_gnd();
  public:
  void unsafe_arena_set_allocated_trk_gnd(
      PROTOBUF_NAMESPACE_ID::FloatValue* trk_gnd);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_trk_gnd();

  // .google.protobuf.FloatValue latency = 10;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  const PROTOBUF_NAMESPACE_ID::FloatValue& latency() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_latency();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_latency();
  void set_allocated_latency(PROTOBUF_NAMESPACE_ID::FloatValue* latency);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_latency() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_latency();
  public:
  void unsafe_arena_set_allocated_latency(
      PROTOBUF_NAMESPACE_ID::FloatValue* latency);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_latency();

  // .google.protobuf.FloatValue vel_x = 11;
  bool has_vel_x() const;
  private:
  bool _internal_has_vel_x() const;
  public:
  void clear_vel_x();
  const PROTOBUF_NAMESPACE_ID::FloatValue& vel_x() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_vel_x();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_vel_x();
  void set_allocated_vel_x(PROTOBUF_NAMESPACE_ID::FloatValue* vel_x);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_vel_x() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_vel_x();
  public:
  void unsafe_arena_set_allocated_vel_x(
      PROTOBUF_NAMESPACE_ID::FloatValue* vel_x);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_vel_x();

  // .google.protobuf.FloatValue vel_y = 12;
  bool has_vel_y() const;
  private:
  bool _internal_has_vel_y() const;
  public:
  void clear_vel_y();
  const PROTOBUF_NAMESPACE_ID::FloatValue& vel_y() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_vel_y();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_vel_y();
  void set_allocated_vel_y(PROTOBUF_NAMESPACE_ID::FloatValue* vel_y);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_vel_y() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_vel_y();
  public:
  void unsafe_arena_set_allocated_vel_y(
      PROTOBUF_NAMESPACE_ID::FloatValue* vel_y);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_vel_y();

  // .google.protobuf.FloatValue vel_z = 13;
  bool has_vel_z() const;
  private:
  bool _internal_has_vel_z() const;
  public:
  void clear_vel_z();
  const PROTOBUF_NAMESPACE_ID::FloatValue& vel_z() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_vel_z();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_vel_z();
  void set_allocated_vel_z(PROTOBUF_NAMESPACE_ID::FloatValue* vel_z);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_vel_z() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_vel_z();
  public:
  void unsafe_arena_set_allocated_vel_z(
      PROTOBUF_NAMESPACE_ID::FloatValue* vel_z);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_vel_z();

  // .google.protobuf.FloatValue vel_x_std = 14;
  bool has_vel_x_std() const;
  private:
  bool _internal_has_vel_x_std() const;
  public:
  void clear_vel_x_std();
  const PROTOBUF_NAMESPACE_ID::FloatValue& vel_x_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_vel_x_std();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_vel_x_std();
  void set_allocated_vel_x_std(PROTOBUF_NAMESPACE_ID::FloatValue* vel_x_std);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_vel_x_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_vel_x_std();
  public:
  void unsafe_arena_set_allocated_vel_x_std(
      PROTOBUF_NAMESPACE_ID::FloatValue* vel_x_std);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_vel_x_std();

  // .google.protobuf.FloatValue vel_y_std = 15;
  bool has_vel_y_std() const;
  private:
  bool _internal_has_vel_y_std() const;
  public:
  void clear_vel_y_std();
  const PROTOBUF_NAMESPACE_ID::FloatValue& vel_y_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_vel_y_std();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_vel_y_std();
  void set_allocated_vel_y_std(PROTOBUF_NAMESPACE_ID::FloatValue* vel_y_std);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_vel_y_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_vel_y_std();
  public:
  void unsafe_arena_set_allocated_vel_y_std(
      PROTOBUF_NAMESPACE_ID::FloatValue* vel_y_std);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_vel_y_std();

  // .google.protobuf.FloatValue vel_z_std = 16;
  bool has_vel_z_std() const;
  private:
  bool _internal_has_vel_z_std() const;
  public:
  void clear_vel_z_std();
  const PROTOBUF_NAMESPACE_ID::FloatValue& vel_z_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_vel_z_std();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_vel_z_std();
  void set_allocated_vel_z_std(PROTOBUF_NAMESPACE_ID::FloatValue* vel_z_std);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_vel_z_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_vel_z_std();
  public:
  void unsafe_arena_set_allocated_vel_z_std(
      PROTOBUF_NAMESPACE_ID::FloatValue* vel_z_std);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_vel_z_std();

  // bool is_valid = 2;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.GnssvelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::Header* header_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* sol_status_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* vel_type_;
  PROTOBUF_NAMESPACE_ID::FloatValue* hor_spd_;
  PROTOBUF_NAMESPACE_ID::FloatValue* vert_spd_;
  PROTOBUF_NAMESPACE_ID::FloatValue* trk_gnd_;
  PROTOBUF_NAMESPACE_ID::FloatValue* latency_;
  PROTOBUF_NAMESPACE_ID::FloatValue* vel_x_;
  PROTOBUF_NAMESPACE_ID::FloatValue* vel_y_;
  PROTOBUF_NAMESPACE_ID::FloatValue* vel_z_;
  PROTOBUF_NAMESPACE_ID::FloatValue* vel_x_std_;
  PROTOBUF_NAMESPACE_ID::FloatValue* vel_y_std_;
  PROTOBUF_NAMESPACE_ID::FloatValue* vel_z_std_;
  bool is_valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apa_5fgnss_2eproto;
};
// -------------------------------------------------------------------

class GnssheadingData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.GnssheadingData) */ {
 public:
  inline GnssheadingData() : GnssheadingData(nullptr) {};
  virtual ~GnssheadingData();

  GnssheadingData(const GnssheadingData& from);
  GnssheadingData(GnssheadingData&& from) noexcept
    : GnssheadingData() {
    *this = ::std::move(from);
  }

  inline GnssheadingData& operator=(const GnssheadingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssheadingData& operator=(GnssheadingData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GnssheadingData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GnssheadingData* internal_default_instance() {
    return reinterpret_cast<const GnssheadingData*>(
               &_GnssheadingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GnssheadingData& a, GnssheadingData& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssheadingData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GnssheadingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GnssheadingData* New() const final {
    return CreateMaybeMessage<GnssheadingData>(nullptr);
  }

  GnssheadingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GnssheadingData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GnssheadingData& from);
  void MergeFrom(const GnssheadingData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssheadingData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.GnssheadingData";
  }
  protected:
  explicit GnssheadingData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apa_5fgnss_2eproto);
    return ::descriptor_table_apa_5fgnss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kGpsWeekFieldNumber = 3,
    kGpsSecFieldNumber = 4,
    kSvsFieldNumber = 5,
    kSolnSvsFieldNumber = 6,
    kPosTypeFieldNumber = 7,
    kLengthFieldNumber = 8,
    kHeadingFieldNumber = 9,
    kPitchFieldNumber = 10,
    kHdgStdFieldNumber = 11,
    kPitchStdFieldNumber = 12,
    kIsValidFieldNumber = 2,
  };
  // .minieye.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::minieye::Header& header() const;
  ::minieye::Header* release_header();
  ::minieye::Header* mutable_header();
  void set_allocated_header(::minieye::Header* header);
  private:
  const ::minieye::Header& _internal_header() const;
  ::minieye::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::minieye::Header* header);
  ::minieye::Header* unsafe_arena_release_header();

  // .google.protobuf.UInt32Value gps_week = 3;
  bool has_gps_week() const;
  private:
  bool _internal_has_gps_week() const;
  public:
  void clear_gps_week();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& gps_week() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_gps_week();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_gps_week();
  void set_allocated_gps_week(PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_gps_week() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_gps_week();
  public:
  void unsafe_arena_set_allocated_gps_week(
      PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_gps_week();

  // .google.protobuf.DoubleValue gps_sec = 4;
  bool has_gps_sec() const;
  private:
  bool _internal_has_gps_sec() const;
  public:
  void clear_gps_sec();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& gps_sec() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_gps_sec();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_gps_sec();
  void set_allocated_gps_sec(PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_gps_sec() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_gps_sec();
  public:
  void unsafe_arena_set_allocated_gps_sec(
      PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_gps_sec();

  // .google.protobuf.UInt32Value svs = 5;
  bool has_svs() const;
  private:
  bool _internal_has_svs() const;
  public:
  void clear_svs();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& svs() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_svs();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_svs();
  void set_allocated_svs(PROTOBUF_NAMESPACE_ID::UInt32Value* svs);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_svs() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_svs();
  public:
  void unsafe_arena_set_allocated_svs(
      PROTOBUF_NAMESPACE_ID::UInt32Value* svs);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_svs();

  // .google.protobuf.UInt32Value soln_svs = 6;
  bool has_soln_svs() const;
  private:
  bool _internal_has_soln_svs() const;
  public:
  void clear_soln_svs();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& soln_svs() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_soln_svs();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_soln_svs();
  void set_allocated_soln_svs(PROTOBUF_NAMESPACE_ID::UInt32Value* soln_svs);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_soln_svs() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_soln_svs();
  public:
  void unsafe_arena_set_allocated_soln_svs(
      PROTOBUF_NAMESPACE_ID::UInt32Value* soln_svs);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_soln_svs();

  // .google.protobuf.UInt32Value pos_type = 7;
  bool has_pos_type() const;
  private:
  bool _internal_has_pos_type() const;
  public:
  void clear_pos_type();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& pos_type() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_pos_type();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_pos_type();
  void set_allocated_pos_type(PROTOBUF_NAMESPACE_ID::UInt32Value* pos_type);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_pos_type() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_pos_type();
  public:
  void unsafe_arena_set_allocated_pos_type(
      PROTOBUF_NAMESPACE_ID::UInt32Value* pos_type);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_pos_type();

  // .google.protobuf.FloatValue length = 8;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  const PROTOBUF_NAMESPACE_ID::FloatValue& length() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_length();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_length();
  void set_allocated_length(PROTOBUF_NAMESPACE_ID::FloatValue* length);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_length() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_length();
  public:
  void unsafe_arena_set_allocated_length(
      PROTOBUF_NAMESPACE_ID::FloatValue* length);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_length();

  // .google.protobuf.FloatValue heading = 9;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  const PROTOBUF_NAMESPACE_ID::FloatValue& heading() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_heading();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_heading();
  void set_allocated_heading(PROTOBUF_NAMESPACE_ID::FloatValue* heading);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_heading() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_heading();
  public:
  void unsafe_arena_set_allocated_heading(
      PROTOBUF_NAMESPACE_ID::FloatValue* heading);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_heading();

  // .google.protobuf.FloatValue pitch = 10;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  const PROTOBUF_NAMESPACE_ID::FloatValue& pitch() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_pitch();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_pitch();
  void set_allocated_pitch(PROTOBUF_NAMESPACE_ID::FloatValue* pitch);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_pitch() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_pitch();
  public:
  void unsafe_arena_set_allocated_pitch(
      PROTOBUF_NAMESPACE_ID::FloatValue* pitch);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_pitch();

  // .google.protobuf.FloatValue hdg_std = 11;
  bool has_hdg_std() const;
  private:
  bool _internal_has_hdg_std() const;
  public:
  void clear_hdg_std();
  const PROTOBUF_NAMESPACE_ID::FloatValue& hdg_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_hdg_std();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_hdg_std();
  void set_allocated_hdg_std(PROTOBUF_NAMESPACE_ID::FloatValue* hdg_std);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_hdg_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_hdg_std();
  public:
  void unsafe_arena_set_allocated_hdg_std(
      PROTOBUF_NAMESPACE_ID::FloatValue* hdg_std);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_hdg_std();

  // .google.protobuf.FloatValue pitch_std = 12;
  bool has_pitch_std() const;
  private:
  bool _internal_has_pitch_std() const;
  public:
  void clear_pitch_std();
  const PROTOBUF_NAMESPACE_ID::FloatValue& pitch_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_pitch_std();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_pitch_std();
  void set_allocated_pitch_std(PROTOBUF_NAMESPACE_ID::FloatValue* pitch_std);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_pitch_std() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_pitch_std();
  public:
  void unsafe_arena_set_allocated_pitch_std(
      PROTOBUF_NAMESPACE_ID::FloatValue* pitch_std);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_pitch_std();

  // bool is_valid = 2;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.GnssheadingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::Header* header_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* svs_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* soln_svs_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* pos_type_;
  PROTOBUF_NAMESPACE_ID::FloatValue* length_;
  PROTOBUF_NAMESPACE_ID::FloatValue* heading_;
  PROTOBUF_NAMESPACE_ID::FloatValue* pitch_;
  PROTOBUF_NAMESPACE_ID::FloatValue* hdg_std_;
  PROTOBUF_NAMESPACE_ID::FloatValue* pitch_std_;
  bool is_valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apa_5fgnss_2eproto;
};
// -------------------------------------------------------------------

class GnssData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.GnssData) */ {
 public:
  inline GnssData() : GnssData(nullptr) {};
  virtual ~GnssData();

  GnssData(const GnssData& from);
  GnssData(GnssData&& from) noexcept
    : GnssData() {
    *this = ::std::move(from);
  }

  inline GnssData& operator=(const GnssData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssData& operator=(GnssData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GnssData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GnssData* internal_default_instance() {
    return reinterpret_cast<const GnssData*>(
               &_GnssData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GnssData& a, GnssData& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GnssData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GnssData* New() const final {
    return CreateMaybeMessage<GnssData>(nullptr);
  }

  GnssData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GnssData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GnssData& from);
  void MergeFrom(const GnssData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.GnssData";
  }
  protected:
  explicit GnssData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apa_5fgnss_2eproto);
    return ::descriptor_table_apa_5fgnss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGnssPosFieldNumber = 1,
    kGnssVelFieldNumber = 2,
    kGnssHeadingFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kTickFieldNumber = 5,
  };
  // repeated .minieye.GnssposData gnss_pos = 1;
  int gnss_pos_size() const;
  private:
  int _internal_gnss_pos_size() const;
  public:
  void clear_gnss_pos();
  ::minieye::GnssposData* mutable_gnss_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssposData >*
      mutable_gnss_pos();
  private:
  const ::minieye::GnssposData& _internal_gnss_pos(int index) const;
  ::minieye::GnssposData* _internal_add_gnss_pos();
  public:
  const ::minieye::GnssposData& gnss_pos(int index) const;
  ::minieye::GnssposData* add_gnss_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssposData >&
      gnss_pos() const;

  // repeated .minieye.GnssvelData gnss_vel = 2;
  int gnss_vel_size() const;
  private:
  int _internal_gnss_vel_size() const;
  public:
  void clear_gnss_vel();
  ::minieye::GnssvelData* mutable_gnss_vel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssvelData >*
      mutable_gnss_vel();
  private:
  const ::minieye::GnssvelData& _internal_gnss_vel(int index) const;
  ::minieye::GnssvelData* _internal_add_gnss_vel();
  public:
  const ::minieye::GnssvelData& gnss_vel(int index) const;
  ::minieye::GnssvelData* add_gnss_vel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssvelData >&
      gnss_vel() const;

  // repeated .minieye.GnssheadingData gnss_heading = 3;
  int gnss_heading_size() const;
  private:
  int _internal_gnss_heading_size() const;
  public:
  void clear_gnss_heading();
  ::minieye::GnssheadingData* mutable_gnss_heading(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssheadingData >*
      mutable_gnss_heading();
  private:
  const ::minieye::GnssheadingData& _internal_gnss_heading(int index) const;
  ::minieye::GnssheadingData* _internal_add_gnss_heading();
  public:
  const ::minieye::GnssheadingData& gnss_heading(int index) const;
  ::minieye::GnssheadingData* add_gnss_heading();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssheadingData >&
      gnss_heading() const;

  // uint64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 5;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.GnssData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssposData > gnss_pos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssvelData > gnss_vel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssheadingData > gnss_heading_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apa_5fgnss_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GnssposData

// .minieye.Header header = 1;
inline bool GnssposData::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GnssposData::has_header() const {
  return _internal_has_header();
}
inline const ::minieye::Header& GnssposData::_internal_header() const {
  const ::minieye::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::Header*>(
      &::minieye::_Header_default_instance_);
}
inline const ::minieye::Header& GnssposData::header() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.header)
  return _internal_header();
}
inline void GnssposData::unsafe_arena_set_allocated_header(
    ::minieye::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.header)
}
inline ::minieye::Header* GnssposData::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::Header* GnssposData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.header)
  
  ::minieye::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::minieye::Header* GnssposData::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::minieye::Header* GnssposData::mutable_header() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.header)
  return _internal_mutable_header();
}
inline void GnssposData::set_allocated_header(::minieye::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.header)
}

// bool is_valid = 2;
inline void GnssposData::clear_is_valid() {
  is_valid_ = false;
}
inline bool GnssposData::_internal_is_valid() const {
  return is_valid_;
}
inline bool GnssposData::is_valid() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.is_valid)
  return _internal_is_valid();
}
inline void GnssposData::_internal_set_is_valid(bool value) {
  
  is_valid_ = value;
}
inline void GnssposData::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:minieye.GnssposData.is_valid)
}

// .google.protobuf.UInt32Value gps_week = 3;
inline bool GnssposData::_internal_has_gps_week() const {
  return this != internal_default_instance() && gps_week_ != nullptr;
}
inline bool GnssposData::has_gps_week() const {
  return _internal_has_gps_week();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssposData::_internal_gps_week() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = gps_week_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssposData::gps_week() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.gps_week)
  return _internal_gps_week();
}
inline void GnssposData::unsafe_arena_set_allocated_gps_week(
    PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_week_);
  }
  gps_week_ = gps_week;
  if (gps_week) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.gps_week)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::release_gps_week() {
  auto temp = unsafe_arena_release_gps_week();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::unsafe_arena_release_gps_week() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.gps_week)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = gps_week_;
  gps_week_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::_internal_mutable_gps_week() {
  
  if (gps_week_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    gps_week_ = p;
  }
  return gps_week_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::mutable_gps_week() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.gps_week)
  return _internal_mutable_gps_week();
}
inline void GnssposData::set_allocated_gps_week(PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_week_);
  }
  if (gps_week) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_week)->GetArena();
    if (message_arena != submessage_arena) {
      gps_week = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps_week, submessage_arena);
    }
    
  } else {
    
  }
  gps_week_ = gps_week;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.gps_week)
}

// .google.protobuf.DoubleValue gps_sec = 4;
inline bool GnssposData::_internal_has_gps_sec() const {
  return this != internal_default_instance() && gps_sec_ != nullptr;
}
inline bool GnssposData::has_gps_sec() const {
  return _internal_has_gps_sec();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& GnssposData::_internal_gps_sec() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = gps_sec_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& GnssposData::gps_sec() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.gps_sec)
  return _internal_gps_sec();
}
inline void GnssposData::unsafe_arena_set_allocated_gps_sec(
    PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_sec_);
  }
  gps_sec_ = gps_sec;
  if (gps_sec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.gps_sec)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssposData::release_gps_sec() {
  auto temp = unsafe_arena_release_gps_sec();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssposData::unsafe_arena_release_gps_sec() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.gps_sec)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = gps_sec_;
  gps_sec_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssposData::_internal_mutable_gps_sec() {
  
  if (gps_sec_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    gps_sec_ = p;
  }
  return gps_sec_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssposData::mutable_gps_sec() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.gps_sec)
  return _internal_mutable_gps_sec();
}
inline void GnssposData::set_allocated_gps_sec(PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_sec_);
  }
  if (gps_sec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_sec)->GetArena();
    if (message_arena != submessage_arena) {
      gps_sec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps_sec, submessage_arena);
    }
    
  } else {
    
  }
  gps_sec_ = gps_sec;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.gps_sec)
}

// .google.protobuf.UInt32Value pos_type = 5;
inline bool GnssposData::_internal_has_pos_type() const {
  return this != internal_default_instance() && pos_type_ != nullptr;
}
inline bool GnssposData::has_pos_type() const {
  return _internal_has_pos_type();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssposData::_internal_pos_type() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = pos_type_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssposData::pos_type() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.pos_type)
  return _internal_pos_type();
}
inline void GnssposData::unsafe_arena_set_allocated_pos_type(
    PROTOBUF_NAMESPACE_ID::UInt32Value* pos_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_type_);
  }
  pos_type_ = pos_type;
  if (pos_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.pos_type)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::release_pos_type() {
  auto temp = unsafe_arena_release_pos_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::unsafe_arena_release_pos_type() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.pos_type)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = pos_type_;
  pos_type_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::_internal_mutable_pos_type() {
  
  if (pos_type_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    pos_type_ = p;
  }
  return pos_type_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::mutable_pos_type() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.pos_type)
  return _internal_mutable_pos_type();
}
inline void GnssposData::set_allocated_pos_type(PROTOBUF_NAMESPACE_ID::UInt32Value* pos_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_type_);
  }
  if (pos_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_type)->GetArena();
    if (message_arena != submessage_arena) {
      pos_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_type, submessage_arena);
    }
    
  } else {
    
  }
  pos_type_ = pos_type;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.pos_type)
}

// .google.protobuf.DoubleValue latitude = 6;
inline bool GnssposData::_internal_has_latitude() const {
  return this != internal_default_instance() && latitude_ != nullptr;
}
inline bool GnssposData::has_latitude() const {
  return _internal_has_latitude();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& GnssposData::_internal_latitude() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = latitude_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& GnssposData::latitude() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.latitude)
  return _internal_latitude();
}
inline void GnssposData::unsafe_arena_set_allocated_latitude(
    PROTOBUF_NAMESPACE_ID::DoubleValue* latitude) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latitude_);
  }
  latitude_ = latitude;
  if (latitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.latitude)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssposData::release_latitude() {
  auto temp = unsafe_arena_release_latitude();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssposData::unsafe_arena_release_latitude() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.latitude)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = latitude_;
  latitude_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssposData::_internal_mutable_latitude() {
  
  if (latitude_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    latitude_ = p;
  }
  return latitude_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssposData::mutable_latitude() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.latitude)
  return _internal_mutable_latitude();
}
inline void GnssposData::set_allocated_latitude(PROTOBUF_NAMESPACE_ID::DoubleValue* latitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(latitude_);
  }
  if (latitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latitude)->GetArena();
    if (message_arena != submessage_arena) {
      latitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latitude, submessage_arena);
    }
    
  } else {
    
  }
  latitude_ = latitude;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.latitude)
}

// .google.protobuf.DoubleValue longitude = 7;
inline bool GnssposData::_internal_has_longitude() const {
  return this != internal_default_instance() && longitude_ != nullptr;
}
inline bool GnssposData::has_longitude() const {
  return _internal_has_longitude();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& GnssposData::_internal_longitude() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = longitude_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& GnssposData::longitude() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.longitude)
  return _internal_longitude();
}
inline void GnssposData::unsafe_arena_set_allocated_longitude(
    PROTOBUF_NAMESPACE_ID::DoubleValue* longitude) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(longitude_);
  }
  longitude_ = longitude;
  if (longitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.longitude)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssposData::release_longitude() {
  auto temp = unsafe_arena_release_longitude();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssposData::unsafe_arena_release_longitude() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.longitude)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = longitude_;
  longitude_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssposData::_internal_mutable_longitude() {
  
  if (longitude_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    longitude_ = p;
  }
  return longitude_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssposData::mutable_longitude() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.longitude)
  return _internal_mutable_longitude();
}
inline void GnssposData::set_allocated_longitude(PROTOBUF_NAMESPACE_ID::DoubleValue* longitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(longitude_);
  }
  if (longitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(longitude)->GetArena();
    if (message_arena != submessage_arena) {
      longitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, longitude, submessage_arena);
    }
    
  } else {
    
  }
  longitude_ = longitude;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.longitude)
}

// .google.protobuf.FloatValue undulation = 8;
inline bool GnssposData::_internal_has_undulation() const {
  return this != internal_default_instance() && undulation_ != nullptr;
}
inline bool GnssposData::has_undulation() const {
  return _internal_has_undulation();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::_internal_undulation() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = undulation_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::undulation() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.undulation)
  return _internal_undulation();
}
inline void GnssposData::unsafe_arena_set_allocated_undulation(
    PROTOBUF_NAMESPACE_ID::FloatValue* undulation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undulation_);
  }
  undulation_ = undulation;
  if (undulation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.undulation)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::release_undulation() {
  auto temp = unsafe_arena_release_undulation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::unsafe_arena_release_undulation() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.undulation)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = undulation_;
  undulation_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::_internal_mutable_undulation() {
  
  if (undulation_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    undulation_ = p;
  }
  return undulation_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::mutable_undulation() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.undulation)
  return _internal_mutable_undulation();
}
inline void GnssposData::set_allocated_undulation(PROTOBUF_NAMESPACE_ID::FloatValue* undulation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undulation_);
  }
  if (undulation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undulation)->GetArena();
    if (message_arena != submessage_arena) {
      undulation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undulation, submessage_arena);
    }
    
  } else {
    
  }
  undulation_ = undulation;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.undulation)
}

// .google.protobuf.FloatValue height = 9;
inline bool GnssposData::_internal_has_height() const {
  return this != internal_default_instance() && height_ != nullptr;
}
inline bool GnssposData::has_height() const {
  return _internal_has_height();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::_internal_height() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = height_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::height() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.height)
  return _internal_height();
}
inline void GnssposData::unsafe_arena_set_allocated_height(
    PROTOBUF_NAMESPACE_ID::FloatValue* height) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height_);
  }
  height_ = height;
  if (height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.height)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::release_height() {
  auto temp = unsafe_arena_release_height();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::unsafe_arena_release_height() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.height)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = height_;
  height_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::_internal_mutable_height() {
  
  if (height_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    height_ = p;
  }
  return height_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::mutable_height() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.height)
  return _internal_mutable_height();
}
inline void GnssposData::set_allocated_height(PROTOBUF_NAMESPACE_ID::FloatValue* height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(height_);
  }
  if (height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height)->GetArena();
    if (message_arena != submessage_arena) {
      height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height, submessage_arena);
    }
    
  } else {
    
  }
  height_ = height;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.height)
}

// .google.protobuf.FloatValue lat_std = 10;
inline bool GnssposData::_internal_has_lat_std() const {
  return this != internal_default_instance() && lat_std_ != nullptr;
}
inline bool GnssposData::has_lat_std() const {
  return _internal_has_lat_std();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::_internal_lat_std() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = lat_std_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::lat_std() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.lat_std)
  return _internal_lat_std();
}
inline void GnssposData::unsafe_arena_set_allocated_lat_std(
    PROTOBUF_NAMESPACE_ID::FloatValue* lat_std) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_std_);
  }
  lat_std_ = lat_std;
  if (lat_std) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.lat_std)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::release_lat_std() {
  auto temp = unsafe_arena_release_lat_std();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::unsafe_arena_release_lat_std() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.lat_std)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = lat_std_;
  lat_std_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::_internal_mutable_lat_std() {
  
  if (lat_std_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    lat_std_ = p;
  }
  return lat_std_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::mutable_lat_std() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.lat_std)
  return _internal_mutable_lat_std();
}
inline void GnssposData::set_allocated_lat_std(PROTOBUF_NAMESPACE_ID::FloatValue* lat_std) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_std_);
  }
  if (lat_std) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_std)->GetArena();
    if (message_arena != submessage_arena) {
      lat_std = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat_std, submessage_arena);
    }
    
  } else {
    
  }
  lat_std_ = lat_std;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.lat_std)
}

// .google.protobuf.FloatValue lon_std = 11;
inline bool GnssposData::_internal_has_lon_std() const {
  return this != internal_default_instance() && lon_std_ != nullptr;
}
inline bool GnssposData::has_lon_std() const {
  return _internal_has_lon_std();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::_internal_lon_std() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = lon_std_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::lon_std() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.lon_std)
  return _internal_lon_std();
}
inline void GnssposData::unsafe_arena_set_allocated_lon_std(
    PROTOBUF_NAMESPACE_ID::FloatValue* lon_std) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lon_std_);
  }
  lon_std_ = lon_std;
  if (lon_std) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.lon_std)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::release_lon_std() {
  auto temp = unsafe_arena_release_lon_std();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::unsafe_arena_release_lon_std() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.lon_std)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = lon_std_;
  lon_std_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::_internal_mutable_lon_std() {
  
  if (lon_std_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    lon_std_ = p;
  }
  return lon_std_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::mutable_lon_std() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.lon_std)
  return _internal_mutable_lon_std();
}
inline void GnssposData::set_allocated_lon_std(PROTOBUF_NAMESPACE_ID::FloatValue* lon_std) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lon_std_);
  }
  if (lon_std) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lon_std)->GetArena();
    if (message_arena != submessage_arena) {
      lon_std = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lon_std, submessage_arena);
    }
    
  } else {
    
  }
  lon_std_ = lon_std;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.lon_std)
}

// .google.protobuf.FloatValue hgt_std = 12;
inline bool GnssposData::_internal_has_hgt_std() const {
  return this != internal_default_instance() && hgt_std_ != nullptr;
}
inline bool GnssposData::has_hgt_std() const {
  return _internal_has_hgt_std();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::_internal_hgt_std() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = hgt_std_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::hgt_std() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.hgt_std)
  return _internal_hgt_std();
}
inline void GnssposData::unsafe_arena_set_allocated_hgt_std(
    PROTOBUF_NAMESPACE_ID::FloatValue* hgt_std) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hgt_std_);
  }
  hgt_std_ = hgt_std;
  if (hgt_std) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.hgt_std)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::release_hgt_std() {
  auto temp = unsafe_arena_release_hgt_std();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::unsafe_arena_release_hgt_std() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.hgt_std)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = hgt_std_;
  hgt_std_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::_internal_mutable_hgt_std() {
  
  if (hgt_std_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    hgt_std_ = p;
  }
  return hgt_std_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::mutable_hgt_std() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.hgt_std)
  return _internal_mutable_hgt_std();
}
inline void GnssposData::set_allocated_hgt_std(PROTOBUF_NAMESPACE_ID::FloatValue* hgt_std) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hgt_std_);
  }
  if (hgt_std) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hgt_std)->GetArena();
    if (message_arena != submessage_arena) {
      hgt_std = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hgt_std, submessage_arena);
    }
    
  } else {
    
  }
  hgt_std_ = hgt_std;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.hgt_std)
}

// .google.protobuf.UInt32Value svs = 13;
inline bool GnssposData::_internal_has_svs() const {
  return this != internal_default_instance() && svs_ != nullptr;
}
inline bool GnssposData::has_svs() const {
  return _internal_has_svs();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssposData::_internal_svs() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = svs_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssposData::svs() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.svs)
  return _internal_svs();
}
inline void GnssposData::unsafe_arena_set_allocated_svs(
    PROTOBUF_NAMESPACE_ID::UInt32Value* svs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(svs_);
  }
  svs_ = svs;
  if (svs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.svs)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::release_svs() {
  auto temp = unsafe_arena_release_svs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::unsafe_arena_release_svs() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.svs)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = svs_;
  svs_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::_internal_mutable_svs() {
  
  if (svs_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    svs_ = p;
  }
  return svs_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::mutable_svs() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.svs)
  return _internal_mutable_svs();
}
inline void GnssposData::set_allocated_svs(PROTOBUF_NAMESPACE_ID::UInt32Value* svs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(svs_);
  }
  if (svs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(svs)->GetArena();
    if (message_arena != submessage_arena) {
      svs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, svs, submessage_arena);
    }
    
  } else {
    
  }
  svs_ = svs;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.svs)
}

// .google.protobuf.UInt32Value soln_svs = 14;
inline bool GnssposData::_internal_has_soln_svs() const {
  return this != internal_default_instance() && soln_svs_ != nullptr;
}
inline bool GnssposData::has_soln_svs() const {
  return _internal_has_soln_svs();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssposData::_internal_soln_svs() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = soln_svs_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssposData::soln_svs() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.soln_svs)
  return _internal_soln_svs();
}
inline void GnssposData::unsafe_arena_set_allocated_soln_svs(
    PROTOBUF_NAMESPACE_ID::UInt32Value* soln_svs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soln_svs_);
  }
  soln_svs_ = soln_svs;
  if (soln_svs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.soln_svs)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::release_soln_svs() {
  auto temp = unsafe_arena_release_soln_svs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::unsafe_arena_release_soln_svs() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.soln_svs)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = soln_svs_;
  soln_svs_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::_internal_mutable_soln_svs() {
  
  if (soln_svs_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    soln_svs_ = p;
  }
  return soln_svs_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::mutable_soln_svs() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.soln_svs)
  return _internal_mutable_soln_svs();
}
inline void GnssposData::set_allocated_soln_svs(PROTOBUF_NAMESPACE_ID::UInt32Value* soln_svs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(soln_svs_);
  }
  if (soln_svs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soln_svs)->GetArena();
    if (message_arena != submessage_arena) {
      soln_svs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soln_svs, submessage_arena);
    }
    
  } else {
    
  }
  soln_svs_ = soln_svs;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.soln_svs)
}

// .google.protobuf.UInt32Value diff_age = 15;
inline bool GnssposData::_internal_has_diff_age() const {
  return this != internal_default_instance() && diff_age_ != nullptr;
}
inline bool GnssposData::has_diff_age() const {
  return _internal_has_diff_age();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssposData::_internal_diff_age() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = diff_age_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssposData::diff_age() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.diff_age)
  return _internal_diff_age();
}
inline void GnssposData::unsafe_arena_set_allocated_diff_age(
    PROTOBUF_NAMESPACE_ID::UInt32Value* diff_age) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_age_);
  }
  diff_age_ = diff_age;
  if (diff_age) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.diff_age)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::release_diff_age() {
  auto temp = unsafe_arena_release_diff_age();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::unsafe_arena_release_diff_age() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.diff_age)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = diff_age_;
  diff_age_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::_internal_mutable_diff_age() {
  
  if (diff_age_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    diff_age_ = p;
  }
  return diff_age_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssposData::mutable_diff_age() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.diff_age)
  return _internal_mutable_diff_age();
}
inline void GnssposData::set_allocated_diff_age(PROTOBUF_NAMESPACE_ID::UInt32Value* diff_age) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_age_);
  }
  if (diff_age) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_age)->GetArena();
    if (message_arena != submessage_arena) {
      diff_age = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diff_age, submessage_arena);
    }
    
  } else {
    
  }
  diff_age_ = diff_age;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.diff_age)
}

// .google.protobuf.FloatValue hdop = 16;
inline bool GnssposData::_internal_has_hdop() const {
  return this != internal_default_instance() && hdop_ != nullptr;
}
inline bool GnssposData::has_hdop() const {
  return _internal_has_hdop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::_internal_hdop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = hdop_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::hdop() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.hdop)
  return _internal_hdop();
}
inline void GnssposData::unsafe_arena_set_allocated_hdop(
    PROTOBUF_NAMESPACE_ID::FloatValue* hdop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdop_);
  }
  hdop_ = hdop;
  if (hdop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.hdop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::release_hdop() {
  auto temp = unsafe_arena_release_hdop();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::unsafe_arena_release_hdop() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.hdop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = hdop_;
  hdop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::_internal_mutable_hdop() {
  
  if (hdop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    hdop_ = p;
  }
  return hdop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::mutable_hdop() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.hdop)
  return _internal_mutable_hdop();
}
inline void GnssposData::set_allocated_hdop(PROTOBUF_NAMESPACE_ID::FloatValue* hdop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdop_);
  }
  if (hdop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdop)->GetArena();
    if (message_arena != submessage_arena) {
      hdop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdop, submessage_arena);
    }
    
  } else {
    
  }
  hdop_ = hdop;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.hdop)
}

// .google.protobuf.FloatValue pdop = 17;
inline bool GnssposData::_internal_has_pdop() const {
  return this != internal_default_instance() && pdop_ != nullptr;
}
inline bool GnssposData::has_pdop() const {
  return _internal_has_pdop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::_internal_pdop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = pdop_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::pdop() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.pdop)
  return _internal_pdop();
}
inline void GnssposData::unsafe_arena_set_allocated_pdop(
    PROTOBUF_NAMESPACE_ID::FloatValue* pdop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pdop_);
  }
  pdop_ = pdop;
  if (pdop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.pdop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::release_pdop() {
  auto temp = unsafe_arena_release_pdop();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::unsafe_arena_release_pdop() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.pdop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pdop_;
  pdop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::_internal_mutable_pdop() {
  
  if (pdop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    pdop_ = p;
  }
  return pdop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::mutable_pdop() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.pdop)
  return _internal_mutable_pdop();
}
inline void GnssposData::set_allocated_pdop(PROTOBUF_NAMESPACE_ID::FloatValue* pdop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pdop_);
  }
  if (pdop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pdop)->GetArena();
    if (message_arena != submessage_arena) {
      pdop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pdop, submessage_arena);
    }
    
  } else {
    
  }
  pdop_ = pdop;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.pdop)
}

// .google.protobuf.FloatValue tdop = 18;
inline bool GnssposData::_internal_has_tdop() const {
  return this != internal_default_instance() && tdop_ != nullptr;
}
inline bool GnssposData::has_tdop() const {
  return _internal_has_tdop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::_internal_tdop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = tdop_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::tdop() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.tdop)
  return _internal_tdop();
}
inline void GnssposData::unsafe_arena_set_allocated_tdop(
    PROTOBUF_NAMESPACE_ID::FloatValue* tdop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdop_);
  }
  tdop_ = tdop;
  if (tdop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.tdop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::release_tdop() {
  auto temp = unsafe_arena_release_tdop();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::unsafe_arena_release_tdop() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.tdop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = tdop_;
  tdop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::_internal_mutable_tdop() {
  
  if (tdop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    tdop_ = p;
  }
  return tdop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::mutable_tdop() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.tdop)
  return _internal_mutable_tdop();
}
inline void GnssposData::set_allocated_tdop(PROTOBUF_NAMESPACE_ID::FloatValue* tdop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdop_);
  }
  if (tdop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdop)->GetArena();
    if (message_arena != submessage_arena) {
      tdop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdop, submessage_arena);
    }
    
  } else {
    
  }
  tdop_ = tdop;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.tdop)
}

// .google.protobuf.FloatValue vdop = 19;
inline bool GnssposData::_internal_has_vdop() const {
  return this != internal_default_instance() && vdop_ != nullptr;
}
inline bool GnssposData::has_vdop() const {
  return _internal_has_vdop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::_internal_vdop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = vdop_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::vdop() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.vdop)
  return _internal_vdop();
}
inline void GnssposData::unsafe_arena_set_allocated_vdop(
    PROTOBUF_NAMESPACE_ID::FloatValue* vdop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vdop_);
  }
  vdop_ = vdop;
  if (vdop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.vdop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::release_vdop() {
  auto temp = unsafe_arena_release_vdop();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::unsafe_arena_release_vdop() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.vdop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = vdop_;
  vdop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::_internal_mutable_vdop() {
  
  if (vdop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    vdop_ = p;
  }
  return vdop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::mutable_vdop() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.vdop)
  return _internal_mutable_vdop();
}
inline void GnssposData::set_allocated_vdop(PROTOBUF_NAMESPACE_ID::FloatValue* vdop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vdop_);
  }
  if (vdop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vdop)->GetArena();
    if (message_arena != submessage_arena) {
      vdop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vdop, submessage_arena);
    }
    
  } else {
    
  }
  vdop_ = vdop;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.vdop)
}

// .google.protobuf.FloatValue gdop = 20;
inline bool GnssposData::_internal_has_gdop() const {
  return this != internal_default_instance() && gdop_ != nullptr;
}
inline bool GnssposData::has_gdop() const {
  return _internal_has_gdop();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::_internal_gdop() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = gdop_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssposData::gdop() const {
  // @@protoc_insertion_point(field_get:minieye.GnssposData.gdop)
  return _internal_gdop();
}
inline void GnssposData::unsafe_arena_set_allocated_gdop(
    PROTOBUF_NAMESPACE_ID::FloatValue* gdop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gdop_);
  }
  gdop_ = gdop;
  if (gdop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssposData.gdop)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::release_gdop() {
  auto temp = unsafe_arena_release_gdop();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::unsafe_arena_release_gdop() {
  // @@protoc_insertion_point(field_release:minieye.GnssposData.gdop)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = gdop_;
  gdop_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::_internal_mutable_gdop() {
  
  if (gdop_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    gdop_ = p;
  }
  return gdop_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssposData::mutable_gdop() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssposData.gdop)
  return _internal_mutable_gdop();
}
inline void GnssposData::set_allocated_gdop(PROTOBUF_NAMESPACE_ID::FloatValue* gdop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gdop_);
  }
  if (gdop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gdop)->GetArena();
    if (message_arena != submessage_arena) {
      gdop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gdop, submessage_arena);
    }
    
  } else {
    
  }
  gdop_ = gdop;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssposData.gdop)
}

// -------------------------------------------------------------------

// GnssvelData

// .minieye.Header header = 1;
inline bool GnssvelData::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GnssvelData::has_header() const {
  return _internal_has_header();
}
inline const ::minieye::Header& GnssvelData::_internal_header() const {
  const ::minieye::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::Header*>(
      &::minieye::_Header_default_instance_);
}
inline const ::minieye::Header& GnssvelData::header() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.header)
  return _internal_header();
}
inline void GnssvelData::unsafe_arena_set_allocated_header(
    ::minieye::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.header)
}
inline ::minieye::Header* GnssvelData::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::Header* GnssvelData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.header)
  
  ::minieye::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::minieye::Header* GnssvelData::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::minieye::Header* GnssvelData::mutable_header() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.header)
  return _internal_mutable_header();
}
inline void GnssvelData::set_allocated_header(::minieye::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.header)
}

// bool is_valid = 2;
inline void GnssvelData::clear_is_valid() {
  is_valid_ = false;
}
inline bool GnssvelData::_internal_is_valid() const {
  return is_valid_;
}
inline bool GnssvelData::is_valid() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.is_valid)
  return _internal_is_valid();
}
inline void GnssvelData::_internal_set_is_valid(bool value) {
  
  is_valid_ = value;
}
inline void GnssvelData::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:minieye.GnssvelData.is_valid)
}

// .google.protobuf.UInt32Value gps_week = 3;
inline bool GnssvelData::_internal_has_gps_week() const {
  return this != internal_default_instance() && gps_week_ != nullptr;
}
inline bool GnssvelData::has_gps_week() const {
  return _internal_has_gps_week();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssvelData::_internal_gps_week() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = gps_week_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssvelData::gps_week() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.gps_week)
  return _internal_gps_week();
}
inline void GnssvelData::unsafe_arena_set_allocated_gps_week(
    PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_week_);
  }
  gps_week_ = gps_week;
  if (gps_week) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.gps_week)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssvelData::release_gps_week() {
  auto temp = unsafe_arena_release_gps_week();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssvelData::unsafe_arena_release_gps_week() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.gps_week)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = gps_week_;
  gps_week_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssvelData::_internal_mutable_gps_week() {
  
  if (gps_week_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    gps_week_ = p;
  }
  return gps_week_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssvelData::mutable_gps_week() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.gps_week)
  return _internal_mutable_gps_week();
}
inline void GnssvelData::set_allocated_gps_week(PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_week_);
  }
  if (gps_week) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_week)->GetArena();
    if (message_arena != submessage_arena) {
      gps_week = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps_week, submessage_arena);
    }
    
  } else {
    
  }
  gps_week_ = gps_week;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.gps_week)
}

// .google.protobuf.DoubleValue gps_sec = 4;
inline bool GnssvelData::_internal_has_gps_sec() const {
  return this != internal_default_instance() && gps_sec_ != nullptr;
}
inline bool GnssvelData::has_gps_sec() const {
  return _internal_has_gps_sec();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& GnssvelData::_internal_gps_sec() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = gps_sec_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& GnssvelData::gps_sec() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.gps_sec)
  return _internal_gps_sec();
}
inline void GnssvelData::unsafe_arena_set_allocated_gps_sec(
    PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_sec_);
  }
  gps_sec_ = gps_sec;
  if (gps_sec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.gps_sec)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssvelData::release_gps_sec() {
  auto temp = unsafe_arena_release_gps_sec();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssvelData::unsafe_arena_release_gps_sec() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.gps_sec)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = gps_sec_;
  gps_sec_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssvelData::_internal_mutable_gps_sec() {
  
  if (gps_sec_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    gps_sec_ = p;
  }
  return gps_sec_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssvelData::mutable_gps_sec() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.gps_sec)
  return _internal_mutable_gps_sec();
}
inline void GnssvelData::set_allocated_gps_sec(PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_sec_);
  }
  if (gps_sec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_sec)->GetArena();
    if (message_arena != submessage_arena) {
      gps_sec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps_sec, submessage_arena);
    }
    
  } else {
    
  }
  gps_sec_ = gps_sec;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.gps_sec)
}

// .google.protobuf.UInt32Value sol_status = 5;
inline bool GnssvelData::_internal_has_sol_status() const {
  return this != internal_default_instance() && sol_status_ != nullptr;
}
inline bool GnssvelData::has_sol_status() const {
  return _internal_has_sol_status();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssvelData::_internal_sol_status() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = sol_status_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssvelData::sol_status() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.sol_status)
  return _internal_sol_status();
}
inline void GnssvelData::unsafe_arena_set_allocated_sol_status(
    PROTOBUF_NAMESPACE_ID::UInt32Value* sol_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sol_status_);
  }
  sol_status_ = sol_status;
  if (sol_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.sol_status)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssvelData::release_sol_status() {
  auto temp = unsafe_arena_release_sol_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssvelData::unsafe_arena_release_sol_status() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.sol_status)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = sol_status_;
  sol_status_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssvelData::_internal_mutable_sol_status() {
  
  if (sol_status_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    sol_status_ = p;
  }
  return sol_status_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssvelData::mutable_sol_status() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.sol_status)
  return _internal_mutable_sol_status();
}
inline void GnssvelData::set_allocated_sol_status(PROTOBUF_NAMESPACE_ID::UInt32Value* sol_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sol_status_);
  }
  if (sol_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sol_status)->GetArena();
    if (message_arena != submessage_arena) {
      sol_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sol_status, submessage_arena);
    }
    
  } else {
    
  }
  sol_status_ = sol_status;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.sol_status)
}

// .google.protobuf.UInt32Value vel_type = 6;
inline bool GnssvelData::_internal_has_vel_type() const {
  return this != internal_default_instance() && vel_type_ != nullptr;
}
inline bool GnssvelData::has_vel_type() const {
  return _internal_has_vel_type();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssvelData::_internal_vel_type() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = vel_type_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssvelData::vel_type() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.vel_type)
  return _internal_vel_type();
}
inline void GnssvelData::unsafe_arena_set_allocated_vel_type(
    PROTOBUF_NAMESPACE_ID::UInt32Value* vel_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_type_);
  }
  vel_type_ = vel_type;
  if (vel_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.vel_type)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssvelData::release_vel_type() {
  auto temp = unsafe_arena_release_vel_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssvelData::unsafe_arena_release_vel_type() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.vel_type)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = vel_type_;
  vel_type_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssvelData::_internal_mutable_vel_type() {
  
  if (vel_type_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    vel_type_ = p;
  }
  return vel_type_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssvelData::mutable_vel_type() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.vel_type)
  return _internal_mutable_vel_type();
}
inline void GnssvelData::set_allocated_vel_type(PROTOBUF_NAMESPACE_ID::UInt32Value* vel_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_type_);
  }
  if (vel_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_type)->GetArena();
    if (message_arena != submessage_arena) {
      vel_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel_type, submessage_arena);
    }
    
  } else {
    
  }
  vel_type_ = vel_type;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.vel_type)
}

// .google.protobuf.FloatValue hor_spd = 7;
inline bool GnssvelData::_internal_has_hor_spd() const {
  return this != internal_default_instance() && hor_spd_ != nullptr;
}
inline bool GnssvelData::has_hor_spd() const {
  return _internal_has_hor_spd();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::_internal_hor_spd() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = hor_spd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::hor_spd() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.hor_spd)
  return _internal_hor_spd();
}
inline void GnssvelData::unsafe_arena_set_allocated_hor_spd(
    PROTOBUF_NAMESPACE_ID::FloatValue* hor_spd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hor_spd_);
  }
  hor_spd_ = hor_spd;
  if (hor_spd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.hor_spd)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::release_hor_spd() {
  auto temp = unsafe_arena_release_hor_spd();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::unsafe_arena_release_hor_spd() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.hor_spd)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = hor_spd_;
  hor_spd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::_internal_mutable_hor_spd() {
  
  if (hor_spd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    hor_spd_ = p;
  }
  return hor_spd_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::mutable_hor_spd() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.hor_spd)
  return _internal_mutable_hor_spd();
}
inline void GnssvelData::set_allocated_hor_spd(PROTOBUF_NAMESPACE_ID::FloatValue* hor_spd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hor_spd_);
  }
  if (hor_spd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hor_spd)->GetArena();
    if (message_arena != submessage_arena) {
      hor_spd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hor_spd, submessage_arena);
    }
    
  } else {
    
  }
  hor_spd_ = hor_spd;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.hor_spd)
}

// .google.protobuf.FloatValue vert_spd = 8;
inline bool GnssvelData::_internal_has_vert_spd() const {
  return this != internal_default_instance() && vert_spd_ != nullptr;
}
inline bool GnssvelData::has_vert_spd() const {
  return _internal_has_vert_spd();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::_internal_vert_spd() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = vert_spd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::vert_spd() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.vert_spd)
  return _internal_vert_spd();
}
inline void GnssvelData::unsafe_arena_set_allocated_vert_spd(
    PROTOBUF_NAMESPACE_ID::FloatValue* vert_spd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vert_spd_);
  }
  vert_spd_ = vert_spd;
  if (vert_spd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.vert_spd)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::release_vert_spd() {
  auto temp = unsafe_arena_release_vert_spd();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::unsafe_arena_release_vert_spd() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.vert_spd)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = vert_spd_;
  vert_spd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::_internal_mutable_vert_spd() {
  
  if (vert_spd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    vert_spd_ = p;
  }
  return vert_spd_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::mutable_vert_spd() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.vert_spd)
  return _internal_mutable_vert_spd();
}
inline void GnssvelData::set_allocated_vert_spd(PROTOBUF_NAMESPACE_ID::FloatValue* vert_spd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vert_spd_);
  }
  if (vert_spd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vert_spd)->GetArena();
    if (message_arena != submessage_arena) {
      vert_spd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vert_spd, submessage_arena);
    }
    
  } else {
    
  }
  vert_spd_ = vert_spd;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.vert_spd)
}

// .google.protobuf.FloatValue trk_gnd = 9;
inline bool GnssvelData::_internal_has_trk_gnd() const {
  return this != internal_default_instance() && trk_gnd_ != nullptr;
}
inline bool GnssvelData::has_trk_gnd() const {
  return _internal_has_trk_gnd();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::_internal_trk_gnd() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = trk_gnd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::trk_gnd() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.trk_gnd)
  return _internal_trk_gnd();
}
inline void GnssvelData::unsafe_arena_set_allocated_trk_gnd(
    PROTOBUF_NAMESPACE_ID::FloatValue* trk_gnd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trk_gnd_);
  }
  trk_gnd_ = trk_gnd;
  if (trk_gnd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.trk_gnd)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::release_trk_gnd() {
  auto temp = unsafe_arena_release_trk_gnd();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::unsafe_arena_release_trk_gnd() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.trk_gnd)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = trk_gnd_;
  trk_gnd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::_internal_mutable_trk_gnd() {
  
  if (trk_gnd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    trk_gnd_ = p;
  }
  return trk_gnd_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::mutable_trk_gnd() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.trk_gnd)
  return _internal_mutable_trk_gnd();
}
inline void GnssvelData::set_allocated_trk_gnd(PROTOBUF_NAMESPACE_ID::FloatValue* trk_gnd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trk_gnd_);
  }
  if (trk_gnd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trk_gnd)->GetArena();
    if (message_arena != submessage_arena) {
      trk_gnd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trk_gnd, submessage_arena);
    }
    
  } else {
    
  }
  trk_gnd_ = trk_gnd;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.trk_gnd)
}

// .google.protobuf.FloatValue latency = 10;
inline bool GnssvelData::_internal_has_latency() const {
  return this != internal_default_instance() && latency_ != nullptr;
}
inline bool GnssvelData::has_latency() const {
  return _internal_has_latency();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::_internal_latency() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = latency_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::latency() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.latency)
  return _internal_latency();
}
inline void GnssvelData::unsafe_arena_set_allocated_latency(
    PROTOBUF_NAMESPACE_ID::FloatValue* latency) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latency_);
  }
  latency_ = latency;
  if (latency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.latency)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::release_latency() {
  auto temp = unsafe_arena_release_latency();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::unsafe_arena_release_latency() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.latency)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = latency_;
  latency_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::_internal_mutable_latency() {
  
  if (latency_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    latency_ = p;
  }
  return latency_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::mutable_latency() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.latency)
  return _internal_mutable_latency();
}
inline void GnssvelData::set_allocated_latency(PROTOBUF_NAMESPACE_ID::FloatValue* latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(latency_);
  }
  if (latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latency)->GetArena();
    if (message_arena != submessage_arena) {
      latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latency, submessage_arena);
    }
    
  } else {
    
  }
  latency_ = latency;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.latency)
}

// .google.protobuf.FloatValue vel_x = 11;
inline bool GnssvelData::_internal_has_vel_x() const {
  return this != internal_default_instance() && vel_x_ != nullptr;
}
inline bool GnssvelData::has_vel_x() const {
  return _internal_has_vel_x();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::_internal_vel_x() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = vel_x_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::vel_x() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.vel_x)
  return _internal_vel_x();
}
inline void GnssvelData::unsafe_arena_set_allocated_vel_x(
    PROTOBUF_NAMESPACE_ID::FloatValue* vel_x) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_x_);
  }
  vel_x_ = vel_x;
  if (vel_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.vel_x)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::release_vel_x() {
  auto temp = unsafe_arena_release_vel_x();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::unsafe_arena_release_vel_x() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.vel_x)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = vel_x_;
  vel_x_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::_internal_mutable_vel_x() {
  
  if (vel_x_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    vel_x_ = p;
  }
  return vel_x_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::mutable_vel_x() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.vel_x)
  return _internal_mutable_vel_x();
}
inline void GnssvelData::set_allocated_vel_x(PROTOBUF_NAMESPACE_ID::FloatValue* vel_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_x_);
  }
  if (vel_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_x)->GetArena();
    if (message_arena != submessage_arena) {
      vel_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel_x, submessage_arena);
    }
    
  } else {
    
  }
  vel_x_ = vel_x;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.vel_x)
}

// .google.protobuf.FloatValue vel_y = 12;
inline bool GnssvelData::_internal_has_vel_y() const {
  return this != internal_default_instance() && vel_y_ != nullptr;
}
inline bool GnssvelData::has_vel_y() const {
  return _internal_has_vel_y();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::_internal_vel_y() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = vel_y_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::vel_y() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.vel_y)
  return _internal_vel_y();
}
inline void GnssvelData::unsafe_arena_set_allocated_vel_y(
    PROTOBUF_NAMESPACE_ID::FloatValue* vel_y) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_y_);
  }
  vel_y_ = vel_y;
  if (vel_y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.vel_y)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::release_vel_y() {
  auto temp = unsafe_arena_release_vel_y();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::unsafe_arena_release_vel_y() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.vel_y)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = vel_y_;
  vel_y_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::_internal_mutable_vel_y() {
  
  if (vel_y_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    vel_y_ = p;
  }
  return vel_y_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::mutable_vel_y() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.vel_y)
  return _internal_mutable_vel_y();
}
inline void GnssvelData::set_allocated_vel_y(PROTOBUF_NAMESPACE_ID::FloatValue* vel_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_y_);
  }
  if (vel_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_y)->GetArena();
    if (message_arena != submessage_arena) {
      vel_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel_y, submessage_arena);
    }
    
  } else {
    
  }
  vel_y_ = vel_y;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.vel_y)
}

// .google.protobuf.FloatValue vel_z = 13;
inline bool GnssvelData::_internal_has_vel_z() const {
  return this != internal_default_instance() && vel_z_ != nullptr;
}
inline bool GnssvelData::has_vel_z() const {
  return _internal_has_vel_z();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::_internal_vel_z() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = vel_z_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::vel_z() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.vel_z)
  return _internal_vel_z();
}
inline void GnssvelData::unsafe_arena_set_allocated_vel_z(
    PROTOBUF_NAMESPACE_ID::FloatValue* vel_z) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_z_);
  }
  vel_z_ = vel_z;
  if (vel_z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.vel_z)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::release_vel_z() {
  auto temp = unsafe_arena_release_vel_z();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::unsafe_arena_release_vel_z() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.vel_z)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = vel_z_;
  vel_z_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::_internal_mutable_vel_z() {
  
  if (vel_z_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    vel_z_ = p;
  }
  return vel_z_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::mutable_vel_z() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.vel_z)
  return _internal_mutable_vel_z();
}
inline void GnssvelData::set_allocated_vel_z(PROTOBUF_NAMESPACE_ID::FloatValue* vel_z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_z_);
  }
  if (vel_z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_z)->GetArena();
    if (message_arena != submessage_arena) {
      vel_z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel_z, submessage_arena);
    }
    
  } else {
    
  }
  vel_z_ = vel_z;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.vel_z)
}

// .google.protobuf.FloatValue vel_x_std = 14;
inline bool GnssvelData::_internal_has_vel_x_std() const {
  return this != internal_default_instance() && vel_x_std_ != nullptr;
}
inline bool GnssvelData::has_vel_x_std() const {
  return _internal_has_vel_x_std();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::_internal_vel_x_std() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = vel_x_std_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::vel_x_std() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.vel_x_std)
  return _internal_vel_x_std();
}
inline void GnssvelData::unsafe_arena_set_allocated_vel_x_std(
    PROTOBUF_NAMESPACE_ID::FloatValue* vel_x_std) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_x_std_);
  }
  vel_x_std_ = vel_x_std;
  if (vel_x_std) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.vel_x_std)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::release_vel_x_std() {
  auto temp = unsafe_arena_release_vel_x_std();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::unsafe_arena_release_vel_x_std() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.vel_x_std)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = vel_x_std_;
  vel_x_std_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::_internal_mutable_vel_x_std() {
  
  if (vel_x_std_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    vel_x_std_ = p;
  }
  return vel_x_std_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::mutable_vel_x_std() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.vel_x_std)
  return _internal_mutable_vel_x_std();
}
inline void GnssvelData::set_allocated_vel_x_std(PROTOBUF_NAMESPACE_ID::FloatValue* vel_x_std) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_x_std_);
  }
  if (vel_x_std) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_x_std)->GetArena();
    if (message_arena != submessage_arena) {
      vel_x_std = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel_x_std, submessage_arena);
    }
    
  } else {
    
  }
  vel_x_std_ = vel_x_std;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.vel_x_std)
}

// .google.protobuf.FloatValue vel_y_std = 15;
inline bool GnssvelData::_internal_has_vel_y_std() const {
  return this != internal_default_instance() && vel_y_std_ != nullptr;
}
inline bool GnssvelData::has_vel_y_std() const {
  return _internal_has_vel_y_std();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::_internal_vel_y_std() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = vel_y_std_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::vel_y_std() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.vel_y_std)
  return _internal_vel_y_std();
}
inline void GnssvelData::unsafe_arena_set_allocated_vel_y_std(
    PROTOBUF_NAMESPACE_ID::FloatValue* vel_y_std) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_y_std_);
  }
  vel_y_std_ = vel_y_std;
  if (vel_y_std) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.vel_y_std)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::release_vel_y_std() {
  auto temp = unsafe_arena_release_vel_y_std();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::unsafe_arena_release_vel_y_std() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.vel_y_std)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = vel_y_std_;
  vel_y_std_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::_internal_mutable_vel_y_std() {
  
  if (vel_y_std_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    vel_y_std_ = p;
  }
  return vel_y_std_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::mutable_vel_y_std() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.vel_y_std)
  return _internal_mutable_vel_y_std();
}
inline void GnssvelData::set_allocated_vel_y_std(PROTOBUF_NAMESPACE_ID::FloatValue* vel_y_std) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_y_std_);
  }
  if (vel_y_std) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_y_std)->GetArena();
    if (message_arena != submessage_arena) {
      vel_y_std = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel_y_std, submessage_arena);
    }
    
  } else {
    
  }
  vel_y_std_ = vel_y_std;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.vel_y_std)
}

// .google.protobuf.FloatValue vel_z_std = 16;
inline bool GnssvelData::_internal_has_vel_z_std() const {
  return this != internal_default_instance() && vel_z_std_ != nullptr;
}
inline bool GnssvelData::has_vel_z_std() const {
  return _internal_has_vel_z_std();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::_internal_vel_z_std() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = vel_z_std_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssvelData::vel_z_std() const {
  // @@protoc_insertion_point(field_get:minieye.GnssvelData.vel_z_std)
  return _internal_vel_z_std();
}
inline void GnssvelData::unsafe_arena_set_allocated_vel_z_std(
    PROTOBUF_NAMESPACE_ID::FloatValue* vel_z_std) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_z_std_);
  }
  vel_z_std_ = vel_z_std;
  if (vel_z_std) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssvelData.vel_z_std)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::release_vel_z_std() {
  auto temp = unsafe_arena_release_vel_z_std();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::unsafe_arena_release_vel_z_std() {
  // @@protoc_insertion_point(field_release:minieye.GnssvelData.vel_z_std)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = vel_z_std_;
  vel_z_std_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::_internal_mutable_vel_z_std() {
  
  if (vel_z_std_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    vel_z_std_ = p;
  }
  return vel_z_std_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssvelData::mutable_vel_z_std() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssvelData.vel_z_std)
  return _internal_mutable_vel_z_std();
}
inline void GnssvelData::set_allocated_vel_z_std(PROTOBUF_NAMESPACE_ID::FloatValue* vel_z_std) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_z_std_);
  }
  if (vel_z_std) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_z_std)->GetArena();
    if (message_arena != submessage_arena) {
      vel_z_std = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel_z_std, submessage_arena);
    }
    
  } else {
    
  }
  vel_z_std_ = vel_z_std;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssvelData.vel_z_std)
}

// -------------------------------------------------------------------

// GnssheadingData

// .minieye.Header header = 1;
inline bool GnssheadingData::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GnssheadingData::has_header() const {
  return _internal_has_header();
}
inline const ::minieye::Header& GnssheadingData::_internal_header() const {
  const ::minieye::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::Header*>(
      &::minieye::_Header_default_instance_);
}
inline const ::minieye::Header& GnssheadingData::header() const {
  // @@protoc_insertion_point(field_get:minieye.GnssheadingData.header)
  return _internal_header();
}
inline void GnssheadingData::unsafe_arena_set_allocated_header(
    ::minieye::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssheadingData.header)
}
inline ::minieye::Header* GnssheadingData::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::Header* GnssheadingData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:minieye.GnssheadingData.header)
  
  ::minieye::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::minieye::Header* GnssheadingData::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::minieye::Header* GnssheadingData::mutable_header() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssheadingData.header)
  return _internal_mutable_header();
}
inline void GnssheadingData::set_allocated_header(::minieye::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssheadingData.header)
}

// bool is_valid = 2;
inline void GnssheadingData::clear_is_valid() {
  is_valid_ = false;
}
inline bool GnssheadingData::_internal_is_valid() const {
  return is_valid_;
}
inline bool GnssheadingData::is_valid() const {
  // @@protoc_insertion_point(field_get:minieye.GnssheadingData.is_valid)
  return _internal_is_valid();
}
inline void GnssheadingData::_internal_set_is_valid(bool value) {
  
  is_valid_ = value;
}
inline void GnssheadingData::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:minieye.GnssheadingData.is_valid)
}

// .google.protobuf.UInt32Value gps_week = 3;
inline bool GnssheadingData::_internal_has_gps_week() const {
  return this != internal_default_instance() && gps_week_ != nullptr;
}
inline bool GnssheadingData::has_gps_week() const {
  return _internal_has_gps_week();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssheadingData::_internal_gps_week() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = gps_week_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssheadingData::gps_week() const {
  // @@protoc_insertion_point(field_get:minieye.GnssheadingData.gps_week)
  return _internal_gps_week();
}
inline void GnssheadingData::unsafe_arena_set_allocated_gps_week(
    PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_week_);
  }
  gps_week_ = gps_week;
  if (gps_week) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssheadingData.gps_week)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::release_gps_week() {
  auto temp = unsafe_arena_release_gps_week();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::unsafe_arena_release_gps_week() {
  // @@protoc_insertion_point(field_release:minieye.GnssheadingData.gps_week)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = gps_week_;
  gps_week_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::_internal_mutable_gps_week() {
  
  if (gps_week_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    gps_week_ = p;
  }
  return gps_week_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::mutable_gps_week() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssheadingData.gps_week)
  return _internal_mutable_gps_week();
}
inline void GnssheadingData::set_allocated_gps_week(PROTOBUF_NAMESPACE_ID::UInt32Value* gps_week) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_week_);
  }
  if (gps_week) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_week)->GetArena();
    if (message_arena != submessage_arena) {
      gps_week = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps_week, submessage_arena);
    }
    
  } else {
    
  }
  gps_week_ = gps_week;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssheadingData.gps_week)
}

// .google.protobuf.DoubleValue gps_sec = 4;
inline bool GnssheadingData::_internal_has_gps_sec() const {
  return this != internal_default_instance() && gps_sec_ != nullptr;
}
inline bool GnssheadingData::has_gps_sec() const {
  return _internal_has_gps_sec();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& GnssheadingData::_internal_gps_sec() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = gps_sec_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& GnssheadingData::gps_sec() const {
  // @@protoc_insertion_point(field_get:minieye.GnssheadingData.gps_sec)
  return _internal_gps_sec();
}
inline void GnssheadingData::unsafe_arena_set_allocated_gps_sec(
    PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_sec_);
  }
  gps_sec_ = gps_sec;
  if (gps_sec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssheadingData.gps_sec)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssheadingData::release_gps_sec() {
  auto temp = unsafe_arena_release_gps_sec();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssheadingData::unsafe_arena_release_gps_sec() {
  // @@protoc_insertion_point(field_release:minieye.GnssheadingData.gps_sec)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = gps_sec_;
  gps_sec_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssheadingData::_internal_mutable_gps_sec() {
  
  if (gps_sec_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    gps_sec_ = p;
  }
  return gps_sec_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GnssheadingData::mutable_gps_sec() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssheadingData.gps_sec)
  return _internal_mutable_gps_sec();
}
inline void GnssheadingData::set_allocated_gps_sec(PROTOBUF_NAMESPACE_ID::DoubleValue* gps_sec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_sec_);
  }
  if (gps_sec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_sec)->GetArena();
    if (message_arena != submessage_arena) {
      gps_sec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps_sec, submessage_arena);
    }
    
  } else {
    
  }
  gps_sec_ = gps_sec;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssheadingData.gps_sec)
}

// .google.protobuf.UInt32Value svs = 5;
inline bool GnssheadingData::_internal_has_svs() const {
  return this != internal_default_instance() && svs_ != nullptr;
}
inline bool GnssheadingData::has_svs() const {
  return _internal_has_svs();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssheadingData::_internal_svs() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = svs_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssheadingData::svs() const {
  // @@protoc_insertion_point(field_get:minieye.GnssheadingData.svs)
  return _internal_svs();
}
inline void GnssheadingData::unsafe_arena_set_allocated_svs(
    PROTOBUF_NAMESPACE_ID::UInt32Value* svs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(svs_);
  }
  svs_ = svs;
  if (svs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssheadingData.svs)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::release_svs() {
  auto temp = unsafe_arena_release_svs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::unsafe_arena_release_svs() {
  // @@protoc_insertion_point(field_release:minieye.GnssheadingData.svs)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = svs_;
  svs_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::_internal_mutable_svs() {
  
  if (svs_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    svs_ = p;
  }
  return svs_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::mutable_svs() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssheadingData.svs)
  return _internal_mutable_svs();
}
inline void GnssheadingData::set_allocated_svs(PROTOBUF_NAMESPACE_ID::UInt32Value* svs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(svs_);
  }
  if (svs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(svs)->GetArena();
    if (message_arena != submessage_arena) {
      svs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, svs, submessage_arena);
    }
    
  } else {
    
  }
  svs_ = svs;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssheadingData.svs)
}

// .google.protobuf.UInt32Value soln_svs = 6;
inline bool GnssheadingData::_internal_has_soln_svs() const {
  return this != internal_default_instance() && soln_svs_ != nullptr;
}
inline bool GnssheadingData::has_soln_svs() const {
  return _internal_has_soln_svs();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssheadingData::_internal_soln_svs() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = soln_svs_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssheadingData::soln_svs() const {
  // @@protoc_insertion_point(field_get:minieye.GnssheadingData.soln_svs)
  return _internal_soln_svs();
}
inline void GnssheadingData::unsafe_arena_set_allocated_soln_svs(
    PROTOBUF_NAMESPACE_ID::UInt32Value* soln_svs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soln_svs_);
  }
  soln_svs_ = soln_svs;
  if (soln_svs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssheadingData.soln_svs)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::release_soln_svs() {
  auto temp = unsafe_arena_release_soln_svs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::unsafe_arena_release_soln_svs() {
  // @@protoc_insertion_point(field_release:minieye.GnssheadingData.soln_svs)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = soln_svs_;
  soln_svs_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::_internal_mutable_soln_svs() {
  
  if (soln_svs_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    soln_svs_ = p;
  }
  return soln_svs_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::mutable_soln_svs() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssheadingData.soln_svs)
  return _internal_mutable_soln_svs();
}
inline void GnssheadingData::set_allocated_soln_svs(PROTOBUF_NAMESPACE_ID::UInt32Value* soln_svs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(soln_svs_);
  }
  if (soln_svs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soln_svs)->GetArena();
    if (message_arena != submessage_arena) {
      soln_svs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soln_svs, submessage_arena);
    }
    
  } else {
    
  }
  soln_svs_ = soln_svs;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssheadingData.soln_svs)
}

// .google.protobuf.UInt32Value pos_type = 7;
inline bool GnssheadingData::_internal_has_pos_type() const {
  return this != internal_default_instance() && pos_type_ != nullptr;
}
inline bool GnssheadingData::has_pos_type() const {
  return _internal_has_pos_type();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssheadingData::_internal_pos_type() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = pos_type_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& GnssheadingData::pos_type() const {
  // @@protoc_insertion_point(field_get:minieye.GnssheadingData.pos_type)
  return _internal_pos_type();
}
inline void GnssheadingData::unsafe_arena_set_allocated_pos_type(
    PROTOBUF_NAMESPACE_ID::UInt32Value* pos_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_type_);
  }
  pos_type_ = pos_type;
  if (pos_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssheadingData.pos_type)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::release_pos_type() {
  auto temp = unsafe_arena_release_pos_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::unsafe_arena_release_pos_type() {
  // @@protoc_insertion_point(field_release:minieye.GnssheadingData.pos_type)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = pos_type_;
  pos_type_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::_internal_mutable_pos_type() {
  
  if (pos_type_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    pos_type_ = p;
  }
  return pos_type_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* GnssheadingData::mutable_pos_type() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssheadingData.pos_type)
  return _internal_mutable_pos_type();
}
inline void GnssheadingData::set_allocated_pos_type(PROTOBUF_NAMESPACE_ID::UInt32Value* pos_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_type_);
  }
  if (pos_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_type)->GetArena();
    if (message_arena != submessage_arena) {
      pos_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_type, submessage_arena);
    }
    
  } else {
    
  }
  pos_type_ = pos_type;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssheadingData.pos_type)
}

// .google.protobuf.FloatValue length = 8;
inline bool GnssheadingData::_internal_has_length() const {
  return this != internal_default_instance() && length_ != nullptr;
}
inline bool GnssheadingData::has_length() const {
  return _internal_has_length();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssheadingData::_internal_length() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = length_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssheadingData::length() const {
  // @@protoc_insertion_point(field_get:minieye.GnssheadingData.length)
  return _internal_length();
}
inline void GnssheadingData::unsafe_arena_set_allocated_length(
    PROTOBUF_NAMESPACE_ID::FloatValue* length) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(length_);
  }
  length_ = length;
  if (length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssheadingData.length)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::release_length() {
  auto temp = unsafe_arena_release_length();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::unsafe_arena_release_length() {
  // @@protoc_insertion_point(field_release:minieye.GnssheadingData.length)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = length_;
  length_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::_internal_mutable_length() {
  
  if (length_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    length_ = p;
  }
  return length_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::mutable_length() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssheadingData.length)
  return _internal_mutable_length();
}
inline void GnssheadingData::set_allocated_length(PROTOBUF_NAMESPACE_ID::FloatValue* length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(length_);
  }
  if (length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(length)->GetArena();
    if (message_arena != submessage_arena) {
      length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, length, submessage_arena);
    }
    
  } else {
    
  }
  length_ = length;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssheadingData.length)
}

// .google.protobuf.FloatValue heading = 9;
inline bool GnssheadingData::_internal_has_heading() const {
  return this != internal_default_instance() && heading_ != nullptr;
}
inline bool GnssheadingData::has_heading() const {
  return _internal_has_heading();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssheadingData::_internal_heading() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = heading_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssheadingData::heading() const {
  // @@protoc_insertion_point(field_get:minieye.GnssheadingData.heading)
  return _internal_heading();
}
inline void GnssheadingData::unsafe_arena_set_allocated_heading(
    PROTOBUF_NAMESPACE_ID::FloatValue* heading) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading_);
  }
  heading_ = heading;
  if (heading) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssheadingData.heading)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::release_heading() {
  auto temp = unsafe_arena_release_heading();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::unsafe_arena_release_heading() {
  // @@protoc_insertion_point(field_release:minieye.GnssheadingData.heading)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = heading_;
  heading_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::_internal_mutable_heading() {
  
  if (heading_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    heading_ = p;
  }
  return heading_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::mutable_heading() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssheadingData.heading)
  return _internal_mutable_heading();
}
inline void GnssheadingData::set_allocated_heading(PROTOBUF_NAMESPACE_ID::FloatValue* heading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading_);
  }
  if (heading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading)->GetArena();
    if (message_arena != submessage_arena) {
      heading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heading, submessage_arena);
    }
    
  } else {
    
  }
  heading_ = heading;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssheadingData.heading)
}

// .google.protobuf.FloatValue pitch = 10;
inline bool GnssheadingData::_internal_has_pitch() const {
  return this != internal_default_instance() && pitch_ != nullptr;
}
inline bool GnssheadingData::has_pitch() const {
  return _internal_has_pitch();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssheadingData::_internal_pitch() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = pitch_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssheadingData::pitch() const {
  // @@protoc_insertion_point(field_get:minieye.GnssheadingData.pitch)
  return _internal_pitch();
}
inline void GnssheadingData::unsafe_arena_set_allocated_pitch(
    PROTOBUF_NAMESPACE_ID::FloatValue* pitch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitch_);
  }
  pitch_ = pitch;
  if (pitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssheadingData.pitch)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::release_pitch() {
  auto temp = unsafe_arena_release_pitch();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::unsafe_arena_release_pitch() {
  // @@protoc_insertion_point(field_release:minieye.GnssheadingData.pitch)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pitch_;
  pitch_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::_internal_mutable_pitch() {
  
  if (pitch_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    pitch_ = p;
  }
  return pitch_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::mutable_pitch() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssheadingData.pitch)
  return _internal_mutable_pitch();
}
inline void GnssheadingData::set_allocated_pitch(PROTOBUF_NAMESPACE_ID::FloatValue* pitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitch_);
  }
  if (pitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitch)->GetArena();
    if (message_arena != submessage_arena) {
      pitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pitch, submessage_arena);
    }
    
  } else {
    
  }
  pitch_ = pitch;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssheadingData.pitch)
}

// .google.protobuf.FloatValue hdg_std = 11;
inline bool GnssheadingData::_internal_has_hdg_std() const {
  return this != internal_default_instance() && hdg_std_ != nullptr;
}
inline bool GnssheadingData::has_hdg_std() const {
  return _internal_has_hdg_std();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssheadingData::_internal_hdg_std() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = hdg_std_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssheadingData::hdg_std() const {
  // @@protoc_insertion_point(field_get:minieye.GnssheadingData.hdg_std)
  return _internal_hdg_std();
}
inline void GnssheadingData::unsafe_arena_set_allocated_hdg_std(
    PROTOBUF_NAMESPACE_ID::FloatValue* hdg_std) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdg_std_);
  }
  hdg_std_ = hdg_std;
  if (hdg_std) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssheadingData.hdg_std)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::release_hdg_std() {
  auto temp = unsafe_arena_release_hdg_std();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::unsafe_arena_release_hdg_std() {
  // @@protoc_insertion_point(field_release:minieye.GnssheadingData.hdg_std)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = hdg_std_;
  hdg_std_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::_internal_mutable_hdg_std() {
  
  if (hdg_std_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    hdg_std_ = p;
  }
  return hdg_std_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::mutable_hdg_std() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssheadingData.hdg_std)
  return _internal_mutable_hdg_std();
}
inline void GnssheadingData::set_allocated_hdg_std(PROTOBUF_NAMESPACE_ID::FloatValue* hdg_std) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdg_std_);
  }
  if (hdg_std) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdg_std)->GetArena();
    if (message_arena != submessage_arena) {
      hdg_std = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdg_std, submessage_arena);
    }
    
  } else {
    
  }
  hdg_std_ = hdg_std;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssheadingData.hdg_std)
}

// .google.protobuf.FloatValue pitch_std = 12;
inline bool GnssheadingData::_internal_has_pitch_std() const {
  return this != internal_default_instance() && pitch_std_ != nullptr;
}
inline bool GnssheadingData::has_pitch_std() const {
  return _internal_has_pitch_std();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssheadingData::_internal_pitch_std() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = pitch_std_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& GnssheadingData::pitch_std() const {
  // @@protoc_insertion_point(field_get:minieye.GnssheadingData.pitch_std)
  return _internal_pitch_std();
}
inline void GnssheadingData::unsafe_arena_set_allocated_pitch_std(
    PROTOBUF_NAMESPACE_ID::FloatValue* pitch_std) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitch_std_);
  }
  pitch_std_ = pitch_std;
  if (pitch_std) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.GnssheadingData.pitch_std)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::release_pitch_std() {
  auto temp = unsafe_arena_release_pitch_std();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::unsafe_arena_release_pitch_std() {
  // @@protoc_insertion_point(field_release:minieye.GnssheadingData.pitch_std)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = pitch_std_;
  pitch_std_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::_internal_mutable_pitch_std() {
  
  if (pitch_std_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    pitch_std_ = p;
  }
  return pitch_std_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* GnssheadingData::mutable_pitch_std() {
  // @@protoc_insertion_point(field_mutable:minieye.GnssheadingData.pitch_std)
  return _internal_mutable_pitch_std();
}
inline void GnssheadingData::set_allocated_pitch_std(PROTOBUF_NAMESPACE_ID::FloatValue* pitch_std) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitch_std_);
  }
  if (pitch_std) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitch_std)->GetArena();
    if (message_arena != submessage_arena) {
      pitch_std = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pitch_std, submessage_arena);
    }
    
  } else {
    
  }
  pitch_std_ = pitch_std;
  // @@protoc_insertion_point(field_set_allocated:minieye.GnssheadingData.pitch_std)
}

// -------------------------------------------------------------------

// GnssData

// repeated .minieye.GnssposData gnss_pos = 1;
inline int GnssData::_internal_gnss_pos_size() const {
  return gnss_pos_.size();
}
inline int GnssData::gnss_pos_size() const {
  return _internal_gnss_pos_size();
}
inline void GnssData::clear_gnss_pos() {
  gnss_pos_.Clear();
}
inline ::minieye::GnssposData* GnssData::mutable_gnss_pos(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.GnssData.gnss_pos)
  return gnss_pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssposData >*
GnssData::mutable_gnss_pos() {
  // @@protoc_insertion_point(field_mutable_list:minieye.GnssData.gnss_pos)
  return &gnss_pos_;
}
inline const ::minieye::GnssposData& GnssData::_internal_gnss_pos(int index) const {
  return gnss_pos_.Get(index);
}
inline const ::minieye::GnssposData& GnssData::gnss_pos(int index) const {
  // @@protoc_insertion_point(field_get:minieye.GnssData.gnss_pos)
  return _internal_gnss_pos(index);
}
inline ::minieye::GnssposData* GnssData::_internal_add_gnss_pos() {
  return gnss_pos_.Add();
}
inline ::minieye::GnssposData* GnssData::add_gnss_pos() {
  // @@protoc_insertion_point(field_add:minieye.GnssData.gnss_pos)
  return _internal_add_gnss_pos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssposData >&
GnssData::gnss_pos() const {
  // @@protoc_insertion_point(field_list:minieye.GnssData.gnss_pos)
  return gnss_pos_;
}

// repeated .minieye.GnssvelData gnss_vel = 2;
inline int GnssData::_internal_gnss_vel_size() const {
  return gnss_vel_.size();
}
inline int GnssData::gnss_vel_size() const {
  return _internal_gnss_vel_size();
}
inline void GnssData::clear_gnss_vel() {
  gnss_vel_.Clear();
}
inline ::minieye::GnssvelData* GnssData::mutable_gnss_vel(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.GnssData.gnss_vel)
  return gnss_vel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssvelData >*
GnssData::mutable_gnss_vel() {
  // @@protoc_insertion_point(field_mutable_list:minieye.GnssData.gnss_vel)
  return &gnss_vel_;
}
inline const ::minieye::GnssvelData& GnssData::_internal_gnss_vel(int index) const {
  return gnss_vel_.Get(index);
}
inline const ::minieye::GnssvelData& GnssData::gnss_vel(int index) const {
  // @@protoc_insertion_point(field_get:minieye.GnssData.gnss_vel)
  return _internal_gnss_vel(index);
}
inline ::minieye::GnssvelData* GnssData::_internal_add_gnss_vel() {
  return gnss_vel_.Add();
}
inline ::minieye::GnssvelData* GnssData::add_gnss_vel() {
  // @@protoc_insertion_point(field_add:minieye.GnssData.gnss_vel)
  return _internal_add_gnss_vel();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssvelData >&
GnssData::gnss_vel() const {
  // @@protoc_insertion_point(field_list:minieye.GnssData.gnss_vel)
  return gnss_vel_;
}

// repeated .minieye.GnssheadingData gnss_heading = 3;
inline int GnssData::_internal_gnss_heading_size() const {
  return gnss_heading_.size();
}
inline int GnssData::gnss_heading_size() const {
  return _internal_gnss_heading_size();
}
inline void GnssData::clear_gnss_heading() {
  gnss_heading_.Clear();
}
inline ::minieye::GnssheadingData* GnssData::mutable_gnss_heading(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.GnssData.gnss_heading)
  return gnss_heading_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssheadingData >*
GnssData::mutable_gnss_heading() {
  // @@protoc_insertion_point(field_mutable_list:minieye.GnssData.gnss_heading)
  return &gnss_heading_;
}
inline const ::minieye::GnssheadingData& GnssData::_internal_gnss_heading(int index) const {
  return gnss_heading_.Get(index);
}
inline const ::minieye::GnssheadingData& GnssData::gnss_heading(int index) const {
  // @@protoc_insertion_point(field_get:minieye.GnssData.gnss_heading)
  return _internal_gnss_heading(index);
}
inline ::minieye::GnssheadingData* GnssData::_internal_add_gnss_heading() {
  return gnss_heading_.Add();
}
inline ::minieye::GnssheadingData* GnssData::add_gnss_heading() {
  // @@protoc_insertion_point(field_add:minieye.GnssData.gnss_heading)
  return _internal_add_gnss_heading();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::GnssheadingData >&
GnssData::gnss_heading() const {
  // @@protoc_insertion_point(field_list:minieye.GnssData.gnss_heading)
  return gnss_heading_;
}

// uint64 timestamp = 4;
inline void GnssData::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GnssData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GnssData::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.GnssData.timestamp)
  return _internal_timestamp();
}
inline void GnssData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void GnssData::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.GnssData.timestamp)
}

// uint64 tick = 5;
inline void GnssData::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GnssData::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GnssData::tick() const {
  // @@protoc_insertion_point(field_get:minieye.GnssData.tick)
  return _internal_tick();
}
inline void GnssData::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void GnssData::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.GnssData.tick)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_apa_5fgnss_2eproto
