// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: odometry_3d.proto

#include "odometry_3d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_odometry_5f3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3d_odometry_5f3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_odometry_5f3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose6d_odometry_5f3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_odometry_5f3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PrevToCurrOdom_odometry_5f3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_odometry_5f3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_odometry_5f3d_2eproto;
namespace minieye {
class Point3dDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point3d> _instance;
} _Point3d_default_instance_;
class Pose6dDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pose6d> _instance;
} _Pose6d_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Quaternion> _instance;
} _Quaternion_default_instance_;
class PrevToCurrOdomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrevToCurrOdom> _instance;
} _PrevToCurrOdom_default_instance_;
class Odometry3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Odometry3D> _instance;
} _Odometry3D_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_Odometry3D_odometry_5f3d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_Odometry3D_default_instance_;
    new (ptr) ::minieye::Odometry3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::Odometry3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Odometry3D_odometry_5f3d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Odometry3D_odometry_5f3d_2eproto}, {
      &scc_info_Pose6d_odometry_5f3d_2eproto.base,
      &scc_info_Quaternion_odometry_5f3d_2eproto.base,
      &scc_info_Point3d_odometry_5f3d_2eproto.base,
      &scc_info_PrevToCurrOdom_odometry_5f3d_2eproto.base,}};

static void InitDefaultsscc_info_Point3d_odometry_5f3d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_Point3d_default_instance_;
    new (ptr) ::minieye::Point3d();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::Point3d::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3d_odometry_5f3d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point3d_odometry_5f3d_2eproto}, {}};

static void InitDefaultsscc_info_Pose6d_odometry_5f3d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_Pose6d_default_instance_;
    new (ptr) ::minieye::Pose6d();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::Pose6d::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose6d_odometry_5f3d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pose6d_odometry_5f3d_2eproto}, {}};

static void InitDefaultsscc_info_PrevToCurrOdom_odometry_5f3d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_PrevToCurrOdom_default_instance_;
    new (ptr) ::minieye::PrevToCurrOdom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::PrevToCurrOdom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PrevToCurrOdom_odometry_5f3d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PrevToCurrOdom_odometry_5f3d_2eproto}, {
      &scc_info_Pose6d_odometry_5f3d_2eproto.base,
      &scc_info_Quaternion_odometry_5f3d_2eproto.base,}};

static void InitDefaultsscc_info_Quaternion_odometry_5f3d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_Quaternion_default_instance_;
    new (ptr) ::minieye::Quaternion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::Quaternion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_odometry_5f3d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Quaternion_odometry_5f3d_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_odometry_5f3d_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_odometry_5f3d_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_odometry_5f3d_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_odometry_5f3d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::Point3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::Point3d, x_),
  PROTOBUF_FIELD_OFFSET(::minieye::Point3d, y_),
  PROTOBUF_FIELD_OFFSET(::minieye::Point3d, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::Pose6d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::Pose6d, x_),
  PROTOBUF_FIELD_OFFSET(::minieye::Pose6d, y_),
  PROTOBUF_FIELD_OFFSET(::minieye::Pose6d, z_),
  PROTOBUF_FIELD_OFFSET(::minieye::Pose6d, roll_),
  PROTOBUF_FIELD_OFFSET(::minieye::Pose6d, pitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::Pose6d, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::Quaternion, qx_),
  PROTOBUF_FIELD_OFFSET(::minieye::Quaternion, qy_),
  PROTOBUF_FIELD_OFFSET(::minieye::Quaternion, qz_),
  PROTOBUF_FIELD_OFFSET(::minieye::Quaternion, qw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::PrevToCurrOdom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::PrevToCurrOdom, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::PrevToCurrOdom, pose_),
  PROTOBUF_FIELD_OFFSET(::minieye::PrevToCurrOdom, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry3D, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry3D, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry3D, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry3D, pose_),
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry3D, orientation_),
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry3D, velocity_),
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry3D, distance_),
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry3D, linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry3D, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry3D, state_),
  PROTOBUF_FIELD_OFFSET(::minieye::Odometry3D, prev_to_curr_odom_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::Point3d)},
  { 8, -1, sizeof(::minieye::Pose6d)},
  { 19, -1, sizeof(::minieye::Quaternion)},
  { 28, -1, sizeof(::minieye::PrevToCurrOdom)},
  { 36, -1, sizeof(::minieye::Odometry3D)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_Point3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_Pose6d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_Quaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_PrevToCurrOdom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_Odometry3D_default_instance_),
};

const char descriptor_table_protodef_odometry_5f3d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021odometry_3d.proto\022\007minieye\"*\n\007Point3d\022"
  "\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"S\n\006Pose"
  "6d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\014\n\004r"
  "oll\030\004 \001(\001\022\r\n\005pitch\030\005 \001(\001\022\013\n\003yaw\030\006 \001(\001\"<\n"
  "\nQuaternion\022\n\n\002qx\030\001 \001(\001\022\n\n\002qy\030\002 \001(\001\022\n\n\002q"
  "z\030\003 \001(\001\022\n\n\002qw\030\004 \001(\001\"g\n\016PrevToCurrOdom\022\014\n"
  "\004tick\030\001 \001(\004\022\035\n\004pose\030\002 \001(\0132\017.minieye.Pose"
  "6d\022(\n\013orientation\030\003 \001(\0132\023.minieye.Quater"
  "nion\"\334\002\n\nOdometry3D\022\021\n\ttimestamp\030\001 \001(\004\022\014"
  "\n\004tick\030\002 \001(\004\022\020\n\010frame_id\030\003 \001(\004\022\035\n\004pose\030\004"
  " \001(\0132\017.minieye.Pose6d\022(\n\013orientation\030\005 \001"
  "(\0132\023.minieye.Quaternion\022\"\n\010velocity\030\006 \001("
  "\0132\020.minieye.Point3d\022\020\n\010distance\030\007 \001(\001\022-\n"
  "\023linear_acceleration\030\010 \001(\0132\020.minieye.Poi"
  "nt3d\022*\n\020angular_velocity\030\t \001(\0132\020.minieye"
  ".Point3d\022\r\n\005state\030\n \001(\r\0222\n\021prev_to_curr_"
  "odom\030\013 \001(\0132\027.minieye.PrevToCurrOdomb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_odometry_5f3d_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_odometry_5f3d_2eproto_sccs[5] = {
  &scc_info_Odometry3D_odometry_5f3d_2eproto.base,
  &scc_info_Point3d_odometry_5f3d_2eproto.base,
  &scc_info_Pose6d_odometry_5f3d_2eproto.base,
  &scc_info_PrevToCurrOdom_odometry_5f3d_2eproto.base,
  &scc_info_Quaternion_odometry_5f3d_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_odometry_5f3d_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_odometry_5f3d_2eproto = {
  false, false, descriptor_table_protodef_odometry_5f3d_2eproto, "odometry_3d.proto", 683,
  &descriptor_table_odometry_5f3d_2eproto_once, descriptor_table_odometry_5f3d_2eproto_sccs, descriptor_table_odometry_5f3d_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_odometry_5f3d_2eproto::offsets,
  file_level_metadata_odometry_5f3d_2eproto, 5, file_level_enum_descriptors_odometry_5f3d_2eproto, file_level_service_descriptors_odometry_5f3d_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_odometry_5f3d_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_odometry_5f3d_2eproto)), true);
namespace minieye {

// ===================================================================

void Point3d::InitAsDefaultInstance() {
}
class Point3d::_Internal {
 public:
};

Point3d::Point3d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.Point3d)
}
Point3d::Point3d(const Point3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:minieye.Point3d)
}

void Point3d::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3d::~Point3d() {
  // @@protoc_insertion_point(destructor:minieye.Point3d)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point3d::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point3d::ArenaDtor(void* object) {
  Point3d* _this = reinterpret_cast< Point3d* >(object);
  (void)_this;
}
void Point3d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point3d& Point3d::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point3d_odometry_5f3d_2eproto.base);
  return *internal_default_instance();
}


void Point3d::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.Point3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point3d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.Point3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.Point3d)
  return target;
}

size_t Point3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.Point3d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.Point3d)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point3d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.Point3d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.Point3d)
    MergeFrom(*source);
  }
}

void Point3d::MergeFrom(const Point3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.Point3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point3d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.Point3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3d::CopyFrom(const Point3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.Point3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3d::IsInitialized() const {
  return true;
}

void Point3d::InternalSwap(Point3d* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3d, z_)
      + sizeof(Point3d::z_)
      - PROTOBUF_FIELD_OFFSET(Point3d, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pose6d::InitAsDefaultInstance() {
}
class Pose6d::_Internal {
 public:
};

Pose6d::Pose6d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.Pose6d)
}
Pose6d::Pose6d(const Pose6d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:minieye.Pose6d)
}

void Pose6d::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
}

Pose6d::~Pose6d() {
  // @@protoc_insertion_point(destructor:minieye.Pose6d)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pose6d::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pose6d::ArenaDtor(void* object) {
  Pose6d* _this = reinterpret_cast< Pose6d* >(object);
  (void)_this;
}
void Pose6d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pose6d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pose6d& Pose6d::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pose6d_odometry_5f3d_2eproto.base);
  return *internal_default_instance();
}


void Pose6d::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.Pose6d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose6d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double roll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pose6d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.Pose6d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double roll = 4;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_roll(), target);
  }

  // double pitch = 5;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_pitch(), target);
  }

  // double yaw = 6;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.Pose6d)
  return target;
}

size_t Pose6d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.Pose6d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double roll = 4;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 8;
  }

  // double pitch = 5;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 8;
  }

  // double yaw = 6;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose6d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.Pose6d)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose6d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pose6d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.Pose6d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.Pose6d)
    MergeFrom(*source);
  }
}

void Pose6d::MergeFrom(const Pose6d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.Pose6d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
}

void Pose6d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.Pose6d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose6d::CopyFrom(const Pose6d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.Pose6d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose6d::IsInitialized() const {
  return true;
}

void Pose6d::InternalSwap(Pose6d* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose6d, yaw_)
      + sizeof(Pose6d::yaw_)
      - PROTOBUF_FIELD_OFFSET(Pose6d, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose6d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&qx_, &from.qx_,
    static_cast<size_t>(reinterpret_cast<char*>(&qw_) -
    reinterpret_cast<char*>(&qx_)) + sizeof(qw_));
  // @@protoc_insertion_point(copy_constructor:minieye.Quaternion)
}

void Quaternion::SharedCtor() {
  ::memset(&qx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_) -
      reinterpret_cast<char*>(&qx_)) + sizeof(qw_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:minieye.Quaternion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Quaternion::ArenaDtor(void* object) {
  Quaternion* _this = reinterpret_cast< Quaternion* >(object);
  (void)_this;
}
void Quaternion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quaternion& Quaternion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Quaternion_odometry_5f3d_2eproto.base);
  return *internal_default_instance();
}


void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_) -
      reinterpret_cast<char*>(&qx_)) + sizeof(qw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double qx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          qx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          qy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          qz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          qw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double qx = 1;
  if (!(this->qx() <= 0 && this->qx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_qx(), target);
  }

  // double qy = 2;
  if (!(this->qy() <= 0 && this->qy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_qy(), target);
  }

  // double qz = 3;
  if (!(this->qz() <= 0 && this->qz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_qz(), target);
  }

  // double qw = 4;
  if (!(this->qw() <= 0 && this->qw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_qw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.Quaternion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double qx = 1;
  if (!(this->qx() <= 0 && this->qx() >= 0)) {
    total_size += 1 + 8;
  }

  // double qy = 2;
  if (!(this->qy() <= 0 && this->qy() >= 0)) {
    total_size += 1 + 8;
  }

  // double qz = 3;
  if (!(this->qz() <= 0 && this->qz() >= 0)) {
    total_size += 1 + 8;
  }

  // double qw = 4;
  if (!(this->qw() <= 0 && this->qw() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.Quaternion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.qx() <= 0 && from.qx() >= 0)) {
    _internal_set_qx(from._internal_qx());
  }
  if (!(from.qy() <= 0 && from.qy() >= 0)) {
    _internal_set_qy(from._internal_qy());
  }
  if (!(from.qz() <= 0 && from.qz() >= 0)) {
    _internal_set_qz(from._internal_qz());
  }
  if (!(from.qw() <= 0 && from.qw() >= 0)) {
    _internal_set_qw(from._internal_qw());
  }
}

void Quaternion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, qw_)
      + sizeof(Quaternion::qw_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, qx_)>(
          reinterpret_cast<char*>(&qx_),
          reinterpret_cast<char*>(&other->qx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrevToCurrOdom::InitAsDefaultInstance() {
  ::minieye::_PrevToCurrOdom_default_instance_._instance.get_mutable()->pose_ = const_cast< ::minieye::Pose6d*>(
      ::minieye::Pose6d::internal_default_instance());
  ::minieye::_PrevToCurrOdom_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::minieye::Quaternion*>(
      ::minieye::Quaternion::internal_default_instance());
}
class PrevToCurrOdom::_Internal {
 public:
  static const ::minieye::Pose6d& pose(const PrevToCurrOdom* msg);
  static const ::minieye::Quaternion& orientation(const PrevToCurrOdom* msg);
};

const ::minieye::Pose6d&
PrevToCurrOdom::_Internal::pose(const PrevToCurrOdom* msg) {
  return *msg->pose_;
}
const ::minieye::Quaternion&
PrevToCurrOdom::_Internal::orientation(const PrevToCurrOdom* msg) {
  return *msg->orientation_;
}
PrevToCurrOdom::PrevToCurrOdom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.PrevToCurrOdom)
}
PrevToCurrOdom::PrevToCurrOdom(const PrevToCurrOdom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::minieye::Pose6d(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::minieye::Quaternion(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  tick_ = from.tick_;
  // @@protoc_insertion_point(copy_constructor:minieye.PrevToCurrOdom)
}

void PrevToCurrOdom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrevToCurrOdom_odometry_5f3d_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(tick_));
}

PrevToCurrOdom::~PrevToCurrOdom() {
  // @@protoc_insertion_point(destructor:minieye.PrevToCurrOdom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrevToCurrOdom::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete orientation_;
}

void PrevToCurrOdom::ArenaDtor(void* object) {
  PrevToCurrOdom* _this = reinterpret_cast< PrevToCurrOdom* >(object);
  (void)_this;
}
void PrevToCurrOdom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrevToCurrOdom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrevToCurrOdom& PrevToCurrOdom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrevToCurrOdom_odometry_5f3d_2eproto.base);
  return *internal_default_instance();
}


void PrevToCurrOdom::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.PrevToCurrOdom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  tick_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrevToCurrOdom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Pose6d pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Quaternion orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrevToCurrOdom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.PrevToCurrOdom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tick = 1;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tick(), target);
  }

  // .minieye.Pose6d pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  // .minieye.Quaternion orientation = 3;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.PrevToCurrOdom)
  return target;
}

size_t PrevToCurrOdom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.PrevToCurrOdom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.Pose6d pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .minieye.Quaternion orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // uint64 tick = 1;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrevToCurrOdom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.PrevToCurrOdom)
  GOOGLE_DCHECK_NE(&from, this);
  const PrevToCurrOdom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrevToCurrOdom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.PrevToCurrOdom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.PrevToCurrOdom)
    MergeFrom(*source);
  }
}

void PrevToCurrOdom::MergeFrom(const PrevToCurrOdom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.PrevToCurrOdom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    _internal_mutable_pose()->::minieye::Pose6d::MergeFrom(from._internal_pose());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::minieye::Quaternion::MergeFrom(from._internal_orientation());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void PrevToCurrOdom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.PrevToCurrOdom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrevToCurrOdom::CopyFrom(const PrevToCurrOdom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.PrevToCurrOdom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrevToCurrOdom::IsInitialized() const {
  return true;
}

void PrevToCurrOdom::InternalSwap(PrevToCurrOdom* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrevToCurrOdom, tick_)
      + sizeof(PrevToCurrOdom::tick_)
      - PROTOBUF_FIELD_OFFSET(PrevToCurrOdom, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrevToCurrOdom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Odometry3D::InitAsDefaultInstance() {
  ::minieye::_Odometry3D_default_instance_._instance.get_mutable()->pose_ = const_cast< ::minieye::Pose6d*>(
      ::minieye::Pose6d::internal_default_instance());
  ::minieye::_Odometry3D_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::minieye::Quaternion*>(
      ::minieye::Quaternion::internal_default_instance());
  ::minieye::_Odometry3D_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::minieye::Point3d*>(
      ::minieye::Point3d::internal_default_instance());
  ::minieye::_Odometry3D_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::minieye::Point3d*>(
      ::minieye::Point3d::internal_default_instance());
  ::minieye::_Odometry3D_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::minieye::Point3d*>(
      ::minieye::Point3d::internal_default_instance());
  ::minieye::_Odometry3D_default_instance_._instance.get_mutable()->prev_to_curr_odom_ = const_cast< ::minieye::PrevToCurrOdom*>(
      ::minieye::PrevToCurrOdom::internal_default_instance());
}
class Odometry3D::_Internal {
 public:
  static const ::minieye::Pose6d& pose(const Odometry3D* msg);
  static const ::minieye::Quaternion& orientation(const Odometry3D* msg);
  static const ::minieye::Point3d& velocity(const Odometry3D* msg);
  static const ::minieye::Point3d& linear_acceleration(const Odometry3D* msg);
  static const ::minieye::Point3d& angular_velocity(const Odometry3D* msg);
  static const ::minieye::PrevToCurrOdom& prev_to_curr_odom(const Odometry3D* msg);
};

const ::minieye::Pose6d&
Odometry3D::_Internal::pose(const Odometry3D* msg) {
  return *msg->pose_;
}
const ::minieye::Quaternion&
Odometry3D::_Internal::orientation(const Odometry3D* msg) {
  return *msg->orientation_;
}
const ::minieye::Point3d&
Odometry3D::_Internal::velocity(const Odometry3D* msg) {
  return *msg->velocity_;
}
const ::minieye::Point3d&
Odometry3D::_Internal::linear_acceleration(const Odometry3D* msg) {
  return *msg->linear_acceleration_;
}
const ::minieye::Point3d&
Odometry3D::_Internal::angular_velocity(const Odometry3D* msg) {
  return *msg->angular_velocity_;
}
const ::minieye::PrevToCurrOdom&
Odometry3D::_Internal::prev_to_curr_odom(const Odometry3D* msg) {
  return *msg->prev_to_curr_odom_;
}
Odometry3D::Odometry3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.Odometry3D)
}
Odometry3D::Odometry3D(const Odometry3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::minieye::Pose6d(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::minieye::Quaternion(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::minieye::Point3d(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_linear_acceleration()) {
    linear_acceleration_ = new ::minieye::Point3d(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = nullptr;
  }
  if (from._internal_has_angular_velocity()) {
    angular_velocity_ = new ::minieye::Point3d(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  if (from._internal_has_prev_to_curr_odom()) {
    prev_to_curr_odom_ = new ::minieye::PrevToCurrOdom(*from.prev_to_curr_odom_);
  } else {
    prev_to_curr_odom_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:minieye.Odometry3D)
}

void Odometry3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Odometry3D_odometry_5f3d_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(state_));
}

Odometry3D::~Odometry3D() {
  // @@protoc_insertion_point(destructor:minieye.Odometry3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Odometry3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete prev_to_curr_odom_;
}

void Odometry3D::ArenaDtor(void* object) {
  Odometry3D* _this = reinterpret_cast< Odometry3D* >(object);
  (void)_this;
}
void Odometry3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Odometry3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Odometry3D& Odometry3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Odometry3D_odometry_5f3d_2eproto.base);
  return *internal_default_instance();
}


void Odometry3D::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.Odometry3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArena() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
  if (GetArena() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
  if (GetArena() == nullptr && prev_to_curr_odom_ != nullptr) {
    delete prev_to_curr_odom_;
  }
  prev_to_curr_odom_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Odometry3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Pose6d pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Quaternion orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Point3d velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double distance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .minieye.Point3d linear_acceleration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Point3d angular_velocity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.PrevToCurrOdom prev_to_curr_odom = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_to_curr_odom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Odometry3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.Odometry3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tick(), target);
  }

  // uint64 frame_id = 3;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_frame_id(), target);
  }

  // .minieye.Pose6d pose = 4;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pose(this), target, stream);
  }

  // .minieye.Quaternion orientation = 5;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::orientation(this), target, stream);
  }

  // .minieye.Point3d velocity = 6;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::velocity(this), target, stream);
  }

  // double distance = 7;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_distance(), target);
  }

  // .minieye.Point3d linear_acceleration = 8;
  if (this->has_linear_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::linear_acceleration(this), target, stream);
  }

  // .minieye.Point3d angular_velocity = 9;
  if (this->has_angular_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::angular_velocity(this), target, stream);
  }

  // uint32 state = 10;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_state(), target);
  }

  // .minieye.PrevToCurrOdom prev_to_curr_odom = 11;
  if (this->has_prev_to_curr_odom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::prev_to_curr_odom(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.Odometry3D)
  return target;
}

size_t Odometry3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.Odometry3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.Pose6d pose = 4;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .minieye.Quaternion orientation = 5;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .minieye.Point3d velocity = 6;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .minieye.Point3d linear_acceleration = 8;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_acceleration_);
  }

  // .minieye.Point3d angular_velocity = 9;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  // .minieye.PrevToCurrOdom prev_to_curr_odom = 11;
  if (this->has_prev_to_curr_odom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prev_to_curr_odom_);
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 frame_id = 3;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // double distance = 7;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 state = 10;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odometry3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.Odometry3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Odometry3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Odometry3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.Odometry3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.Odometry3D)
    MergeFrom(*source);
  }
}

void Odometry3D::MergeFrom(const Odometry3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.Odometry3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    _internal_mutable_pose()->::minieye::Pose6d::MergeFrom(from._internal_pose());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::minieye::Quaternion::MergeFrom(from._internal_orientation());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::minieye::Point3d::MergeFrom(from._internal_velocity());
  }
  if (from.has_linear_acceleration()) {
    _internal_mutable_linear_acceleration()->::minieye::Point3d::MergeFrom(from._internal_linear_acceleration());
  }
  if (from.has_angular_velocity()) {
    _internal_mutable_angular_velocity()->::minieye::Point3d::MergeFrom(from._internal_angular_velocity());
  }
  if (from.has_prev_to_curr_odom()) {
    _internal_mutable_prev_to_curr_odom()->::minieye::PrevToCurrOdom::MergeFrom(from._internal_prev_to_curr_odom());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void Odometry3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.Odometry3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry3D::CopyFrom(const Odometry3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.Odometry3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry3D::IsInitialized() const {
  return true;
}

void Odometry3D::InternalSwap(Odometry3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Odometry3D, state_)
      + sizeof(Odometry3D::state_)
      - PROTOBUF_FIELD_OFFSET(Odometry3D, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Odometry3D::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::Point3d* Arena::CreateMaybeMessage< ::minieye::Point3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::Point3d >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::Pose6d* Arena::CreateMaybeMessage< ::minieye::Pose6d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::Pose6d >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::Quaternion* Arena::CreateMaybeMessage< ::minieye::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::PrevToCurrOdom* Arena::CreateMaybeMessage< ::minieye::PrevToCurrOdom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::PrevToCurrOdom >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::Odometry3D* Arena::CreateMaybeMessage< ::minieye::Odometry3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::Odometry3D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
