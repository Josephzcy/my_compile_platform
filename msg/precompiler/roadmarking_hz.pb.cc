// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roadmarking_hz.proto

#include "roadmarking_hz.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_camera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CamID_camera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_odometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EgoMotion_odometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point2f_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Point2fList_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point3f_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Point3fList_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadSysProfiling_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadSysProfiling_Item_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Roadmarking_CurveCoeff_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_FreeSpaces_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Roadmarking_FreeSpaces_FreeZone_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Roadmarking_HppInfo_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_Junction_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_JunctionList_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Roadmarking_LDWInfo_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Roadmarking_Laneline_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_LanelineList_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Roadmarking_MotionEst_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_PoseEst_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Roadmarking_RoadEdge_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_RoadEdgeList_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_Roadmarks_roadmarking_5fhz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarking_5fhz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Roadmarking_Roadmarks_Roadmark_roadmarking_5fhz_2eproto;
namespace perception {
namespace hz {
class RoadSysProfiling_ItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadSysProfiling_Item> _instance;
} _RoadSysProfiling_Item_default_instance_;
class RoadSysProfilingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadSysProfiling> _instance;
} _RoadSysProfiling_default_instance_;
class Roadmarking_CurveCoeffDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_CurveCoeff> _instance;
} _Roadmarking_CurveCoeff_default_instance_;
class Roadmarking_LanelineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_Laneline> _instance;
} _Roadmarking_Laneline_default_instance_;
class Roadmarking_LanelineListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_LanelineList> _instance;
} _Roadmarking_LanelineList_default_instance_;
class Roadmarking_FreeSpaces_FreeZoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_FreeSpaces_FreeZone> _instance;
} _Roadmarking_FreeSpaces_FreeZone_default_instance_;
class Roadmarking_FreeSpacesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_FreeSpaces> _instance;
} _Roadmarking_FreeSpaces_default_instance_;
class Roadmarking_RoadEdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_RoadEdge> _instance;
} _Roadmarking_RoadEdge_default_instance_;
class Roadmarking_RoadEdgeListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_RoadEdgeList> _instance;
} _Roadmarking_RoadEdgeList_default_instance_;
class Roadmarking_Roadmarks_RoadmarkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_Roadmarks_Roadmark> _instance;
} _Roadmarking_Roadmarks_Roadmark_default_instance_;
class Roadmarking_RoadmarksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_Roadmarks> _instance;
} _Roadmarking_Roadmarks_default_instance_;
class Roadmarking_LDWInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_LDWInfo> _instance;
} _Roadmarking_LDWInfo_default_instance_;
class Roadmarking_MotionEstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_MotionEst> _instance;
} _Roadmarking_MotionEst_default_instance_;
class Roadmarking_PoseEstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_PoseEst> _instance;
} _Roadmarking_PoseEst_default_instance_;
class Roadmarking_HppInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_HppInfo> _instance;
} _Roadmarking_HppInfo_default_instance_;
class Roadmarking_JunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_Junction> _instance;
} _Roadmarking_Junction_default_instance_;
class Roadmarking_JunctionListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking_JunctionList> _instance;
} _Roadmarking_JunctionList_default_instance_;
class RoadmarkingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarking> _instance;
} _Roadmarking_default_instance_;
}  // namespace hz
}  // namespace perception
static void InitDefaultsscc_info_RoadSysProfiling_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_RoadSysProfiling_default_instance_;
    new (ptr) ::perception::hz::RoadSysProfiling();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::RoadSysProfiling::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadSysProfiling_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoadSysProfiling_roadmarking_5fhz_2eproto}, {
      &scc_info_RoadSysProfiling_Item_roadmarking_5fhz_2eproto.base,}};

static void InitDefaultsscc_info_RoadSysProfiling_Item_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_RoadSysProfiling_Item_default_instance_;
    new (ptr) ::perception::hz::RoadSysProfiling_Item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::RoadSysProfiling_Item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadSysProfiling_Item_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoadSysProfiling_Item_roadmarking_5fhz_2eproto}, {}};

static void InitDefaultsscc_info_Roadmarking_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_default_instance_;
    new (ptr) ::perception::hz::Roadmarking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_Roadmarking_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, 0, InitDefaultsscc_info_Roadmarking_roadmarking_5fhz_2eproto}, {
      &scc_info_Roadmarking_LanelineList_roadmarking_5fhz_2eproto.base,
      &scc_info_Roadmarking_FreeSpaces_roadmarking_5fhz_2eproto.base,
      &scc_info_Roadmarking_Roadmarks_roadmarking_5fhz_2eproto.base,
      &scc_info_Roadmarking_RoadEdgeList_roadmarking_5fhz_2eproto.base,
      &scc_info_Roadmarking_LDWInfo_roadmarking_5fhz_2eproto.base,
      &scc_info_Roadmarking_MotionEst_roadmarking_5fhz_2eproto.base,
      &scc_info_Roadmarking_PoseEst_roadmarking_5fhz_2eproto.base,
      &scc_info_Roadmarking_HppInfo_roadmarking_5fhz_2eproto.base,
      &scc_info_Roadmarking_CurveCoeff_roadmarking_5fhz_2eproto.base,
      &scc_info_Roadmarking_JunctionList_roadmarking_5fhz_2eproto.base,
      &scc_info_RoadSysProfiling_roadmarking_5fhz_2eproto.base,
      &scc_info_EgoMotion_odometry_2eproto.base,
      &scc_info_CamID_camera_2eproto.base,}};

static void InitDefaultsscc_info_Roadmarking_CurveCoeff_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_CurveCoeff_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_CurveCoeff();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_CurveCoeff::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Roadmarking_CurveCoeff_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Roadmarking_CurveCoeff_roadmarking_5fhz_2eproto}, {}};

static void InitDefaultsscc_info_Roadmarking_FreeSpaces_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_FreeSpaces_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_FreeSpaces();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_FreeSpaces::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_FreeSpaces_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Roadmarking_FreeSpaces_roadmarking_5fhz_2eproto}, {
      &scc_info_Roadmarking_FreeSpaces_FreeZone_roadmarking_5fhz_2eproto.base,}};

static void InitDefaultsscc_info_Roadmarking_FreeSpaces_FreeZone_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_FreeSpaces_FreeZone_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_FreeSpaces_FreeZone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_FreeSpaces_FreeZone::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Roadmarking_FreeSpaces_FreeZone_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Roadmarking_FreeSpaces_FreeZone_roadmarking_5fhz_2eproto}, {
      &scc_info_Point2f_geometry_2eproto.base,
      &scc_info_Point3f_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Roadmarking_HppInfo_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_HppInfo_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_HppInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_HppInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Roadmarking_HppInfo_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Roadmarking_HppInfo_roadmarking_5fhz_2eproto}, {
      &scc_info_Roadmarking_CurveCoeff_roadmarking_5fhz_2eproto.base,
      &scc_info_Roadmarking_Laneline_roadmarking_5fhz_2eproto.base,
      &scc_info_Point2f_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Roadmarking_Junction_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_Junction_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_Junction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_Junction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_Junction_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Roadmarking_Junction_roadmarking_5fhz_2eproto}, {
      &scc_info_Point2f_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Roadmarking_JunctionList_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_JunctionList_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_JunctionList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_JunctionList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_JunctionList_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Roadmarking_JunctionList_roadmarking_5fhz_2eproto}, {
      &scc_info_Roadmarking_Junction_roadmarking_5fhz_2eproto.base,}};

static void InitDefaultsscc_info_Roadmarking_LDWInfo_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_LDWInfo_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_LDWInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_LDWInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Roadmarking_LDWInfo_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Roadmarking_LDWInfo_roadmarking_5fhz_2eproto}, {}};

static void InitDefaultsscc_info_Roadmarking_Laneline_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_Laneline_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_Laneline();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_Laneline::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Roadmarking_Laneline_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Roadmarking_Laneline_roadmarking_5fhz_2eproto}, {
      &scc_info_Roadmarking_CurveCoeff_roadmarking_5fhz_2eproto.base,
      &scc_info_Point2fList_geometry_2eproto.base,
      &scc_info_Point3fList_geometry_2eproto.base,
      &scc_info_Point2f_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Roadmarking_LanelineList_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_LanelineList_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_LanelineList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_LanelineList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_LanelineList_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Roadmarking_LanelineList_roadmarking_5fhz_2eproto}, {
      &scc_info_Roadmarking_Laneline_roadmarking_5fhz_2eproto.base,}};

static void InitDefaultsscc_info_Roadmarking_MotionEst_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_MotionEst_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_MotionEst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_MotionEst::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Roadmarking_MotionEst_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Roadmarking_MotionEst_roadmarking_5fhz_2eproto}, {}};

static void InitDefaultsscc_info_Roadmarking_PoseEst_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_PoseEst_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_PoseEst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_PoseEst::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_PoseEst_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Roadmarking_PoseEst_roadmarking_5fhz_2eproto}, {
      &scc_info_Point2f_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Roadmarking_RoadEdge_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_RoadEdge_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_RoadEdge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_RoadEdge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Roadmarking_RoadEdge_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Roadmarking_RoadEdge_roadmarking_5fhz_2eproto}, {
      &scc_info_Roadmarking_CurveCoeff_roadmarking_5fhz_2eproto.base,
      &scc_info_Point3fList_geometry_2eproto.base,
      &scc_info_Point2fList_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Roadmarking_RoadEdgeList_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_RoadEdgeList_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_RoadEdgeList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_RoadEdgeList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_RoadEdgeList_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Roadmarking_RoadEdgeList_roadmarking_5fhz_2eproto}, {
      &scc_info_Roadmarking_RoadEdge_roadmarking_5fhz_2eproto.base,}};

static void InitDefaultsscc_info_Roadmarking_Roadmarks_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_Roadmarks_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_Roadmarks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_Roadmarks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarking_Roadmarks_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Roadmarking_Roadmarks_roadmarking_5fhz_2eproto}, {
      &scc_info_Roadmarking_Roadmarks_Roadmark_roadmarking_5fhz_2eproto.base,}};

static void InitDefaultsscc_info_Roadmarking_Roadmarks_Roadmark_roadmarking_5fhz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::hz::_Roadmarking_Roadmarks_Roadmark_default_instance_;
    new (ptr) ::perception::hz::Roadmarking_Roadmarks_Roadmark();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::hz::Roadmarking_Roadmarks_Roadmark::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Roadmarking_Roadmarks_Roadmark_roadmarking_5fhz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Roadmarking_Roadmarks_Roadmark_roadmarking_5fhz_2eproto}, {
      &scc_info_Point2fList_geometry_2eproto.base,
      &scc_info_Point3fList_geometry_2eproto.base,
      &scc_info_Point3f_geometry_2eproto.base,
      &scc_info_Point2f_geometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_roadmarking_5fhz_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_roadmarking_5fhz_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_roadmarking_5fhz_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_roadmarking_5fhz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::RoadSysProfiling_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::RoadSysProfiling_Item, name_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::RoadSysProfiling_Item, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::RoadSysProfiling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::RoadSysProfiling, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_CurveCoeff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_CurveCoeff, longitude_min_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_CurveCoeff, longitude_max_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_CurveCoeff, c0_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_CurveCoeff, c1_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_CurveCoeff, c2_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_CurveCoeff, c3_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_CurveCoeff, dev_c0_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_CurveCoeff, dev_c1_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_CurveCoeff, dev_c2_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_CurveCoeff, dev_c3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, type_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, pos_type_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, color_type_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, curve_vehicle_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, curve_image_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, points_image_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, points_vehicle_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, fit_points_image_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, fit_points_vehicle_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, id_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, line_state_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, width_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, age_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, point_cam_id_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, centroid_pt_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Laneline, lane_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LanelineList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LanelineList, line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces_FreeZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces_FreeZone, point_image_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces_FreeZone, point_vehicle_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces_FreeZone, dist_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces_FreeZone, angle_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces_FreeZone, lane_index_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces_FreeZone, confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces_FreeZone, type_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces_FreeZone, motion_prop_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces_FreeZone, camera_id_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces_FreeZone, sensor_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces, freezone_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces, dist_std_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces, angle_std_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_FreeSpaces, height_std_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdge, id_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdge, age_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdge, curve_vehicle_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdge, curve_image_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdge, points_vehicle_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdge, points_image_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdge, fit_points_image_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdge, fit_points_vehicle_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdge, state_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdge, side_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdge, confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdge, camera_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdgeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_RoadEdgeList, road_edges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks_Roadmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks_Roadmark, id_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks_Roadmark, type_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks_Roadmark, corner_pt_image_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks_Roadmark, corner_pt_vehicle_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks_Roadmark, centroid_vehicle_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks_Roadmark, confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks_Roadmark, lane_idx_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks_Roadmark, form_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks_Roadmark, state_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks_Roadmark, centroid_image_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks_Roadmark, width_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks_Roadmark, camera_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Roadmarks, roadmarks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LDWInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LDWInfo, ldw_state_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LDWInfo, left_wheel_dist_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LDWInfo, right_wheel_dist_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LDWInfo, warning_dist_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LDWInfo, earliest_dist_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LDWInfo, latest_dist_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LDWInfo, ldw_state_changed_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LDWInfo, ldw_work_state_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LDWInfo, turn_radius_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LDWInfo, nearest_line_id_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_LDWInfo, ldw_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_MotionEst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_MotionEst, lateral_speed_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_MotionEst, lateral_acc_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_MotionEst, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_PoseEst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_PoseEst, pitch_est_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_PoseEst, vanish_pt_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_PoseEst, vanish_cov_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_PoseEst, is_valid_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_PoseEst, camera_id_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_PoseEst, dpitch_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_PoseEst, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_HppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_HppInfo, path_prediction_coeff_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_HppInfo, is_laneline_valid_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_HppInfo, is_valid_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_HppInfo, planning_source_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_HppInfo, confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_HppInfo, ego_lane_width_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_HppInfo, hpp_line_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_HppInfo, virtual_ego_lane_left_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_HppInfo, virtual_ego_lane_right_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_HppInfo, preview_pt_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_HppInfo, preview_pt_persp_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_HppInfo, ego_lane_radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Junction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Junction, type_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Junction, pt_image_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Junction, pt_vehicle_coord_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Junction, laneline_id_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Junction, state_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_Junction, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_JunctionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking_JunctionList, junc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, frame_id_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, laneline_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, freespaces_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, roadmarkers_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, road_edges_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, ldw_info_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, calib_lines_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, motion_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, pose_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, hpp_info_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, tick_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, data_source_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, slope_equation_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, finish_time_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, junc_list_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, profiling_items_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, recv_time_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, fps_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, ego_motion_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, ego_lane_width_),
  PROTOBUF_FIELD_OFFSET(::perception::hz::Roadmarking, cam_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perception::hz::RoadSysProfiling_Item)},
  { 7, -1, sizeof(::perception::hz::RoadSysProfiling)},
  { 13, -1, sizeof(::perception::hz::Roadmarking_CurveCoeff)},
  { 28, -1, sizeof(::perception::hz::Roadmarking_Laneline)},
  { 50, -1, sizeof(::perception::hz::Roadmarking_LanelineList)},
  { 56, -1, sizeof(::perception::hz::Roadmarking_FreeSpaces_FreeZone)},
  { 71, -1, sizeof(::perception::hz::Roadmarking_FreeSpaces)},
  { 80, -1, sizeof(::perception::hz::Roadmarking_RoadEdge)},
  { 97, -1, sizeof(::perception::hz::Roadmarking_RoadEdgeList)},
  { 103, -1, sizeof(::perception::hz::Roadmarking_Roadmarks_Roadmark)},
  { 120, -1, sizeof(::perception::hz::Roadmarking_Roadmarks)},
  { 126, -1, sizeof(::perception::hz::Roadmarking_LDWInfo)},
  { 142, -1, sizeof(::perception::hz::Roadmarking_MotionEst)},
  { 150, -1, sizeof(::perception::hz::Roadmarking_PoseEst)},
  { 162, -1, sizeof(::perception::hz::Roadmarking_HppInfo)},
  { 179, -1, sizeof(::perception::hz::Roadmarking_Junction)},
  { 190, -1, sizeof(::perception::hz::Roadmarking_JunctionList)},
  { 196, -1, sizeof(::perception::hz::Roadmarking)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_RoadSysProfiling_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_RoadSysProfiling_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_CurveCoeff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_Laneline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_LanelineList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_FreeSpaces_FreeZone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_FreeSpaces_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_RoadEdge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_RoadEdgeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_Roadmarks_Roadmark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_Roadmarks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_LDWInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_MotionEst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_PoseEst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_HppInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_Junction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_JunctionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::hz::_Roadmarking_default_instance_),
};

const char descriptor_table_protodef_roadmarking_5fhz_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024roadmarking_hz.proto\022\rperception.hz\032\016g"
  "eometry.proto\032\021data_source.proto\032\016odomet"
  "ry.proto\032\014camera.proto\"j\n\020RoadSysProfili"
  "ng\0223\n\005items\030\003 \003(\0132$.perception.hz.RoadSy"
  "sProfiling.Item\032!\n\004Item\022\014\n\004name\030\001 \001(\t\022\013\n"
  "\003val\030\002 \001(\002\"\3477\n\013Roadmarking\022\020\n\010frame_id\030\001"
  " \001(\004\022\021\n\ttimestamp\030\002 \001(\004\0229\n\010laneline\030\003 \001("
  "\0132\'.perception.hz.Roadmarking.LanelineLi"
  "st\0229\n\nfreespaces\030\004 \001(\0132%.perception.hz.R"
  "oadmarking.FreeSpaces\0229\n\013roadmarkers\030\006 \001"
  "(\0132$.perception.hz.Roadmarking.Roadmarks"
  "\022;\n\nroad_edges\030\007 \001(\0132\'.perception.hz.Roa"
  "dmarking.RoadEdgeList\0224\n\010ldw_info\030\010 \001(\0132"
  "\".perception.hz.Roadmarking.LDWInfo\022<\n\013c"
  "alib_lines\030\t \001(\0132\'.perception.hz.Roadmar"
  "king.LanelineList\0224\n\006motion\030\n \001(\0132$.perc"
  "eption.hz.Roadmarking.MotionEst\0220\n\004pose\030"
  "\013 \001(\0132\".perception.hz.Roadmarking.PoseEs"
  "t\0224\n\010hpp_info\030\014 \001(\0132\".perception.hz.Road"
  "marking.HppInfo\022\014\n\004tick\030\r \001(\004\022(\n\013data_so"
  "urce\030\016 \001(\0162\023.minieye.DataSource\022=\n\016slope"
  "_equation\030\017 \001(\0132%.perception.hz.Roadmark"
  "ing.CurveCoeff\022\023\n\013finish_time\030\020 \001(\004\022:\n\tj"
  "unc_list\030\021 \001(\0132\'.perception.hz.Roadmarki"
  "ng.JunctionList\0228\n\017profiling_items\030\022 \001(\013"
  "2\037.perception.hz.RoadSysProfiling\022\021\n\trec"
  "v_time\030\023 \001(\004\022\013\n\003fps\030\024 \001(\002\022&\n\nego_motion\030"
  "\025 \001(\0132\022.minieye.EgoMotion\022\026\n\016ego_lane_wi"
  "dth\030\026 \001(\002\022\036\n\006cam_id\030\027 \001(\0132\016.minieye.CamI"
  "D\032\252\001\n\nCurveCoeff\022\025\n\rlongitude_min\030\001 \001(\002\022"
  "\025\n\rlongitude_max\030\002 \001(\002\022\n\n\002c0\030\003 \001(\001\022\n\n\002c1"
  "\030\004 \001(\001\022\n\n\002c2\030\005 \001(\001\022\n\n\002c3\030\006 \001(\001\022\016\n\006dev_c0"
  "\030\007 \001(\001\022\016\n\006dev_c1\030\010 \001(\001\022\016\n\006dev_c2\030\t \001(\001\022\016"
  "\n\006dev_c3\030\n \001(\001\032\212\006\n\010Laneline\0221\n\004type\030\001 \001("
  "\0162#.perception.hz.Roadmarking.LineType\022A"
  "\n\010pos_type\030\002 \001(\0162/.perception.hz.Roadmar"
  "king.LanelinePositionType\0228\n\ncolor_type\030"
  "\003 \001(\0162$.perception.hz.Roadmarking.ColorT"
  "ype\022B\n\023curve_vehicle_coord\030\004 \001(\0132%.perce"
  "ption.hz.Roadmarking.CurveCoeff\022@\n\021curve"
  "_image_coord\030\005 \001(\0132%.perception.hz.Roadm"
  "arking.CurveCoeff\022:\n\022points_image_coord\030"
  "\006 \001(\0132\036.perception.common.Point2fList\022<\n"
  "\024points_vehicle_coord\030\007 \001(\0132\036.perception"
  ".common.Point3fList\022>\n\026fit_points_image_"
  "coord\030\010 \001(\0132\036.perception.common.Point2fL"
  "ist\022@\n\030fit_points_vehicle_coord\030\t \001(\0132\036."
  "perception.common.Point3fList\022\n\n\002id\030\n \001("
  "\004\0228\n\nline_state\030\013 \001(\0162$.perception.hz.Ro"
  "admarking.LineState\022\022\n\nconfidence\030\014 \001(\002\022"
  "\r\n\005width\030\r \001(\002\022\013\n\003age\030\016 \001(\r\022\024\n\014point_cam"
  "_id\030\017 \003(\r\022/\n\013centroid_pt\030\020 \001(\0132\032.percept"
  "ion.common.Point2f\022\017\n\007lane_id\030\021 \001(\005\032A\n\014L"
  "anelineList\0221\n\004line\030\001 \003(\0132#.perception.h"
  "z.Roadmarking.Laneline\032\310\004\n\nFreeSpaces\022@\n"
  "\010freezone\030\001 \003(\0132..perception.hz.Roadmark"
  "ing.FreeSpaces.FreeZone\022\020\n\010dist_std\030\002 \001("
  "\002\022\021\n\tangle_std\030\003 \001(\002\022\022\n\nheight_std\030\004 \001(\002"
  "\032\206\003\n\010FreeZone\0225\n\021point_image_coord\030\001 \001(\013"
  "2\032.perception.common.Point2f\0227\n\023point_ve"
  "hicle_coord\030\002 \001(\0132\032.perception.common.Po"
  "int3f\022\014\n\004dist\030\003 \001(\002\022\r\n\005angle\030\004 \001(\002\0226\n\nla"
  "ne_index\030\005 \001(\0162\".perception.hz.Roadmarki"
  "ng.LaneIdx\022\022\n\nconfidence\030\006 \001(\002\0222\n\004type\030\007"
  " \001(\0162$.perception.hz.Roadmarking.SpaceTy"
  "pe\022E\n\013motion_prop\030\010 \001(\01620.perception.hz."
  "Roadmarking.FreeSpaces.MotionProp\022\021\n\tcam"
  "era_id\030\t \001(\r\022\023\n\013sensor_type\030\n \001(\r\"6\n\nMot"
  "ionProp\022\014\n\010kMovable\020\000\022\016\n\nkUnmovable\020\001\022\n\n"
  "\006kStill\020\002\032\217\004\n\010RoadEdge\022\n\n\002id\030\001 \001(\r\022\013\n\003ag"
  "e\030\002 \001(\r\022B\n\023curve_vehicle_coord\030\003 \001(\0132%.p"
  "erception.hz.Roadmarking.CurveCoeff\022@\n\021c"
  "urve_image_coord\030\004 \001(\0132%.perception.hz.R"
  "oadmarking.CurveCoeff\022<\n\024points_vehicle_"
  "coord\030\005 \001(\0132\036.perception.common.Point3fL"
  "ist\022:\n\022points_image_coord\030\006 \001(\0132\036.percep"
  "tion.common.Point2fList\022>\n\026fit_points_im"
  "age_coord\030\007 \001(\0132\036.perception.common.Poin"
  "t2fList\022@\n\030fit_points_vehicle_coord\030\010 \001("
  "\0132\036.perception.common.Point3fList\0223\n\005sta"
  "te\030\t \001(\0162$.perception.hz.Roadmarking.Lin"
  "eState\022\014\n\004side\030\n \001(\005\022\022\n\nconfidence\030\013 \001(\002"
  "\022\021\n\tcamera_id\030\014 \003(\r\032G\n\014RoadEdgeList\0227\n\nr"
  "oad_edges\030\001 \003(\0132#.perception.hz.Roadmark"
  "ing.RoadEdge\032\274\010\n\tRoadmarks\022@\n\troadmarks\030"
  "\001 \003(\0132-.perception.hz.Roadmarking.Roadma"
  "rks.Roadmark\032\201\004\n\010Roadmark\022\n\n\002id\030\001 \001(\r\0227\n"
  "\004type\030\002 \001(\0162).perception.hz.Roadmarking."
  "Roadmarks.Type\022=\n\025corner_pt_image_coord\030"
  "\003 \001(\0132\036.perception.common.Point2fList\022\?\n"
  "\027corner_pt_vehicle_coord\030\004 \001(\0132\036.percept"
  "ion.common.Point3fList\022:\n\026centroid_vehic"
  "le_coord\030\005 \001(\0132\032.perception.common.Point"
  "3f\022\022\n\nconfidence\030\006 \001(\002\022\020\n\010lane_idx\030\007 \001(\r"
  "\0227\n\004form\030\010 \001(\0162).perception.hz.Roadmarki"
  "ng.Roadmarks.Form\0229\n\005state\030\t \001(\0162*.perce"
  "ption.hz.Roadmarking.Roadmarks.State\0228\n\024"
  "centroid_image_coord\030\n \001(\0132\032.perception."
  "common.Point2f\022\r\n\005width\030\013 \001(\002\022\021\n\tcamera_"
  "id\030\014 \001(\r\"\304\002\n\004Type\022\017\n\013kBackGround\020\000\022\022\n\016kS"
  "traightArrow\020\001\022\016\n\nkLeftArrow\020\002\022\017\n\013kRight"
  "Arrow\020\003\022\017\n\013kUturnArrow\020\004\022\014\n\010kDiamond\020\005\022\025"
  "\n\021kInvertedTriangle\020\006\022\022\n\016kOppositemarks\020"
  "\007\022\r\n\tkStopLane\020\010\022\022\n\016kZebraCrossing\020\t\022\022\n\016"
  "kNoParkingArea\020\n\022\r\n\tkGoreArea\020\013\022\020\n\014kGrou"
  "ndWords\020\014\022\013\n\007kOthers\020\r\022\025\n\021kDecelerationL"
  "ine\020\016\022\r\n\tkTypeNums\020\017\022\016\n\nkSpeedBump\020\020\022\021\n\r"
  "kManholeCover\020\021\"Y\n\004Form\022\024\n\020kRoadmarkUnkn"
  "own\020\000\022\022\n\016kRoadmarkPoint\020\001\022\021\n\rkRoadmarkLi"
  "ne\020\002\022\024\n\020kRoadmarkPolygon\020\003\"G\n\005State\022\021\n\rk"
  "StateUnknown\020\000\022\r\n\tkObserved\020\001\022\016\n\nkPredic"
  "ted\020\002\022\014\n\010kUpdated\020\003\032\202\004\n\007LDWInfo\022>\n\tldw_s"
  "tate\030\001 \001(\0162+.perception.hz.Roadmarking.L"
  "DWInfo.LdwState\022\027\n\017left_wheel_dist\030\002 \001(\002"
  "\022\030\n\020right_wheel_dist\030\003 \001(\002\022\024\n\014warning_di"
  "st\030\004 \001(\002\022\025\n\rearliest_dist\030\005 \001(\002\022\023\n\013lates"
  "t_dist\030\006 \001(\002\022\031\n\021ldw_state_changed\030\007 \001(\010\022"
  "G\n\016ldw_work_state\030\010 \001(\0162/.perception.hz."
  "Roadmarking.LDWInfo.LdwWorkState\022\023\n\013turn"
  "_radius\030\t \001(\002\022\027\n\017nearest_line_id\030\n \001(\004\022\021"
  "\n\tldw_level\030\013 \001(\r\"5\n\010LdwState\022\014\n\010kLdwNon"
  "e\020\000\022\014\n\010kLdwLeft\020\001\022\r\n\tkLdwRight\020\002\"f\n\014LdwW"
  "orkState\022\020\n\014kUnavailable\020\000\022\010\n\004kOff\020\001\022\014\n\010"
  "kStandby\020\002\022\013\n\007kActive\020\003\022\021\n\rkNotAvailable"
  "\020\004\022\014\n\010kUnknown\020\005\032K\n\tMotionEst\022\025\n\rlateral"
  "_speed\030\001 \001(\002\022\023\n\013lateral_acc\030\002 \001(\002\022\022\n\ncon"
  "fidence\030\003 \001(\002\032\304\001\n\007PoseEst\022\021\n\tpitch_est\030\001"
  " \001(\002\022-\n\tvanish_pt\030\002 \001(\0132\032.perception.com"
  "mon.Point2f\022.\n\nvanish_cov\030\003 \001(\0132\032.percep"
  "tion.common.Point2f\022\020\n\010is_valid\030\004 \001(\010\022\021\n"
  "\tcamera_id\030\005 \001(\r\022\016\n\006dpitch\030\006 \001(\002\022\022\n\nconf"
  "idence\030\007 \001(\002\032\275\005\n\007HppInfo\022D\n\025path_predict"
  "ion_coeff\030\001 \001(\0132%.perception.hz.Roadmark"
  "ing.CurveCoeff\022\031\n\021is_laneline_valid\030\003 \001("
  "\010\022\020\n\010is_valid\030\004 \001(\010\022\027\n\017planning_source\030\005"
  " \001(\r\022\022\n\nconfidence\030\006 \001(\002\022\026\n\016ego_lane_wid"
  "th\030\007 \001(\002\0225\n\010hpp_line\030\010 \001(\0132#.perception."
  "hz.Roadmarking.Laneline\022B\n\025virtual_ego_l"
  "ane_left\030\t \001(\0132#.perception.hz.Roadmarki"
  "ng.Laneline\022C\n\026virtual_ego_lane_right\030\n "
  "\001(\0132#.perception.hz.Roadmarking.Laneline"
  "\022.\n\npreview_pt\030\013 \001(\0132\032.perception.common"
  ".Point2f\0224\n\020preview_pt_persp\030\014 \001(\0132\032.per"
  "ception.common.Point2f\022\027\n\017ego_lane_radiu"
  "s\030\r \001(\002\"\272\001\n\016PlanningSource\022\014\n\010kInvalid\020\000"
  "\022\023\n\017kDoubleLaneline\020\001\022\021\n\rkLeftLaneline\020\002"
  "\022\022\n\016kRightLaneline\020\003\022\021\n\rkLeftRoadEdge\020\004\022"
  "\022\n\016kRightRoadEdge\020\005\022\024\n\020kHeadingVehTrace\020"
  "\006\022\016\n\nkFreespace\020\007\022\021\n\rkSelfVehTrace\020\010\032\226\002\n"
  "\010Junction\0226\n\004type\030\001 \001(\0162(.perception.hz."
  "Roadmarking.Junction.Type\0222\n\016pt_image_co"
  "ord\030\002 \001(\0132\032.perception.common.Point2f\0224\n"
  "\020pt_vehicle_coord\030\003 \001(\0132\032.perception.com"
  "mon.Point2f\022\023\n\013laneline_id\030\004 \003(\004\022\r\n\005stat"
  "e\030\005 \001(\005\022\022\n\nconfidence\030\006 \001(\002\"0\n\004Type\022\022\n\016k"
  "MergingPoints\020\000\022\024\n\020kDivergingPoints\020\001\032A\n"
  "\014JunctionList\0221\n\004junc\030\001 \003(\0132#.perception"
  ".hz.Roadmarking.Junction\"\252\001\n\024LanelinePos"
  "itionType\022\021\n\rkAdjacentLeft\020\000\022\014\n\010kEgoLeft"
  "\020\001\022\r\n\tkEgoRight\020\002\022\022\n\016kAdjacentRight\020\003\022\016\n"
  "\nkThirdLeft\020\004\022\017\n\013kThirdRight\020\005\022\017\n\013kFourt"
  "hLeft\020\006\022\020\n\014kFourthRight\020\007\022\n\n\006kOther\020\010\"\337\001"
  "\n\010LineType\022\024\n\020kLineSingleSolid\020\000\022\025\n\021kLin"
  "eSingleDashed\020\001\022\r\n\tkLineBold\020\002\022\024\n\020kLineD"
  "oubleSolid\020\003\022\025\n\021kLineDoubleDashed\020\004\022\024\n\020k"
  "LineSolidDashed\020\005\022\024\n\020kLineDashedSolid\020\006\022"
  "\n\n\006kFence\020\007\022\t\n\005kCurb\020\010\022\025\n\021kLineDecelerat"
  "ion\020\t\022\020\n\014kLineUnknown\020\n\"\316\001\n\tColorType\022\017\n"
  "\013kColorWhite\020\000\022\020\n\014kColorYellow\020\001\022\020\n\014kCol"
  "orOrange\020\002\022\016\n\nkColorBlue\020\003\022\017\n\013kColorGree"
  "n\020\004\022\016\n\nkColorGray\020\005\022\025\n\021kColorWhiteYellow"
  "\020\006\022\025\n\021kColorYellowWhite\020\007\022\032\n\026kColorYello"
  "wGrayFusion\020\010\022\021\n\rkColorUnknown\020\t\"<\n\tLine"
  "State\022\r\n\tkDetected\020\000\022\016\n\nkPredicted\020\001\022\020\n\014"
  "kStableTrack\020\002\"\265\001\n\007LaneIdx\022\023\n\017kLaneIdxUn"
  "known\020\000\022\014\n\010kEgoLane\020\001\022\025\n\021kAdjacentLeftLa"
  "ne\020\002\022\026\n\022kAdjacentRightLane\020\003\022\026\n\022kSeconda"
  "ryLeftLane\020\004\022\027\n\023kSecondaryRightLane\020\005\022\022\n"
  "\016kThirdLeftLane\020\006\022\023\n\017kThirdRightLane\020\007\"\213"
  "\001\n\tSpaceType\022\017\n\013kBackground\020\000\022\016\n\nkFreeSp"
  "ace\020\001\022\021\n\rkRoadBoundary\020\002\022\014\n\010kVehicle\020\003\022\r"
  "\n\tkRoadSign\020\004\022\t\n\005kPole\020\005\022\016\n\nkGuardrail\020\006"
  "\022\022\n\016kSpaceTypeNums\020\007\"6\n\016DirectPosition\022\017"
  "\n\013kDirectSame\020\000\022\023\n\017kDirectOpposite\020\001b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_roadmarking_5fhz_2eproto_deps[4] = {
  &::descriptor_table_camera_2eproto,
  &::descriptor_table_data_5fsource_2eproto,
  &::descriptor_table_geometry_2eproto,
  &::descriptor_table_odometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_roadmarking_5fhz_2eproto_sccs[18] = {
  &scc_info_RoadSysProfiling_roadmarking_5fhz_2eproto.base,
  &scc_info_RoadSysProfiling_Item_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_CurveCoeff_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_FreeSpaces_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_FreeSpaces_FreeZone_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_HppInfo_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_Junction_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_JunctionList_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_LDWInfo_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_Laneline_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_LanelineList_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_MotionEst_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_PoseEst_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_RoadEdge_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_RoadEdgeList_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_Roadmarks_roadmarking_5fhz_2eproto.base,
  &scc_info_Roadmarking_Roadmarks_Roadmark_roadmarking_5fhz_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_roadmarking_5fhz_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_roadmarking_5fhz_2eproto = {
  false, false, descriptor_table_protodef_roadmarking_5fhz_2eproto, "roadmarking_hz.proto", 7364,
  &descriptor_table_roadmarking_5fhz_2eproto_once, descriptor_table_roadmarking_5fhz_2eproto_sccs, descriptor_table_roadmarking_5fhz_2eproto_deps, 18, 4,
  schemas, file_default_instances, TableStruct_roadmarking_5fhz_2eproto::offsets,
  file_level_metadata_roadmarking_5fhz_2eproto, 18, file_level_enum_descriptors_roadmarking_5fhz_2eproto, file_level_service_descriptors_roadmarking_5fhz_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_roadmarking_5fhz_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_roadmarking_5fhz_2eproto)), true);
namespace perception {
namespace hz {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_FreeSpaces_MotionProp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[0];
}
bool Roadmarking_FreeSpaces_MotionProp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_FreeSpaces_MotionProp Roadmarking_FreeSpaces::kMovable;
constexpr Roadmarking_FreeSpaces_MotionProp Roadmarking_FreeSpaces::kUnmovable;
constexpr Roadmarking_FreeSpaces_MotionProp Roadmarking_FreeSpaces::kStill;
constexpr Roadmarking_FreeSpaces_MotionProp Roadmarking_FreeSpaces::MotionProp_MIN;
constexpr Roadmarking_FreeSpaces_MotionProp Roadmarking_FreeSpaces::MotionProp_MAX;
constexpr int Roadmarking_FreeSpaces::MotionProp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_Roadmarks_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[1];
}
bool Roadmarking_Roadmarks_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kBackGround;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kStraightArrow;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kLeftArrow;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kRightArrow;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kUturnArrow;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kDiamond;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kInvertedTriangle;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kOppositemarks;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kStopLane;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kZebraCrossing;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kNoParkingArea;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kGoreArea;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kGroundWords;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kOthers;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kDecelerationLine;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kTypeNums;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kSpeedBump;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::kManholeCover;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::Type_MIN;
constexpr Roadmarking_Roadmarks_Type Roadmarking_Roadmarks::Type_MAX;
constexpr int Roadmarking_Roadmarks::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_Roadmarks_Form_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[2];
}
bool Roadmarking_Roadmarks_Form_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_Roadmarks_Form Roadmarking_Roadmarks::kRoadmarkUnknown;
constexpr Roadmarking_Roadmarks_Form Roadmarking_Roadmarks::kRoadmarkPoint;
constexpr Roadmarking_Roadmarks_Form Roadmarking_Roadmarks::kRoadmarkLine;
constexpr Roadmarking_Roadmarks_Form Roadmarking_Roadmarks::kRoadmarkPolygon;
constexpr Roadmarking_Roadmarks_Form Roadmarking_Roadmarks::Form_MIN;
constexpr Roadmarking_Roadmarks_Form Roadmarking_Roadmarks::Form_MAX;
constexpr int Roadmarking_Roadmarks::Form_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_Roadmarks_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[3];
}
bool Roadmarking_Roadmarks_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_Roadmarks_State Roadmarking_Roadmarks::kStateUnknown;
constexpr Roadmarking_Roadmarks_State Roadmarking_Roadmarks::kObserved;
constexpr Roadmarking_Roadmarks_State Roadmarking_Roadmarks::kPredicted;
constexpr Roadmarking_Roadmarks_State Roadmarking_Roadmarks::kUpdated;
constexpr Roadmarking_Roadmarks_State Roadmarking_Roadmarks::State_MIN;
constexpr Roadmarking_Roadmarks_State Roadmarking_Roadmarks::State_MAX;
constexpr int Roadmarking_Roadmarks::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_LDWInfo_LdwState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[4];
}
bool Roadmarking_LDWInfo_LdwState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_LDWInfo_LdwState Roadmarking_LDWInfo::kLdwNone;
constexpr Roadmarking_LDWInfo_LdwState Roadmarking_LDWInfo::kLdwLeft;
constexpr Roadmarking_LDWInfo_LdwState Roadmarking_LDWInfo::kLdwRight;
constexpr Roadmarking_LDWInfo_LdwState Roadmarking_LDWInfo::LdwState_MIN;
constexpr Roadmarking_LDWInfo_LdwState Roadmarking_LDWInfo::LdwState_MAX;
constexpr int Roadmarking_LDWInfo::LdwState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_LDWInfo_LdwWorkState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[5];
}
bool Roadmarking_LDWInfo_LdwWorkState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_LDWInfo_LdwWorkState Roadmarking_LDWInfo::kUnavailable;
constexpr Roadmarking_LDWInfo_LdwWorkState Roadmarking_LDWInfo::kOff;
constexpr Roadmarking_LDWInfo_LdwWorkState Roadmarking_LDWInfo::kStandby;
constexpr Roadmarking_LDWInfo_LdwWorkState Roadmarking_LDWInfo::kActive;
constexpr Roadmarking_LDWInfo_LdwWorkState Roadmarking_LDWInfo::kNotAvailable;
constexpr Roadmarking_LDWInfo_LdwWorkState Roadmarking_LDWInfo::kUnknown;
constexpr Roadmarking_LDWInfo_LdwWorkState Roadmarking_LDWInfo::LdwWorkState_MIN;
constexpr Roadmarking_LDWInfo_LdwWorkState Roadmarking_LDWInfo::LdwWorkState_MAX;
constexpr int Roadmarking_LDWInfo::LdwWorkState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_HppInfo_PlanningSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[6];
}
bool Roadmarking_HppInfo_PlanningSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_HppInfo_PlanningSource Roadmarking_HppInfo::kInvalid;
constexpr Roadmarking_HppInfo_PlanningSource Roadmarking_HppInfo::kDoubleLaneline;
constexpr Roadmarking_HppInfo_PlanningSource Roadmarking_HppInfo::kLeftLaneline;
constexpr Roadmarking_HppInfo_PlanningSource Roadmarking_HppInfo::kRightLaneline;
constexpr Roadmarking_HppInfo_PlanningSource Roadmarking_HppInfo::kLeftRoadEdge;
constexpr Roadmarking_HppInfo_PlanningSource Roadmarking_HppInfo::kRightRoadEdge;
constexpr Roadmarking_HppInfo_PlanningSource Roadmarking_HppInfo::kHeadingVehTrace;
constexpr Roadmarking_HppInfo_PlanningSource Roadmarking_HppInfo::kFreespace;
constexpr Roadmarking_HppInfo_PlanningSource Roadmarking_HppInfo::kSelfVehTrace;
constexpr Roadmarking_HppInfo_PlanningSource Roadmarking_HppInfo::PlanningSource_MIN;
constexpr Roadmarking_HppInfo_PlanningSource Roadmarking_HppInfo::PlanningSource_MAX;
constexpr int Roadmarking_HppInfo::PlanningSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_Junction_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[7];
}
bool Roadmarking_Junction_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_Junction_Type Roadmarking_Junction::kMergingPoints;
constexpr Roadmarking_Junction_Type Roadmarking_Junction::kDivergingPoints;
constexpr Roadmarking_Junction_Type Roadmarking_Junction::Type_MIN;
constexpr Roadmarking_Junction_Type Roadmarking_Junction::Type_MAX;
constexpr int Roadmarking_Junction::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_LanelinePositionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[8];
}
bool Roadmarking_LanelinePositionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_LanelinePositionType Roadmarking::kAdjacentLeft;
constexpr Roadmarking_LanelinePositionType Roadmarking::kEgoLeft;
constexpr Roadmarking_LanelinePositionType Roadmarking::kEgoRight;
constexpr Roadmarking_LanelinePositionType Roadmarking::kAdjacentRight;
constexpr Roadmarking_LanelinePositionType Roadmarking::kThirdLeft;
constexpr Roadmarking_LanelinePositionType Roadmarking::kThirdRight;
constexpr Roadmarking_LanelinePositionType Roadmarking::kFourthLeft;
constexpr Roadmarking_LanelinePositionType Roadmarking::kFourthRight;
constexpr Roadmarking_LanelinePositionType Roadmarking::kOther;
constexpr Roadmarking_LanelinePositionType Roadmarking::LanelinePositionType_MIN;
constexpr Roadmarking_LanelinePositionType Roadmarking::LanelinePositionType_MAX;
constexpr int Roadmarking::LanelinePositionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_LineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[9];
}
bool Roadmarking_LineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_LineType Roadmarking::kLineSingleSolid;
constexpr Roadmarking_LineType Roadmarking::kLineSingleDashed;
constexpr Roadmarking_LineType Roadmarking::kLineBold;
constexpr Roadmarking_LineType Roadmarking::kLineDoubleSolid;
constexpr Roadmarking_LineType Roadmarking::kLineDoubleDashed;
constexpr Roadmarking_LineType Roadmarking::kLineSolidDashed;
constexpr Roadmarking_LineType Roadmarking::kLineDashedSolid;
constexpr Roadmarking_LineType Roadmarking::kFence;
constexpr Roadmarking_LineType Roadmarking::kCurb;
constexpr Roadmarking_LineType Roadmarking::kLineDeceleration;
constexpr Roadmarking_LineType Roadmarking::kLineUnknown;
constexpr Roadmarking_LineType Roadmarking::LineType_MIN;
constexpr Roadmarking_LineType Roadmarking::LineType_MAX;
constexpr int Roadmarking::LineType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_ColorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[10];
}
bool Roadmarking_ColorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_ColorType Roadmarking::kColorWhite;
constexpr Roadmarking_ColorType Roadmarking::kColorYellow;
constexpr Roadmarking_ColorType Roadmarking::kColorOrange;
constexpr Roadmarking_ColorType Roadmarking::kColorBlue;
constexpr Roadmarking_ColorType Roadmarking::kColorGreen;
constexpr Roadmarking_ColorType Roadmarking::kColorGray;
constexpr Roadmarking_ColorType Roadmarking::kColorWhiteYellow;
constexpr Roadmarking_ColorType Roadmarking::kColorYellowWhite;
constexpr Roadmarking_ColorType Roadmarking::kColorYellowGrayFusion;
constexpr Roadmarking_ColorType Roadmarking::kColorUnknown;
constexpr Roadmarking_ColorType Roadmarking::ColorType_MIN;
constexpr Roadmarking_ColorType Roadmarking::ColorType_MAX;
constexpr int Roadmarking::ColorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_LineState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[11];
}
bool Roadmarking_LineState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_LineState Roadmarking::kDetected;
constexpr Roadmarking_LineState Roadmarking::kPredicted;
constexpr Roadmarking_LineState Roadmarking::kStableTrack;
constexpr Roadmarking_LineState Roadmarking::LineState_MIN;
constexpr Roadmarking_LineState Roadmarking::LineState_MAX;
constexpr int Roadmarking::LineState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_LaneIdx_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[12];
}
bool Roadmarking_LaneIdx_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_LaneIdx Roadmarking::kLaneIdxUnknown;
constexpr Roadmarking_LaneIdx Roadmarking::kEgoLane;
constexpr Roadmarking_LaneIdx Roadmarking::kAdjacentLeftLane;
constexpr Roadmarking_LaneIdx Roadmarking::kAdjacentRightLane;
constexpr Roadmarking_LaneIdx Roadmarking::kSecondaryLeftLane;
constexpr Roadmarking_LaneIdx Roadmarking::kSecondaryRightLane;
constexpr Roadmarking_LaneIdx Roadmarking::kThirdLeftLane;
constexpr Roadmarking_LaneIdx Roadmarking::kThirdRightLane;
constexpr Roadmarking_LaneIdx Roadmarking::LaneIdx_MIN;
constexpr Roadmarking_LaneIdx Roadmarking::LaneIdx_MAX;
constexpr int Roadmarking::LaneIdx_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_SpaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[13];
}
bool Roadmarking_SpaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_SpaceType Roadmarking::kBackground;
constexpr Roadmarking_SpaceType Roadmarking::kFreeSpace;
constexpr Roadmarking_SpaceType Roadmarking::kRoadBoundary;
constexpr Roadmarking_SpaceType Roadmarking::kVehicle;
constexpr Roadmarking_SpaceType Roadmarking::kRoadSign;
constexpr Roadmarking_SpaceType Roadmarking::kPole;
constexpr Roadmarking_SpaceType Roadmarking::kGuardrail;
constexpr Roadmarking_SpaceType Roadmarking::kSpaceTypeNums;
constexpr Roadmarking_SpaceType Roadmarking::SpaceType_MIN;
constexpr Roadmarking_SpaceType Roadmarking::SpaceType_MAX;
constexpr int Roadmarking::SpaceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Roadmarking_DirectPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarking_5fhz_2eproto);
  return file_level_enum_descriptors_roadmarking_5fhz_2eproto[14];
}
bool Roadmarking_DirectPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Roadmarking_DirectPosition Roadmarking::kDirectSame;
constexpr Roadmarking_DirectPosition Roadmarking::kDirectOpposite;
constexpr Roadmarking_DirectPosition Roadmarking::DirectPosition_MIN;
constexpr Roadmarking_DirectPosition Roadmarking::DirectPosition_MAX;
constexpr int Roadmarking::DirectPosition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RoadSysProfiling_Item::InitAsDefaultInstance() {
}
class RoadSysProfiling_Item::_Internal {
 public:
};

RoadSysProfiling_Item::RoadSysProfiling_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.RoadSysProfiling.Item)
}
RoadSysProfiling_Item::RoadSysProfiling_Item(const RoadSysProfiling_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:perception.hz.RoadSysProfiling.Item)
}

void RoadSysProfiling_Item::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadSysProfiling_Item_roadmarking_5fhz_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_ = 0;
}

RoadSysProfiling_Item::~RoadSysProfiling_Item() {
  // @@protoc_insertion_point(destructor:perception.hz.RoadSysProfiling.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadSysProfiling_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoadSysProfiling_Item::ArenaDtor(void* object) {
  RoadSysProfiling_Item* _this = reinterpret_cast< RoadSysProfiling_Item* >(object);
  (void)_this;
}
void RoadSysProfiling_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadSysProfiling_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadSysProfiling_Item& RoadSysProfiling_Item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadSysProfiling_Item_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void RoadSysProfiling_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.RoadSysProfiling.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  val_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadSysProfiling_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "perception.hz.RoadSysProfiling.Item.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadSysProfiling_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.RoadSysProfiling.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "perception.hz.RoadSysProfiling.Item.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // float val = 2;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.RoadSysProfiling.Item)
  return target;
}

size_t RoadSysProfiling_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.RoadSysProfiling.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // float val = 2;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadSysProfiling_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.RoadSysProfiling.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadSysProfiling_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadSysProfiling_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.RoadSysProfiling.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.RoadSysProfiling.Item)
    MergeFrom(*source);
  }
}

void RoadSysProfiling_Item::MergeFrom(const RoadSysProfiling_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.RoadSysProfiling.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (!(from.val() <= 0 && from.val() >= 0)) {
    _internal_set_val(from._internal_val());
  }
}

void RoadSysProfiling_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.RoadSysProfiling.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSysProfiling_Item::CopyFrom(const RoadSysProfiling_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.RoadSysProfiling.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSysProfiling_Item::IsInitialized() const {
  return true;
}

void RoadSysProfiling_Item::InternalSwap(RoadSysProfiling_Item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadSysProfiling_Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadSysProfiling::InitAsDefaultInstance() {
}
class RoadSysProfiling::_Internal {
 public:
};

RoadSysProfiling::RoadSysProfiling(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.RoadSysProfiling)
}
RoadSysProfiling::RoadSysProfiling(const RoadSysProfiling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perception.hz.RoadSysProfiling)
}

void RoadSysProfiling::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadSysProfiling_roadmarking_5fhz_2eproto.base);
}

RoadSysProfiling::~RoadSysProfiling() {
  // @@protoc_insertion_point(destructor:perception.hz.RoadSysProfiling)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadSysProfiling::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoadSysProfiling::ArenaDtor(void* object) {
  RoadSysProfiling* _this = reinterpret_cast< RoadSysProfiling* >(object);
  (void)_this;
}
void RoadSysProfiling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadSysProfiling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadSysProfiling& RoadSysProfiling::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadSysProfiling_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void RoadSysProfiling::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.RoadSysProfiling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadSysProfiling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.hz.RoadSysProfiling.Item items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadSysProfiling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.RoadSysProfiling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.hz.RoadSysProfiling.Item items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.RoadSysProfiling)
  return target;
}

size_t RoadSysProfiling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.RoadSysProfiling)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.hz.RoadSysProfiling.Item items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadSysProfiling::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.RoadSysProfiling)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadSysProfiling* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadSysProfiling>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.RoadSysProfiling)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.RoadSysProfiling)
    MergeFrom(*source);
  }
}

void RoadSysProfiling::MergeFrom(const RoadSysProfiling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.RoadSysProfiling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void RoadSysProfiling::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.RoadSysProfiling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSysProfiling::CopyFrom(const RoadSysProfiling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.RoadSysProfiling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSysProfiling::IsInitialized() const {
  return true;
}

void RoadSysProfiling::InternalSwap(RoadSysProfiling* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadSysProfiling::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_CurveCoeff::InitAsDefaultInstance() {
}
class Roadmarking_CurveCoeff::_Internal {
 public:
};

Roadmarking_CurveCoeff::Roadmarking_CurveCoeff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.CurveCoeff)
}
Roadmarking_CurveCoeff::Roadmarking_CurveCoeff(const Roadmarking_CurveCoeff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&longitude_min_, &from.longitude_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&dev_c3_) -
    reinterpret_cast<char*>(&longitude_min_)) + sizeof(dev_c3_));
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.CurveCoeff)
}

void Roadmarking_CurveCoeff::SharedCtor() {
  ::memset(&longitude_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dev_c3_) -
      reinterpret_cast<char*>(&longitude_min_)) + sizeof(dev_c3_));
}

Roadmarking_CurveCoeff::~Roadmarking_CurveCoeff() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.CurveCoeff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_CurveCoeff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Roadmarking_CurveCoeff::ArenaDtor(void* object) {
  Roadmarking_CurveCoeff* _this = reinterpret_cast< Roadmarking_CurveCoeff* >(object);
  (void)_this;
}
void Roadmarking_CurveCoeff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_CurveCoeff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_CurveCoeff& Roadmarking_CurveCoeff::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_CurveCoeff_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_CurveCoeff::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.CurveCoeff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dev_c3_) -
      reinterpret_cast<char*>(&longitude_min_)) + sizeof(dev_c3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_CurveCoeff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float longitude_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          longitude_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float longitude_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          longitude_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double c0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          c0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double c1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          c1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double c2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          c2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double c3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          c3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dev_c0 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          dev_c0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dev_c1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          dev_c1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dev_c2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          dev_c2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dev_c3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          dev_c3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_CurveCoeff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.CurveCoeff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float longitude_min = 1;
  if (!(this->longitude_min() <= 0 && this->longitude_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_longitude_min(), target);
  }

  // float longitude_max = 2;
  if (!(this->longitude_max() <= 0 && this->longitude_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_longitude_max(), target);
  }

  // double c0 = 3;
  if (!(this->c0() <= 0 && this->c0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_c0(), target);
  }

  // double c1 = 4;
  if (!(this->c1() <= 0 && this->c1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_c1(), target);
  }

  // double c2 = 5;
  if (!(this->c2() <= 0 && this->c2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_c2(), target);
  }

  // double c3 = 6;
  if (!(this->c3() <= 0 && this->c3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_c3(), target);
  }

  // double dev_c0 = 7;
  if (!(this->dev_c0() <= 0 && this->dev_c0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_dev_c0(), target);
  }

  // double dev_c1 = 8;
  if (!(this->dev_c1() <= 0 && this->dev_c1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_dev_c1(), target);
  }

  // double dev_c2 = 9;
  if (!(this->dev_c2() <= 0 && this->dev_c2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_dev_c2(), target);
  }

  // double dev_c3 = 10;
  if (!(this->dev_c3() <= 0 && this->dev_c3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_dev_c3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.CurveCoeff)
  return target;
}

size_t Roadmarking_CurveCoeff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.CurveCoeff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float longitude_min = 1;
  if (!(this->longitude_min() <= 0 && this->longitude_min() >= 0)) {
    total_size += 1 + 4;
  }

  // float longitude_max = 2;
  if (!(this->longitude_max() <= 0 && this->longitude_max() >= 0)) {
    total_size += 1 + 4;
  }

  // double c0 = 3;
  if (!(this->c0() <= 0 && this->c0() >= 0)) {
    total_size += 1 + 8;
  }

  // double c1 = 4;
  if (!(this->c1() <= 0 && this->c1() >= 0)) {
    total_size += 1 + 8;
  }

  // double c2 = 5;
  if (!(this->c2() <= 0 && this->c2() >= 0)) {
    total_size += 1 + 8;
  }

  // double c3 = 6;
  if (!(this->c3() <= 0 && this->c3() >= 0)) {
    total_size += 1 + 8;
  }

  // double dev_c0 = 7;
  if (!(this->dev_c0() <= 0 && this->dev_c0() >= 0)) {
    total_size += 1 + 8;
  }

  // double dev_c1 = 8;
  if (!(this->dev_c1() <= 0 && this->dev_c1() >= 0)) {
    total_size += 1 + 8;
  }

  // double dev_c2 = 9;
  if (!(this->dev_c2() <= 0 && this->dev_c2() >= 0)) {
    total_size += 1 + 8;
  }

  // double dev_c3 = 10;
  if (!(this->dev_c3() <= 0 && this->dev_c3() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_CurveCoeff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.CurveCoeff)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_CurveCoeff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_CurveCoeff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.CurveCoeff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.CurveCoeff)
    MergeFrom(*source);
  }
}

void Roadmarking_CurveCoeff::MergeFrom(const Roadmarking_CurveCoeff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.CurveCoeff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.longitude_min() <= 0 && from.longitude_min() >= 0)) {
    _internal_set_longitude_min(from._internal_longitude_min());
  }
  if (!(from.longitude_max() <= 0 && from.longitude_max() >= 0)) {
    _internal_set_longitude_max(from._internal_longitude_max());
  }
  if (!(from.c0() <= 0 && from.c0() >= 0)) {
    _internal_set_c0(from._internal_c0());
  }
  if (!(from.c1() <= 0 && from.c1() >= 0)) {
    _internal_set_c1(from._internal_c1());
  }
  if (!(from.c2() <= 0 && from.c2() >= 0)) {
    _internal_set_c2(from._internal_c2());
  }
  if (!(from.c3() <= 0 && from.c3() >= 0)) {
    _internal_set_c3(from._internal_c3());
  }
  if (!(from.dev_c0() <= 0 && from.dev_c0() >= 0)) {
    _internal_set_dev_c0(from._internal_dev_c0());
  }
  if (!(from.dev_c1() <= 0 && from.dev_c1() >= 0)) {
    _internal_set_dev_c1(from._internal_dev_c1());
  }
  if (!(from.dev_c2() <= 0 && from.dev_c2() >= 0)) {
    _internal_set_dev_c2(from._internal_dev_c2());
  }
  if (!(from.dev_c3() <= 0 && from.dev_c3() >= 0)) {
    _internal_set_dev_c3(from._internal_dev_c3());
  }
}

void Roadmarking_CurveCoeff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.CurveCoeff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_CurveCoeff::CopyFrom(const Roadmarking_CurveCoeff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.CurveCoeff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_CurveCoeff::IsInitialized() const {
  return true;
}

void Roadmarking_CurveCoeff::InternalSwap(Roadmarking_CurveCoeff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roadmarking_CurveCoeff, dev_c3_)
      + sizeof(Roadmarking_CurveCoeff::dev_c3_)
      - PROTOBUF_FIELD_OFFSET(Roadmarking_CurveCoeff, longitude_min_)>(
          reinterpret_cast<char*>(&longitude_min_),
          reinterpret_cast<char*>(&other->longitude_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_CurveCoeff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_Laneline::InitAsDefaultInstance() {
  ::perception::hz::_Roadmarking_Laneline_default_instance_._instance.get_mutable()->curve_vehicle_coord_ = const_cast< ::perception::hz::Roadmarking_CurveCoeff*>(
      ::perception::hz::Roadmarking_CurveCoeff::internal_default_instance());
  ::perception::hz::_Roadmarking_Laneline_default_instance_._instance.get_mutable()->curve_image_coord_ = const_cast< ::perception::hz::Roadmarking_CurveCoeff*>(
      ::perception::hz::Roadmarking_CurveCoeff::internal_default_instance());
  ::perception::hz::_Roadmarking_Laneline_default_instance_._instance.get_mutable()->points_image_coord_ = const_cast< ::perception::common::Point2fList*>(
      ::perception::common::Point2fList::internal_default_instance());
  ::perception::hz::_Roadmarking_Laneline_default_instance_._instance.get_mutable()->points_vehicle_coord_ = const_cast< ::perception::common::Point3fList*>(
      ::perception::common::Point3fList::internal_default_instance());
  ::perception::hz::_Roadmarking_Laneline_default_instance_._instance.get_mutable()->fit_points_image_coord_ = const_cast< ::perception::common::Point2fList*>(
      ::perception::common::Point2fList::internal_default_instance());
  ::perception::hz::_Roadmarking_Laneline_default_instance_._instance.get_mutable()->fit_points_vehicle_coord_ = const_cast< ::perception::common::Point3fList*>(
      ::perception::common::Point3fList::internal_default_instance());
  ::perception::hz::_Roadmarking_Laneline_default_instance_._instance.get_mutable()->centroid_pt_ = const_cast< ::perception::common::Point2f*>(
      ::perception::common::Point2f::internal_default_instance());
}
class Roadmarking_Laneline::_Internal {
 public:
  static const ::perception::hz::Roadmarking_CurveCoeff& curve_vehicle_coord(const Roadmarking_Laneline* msg);
  static const ::perception::hz::Roadmarking_CurveCoeff& curve_image_coord(const Roadmarking_Laneline* msg);
  static const ::perception::common::Point2fList& points_image_coord(const Roadmarking_Laneline* msg);
  static const ::perception::common::Point3fList& points_vehicle_coord(const Roadmarking_Laneline* msg);
  static const ::perception::common::Point2fList& fit_points_image_coord(const Roadmarking_Laneline* msg);
  static const ::perception::common::Point3fList& fit_points_vehicle_coord(const Roadmarking_Laneline* msg);
  static const ::perception::common::Point2f& centroid_pt(const Roadmarking_Laneline* msg);
};

const ::perception::hz::Roadmarking_CurveCoeff&
Roadmarking_Laneline::_Internal::curve_vehicle_coord(const Roadmarking_Laneline* msg) {
  return *msg->curve_vehicle_coord_;
}
const ::perception::hz::Roadmarking_CurveCoeff&
Roadmarking_Laneline::_Internal::curve_image_coord(const Roadmarking_Laneline* msg) {
  return *msg->curve_image_coord_;
}
const ::perception::common::Point2fList&
Roadmarking_Laneline::_Internal::points_image_coord(const Roadmarking_Laneline* msg) {
  return *msg->points_image_coord_;
}
const ::perception::common::Point3fList&
Roadmarking_Laneline::_Internal::points_vehicle_coord(const Roadmarking_Laneline* msg) {
  return *msg->points_vehicle_coord_;
}
const ::perception::common::Point2fList&
Roadmarking_Laneline::_Internal::fit_points_image_coord(const Roadmarking_Laneline* msg) {
  return *msg->fit_points_image_coord_;
}
const ::perception::common::Point3fList&
Roadmarking_Laneline::_Internal::fit_points_vehicle_coord(const Roadmarking_Laneline* msg) {
  return *msg->fit_points_vehicle_coord_;
}
const ::perception::common::Point2f&
Roadmarking_Laneline::_Internal::centroid_pt(const Roadmarking_Laneline* msg) {
  return *msg->centroid_pt_;
}
void Roadmarking_Laneline::clear_points_image_coord() {
  if (GetArena() == nullptr && points_image_coord_ != nullptr) {
    delete points_image_coord_;
  }
  points_image_coord_ = nullptr;
}
void Roadmarking_Laneline::clear_points_vehicle_coord() {
  if (GetArena() == nullptr && points_vehicle_coord_ != nullptr) {
    delete points_vehicle_coord_;
  }
  points_vehicle_coord_ = nullptr;
}
void Roadmarking_Laneline::clear_fit_points_image_coord() {
  if (GetArena() == nullptr && fit_points_image_coord_ != nullptr) {
    delete fit_points_image_coord_;
  }
  fit_points_image_coord_ = nullptr;
}
void Roadmarking_Laneline::clear_fit_points_vehicle_coord() {
  if (GetArena() == nullptr && fit_points_vehicle_coord_ != nullptr) {
    delete fit_points_vehicle_coord_;
  }
  fit_points_vehicle_coord_ = nullptr;
}
void Roadmarking_Laneline::clear_centroid_pt() {
  if (GetArena() == nullptr && centroid_pt_ != nullptr) {
    delete centroid_pt_;
  }
  centroid_pt_ = nullptr;
}
Roadmarking_Laneline::Roadmarking_Laneline(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  point_cam_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.Laneline)
}
Roadmarking_Laneline::Roadmarking_Laneline(const Roadmarking_Laneline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      point_cam_id_(from.point_cam_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_curve_vehicle_coord()) {
    curve_vehicle_coord_ = new ::perception::hz::Roadmarking_CurveCoeff(*from.curve_vehicle_coord_);
  } else {
    curve_vehicle_coord_ = nullptr;
  }
  if (from._internal_has_curve_image_coord()) {
    curve_image_coord_ = new ::perception::hz::Roadmarking_CurveCoeff(*from.curve_image_coord_);
  } else {
    curve_image_coord_ = nullptr;
  }
  if (from._internal_has_points_image_coord()) {
    points_image_coord_ = new ::perception::common::Point2fList(*from.points_image_coord_);
  } else {
    points_image_coord_ = nullptr;
  }
  if (from._internal_has_points_vehicle_coord()) {
    points_vehicle_coord_ = new ::perception::common::Point3fList(*from.points_vehicle_coord_);
  } else {
    points_vehicle_coord_ = nullptr;
  }
  if (from._internal_has_fit_points_image_coord()) {
    fit_points_image_coord_ = new ::perception::common::Point2fList(*from.fit_points_image_coord_);
  } else {
    fit_points_image_coord_ = nullptr;
  }
  if (from._internal_has_fit_points_vehicle_coord()) {
    fit_points_vehicle_coord_ = new ::perception::common::Point3fList(*from.fit_points_vehicle_coord_);
  } else {
    fit_points_vehicle_coord_ = nullptr;
  }
  if (from._internal_has_centroid_pt()) {
    centroid_pt_ = new ::perception::common::Point2f(*from.centroid_pt_);
  } else {
    centroid_pt_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(lane_id_));
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.Laneline)
}

void Roadmarking_Laneline::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarking_Laneline_roadmarking_5fhz_2eproto.base);
  ::memset(&curve_vehicle_coord_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_id_) -
      reinterpret_cast<char*>(&curve_vehicle_coord_)) + sizeof(lane_id_));
}

Roadmarking_Laneline::~Roadmarking_Laneline() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.Laneline)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_Laneline::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete curve_vehicle_coord_;
  if (this != internal_default_instance()) delete curve_image_coord_;
  if (this != internal_default_instance()) delete points_image_coord_;
  if (this != internal_default_instance()) delete points_vehicle_coord_;
  if (this != internal_default_instance()) delete fit_points_image_coord_;
  if (this != internal_default_instance()) delete fit_points_vehicle_coord_;
  if (this != internal_default_instance()) delete centroid_pt_;
}

void Roadmarking_Laneline::ArenaDtor(void* object) {
  Roadmarking_Laneline* _this = reinterpret_cast< Roadmarking_Laneline* >(object);
  (void)_this;
}
void Roadmarking_Laneline::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_Laneline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_Laneline& Roadmarking_Laneline::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_Laneline_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_Laneline::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.Laneline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_cam_id_.Clear();
  if (GetArena() == nullptr && curve_vehicle_coord_ != nullptr) {
    delete curve_vehicle_coord_;
  }
  curve_vehicle_coord_ = nullptr;
  if (GetArena() == nullptr && curve_image_coord_ != nullptr) {
    delete curve_image_coord_;
  }
  curve_image_coord_ = nullptr;
  if (GetArena() == nullptr && points_image_coord_ != nullptr) {
    delete points_image_coord_;
  }
  points_image_coord_ = nullptr;
  if (GetArena() == nullptr && points_vehicle_coord_ != nullptr) {
    delete points_vehicle_coord_;
  }
  points_vehicle_coord_ = nullptr;
  if (GetArena() == nullptr && fit_points_image_coord_ != nullptr) {
    delete fit_points_image_coord_;
  }
  fit_points_image_coord_ = nullptr;
  if (GetArena() == nullptr && fit_points_vehicle_coord_ != nullptr) {
    delete fit_points_vehicle_coord_;
  }
  fit_points_vehicle_coord_ = nullptr;
  if (GetArena() == nullptr && centroid_pt_ != nullptr) {
    delete centroid_pt_;
  }
  centroid_pt_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(lane_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_Laneline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.hz.Roadmarking.LineType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::perception::hz::Roadmarking_LineType>(val));
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.LanelinePositionType pos_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pos_type(static_cast<::perception::hz::Roadmarking_LanelinePositionType>(val));
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.ColorType color_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_color_type(static_cast<::perception::hz::Roadmarking_ColorType>(val));
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.CurveCoeff curve_vehicle_coord = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve_vehicle_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.CurveCoeff curve_image_coord = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve_image_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2fList points_image_coord = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_points_image_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3fList points_vehicle_coord = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_points_vehicle_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2fList fit_points_image_coord = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fit_points_image_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3fList fit_points_vehicle_coord = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_fit_points_vehicle_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.LineState line_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_line_state(static_cast<::perception::hz::Roadmarking_LineState>(val));
        } else goto handle_unusual;
        continue;
      // float confidence = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float width = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 age = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 point_cam_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_point_cam_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_point_cam_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2f centroid_pt = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_centroid_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_Laneline::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.Laneline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.hz.Roadmarking.LineType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .perception.hz.Roadmarking.LanelinePositionType pos_type = 2;
  if (this->pos_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pos_type(), target);
  }

  // .perception.hz.Roadmarking.ColorType color_type = 3;
  if (this->color_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_color_type(), target);
  }

  // .perception.hz.Roadmarking.CurveCoeff curve_vehicle_coord = 4;
  if (this->has_curve_vehicle_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::curve_vehicle_coord(this), target, stream);
  }

  // .perception.hz.Roadmarking.CurveCoeff curve_image_coord = 5;
  if (this->has_curve_image_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::curve_image_coord(this), target, stream);
  }

  // .perception.common.Point2fList points_image_coord = 6;
  if (this->has_points_image_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::points_image_coord(this), target, stream);
  }

  // .perception.common.Point3fList points_vehicle_coord = 7;
  if (this->has_points_vehicle_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::points_vehicle_coord(this), target, stream);
  }

  // .perception.common.Point2fList fit_points_image_coord = 8;
  if (this->has_fit_points_image_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::fit_points_image_coord(this), target, stream);
  }

  // .perception.common.Point3fList fit_points_vehicle_coord = 9;
  if (this->has_fit_points_vehicle_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::fit_points_vehicle_coord(this), target, stream);
  }

  // uint64 id = 10;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_id(), target);
  }

  // .perception.hz.Roadmarking.LineState line_state = 11;
  if (this->line_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_line_state(), target);
  }

  // float confidence = 12;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_confidence(), target);
  }

  // float width = 13;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_width(), target);
  }

  // uint32 age = 14;
  if (this->age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_age(), target);
  }

  // repeated uint32 point_cam_id = 15;
  {
    int byte_size = _point_cam_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          15, _internal_point_cam_id(), byte_size, target);
    }
  }

  // .perception.common.Point2f centroid_pt = 16;
  if (this->has_centroid_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::centroid_pt(this), target, stream);
  }

  // int32 lane_id = 17;
  if (this->lane_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_lane_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.Laneline)
  return target;
}

size_t Roadmarking_Laneline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.Laneline)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 point_cam_id = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->point_cam_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _point_cam_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .perception.hz.Roadmarking.CurveCoeff curve_vehicle_coord = 4;
  if (this->has_curve_vehicle_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *curve_vehicle_coord_);
  }

  // .perception.hz.Roadmarking.CurveCoeff curve_image_coord = 5;
  if (this->has_curve_image_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *curve_image_coord_);
  }

  // .perception.common.Point2fList points_image_coord = 6;
  if (this->has_points_image_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *points_image_coord_);
  }

  // .perception.common.Point3fList points_vehicle_coord = 7;
  if (this->has_points_vehicle_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *points_vehicle_coord_);
  }

  // .perception.common.Point2fList fit_points_image_coord = 8;
  if (this->has_fit_points_image_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fit_points_image_coord_);
  }

  // .perception.common.Point3fList fit_points_vehicle_coord = 9;
  if (this->has_fit_points_vehicle_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fit_points_vehicle_coord_);
  }

  // .perception.common.Point2f centroid_pt = 16;
  if (this->has_centroid_pt()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *centroid_pt_);
  }

  // .perception.hz.Roadmarking.LineType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .perception.hz.Roadmarking.LanelinePositionType pos_type = 2;
  if (this->pos_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pos_type());
  }

  // .perception.hz.Roadmarking.ColorType color_type = 3;
  if (this->color_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color_type());
  }

  // .perception.hz.Roadmarking.LineState line_state = 11;
  if (this->line_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_line_state());
  }

  // uint64 id = 10;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // float confidence = 12;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float width = 13;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 age = 14;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_age());
  }

  // int32 lane_id = 17;
  if (this->lane_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_Laneline::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.Laneline)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_Laneline* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_Laneline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.Laneline)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.Laneline)
    MergeFrom(*source);
  }
}

void Roadmarking_Laneline::MergeFrom(const Roadmarking_Laneline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.Laneline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_cam_id_.MergeFrom(from.point_cam_id_);
  if (from.has_curve_vehicle_coord()) {
    _internal_mutable_curve_vehicle_coord()->::perception::hz::Roadmarking_CurveCoeff::MergeFrom(from._internal_curve_vehicle_coord());
  }
  if (from.has_curve_image_coord()) {
    _internal_mutable_curve_image_coord()->::perception::hz::Roadmarking_CurveCoeff::MergeFrom(from._internal_curve_image_coord());
  }
  if (from.has_points_image_coord()) {
    _internal_mutable_points_image_coord()->::perception::common::Point2fList::MergeFrom(from._internal_points_image_coord());
  }
  if (from.has_points_vehicle_coord()) {
    _internal_mutable_points_vehicle_coord()->::perception::common::Point3fList::MergeFrom(from._internal_points_vehicle_coord());
  }
  if (from.has_fit_points_image_coord()) {
    _internal_mutable_fit_points_image_coord()->::perception::common::Point2fList::MergeFrom(from._internal_fit_points_image_coord());
  }
  if (from.has_fit_points_vehicle_coord()) {
    _internal_mutable_fit_points_vehicle_coord()->::perception::common::Point3fList::MergeFrom(from._internal_fit_points_vehicle_coord());
  }
  if (from.has_centroid_pt()) {
    _internal_mutable_centroid_pt()->::perception::common::Point2f::MergeFrom(from._internal_centroid_pt());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.pos_type() != 0) {
    _internal_set_pos_type(from._internal_pos_type());
  }
  if (from.color_type() != 0) {
    _internal_set_color_type(from._internal_color_type());
  }
  if (from.line_state() != 0) {
    _internal_set_line_state(from._internal_line_state());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (from.age() != 0) {
    _internal_set_age(from._internal_age());
  }
  if (from.lane_id() != 0) {
    _internal_set_lane_id(from._internal_lane_id());
  }
}

void Roadmarking_Laneline::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.Laneline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_Laneline::CopyFrom(const Roadmarking_Laneline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.Laneline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_Laneline::IsInitialized() const {
  return true;
}

void Roadmarking_Laneline::InternalSwap(Roadmarking_Laneline* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  point_cam_id_.InternalSwap(&other->point_cam_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roadmarking_Laneline, lane_id_)
      + sizeof(Roadmarking_Laneline::lane_id_)
      - PROTOBUF_FIELD_OFFSET(Roadmarking_Laneline, curve_vehicle_coord_)>(
          reinterpret_cast<char*>(&curve_vehicle_coord_),
          reinterpret_cast<char*>(&other->curve_vehicle_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_Laneline::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_LanelineList::InitAsDefaultInstance() {
}
class Roadmarking_LanelineList::_Internal {
 public:
};

Roadmarking_LanelineList::Roadmarking_LanelineList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  line_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.LanelineList)
}
Roadmarking_LanelineList::Roadmarking_LanelineList(const Roadmarking_LanelineList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      line_(from.line_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.LanelineList)
}

void Roadmarking_LanelineList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarking_LanelineList_roadmarking_5fhz_2eproto.base);
}

Roadmarking_LanelineList::~Roadmarking_LanelineList() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.LanelineList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_LanelineList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Roadmarking_LanelineList::ArenaDtor(void* object) {
  Roadmarking_LanelineList* _this = reinterpret_cast< Roadmarking_LanelineList* >(object);
  (void)_this;
}
void Roadmarking_LanelineList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_LanelineList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_LanelineList& Roadmarking_LanelineList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_LanelineList_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_LanelineList::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.LanelineList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_LanelineList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.hz.Roadmarking.Laneline line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_LanelineList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.LanelineList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.hz.Roadmarking.Laneline line = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_line(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.LanelineList)
  return target;
}

size_t Roadmarking_LanelineList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.LanelineList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.hz.Roadmarking.Laneline line = 1;
  total_size += 1UL * this->_internal_line_size();
  for (const auto& msg : this->line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_LanelineList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.LanelineList)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_LanelineList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_LanelineList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.LanelineList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.LanelineList)
    MergeFrom(*source);
  }
}

void Roadmarking_LanelineList::MergeFrom(const Roadmarking_LanelineList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.LanelineList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  line_.MergeFrom(from.line_);
}

void Roadmarking_LanelineList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.LanelineList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_LanelineList::CopyFrom(const Roadmarking_LanelineList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.LanelineList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_LanelineList::IsInitialized() const {
  return true;
}

void Roadmarking_LanelineList::InternalSwap(Roadmarking_LanelineList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  line_.InternalSwap(&other->line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_LanelineList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_FreeSpaces_FreeZone::InitAsDefaultInstance() {
  ::perception::hz::_Roadmarking_FreeSpaces_FreeZone_default_instance_._instance.get_mutable()->point_image_coord_ = const_cast< ::perception::common::Point2f*>(
      ::perception::common::Point2f::internal_default_instance());
  ::perception::hz::_Roadmarking_FreeSpaces_FreeZone_default_instance_._instance.get_mutable()->point_vehicle_coord_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
}
class Roadmarking_FreeSpaces_FreeZone::_Internal {
 public:
  static const ::perception::common::Point2f& point_image_coord(const Roadmarking_FreeSpaces_FreeZone* msg);
  static const ::perception::common::Point3f& point_vehicle_coord(const Roadmarking_FreeSpaces_FreeZone* msg);
};

const ::perception::common::Point2f&
Roadmarking_FreeSpaces_FreeZone::_Internal::point_image_coord(const Roadmarking_FreeSpaces_FreeZone* msg) {
  return *msg->point_image_coord_;
}
const ::perception::common::Point3f&
Roadmarking_FreeSpaces_FreeZone::_Internal::point_vehicle_coord(const Roadmarking_FreeSpaces_FreeZone* msg) {
  return *msg->point_vehicle_coord_;
}
void Roadmarking_FreeSpaces_FreeZone::clear_point_image_coord() {
  if (GetArena() == nullptr && point_image_coord_ != nullptr) {
    delete point_image_coord_;
  }
  point_image_coord_ = nullptr;
}
void Roadmarking_FreeSpaces_FreeZone::clear_point_vehicle_coord() {
  if (GetArena() == nullptr && point_vehicle_coord_ != nullptr) {
    delete point_vehicle_coord_;
  }
  point_vehicle_coord_ = nullptr;
}
Roadmarking_FreeSpaces_FreeZone::Roadmarking_FreeSpaces_FreeZone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.FreeSpaces.FreeZone)
}
Roadmarking_FreeSpaces_FreeZone::Roadmarking_FreeSpaces_FreeZone(const Roadmarking_FreeSpaces_FreeZone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point_image_coord()) {
    point_image_coord_ = new ::perception::common::Point2f(*from.point_image_coord_);
  } else {
    point_image_coord_ = nullptr;
  }
  if (from._internal_has_point_vehicle_coord()) {
    point_vehicle_coord_ = new ::perception::common::Point3f(*from.point_vehicle_coord_);
  } else {
    point_vehicle_coord_ = nullptr;
  }
  ::memcpy(&dist_, &from.dist_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensor_type_) -
    reinterpret_cast<char*>(&dist_)) + sizeof(sensor_type_));
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.FreeSpaces.FreeZone)
}

void Roadmarking_FreeSpaces_FreeZone::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarking_FreeSpaces_FreeZone_roadmarking_5fhz_2eproto.base);
  ::memset(&point_image_coord_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_type_) -
      reinterpret_cast<char*>(&point_image_coord_)) + sizeof(sensor_type_));
}

Roadmarking_FreeSpaces_FreeZone::~Roadmarking_FreeSpaces_FreeZone() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.FreeSpaces.FreeZone)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_FreeSpaces_FreeZone::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete point_image_coord_;
  if (this != internal_default_instance()) delete point_vehicle_coord_;
}

void Roadmarking_FreeSpaces_FreeZone::ArenaDtor(void* object) {
  Roadmarking_FreeSpaces_FreeZone* _this = reinterpret_cast< Roadmarking_FreeSpaces_FreeZone* >(object);
  (void)_this;
}
void Roadmarking_FreeSpaces_FreeZone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_FreeSpaces_FreeZone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_FreeSpaces_FreeZone& Roadmarking_FreeSpaces_FreeZone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_FreeSpaces_FreeZone_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_FreeSpaces_FreeZone::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.FreeSpaces.FreeZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && point_image_coord_ != nullptr) {
    delete point_image_coord_;
  }
  point_image_coord_ = nullptr;
  if (GetArena() == nullptr && point_vehicle_coord_ != nullptr) {
    delete point_vehicle_coord_;
  }
  point_vehicle_coord_ = nullptr;
  ::memset(&dist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_type_) -
      reinterpret_cast<char*>(&dist_)) + sizeof(sensor_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_FreeSpaces_FreeZone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.Point2f point_image_coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_image_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f point_vehicle_coord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_vehicle_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.LaneIdx lane_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lane_index(static_cast<::perception::hz::Roadmarking_LaneIdx>(val));
        } else goto handle_unusual;
        continue;
      // float confidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.SpaceType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::perception::hz::Roadmarking_SpaceType>(val));
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.FreeSpaces.MotionProp motion_prop = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_motion_prop(static_cast<::perception::hz::Roadmarking_FreeSpaces_MotionProp>(val));
        } else goto handle_unusual;
        continue;
      // uint32 camera_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sensor_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          sensor_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_FreeSpaces_FreeZone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.FreeSpaces.FreeZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.Point2f point_image_coord = 1;
  if (this->has_point_image_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::point_image_coord(this), target, stream);
  }

  // .perception.common.Point3f point_vehicle_coord = 2;
  if (this->has_point_vehicle_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::point_vehicle_coord(this), target, stream);
  }

  // float dist = 3;
  if (!(this->dist() <= 0 && this->dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_dist(), target);
  }

  // float angle = 4;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_angle(), target);
  }

  // .perception.hz.Roadmarking.LaneIdx lane_index = 5;
  if (this->lane_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_lane_index(), target);
  }

  // float confidence = 6;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_confidence(), target);
  }

  // .perception.hz.Roadmarking.SpaceType type = 7;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // .perception.hz.Roadmarking.FreeSpaces.MotionProp motion_prop = 8;
  if (this->motion_prop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_motion_prop(), target);
  }

  // uint32 camera_id = 9;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_camera_id(), target);
  }

  // uint32 sensor_type = 10;
  if (this->sensor_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_sensor_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.FreeSpaces.FreeZone)
  return target;
}

size_t Roadmarking_FreeSpaces_FreeZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.FreeSpaces.FreeZone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Point2f point_image_coord = 1;
  if (this->has_point_image_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_image_coord_);
  }

  // .perception.common.Point3f point_vehicle_coord = 2;
  if (this->has_point_vehicle_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_vehicle_coord_);
  }

  // float dist = 3;
  if (!(this->dist() <= 0 && this->dist() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle = 4;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  // .perception.hz.Roadmarking.LaneIdx lane_index = 5;
  if (this->lane_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lane_index());
  }

  // float confidence = 6;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // .perception.hz.Roadmarking.SpaceType type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .perception.hz.Roadmarking.FreeSpaces.MotionProp motion_prop = 8;
  if (this->motion_prop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_motion_prop());
  }

  // uint32 camera_id = 9;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_camera_id());
  }

  // uint32 sensor_type = 10;
  if (this->sensor_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sensor_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_FreeSpaces_FreeZone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.FreeSpaces.FreeZone)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_FreeSpaces_FreeZone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_FreeSpaces_FreeZone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.FreeSpaces.FreeZone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.FreeSpaces.FreeZone)
    MergeFrom(*source);
  }
}

void Roadmarking_FreeSpaces_FreeZone::MergeFrom(const Roadmarking_FreeSpaces_FreeZone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.FreeSpaces.FreeZone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point_image_coord()) {
    _internal_mutable_point_image_coord()->::perception::common::Point2f::MergeFrom(from._internal_point_image_coord());
  }
  if (from.has_point_vehicle_coord()) {
    _internal_mutable_point_vehicle_coord()->::perception::common::Point3f::MergeFrom(from._internal_point_vehicle_coord());
  }
  if (!(from.dist() <= 0 && from.dist() >= 0)) {
    _internal_set_dist(from._internal_dist());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  if (from.lane_index() != 0) {
    _internal_set_lane_index(from._internal_lane_index());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.motion_prop() != 0) {
    _internal_set_motion_prop(from._internal_motion_prop());
  }
  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.sensor_type() != 0) {
    _internal_set_sensor_type(from._internal_sensor_type());
  }
}

void Roadmarking_FreeSpaces_FreeZone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.FreeSpaces.FreeZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_FreeSpaces_FreeZone::CopyFrom(const Roadmarking_FreeSpaces_FreeZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.FreeSpaces.FreeZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_FreeSpaces_FreeZone::IsInitialized() const {
  return true;
}

void Roadmarking_FreeSpaces_FreeZone::InternalSwap(Roadmarking_FreeSpaces_FreeZone* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roadmarking_FreeSpaces_FreeZone, sensor_type_)
      + sizeof(Roadmarking_FreeSpaces_FreeZone::sensor_type_)
      - PROTOBUF_FIELD_OFFSET(Roadmarking_FreeSpaces_FreeZone, point_image_coord_)>(
          reinterpret_cast<char*>(&point_image_coord_),
          reinterpret_cast<char*>(&other->point_image_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_FreeSpaces_FreeZone::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_FreeSpaces::InitAsDefaultInstance() {
}
class Roadmarking_FreeSpaces::_Internal {
 public:
};

Roadmarking_FreeSpaces::Roadmarking_FreeSpaces(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  freezone_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.FreeSpaces)
}
Roadmarking_FreeSpaces::Roadmarking_FreeSpaces(const Roadmarking_FreeSpaces& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      freezone_(from.freezone_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dist_std_, &from.dist_std_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_std_) -
    reinterpret_cast<char*>(&dist_std_)) + sizeof(height_std_));
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.FreeSpaces)
}

void Roadmarking_FreeSpaces::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarking_FreeSpaces_roadmarking_5fhz_2eproto.base);
  ::memset(&dist_std_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_std_) -
      reinterpret_cast<char*>(&dist_std_)) + sizeof(height_std_));
}

Roadmarking_FreeSpaces::~Roadmarking_FreeSpaces() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.FreeSpaces)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_FreeSpaces::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Roadmarking_FreeSpaces::ArenaDtor(void* object) {
  Roadmarking_FreeSpaces* _this = reinterpret_cast< Roadmarking_FreeSpaces* >(object);
  (void)_this;
}
void Roadmarking_FreeSpaces::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_FreeSpaces::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_FreeSpaces& Roadmarking_FreeSpaces::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_FreeSpaces_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_FreeSpaces::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.FreeSpaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  freezone_.Clear();
  ::memset(&dist_std_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_std_) -
      reinterpret_cast<char*>(&dist_std_)) + sizeof(height_std_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_FreeSpaces::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.hz.Roadmarking.FreeSpaces.FreeZone freezone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_freezone(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // float dist_std = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          dist_std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angle_std = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          angle_std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height_std = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          height_std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_FreeSpaces::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.FreeSpaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.hz.Roadmarking.FreeSpaces.FreeZone freezone = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_freezone_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_freezone(i), target, stream);
  }

  // float dist_std = 2;
  if (!(this->dist_std() <= 0 && this->dist_std() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_dist_std(), target);
  }

  // float angle_std = 3;
  if (!(this->angle_std() <= 0 && this->angle_std() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_angle_std(), target);
  }

  // float height_std = 4;
  if (!(this->height_std() <= 0 && this->height_std() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_height_std(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.FreeSpaces)
  return target;
}

size_t Roadmarking_FreeSpaces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.FreeSpaces)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.hz.Roadmarking.FreeSpaces.FreeZone freezone = 1;
  total_size += 1UL * this->_internal_freezone_size();
  for (const auto& msg : this->freezone_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float dist_std = 2;
  if (!(this->dist_std() <= 0 && this->dist_std() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle_std = 3;
  if (!(this->angle_std() <= 0 && this->angle_std() >= 0)) {
    total_size += 1 + 4;
  }

  // float height_std = 4;
  if (!(this->height_std() <= 0 && this->height_std() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_FreeSpaces::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.FreeSpaces)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_FreeSpaces* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_FreeSpaces>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.FreeSpaces)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.FreeSpaces)
    MergeFrom(*source);
  }
}

void Roadmarking_FreeSpaces::MergeFrom(const Roadmarking_FreeSpaces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.FreeSpaces)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  freezone_.MergeFrom(from.freezone_);
  if (!(from.dist_std() <= 0 && from.dist_std() >= 0)) {
    _internal_set_dist_std(from._internal_dist_std());
  }
  if (!(from.angle_std() <= 0 && from.angle_std() >= 0)) {
    _internal_set_angle_std(from._internal_angle_std());
  }
  if (!(from.height_std() <= 0 && from.height_std() >= 0)) {
    _internal_set_height_std(from._internal_height_std());
  }
}

void Roadmarking_FreeSpaces::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.FreeSpaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_FreeSpaces::CopyFrom(const Roadmarking_FreeSpaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.FreeSpaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_FreeSpaces::IsInitialized() const {
  return true;
}

void Roadmarking_FreeSpaces::InternalSwap(Roadmarking_FreeSpaces* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  freezone_.InternalSwap(&other->freezone_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roadmarking_FreeSpaces, height_std_)
      + sizeof(Roadmarking_FreeSpaces::height_std_)
      - PROTOBUF_FIELD_OFFSET(Roadmarking_FreeSpaces, dist_std_)>(
          reinterpret_cast<char*>(&dist_std_),
          reinterpret_cast<char*>(&other->dist_std_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_FreeSpaces::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_RoadEdge::InitAsDefaultInstance() {
  ::perception::hz::_Roadmarking_RoadEdge_default_instance_._instance.get_mutable()->curve_vehicle_coord_ = const_cast< ::perception::hz::Roadmarking_CurveCoeff*>(
      ::perception::hz::Roadmarking_CurveCoeff::internal_default_instance());
  ::perception::hz::_Roadmarking_RoadEdge_default_instance_._instance.get_mutable()->curve_image_coord_ = const_cast< ::perception::hz::Roadmarking_CurveCoeff*>(
      ::perception::hz::Roadmarking_CurveCoeff::internal_default_instance());
  ::perception::hz::_Roadmarking_RoadEdge_default_instance_._instance.get_mutable()->points_vehicle_coord_ = const_cast< ::perception::common::Point3fList*>(
      ::perception::common::Point3fList::internal_default_instance());
  ::perception::hz::_Roadmarking_RoadEdge_default_instance_._instance.get_mutable()->points_image_coord_ = const_cast< ::perception::common::Point2fList*>(
      ::perception::common::Point2fList::internal_default_instance());
  ::perception::hz::_Roadmarking_RoadEdge_default_instance_._instance.get_mutable()->fit_points_image_coord_ = const_cast< ::perception::common::Point2fList*>(
      ::perception::common::Point2fList::internal_default_instance());
  ::perception::hz::_Roadmarking_RoadEdge_default_instance_._instance.get_mutable()->fit_points_vehicle_coord_ = const_cast< ::perception::common::Point3fList*>(
      ::perception::common::Point3fList::internal_default_instance());
}
class Roadmarking_RoadEdge::_Internal {
 public:
  static const ::perception::hz::Roadmarking_CurveCoeff& curve_vehicle_coord(const Roadmarking_RoadEdge* msg);
  static const ::perception::hz::Roadmarking_CurveCoeff& curve_image_coord(const Roadmarking_RoadEdge* msg);
  static const ::perception::common::Point3fList& points_vehicle_coord(const Roadmarking_RoadEdge* msg);
  static const ::perception::common::Point2fList& points_image_coord(const Roadmarking_RoadEdge* msg);
  static const ::perception::common::Point2fList& fit_points_image_coord(const Roadmarking_RoadEdge* msg);
  static const ::perception::common::Point3fList& fit_points_vehicle_coord(const Roadmarking_RoadEdge* msg);
};

const ::perception::hz::Roadmarking_CurveCoeff&
Roadmarking_RoadEdge::_Internal::curve_vehicle_coord(const Roadmarking_RoadEdge* msg) {
  return *msg->curve_vehicle_coord_;
}
const ::perception::hz::Roadmarking_CurveCoeff&
Roadmarking_RoadEdge::_Internal::curve_image_coord(const Roadmarking_RoadEdge* msg) {
  return *msg->curve_image_coord_;
}
const ::perception::common::Point3fList&
Roadmarking_RoadEdge::_Internal::points_vehicle_coord(const Roadmarking_RoadEdge* msg) {
  return *msg->points_vehicle_coord_;
}
const ::perception::common::Point2fList&
Roadmarking_RoadEdge::_Internal::points_image_coord(const Roadmarking_RoadEdge* msg) {
  return *msg->points_image_coord_;
}
const ::perception::common::Point2fList&
Roadmarking_RoadEdge::_Internal::fit_points_image_coord(const Roadmarking_RoadEdge* msg) {
  return *msg->fit_points_image_coord_;
}
const ::perception::common::Point3fList&
Roadmarking_RoadEdge::_Internal::fit_points_vehicle_coord(const Roadmarking_RoadEdge* msg) {
  return *msg->fit_points_vehicle_coord_;
}
void Roadmarking_RoadEdge::clear_points_vehicle_coord() {
  if (GetArena() == nullptr && points_vehicle_coord_ != nullptr) {
    delete points_vehicle_coord_;
  }
  points_vehicle_coord_ = nullptr;
}
void Roadmarking_RoadEdge::clear_points_image_coord() {
  if (GetArena() == nullptr && points_image_coord_ != nullptr) {
    delete points_image_coord_;
  }
  points_image_coord_ = nullptr;
}
void Roadmarking_RoadEdge::clear_fit_points_image_coord() {
  if (GetArena() == nullptr && fit_points_image_coord_ != nullptr) {
    delete fit_points_image_coord_;
  }
  fit_points_image_coord_ = nullptr;
}
void Roadmarking_RoadEdge::clear_fit_points_vehicle_coord() {
  if (GetArena() == nullptr && fit_points_vehicle_coord_ != nullptr) {
    delete fit_points_vehicle_coord_;
  }
  fit_points_vehicle_coord_ = nullptr;
}
Roadmarking_RoadEdge::Roadmarking_RoadEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  camera_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.RoadEdge)
}
Roadmarking_RoadEdge::Roadmarking_RoadEdge(const Roadmarking_RoadEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      camera_id_(from.camera_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_curve_vehicle_coord()) {
    curve_vehicle_coord_ = new ::perception::hz::Roadmarking_CurveCoeff(*from.curve_vehicle_coord_);
  } else {
    curve_vehicle_coord_ = nullptr;
  }
  if (from._internal_has_curve_image_coord()) {
    curve_image_coord_ = new ::perception::hz::Roadmarking_CurveCoeff(*from.curve_image_coord_);
  } else {
    curve_image_coord_ = nullptr;
  }
  if (from._internal_has_points_vehicle_coord()) {
    points_vehicle_coord_ = new ::perception::common::Point3fList(*from.points_vehicle_coord_);
  } else {
    points_vehicle_coord_ = nullptr;
  }
  if (from._internal_has_points_image_coord()) {
    points_image_coord_ = new ::perception::common::Point2fList(*from.points_image_coord_);
  } else {
    points_image_coord_ = nullptr;
  }
  if (from._internal_has_fit_points_image_coord()) {
    fit_points_image_coord_ = new ::perception::common::Point2fList(*from.fit_points_image_coord_);
  } else {
    fit_points_image_coord_ = nullptr;
  }
  if (from._internal_has_fit_points_vehicle_coord()) {
    fit_points_vehicle_coord_ = new ::perception::common::Point3fList(*from.fit_points_vehicle_coord_);
  } else {
    fit_points_vehicle_coord_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&id_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.RoadEdge)
}

void Roadmarking_RoadEdge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarking_RoadEdge_roadmarking_5fhz_2eproto.base);
  ::memset(&curve_vehicle_coord_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&curve_vehicle_coord_)) + sizeof(confidence_));
}

Roadmarking_RoadEdge::~Roadmarking_RoadEdge() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.RoadEdge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_RoadEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete curve_vehicle_coord_;
  if (this != internal_default_instance()) delete curve_image_coord_;
  if (this != internal_default_instance()) delete points_vehicle_coord_;
  if (this != internal_default_instance()) delete points_image_coord_;
  if (this != internal_default_instance()) delete fit_points_image_coord_;
  if (this != internal_default_instance()) delete fit_points_vehicle_coord_;
}

void Roadmarking_RoadEdge::ArenaDtor(void* object) {
  Roadmarking_RoadEdge* _this = reinterpret_cast< Roadmarking_RoadEdge* >(object);
  (void)_this;
}
void Roadmarking_RoadEdge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_RoadEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_RoadEdge& Roadmarking_RoadEdge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_RoadEdge_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_RoadEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.RoadEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_id_.Clear();
  if (GetArena() == nullptr && curve_vehicle_coord_ != nullptr) {
    delete curve_vehicle_coord_;
  }
  curve_vehicle_coord_ = nullptr;
  if (GetArena() == nullptr && curve_image_coord_ != nullptr) {
    delete curve_image_coord_;
  }
  curve_image_coord_ = nullptr;
  if (GetArena() == nullptr && points_vehicle_coord_ != nullptr) {
    delete points_vehicle_coord_;
  }
  points_vehicle_coord_ = nullptr;
  if (GetArena() == nullptr && points_image_coord_ != nullptr) {
    delete points_image_coord_;
  }
  points_image_coord_ = nullptr;
  if (GetArena() == nullptr && fit_points_image_coord_ != nullptr) {
    delete fit_points_image_coord_;
  }
  fit_points_image_coord_ = nullptr;
  if (GetArena() == nullptr && fit_points_vehicle_coord_ != nullptr) {
    delete fit_points_vehicle_coord_;
  }
  fit_points_vehicle_coord_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&id_)) + sizeof(confidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_RoadEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 age = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.CurveCoeff curve_vehicle_coord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve_vehicle_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.CurveCoeff curve_image_coord = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve_image_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3fList points_vehicle_coord = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_points_vehicle_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2fList points_image_coord = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_points_image_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2fList fit_points_image_coord = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_fit_points_image_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3fList fit_points_vehicle_coord = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fit_points_vehicle_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.LineState state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::perception::hz::Roadmarking_LineState>(val));
        } else goto handle_unusual;
        continue;
      // int32 side = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 camera_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_camera_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_camera_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_RoadEdge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.RoadEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 age = 2;
  if (this->age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_age(), target);
  }

  // .perception.hz.Roadmarking.CurveCoeff curve_vehicle_coord = 3;
  if (this->has_curve_vehicle_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::curve_vehicle_coord(this), target, stream);
  }

  // .perception.hz.Roadmarking.CurveCoeff curve_image_coord = 4;
  if (this->has_curve_image_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::curve_image_coord(this), target, stream);
  }

  // .perception.common.Point3fList points_vehicle_coord = 5;
  if (this->has_points_vehicle_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::points_vehicle_coord(this), target, stream);
  }

  // .perception.common.Point2fList points_image_coord = 6;
  if (this->has_points_image_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::points_image_coord(this), target, stream);
  }

  // .perception.common.Point2fList fit_points_image_coord = 7;
  if (this->has_fit_points_image_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::fit_points_image_coord(this), target, stream);
  }

  // .perception.common.Point3fList fit_points_vehicle_coord = 8;
  if (this->has_fit_points_vehicle_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::fit_points_vehicle_coord(this), target, stream);
  }

  // .perception.hz.Roadmarking.LineState state = 9;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_state(), target);
  }

  // int32 side = 10;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_side(), target);
  }

  // float confidence = 11;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_confidence(), target);
  }

  // repeated uint32 camera_id = 12;
  {
    int byte_size = _camera_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_camera_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.RoadEdge)
  return target;
}

size_t Roadmarking_RoadEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.RoadEdge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 camera_id = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->camera_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _camera_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .perception.hz.Roadmarking.CurveCoeff curve_vehicle_coord = 3;
  if (this->has_curve_vehicle_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *curve_vehicle_coord_);
  }

  // .perception.hz.Roadmarking.CurveCoeff curve_image_coord = 4;
  if (this->has_curve_image_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *curve_image_coord_);
  }

  // .perception.common.Point3fList points_vehicle_coord = 5;
  if (this->has_points_vehicle_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *points_vehicle_coord_);
  }

  // .perception.common.Point2fList points_image_coord = 6;
  if (this->has_points_image_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *points_image_coord_);
  }

  // .perception.common.Point2fList fit_points_image_coord = 7;
  if (this->has_fit_points_image_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fit_points_image_coord_);
  }

  // .perception.common.Point3fList fit_points_vehicle_coord = 8;
  if (this->has_fit_points_vehicle_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fit_points_vehicle_coord_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 age = 2;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_age());
  }

  // .perception.hz.Roadmarking.LineState state = 9;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 side = 10;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_side());
  }

  // float confidence = 11;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_RoadEdge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.RoadEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_RoadEdge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_RoadEdge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.RoadEdge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.RoadEdge)
    MergeFrom(*source);
  }
}

void Roadmarking_RoadEdge::MergeFrom(const Roadmarking_RoadEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.RoadEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camera_id_.MergeFrom(from.camera_id_);
  if (from.has_curve_vehicle_coord()) {
    _internal_mutable_curve_vehicle_coord()->::perception::hz::Roadmarking_CurveCoeff::MergeFrom(from._internal_curve_vehicle_coord());
  }
  if (from.has_curve_image_coord()) {
    _internal_mutable_curve_image_coord()->::perception::hz::Roadmarking_CurveCoeff::MergeFrom(from._internal_curve_image_coord());
  }
  if (from.has_points_vehicle_coord()) {
    _internal_mutable_points_vehicle_coord()->::perception::common::Point3fList::MergeFrom(from._internal_points_vehicle_coord());
  }
  if (from.has_points_image_coord()) {
    _internal_mutable_points_image_coord()->::perception::common::Point2fList::MergeFrom(from._internal_points_image_coord());
  }
  if (from.has_fit_points_image_coord()) {
    _internal_mutable_fit_points_image_coord()->::perception::common::Point2fList::MergeFrom(from._internal_fit_points_image_coord());
  }
  if (from.has_fit_points_vehicle_coord()) {
    _internal_mutable_fit_points_vehicle_coord()->::perception::common::Point3fList::MergeFrom(from._internal_fit_points_vehicle_coord());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.age() != 0) {
    _internal_set_age(from._internal_age());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void Roadmarking_RoadEdge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.RoadEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_RoadEdge::CopyFrom(const Roadmarking_RoadEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.RoadEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_RoadEdge::IsInitialized() const {
  return true;
}

void Roadmarking_RoadEdge::InternalSwap(Roadmarking_RoadEdge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  camera_id_.InternalSwap(&other->camera_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roadmarking_RoadEdge, confidence_)
      + sizeof(Roadmarking_RoadEdge::confidence_)
      - PROTOBUF_FIELD_OFFSET(Roadmarking_RoadEdge, curve_vehicle_coord_)>(
          reinterpret_cast<char*>(&curve_vehicle_coord_),
          reinterpret_cast<char*>(&other->curve_vehicle_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_RoadEdge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_RoadEdgeList::InitAsDefaultInstance() {
}
class Roadmarking_RoadEdgeList::_Internal {
 public:
};

Roadmarking_RoadEdgeList::Roadmarking_RoadEdgeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  road_edges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.RoadEdgeList)
}
Roadmarking_RoadEdgeList::Roadmarking_RoadEdgeList(const Roadmarking_RoadEdgeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      road_edges_(from.road_edges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.RoadEdgeList)
}

void Roadmarking_RoadEdgeList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarking_RoadEdgeList_roadmarking_5fhz_2eproto.base);
}

Roadmarking_RoadEdgeList::~Roadmarking_RoadEdgeList() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.RoadEdgeList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_RoadEdgeList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Roadmarking_RoadEdgeList::ArenaDtor(void* object) {
  Roadmarking_RoadEdgeList* _this = reinterpret_cast< Roadmarking_RoadEdgeList* >(object);
  (void)_this;
}
void Roadmarking_RoadEdgeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_RoadEdgeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_RoadEdgeList& Roadmarking_RoadEdgeList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_RoadEdgeList_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_RoadEdgeList::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.RoadEdgeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_edges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_RoadEdgeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.hz.Roadmarking.RoadEdge road_edges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_RoadEdgeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.RoadEdgeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.hz.Roadmarking.RoadEdge road_edges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_road_edges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.RoadEdgeList)
  return target;
}

size_t Roadmarking_RoadEdgeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.RoadEdgeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.hz.Roadmarking.RoadEdge road_edges = 1;
  total_size += 1UL * this->_internal_road_edges_size();
  for (const auto& msg : this->road_edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_RoadEdgeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.RoadEdgeList)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_RoadEdgeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_RoadEdgeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.RoadEdgeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.RoadEdgeList)
    MergeFrom(*source);
  }
}

void Roadmarking_RoadEdgeList::MergeFrom(const Roadmarking_RoadEdgeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.RoadEdgeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_edges_.MergeFrom(from.road_edges_);
}

void Roadmarking_RoadEdgeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.RoadEdgeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_RoadEdgeList::CopyFrom(const Roadmarking_RoadEdgeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.RoadEdgeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_RoadEdgeList::IsInitialized() const {
  return true;
}

void Roadmarking_RoadEdgeList::InternalSwap(Roadmarking_RoadEdgeList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  road_edges_.InternalSwap(&other->road_edges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_RoadEdgeList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_Roadmarks_Roadmark::InitAsDefaultInstance() {
  ::perception::hz::_Roadmarking_Roadmarks_Roadmark_default_instance_._instance.get_mutable()->corner_pt_image_coord_ = const_cast< ::perception::common::Point2fList*>(
      ::perception::common::Point2fList::internal_default_instance());
  ::perception::hz::_Roadmarking_Roadmarks_Roadmark_default_instance_._instance.get_mutable()->corner_pt_vehicle_coord_ = const_cast< ::perception::common::Point3fList*>(
      ::perception::common::Point3fList::internal_default_instance());
  ::perception::hz::_Roadmarking_Roadmarks_Roadmark_default_instance_._instance.get_mutable()->centroid_vehicle_coord_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
  ::perception::hz::_Roadmarking_Roadmarks_Roadmark_default_instance_._instance.get_mutable()->centroid_image_coord_ = const_cast< ::perception::common::Point2f*>(
      ::perception::common::Point2f::internal_default_instance());
}
class Roadmarking_Roadmarks_Roadmark::_Internal {
 public:
  static const ::perception::common::Point2fList& corner_pt_image_coord(const Roadmarking_Roadmarks_Roadmark* msg);
  static const ::perception::common::Point3fList& corner_pt_vehicle_coord(const Roadmarking_Roadmarks_Roadmark* msg);
  static const ::perception::common::Point3f& centroid_vehicle_coord(const Roadmarking_Roadmarks_Roadmark* msg);
  static const ::perception::common::Point2f& centroid_image_coord(const Roadmarking_Roadmarks_Roadmark* msg);
};

const ::perception::common::Point2fList&
Roadmarking_Roadmarks_Roadmark::_Internal::corner_pt_image_coord(const Roadmarking_Roadmarks_Roadmark* msg) {
  return *msg->corner_pt_image_coord_;
}
const ::perception::common::Point3fList&
Roadmarking_Roadmarks_Roadmark::_Internal::corner_pt_vehicle_coord(const Roadmarking_Roadmarks_Roadmark* msg) {
  return *msg->corner_pt_vehicle_coord_;
}
const ::perception::common::Point3f&
Roadmarking_Roadmarks_Roadmark::_Internal::centroid_vehicle_coord(const Roadmarking_Roadmarks_Roadmark* msg) {
  return *msg->centroid_vehicle_coord_;
}
const ::perception::common::Point2f&
Roadmarking_Roadmarks_Roadmark::_Internal::centroid_image_coord(const Roadmarking_Roadmarks_Roadmark* msg) {
  return *msg->centroid_image_coord_;
}
void Roadmarking_Roadmarks_Roadmark::clear_corner_pt_image_coord() {
  if (GetArena() == nullptr && corner_pt_image_coord_ != nullptr) {
    delete corner_pt_image_coord_;
  }
  corner_pt_image_coord_ = nullptr;
}
void Roadmarking_Roadmarks_Roadmark::clear_corner_pt_vehicle_coord() {
  if (GetArena() == nullptr && corner_pt_vehicle_coord_ != nullptr) {
    delete corner_pt_vehicle_coord_;
  }
  corner_pt_vehicle_coord_ = nullptr;
}
void Roadmarking_Roadmarks_Roadmark::clear_centroid_vehicle_coord() {
  if (GetArena() == nullptr && centroid_vehicle_coord_ != nullptr) {
    delete centroid_vehicle_coord_;
  }
  centroid_vehicle_coord_ = nullptr;
}
void Roadmarking_Roadmarks_Roadmark::clear_centroid_image_coord() {
  if (GetArena() == nullptr && centroid_image_coord_ != nullptr) {
    delete centroid_image_coord_;
  }
  centroid_image_coord_ = nullptr;
}
Roadmarking_Roadmarks_Roadmark::Roadmarking_Roadmarks_Roadmark(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.Roadmarks.Roadmark)
}
Roadmarking_Roadmarks_Roadmark::Roadmarking_Roadmarks_Roadmark(const Roadmarking_Roadmarks_Roadmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_corner_pt_image_coord()) {
    corner_pt_image_coord_ = new ::perception::common::Point2fList(*from.corner_pt_image_coord_);
  } else {
    corner_pt_image_coord_ = nullptr;
  }
  if (from._internal_has_corner_pt_vehicle_coord()) {
    corner_pt_vehicle_coord_ = new ::perception::common::Point3fList(*from.corner_pt_vehicle_coord_);
  } else {
    corner_pt_vehicle_coord_ = nullptr;
  }
  if (from._internal_has_centroid_vehicle_coord()) {
    centroid_vehicle_coord_ = new ::perception::common::Point3f(*from.centroid_vehicle_coord_);
  } else {
    centroid_vehicle_coord_ = nullptr;
  }
  if (from._internal_has_centroid_image_coord()) {
    centroid_image_coord_ = new ::perception::common::Point2f(*from.centroid_image_coord_);
  } else {
    centroid_image_coord_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(camera_id_));
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.Roadmarks.Roadmark)
}

void Roadmarking_Roadmarks_Roadmark::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarking_Roadmarks_Roadmark_roadmarking_5fhz_2eproto.base);
  ::memset(&corner_pt_image_coord_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&corner_pt_image_coord_)) + sizeof(camera_id_));
}

Roadmarking_Roadmarks_Roadmark::~Roadmarking_Roadmarks_Roadmark() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.Roadmarks.Roadmark)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_Roadmarks_Roadmark::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete corner_pt_image_coord_;
  if (this != internal_default_instance()) delete corner_pt_vehicle_coord_;
  if (this != internal_default_instance()) delete centroid_vehicle_coord_;
  if (this != internal_default_instance()) delete centroid_image_coord_;
}

void Roadmarking_Roadmarks_Roadmark::ArenaDtor(void* object) {
  Roadmarking_Roadmarks_Roadmark* _this = reinterpret_cast< Roadmarking_Roadmarks_Roadmark* >(object);
  (void)_this;
}
void Roadmarking_Roadmarks_Roadmark::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_Roadmarks_Roadmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_Roadmarks_Roadmark& Roadmarking_Roadmarks_Roadmark::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_Roadmarks_Roadmark_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_Roadmarks_Roadmark::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.Roadmarks.Roadmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && corner_pt_image_coord_ != nullptr) {
    delete corner_pt_image_coord_;
  }
  corner_pt_image_coord_ = nullptr;
  if (GetArena() == nullptr && corner_pt_vehicle_coord_ != nullptr) {
    delete corner_pt_vehicle_coord_;
  }
  corner_pt_vehicle_coord_ = nullptr;
  if (GetArena() == nullptr && centroid_vehicle_coord_ != nullptr) {
    delete centroid_vehicle_coord_;
  }
  centroid_vehicle_coord_ = nullptr;
  if (GetArena() == nullptr && centroid_image_coord_ != nullptr) {
    delete centroid_image_coord_;
  }
  centroid_image_coord_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(camera_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_Roadmarks_Roadmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.Roadmarks.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::perception::hz::Roadmarking_Roadmarks_Type>(val));
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2fList corner_pt_image_coord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_corner_pt_image_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3fList corner_pt_vehicle_coord = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_corner_pt_vehicle_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f centroid_vehicle_coord = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_centroid_vehicle_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 lane_idx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          lane_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.Roadmarks.Form form = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_form(static_cast<::perception::hz::Roadmarking_Roadmarks_Form>(val));
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.Roadmarks.State state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::perception::hz::Roadmarking_Roadmarks_State>(val));
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2f centroid_image_coord = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_centroid_image_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 camera_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_Roadmarks_Roadmark::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.Roadmarks.Roadmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .perception.hz.Roadmarking.Roadmarks.Type type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .perception.common.Point2fList corner_pt_image_coord = 3;
  if (this->has_corner_pt_image_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::corner_pt_image_coord(this), target, stream);
  }

  // .perception.common.Point3fList corner_pt_vehicle_coord = 4;
  if (this->has_corner_pt_vehicle_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::corner_pt_vehicle_coord(this), target, stream);
  }

  // .perception.common.Point3f centroid_vehicle_coord = 5;
  if (this->has_centroid_vehicle_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::centroid_vehicle_coord(this), target, stream);
  }

  // float confidence = 6;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_confidence(), target);
  }

  // uint32 lane_idx = 7;
  if (this->lane_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lane_idx(), target);
  }

  // .perception.hz.Roadmarking.Roadmarks.Form form = 8;
  if (this->form() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_form(), target);
  }

  // .perception.hz.Roadmarking.Roadmarks.State state = 9;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_state(), target);
  }

  // .perception.common.Point2f centroid_image_coord = 10;
  if (this->has_centroid_image_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::centroid_image_coord(this), target, stream);
  }

  // float width = 11;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_width(), target);
  }

  // uint32 camera_id = 12;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_camera_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.Roadmarks.Roadmark)
  return target;
}

size_t Roadmarking_Roadmarks_Roadmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.Roadmarks.Roadmark)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Point2fList corner_pt_image_coord = 3;
  if (this->has_corner_pt_image_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *corner_pt_image_coord_);
  }

  // .perception.common.Point3fList corner_pt_vehicle_coord = 4;
  if (this->has_corner_pt_vehicle_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *corner_pt_vehicle_coord_);
  }

  // .perception.common.Point3f centroid_vehicle_coord = 5;
  if (this->has_centroid_vehicle_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *centroid_vehicle_coord_);
  }

  // .perception.common.Point2f centroid_image_coord = 10;
  if (this->has_centroid_image_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *centroid_image_coord_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .perception.hz.Roadmarking.Roadmarks.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float confidence = 6;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 lane_idx = 7;
  if (this->lane_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lane_idx());
  }

  // .perception.hz.Roadmarking.Roadmarks.Form form = 8;
  if (this->form() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_form());
  }

  // .perception.hz.Roadmarking.Roadmarks.State state = 9;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // float width = 11;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 camera_id = 12;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_camera_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_Roadmarks_Roadmark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.Roadmarks.Roadmark)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_Roadmarks_Roadmark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_Roadmarks_Roadmark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.Roadmarks.Roadmark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.Roadmarks.Roadmark)
    MergeFrom(*source);
  }
}

void Roadmarking_Roadmarks_Roadmark::MergeFrom(const Roadmarking_Roadmarks_Roadmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.Roadmarks.Roadmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_corner_pt_image_coord()) {
    _internal_mutable_corner_pt_image_coord()->::perception::common::Point2fList::MergeFrom(from._internal_corner_pt_image_coord());
  }
  if (from.has_corner_pt_vehicle_coord()) {
    _internal_mutable_corner_pt_vehicle_coord()->::perception::common::Point3fList::MergeFrom(from._internal_corner_pt_vehicle_coord());
  }
  if (from.has_centroid_vehicle_coord()) {
    _internal_mutable_centroid_vehicle_coord()->::perception::common::Point3f::MergeFrom(from._internal_centroid_vehicle_coord());
  }
  if (from.has_centroid_image_coord()) {
    _internal_mutable_centroid_image_coord()->::perception::common::Point2f::MergeFrom(from._internal_centroid_image_coord());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from.lane_idx() != 0) {
    _internal_set_lane_idx(from._internal_lane_idx());
  }
  if (from.form() != 0) {
    _internal_set_form(from._internal_form());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
}

void Roadmarking_Roadmarks_Roadmark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.Roadmarks.Roadmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_Roadmarks_Roadmark::CopyFrom(const Roadmarking_Roadmarks_Roadmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.Roadmarks.Roadmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_Roadmarks_Roadmark::IsInitialized() const {
  return true;
}

void Roadmarking_Roadmarks_Roadmark::InternalSwap(Roadmarking_Roadmarks_Roadmark* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roadmarking_Roadmarks_Roadmark, camera_id_)
      + sizeof(Roadmarking_Roadmarks_Roadmark::camera_id_)
      - PROTOBUF_FIELD_OFFSET(Roadmarking_Roadmarks_Roadmark, corner_pt_image_coord_)>(
          reinterpret_cast<char*>(&corner_pt_image_coord_),
          reinterpret_cast<char*>(&other->corner_pt_image_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_Roadmarks_Roadmark::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_Roadmarks::InitAsDefaultInstance() {
}
class Roadmarking_Roadmarks::_Internal {
 public:
};

Roadmarking_Roadmarks::Roadmarking_Roadmarks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  roadmarks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.Roadmarks)
}
Roadmarking_Roadmarks::Roadmarking_Roadmarks(const Roadmarking_Roadmarks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roadmarks_(from.roadmarks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.Roadmarks)
}

void Roadmarking_Roadmarks::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarking_Roadmarks_roadmarking_5fhz_2eproto.base);
}

Roadmarking_Roadmarks::~Roadmarking_Roadmarks() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.Roadmarks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_Roadmarks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Roadmarking_Roadmarks::ArenaDtor(void* object) {
  Roadmarking_Roadmarks* _this = reinterpret_cast< Roadmarking_Roadmarks* >(object);
  (void)_this;
}
void Roadmarking_Roadmarks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_Roadmarks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_Roadmarks& Roadmarking_Roadmarks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_Roadmarks_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_Roadmarks::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.Roadmarks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roadmarks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_Roadmarks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.hz.Roadmarking.Roadmarks.Roadmark roadmarks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roadmarks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_Roadmarks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.Roadmarks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.hz.Roadmarking.Roadmarks.Roadmark roadmarks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roadmarks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_roadmarks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.Roadmarks)
  return target;
}

size_t Roadmarking_Roadmarks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.Roadmarks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.hz.Roadmarking.Roadmarks.Roadmark roadmarks = 1;
  total_size += 1UL * this->_internal_roadmarks_size();
  for (const auto& msg : this->roadmarks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_Roadmarks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.Roadmarks)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_Roadmarks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_Roadmarks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.Roadmarks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.Roadmarks)
    MergeFrom(*source);
  }
}

void Roadmarking_Roadmarks::MergeFrom(const Roadmarking_Roadmarks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.Roadmarks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roadmarks_.MergeFrom(from.roadmarks_);
}

void Roadmarking_Roadmarks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.Roadmarks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_Roadmarks::CopyFrom(const Roadmarking_Roadmarks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.Roadmarks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_Roadmarks::IsInitialized() const {
  return true;
}

void Roadmarking_Roadmarks::InternalSwap(Roadmarking_Roadmarks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roadmarks_.InternalSwap(&other->roadmarks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_Roadmarks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_LDWInfo::InitAsDefaultInstance() {
}
class Roadmarking_LDWInfo::_Internal {
 public:
};

Roadmarking_LDWInfo::Roadmarking_LDWInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.LDWInfo)
}
Roadmarking_LDWInfo::Roadmarking_LDWInfo(const Roadmarking_LDWInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ldw_state_, &from.ldw_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&ldw_level_) -
    reinterpret_cast<char*>(&ldw_state_)) + sizeof(ldw_level_));
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.LDWInfo)
}

void Roadmarking_LDWInfo::SharedCtor() {
  ::memset(&ldw_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ldw_level_) -
      reinterpret_cast<char*>(&ldw_state_)) + sizeof(ldw_level_));
}

Roadmarking_LDWInfo::~Roadmarking_LDWInfo() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.LDWInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_LDWInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Roadmarking_LDWInfo::ArenaDtor(void* object) {
  Roadmarking_LDWInfo* _this = reinterpret_cast< Roadmarking_LDWInfo* >(object);
  (void)_this;
}
void Roadmarking_LDWInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_LDWInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_LDWInfo& Roadmarking_LDWInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_LDWInfo_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_LDWInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.LDWInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ldw_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ldw_level_) -
      reinterpret_cast<char*>(&ldw_state_)) + sizeof(ldw_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_LDWInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.hz.Roadmarking.LDWInfo.LdwState ldw_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ldw_state(static_cast<::perception::hz::Roadmarking_LDWInfo_LdwState>(val));
        } else goto handle_unusual;
        continue;
      // float left_wheel_dist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          left_wheel_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_wheel_dist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          right_wheel_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float warning_dist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          warning_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float earliest_dist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          earliest_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latest_dist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          latest_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool ldw_state_changed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ldw_state_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.LDWInfo.LdwWorkState ldw_work_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ldw_work_state(static_cast<::perception::hz::Roadmarking_LDWInfo_LdwWorkState>(val));
        } else goto handle_unusual;
        continue;
      // float turn_radius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          turn_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 nearest_line_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          nearest_line_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ldw_level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ldw_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_LDWInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.LDWInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.hz.Roadmarking.LDWInfo.LdwState ldw_state = 1;
  if (this->ldw_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ldw_state(), target);
  }

  // float left_wheel_dist = 2;
  if (!(this->left_wheel_dist() <= 0 && this->left_wheel_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_left_wheel_dist(), target);
  }

  // float right_wheel_dist = 3;
  if (!(this->right_wheel_dist() <= 0 && this->right_wheel_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_right_wheel_dist(), target);
  }

  // float warning_dist = 4;
  if (!(this->warning_dist() <= 0 && this->warning_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_warning_dist(), target);
  }

  // float earliest_dist = 5;
  if (!(this->earliest_dist() <= 0 && this->earliest_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_earliest_dist(), target);
  }

  // float latest_dist = 6;
  if (!(this->latest_dist() <= 0 && this->latest_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_latest_dist(), target);
  }

  // bool ldw_state_changed = 7;
  if (this->ldw_state_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_ldw_state_changed(), target);
  }

  // .perception.hz.Roadmarking.LDWInfo.LdwWorkState ldw_work_state = 8;
  if (this->ldw_work_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_ldw_work_state(), target);
  }

  // float turn_radius = 9;
  if (!(this->turn_radius() <= 0 && this->turn_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_turn_radius(), target);
  }

  // uint64 nearest_line_id = 10;
  if (this->nearest_line_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_nearest_line_id(), target);
  }

  // uint32 ldw_level = 11;
  if (this->ldw_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_ldw_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.LDWInfo)
  return target;
}

size_t Roadmarking_LDWInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.LDWInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.hz.Roadmarking.LDWInfo.LdwState ldw_state = 1;
  if (this->ldw_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ldw_state());
  }

  // float left_wheel_dist = 2;
  if (!(this->left_wheel_dist() <= 0 && this->left_wheel_dist() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_wheel_dist = 3;
  if (!(this->right_wheel_dist() <= 0 && this->right_wheel_dist() >= 0)) {
    total_size += 1 + 4;
  }

  // float warning_dist = 4;
  if (!(this->warning_dist() <= 0 && this->warning_dist() >= 0)) {
    total_size += 1 + 4;
  }

  // float earliest_dist = 5;
  if (!(this->earliest_dist() <= 0 && this->earliest_dist() >= 0)) {
    total_size += 1 + 4;
  }

  // float latest_dist = 6;
  if (!(this->latest_dist() <= 0 && this->latest_dist() >= 0)) {
    total_size += 1 + 4;
  }

  // bool ldw_state_changed = 7;
  if (this->ldw_state_changed() != 0) {
    total_size += 1 + 1;
  }

  // .perception.hz.Roadmarking.LDWInfo.LdwWorkState ldw_work_state = 8;
  if (this->ldw_work_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ldw_work_state());
  }

  // uint64 nearest_line_id = 10;
  if (this->nearest_line_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nearest_line_id());
  }

  // float turn_radius = 9;
  if (!(this->turn_radius() <= 0 && this->turn_radius() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 ldw_level = 11;
  if (this->ldw_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ldw_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_LDWInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.LDWInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_LDWInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_LDWInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.LDWInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.LDWInfo)
    MergeFrom(*source);
  }
}

void Roadmarking_LDWInfo::MergeFrom(const Roadmarking_LDWInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.LDWInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ldw_state() != 0) {
    _internal_set_ldw_state(from._internal_ldw_state());
  }
  if (!(from.left_wheel_dist() <= 0 && from.left_wheel_dist() >= 0)) {
    _internal_set_left_wheel_dist(from._internal_left_wheel_dist());
  }
  if (!(from.right_wheel_dist() <= 0 && from.right_wheel_dist() >= 0)) {
    _internal_set_right_wheel_dist(from._internal_right_wheel_dist());
  }
  if (!(from.warning_dist() <= 0 && from.warning_dist() >= 0)) {
    _internal_set_warning_dist(from._internal_warning_dist());
  }
  if (!(from.earliest_dist() <= 0 && from.earliest_dist() >= 0)) {
    _internal_set_earliest_dist(from._internal_earliest_dist());
  }
  if (!(from.latest_dist() <= 0 && from.latest_dist() >= 0)) {
    _internal_set_latest_dist(from._internal_latest_dist());
  }
  if (from.ldw_state_changed() != 0) {
    _internal_set_ldw_state_changed(from._internal_ldw_state_changed());
  }
  if (from.ldw_work_state() != 0) {
    _internal_set_ldw_work_state(from._internal_ldw_work_state());
  }
  if (from.nearest_line_id() != 0) {
    _internal_set_nearest_line_id(from._internal_nearest_line_id());
  }
  if (!(from.turn_radius() <= 0 && from.turn_radius() >= 0)) {
    _internal_set_turn_radius(from._internal_turn_radius());
  }
  if (from.ldw_level() != 0) {
    _internal_set_ldw_level(from._internal_ldw_level());
  }
}

void Roadmarking_LDWInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.LDWInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_LDWInfo::CopyFrom(const Roadmarking_LDWInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.LDWInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_LDWInfo::IsInitialized() const {
  return true;
}

void Roadmarking_LDWInfo::InternalSwap(Roadmarking_LDWInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roadmarking_LDWInfo, ldw_level_)
      + sizeof(Roadmarking_LDWInfo::ldw_level_)
      - PROTOBUF_FIELD_OFFSET(Roadmarking_LDWInfo, ldw_state_)>(
          reinterpret_cast<char*>(&ldw_state_),
          reinterpret_cast<char*>(&other->ldw_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_LDWInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_MotionEst::InitAsDefaultInstance() {
}
class Roadmarking_MotionEst::_Internal {
 public:
};

Roadmarking_MotionEst::Roadmarking_MotionEst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.MotionEst)
}
Roadmarking_MotionEst::Roadmarking_MotionEst(const Roadmarking_MotionEst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lateral_speed_, &from.lateral_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&lateral_speed_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.MotionEst)
}

void Roadmarking_MotionEst::SharedCtor() {
  ::memset(&lateral_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&lateral_speed_)) + sizeof(confidence_));
}

Roadmarking_MotionEst::~Roadmarking_MotionEst() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.MotionEst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_MotionEst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Roadmarking_MotionEst::ArenaDtor(void* object) {
  Roadmarking_MotionEst* _this = reinterpret_cast< Roadmarking_MotionEst* >(object);
  (void)_this;
}
void Roadmarking_MotionEst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_MotionEst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_MotionEst& Roadmarking_MotionEst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_MotionEst_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_MotionEst::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.MotionEst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lateral_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&lateral_speed_)) + sizeof(confidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_MotionEst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float lateral_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          lateral_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lateral_acc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lateral_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_MotionEst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.MotionEst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lateral_speed = 1;
  if (!(this->lateral_speed() <= 0 && this->lateral_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_lateral_speed(), target);
  }

  // float lateral_acc = 2;
  if (!(this->lateral_acc() <= 0 && this->lateral_acc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lateral_acc(), target);
  }

  // float confidence = 3;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.MotionEst)
  return target;
}

size_t Roadmarking_MotionEst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.MotionEst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float lateral_speed = 1;
  if (!(this->lateral_speed() <= 0 && this->lateral_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float lateral_acc = 2;
  if (!(this->lateral_acc() <= 0 && this->lateral_acc() >= 0)) {
    total_size += 1 + 4;
  }

  // float confidence = 3;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_MotionEst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.MotionEst)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_MotionEst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_MotionEst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.MotionEst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.MotionEst)
    MergeFrom(*source);
  }
}

void Roadmarking_MotionEst::MergeFrom(const Roadmarking_MotionEst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.MotionEst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lateral_speed() <= 0 && from.lateral_speed() >= 0)) {
    _internal_set_lateral_speed(from._internal_lateral_speed());
  }
  if (!(from.lateral_acc() <= 0 && from.lateral_acc() >= 0)) {
    _internal_set_lateral_acc(from._internal_lateral_acc());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void Roadmarking_MotionEst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.MotionEst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_MotionEst::CopyFrom(const Roadmarking_MotionEst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.MotionEst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_MotionEst::IsInitialized() const {
  return true;
}

void Roadmarking_MotionEst::InternalSwap(Roadmarking_MotionEst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roadmarking_MotionEst, confidence_)
      + sizeof(Roadmarking_MotionEst::confidence_)
      - PROTOBUF_FIELD_OFFSET(Roadmarking_MotionEst, lateral_speed_)>(
          reinterpret_cast<char*>(&lateral_speed_),
          reinterpret_cast<char*>(&other->lateral_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_MotionEst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_PoseEst::InitAsDefaultInstance() {
  ::perception::hz::_Roadmarking_PoseEst_default_instance_._instance.get_mutable()->vanish_pt_ = const_cast< ::perception::common::Point2f*>(
      ::perception::common::Point2f::internal_default_instance());
  ::perception::hz::_Roadmarking_PoseEst_default_instance_._instance.get_mutable()->vanish_cov_ = const_cast< ::perception::common::Point2f*>(
      ::perception::common::Point2f::internal_default_instance());
}
class Roadmarking_PoseEst::_Internal {
 public:
  static const ::perception::common::Point2f& vanish_pt(const Roadmarking_PoseEst* msg);
  static const ::perception::common::Point2f& vanish_cov(const Roadmarking_PoseEst* msg);
};

const ::perception::common::Point2f&
Roadmarking_PoseEst::_Internal::vanish_pt(const Roadmarking_PoseEst* msg) {
  return *msg->vanish_pt_;
}
const ::perception::common::Point2f&
Roadmarking_PoseEst::_Internal::vanish_cov(const Roadmarking_PoseEst* msg) {
  return *msg->vanish_cov_;
}
void Roadmarking_PoseEst::clear_vanish_pt() {
  if (GetArena() == nullptr && vanish_pt_ != nullptr) {
    delete vanish_pt_;
  }
  vanish_pt_ = nullptr;
}
void Roadmarking_PoseEst::clear_vanish_cov() {
  if (GetArena() == nullptr && vanish_cov_ != nullptr) {
    delete vanish_cov_;
  }
  vanish_cov_ = nullptr;
}
Roadmarking_PoseEst::Roadmarking_PoseEst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.PoseEst)
}
Roadmarking_PoseEst::Roadmarking_PoseEst(const Roadmarking_PoseEst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vanish_pt()) {
    vanish_pt_ = new ::perception::common::Point2f(*from.vanish_pt_);
  } else {
    vanish_pt_ = nullptr;
  }
  if (from._internal_has_vanish_cov()) {
    vanish_cov_ = new ::perception::common::Point2f(*from.vanish_cov_);
  } else {
    vanish_cov_ = nullptr;
  }
  ::memcpy(&pitch_est_, &from.pitch_est_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&pitch_est_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.PoseEst)
}

void Roadmarking_PoseEst::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarking_PoseEst_roadmarking_5fhz_2eproto.base);
  ::memset(&vanish_pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&vanish_pt_)) + sizeof(confidence_));
}

Roadmarking_PoseEst::~Roadmarking_PoseEst() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.PoseEst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_PoseEst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vanish_pt_;
  if (this != internal_default_instance()) delete vanish_cov_;
}

void Roadmarking_PoseEst::ArenaDtor(void* object) {
  Roadmarking_PoseEst* _this = reinterpret_cast< Roadmarking_PoseEst* >(object);
  (void)_this;
}
void Roadmarking_PoseEst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_PoseEst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_PoseEst& Roadmarking_PoseEst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_PoseEst_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_PoseEst::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.PoseEst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vanish_pt_ != nullptr) {
    delete vanish_pt_;
  }
  vanish_pt_ = nullptr;
  if (GetArena() == nullptr && vanish_cov_ != nullptr) {
    delete vanish_cov_;
  }
  vanish_cov_ = nullptr;
  ::memset(&pitch_est_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&pitch_est_)) + sizeof(confidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_PoseEst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float pitch_est = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          pitch_est_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2f vanish_pt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vanish_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2f vanish_cov = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vanish_cov(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 camera_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dpitch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          dpitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float confidence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_PoseEst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.PoseEst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch_est = 1;
  if (!(this->pitch_est() <= 0 && this->pitch_est() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pitch_est(), target);
  }

  // .perception.common.Point2f vanish_pt = 2;
  if (this->has_vanish_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vanish_pt(this), target, stream);
  }

  // .perception.common.Point2f vanish_cov = 3;
  if (this->has_vanish_cov()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vanish_cov(this), target, stream);
  }

  // bool is_valid = 4;
  if (this->is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_valid(), target);
  }

  // uint32 camera_id = 5;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_camera_id(), target);
  }

  // float dpitch = 6;
  if (!(this->dpitch() <= 0 && this->dpitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_dpitch(), target);
  }

  // float confidence = 7;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.PoseEst)
  return target;
}

size_t Roadmarking_PoseEst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.PoseEst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Point2f vanish_pt = 2;
  if (this->has_vanish_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vanish_pt_);
  }

  // .perception.common.Point2f vanish_cov = 3;
  if (this->has_vanish_cov()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vanish_cov_);
  }

  // float pitch_est = 1;
  if (!(this->pitch_est() <= 0 && this->pitch_est() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_valid = 4;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // uint32 camera_id = 5;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_camera_id());
  }

  // float dpitch = 6;
  if (!(this->dpitch() <= 0 && this->dpitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float confidence = 7;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_PoseEst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.PoseEst)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_PoseEst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_PoseEst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.PoseEst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.PoseEst)
    MergeFrom(*source);
  }
}

void Roadmarking_PoseEst::MergeFrom(const Roadmarking_PoseEst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.PoseEst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vanish_pt()) {
    _internal_mutable_vanish_pt()->::perception::common::Point2f::MergeFrom(from._internal_vanish_pt());
  }
  if (from.has_vanish_cov()) {
    _internal_mutable_vanish_cov()->::perception::common::Point2f::MergeFrom(from._internal_vanish_cov());
  }
  if (!(from.pitch_est() <= 0 && from.pitch_est() >= 0)) {
    _internal_set_pitch_est(from._internal_pitch_est());
  }
  if (from.is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (!(from.dpitch() <= 0 && from.dpitch() >= 0)) {
    _internal_set_dpitch(from._internal_dpitch());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void Roadmarking_PoseEst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.PoseEst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_PoseEst::CopyFrom(const Roadmarking_PoseEst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.PoseEst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_PoseEst::IsInitialized() const {
  return true;
}

void Roadmarking_PoseEst::InternalSwap(Roadmarking_PoseEst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roadmarking_PoseEst, confidence_)
      + sizeof(Roadmarking_PoseEst::confidence_)
      - PROTOBUF_FIELD_OFFSET(Roadmarking_PoseEst, vanish_pt_)>(
          reinterpret_cast<char*>(&vanish_pt_),
          reinterpret_cast<char*>(&other->vanish_pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_PoseEst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_HppInfo::InitAsDefaultInstance() {
  ::perception::hz::_Roadmarking_HppInfo_default_instance_._instance.get_mutable()->path_prediction_coeff_ = const_cast< ::perception::hz::Roadmarking_CurveCoeff*>(
      ::perception::hz::Roadmarking_CurveCoeff::internal_default_instance());
  ::perception::hz::_Roadmarking_HppInfo_default_instance_._instance.get_mutable()->hpp_line_ = const_cast< ::perception::hz::Roadmarking_Laneline*>(
      ::perception::hz::Roadmarking_Laneline::internal_default_instance());
  ::perception::hz::_Roadmarking_HppInfo_default_instance_._instance.get_mutable()->virtual_ego_lane_left_ = const_cast< ::perception::hz::Roadmarking_Laneline*>(
      ::perception::hz::Roadmarking_Laneline::internal_default_instance());
  ::perception::hz::_Roadmarking_HppInfo_default_instance_._instance.get_mutable()->virtual_ego_lane_right_ = const_cast< ::perception::hz::Roadmarking_Laneline*>(
      ::perception::hz::Roadmarking_Laneline::internal_default_instance());
  ::perception::hz::_Roadmarking_HppInfo_default_instance_._instance.get_mutable()->preview_pt_ = const_cast< ::perception::common::Point2f*>(
      ::perception::common::Point2f::internal_default_instance());
  ::perception::hz::_Roadmarking_HppInfo_default_instance_._instance.get_mutable()->preview_pt_persp_ = const_cast< ::perception::common::Point2f*>(
      ::perception::common::Point2f::internal_default_instance());
}
class Roadmarking_HppInfo::_Internal {
 public:
  static const ::perception::hz::Roadmarking_CurveCoeff& path_prediction_coeff(const Roadmarking_HppInfo* msg);
  static const ::perception::hz::Roadmarking_Laneline& hpp_line(const Roadmarking_HppInfo* msg);
  static const ::perception::hz::Roadmarking_Laneline& virtual_ego_lane_left(const Roadmarking_HppInfo* msg);
  static const ::perception::hz::Roadmarking_Laneline& virtual_ego_lane_right(const Roadmarking_HppInfo* msg);
  static const ::perception::common::Point2f& preview_pt(const Roadmarking_HppInfo* msg);
  static const ::perception::common::Point2f& preview_pt_persp(const Roadmarking_HppInfo* msg);
};

const ::perception::hz::Roadmarking_CurveCoeff&
Roadmarking_HppInfo::_Internal::path_prediction_coeff(const Roadmarking_HppInfo* msg) {
  return *msg->path_prediction_coeff_;
}
const ::perception::hz::Roadmarking_Laneline&
Roadmarking_HppInfo::_Internal::hpp_line(const Roadmarking_HppInfo* msg) {
  return *msg->hpp_line_;
}
const ::perception::hz::Roadmarking_Laneline&
Roadmarking_HppInfo::_Internal::virtual_ego_lane_left(const Roadmarking_HppInfo* msg) {
  return *msg->virtual_ego_lane_left_;
}
const ::perception::hz::Roadmarking_Laneline&
Roadmarking_HppInfo::_Internal::virtual_ego_lane_right(const Roadmarking_HppInfo* msg) {
  return *msg->virtual_ego_lane_right_;
}
const ::perception::common::Point2f&
Roadmarking_HppInfo::_Internal::preview_pt(const Roadmarking_HppInfo* msg) {
  return *msg->preview_pt_;
}
const ::perception::common::Point2f&
Roadmarking_HppInfo::_Internal::preview_pt_persp(const Roadmarking_HppInfo* msg) {
  return *msg->preview_pt_persp_;
}
void Roadmarking_HppInfo::clear_preview_pt() {
  if (GetArena() == nullptr && preview_pt_ != nullptr) {
    delete preview_pt_;
  }
  preview_pt_ = nullptr;
}
void Roadmarking_HppInfo::clear_preview_pt_persp() {
  if (GetArena() == nullptr && preview_pt_persp_ != nullptr) {
    delete preview_pt_persp_;
  }
  preview_pt_persp_ = nullptr;
}
Roadmarking_HppInfo::Roadmarking_HppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.HppInfo)
}
Roadmarking_HppInfo::Roadmarking_HppInfo(const Roadmarking_HppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path_prediction_coeff()) {
    path_prediction_coeff_ = new ::perception::hz::Roadmarking_CurveCoeff(*from.path_prediction_coeff_);
  } else {
    path_prediction_coeff_ = nullptr;
  }
  if (from._internal_has_hpp_line()) {
    hpp_line_ = new ::perception::hz::Roadmarking_Laneline(*from.hpp_line_);
  } else {
    hpp_line_ = nullptr;
  }
  if (from._internal_has_virtual_ego_lane_left()) {
    virtual_ego_lane_left_ = new ::perception::hz::Roadmarking_Laneline(*from.virtual_ego_lane_left_);
  } else {
    virtual_ego_lane_left_ = nullptr;
  }
  if (from._internal_has_virtual_ego_lane_right()) {
    virtual_ego_lane_right_ = new ::perception::hz::Roadmarking_Laneline(*from.virtual_ego_lane_right_);
  } else {
    virtual_ego_lane_right_ = nullptr;
  }
  if (from._internal_has_preview_pt()) {
    preview_pt_ = new ::perception::common::Point2f(*from.preview_pt_);
  } else {
    preview_pt_ = nullptr;
  }
  if (from._internal_has_preview_pt_persp()) {
    preview_pt_persp_ = new ::perception::common::Point2f(*from.preview_pt_persp_);
  } else {
    preview_pt_persp_ = nullptr;
  }
  ::memcpy(&is_laneline_valid_, &from.is_laneline_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ego_lane_radius_) -
    reinterpret_cast<char*>(&is_laneline_valid_)) + sizeof(ego_lane_radius_));
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.HppInfo)
}

void Roadmarking_HppInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarking_HppInfo_roadmarking_5fhz_2eproto.base);
  ::memset(&path_prediction_coeff_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ego_lane_radius_) -
      reinterpret_cast<char*>(&path_prediction_coeff_)) + sizeof(ego_lane_radius_));
}

Roadmarking_HppInfo::~Roadmarking_HppInfo() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.HppInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_HppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete path_prediction_coeff_;
  if (this != internal_default_instance()) delete hpp_line_;
  if (this != internal_default_instance()) delete virtual_ego_lane_left_;
  if (this != internal_default_instance()) delete virtual_ego_lane_right_;
  if (this != internal_default_instance()) delete preview_pt_;
  if (this != internal_default_instance()) delete preview_pt_persp_;
}

void Roadmarking_HppInfo::ArenaDtor(void* object) {
  Roadmarking_HppInfo* _this = reinterpret_cast< Roadmarking_HppInfo* >(object);
  (void)_this;
}
void Roadmarking_HppInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_HppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_HppInfo& Roadmarking_HppInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_HppInfo_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_HppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.HppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && path_prediction_coeff_ != nullptr) {
    delete path_prediction_coeff_;
  }
  path_prediction_coeff_ = nullptr;
  if (GetArena() == nullptr && hpp_line_ != nullptr) {
    delete hpp_line_;
  }
  hpp_line_ = nullptr;
  if (GetArena() == nullptr && virtual_ego_lane_left_ != nullptr) {
    delete virtual_ego_lane_left_;
  }
  virtual_ego_lane_left_ = nullptr;
  if (GetArena() == nullptr && virtual_ego_lane_right_ != nullptr) {
    delete virtual_ego_lane_right_;
  }
  virtual_ego_lane_right_ = nullptr;
  if (GetArena() == nullptr && preview_pt_ != nullptr) {
    delete preview_pt_;
  }
  preview_pt_ = nullptr;
  if (GetArena() == nullptr && preview_pt_persp_ != nullptr) {
    delete preview_pt_persp_;
  }
  preview_pt_persp_ = nullptr;
  ::memset(&is_laneline_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ego_lane_radius_) -
      reinterpret_cast<char*>(&is_laneline_valid_)) + sizeof(ego_lane_radius_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_HppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.hz.Roadmarking.CurveCoeff path_prediction_coeff = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_prediction_coeff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_laneline_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_laneline_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 planning_source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          planning_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ego_lane_width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ego_lane_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.Laneline hpp_line = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_hpp_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.Laneline virtual_ego_lane_left = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_ego_lane_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.Laneline virtual_ego_lane_right = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_ego_lane_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2f preview_pt = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2f preview_pt_persp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_pt_persp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ego_lane_radius = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          ego_lane_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_HppInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.HppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.hz.Roadmarking.CurveCoeff path_prediction_coeff = 1;
  if (this->has_path_prediction_coeff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path_prediction_coeff(this), target, stream);
  }

  // bool is_laneline_valid = 3;
  if (this->is_laneline_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_laneline_valid(), target);
  }

  // bool is_valid = 4;
  if (this->is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_valid(), target);
  }

  // uint32 planning_source = 5;
  if (this->planning_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_planning_source(), target);
  }

  // float confidence = 6;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_confidence(), target);
  }

  // float ego_lane_width = 7;
  if (!(this->ego_lane_width() <= 0 && this->ego_lane_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_ego_lane_width(), target);
  }

  // .perception.hz.Roadmarking.Laneline hpp_line = 8;
  if (this->has_hpp_line()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::hpp_line(this), target, stream);
  }

  // .perception.hz.Roadmarking.Laneline virtual_ego_lane_left = 9;
  if (this->has_virtual_ego_lane_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::virtual_ego_lane_left(this), target, stream);
  }

  // .perception.hz.Roadmarking.Laneline virtual_ego_lane_right = 10;
  if (this->has_virtual_ego_lane_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::virtual_ego_lane_right(this), target, stream);
  }

  // .perception.common.Point2f preview_pt = 11;
  if (this->has_preview_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::preview_pt(this), target, stream);
  }

  // .perception.common.Point2f preview_pt_persp = 12;
  if (this->has_preview_pt_persp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::preview_pt_persp(this), target, stream);
  }

  // float ego_lane_radius = 13;
  if (!(this->ego_lane_radius() <= 0 && this->ego_lane_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_ego_lane_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.HppInfo)
  return target;
}

size_t Roadmarking_HppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.HppInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.hz.Roadmarking.CurveCoeff path_prediction_coeff = 1;
  if (this->has_path_prediction_coeff()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_prediction_coeff_);
  }

  // .perception.hz.Roadmarking.Laneline hpp_line = 8;
  if (this->has_hpp_line()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hpp_line_);
  }

  // .perception.hz.Roadmarking.Laneline virtual_ego_lane_left = 9;
  if (this->has_virtual_ego_lane_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *virtual_ego_lane_left_);
  }

  // .perception.hz.Roadmarking.Laneline virtual_ego_lane_right = 10;
  if (this->has_virtual_ego_lane_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *virtual_ego_lane_right_);
  }

  // .perception.common.Point2f preview_pt = 11;
  if (this->has_preview_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preview_pt_);
  }

  // .perception.common.Point2f preview_pt_persp = 12;
  if (this->has_preview_pt_persp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preview_pt_persp_);
  }

  // bool is_laneline_valid = 3;
  if (this->is_laneline_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_valid = 4;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // uint32 planning_source = 5;
  if (this->planning_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_planning_source());
  }

  // float confidence = 6;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float ego_lane_width = 7;
  if (!(this->ego_lane_width() <= 0 && this->ego_lane_width() >= 0)) {
    total_size += 1 + 4;
  }

  // float ego_lane_radius = 13;
  if (!(this->ego_lane_radius() <= 0 && this->ego_lane_radius() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_HppInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.HppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_HppInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_HppInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.HppInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.HppInfo)
    MergeFrom(*source);
  }
}

void Roadmarking_HppInfo::MergeFrom(const Roadmarking_HppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.HppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path_prediction_coeff()) {
    _internal_mutable_path_prediction_coeff()->::perception::hz::Roadmarking_CurveCoeff::MergeFrom(from._internal_path_prediction_coeff());
  }
  if (from.has_hpp_line()) {
    _internal_mutable_hpp_line()->::perception::hz::Roadmarking_Laneline::MergeFrom(from._internal_hpp_line());
  }
  if (from.has_virtual_ego_lane_left()) {
    _internal_mutable_virtual_ego_lane_left()->::perception::hz::Roadmarking_Laneline::MergeFrom(from._internal_virtual_ego_lane_left());
  }
  if (from.has_virtual_ego_lane_right()) {
    _internal_mutable_virtual_ego_lane_right()->::perception::hz::Roadmarking_Laneline::MergeFrom(from._internal_virtual_ego_lane_right());
  }
  if (from.has_preview_pt()) {
    _internal_mutable_preview_pt()->::perception::common::Point2f::MergeFrom(from._internal_preview_pt());
  }
  if (from.has_preview_pt_persp()) {
    _internal_mutable_preview_pt_persp()->::perception::common::Point2f::MergeFrom(from._internal_preview_pt_persp());
  }
  if (from.is_laneline_valid() != 0) {
    _internal_set_is_laneline_valid(from._internal_is_laneline_valid());
  }
  if (from.is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
  if (from.planning_source() != 0) {
    _internal_set_planning_source(from._internal_planning_source());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.ego_lane_width() <= 0 && from.ego_lane_width() >= 0)) {
    _internal_set_ego_lane_width(from._internal_ego_lane_width());
  }
  if (!(from.ego_lane_radius() <= 0 && from.ego_lane_radius() >= 0)) {
    _internal_set_ego_lane_radius(from._internal_ego_lane_radius());
  }
}

void Roadmarking_HppInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.HppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_HppInfo::CopyFrom(const Roadmarking_HppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.HppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_HppInfo::IsInitialized() const {
  return true;
}

void Roadmarking_HppInfo::InternalSwap(Roadmarking_HppInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roadmarking_HppInfo, ego_lane_radius_)
      + sizeof(Roadmarking_HppInfo::ego_lane_radius_)
      - PROTOBUF_FIELD_OFFSET(Roadmarking_HppInfo, path_prediction_coeff_)>(
          reinterpret_cast<char*>(&path_prediction_coeff_),
          reinterpret_cast<char*>(&other->path_prediction_coeff_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_HppInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_Junction::InitAsDefaultInstance() {
  ::perception::hz::_Roadmarking_Junction_default_instance_._instance.get_mutable()->pt_image_coord_ = const_cast< ::perception::common::Point2f*>(
      ::perception::common::Point2f::internal_default_instance());
  ::perception::hz::_Roadmarking_Junction_default_instance_._instance.get_mutable()->pt_vehicle_coord_ = const_cast< ::perception::common::Point2f*>(
      ::perception::common::Point2f::internal_default_instance());
}
class Roadmarking_Junction::_Internal {
 public:
  static const ::perception::common::Point2f& pt_image_coord(const Roadmarking_Junction* msg);
  static const ::perception::common::Point2f& pt_vehicle_coord(const Roadmarking_Junction* msg);
};

const ::perception::common::Point2f&
Roadmarking_Junction::_Internal::pt_image_coord(const Roadmarking_Junction* msg) {
  return *msg->pt_image_coord_;
}
const ::perception::common::Point2f&
Roadmarking_Junction::_Internal::pt_vehicle_coord(const Roadmarking_Junction* msg) {
  return *msg->pt_vehicle_coord_;
}
void Roadmarking_Junction::clear_pt_image_coord() {
  if (GetArena() == nullptr && pt_image_coord_ != nullptr) {
    delete pt_image_coord_;
  }
  pt_image_coord_ = nullptr;
}
void Roadmarking_Junction::clear_pt_vehicle_coord() {
  if (GetArena() == nullptr && pt_vehicle_coord_ != nullptr) {
    delete pt_vehicle_coord_;
  }
  pt_vehicle_coord_ = nullptr;
}
Roadmarking_Junction::Roadmarking_Junction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  laneline_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.Junction)
}
Roadmarking_Junction::Roadmarking_Junction(const Roadmarking_Junction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      laneline_id_(from.laneline_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pt_image_coord()) {
    pt_image_coord_ = new ::perception::common::Point2f(*from.pt_image_coord_);
  } else {
    pt_image_coord_ = nullptr;
  }
  if (from._internal_has_pt_vehicle_coord()) {
    pt_vehicle_coord_ = new ::perception::common::Point2f(*from.pt_vehicle_coord_);
  } else {
    pt_vehicle_coord_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&type_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.Junction)
}

void Roadmarking_Junction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarking_Junction_roadmarking_5fhz_2eproto.base);
  ::memset(&pt_image_coord_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&pt_image_coord_)) + sizeof(confidence_));
}

Roadmarking_Junction::~Roadmarking_Junction() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.Junction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_Junction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pt_image_coord_;
  if (this != internal_default_instance()) delete pt_vehicle_coord_;
}

void Roadmarking_Junction::ArenaDtor(void* object) {
  Roadmarking_Junction* _this = reinterpret_cast< Roadmarking_Junction* >(object);
  (void)_this;
}
void Roadmarking_Junction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_Junction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_Junction& Roadmarking_Junction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_Junction_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_Junction::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.Junction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  laneline_id_.Clear();
  if (GetArena() == nullptr && pt_image_coord_ != nullptr) {
    delete pt_image_coord_;
  }
  pt_image_coord_ = nullptr;
  if (GetArena() == nullptr && pt_vehicle_coord_ != nullptr) {
    delete pt_vehicle_coord_;
  }
  pt_vehicle_coord_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&type_)) + sizeof(confidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_Junction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.hz.Roadmarking.Junction.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::perception::hz::Roadmarking_Junction_Type>(val));
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2f pt_image_coord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pt_image_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2f pt_vehicle_coord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pt_vehicle_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 laneline_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_laneline_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_laneline_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_Junction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.Junction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.hz.Roadmarking.Junction.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .perception.common.Point2f pt_image_coord = 2;
  if (this->has_pt_image_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pt_image_coord(this), target, stream);
  }

  // .perception.common.Point2f pt_vehicle_coord = 3;
  if (this->has_pt_vehicle_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pt_vehicle_coord(this), target, stream);
  }

  // repeated uint64 laneline_id = 4;
  {
    int byte_size = _laneline_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_laneline_id(), byte_size, target);
    }
  }

  // int32 state = 5;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_state(), target);
  }

  // float confidence = 6;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.Junction)
  return target;
}

size_t Roadmarking_Junction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.Junction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 laneline_id = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->laneline_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _laneline_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .perception.common.Point2f pt_image_coord = 2;
  if (this->has_pt_image_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pt_image_coord_);
  }

  // .perception.common.Point2f pt_vehicle_coord = 3;
  if (this->has_pt_vehicle_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pt_vehicle_coord_);
  }

  // .perception.hz.Roadmarking.Junction.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 state = 5;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // float confidence = 6;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_Junction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.Junction)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_Junction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_Junction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.Junction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.Junction)
    MergeFrom(*source);
  }
}

void Roadmarking_Junction::MergeFrom(const Roadmarking_Junction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.Junction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  laneline_id_.MergeFrom(from.laneline_id_);
  if (from.has_pt_image_coord()) {
    _internal_mutable_pt_image_coord()->::perception::common::Point2f::MergeFrom(from._internal_pt_image_coord());
  }
  if (from.has_pt_vehicle_coord()) {
    _internal_mutable_pt_vehicle_coord()->::perception::common::Point2f::MergeFrom(from._internal_pt_vehicle_coord());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void Roadmarking_Junction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.Junction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_Junction::CopyFrom(const Roadmarking_Junction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.Junction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_Junction::IsInitialized() const {
  return true;
}

void Roadmarking_Junction::InternalSwap(Roadmarking_Junction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  laneline_id_.InternalSwap(&other->laneline_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roadmarking_Junction, confidence_)
      + sizeof(Roadmarking_Junction::confidence_)
      - PROTOBUF_FIELD_OFFSET(Roadmarking_Junction, pt_image_coord_)>(
          reinterpret_cast<char*>(&pt_image_coord_),
          reinterpret_cast<char*>(&other->pt_image_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_Junction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking_JunctionList::InitAsDefaultInstance() {
}
class Roadmarking_JunctionList::_Internal {
 public:
};

Roadmarking_JunctionList::Roadmarking_JunctionList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  junc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking.JunctionList)
}
Roadmarking_JunctionList::Roadmarking_JunctionList(const Roadmarking_JunctionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      junc_(from.junc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking.JunctionList)
}

void Roadmarking_JunctionList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarking_JunctionList_roadmarking_5fhz_2eproto.base);
}

Roadmarking_JunctionList::~Roadmarking_JunctionList() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking.JunctionList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking_JunctionList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Roadmarking_JunctionList::ArenaDtor(void* object) {
  Roadmarking_JunctionList* _this = reinterpret_cast< Roadmarking_JunctionList* >(object);
  (void)_this;
}
void Roadmarking_JunctionList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking_JunctionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking_JunctionList& Roadmarking_JunctionList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_JunctionList_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking_JunctionList::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking.JunctionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  junc_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking_JunctionList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.hz.Roadmarking.Junction junc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_junc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking_JunctionList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking.JunctionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.hz.Roadmarking.Junction junc = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_junc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_junc(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking.JunctionList)
  return target;
}

size_t Roadmarking_JunctionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking.JunctionList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.hz.Roadmarking.Junction junc = 1;
  total_size += 1UL * this->_internal_junc_size();
  for (const auto& msg : this->junc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking_JunctionList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking.JunctionList)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking_JunctionList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking_JunctionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking.JunctionList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking.JunctionList)
    MergeFrom(*source);
  }
}

void Roadmarking_JunctionList::MergeFrom(const Roadmarking_JunctionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking.JunctionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  junc_.MergeFrom(from.junc_);
}

void Roadmarking_JunctionList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking.JunctionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking_JunctionList::CopyFrom(const Roadmarking_JunctionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking.JunctionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking_JunctionList::IsInitialized() const {
  return true;
}

void Roadmarking_JunctionList::InternalSwap(Roadmarking_JunctionList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  junc_.InternalSwap(&other->junc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking_JunctionList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarking::InitAsDefaultInstance() {
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->laneline_ = const_cast< ::perception::hz::Roadmarking_LanelineList*>(
      ::perception::hz::Roadmarking_LanelineList::internal_default_instance());
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->freespaces_ = const_cast< ::perception::hz::Roadmarking_FreeSpaces*>(
      ::perception::hz::Roadmarking_FreeSpaces::internal_default_instance());
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->roadmarkers_ = const_cast< ::perception::hz::Roadmarking_Roadmarks*>(
      ::perception::hz::Roadmarking_Roadmarks::internal_default_instance());
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->road_edges_ = const_cast< ::perception::hz::Roadmarking_RoadEdgeList*>(
      ::perception::hz::Roadmarking_RoadEdgeList::internal_default_instance());
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->ldw_info_ = const_cast< ::perception::hz::Roadmarking_LDWInfo*>(
      ::perception::hz::Roadmarking_LDWInfo::internal_default_instance());
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->calib_lines_ = const_cast< ::perception::hz::Roadmarking_LanelineList*>(
      ::perception::hz::Roadmarking_LanelineList::internal_default_instance());
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->motion_ = const_cast< ::perception::hz::Roadmarking_MotionEst*>(
      ::perception::hz::Roadmarking_MotionEst::internal_default_instance());
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->pose_ = const_cast< ::perception::hz::Roadmarking_PoseEst*>(
      ::perception::hz::Roadmarking_PoseEst::internal_default_instance());
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->hpp_info_ = const_cast< ::perception::hz::Roadmarking_HppInfo*>(
      ::perception::hz::Roadmarking_HppInfo::internal_default_instance());
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->slope_equation_ = const_cast< ::perception::hz::Roadmarking_CurveCoeff*>(
      ::perception::hz::Roadmarking_CurveCoeff::internal_default_instance());
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->junc_list_ = const_cast< ::perception::hz::Roadmarking_JunctionList*>(
      ::perception::hz::Roadmarking_JunctionList::internal_default_instance());
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->profiling_items_ = const_cast< ::perception::hz::RoadSysProfiling*>(
      ::perception::hz::RoadSysProfiling::internal_default_instance());
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->ego_motion_ = const_cast< ::minieye::EgoMotion*>(
      ::minieye::EgoMotion::internal_default_instance());
  ::perception::hz::_Roadmarking_default_instance_._instance.get_mutable()->cam_id_ = const_cast< ::minieye::CamID*>(
      ::minieye::CamID::internal_default_instance());
}
class Roadmarking::_Internal {
 public:
  static const ::perception::hz::Roadmarking_LanelineList& laneline(const Roadmarking* msg);
  static const ::perception::hz::Roadmarking_FreeSpaces& freespaces(const Roadmarking* msg);
  static const ::perception::hz::Roadmarking_Roadmarks& roadmarkers(const Roadmarking* msg);
  static const ::perception::hz::Roadmarking_RoadEdgeList& road_edges(const Roadmarking* msg);
  static const ::perception::hz::Roadmarking_LDWInfo& ldw_info(const Roadmarking* msg);
  static const ::perception::hz::Roadmarking_LanelineList& calib_lines(const Roadmarking* msg);
  static const ::perception::hz::Roadmarking_MotionEst& motion(const Roadmarking* msg);
  static const ::perception::hz::Roadmarking_PoseEst& pose(const Roadmarking* msg);
  static const ::perception::hz::Roadmarking_HppInfo& hpp_info(const Roadmarking* msg);
  static const ::perception::hz::Roadmarking_CurveCoeff& slope_equation(const Roadmarking* msg);
  static const ::perception::hz::Roadmarking_JunctionList& junc_list(const Roadmarking* msg);
  static const ::perception::hz::RoadSysProfiling& profiling_items(const Roadmarking* msg);
  static const ::minieye::EgoMotion& ego_motion(const Roadmarking* msg);
  static const ::minieye::CamID& cam_id(const Roadmarking* msg);
};

const ::perception::hz::Roadmarking_LanelineList&
Roadmarking::_Internal::laneline(const Roadmarking* msg) {
  return *msg->laneline_;
}
const ::perception::hz::Roadmarking_FreeSpaces&
Roadmarking::_Internal::freespaces(const Roadmarking* msg) {
  return *msg->freespaces_;
}
const ::perception::hz::Roadmarking_Roadmarks&
Roadmarking::_Internal::roadmarkers(const Roadmarking* msg) {
  return *msg->roadmarkers_;
}
const ::perception::hz::Roadmarking_RoadEdgeList&
Roadmarking::_Internal::road_edges(const Roadmarking* msg) {
  return *msg->road_edges_;
}
const ::perception::hz::Roadmarking_LDWInfo&
Roadmarking::_Internal::ldw_info(const Roadmarking* msg) {
  return *msg->ldw_info_;
}
const ::perception::hz::Roadmarking_LanelineList&
Roadmarking::_Internal::calib_lines(const Roadmarking* msg) {
  return *msg->calib_lines_;
}
const ::perception::hz::Roadmarking_MotionEst&
Roadmarking::_Internal::motion(const Roadmarking* msg) {
  return *msg->motion_;
}
const ::perception::hz::Roadmarking_PoseEst&
Roadmarking::_Internal::pose(const Roadmarking* msg) {
  return *msg->pose_;
}
const ::perception::hz::Roadmarking_HppInfo&
Roadmarking::_Internal::hpp_info(const Roadmarking* msg) {
  return *msg->hpp_info_;
}
const ::perception::hz::Roadmarking_CurveCoeff&
Roadmarking::_Internal::slope_equation(const Roadmarking* msg) {
  return *msg->slope_equation_;
}
const ::perception::hz::Roadmarking_JunctionList&
Roadmarking::_Internal::junc_list(const Roadmarking* msg) {
  return *msg->junc_list_;
}
const ::perception::hz::RoadSysProfiling&
Roadmarking::_Internal::profiling_items(const Roadmarking* msg) {
  return *msg->profiling_items_;
}
const ::minieye::EgoMotion&
Roadmarking::_Internal::ego_motion(const Roadmarking* msg) {
  return *msg->ego_motion_;
}
const ::minieye::CamID&
Roadmarking::_Internal::cam_id(const Roadmarking* msg) {
  return *msg->cam_id_;
}
void Roadmarking::clear_ego_motion() {
  if (GetArena() == nullptr && ego_motion_ != nullptr) {
    delete ego_motion_;
  }
  ego_motion_ = nullptr;
}
void Roadmarking::clear_cam_id() {
  if (GetArena() == nullptr && cam_id_ != nullptr) {
    delete cam_id_;
  }
  cam_id_ = nullptr;
}
Roadmarking::Roadmarking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.hz.Roadmarking)
}
Roadmarking::Roadmarking(const Roadmarking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_laneline()) {
    laneline_ = new ::perception::hz::Roadmarking_LanelineList(*from.laneline_);
  } else {
    laneline_ = nullptr;
  }
  if (from._internal_has_freespaces()) {
    freespaces_ = new ::perception::hz::Roadmarking_FreeSpaces(*from.freespaces_);
  } else {
    freespaces_ = nullptr;
  }
  if (from._internal_has_roadmarkers()) {
    roadmarkers_ = new ::perception::hz::Roadmarking_Roadmarks(*from.roadmarkers_);
  } else {
    roadmarkers_ = nullptr;
  }
  if (from._internal_has_road_edges()) {
    road_edges_ = new ::perception::hz::Roadmarking_RoadEdgeList(*from.road_edges_);
  } else {
    road_edges_ = nullptr;
  }
  if (from._internal_has_ldw_info()) {
    ldw_info_ = new ::perception::hz::Roadmarking_LDWInfo(*from.ldw_info_);
  } else {
    ldw_info_ = nullptr;
  }
  if (from._internal_has_calib_lines()) {
    calib_lines_ = new ::perception::hz::Roadmarking_LanelineList(*from.calib_lines_);
  } else {
    calib_lines_ = nullptr;
  }
  if (from._internal_has_motion()) {
    motion_ = new ::perception::hz::Roadmarking_MotionEst(*from.motion_);
  } else {
    motion_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::perception::hz::Roadmarking_PoseEst(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_hpp_info()) {
    hpp_info_ = new ::perception::hz::Roadmarking_HppInfo(*from.hpp_info_);
  } else {
    hpp_info_ = nullptr;
  }
  if (from._internal_has_slope_equation()) {
    slope_equation_ = new ::perception::hz::Roadmarking_CurveCoeff(*from.slope_equation_);
  } else {
    slope_equation_ = nullptr;
  }
  if (from._internal_has_junc_list()) {
    junc_list_ = new ::perception::hz::Roadmarking_JunctionList(*from.junc_list_);
  } else {
    junc_list_ = nullptr;
  }
  if (from._internal_has_profiling_items()) {
    profiling_items_ = new ::perception::hz::RoadSysProfiling(*from.profiling_items_);
  } else {
    profiling_items_ = nullptr;
  }
  if (from._internal_has_ego_motion()) {
    ego_motion_ = new ::minieye::EgoMotion(*from.ego_motion_);
  } else {
    ego_motion_ = nullptr;
  }
  if (from._internal_has_cam_id()) {
    cam_id_ = new ::minieye::CamID(*from.cam_id_);
  } else {
    cam_id_ = nullptr;
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ego_lane_width_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(ego_lane_width_));
  // @@protoc_insertion_point(copy_constructor:perception.hz.Roadmarking)
}

void Roadmarking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarking_roadmarking_5fhz_2eproto.base);
  ::memset(&laneline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ego_lane_width_) -
      reinterpret_cast<char*>(&laneline_)) + sizeof(ego_lane_width_));
}

Roadmarking::~Roadmarking() {
  // @@protoc_insertion_point(destructor:perception.hz.Roadmarking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarking::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete laneline_;
  if (this != internal_default_instance()) delete freespaces_;
  if (this != internal_default_instance()) delete roadmarkers_;
  if (this != internal_default_instance()) delete road_edges_;
  if (this != internal_default_instance()) delete ldw_info_;
  if (this != internal_default_instance()) delete calib_lines_;
  if (this != internal_default_instance()) delete motion_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete hpp_info_;
  if (this != internal_default_instance()) delete slope_equation_;
  if (this != internal_default_instance()) delete junc_list_;
  if (this != internal_default_instance()) delete profiling_items_;
  if (this != internal_default_instance()) delete ego_motion_;
  if (this != internal_default_instance()) delete cam_id_;
}

void Roadmarking::ArenaDtor(void* object) {
  Roadmarking* _this = reinterpret_cast< Roadmarking* >(object);
  (void)_this;
}
void Roadmarking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarking& Roadmarking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarking_roadmarking_5fhz_2eproto.base);
  return *internal_default_instance();
}


void Roadmarking::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.hz.Roadmarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && laneline_ != nullptr) {
    delete laneline_;
  }
  laneline_ = nullptr;
  if (GetArena() == nullptr && freespaces_ != nullptr) {
    delete freespaces_;
  }
  freespaces_ = nullptr;
  if (GetArena() == nullptr && roadmarkers_ != nullptr) {
    delete roadmarkers_;
  }
  roadmarkers_ = nullptr;
  if (GetArena() == nullptr && road_edges_ != nullptr) {
    delete road_edges_;
  }
  road_edges_ = nullptr;
  if (GetArena() == nullptr && ldw_info_ != nullptr) {
    delete ldw_info_;
  }
  ldw_info_ = nullptr;
  if (GetArena() == nullptr && calib_lines_ != nullptr) {
    delete calib_lines_;
  }
  calib_lines_ = nullptr;
  if (GetArena() == nullptr && motion_ != nullptr) {
    delete motion_;
  }
  motion_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && hpp_info_ != nullptr) {
    delete hpp_info_;
  }
  hpp_info_ = nullptr;
  if (GetArena() == nullptr && slope_equation_ != nullptr) {
    delete slope_equation_;
  }
  slope_equation_ = nullptr;
  if (GetArena() == nullptr && junc_list_ != nullptr) {
    delete junc_list_;
  }
  junc_list_ = nullptr;
  if (GetArena() == nullptr && profiling_items_ != nullptr) {
    delete profiling_items_;
  }
  profiling_items_ = nullptr;
  if (GetArena() == nullptr && ego_motion_ != nullptr) {
    delete ego_motion_;
  }
  ego_motion_ = nullptr;
  if (GetArena() == nullptr && cam_id_ != nullptr) {
    delete cam_id_;
  }
  cam_id_ = nullptr;
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ego_lane_width_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(ego_lane_width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.LanelineList laneline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_laneline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.FreeSpaces freespaces = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_freespaces(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.Roadmarks roadmarkers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_roadmarkers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.RoadEdgeList road_edges = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_road_edges(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.LDWInfo ldw_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ldw_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.LanelineList calib_lines = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_calib_lines(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.MotionEst motion = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.PoseEst pose = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.HppInfo hpp_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_hpp_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.DataSource data_source = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_source(static_cast<::minieye::DataSource>(val));
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.CurveCoeff slope_equation = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_slope_equation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 finish_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          finish_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.Roadmarking.JunctionList junc_list = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_junc_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.hz.RoadSysProfiling profiling_items = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_profiling_items(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 recv_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          recv_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fps = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .minieye.EgoMotion ego_motion = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_ego_motion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ego_lane_width = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          ego_lane_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .minieye.CamID cam_id = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_cam_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.hz.Roadmarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // .perception.hz.Roadmarking.LanelineList laneline = 3;
  if (this->has_laneline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::laneline(this), target, stream);
  }

  // .perception.hz.Roadmarking.FreeSpaces freespaces = 4;
  if (this->has_freespaces()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::freespaces(this), target, stream);
  }

  // .perception.hz.Roadmarking.Roadmarks roadmarkers = 6;
  if (this->has_roadmarkers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::roadmarkers(this), target, stream);
  }

  // .perception.hz.Roadmarking.RoadEdgeList road_edges = 7;
  if (this->has_road_edges()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::road_edges(this), target, stream);
  }

  // .perception.hz.Roadmarking.LDWInfo ldw_info = 8;
  if (this->has_ldw_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ldw_info(this), target, stream);
  }

  // .perception.hz.Roadmarking.LanelineList calib_lines = 9;
  if (this->has_calib_lines()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::calib_lines(this), target, stream);
  }

  // .perception.hz.Roadmarking.MotionEst motion = 10;
  if (this->has_motion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::motion(this), target, stream);
  }

  // .perception.hz.Roadmarking.PoseEst pose = 11;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::pose(this), target, stream);
  }

  // .perception.hz.Roadmarking.HppInfo hpp_info = 12;
  if (this->has_hpp_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::hpp_info(this), target, stream);
  }

  // uint64 tick = 13;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_tick(), target);
  }

  // .minieye.DataSource data_source = 14;
  if (this->data_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_data_source(), target);
  }

  // .perception.hz.Roadmarking.CurveCoeff slope_equation = 15;
  if (this->has_slope_equation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::slope_equation(this), target, stream);
  }

  // uint64 finish_time = 16;
  if (this->finish_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_finish_time(), target);
  }

  // .perception.hz.Roadmarking.JunctionList junc_list = 17;
  if (this->has_junc_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::junc_list(this), target, stream);
  }

  // .perception.hz.RoadSysProfiling profiling_items = 18;
  if (this->has_profiling_items()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::profiling_items(this), target, stream);
  }

  // uint64 recv_time = 19;
  if (this->recv_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_recv_time(), target);
  }

  // float fps = 20;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_fps(), target);
  }

  // .minieye.EgoMotion ego_motion = 21;
  if (this->has_ego_motion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::ego_motion(this), target, stream);
  }

  // float ego_lane_width = 22;
  if (!(this->ego_lane_width() <= 0 && this->ego_lane_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_ego_lane_width(), target);
  }

  // .minieye.CamID cam_id = 23;
  if (this->has_cam_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::cam_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.hz.Roadmarking)
  return target;
}

size_t Roadmarking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.hz.Roadmarking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.hz.Roadmarking.LanelineList laneline = 3;
  if (this->has_laneline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *laneline_);
  }

  // .perception.hz.Roadmarking.FreeSpaces freespaces = 4;
  if (this->has_freespaces()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freespaces_);
  }

  // .perception.hz.Roadmarking.Roadmarks roadmarkers = 6;
  if (this->has_roadmarkers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roadmarkers_);
  }

  // .perception.hz.Roadmarking.RoadEdgeList road_edges = 7;
  if (this->has_road_edges()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *road_edges_);
  }

  // .perception.hz.Roadmarking.LDWInfo ldw_info = 8;
  if (this->has_ldw_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ldw_info_);
  }

  // .perception.hz.Roadmarking.LanelineList calib_lines = 9;
  if (this->has_calib_lines()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calib_lines_);
  }

  // .perception.hz.Roadmarking.MotionEst motion = 10;
  if (this->has_motion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *motion_);
  }

  // .perception.hz.Roadmarking.PoseEst pose = 11;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .perception.hz.Roadmarking.HppInfo hpp_info = 12;
  if (this->has_hpp_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hpp_info_);
  }

  // .perception.hz.Roadmarking.CurveCoeff slope_equation = 15;
  if (this->has_slope_equation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slope_equation_);
  }

  // .perception.hz.Roadmarking.JunctionList junc_list = 17;
  if (this->has_junc_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *junc_list_);
  }

  // .perception.hz.RoadSysProfiling profiling_items = 18;
  if (this->has_profiling_items()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *profiling_items_);
  }

  // .minieye.EgoMotion ego_motion = 21;
  if (this->has_ego_motion()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ego_motion_);
  }

  // .minieye.CamID cam_id = 23;
  if (this->has_cam_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cam_id_);
  }

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 13;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 finish_time = 16;
  if (this->finish_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_finish_time());
  }

  // .minieye.DataSource data_source = 14;
  if (this->data_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_source());
  }

  // float fps = 20;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 2 + 4;
  }

  // uint64 recv_time = 19;
  if (this->recv_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_recv_time());
  }

  // float ego_lane_width = 22;
  if (!(this->ego_lane_width() <= 0 && this->ego_lane_width() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.hz.Roadmarking)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.hz.Roadmarking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.hz.Roadmarking)
    MergeFrom(*source);
  }
}

void Roadmarking::MergeFrom(const Roadmarking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.hz.Roadmarking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_laneline()) {
    _internal_mutable_laneline()->::perception::hz::Roadmarking_LanelineList::MergeFrom(from._internal_laneline());
  }
  if (from.has_freespaces()) {
    _internal_mutable_freespaces()->::perception::hz::Roadmarking_FreeSpaces::MergeFrom(from._internal_freespaces());
  }
  if (from.has_roadmarkers()) {
    _internal_mutable_roadmarkers()->::perception::hz::Roadmarking_Roadmarks::MergeFrom(from._internal_roadmarkers());
  }
  if (from.has_road_edges()) {
    _internal_mutable_road_edges()->::perception::hz::Roadmarking_RoadEdgeList::MergeFrom(from._internal_road_edges());
  }
  if (from.has_ldw_info()) {
    _internal_mutable_ldw_info()->::perception::hz::Roadmarking_LDWInfo::MergeFrom(from._internal_ldw_info());
  }
  if (from.has_calib_lines()) {
    _internal_mutable_calib_lines()->::perception::hz::Roadmarking_LanelineList::MergeFrom(from._internal_calib_lines());
  }
  if (from.has_motion()) {
    _internal_mutable_motion()->::perception::hz::Roadmarking_MotionEst::MergeFrom(from._internal_motion());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::perception::hz::Roadmarking_PoseEst::MergeFrom(from._internal_pose());
  }
  if (from.has_hpp_info()) {
    _internal_mutable_hpp_info()->::perception::hz::Roadmarking_HppInfo::MergeFrom(from._internal_hpp_info());
  }
  if (from.has_slope_equation()) {
    _internal_mutable_slope_equation()->::perception::hz::Roadmarking_CurveCoeff::MergeFrom(from._internal_slope_equation());
  }
  if (from.has_junc_list()) {
    _internal_mutable_junc_list()->::perception::hz::Roadmarking_JunctionList::MergeFrom(from._internal_junc_list());
  }
  if (from.has_profiling_items()) {
    _internal_mutable_profiling_items()->::perception::hz::RoadSysProfiling::MergeFrom(from._internal_profiling_items());
  }
  if (from.has_ego_motion()) {
    _internal_mutable_ego_motion()->::minieye::EgoMotion::MergeFrom(from._internal_ego_motion());
  }
  if (from.has_cam_id()) {
    _internal_mutable_cam_id()->::minieye::CamID::MergeFrom(from._internal_cam_id());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.finish_time() != 0) {
    _internal_set_finish_time(from._internal_finish_time());
  }
  if (from.data_source() != 0) {
    _internal_set_data_source(from._internal_data_source());
  }
  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    _internal_set_fps(from._internal_fps());
  }
  if (from.recv_time() != 0) {
    _internal_set_recv_time(from._internal_recv_time());
  }
  if (!(from.ego_lane_width() <= 0 && from.ego_lane_width() >= 0)) {
    _internal_set_ego_lane_width(from._internal_ego_lane_width());
  }
}

void Roadmarking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.hz.Roadmarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarking::CopyFrom(const Roadmarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.hz.Roadmarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarking::IsInitialized() const {
  return true;
}

void Roadmarking::InternalSwap(Roadmarking* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roadmarking, ego_lane_width_)
      + sizeof(Roadmarking::ego_lane_width_)
      - PROTOBUF_FIELD_OFFSET(Roadmarking, laneline_)>(
          reinterpret_cast<char*>(&laneline_),
          reinterpret_cast<char*>(&other->laneline_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarking::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hz
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perception::hz::RoadSysProfiling_Item* Arena::CreateMaybeMessage< ::perception::hz::RoadSysProfiling_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::RoadSysProfiling_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::RoadSysProfiling* Arena::CreateMaybeMessage< ::perception::hz::RoadSysProfiling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::RoadSysProfiling >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_CurveCoeff* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_CurveCoeff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_CurveCoeff >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_Laneline* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_Laneline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_Laneline >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_LanelineList* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_LanelineList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_LanelineList >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_FreeSpaces_FreeZone* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_FreeSpaces_FreeZone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_FreeSpaces_FreeZone >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_FreeSpaces* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_FreeSpaces >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_FreeSpaces >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_RoadEdge* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_RoadEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_RoadEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_RoadEdgeList* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_RoadEdgeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_RoadEdgeList >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_Roadmarks_Roadmark* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_Roadmarks_Roadmark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_Roadmarks_Roadmark >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_Roadmarks* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_Roadmarks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_Roadmarks >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_LDWInfo* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_LDWInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_LDWInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_MotionEst* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_MotionEst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_MotionEst >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_PoseEst* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_PoseEst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_PoseEst >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_HppInfo* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_HppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_HppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_Junction* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_Junction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_Junction >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking_JunctionList* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking_JunctionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking_JunctionList >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::hz::Roadmarking* Arena::CreateMaybeMessage< ::perception::hz::Roadmarking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::hz::Roadmarking >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
