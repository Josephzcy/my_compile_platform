// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parking_object.proto

#include "parking_object.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Co2Point2f_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Co3Point1f_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Co3Point2f_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Detect2dData_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Detect3dData_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageInfo_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectBev_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectMono3d_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ObjectTrack_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ObjectTrackV1_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectV1_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OdomInfo_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2f_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3f_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrackDebugObject_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackEgoState_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackMixTargetState_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackModel_parking_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parking_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VehicleInfo_parking_5fobject_2eproto;
namespace minieye {
namespace parking {
class Point2fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point2f> _instance;
} _Point2f_default_instance_;
class Point3fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point3f> _instance;
} _Point3f_default_instance_;
class ObjectV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectV1> _instance;
} _ObjectV1_default_instance_;
class ObjectListV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectListV1> _instance;
} _ObjectListV1_default_instance_;
class Co3Point2fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Co3Point2f> _instance;
} _Co3Point2f_default_instance_;
class Co3Point1fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Co3Point1f> _instance;
} _Co3Point1f_default_instance_;
class Co2Point2fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Co2Point2f> _instance;
} _Co2Point2f_default_instance_;
class ObjectTrackV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectTrackV1> _instance;
} _ObjectTrackV1_default_instance_;
class ObjectTrackListV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectTrackListV1> _instance;
} _ObjectTrackListV1_default_instance_;
class ObjectBevDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectBev> _instance;
} _ObjectBev_default_instance_;
class Detect2dDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Detect2dData> _instance;
} _Detect2dData_default_instance_;
class Detect3dDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Detect3dData> _instance;
} _Detect3dData_default_instance_;
class ObjectMono3dDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectMono3d> _instance;
} _ObjectMono3d_default_instance_;
class ObjectListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectList> _instance;
} _ObjectList_default_instance_;
class ImageInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageInfo> _instance;
} _ImageInfo_default_instance_;
class VehicleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleInfo> _instance;
} _VehicleInfo_default_instance_;
class OdomInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OdomInfo> _instance;
} _OdomInfo_default_instance_;
class ObjectTrackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectTrack> _instance;
} _ObjectTrack_default_instance_;
class ObjectTrackListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectTrackList> _instance;
} _ObjectTrackList_default_instance_;
class TrackDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackDebug> _instance;
} _TrackDebug_default_instance_;
class TrackDebugObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackDebugObject> _instance;
} _TrackDebugObject_default_instance_;
class TrackMixTargetStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackMixTargetState> _instance;
} _TrackMixTargetState_default_instance_;
class TrackEgoStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackEgoState> _instance;
} _TrackEgoState_default_instance_;
class TrackModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackModel> _instance;
} _TrackModel_default_instance_;
}  // namespace parking
}  // namespace minieye
static void InitDefaultsscc_info_Co2Point2f_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_Co2Point2f_default_instance_;
    new (ptr) ::minieye::parking::Co2Point2f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::Co2Point2f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Co2Point2f_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Co2Point2f_parking_5fobject_2eproto}, {
      &scc_info_Point2f_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_Co3Point1f_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_Co3Point1f_default_instance_;
    new (ptr) ::minieye::parking::Co3Point1f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::Co3Point1f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Co3Point1f_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Co3Point1f_parking_5fobject_2eproto}, {}};

static void InitDefaultsscc_info_Co3Point2f_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_Co3Point2f_default_instance_;
    new (ptr) ::minieye::parking::Co3Point2f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::Co3Point2f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Co3Point2f_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Co3Point2f_parking_5fobject_2eproto}, {
      &scc_info_Point2f_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_Detect2dData_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_Detect2dData_default_instance_;
    new (ptr) ::minieye::parking::Detect2dData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::Detect2dData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Detect2dData_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Detect2dData_parking_5fobject_2eproto}, {
      &scc_info_Point2f_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_Detect3dData_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_Detect3dData_default_instance_;
    new (ptr) ::minieye::parking::Detect3dData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::Detect3dData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Detect3dData_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Detect3dData_parking_5fobject_2eproto}, {
      &scc_info_Point3f_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_ImageInfo_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ImageInfo_default_instance_;
    new (ptr) ::minieye::parking::ImageInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ImageInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageInfo_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageInfo_parking_5fobject_2eproto}, {
      &scc_info_Point2f_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_ObjectBev_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ObjectBev_default_instance_;
    new (ptr) ::minieye::parking::ObjectBev();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ObjectBev::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectBev_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectBev_parking_5fobject_2eproto}, {
      &scc_info_Point2f_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_ObjectList_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ObjectList_default_instance_;
    new (ptr) ::minieye::parking::ObjectList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ObjectList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectList_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectList_parking_5fobject_2eproto}, {
      &scc_info_ObjectBev_parking_5fobject_2eproto.base,
      &scc_info_ObjectMono3d_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_ObjectListV1_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ObjectListV1_default_instance_;
    new (ptr) ::minieye::parking::ObjectListV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ObjectListV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectListV1_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectListV1_parking_5fobject_2eproto}, {
      &scc_info_ObjectV1_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_ObjectMono3d_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ObjectMono3d_default_instance_;
    new (ptr) ::minieye::parking::ObjectMono3d();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ObjectMono3d::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectMono3d_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectMono3d_parking_5fobject_2eproto}, {
      &scc_info_Detect2dData_parking_5fobject_2eproto.base,
      &scc_info_Detect3dData_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_ObjectTrack_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ObjectTrack_default_instance_;
    new (ptr) ::minieye::parking::ObjectTrack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ObjectTrack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ObjectTrack_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ObjectTrack_parking_5fobject_2eproto}, {
      &scc_info_ImageInfo_parking_5fobject_2eproto.base,
      &scc_info_VehicleInfo_parking_5fobject_2eproto.base,
      &scc_info_OdomInfo_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_ObjectTrackList_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ObjectTrackList_default_instance_;
    new (ptr) ::minieye::parking::ObjectTrackList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ObjectTrackList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectTrackList_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectTrackList_parking_5fobject_2eproto}, {
      &scc_info_ObjectTrack_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_ObjectTrackListV1_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ObjectTrackListV1_default_instance_;
    new (ptr) ::minieye::parking::ObjectTrackListV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ObjectTrackListV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectTrackListV1_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectTrackListV1_parking_5fobject_2eproto}, {
      &scc_info_ObjectTrackV1_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_ObjectTrackV1_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ObjectTrackV1_default_instance_;
    new (ptr) ::minieye::parking::ObjectTrackV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ObjectTrackV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ObjectTrackV1_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ObjectTrackV1_parking_5fobject_2eproto}, {
      &scc_info_Co3Point2f_parking_5fobject_2eproto.base,
      &scc_info_Co3Point1f_parking_5fobject_2eproto.base,
      &scc_info_Co2Point2f_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_ObjectV1_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ObjectV1_default_instance_;
    new (ptr) ::minieye::parking::ObjectV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ObjectV1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectV1_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectV1_parking_5fobject_2eproto}, {
      &scc_info_Point2f_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_OdomInfo_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_OdomInfo_default_instance_;
    new (ptr) ::minieye::parking::OdomInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::OdomInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OdomInfo_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OdomInfo_parking_5fobject_2eproto}, {
      &scc_info_Point2f_parking_5fobject_2eproto.base,
      &scc_info_Point3f_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_Point2f_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_Point2f_default_instance_;
    new (ptr) ::minieye::parking::Point2f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::Point2f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2f_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point2f_parking_5fobject_2eproto}, {}};

static void InitDefaultsscc_info_Point3f_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_Point3f_default_instance_;
    new (ptr) ::minieye::parking::Point3f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::Point3f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3f_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point3f_parking_5fobject_2eproto}, {}};

static void InitDefaultsscc_info_TrackDebug_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_TrackDebug_default_instance_;
    new (ptr) ::minieye::parking::TrackDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::TrackDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrackDebug_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrackDebug_parking_5fobject_2eproto}, {
      &scc_info_TrackEgoState_parking_5fobject_2eproto.base,
      &scc_info_TrackDebugObject_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_TrackDebugObject_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_TrackDebugObject_default_instance_;
    new (ptr) ::minieye::parking::TrackDebugObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::TrackDebugObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrackDebugObject_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrackDebugObject_parking_5fobject_2eproto}, {
      &scc_info_ObjectMono3d_parking_5fobject_2eproto.base,
      &scc_info_TrackModel_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_TrackEgoState_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_TrackEgoState_default_instance_;
    new (ptr) ::minieye::parking::TrackEgoState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::TrackEgoState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackEgoState_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrackEgoState_parking_5fobject_2eproto}, {}};

static void InitDefaultsscc_info_TrackMixTargetState_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_TrackMixTargetState_default_instance_;
    new (ptr) ::minieye::parking::TrackMixTargetState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::TrackMixTargetState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackMixTargetState_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrackMixTargetState_parking_5fobject_2eproto}, {}};

static void InitDefaultsscc_info_TrackModel_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_TrackModel_default_instance_;
    new (ptr) ::minieye::parking::TrackModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::TrackModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackModel_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrackModel_parking_5fobject_2eproto}, {
      &scc_info_TrackMixTargetState_parking_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_VehicleInfo_parking_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_VehicleInfo_default_instance_;
    new (ptr) ::minieye::parking::VehicleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::VehicleInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VehicleInfo_parking_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VehicleInfo_parking_5fobject_2eproto}, {
      &scc_info_Point2f_parking_5fobject_2eproto.base,
      &scc_info_Point3f_parking_5fobject_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_parking_5fobject_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_parking_5fobject_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_parking_5fobject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_parking_5fobject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Point2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Point2f, x_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Point2f, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Point3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Point3f, x_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Point3f, y_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Point3f, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectV1, type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectV1, locate_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectV1, size_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectV1, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectListV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectListV1, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectListV1, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectListV1, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectListV1, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Co3Point2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Co3Point2f, image_pt_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Co3Point2f, vehicle_pt_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Co3Point2f, odom_pt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Co3Point1f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Co3Point1f, image_pt_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Co3Point1f, vehicle_pt_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Co3Point1f, odom_pt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Co2Point2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Co2Point2f, image_pt_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Co2Point2f, vehicle_pt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackV1, locate_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackV1, pre_locate_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackV1, rotation_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackV1, velocity_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackV1, size_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackV1, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackListV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackListV1, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackListV1, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackListV1, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackListV1, vehicles_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackListV1, pedestrians_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackListV1, cones_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectBev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectBev, type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectBev, locate_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectBev, size_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectBev, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Detect2dData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Detect2dData, lupoint_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Detect2dData, rdpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Detect3dData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Detect3dData, center_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Detect3dData, boxsize_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::Detect3dData, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectMono3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectMono3d, type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectMono3d, score_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectMono3d, cameraid_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectMono3d, box2d_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectMono3d, box3d_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectList, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectList, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectList, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectList, list_object_bev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectList, list_object_3d_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ImageInfo, position_value_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ImageInfo, heading_value_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ImageInfo, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::VehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::VehicleInfo, position_value_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::VehicleInfo, position_variance_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::VehicleInfo, velocity_value_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::VehicleInfo, velocity_variance_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::VehicleInfo, heading_value_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::VehicleInfo, heading_variance_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::VehicleInfo, palstance_value_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::VehicleInfo, palstance_variance_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::VehicleInfo, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::OdomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::OdomInfo, position_value_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::OdomInfo, position_variance_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::OdomInfo, velocity_value_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::OdomInfo, velocity_variance_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::OdomInfo, heading_value_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::OdomInfo, heading_variance_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::OdomInfo, palstance_value_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::OdomInfo, palstance_variance_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::OdomInfo, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrack, id_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrack, type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrack, track_status_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrack, motion_status_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrack, img_info_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrack, vehicle_info_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrack, odom_info_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrack, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackList, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackList, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackList, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ObjectTrackList, object_track_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackDebug, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackDebug, timestamp_us_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackDebug, tick_us_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackDebug, ego_state_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackDebug, ego_cov_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackDebug, objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackDebugObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackDebugObject, id_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackDebugObject, type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackDebugObject, detections_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackDebugObject, models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackMixTargetState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackMixTargetState, x_v_vt_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackMixTargetState, y_v_vt_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackMixTargetState, psi_vt_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackMixTargetState, w_gt_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackMixTargetState, v_gt_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackMixTargetState, a_gt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackEgoState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackEgoState, dx_m_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackEgoState, dy_m_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackEgoState, dyaw_rad_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackModel, type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackModel, prob_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackModel, prior_state_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackModel, prior_cov_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackModel, posterior_state_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::TrackModel, posterior_cov_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::parking::Point2f)},
  { 7, -1, sizeof(::minieye::parking::Point3f)},
  { 15, -1, sizeof(::minieye::parking::ObjectV1)},
  { 24, -1, sizeof(::minieye::parking::ObjectListV1)},
  { 33, -1, sizeof(::minieye::parking::Co3Point2f)},
  { 41, -1, sizeof(::minieye::parking::Co3Point1f)},
  { 49, -1, sizeof(::minieye::parking::Co2Point2f)},
  { 56, -1, sizeof(::minieye::parking::ObjectTrackV1)},
  { 67, -1, sizeof(::minieye::parking::ObjectTrackListV1)},
  { 78, -1, sizeof(::minieye::parking::ObjectBev)},
  { 87, -1, sizeof(::minieye::parking::Detect2dData)},
  { 94, -1, sizeof(::minieye::parking::Detect3dData)},
  { 102, -1, sizeof(::minieye::parking::ObjectMono3d)},
  { 112, -1, sizeof(::minieye::parking::ObjectList)},
  { 122, -1, sizeof(::minieye::parking::ImageInfo)},
  { 130, -1, sizeof(::minieye::parking::VehicleInfo)},
  { 144, -1, sizeof(::minieye::parking::OdomInfo)},
  { 158, -1, sizeof(::minieye::parking::ObjectTrack)},
  { 171, -1, sizeof(::minieye::parking::ObjectTrackList)},
  { 180, -1, sizeof(::minieye::parking::TrackDebug)},
  { 191, -1, sizeof(::minieye::parking::TrackDebugObject)},
  { 200, -1, sizeof(::minieye::parking::TrackMixTargetState)},
  { 211, -1, sizeof(::minieye::parking::TrackEgoState)},
  { 219, -1, sizeof(::minieye::parking::TrackModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_Point2f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_Point3f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ObjectV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ObjectListV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_Co3Point2f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_Co3Point1f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_Co2Point2f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ObjectTrackV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ObjectTrackListV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ObjectBev_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_Detect2dData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_Detect3dData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ObjectMono3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ObjectList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ImageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_VehicleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_OdomInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ObjectTrack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ObjectTrackList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_TrackDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_TrackDebugObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_TrackMixTargetState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_TrackEgoState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_TrackModel_default_instance_),
};

const char descriptor_table_protodef_parking_5fobject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024parking_object.proto\022\017minieye.parking\""
  "\037\n\007Point2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"*\n\007Poin"
  "t3f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\231\001\n"
  "\010ObjectV1\022)\n\004type\030\001 \001(\0162\033.minieye.parkin"
  "g.ObjectType\022(\n\006locate\030\002 \001(\0132\030.minieye.p"
  "arking.Point2f\022&\n\004size\030\003 \001(\0132\030.minieye.p"
  "arking.Point2f\022\020\n\010rotation\030\004 \001(\002\"j\n\014Obje"
  "ctListV1\022\020\n\010frame_id\030\001 \001(\004\022\021\n\ttimestamp\030"
  "\002 \001(\004\022\014\n\004tick\030\003 \001(\004\022\'\n\004list\030\004 \003(\0132\031.mini"
  "eye.parking.ObjectV1\"\221\001\n\nCo3Point2f\022*\n\010i"
  "mage_pt\030\001 \001(\0132\030.minieye.parking.Point2f\022"
  ",\n\nvehicle_pt\030\002 \001(\0132\030.minieye.parking.Po"
  "int2f\022)\n\007odom_pt\030\003 \001(\0132\030.minieye.parking"
  ".Point2f\"C\n\nCo3Point1f\022\020\n\010image_pt\030\001 \001(\002"
  "\022\022\n\nvehicle_pt\030\002 \001(\002\022\017\n\007odom_pt\030\003 \001(\002\"f\n"
  "\nCo2Point2f\022*\n\010image_pt\030\001 \001(\0132\030.minieye."
  "parking.Point2f\022,\n\nvehicle_pt\030\002 \001(\0132\030.mi"
  "nieye.parking.Point2f\"\202\002\n\rObjectTrackV1\022"
  "+\n\006locate\030\001 \001(\0132\033.minieye.parking.Co3Poi"
  "nt2f\022/\n\npre_locate\030\002 \001(\0132\033.minieye.parki"
  "ng.Co3Point2f\022-\n\010rotation\030\003 \001(\0132\033.miniey"
  "e.parking.Co3Point1f\022-\n\010velocity\030\004 \001(\0132\033"
  ".minieye.parking.Co3Point2f\022)\n\004size\030\005 \001("
  "\0132\033.minieye.parking.Co2Point2f\022\n\n\002id\030\006 \001"
  "(\r\"\334\001\n\021ObjectTrackListV1\022\020\n\010frame_id\030\001 \001"
  "(\004\022\021\n\ttimestamp\030\002 \001(\004\022\014\n\004tick\030\003 \001(\004\0220\n\010v"
  "ehicles\030\004 \003(\0132\036.minieye.parking.ObjectTr"
  "ackV1\0223\n\013pedestrians\030\005 \003(\0132\036.minieye.par"
  "king.ObjectTrackV1\022-\n\005cones\030\006 \003(\0132\036.mini"
  "eye.parking.ObjectTrackV1\"\225\001\n\tObjectBev\022"
  ")\n\004type\030\001 \001(\0162\033.minieye.parking.ObjectTy"
  "pe\022(\n\006locate\030\002 \001(\0132\030.minieye.parking.Poi"
  "nt2f\022&\n\004size\030\003 \001(\0132\030.minieye.parking.Poi"
  "nt2f\022\013\n\003yaw\030\004 \001(\002\"d\n\014Detect2dData\022)\n\007LUP"
  "oint\030\001 \001(\0132\030.minieye.parking.Point2f\022)\n\007"
  "RDPoint\030\002 \001(\0132\030.minieye.parking.Point2f\""
  "p\n\014Detect3dData\022(\n\006center\030\001 \001(\0132\030.miniey"
  "e.parking.Point3f\022)\n\007boxsize\030\002 \001(\0132\030.min"
  "ieye.parking.Point3f\022\013\n\003yaw\030\003 \001(\002\"\321\001\n\014Ob"
  "jectMono3d\022)\n\004type\030\001 \001(\0162\033.minieye.parki"
  "ng.ObjectType\022\r\n\005score\030\002 \001(\002\022+\n\010cameraid"
  "\030\003 \001(\0162\031.minieye.parking.CameraId\022,\n\005box"
  "2d\030\004 \001(\0132\035.minieye.parking.Detect2dData\022"
  ",\n\005box3d\030\005 \001(\0132\035.minieye.parking.Detect3"
  "dData\"\253\001\n\nObjectList\022\020\n\010frame_id\030\001 \001(\004\022\021"
  "\n\ttimestamp\030\002 \001(\004\022\014\n\004tick\030\003 \001(\004\0223\n\017list_"
  "object_bev\030\004 \003(\0132\032.minieye.parking.Objec"
  "tBev\0225\n\016list_object_3d\030\005 \003(\0132\035.minieye.p"
  "arking.ObjectMono3d\"|\n\tImageInfo\0220\n\016posi"
  "tion_value\030\001 \001(\0132\030.minieye.parking.Point"
  "2f\022\025\n\rheading_value\030\002 \001(\002\022&\n\004size\030\003 \001(\0132"
  "\030.minieye.parking.Point2f\"\351\002\n\013VehicleInf"
  "o\0220\n\016position_value\030\001 \001(\0132\030.minieye.park"
  "ing.Point2f\0223\n\021position_variance\030\002 \001(\0132\030"
  ".minieye.parking.Point2f\0220\n\016velocity_val"
  "ue\030\003 \001(\0132\030.minieye.parking.Point2f\0223\n\021ve"
  "locity_variance\030\004 \001(\0132\030.minieye.parking."
  "Point2f\022\025\n\rheading_value\030\005 \001(\002\022\030\n\020headin"
  "g_variance\030\006 \001(\002\022\027\n\017palstance_value\030\007 \001("
  "\002\022\032\n\022palstance_variance\030\010 \001(\002\022&\n\004size\030\t "
  "\001(\0132\030.minieye.parking.Point3f\"\346\002\n\010OdomIn"
  "fo\0220\n\016position_value\030\001 \001(\0132\030.minieye.par"
  "king.Point2f\0223\n\021position_variance\030\002 \001(\0132"
  "\030.minieye.parking.Point2f\0220\n\016velocity_va"
  "lue\030\003 \001(\0132\030.minieye.parking.Point2f\0223\n\021v"
  "elocity_variance\030\004 \001(\0132\030.minieye.parking"
  ".Point2f\022\025\n\rheading_value\030\005 \001(\002\022\030\n\020headi"
  "ng_variance\030\006 \001(\002\022\027\n\017palstance_value\030\007 \001"
  "(\002\022\032\n\022palstance_variance\030\010 \001(\002\022&\n\004size\030\t"
  " \001(\0132\030.minieye.parking.Point3f\"\320\002\n\013Objec"
  "tTrack\022\n\n\002id\030\001 \001(\r\022)\n\004type\030\002 \001(\0162\033.minie"
  "ye.parking.ObjectType\0225\n\014track_status\030\003 "
  "\001(\0162\037.minieye.parking.TrackingStatus\0224\n\r"
  "motion_status\030\004 \001(\0162\035.minieye.parking.Mo"
  "tionStatus\022,\n\010img_info\030\005 \001(\0132\032.minieye.p"
  "arking.ImageInfo\0222\n\014vehicle_info\030\006 \001(\0132\034"
  ".minieye.parking.VehicleInfo\022,\n\todom_inf"
  "o\030\007 \001(\0132\031.minieye.parking.OdomInfo\022\r\n\005sc"
  "ore\030\010 \001(\002\"}\n\017ObjectTrackList\022\020\n\010frame_id"
  "\030\001 \001(\004\022\021\n\ttimestamp\030\002 \001(\004\022\014\n\004tick\030\003 \001(\004\022"
  "7\n\021object_track_list\030\004 \003(\0132\034.minieye.par"
  "king.ObjectTrack\"\335\001\n\nTrackDebug\022\020\n\010frame"
  "_id\030\001 \001(\004\022\024\n\014timestamp_us\030\002 \001(\004\022\017\n\007tick_"
  "us\030\003 \001(\004\0221\n\tego_state\030\004 \001(\0132\036.minieye.pa"
  "rking.TrackEgoState\022/\n\007ego_cov\030\005 \001(\0132\036.m"
  "inieye.parking.TrackEgoState\0222\n\007objects\030"
  "\006 \003(\0132!.minieye.parking.TrackDebugObject"
  "\"\251\001\n\020TrackDebugObject\022\n\n\002id\030\001 \001(\r\022)\n\004typ"
  "e\030\002 \001(\0162\033.minieye.parking.ObjectType\0221\n\n"
  "detections\030\003 \003(\0132\035.minieye.parking.Objec"
  "tMono3d\022+\n\006models\030\004 \003(\0132\033.minieye.parkin"
  "g.TrackModel\"o\n\023TrackMixTargetState\022\016\n\006x"
  "_v_vt\030\001 \001(\002\022\016\n\006y_v_vt\030\002 \001(\002\022\016\n\006psi_vt\030\003 "
  "\001(\002\022\014\n\004w_gt\030\004 \001(\002\022\014\n\004v_gt\030\005 \001(\002\022\014\n\004a_gt\030"
  "\006 \001(\002\"=\n\rTrackEgoState\022\014\n\004dx_m\030\001 \001(\002\022\014\n\004"
  "dy_m\030\002 \001(\002\022\020\n\010dyaw_rad\030\003 \001(\002\"\271\002\n\nTrackMo"
  "del\022-\n\004type\030\001 \001(\0162\037.minieye.parking.Trac"
  "kModelType\022\014\n\004prob\030\002 \001(\002\0229\n\013prior_state\030"
  "\003 \001(\0132$.minieye.parking.TrackMixTargetSt"
  "ate\0227\n\tprior_cov\030\004 \001(\0132$.minieye.parking"
  ".TrackMixTargetState\022=\n\017posterior_state\030"
  "\005 \001(\0132$.minieye.parking.TrackMixTargetSt"
  "ate\022;\n\rposterior_cov\030\006 \001(\0132$.minieye.par"
  "king.TrackMixTargetState*\221\001\n\nObjectType\022"
  "\t\n\005kNone\020\000\022\014\n\010kVehicle\020\001\022\r\n\tkWheelTwo\020\002\022"
  "\n\n\006kRider\020\003\022\010\n\004kPed\020\004\022\t\n\005kCone\020\005\022\n\n\006kWsi"
  "gn\020\006\022\n\n\006kStone\020\007\022\n\n\006kPiles\020\010\022\t\n\005kLock\020\t\022"
  "\013\n\007kPillar\020\n*\236\001\n\010CameraId\022\017\n\013kCameraNone"
  "\020\000\022\021\n\rkFisheyeFront\020\001\022\020\n\014kFisheyeRear\020\002\022"
  "\020\n\014kFisheyeLeft\020\003\022\021\n\rkFisheyeRight\020\004\022\016\n\n"
  "kMainFront\020\005\022\022\n\016kFrontSideLeft\020\006\022\023\n\017kFro"
  "ntSideRight\020\007*C\n\016TrackingStatus\022\t\n\005kInit"
  "\020\000\022\014\n\010kPredict\020\001\022\r\n\tkTracking\020\002\022\t\n\005kLost"
  "\020\004*R\n\014MotionStatus\022\013\n\007kStatic\020\000\022\023\n\017kStat"
  "icToMoving\020\001\022\023\n\017kMovingToStatic\020\002\022\013\n\007kMo"
  "ving\020\003*s\n\016TrackModelType\022\021\n\rkTrackModelC"
  "V\020\000\022\021\n\rkTrackModelZV\020\001\022\021\n\rkTrackModelCA\020"
  "\002\022\023\n\017kTrackModelCTRV\020\003\022\023\n\017kTrackModelCTR"
  "A\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_parking_5fobject_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_parking_5fobject_2eproto_sccs[24] = {
  &scc_info_Co2Point2f_parking_5fobject_2eproto.base,
  &scc_info_Co3Point1f_parking_5fobject_2eproto.base,
  &scc_info_Co3Point2f_parking_5fobject_2eproto.base,
  &scc_info_Detect2dData_parking_5fobject_2eproto.base,
  &scc_info_Detect3dData_parking_5fobject_2eproto.base,
  &scc_info_ImageInfo_parking_5fobject_2eproto.base,
  &scc_info_ObjectBev_parking_5fobject_2eproto.base,
  &scc_info_ObjectList_parking_5fobject_2eproto.base,
  &scc_info_ObjectListV1_parking_5fobject_2eproto.base,
  &scc_info_ObjectMono3d_parking_5fobject_2eproto.base,
  &scc_info_ObjectTrack_parking_5fobject_2eproto.base,
  &scc_info_ObjectTrackList_parking_5fobject_2eproto.base,
  &scc_info_ObjectTrackListV1_parking_5fobject_2eproto.base,
  &scc_info_ObjectTrackV1_parking_5fobject_2eproto.base,
  &scc_info_ObjectV1_parking_5fobject_2eproto.base,
  &scc_info_OdomInfo_parking_5fobject_2eproto.base,
  &scc_info_Point2f_parking_5fobject_2eproto.base,
  &scc_info_Point3f_parking_5fobject_2eproto.base,
  &scc_info_TrackDebug_parking_5fobject_2eproto.base,
  &scc_info_TrackDebugObject_parking_5fobject_2eproto.base,
  &scc_info_TrackEgoState_parking_5fobject_2eproto.base,
  &scc_info_TrackMixTargetState_parking_5fobject_2eproto.base,
  &scc_info_TrackModel_parking_5fobject_2eproto.base,
  &scc_info_VehicleInfo_parking_5fobject_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_parking_5fobject_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parking_5fobject_2eproto = {
  false, false, descriptor_table_protodef_parking_5fobject_2eproto, "parking_object.proto", 4731,
  &descriptor_table_parking_5fobject_2eproto_once, descriptor_table_parking_5fobject_2eproto_sccs, descriptor_table_parking_5fobject_2eproto_deps, 24, 0,
  schemas, file_default_instances, TableStruct_parking_5fobject_2eproto::offsets,
  file_level_metadata_parking_5fobject_2eproto, 24, file_level_enum_descriptors_parking_5fobject_2eproto, file_level_service_descriptors_parking_5fobject_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_parking_5fobject_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_parking_5fobject_2eproto)), true);
namespace minieye {
namespace parking {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_parking_5fobject_2eproto);
  return file_level_enum_descriptors_parking_5fobject_2eproto[0];
}
bool ObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_parking_5fobject_2eproto);
  return file_level_enum_descriptors_parking_5fobject_2eproto[1];
}
bool CameraId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackingStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_parking_5fobject_2eproto);
  return file_level_enum_descriptors_parking_5fobject_2eproto[2];
}
bool TrackingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_parking_5fobject_2eproto);
  return file_level_enum_descriptors_parking_5fobject_2eproto[3];
}
bool MotionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_parking_5fobject_2eproto);
  return file_level_enum_descriptors_parking_5fobject_2eproto[4];
}
bool TrackModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Point2f::InitAsDefaultInstance() {
}
class Point2f::_Internal {
 public:
};

Point2f::Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.Point2f)
}
Point2f::Point2f(const Point2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.Point2f)
}

void Point2f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2f::~Point2f() {
  // @@protoc_insertion_point(destructor:minieye.parking.Point2f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point2f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point2f::ArenaDtor(void* object) {
  Point2f* _this = reinterpret_cast< Point2f* >(object);
  (void)_this;
}
void Point2f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point2f& Point2f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point2f_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void Point2f::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.Point2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.Point2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.Point2f)
  return target;
}

size_t Point2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.Point2f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point2f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.Point2f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.Point2f)
    MergeFrom(*source);
  }
}

void Point2f::MergeFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point2f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2f::CopyFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2f::IsInitialized() const {
  return true;
}

void Point2f::InternalSwap(Point2f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2f, y_)
      + sizeof(Point2f::y_)
      - PROTOBUF_FIELD_OFFSET(Point2f, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point3f::InitAsDefaultInstance() {
}
class Point3f::_Internal {
 public:
};

Point3f::Point3f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.Point3f)
}
Point3f::Point3f(const Point3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.Point3f)
}

void Point3f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3f::~Point3f() {
  // @@protoc_insertion_point(destructor:minieye.parking.Point3f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point3f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point3f::ArenaDtor(void* object) {
  Point3f* _this = reinterpret_cast< Point3f* >(object);
  (void)_this;
}
void Point3f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point3f& Point3f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point3f_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void Point3f::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.Point3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point3f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.Point3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.Point3f)
  return target;
}

size_t Point3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.Point3f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.Point3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point3f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.Point3f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.Point3f)
    MergeFrom(*source);
  }
}

void Point3f::MergeFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.Point3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point3f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3f::CopyFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3f::IsInitialized() const {
  return true;
}

void Point3f::InternalSwap(Point3f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3f, z_)
      + sizeof(Point3f::z_)
      - PROTOBUF_FIELD_OFFSET(Point3f, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectV1::InitAsDefaultInstance() {
  ::minieye::parking::_ObjectV1_default_instance_._instance.get_mutable()->locate_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_ObjectV1_default_instance_._instance.get_mutable()->size_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
}
class ObjectV1::_Internal {
 public:
  static const ::minieye::parking::Point2f& locate(const ObjectV1* msg);
  static const ::minieye::parking::Point2f& size(const ObjectV1* msg);
};

const ::minieye::parking::Point2f&
ObjectV1::_Internal::locate(const ObjectV1* msg) {
  return *msg->locate_;
}
const ::minieye::parking::Point2f&
ObjectV1::_Internal::size(const ObjectV1* msg) {
  return *msg->size_;
}
ObjectV1::ObjectV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ObjectV1)
}
ObjectV1::ObjectV1(const ObjectV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_locate()) {
    locate_ = new ::minieye::parking::Point2f(*from.locate_);
  } else {
    locate_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::minieye::parking::Point2f(*from.size_);
  } else {
    size_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&type_)) + sizeof(rotation_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ObjectV1)
}

void ObjectV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectV1_parking_5fobject_2eproto.base);
  ::memset(&locate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&locate_)) + sizeof(rotation_));
}

ObjectV1::~ObjectV1() {
  // @@protoc_insertion_point(destructor:minieye.parking.ObjectV1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectV1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete locate_;
  if (this != internal_default_instance()) delete size_;
}

void ObjectV1::ArenaDtor(void* object) {
  ObjectV1* _this = reinterpret_cast< ObjectV1* >(object);
  (void)_this;
}
void ObjectV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectV1& ObjectV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectV1_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ObjectV1::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ObjectV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && locate_ != nullptr) {
    delete locate_;
  }
  locate_ = nullptr;
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&type_)) + sizeof(rotation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.ObjectType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::minieye::parking::ObjectType>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f locate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_locate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ObjectV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.ObjectType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .minieye.parking.Point2f locate = 2;
  if (this->has_locate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::locate(this), target, stream);
  }

  // .minieye.parking.Point2f size = 3;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::size(this), target, stream);
  }

  // float rotation = 4;
  if (!(this->rotation() <= 0 && this->rotation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_rotation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ObjectV1)
  return target;
}

size_t ObjectV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ObjectV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.Point2f locate = 2;
  if (this->has_locate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locate_);
  }

  // .minieye.parking.Point2f size = 3;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .minieye.parking.ObjectType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float rotation = 4;
  if (!(this->rotation() <= 0 && this->rotation() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ObjectV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ObjectV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ObjectV1)
    MergeFrom(*source);
  }
}

void ObjectV1::MergeFrom(const ObjectV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ObjectV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_locate()) {
    _internal_mutable_locate()->::minieye::parking::Point2f::MergeFrom(from._internal_locate());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::minieye::parking::Point2f::MergeFrom(from._internal_size());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.rotation() <= 0 && from.rotation() >= 0)) {
    _internal_set_rotation(from._internal_rotation());
  }
}

void ObjectV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ObjectV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectV1::CopyFrom(const ObjectV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ObjectV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectV1::IsInitialized() const {
  return true;
}

void ObjectV1::InternalSwap(ObjectV1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectV1, rotation_)
      + sizeof(ObjectV1::rotation_)
      - PROTOBUF_FIELD_OFFSET(ObjectV1, locate_)>(
          reinterpret_cast<char*>(&locate_),
          reinterpret_cast<char*>(&other->locate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectListV1::InitAsDefaultInstance() {
}
class ObjectListV1::_Internal {
 public:
};

ObjectListV1::ObjectListV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ObjectListV1)
}
ObjectListV1::ObjectListV1(const ObjectListV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ObjectListV1)
}

void ObjectListV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectListV1_parking_5fobject_2eproto.base);
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
}

ObjectListV1::~ObjectListV1() {
  // @@protoc_insertion_point(destructor:minieye.parking.ObjectListV1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectListV1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObjectListV1::ArenaDtor(void* object) {
  ObjectListV1* _this = reinterpret_cast< ObjectListV1* >(object);
  (void)_this;
}
void ObjectListV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectListV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectListV1& ObjectListV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectListV1_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ObjectListV1::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ObjectListV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectListV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.ObjectV1 list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectListV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ObjectListV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  // repeated .minieye.parking.ObjectV1 list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ObjectListV1)
  return target;
}

size_t ObjectListV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ObjectListV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.parking.ObjectV1 list = 4;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectListV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ObjectListV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectListV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectListV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ObjectListV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ObjectListV1)
    MergeFrom(*source);
  }
}

void ObjectListV1::MergeFrom(const ObjectListV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ObjectListV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void ObjectListV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ObjectListV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectListV1::CopyFrom(const ObjectListV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ObjectListV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectListV1::IsInitialized() const {
  return true;
}

void ObjectListV1::InternalSwap(ObjectListV1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectListV1, tick_)
      + sizeof(ObjectListV1::tick_)
      - PROTOBUF_FIELD_OFFSET(ObjectListV1, frame_id_)>(
          reinterpret_cast<char*>(&frame_id_),
          reinterpret_cast<char*>(&other->frame_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectListV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Co3Point2f::InitAsDefaultInstance() {
  ::minieye::parking::_Co3Point2f_default_instance_._instance.get_mutable()->image_pt_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_Co3Point2f_default_instance_._instance.get_mutable()->vehicle_pt_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_Co3Point2f_default_instance_._instance.get_mutable()->odom_pt_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
}
class Co3Point2f::_Internal {
 public:
  static const ::minieye::parking::Point2f& image_pt(const Co3Point2f* msg);
  static const ::minieye::parking::Point2f& vehicle_pt(const Co3Point2f* msg);
  static const ::minieye::parking::Point2f& odom_pt(const Co3Point2f* msg);
};

const ::minieye::parking::Point2f&
Co3Point2f::_Internal::image_pt(const Co3Point2f* msg) {
  return *msg->image_pt_;
}
const ::minieye::parking::Point2f&
Co3Point2f::_Internal::vehicle_pt(const Co3Point2f* msg) {
  return *msg->vehicle_pt_;
}
const ::minieye::parking::Point2f&
Co3Point2f::_Internal::odom_pt(const Co3Point2f* msg) {
  return *msg->odom_pt_;
}
Co3Point2f::Co3Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.Co3Point2f)
}
Co3Point2f::Co3Point2f(const Co3Point2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image_pt()) {
    image_pt_ = new ::minieye::parking::Point2f(*from.image_pt_);
  } else {
    image_pt_ = nullptr;
  }
  if (from._internal_has_vehicle_pt()) {
    vehicle_pt_ = new ::minieye::parking::Point2f(*from.vehicle_pt_);
  } else {
    vehicle_pt_ = nullptr;
  }
  if (from._internal_has_odom_pt()) {
    odom_pt_ = new ::minieye::parking::Point2f(*from.odom_pt_);
  } else {
    odom_pt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minieye.parking.Co3Point2f)
}

void Co3Point2f::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Co3Point2f_parking_5fobject_2eproto.base);
  ::memset(&image_pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odom_pt_) -
      reinterpret_cast<char*>(&image_pt_)) + sizeof(odom_pt_));
}

Co3Point2f::~Co3Point2f() {
  // @@protoc_insertion_point(destructor:minieye.parking.Co3Point2f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Co3Point2f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_pt_;
  if (this != internal_default_instance()) delete vehicle_pt_;
  if (this != internal_default_instance()) delete odom_pt_;
}

void Co3Point2f::ArenaDtor(void* object) {
  Co3Point2f* _this = reinterpret_cast< Co3Point2f* >(object);
  (void)_this;
}
void Co3Point2f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Co3Point2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Co3Point2f& Co3Point2f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Co3Point2f_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void Co3Point2f::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.Co3Point2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && image_pt_ != nullptr) {
    delete image_pt_;
  }
  image_pt_ = nullptr;
  if (GetArena() == nullptr && vehicle_pt_ != nullptr) {
    delete vehicle_pt_;
  }
  vehicle_pt_ = nullptr;
  if (GetArena() == nullptr && odom_pt_ != nullptr) {
    delete odom_pt_;
  }
  odom_pt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Co3Point2f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.Point2f image_pt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f vehicle_pt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f odom_pt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_odom_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Co3Point2f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.Co3Point2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.Point2f image_pt = 1;
  if (this->has_image_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image_pt(this), target, stream);
  }

  // .minieye.parking.Point2f vehicle_pt = 2;
  if (this->has_vehicle_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vehicle_pt(this), target, stream);
  }

  // .minieye.parking.Point2f odom_pt = 3;
  if (this->has_odom_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::odom_pt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.Co3Point2f)
  return target;
}

size_t Co3Point2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.Co3Point2f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.Point2f image_pt = 1;
  if (this->has_image_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_pt_);
  }

  // .minieye.parking.Point2f vehicle_pt = 2;
  if (this->has_vehicle_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_pt_);
  }

  // .minieye.parking.Point2f odom_pt = 3;
  if (this->has_odom_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odom_pt_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Co3Point2f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.Co3Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Co3Point2f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Co3Point2f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.Co3Point2f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.Co3Point2f)
    MergeFrom(*source);
  }
}

void Co3Point2f::MergeFrom(const Co3Point2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.Co3Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image_pt()) {
    _internal_mutable_image_pt()->::minieye::parking::Point2f::MergeFrom(from._internal_image_pt());
  }
  if (from.has_vehicle_pt()) {
    _internal_mutable_vehicle_pt()->::minieye::parking::Point2f::MergeFrom(from._internal_vehicle_pt());
  }
  if (from.has_odom_pt()) {
    _internal_mutable_odom_pt()->::minieye::parking::Point2f::MergeFrom(from._internal_odom_pt());
  }
}

void Co3Point2f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.Co3Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Co3Point2f::CopyFrom(const Co3Point2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.Co3Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Co3Point2f::IsInitialized() const {
  return true;
}

void Co3Point2f::InternalSwap(Co3Point2f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Co3Point2f, odom_pt_)
      + sizeof(Co3Point2f::odom_pt_)
      - PROTOBUF_FIELD_OFFSET(Co3Point2f, image_pt_)>(
          reinterpret_cast<char*>(&image_pt_),
          reinterpret_cast<char*>(&other->image_pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Co3Point2f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Co3Point1f::InitAsDefaultInstance() {
}
class Co3Point1f::_Internal {
 public:
};

Co3Point1f::Co3Point1f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.Co3Point1f)
}
Co3Point1f::Co3Point1f(const Co3Point1f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&image_pt_, &from.image_pt_,
    static_cast<size_t>(reinterpret_cast<char*>(&odom_pt_) -
    reinterpret_cast<char*>(&image_pt_)) + sizeof(odom_pt_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.Co3Point1f)
}

void Co3Point1f::SharedCtor() {
  ::memset(&image_pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odom_pt_) -
      reinterpret_cast<char*>(&image_pt_)) + sizeof(odom_pt_));
}

Co3Point1f::~Co3Point1f() {
  // @@protoc_insertion_point(destructor:minieye.parking.Co3Point1f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Co3Point1f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Co3Point1f::ArenaDtor(void* object) {
  Co3Point1f* _this = reinterpret_cast< Co3Point1f* >(object);
  (void)_this;
}
void Co3Point1f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Co3Point1f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Co3Point1f& Co3Point1f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Co3Point1f_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void Co3Point1f::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.Co3Point1f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&image_pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odom_pt_) -
      reinterpret_cast<char*>(&image_pt_)) + sizeof(odom_pt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Co3Point1f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float image_pt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          image_pt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vehicle_pt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          vehicle_pt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float odom_pt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          odom_pt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Co3Point1f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.Co3Point1f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float image_pt = 1;
  if (!(this->image_pt() <= 0 && this->image_pt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_image_pt(), target);
  }

  // float vehicle_pt = 2;
  if (!(this->vehicle_pt() <= 0 && this->vehicle_pt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_vehicle_pt(), target);
  }

  // float odom_pt = 3;
  if (!(this->odom_pt() <= 0 && this->odom_pt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_odom_pt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.Co3Point1f)
  return target;
}

size_t Co3Point1f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.Co3Point1f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float image_pt = 1;
  if (!(this->image_pt() <= 0 && this->image_pt() >= 0)) {
    total_size += 1 + 4;
  }

  // float vehicle_pt = 2;
  if (!(this->vehicle_pt() <= 0 && this->vehicle_pt() >= 0)) {
    total_size += 1 + 4;
  }

  // float odom_pt = 3;
  if (!(this->odom_pt() <= 0 && this->odom_pt() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Co3Point1f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.Co3Point1f)
  GOOGLE_DCHECK_NE(&from, this);
  const Co3Point1f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Co3Point1f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.Co3Point1f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.Co3Point1f)
    MergeFrom(*source);
  }
}

void Co3Point1f::MergeFrom(const Co3Point1f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.Co3Point1f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.image_pt() <= 0 && from.image_pt() >= 0)) {
    _internal_set_image_pt(from._internal_image_pt());
  }
  if (!(from.vehicle_pt() <= 0 && from.vehicle_pt() >= 0)) {
    _internal_set_vehicle_pt(from._internal_vehicle_pt());
  }
  if (!(from.odom_pt() <= 0 && from.odom_pt() >= 0)) {
    _internal_set_odom_pt(from._internal_odom_pt());
  }
}

void Co3Point1f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.Co3Point1f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Co3Point1f::CopyFrom(const Co3Point1f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.Co3Point1f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Co3Point1f::IsInitialized() const {
  return true;
}

void Co3Point1f::InternalSwap(Co3Point1f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Co3Point1f, odom_pt_)
      + sizeof(Co3Point1f::odom_pt_)
      - PROTOBUF_FIELD_OFFSET(Co3Point1f, image_pt_)>(
          reinterpret_cast<char*>(&image_pt_),
          reinterpret_cast<char*>(&other->image_pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Co3Point1f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Co2Point2f::InitAsDefaultInstance() {
  ::minieye::parking::_Co2Point2f_default_instance_._instance.get_mutable()->image_pt_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_Co2Point2f_default_instance_._instance.get_mutable()->vehicle_pt_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
}
class Co2Point2f::_Internal {
 public:
  static const ::minieye::parking::Point2f& image_pt(const Co2Point2f* msg);
  static const ::minieye::parking::Point2f& vehicle_pt(const Co2Point2f* msg);
};

const ::minieye::parking::Point2f&
Co2Point2f::_Internal::image_pt(const Co2Point2f* msg) {
  return *msg->image_pt_;
}
const ::minieye::parking::Point2f&
Co2Point2f::_Internal::vehicle_pt(const Co2Point2f* msg) {
  return *msg->vehicle_pt_;
}
Co2Point2f::Co2Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.Co2Point2f)
}
Co2Point2f::Co2Point2f(const Co2Point2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image_pt()) {
    image_pt_ = new ::minieye::parking::Point2f(*from.image_pt_);
  } else {
    image_pt_ = nullptr;
  }
  if (from._internal_has_vehicle_pt()) {
    vehicle_pt_ = new ::minieye::parking::Point2f(*from.vehicle_pt_);
  } else {
    vehicle_pt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minieye.parking.Co2Point2f)
}

void Co2Point2f::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Co2Point2f_parking_5fobject_2eproto.base);
  ::memset(&image_pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_pt_) -
      reinterpret_cast<char*>(&image_pt_)) + sizeof(vehicle_pt_));
}

Co2Point2f::~Co2Point2f() {
  // @@protoc_insertion_point(destructor:minieye.parking.Co2Point2f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Co2Point2f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_pt_;
  if (this != internal_default_instance()) delete vehicle_pt_;
}

void Co2Point2f::ArenaDtor(void* object) {
  Co2Point2f* _this = reinterpret_cast< Co2Point2f* >(object);
  (void)_this;
}
void Co2Point2f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Co2Point2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Co2Point2f& Co2Point2f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Co2Point2f_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void Co2Point2f::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.Co2Point2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && image_pt_ != nullptr) {
    delete image_pt_;
  }
  image_pt_ = nullptr;
  if (GetArena() == nullptr && vehicle_pt_ != nullptr) {
    delete vehicle_pt_;
  }
  vehicle_pt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Co2Point2f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.Point2f image_pt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f vehicle_pt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Co2Point2f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.Co2Point2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.Point2f image_pt = 1;
  if (this->has_image_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image_pt(this), target, stream);
  }

  // .minieye.parking.Point2f vehicle_pt = 2;
  if (this->has_vehicle_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vehicle_pt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.Co2Point2f)
  return target;
}

size_t Co2Point2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.Co2Point2f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.Point2f image_pt = 1;
  if (this->has_image_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_pt_);
  }

  // .minieye.parking.Point2f vehicle_pt = 2;
  if (this->has_vehicle_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_pt_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Co2Point2f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.Co2Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Co2Point2f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Co2Point2f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.Co2Point2f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.Co2Point2f)
    MergeFrom(*source);
  }
}

void Co2Point2f::MergeFrom(const Co2Point2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.Co2Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image_pt()) {
    _internal_mutable_image_pt()->::minieye::parking::Point2f::MergeFrom(from._internal_image_pt());
  }
  if (from.has_vehicle_pt()) {
    _internal_mutable_vehicle_pt()->::minieye::parking::Point2f::MergeFrom(from._internal_vehicle_pt());
  }
}

void Co2Point2f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.Co2Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Co2Point2f::CopyFrom(const Co2Point2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.Co2Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Co2Point2f::IsInitialized() const {
  return true;
}

void Co2Point2f::InternalSwap(Co2Point2f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Co2Point2f, vehicle_pt_)
      + sizeof(Co2Point2f::vehicle_pt_)
      - PROTOBUF_FIELD_OFFSET(Co2Point2f, image_pt_)>(
          reinterpret_cast<char*>(&image_pt_),
          reinterpret_cast<char*>(&other->image_pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Co2Point2f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectTrackV1::InitAsDefaultInstance() {
  ::minieye::parking::_ObjectTrackV1_default_instance_._instance.get_mutable()->locate_ = const_cast< ::minieye::parking::Co3Point2f*>(
      ::minieye::parking::Co3Point2f::internal_default_instance());
  ::minieye::parking::_ObjectTrackV1_default_instance_._instance.get_mutable()->pre_locate_ = const_cast< ::minieye::parking::Co3Point2f*>(
      ::minieye::parking::Co3Point2f::internal_default_instance());
  ::minieye::parking::_ObjectTrackV1_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::minieye::parking::Co3Point1f*>(
      ::minieye::parking::Co3Point1f::internal_default_instance());
  ::minieye::parking::_ObjectTrackV1_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::minieye::parking::Co3Point2f*>(
      ::minieye::parking::Co3Point2f::internal_default_instance());
  ::minieye::parking::_ObjectTrackV1_default_instance_._instance.get_mutable()->size_ = const_cast< ::minieye::parking::Co2Point2f*>(
      ::minieye::parking::Co2Point2f::internal_default_instance());
}
class ObjectTrackV1::_Internal {
 public:
  static const ::minieye::parking::Co3Point2f& locate(const ObjectTrackV1* msg);
  static const ::minieye::parking::Co3Point2f& pre_locate(const ObjectTrackV1* msg);
  static const ::minieye::parking::Co3Point1f& rotation(const ObjectTrackV1* msg);
  static const ::minieye::parking::Co3Point2f& velocity(const ObjectTrackV1* msg);
  static const ::minieye::parking::Co2Point2f& size(const ObjectTrackV1* msg);
};

const ::minieye::parking::Co3Point2f&
ObjectTrackV1::_Internal::locate(const ObjectTrackV1* msg) {
  return *msg->locate_;
}
const ::minieye::parking::Co3Point2f&
ObjectTrackV1::_Internal::pre_locate(const ObjectTrackV1* msg) {
  return *msg->pre_locate_;
}
const ::minieye::parking::Co3Point1f&
ObjectTrackV1::_Internal::rotation(const ObjectTrackV1* msg) {
  return *msg->rotation_;
}
const ::minieye::parking::Co3Point2f&
ObjectTrackV1::_Internal::velocity(const ObjectTrackV1* msg) {
  return *msg->velocity_;
}
const ::minieye::parking::Co2Point2f&
ObjectTrackV1::_Internal::size(const ObjectTrackV1* msg) {
  return *msg->size_;
}
ObjectTrackV1::ObjectTrackV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ObjectTrackV1)
}
ObjectTrackV1::ObjectTrackV1(const ObjectTrackV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_locate()) {
    locate_ = new ::minieye::parking::Co3Point2f(*from.locate_);
  } else {
    locate_ = nullptr;
  }
  if (from._internal_has_pre_locate()) {
    pre_locate_ = new ::minieye::parking::Co3Point2f(*from.pre_locate_);
  } else {
    pre_locate_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::minieye::parking::Co3Point1f(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::minieye::parking::Co3Point2f(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::minieye::parking::Co2Point2f(*from.size_);
  } else {
    size_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ObjectTrackV1)
}

void ObjectTrackV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectTrackV1_parking_5fobject_2eproto.base);
  ::memset(&locate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&locate_)) + sizeof(id_));
}

ObjectTrackV1::~ObjectTrackV1() {
  // @@protoc_insertion_point(destructor:minieye.parking.ObjectTrackV1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectTrackV1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete locate_;
  if (this != internal_default_instance()) delete pre_locate_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete size_;
}

void ObjectTrackV1::ArenaDtor(void* object) {
  ObjectTrackV1* _this = reinterpret_cast< ObjectTrackV1* >(object);
  (void)_this;
}
void ObjectTrackV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectTrackV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectTrackV1& ObjectTrackV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectTrackV1_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ObjectTrackV1::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ObjectTrackV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && locate_ != nullptr) {
    delete locate_;
  }
  locate_ = nullptr;
  if (GetArena() == nullptr && pre_locate_ != nullptr) {
    delete pre_locate_;
  }
  pre_locate_ = nullptr;
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectTrackV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.Co3Point2f locate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_locate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Co3Point2f pre_locate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pre_locate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Co3Point1f rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Co3Point2f velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Co2Point2f size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectTrackV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ObjectTrackV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.Co3Point2f locate = 1;
  if (this->has_locate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::locate(this), target, stream);
  }

  // .minieye.parking.Co3Point2f pre_locate = 2;
  if (this->has_pre_locate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pre_locate(this), target, stream);
  }

  // .minieye.parking.Co3Point1f rotation = 3;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rotation(this), target, stream);
  }

  // .minieye.parking.Co3Point2f velocity = 4;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::velocity(this), target, stream);
  }

  // .minieye.parking.Co2Point2f size = 5;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::size(this), target, stream);
  }

  // uint32 id = 6;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ObjectTrackV1)
  return target;
}

size_t ObjectTrackV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ObjectTrackV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.Co3Point2f locate = 1;
  if (this->has_locate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locate_);
  }

  // .minieye.parking.Co3Point2f pre_locate = 2;
  if (this->has_pre_locate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pre_locate_);
  }

  // .minieye.parking.Co3Point1f rotation = 3;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .minieye.parking.Co3Point2f velocity = 4;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .minieye.parking.Co2Point2f size = 5;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // uint32 id = 6;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectTrackV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ObjectTrackV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectTrackV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectTrackV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ObjectTrackV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ObjectTrackV1)
    MergeFrom(*source);
  }
}

void ObjectTrackV1::MergeFrom(const ObjectTrackV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ObjectTrackV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_locate()) {
    _internal_mutable_locate()->::minieye::parking::Co3Point2f::MergeFrom(from._internal_locate());
  }
  if (from.has_pre_locate()) {
    _internal_mutable_pre_locate()->::minieye::parking::Co3Point2f::MergeFrom(from._internal_pre_locate());
  }
  if (from.has_rotation()) {
    _internal_mutable_rotation()->::minieye::parking::Co3Point1f::MergeFrom(from._internal_rotation());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::minieye::parking::Co3Point2f::MergeFrom(from._internal_velocity());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::minieye::parking::Co2Point2f::MergeFrom(from._internal_size());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ObjectTrackV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ObjectTrackV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectTrackV1::CopyFrom(const ObjectTrackV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ObjectTrackV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTrackV1::IsInitialized() const {
  return true;
}

void ObjectTrackV1::InternalSwap(ObjectTrackV1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectTrackV1, id_)
      + sizeof(ObjectTrackV1::id_)
      - PROTOBUF_FIELD_OFFSET(ObjectTrackV1, locate_)>(
          reinterpret_cast<char*>(&locate_),
          reinterpret_cast<char*>(&other->locate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectTrackV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectTrackListV1::InitAsDefaultInstance() {
}
class ObjectTrackListV1::_Internal {
 public:
};

ObjectTrackListV1::ObjectTrackListV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vehicles_(arena),
  pedestrians_(arena),
  cones_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ObjectTrackListV1)
}
ObjectTrackListV1::ObjectTrackListV1(const ObjectTrackListV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vehicles_(from.vehicles_),
      pedestrians_(from.pedestrians_),
      cones_(from.cones_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ObjectTrackListV1)
}

void ObjectTrackListV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectTrackListV1_parking_5fobject_2eproto.base);
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
}

ObjectTrackListV1::~ObjectTrackListV1() {
  // @@protoc_insertion_point(destructor:minieye.parking.ObjectTrackListV1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectTrackListV1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObjectTrackListV1::ArenaDtor(void* object) {
  ObjectTrackListV1* _this = reinterpret_cast< ObjectTrackListV1* >(object);
  (void)_this;
}
void ObjectTrackListV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectTrackListV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectTrackListV1& ObjectTrackListV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectTrackListV1_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ObjectTrackListV1::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ObjectTrackListV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicles_.Clear();
  pedestrians_.Clear();
  cones_.Clear();
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectTrackListV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.ObjectTrackV1 vehicles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vehicles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.ObjectTrackV1 pedestrians = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pedestrians(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.ObjectTrackV1 cones = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectTrackListV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ObjectTrackListV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  // repeated .minieye.parking.ObjectTrackV1 vehicles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vehicles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_vehicles(i), target, stream);
  }

  // repeated .minieye.parking.ObjectTrackV1 pedestrians = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pedestrians_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pedestrians(i), target, stream);
  }

  // repeated .minieye.parking.ObjectTrackV1 cones = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_cones(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ObjectTrackListV1)
  return target;
}

size_t ObjectTrackListV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ObjectTrackListV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.parking.ObjectTrackV1 vehicles = 4;
  total_size += 1UL * this->_internal_vehicles_size();
  for (const auto& msg : this->vehicles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.parking.ObjectTrackV1 pedestrians = 5;
  total_size += 1UL * this->_internal_pedestrians_size();
  for (const auto& msg : this->pedestrians_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.parking.ObjectTrackV1 cones = 6;
  total_size += 1UL * this->_internal_cones_size();
  for (const auto& msg : this->cones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectTrackListV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ObjectTrackListV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectTrackListV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectTrackListV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ObjectTrackListV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ObjectTrackListV1)
    MergeFrom(*source);
  }
}

void ObjectTrackListV1::MergeFrom(const ObjectTrackListV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ObjectTrackListV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicles_.MergeFrom(from.vehicles_);
  pedestrians_.MergeFrom(from.pedestrians_);
  cones_.MergeFrom(from.cones_);
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void ObjectTrackListV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ObjectTrackListV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectTrackListV1::CopyFrom(const ObjectTrackListV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ObjectTrackListV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTrackListV1::IsInitialized() const {
  return true;
}

void ObjectTrackListV1::InternalSwap(ObjectTrackListV1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vehicles_.InternalSwap(&other->vehicles_);
  pedestrians_.InternalSwap(&other->pedestrians_);
  cones_.InternalSwap(&other->cones_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectTrackListV1, tick_)
      + sizeof(ObjectTrackListV1::tick_)
      - PROTOBUF_FIELD_OFFSET(ObjectTrackListV1, frame_id_)>(
          reinterpret_cast<char*>(&frame_id_),
          reinterpret_cast<char*>(&other->frame_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectTrackListV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectBev::InitAsDefaultInstance() {
  ::minieye::parking::_ObjectBev_default_instance_._instance.get_mutable()->locate_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_ObjectBev_default_instance_._instance.get_mutable()->size_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
}
class ObjectBev::_Internal {
 public:
  static const ::minieye::parking::Point2f& locate(const ObjectBev* msg);
  static const ::minieye::parking::Point2f& size(const ObjectBev* msg);
};

const ::minieye::parking::Point2f&
ObjectBev::_Internal::locate(const ObjectBev* msg) {
  return *msg->locate_;
}
const ::minieye::parking::Point2f&
ObjectBev::_Internal::size(const ObjectBev* msg) {
  return *msg->size_;
}
ObjectBev::ObjectBev(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ObjectBev)
}
ObjectBev::ObjectBev(const ObjectBev& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_locate()) {
    locate_ = new ::minieye::parking::Point2f(*from.locate_);
  } else {
    locate_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::minieye::parking::Point2f(*from.size_);
  } else {
    size_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&type_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ObjectBev)
}

void ObjectBev::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectBev_parking_5fobject_2eproto.base);
  ::memset(&locate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&locate_)) + sizeof(yaw_));
}

ObjectBev::~ObjectBev() {
  // @@protoc_insertion_point(destructor:minieye.parking.ObjectBev)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectBev::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete locate_;
  if (this != internal_default_instance()) delete size_;
}

void ObjectBev::ArenaDtor(void* object) {
  ObjectBev* _this = reinterpret_cast< ObjectBev* >(object);
  (void)_this;
}
void ObjectBev::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectBev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectBev& ObjectBev::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectBev_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ObjectBev::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ObjectBev)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && locate_ != nullptr) {
    delete locate_;
  }
  locate_ = nullptr;
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&type_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectBev::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.ObjectType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::minieye::parking::ObjectType>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f locate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_locate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectBev::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ObjectBev)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.ObjectType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .minieye.parking.Point2f locate = 2;
  if (this->has_locate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::locate(this), target, stream);
  }

  // .minieye.parking.Point2f size = 3;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::size(this), target, stream);
  }

  // float yaw = 4;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ObjectBev)
  return target;
}

size_t ObjectBev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ObjectBev)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.Point2f locate = 2;
  if (this->has_locate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locate_);
  }

  // .minieye.parking.Point2f size = 3;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .minieye.parking.ObjectType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float yaw = 4;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectBev::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ObjectBev)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectBev* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectBev>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ObjectBev)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ObjectBev)
    MergeFrom(*source);
  }
}

void ObjectBev::MergeFrom(const ObjectBev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ObjectBev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_locate()) {
    _internal_mutable_locate()->::minieye::parking::Point2f::MergeFrom(from._internal_locate());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::minieye::parking::Point2f::MergeFrom(from._internal_size());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
}

void ObjectBev::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ObjectBev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectBev::CopyFrom(const ObjectBev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ObjectBev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectBev::IsInitialized() const {
  return true;
}

void ObjectBev::InternalSwap(ObjectBev* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectBev, yaw_)
      + sizeof(ObjectBev::yaw_)
      - PROTOBUF_FIELD_OFFSET(ObjectBev, locate_)>(
          reinterpret_cast<char*>(&locate_),
          reinterpret_cast<char*>(&other->locate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectBev::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Detect2dData::InitAsDefaultInstance() {
  ::minieye::parking::_Detect2dData_default_instance_._instance.get_mutable()->lupoint_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_Detect2dData_default_instance_._instance.get_mutable()->rdpoint_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
}
class Detect2dData::_Internal {
 public:
  static const ::minieye::parking::Point2f& lupoint(const Detect2dData* msg);
  static const ::minieye::parking::Point2f& rdpoint(const Detect2dData* msg);
};

const ::minieye::parking::Point2f&
Detect2dData::_Internal::lupoint(const Detect2dData* msg) {
  return *msg->lupoint_;
}
const ::minieye::parking::Point2f&
Detect2dData::_Internal::rdpoint(const Detect2dData* msg) {
  return *msg->rdpoint_;
}
Detect2dData::Detect2dData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.Detect2dData)
}
Detect2dData::Detect2dData(const Detect2dData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lupoint()) {
    lupoint_ = new ::minieye::parking::Point2f(*from.lupoint_);
  } else {
    lupoint_ = nullptr;
  }
  if (from._internal_has_rdpoint()) {
    rdpoint_ = new ::minieye::parking::Point2f(*from.rdpoint_);
  } else {
    rdpoint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minieye.parking.Detect2dData)
}

void Detect2dData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Detect2dData_parking_5fobject_2eproto.base);
  ::memset(&lupoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rdpoint_) -
      reinterpret_cast<char*>(&lupoint_)) + sizeof(rdpoint_));
}

Detect2dData::~Detect2dData() {
  // @@protoc_insertion_point(destructor:minieye.parking.Detect2dData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Detect2dData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lupoint_;
  if (this != internal_default_instance()) delete rdpoint_;
}

void Detect2dData::ArenaDtor(void* object) {
  Detect2dData* _this = reinterpret_cast< Detect2dData* >(object);
  (void)_this;
}
void Detect2dData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Detect2dData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Detect2dData& Detect2dData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Detect2dData_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void Detect2dData::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.Detect2dData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && lupoint_ != nullptr) {
    delete lupoint_;
  }
  lupoint_ = nullptr;
  if (GetArena() == nullptr && rdpoint_ != nullptr) {
    delete rdpoint_;
  }
  rdpoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detect2dData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.Point2f LUPoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lupoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f RDPoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rdpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Detect2dData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.Detect2dData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.Point2f LUPoint = 1;
  if (this->has_lupoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lupoint(this), target, stream);
  }

  // .minieye.parking.Point2f RDPoint = 2;
  if (this->has_rdpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rdpoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.Detect2dData)
  return target;
}

size_t Detect2dData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.Detect2dData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.Point2f LUPoint = 1;
  if (this->has_lupoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lupoint_);
  }

  // .minieye.parking.Point2f RDPoint = 2;
  if (this->has_rdpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rdpoint_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detect2dData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.Detect2dData)
  GOOGLE_DCHECK_NE(&from, this);
  const Detect2dData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Detect2dData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.Detect2dData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.Detect2dData)
    MergeFrom(*source);
  }
}

void Detect2dData::MergeFrom(const Detect2dData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.Detect2dData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lupoint()) {
    _internal_mutable_lupoint()->::minieye::parking::Point2f::MergeFrom(from._internal_lupoint());
  }
  if (from.has_rdpoint()) {
    _internal_mutable_rdpoint()->::minieye::parking::Point2f::MergeFrom(from._internal_rdpoint());
  }
}

void Detect2dData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.Detect2dData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detect2dData::CopyFrom(const Detect2dData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.Detect2dData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detect2dData::IsInitialized() const {
  return true;
}

void Detect2dData::InternalSwap(Detect2dData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detect2dData, rdpoint_)
      + sizeof(Detect2dData::rdpoint_)
      - PROTOBUF_FIELD_OFFSET(Detect2dData, lupoint_)>(
          reinterpret_cast<char*>(&lupoint_),
          reinterpret_cast<char*>(&other->lupoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detect2dData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Detect3dData::InitAsDefaultInstance() {
  ::minieye::parking::_Detect3dData_default_instance_._instance.get_mutable()->center_ = const_cast< ::minieye::parking::Point3f*>(
      ::minieye::parking::Point3f::internal_default_instance());
  ::minieye::parking::_Detect3dData_default_instance_._instance.get_mutable()->boxsize_ = const_cast< ::minieye::parking::Point3f*>(
      ::minieye::parking::Point3f::internal_default_instance());
}
class Detect3dData::_Internal {
 public:
  static const ::minieye::parking::Point3f& center(const Detect3dData* msg);
  static const ::minieye::parking::Point3f& boxsize(const Detect3dData* msg);
};

const ::minieye::parking::Point3f&
Detect3dData::_Internal::center(const Detect3dData* msg) {
  return *msg->center_;
}
const ::minieye::parking::Point3f&
Detect3dData::_Internal::boxsize(const Detect3dData* msg) {
  return *msg->boxsize_;
}
Detect3dData::Detect3dData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.Detect3dData)
}
Detect3dData::Detect3dData(const Detect3dData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::minieye::parking::Point3f(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_boxsize()) {
    boxsize_ = new ::minieye::parking::Point3f(*from.boxsize_);
  } else {
    boxsize_ = nullptr;
  }
  yaw_ = from.yaw_;
  // @@protoc_insertion_point(copy_constructor:minieye.parking.Detect3dData)
}

void Detect3dData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Detect3dData_parking_5fobject_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&center_)) + sizeof(yaw_));
}

Detect3dData::~Detect3dData() {
  // @@protoc_insertion_point(destructor:minieye.parking.Detect3dData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Detect3dData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete boxsize_;
}

void Detect3dData::ArenaDtor(void* object) {
  Detect3dData* _this = reinterpret_cast< Detect3dData* >(object);
  (void)_this;
}
void Detect3dData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Detect3dData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Detect3dData& Detect3dData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Detect3dData_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void Detect3dData::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.Detect3dData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  if (GetArena() == nullptr && boxsize_ != nullptr) {
    delete boxsize_;
  }
  boxsize_ = nullptr;
  yaw_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detect3dData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.Point3f center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point3f boxsize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_boxsize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Detect3dData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.Detect3dData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.Point3f center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // .minieye.parking.Point3f boxsize = 2;
  if (this->has_boxsize()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::boxsize(this), target, stream);
  }

  // float yaw = 3;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.Detect3dData)
  return target;
}

size_t Detect3dData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.Detect3dData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.Point3f center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .minieye.parking.Point3f boxsize = 2;
  if (this->has_boxsize()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boxsize_);
  }

  // float yaw = 3;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detect3dData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.Detect3dData)
  GOOGLE_DCHECK_NE(&from, this);
  const Detect3dData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Detect3dData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.Detect3dData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.Detect3dData)
    MergeFrom(*source);
  }
}

void Detect3dData::MergeFrom(const Detect3dData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.Detect3dData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    _internal_mutable_center()->::minieye::parking::Point3f::MergeFrom(from._internal_center());
  }
  if (from.has_boxsize()) {
    _internal_mutable_boxsize()->::minieye::parking::Point3f::MergeFrom(from._internal_boxsize());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
}

void Detect3dData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.Detect3dData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detect3dData::CopyFrom(const Detect3dData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.Detect3dData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detect3dData::IsInitialized() const {
  return true;
}

void Detect3dData::InternalSwap(Detect3dData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detect3dData, yaw_)
      + sizeof(Detect3dData::yaw_)
      - PROTOBUF_FIELD_OFFSET(Detect3dData, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detect3dData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectMono3d::InitAsDefaultInstance() {
  ::minieye::parking::_ObjectMono3d_default_instance_._instance.get_mutable()->box2d_ = const_cast< ::minieye::parking::Detect2dData*>(
      ::minieye::parking::Detect2dData::internal_default_instance());
  ::minieye::parking::_ObjectMono3d_default_instance_._instance.get_mutable()->box3d_ = const_cast< ::minieye::parking::Detect3dData*>(
      ::minieye::parking::Detect3dData::internal_default_instance());
}
class ObjectMono3d::_Internal {
 public:
  static const ::minieye::parking::Detect2dData& box2d(const ObjectMono3d* msg);
  static const ::minieye::parking::Detect3dData& box3d(const ObjectMono3d* msg);
};

const ::minieye::parking::Detect2dData&
ObjectMono3d::_Internal::box2d(const ObjectMono3d* msg) {
  return *msg->box2d_;
}
const ::minieye::parking::Detect3dData&
ObjectMono3d::_Internal::box3d(const ObjectMono3d* msg) {
  return *msg->box3d_;
}
ObjectMono3d::ObjectMono3d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ObjectMono3d)
}
ObjectMono3d::ObjectMono3d(const ObjectMono3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_box2d()) {
    box2d_ = new ::minieye::parking::Detect2dData(*from.box2d_);
  } else {
    box2d_ = nullptr;
  }
  if (from._internal_has_box3d()) {
    box3d_ = new ::minieye::parking::Detect3dData(*from.box3d_);
  } else {
    box3d_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cameraid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(cameraid_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ObjectMono3d)
}

void ObjectMono3d::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectMono3d_parking_5fobject_2eproto.base);
  ::memset(&box2d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cameraid_) -
      reinterpret_cast<char*>(&box2d_)) + sizeof(cameraid_));
}

ObjectMono3d::~ObjectMono3d() {
  // @@protoc_insertion_point(destructor:minieye.parking.ObjectMono3d)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectMono3d::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete box2d_;
  if (this != internal_default_instance()) delete box3d_;
}

void ObjectMono3d::ArenaDtor(void* object) {
  ObjectMono3d* _this = reinterpret_cast< ObjectMono3d* >(object);
  (void)_this;
}
void ObjectMono3d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectMono3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectMono3d& ObjectMono3d::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectMono3d_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ObjectMono3d::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ObjectMono3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && box2d_ != nullptr) {
    delete box2d_;
  }
  box2d_ = nullptr;
  if (GetArena() == nullptr && box3d_ != nullptr) {
    delete box3d_;
  }
  box3d_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cameraid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(cameraid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectMono3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.ObjectType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::minieye::parking::ObjectType>(val));
        } else goto handle_unusual;
        continue;
      // float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.CameraId cameraid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cameraid(static_cast<::minieye::parking::CameraId>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Detect2dData box2d = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_box2d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Detect3dData box3d = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_box3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectMono3d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ObjectMono3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.ObjectType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  // .minieye.parking.CameraId cameraid = 3;
  if (this->cameraid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_cameraid(), target);
  }

  // .minieye.parking.Detect2dData box2d = 4;
  if (this->has_box2d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::box2d(this), target, stream);
  }

  // .minieye.parking.Detect3dData box3d = 5;
  if (this->has_box3d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::box3d(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ObjectMono3d)
  return target;
}

size_t ObjectMono3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ObjectMono3d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.Detect2dData box2d = 4;
  if (this->has_box2d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box2d_);
  }

  // .minieye.parking.Detect3dData box3d = 5;
  if (this->has_box3d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box3d_);
  }

  // .minieye.parking.ObjectType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  // .minieye.parking.CameraId cameraid = 3;
  if (this->cameraid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cameraid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectMono3d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ObjectMono3d)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectMono3d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectMono3d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ObjectMono3d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ObjectMono3d)
    MergeFrom(*source);
  }
}

void ObjectMono3d::MergeFrom(const ObjectMono3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ObjectMono3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_box2d()) {
    _internal_mutable_box2d()->::minieye::parking::Detect2dData::MergeFrom(from._internal_box2d());
  }
  if (from.has_box3d()) {
    _internal_mutable_box3d()->::minieye::parking::Detect3dData::MergeFrom(from._internal_box3d());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
  if (from.cameraid() != 0) {
    _internal_set_cameraid(from._internal_cameraid());
  }
}

void ObjectMono3d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ObjectMono3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectMono3d::CopyFrom(const ObjectMono3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ObjectMono3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectMono3d::IsInitialized() const {
  return true;
}

void ObjectMono3d::InternalSwap(ObjectMono3d* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectMono3d, cameraid_)
      + sizeof(ObjectMono3d::cameraid_)
      - PROTOBUF_FIELD_OFFSET(ObjectMono3d, box2d_)>(
          reinterpret_cast<char*>(&box2d_),
          reinterpret_cast<char*>(&other->box2d_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectMono3d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectList::InitAsDefaultInstance() {
}
class ObjectList::_Internal {
 public:
};

ObjectList::ObjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_object_bev_(arena),
  list_object_3d_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ObjectList)
}
ObjectList::ObjectList(const ObjectList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_object_bev_(from.list_object_bev_),
      list_object_3d_(from.list_object_3d_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ObjectList)
}

void ObjectList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectList_parking_5fobject_2eproto.base);
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
}

ObjectList::~ObjectList() {
  // @@protoc_insertion_point(destructor:minieye.parking.ObjectList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObjectList::ArenaDtor(void* object) {
  ObjectList* _this = reinterpret_cast< ObjectList* >(object);
  (void)_this;
}
void ObjectList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectList& ObjectList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectList_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ObjectList::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ObjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_object_bev_.Clear();
  list_object_3d_.Clear();
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.ObjectBev list_object_bev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list_object_bev(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.ObjectMono3d list_object_3d = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list_object_3d(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ObjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  // repeated .minieye.parking.ObjectBev list_object_bev = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_object_bev_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_list_object_bev(i), target, stream);
  }

  // repeated .minieye.parking.ObjectMono3d list_object_3d = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_object_3d_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_list_object_3d(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ObjectList)
  return target;
}

size_t ObjectList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ObjectList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.parking.ObjectBev list_object_bev = 4;
  total_size += 1UL * this->_internal_list_object_bev_size();
  for (const auto& msg : this->list_object_bev_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.parking.ObjectMono3d list_object_3d = 5;
  total_size += 1UL * this->_internal_list_object_3d_size();
  for (const auto& msg : this->list_object_3d_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ObjectList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ObjectList)
    MergeFrom(*source);
  }
}

void ObjectList::MergeFrom(const ObjectList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_object_bev_.MergeFrom(from.list_object_bev_);
  list_object_3d_.MergeFrom(from.list_object_3d_);
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void ObjectList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectList::CopyFrom(const ObjectList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectList::IsInitialized() const {
  return true;
}

void ObjectList::InternalSwap(ObjectList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_object_bev_.InternalSwap(&other->list_object_bev_);
  list_object_3d_.InternalSwap(&other->list_object_3d_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectList, tick_)
      + sizeof(ObjectList::tick_)
      - PROTOBUF_FIELD_OFFSET(ObjectList, frame_id_)>(
          reinterpret_cast<char*>(&frame_id_),
          reinterpret_cast<char*>(&other->frame_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageInfo::InitAsDefaultInstance() {
  ::minieye::parking::_ImageInfo_default_instance_._instance.get_mutable()->position_value_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_ImageInfo_default_instance_._instance.get_mutable()->size_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
}
class ImageInfo::_Internal {
 public:
  static const ::minieye::parking::Point2f& position_value(const ImageInfo* msg);
  static const ::minieye::parking::Point2f& size(const ImageInfo* msg);
};

const ::minieye::parking::Point2f&
ImageInfo::_Internal::position_value(const ImageInfo* msg) {
  return *msg->position_value_;
}
const ::minieye::parking::Point2f&
ImageInfo::_Internal::size(const ImageInfo* msg) {
  return *msg->size_;
}
ImageInfo::ImageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ImageInfo)
}
ImageInfo::ImageInfo(const ImageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_value()) {
    position_value_ = new ::minieye::parking::Point2f(*from.position_value_);
  } else {
    position_value_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::minieye::parking::Point2f(*from.size_);
  } else {
    size_ = nullptr;
  }
  heading_value_ = from.heading_value_;
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ImageInfo)
}

void ImageInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageInfo_parking_5fobject_2eproto.base);
  ::memset(&position_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_value_) -
      reinterpret_cast<char*>(&position_value_)) + sizeof(heading_value_));
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:minieye.parking.ImageInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_value_;
  if (this != internal_default_instance()) delete size_;
}

void ImageInfo::ArenaDtor(void* object) {
  ImageInfo* _this = reinterpret_cast< ImageInfo* >(object);
  (void)_this;
}
void ImageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageInfo& ImageInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageInfo_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ImageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_value_ != nullptr) {
    delete position_value_;
  }
  position_value_ = nullptr;
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  heading_value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.Point2f position_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          heading_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ImageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.Point2f position_value = 1;
  if (this->has_position_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position_value(this), target, stream);
  }

  // float heading_value = 2;
  if (!(this->heading_value() <= 0 && this->heading_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_heading_value(), target);
  }

  // .minieye.parking.Point2f size = 3;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ImageInfo)
  return target;
}

size_t ImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ImageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.Point2f position_value = 1;
  if (this->has_position_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_value_);
  }

  // .minieye.parking.Point2f size = 3;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // float heading_value = 2;
  if (!(this->heading_value() <= 0 && this->heading_value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ImageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ImageInfo)
    MergeFrom(*source);
  }
}

void ImageInfo::MergeFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_value()) {
    _internal_mutable_position_value()->::minieye::parking::Point2f::MergeFrom(from._internal_position_value());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::minieye::parking::Point2f::MergeFrom(from._internal_size());
  }
  if (!(from.heading_value() <= 0 && from.heading_value() >= 0)) {
    _internal_set_heading_value(from._internal_heading_value());
  }
}

void ImageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {
  return true;
}

void ImageInfo::InternalSwap(ImageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageInfo, heading_value_)
      + sizeof(ImageInfo::heading_value_)
      - PROTOBUF_FIELD_OFFSET(ImageInfo, position_value_)>(
          reinterpret_cast<char*>(&position_value_),
          reinterpret_cast<char*>(&other->position_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleInfo::InitAsDefaultInstance() {
  ::minieye::parking::_VehicleInfo_default_instance_._instance.get_mutable()->position_value_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_VehicleInfo_default_instance_._instance.get_mutable()->position_variance_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_VehicleInfo_default_instance_._instance.get_mutable()->velocity_value_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_VehicleInfo_default_instance_._instance.get_mutable()->velocity_variance_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_VehicleInfo_default_instance_._instance.get_mutable()->size_ = const_cast< ::minieye::parking::Point3f*>(
      ::minieye::parking::Point3f::internal_default_instance());
}
class VehicleInfo::_Internal {
 public:
  static const ::minieye::parking::Point2f& position_value(const VehicleInfo* msg);
  static const ::minieye::parking::Point2f& position_variance(const VehicleInfo* msg);
  static const ::minieye::parking::Point2f& velocity_value(const VehicleInfo* msg);
  static const ::minieye::parking::Point2f& velocity_variance(const VehicleInfo* msg);
  static const ::minieye::parking::Point3f& size(const VehicleInfo* msg);
};

const ::minieye::parking::Point2f&
VehicleInfo::_Internal::position_value(const VehicleInfo* msg) {
  return *msg->position_value_;
}
const ::minieye::parking::Point2f&
VehicleInfo::_Internal::position_variance(const VehicleInfo* msg) {
  return *msg->position_variance_;
}
const ::minieye::parking::Point2f&
VehicleInfo::_Internal::velocity_value(const VehicleInfo* msg) {
  return *msg->velocity_value_;
}
const ::minieye::parking::Point2f&
VehicleInfo::_Internal::velocity_variance(const VehicleInfo* msg) {
  return *msg->velocity_variance_;
}
const ::minieye::parking::Point3f&
VehicleInfo::_Internal::size(const VehicleInfo* msg) {
  return *msg->size_;
}
VehicleInfo::VehicleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.VehicleInfo)
}
VehicleInfo::VehicleInfo(const VehicleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_value()) {
    position_value_ = new ::minieye::parking::Point2f(*from.position_value_);
  } else {
    position_value_ = nullptr;
  }
  if (from._internal_has_position_variance()) {
    position_variance_ = new ::minieye::parking::Point2f(*from.position_variance_);
  } else {
    position_variance_ = nullptr;
  }
  if (from._internal_has_velocity_value()) {
    velocity_value_ = new ::minieye::parking::Point2f(*from.velocity_value_);
  } else {
    velocity_value_ = nullptr;
  }
  if (from._internal_has_velocity_variance()) {
    velocity_variance_ = new ::minieye::parking::Point2f(*from.velocity_variance_);
  } else {
    velocity_variance_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::minieye::parking::Point3f(*from.size_);
  } else {
    size_ = nullptr;
  }
  ::memcpy(&heading_value_, &from.heading_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&palstance_variance_) -
    reinterpret_cast<char*>(&heading_value_)) + sizeof(palstance_variance_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.VehicleInfo)
}

void VehicleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleInfo_parking_5fobject_2eproto.base);
  ::memset(&position_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&palstance_variance_) -
      reinterpret_cast<char*>(&position_value_)) + sizeof(palstance_variance_));
}

VehicleInfo::~VehicleInfo() {
  // @@protoc_insertion_point(destructor:minieye.parking.VehicleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_value_;
  if (this != internal_default_instance()) delete position_variance_;
  if (this != internal_default_instance()) delete velocity_value_;
  if (this != internal_default_instance()) delete velocity_variance_;
  if (this != internal_default_instance()) delete size_;
}

void VehicleInfo::ArenaDtor(void* object) {
  VehicleInfo* _this = reinterpret_cast< VehicleInfo* >(object);
  (void)_this;
}
void VehicleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleInfo& VehicleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleInfo_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void VehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.VehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_value_ != nullptr) {
    delete position_value_;
  }
  position_value_ = nullptr;
  if (GetArena() == nullptr && position_variance_ != nullptr) {
    delete position_variance_;
  }
  position_variance_ = nullptr;
  if (GetArena() == nullptr && velocity_value_ != nullptr) {
    delete velocity_value_;
  }
  velocity_value_ = nullptr;
  if (GetArena() == nullptr && velocity_variance_ != nullptr) {
    delete velocity_variance_;
  }
  velocity_variance_ = nullptr;
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  ::memset(&heading_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&palstance_variance_) -
      reinterpret_cast<char*>(&heading_value_)) + sizeof(palstance_variance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.Point2f position_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f position_variance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_variance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f velocity_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f velocity_variance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_variance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          heading_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading_variance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          heading_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float palstance_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          palstance_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float palstance_variance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          palstance_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point3f size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.VehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.Point2f position_value = 1;
  if (this->has_position_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position_value(this), target, stream);
  }

  // .minieye.parking.Point2f position_variance = 2;
  if (this->has_position_variance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position_variance(this), target, stream);
  }

  // .minieye.parking.Point2f velocity_value = 3;
  if (this->has_velocity_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocity_value(this), target, stream);
  }

  // .minieye.parking.Point2f velocity_variance = 4;
  if (this->has_velocity_variance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::velocity_variance(this), target, stream);
  }

  // float heading_value = 5;
  if (!(this->heading_value() <= 0 && this->heading_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_heading_value(), target);
  }

  // float heading_variance = 6;
  if (!(this->heading_variance() <= 0 && this->heading_variance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_heading_variance(), target);
  }

  // float palstance_value = 7;
  if (!(this->palstance_value() <= 0 && this->palstance_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_palstance_value(), target);
  }

  // float palstance_variance = 8;
  if (!(this->palstance_variance() <= 0 && this->palstance_variance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_palstance_variance(), target);
  }

  // .minieye.parking.Point3f size = 9;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.VehicleInfo)
  return target;
}

size_t VehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.VehicleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.Point2f position_value = 1;
  if (this->has_position_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_value_);
  }

  // .minieye.parking.Point2f position_variance = 2;
  if (this->has_position_variance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_variance_);
  }

  // .minieye.parking.Point2f velocity_value = 3;
  if (this->has_velocity_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_value_);
  }

  // .minieye.parking.Point2f velocity_variance = 4;
  if (this->has_velocity_variance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_variance_);
  }

  // .minieye.parking.Point3f size = 9;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // float heading_value = 5;
  if (!(this->heading_value() <= 0 && this->heading_value() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading_variance = 6;
  if (!(this->heading_variance() <= 0 && this->heading_variance() >= 0)) {
    total_size += 1 + 4;
  }

  // float palstance_value = 7;
  if (!(this->palstance_value() <= 0 && this->palstance_value() >= 0)) {
    total_size += 1 + 4;
  }

  // float palstance_variance = 8;
  if (!(this->palstance_variance() <= 0 && this->palstance_variance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.VehicleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.VehicleInfo)
    MergeFrom(*source);
  }
}

void VehicleInfo::MergeFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_value()) {
    _internal_mutable_position_value()->::minieye::parking::Point2f::MergeFrom(from._internal_position_value());
  }
  if (from.has_position_variance()) {
    _internal_mutable_position_variance()->::minieye::parking::Point2f::MergeFrom(from._internal_position_variance());
  }
  if (from.has_velocity_value()) {
    _internal_mutable_velocity_value()->::minieye::parking::Point2f::MergeFrom(from._internal_velocity_value());
  }
  if (from.has_velocity_variance()) {
    _internal_mutable_velocity_variance()->::minieye::parking::Point2f::MergeFrom(from._internal_velocity_variance());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::minieye::parking::Point3f::MergeFrom(from._internal_size());
  }
  if (!(from.heading_value() <= 0 && from.heading_value() >= 0)) {
    _internal_set_heading_value(from._internal_heading_value());
  }
  if (!(from.heading_variance() <= 0 && from.heading_variance() >= 0)) {
    _internal_set_heading_variance(from._internal_heading_variance());
  }
  if (!(from.palstance_value() <= 0 && from.palstance_value() >= 0)) {
    _internal_set_palstance_value(from._internal_palstance_value());
  }
  if (!(from.palstance_variance() <= 0 && from.palstance_variance() >= 0)) {
    _internal_set_palstance_variance(from._internal_palstance_variance());
  }
}

void VehicleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInfo::CopyFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInfo::IsInitialized() const {
  return true;
}

void VehicleInfo::InternalSwap(VehicleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleInfo, palstance_variance_)
      + sizeof(VehicleInfo::palstance_variance_)
      - PROTOBUF_FIELD_OFFSET(VehicleInfo, position_value_)>(
          reinterpret_cast<char*>(&position_value_),
          reinterpret_cast<char*>(&other->position_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OdomInfo::InitAsDefaultInstance() {
  ::minieye::parking::_OdomInfo_default_instance_._instance.get_mutable()->position_value_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_OdomInfo_default_instance_._instance.get_mutable()->position_variance_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_OdomInfo_default_instance_._instance.get_mutable()->velocity_value_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_OdomInfo_default_instance_._instance.get_mutable()->velocity_variance_ = const_cast< ::minieye::parking::Point2f*>(
      ::minieye::parking::Point2f::internal_default_instance());
  ::minieye::parking::_OdomInfo_default_instance_._instance.get_mutable()->size_ = const_cast< ::minieye::parking::Point3f*>(
      ::minieye::parking::Point3f::internal_default_instance());
}
class OdomInfo::_Internal {
 public:
  static const ::minieye::parking::Point2f& position_value(const OdomInfo* msg);
  static const ::minieye::parking::Point2f& position_variance(const OdomInfo* msg);
  static const ::minieye::parking::Point2f& velocity_value(const OdomInfo* msg);
  static const ::minieye::parking::Point2f& velocity_variance(const OdomInfo* msg);
  static const ::minieye::parking::Point3f& size(const OdomInfo* msg);
};

const ::minieye::parking::Point2f&
OdomInfo::_Internal::position_value(const OdomInfo* msg) {
  return *msg->position_value_;
}
const ::minieye::parking::Point2f&
OdomInfo::_Internal::position_variance(const OdomInfo* msg) {
  return *msg->position_variance_;
}
const ::minieye::parking::Point2f&
OdomInfo::_Internal::velocity_value(const OdomInfo* msg) {
  return *msg->velocity_value_;
}
const ::minieye::parking::Point2f&
OdomInfo::_Internal::velocity_variance(const OdomInfo* msg) {
  return *msg->velocity_variance_;
}
const ::minieye::parking::Point3f&
OdomInfo::_Internal::size(const OdomInfo* msg) {
  return *msg->size_;
}
OdomInfo::OdomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.OdomInfo)
}
OdomInfo::OdomInfo(const OdomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_value()) {
    position_value_ = new ::minieye::parking::Point2f(*from.position_value_);
  } else {
    position_value_ = nullptr;
  }
  if (from._internal_has_position_variance()) {
    position_variance_ = new ::minieye::parking::Point2f(*from.position_variance_);
  } else {
    position_variance_ = nullptr;
  }
  if (from._internal_has_velocity_value()) {
    velocity_value_ = new ::minieye::parking::Point2f(*from.velocity_value_);
  } else {
    velocity_value_ = nullptr;
  }
  if (from._internal_has_velocity_variance()) {
    velocity_variance_ = new ::minieye::parking::Point2f(*from.velocity_variance_);
  } else {
    velocity_variance_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::minieye::parking::Point3f(*from.size_);
  } else {
    size_ = nullptr;
  }
  ::memcpy(&heading_value_, &from.heading_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&palstance_variance_) -
    reinterpret_cast<char*>(&heading_value_)) + sizeof(palstance_variance_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.OdomInfo)
}

void OdomInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OdomInfo_parking_5fobject_2eproto.base);
  ::memset(&position_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&palstance_variance_) -
      reinterpret_cast<char*>(&position_value_)) + sizeof(palstance_variance_));
}

OdomInfo::~OdomInfo() {
  // @@protoc_insertion_point(destructor:minieye.parking.OdomInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OdomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_value_;
  if (this != internal_default_instance()) delete position_variance_;
  if (this != internal_default_instance()) delete velocity_value_;
  if (this != internal_default_instance()) delete velocity_variance_;
  if (this != internal_default_instance()) delete size_;
}

void OdomInfo::ArenaDtor(void* object) {
  OdomInfo* _this = reinterpret_cast< OdomInfo* >(object);
  (void)_this;
}
void OdomInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OdomInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OdomInfo& OdomInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OdomInfo_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void OdomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.OdomInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_value_ != nullptr) {
    delete position_value_;
  }
  position_value_ = nullptr;
  if (GetArena() == nullptr && position_variance_ != nullptr) {
    delete position_variance_;
  }
  position_variance_ = nullptr;
  if (GetArena() == nullptr && velocity_value_ != nullptr) {
    delete velocity_value_;
  }
  velocity_value_ = nullptr;
  if (GetArena() == nullptr && velocity_variance_ != nullptr) {
    delete velocity_variance_;
  }
  velocity_variance_ = nullptr;
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  ::memset(&heading_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&palstance_variance_) -
      reinterpret_cast<char*>(&heading_value_)) + sizeof(palstance_variance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OdomInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.Point2f position_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f position_variance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_variance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f velocity_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point2f velocity_variance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_variance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          heading_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading_variance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          heading_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float palstance_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          palstance_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float palstance_variance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          palstance_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.Point3f size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OdomInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.OdomInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.Point2f position_value = 1;
  if (this->has_position_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position_value(this), target, stream);
  }

  // .minieye.parking.Point2f position_variance = 2;
  if (this->has_position_variance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position_variance(this), target, stream);
  }

  // .minieye.parking.Point2f velocity_value = 3;
  if (this->has_velocity_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocity_value(this), target, stream);
  }

  // .minieye.parking.Point2f velocity_variance = 4;
  if (this->has_velocity_variance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::velocity_variance(this), target, stream);
  }

  // float heading_value = 5;
  if (!(this->heading_value() <= 0 && this->heading_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_heading_value(), target);
  }

  // float heading_variance = 6;
  if (!(this->heading_variance() <= 0 && this->heading_variance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_heading_variance(), target);
  }

  // float palstance_value = 7;
  if (!(this->palstance_value() <= 0 && this->palstance_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_palstance_value(), target);
  }

  // float palstance_variance = 8;
  if (!(this->palstance_variance() <= 0 && this->palstance_variance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_palstance_variance(), target);
  }

  // .minieye.parking.Point3f size = 9;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.OdomInfo)
  return target;
}

size_t OdomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.OdomInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.Point2f position_value = 1;
  if (this->has_position_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_value_);
  }

  // .minieye.parking.Point2f position_variance = 2;
  if (this->has_position_variance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_variance_);
  }

  // .minieye.parking.Point2f velocity_value = 3;
  if (this->has_velocity_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_value_);
  }

  // .minieye.parking.Point2f velocity_variance = 4;
  if (this->has_velocity_variance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_variance_);
  }

  // .minieye.parking.Point3f size = 9;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // float heading_value = 5;
  if (!(this->heading_value() <= 0 && this->heading_value() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading_variance = 6;
  if (!(this->heading_variance() <= 0 && this->heading_variance() >= 0)) {
    total_size += 1 + 4;
  }

  // float palstance_value = 7;
  if (!(this->palstance_value() <= 0 && this->palstance_value() >= 0)) {
    total_size += 1 + 4;
  }

  // float palstance_variance = 8;
  if (!(this->palstance_variance() <= 0 && this->palstance_variance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdomInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.OdomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OdomInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OdomInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.OdomInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.OdomInfo)
    MergeFrom(*source);
  }
}

void OdomInfo::MergeFrom(const OdomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.OdomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_value()) {
    _internal_mutable_position_value()->::minieye::parking::Point2f::MergeFrom(from._internal_position_value());
  }
  if (from.has_position_variance()) {
    _internal_mutable_position_variance()->::minieye::parking::Point2f::MergeFrom(from._internal_position_variance());
  }
  if (from.has_velocity_value()) {
    _internal_mutable_velocity_value()->::minieye::parking::Point2f::MergeFrom(from._internal_velocity_value());
  }
  if (from.has_velocity_variance()) {
    _internal_mutable_velocity_variance()->::minieye::parking::Point2f::MergeFrom(from._internal_velocity_variance());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::minieye::parking::Point3f::MergeFrom(from._internal_size());
  }
  if (!(from.heading_value() <= 0 && from.heading_value() >= 0)) {
    _internal_set_heading_value(from._internal_heading_value());
  }
  if (!(from.heading_variance() <= 0 && from.heading_variance() >= 0)) {
    _internal_set_heading_variance(from._internal_heading_variance());
  }
  if (!(from.palstance_value() <= 0 && from.palstance_value() >= 0)) {
    _internal_set_palstance_value(from._internal_palstance_value());
  }
  if (!(from.palstance_variance() <= 0 && from.palstance_variance() >= 0)) {
    _internal_set_palstance_variance(from._internal_palstance_variance());
  }
}

void OdomInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.OdomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdomInfo::CopyFrom(const OdomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.OdomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdomInfo::IsInitialized() const {
  return true;
}

void OdomInfo::InternalSwap(OdomInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OdomInfo, palstance_variance_)
      + sizeof(OdomInfo::palstance_variance_)
      - PROTOBUF_FIELD_OFFSET(OdomInfo, position_value_)>(
          reinterpret_cast<char*>(&position_value_),
          reinterpret_cast<char*>(&other->position_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OdomInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectTrack::InitAsDefaultInstance() {
  ::minieye::parking::_ObjectTrack_default_instance_._instance.get_mutable()->img_info_ = const_cast< ::minieye::parking::ImageInfo*>(
      ::minieye::parking::ImageInfo::internal_default_instance());
  ::minieye::parking::_ObjectTrack_default_instance_._instance.get_mutable()->vehicle_info_ = const_cast< ::minieye::parking::VehicleInfo*>(
      ::minieye::parking::VehicleInfo::internal_default_instance());
  ::minieye::parking::_ObjectTrack_default_instance_._instance.get_mutable()->odom_info_ = const_cast< ::minieye::parking::OdomInfo*>(
      ::minieye::parking::OdomInfo::internal_default_instance());
}
class ObjectTrack::_Internal {
 public:
  static const ::minieye::parking::ImageInfo& img_info(const ObjectTrack* msg);
  static const ::minieye::parking::VehicleInfo& vehicle_info(const ObjectTrack* msg);
  static const ::minieye::parking::OdomInfo& odom_info(const ObjectTrack* msg);
};

const ::minieye::parking::ImageInfo&
ObjectTrack::_Internal::img_info(const ObjectTrack* msg) {
  return *msg->img_info_;
}
const ::minieye::parking::VehicleInfo&
ObjectTrack::_Internal::vehicle_info(const ObjectTrack* msg) {
  return *msg->vehicle_info_;
}
const ::minieye::parking::OdomInfo&
ObjectTrack::_Internal::odom_info(const ObjectTrack* msg) {
  return *msg->odom_info_;
}
ObjectTrack::ObjectTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ObjectTrack)
}
ObjectTrack::ObjectTrack(const ObjectTrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_img_info()) {
    img_info_ = new ::minieye::parking::ImageInfo(*from.img_info_);
  } else {
    img_info_ = nullptr;
  }
  if (from._internal_has_vehicle_info()) {
    vehicle_info_ = new ::minieye::parking::VehicleInfo(*from.vehicle_info_);
  } else {
    vehicle_info_ = nullptr;
  }
  if (from._internal_has_odom_info()) {
    odom_info_ = new ::minieye::parking::OdomInfo(*from.odom_info_);
  } else {
    odom_info_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ObjectTrack)
}

void ObjectTrack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectTrack_parking_5fobject_2eproto.base);
  ::memset(&img_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&img_info_)) + sizeof(score_));
}

ObjectTrack::~ObjectTrack() {
  // @@protoc_insertion_point(destructor:minieye.parking.ObjectTrack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete img_info_;
  if (this != internal_default_instance()) delete vehicle_info_;
  if (this != internal_default_instance()) delete odom_info_;
}

void ObjectTrack::ArenaDtor(void* object) {
  ObjectTrack* _this = reinterpret_cast< ObjectTrack* >(object);
  (void)_this;
}
void ObjectTrack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectTrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectTrack& ObjectTrack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectTrack_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ObjectTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ObjectTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && img_info_ != nullptr) {
    delete img_info_;
  }
  img_info_ = nullptr;
  if (GetArena() == nullptr && vehicle_info_ != nullptr) {
    delete vehicle_info_;
  }
  vehicle_info_ = nullptr;
  if (GetArena() == nullptr && odom_info_ != nullptr) {
    delete odom_info_;
  }
  odom_info_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&id_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectTrack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.ObjectType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::minieye::parking::ObjectType>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.parking.TrackingStatus track_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_track_status(static_cast<::minieye::parking::TrackingStatus>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.parking.MotionStatus motion_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_motion_status(static_cast<::minieye::parking::MotionStatus>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.parking.ImageInfo img_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_img_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.VehicleInfo vehicle_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.OdomInfo odom_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_odom_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectTrack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ObjectTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .minieye.parking.ObjectType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .minieye.parking.TrackingStatus track_status = 3;
  if (this->track_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_track_status(), target);
  }

  // .minieye.parking.MotionStatus motion_status = 4;
  if (this->motion_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_motion_status(), target);
  }

  // .minieye.parking.ImageInfo img_info = 5;
  if (this->has_img_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::img_info(this), target, stream);
  }

  // .minieye.parking.VehicleInfo vehicle_info = 6;
  if (this->has_vehicle_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::vehicle_info(this), target, stream);
  }

  // .minieye.parking.OdomInfo odom_info = 7;
  if (this->has_odom_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::odom_info(this), target, stream);
  }

  // float score = 8;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ObjectTrack)
  return target;
}

size_t ObjectTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ObjectTrack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.ImageInfo img_info = 5;
  if (this->has_img_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *img_info_);
  }

  // .minieye.parking.VehicleInfo vehicle_info = 6;
  if (this->has_vehicle_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_info_);
  }

  // .minieye.parking.OdomInfo odom_info = 7;
  if (this->has_odom_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odom_info_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .minieye.parking.ObjectType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .minieye.parking.TrackingStatus track_status = 3;
  if (this->track_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_track_status());
  }

  // .minieye.parking.MotionStatus motion_status = 4;
  if (this->motion_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_motion_status());
  }

  // float score = 8;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectTrack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ObjectTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectTrack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectTrack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ObjectTrack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ObjectTrack)
    MergeFrom(*source);
  }
}

void ObjectTrack::MergeFrom(const ObjectTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ObjectTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_img_info()) {
    _internal_mutable_img_info()->::minieye::parking::ImageInfo::MergeFrom(from._internal_img_info());
  }
  if (from.has_vehicle_info()) {
    _internal_mutable_vehicle_info()->::minieye::parking::VehicleInfo::MergeFrom(from._internal_vehicle_info());
  }
  if (from.has_odom_info()) {
    _internal_mutable_odom_info()->::minieye::parking::OdomInfo::MergeFrom(from._internal_odom_info());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.track_status() != 0) {
    _internal_set_track_status(from._internal_track_status());
  }
  if (from.motion_status() != 0) {
    _internal_set_motion_status(from._internal_motion_status());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
}

void ObjectTrack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ObjectTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectTrack::CopyFrom(const ObjectTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ObjectTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTrack::IsInitialized() const {
  return true;
}

void ObjectTrack::InternalSwap(ObjectTrack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectTrack, score_)
      + sizeof(ObjectTrack::score_)
      - PROTOBUF_FIELD_OFFSET(ObjectTrack, img_info_)>(
          reinterpret_cast<char*>(&img_info_),
          reinterpret_cast<char*>(&other->img_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectTrack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectTrackList::InitAsDefaultInstance() {
}
class ObjectTrackList::_Internal {
 public:
};

ObjectTrackList::ObjectTrackList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_track_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ObjectTrackList)
}
ObjectTrackList::ObjectTrackList(const ObjectTrackList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_track_list_(from.object_track_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ObjectTrackList)
}

void ObjectTrackList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectTrackList_parking_5fobject_2eproto.base);
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
}

ObjectTrackList::~ObjectTrackList() {
  // @@protoc_insertion_point(destructor:minieye.parking.ObjectTrackList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectTrackList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObjectTrackList::ArenaDtor(void* object) {
  ObjectTrackList* _this = reinterpret_cast< ObjectTrackList* >(object);
  (void)_this;
}
void ObjectTrackList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectTrackList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectTrackList& ObjectTrackList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectTrackList_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ObjectTrackList::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ObjectTrackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_track_list_.Clear();
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectTrackList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.ObjectTrack object_track_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_track_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectTrackList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ObjectTrackList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  // repeated .minieye.parking.ObjectTrack object_track_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_track_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_object_track_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ObjectTrackList)
  return target;
}

size_t ObjectTrackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ObjectTrackList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.parking.ObjectTrack object_track_list = 4;
  total_size += 1UL * this->_internal_object_track_list_size();
  for (const auto& msg : this->object_track_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectTrackList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ObjectTrackList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectTrackList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectTrackList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ObjectTrackList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ObjectTrackList)
    MergeFrom(*source);
  }
}

void ObjectTrackList::MergeFrom(const ObjectTrackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ObjectTrackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_track_list_.MergeFrom(from.object_track_list_);
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void ObjectTrackList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ObjectTrackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectTrackList::CopyFrom(const ObjectTrackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ObjectTrackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTrackList::IsInitialized() const {
  return true;
}

void ObjectTrackList::InternalSwap(ObjectTrackList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_track_list_.InternalSwap(&other->object_track_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectTrackList, tick_)
      + sizeof(ObjectTrackList::tick_)
      - PROTOBUF_FIELD_OFFSET(ObjectTrackList, frame_id_)>(
          reinterpret_cast<char*>(&frame_id_),
          reinterpret_cast<char*>(&other->frame_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectTrackList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackDebug::InitAsDefaultInstance() {
  ::minieye::parking::_TrackDebug_default_instance_._instance.get_mutable()->ego_state_ = const_cast< ::minieye::parking::TrackEgoState*>(
      ::minieye::parking::TrackEgoState::internal_default_instance());
  ::minieye::parking::_TrackDebug_default_instance_._instance.get_mutable()->ego_cov_ = const_cast< ::minieye::parking::TrackEgoState*>(
      ::minieye::parking::TrackEgoState::internal_default_instance());
}
class TrackDebug::_Internal {
 public:
  static const ::minieye::parking::TrackEgoState& ego_state(const TrackDebug* msg);
  static const ::minieye::parking::TrackEgoState& ego_cov(const TrackDebug* msg);
};

const ::minieye::parking::TrackEgoState&
TrackDebug::_Internal::ego_state(const TrackDebug* msg) {
  return *msg->ego_state_;
}
const ::minieye::parking::TrackEgoState&
TrackDebug::_Internal::ego_cov(const TrackDebug* msg) {
  return *msg->ego_cov_;
}
TrackDebug::TrackDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.TrackDebug)
}
TrackDebug::TrackDebug(const TrackDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ego_state()) {
    ego_state_ = new ::minieye::parking::TrackEgoState(*from.ego_state_);
  } else {
    ego_state_ = nullptr;
  }
  if (from._internal_has_ego_cov()) {
    ego_cov_ = new ::minieye::parking::TrackEgoState(*from.ego_cov_);
  } else {
    ego_cov_ = nullptr;
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_us_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_us_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.TrackDebug)
}

void TrackDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackDebug_parking_5fobject_2eproto.base);
  ::memset(&ego_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_us_) -
      reinterpret_cast<char*>(&ego_state_)) + sizeof(tick_us_));
}

TrackDebug::~TrackDebug() {
  // @@protoc_insertion_point(destructor:minieye.parking.TrackDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ego_state_;
  if (this != internal_default_instance()) delete ego_cov_;
}

void TrackDebug::ArenaDtor(void* object) {
  TrackDebug* _this = reinterpret_cast< TrackDebug* >(object);
  (void)_this;
}
void TrackDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackDebug& TrackDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackDebug_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void TrackDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.TrackDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  if (GetArena() == nullptr && ego_state_ != nullptr) {
    delete ego_state_;
  }
  ego_state_ = nullptr;
  if (GetArena() == nullptr && ego_cov_ != nullptr) {
    delete ego_cov_;
  }
  ego_cov_ = nullptr;
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_us_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_us_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick_us = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.TrackEgoState ego_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ego_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.TrackEgoState ego_cov = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ego_cov(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.TrackDebugObject objects = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.TrackDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 timestamp_us = 2;
  if (this->timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp_us(), target);
  }

  // uint64 tick_us = 3;
  if (this->tick_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick_us(), target);
  }

  // .minieye.parking.TrackEgoState ego_state = 4;
  if (this->has_ego_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ego_state(this), target, stream);
  }

  // .minieye.parking.TrackEgoState ego_cov = 5;
  if (this->has_ego_cov()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ego_cov(this), target, stream);
  }

  // repeated .minieye.parking.TrackDebugObject objects = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.TrackDebug)
  return target;
}

size_t TrackDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.TrackDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.parking.TrackDebugObject objects = 6;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .minieye.parking.TrackEgoState ego_state = 4;
  if (this->has_ego_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ego_state_);
  }

  // .minieye.parking.TrackEgoState ego_cov = 5;
  if (this->has_ego_cov()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ego_cov_);
  }

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp_us = 2;
  if (this->timestamp_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_us());
  }

  // uint64 tick_us = 3;
  if (this->tick_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick_us());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.TrackDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.TrackDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.TrackDebug)
    MergeFrom(*source);
  }
}

void TrackDebug::MergeFrom(const TrackDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.TrackDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (from.has_ego_state()) {
    _internal_mutable_ego_state()->::minieye::parking::TrackEgoState::MergeFrom(from._internal_ego_state());
  }
  if (from.has_ego_cov()) {
    _internal_mutable_ego_cov()->::minieye::parking::TrackEgoState::MergeFrom(from._internal_ego_cov());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp_us() != 0) {
    _internal_set_timestamp_us(from._internal_timestamp_us());
  }
  if (from.tick_us() != 0) {
    _internal_set_tick_us(from._internal_tick_us());
  }
}

void TrackDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.TrackDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackDebug::CopyFrom(const TrackDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.TrackDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackDebug::IsInitialized() const {
  return true;
}

void TrackDebug::InternalSwap(TrackDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackDebug, tick_us_)
      + sizeof(TrackDebug::tick_us_)
      - PROTOBUF_FIELD_OFFSET(TrackDebug, ego_state_)>(
          reinterpret_cast<char*>(&ego_state_),
          reinterpret_cast<char*>(&other->ego_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackDebugObject::InitAsDefaultInstance() {
}
class TrackDebugObject::_Internal {
 public:
};

TrackDebugObject::TrackDebugObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  detections_(arena),
  models_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.TrackDebugObject)
}
TrackDebugObject::TrackDebugObject(const TrackDebugObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detections_(from.detections_),
      models_(from.models_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.TrackDebugObject)
}

void TrackDebugObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackDebugObject_parking_5fobject_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

TrackDebugObject::~TrackDebugObject() {
  // @@protoc_insertion_point(destructor:minieye.parking.TrackDebugObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackDebugObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrackDebugObject::ArenaDtor(void* object) {
  TrackDebugObject* _this = reinterpret_cast< TrackDebugObject* >(object);
  (void)_this;
}
void TrackDebugObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackDebugObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackDebugObject& TrackDebugObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackDebugObject_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void TrackDebugObject::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.TrackDebugObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detections_.Clear();
  models_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackDebugObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.ObjectType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::minieye::parking::ObjectType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.ObjectMono3d detections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.TrackModel models = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackDebugObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.TrackDebugObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .minieye.parking.ObjectType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated .minieye.parking.ObjectMono3d detections = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_detections(i), target, stream);
  }

  // repeated .minieye.parking.TrackModel models = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_models(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.TrackDebugObject)
  return target;
}

size_t TrackDebugObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.TrackDebugObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.parking.ObjectMono3d detections = 3;
  total_size += 1UL * this->_internal_detections_size();
  for (const auto& msg : this->detections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.parking.TrackModel models = 4;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .minieye.parking.ObjectType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackDebugObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.TrackDebugObject)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackDebugObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackDebugObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.TrackDebugObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.TrackDebugObject)
    MergeFrom(*source);
  }
}

void TrackDebugObject::MergeFrom(const TrackDebugObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.TrackDebugObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detections_.MergeFrom(from.detections_);
  models_.MergeFrom(from.models_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void TrackDebugObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.TrackDebugObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackDebugObject::CopyFrom(const TrackDebugObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.TrackDebugObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackDebugObject::IsInitialized() const {
  return true;
}

void TrackDebugObject::InternalSwap(TrackDebugObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  detections_.InternalSwap(&other->detections_);
  models_.InternalSwap(&other->models_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackDebugObject, type_)
      + sizeof(TrackDebugObject::type_)
      - PROTOBUF_FIELD_OFFSET(TrackDebugObject, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackDebugObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackMixTargetState::InitAsDefaultInstance() {
}
class TrackMixTargetState::_Internal {
 public:
};

TrackMixTargetState::TrackMixTargetState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.TrackMixTargetState)
}
TrackMixTargetState::TrackMixTargetState(const TrackMixTargetState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_v_vt_, &from.x_v_vt_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_gt_) -
    reinterpret_cast<char*>(&x_v_vt_)) + sizeof(a_gt_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.TrackMixTargetState)
}

void TrackMixTargetState::SharedCtor() {
  ::memset(&x_v_vt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_gt_) -
      reinterpret_cast<char*>(&x_v_vt_)) + sizeof(a_gt_));
}

TrackMixTargetState::~TrackMixTargetState() {
  // @@protoc_insertion_point(destructor:minieye.parking.TrackMixTargetState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackMixTargetState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrackMixTargetState::ArenaDtor(void* object) {
  TrackMixTargetState* _this = reinterpret_cast< TrackMixTargetState* >(object);
  (void)_this;
}
void TrackMixTargetState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackMixTargetState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackMixTargetState& TrackMixTargetState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackMixTargetState_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void TrackMixTargetState::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.TrackMixTargetState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_v_vt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_gt_) -
      reinterpret_cast<char*>(&x_v_vt_)) + sizeof(a_gt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackMixTargetState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x_v_vt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_v_vt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_v_vt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_v_vt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float psi_vt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          psi_vt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float w_gt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          w_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float v_gt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          v_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a_gt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          a_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackMixTargetState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.TrackMixTargetState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_v_vt = 1;
  if (!(this->x_v_vt() <= 0 && this->x_v_vt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x_v_vt(), target);
  }

  // float y_v_vt = 2;
  if (!(this->y_v_vt() <= 0 && this->y_v_vt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y_v_vt(), target);
  }

  // float psi_vt = 3;
  if (!(this->psi_vt() <= 0 && this->psi_vt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_psi_vt(), target);
  }

  // float w_gt = 4;
  if (!(this->w_gt() <= 0 && this->w_gt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_w_gt(), target);
  }

  // float v_gt = 5;
  if (!(this->v_gt() <= 0 && this->v_gt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_v_gt(), target);
  }

  // float a_gt = 6;
  if (!(this->a_gt() <= 0 && this->a_gt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_a_gt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.TrackMixTargetState)
  return target;
}

size_t TrackMixTargetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.TrackMixTargetState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_v_vt = 1;
  if (!(this->x_v_vt() <= 0 && this->x_v_vt() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_v_vt = 2;
  if (!(this->y_v_vt() <= 0 && this->y_v_vt() >= 0)) {
    total_size += 1 + 4;
  }

  // float psi_vt = 3;
  if (!(this->psi_vt() <= 0 && this->psi_vt() >= 0)) {
    total_size += 1 + 4;
  }

  // float w_gt = 4;
  if (!(this->w_gt() <= 0 && this->w_gt() >= 0)) {
    total_size += 1 + 4;
  }

  // float v_gt = 5;
  if (!(this->v_gt() <= 0 && this->v_gt() >= 0)) {
    total_size += 1 + 4;
  }

  // float a_gt = 6;
  if (!(this->a_gt() <= 0 && this->a_gt() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackMixTargetState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.TrackMixTargetState)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackMixTargetState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackMixTargetState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.TrackMixTargetState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.TrackMixTargetState)
    MergeFrom(*source);
  }
}

void TrackMixTargetState::MergeFrom(const TrackMixTargetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.TrackMixTargetState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x_v_vt() <= 0 && from.x_v_vt() >= 0)) {
    _internal_set_x_v_vt(from._internal_x_v_vt());
  }
  if (!(from.y_v_vt() <= 0 && from.y_v_vt() >= 0)) {
    _internal_set_y_v_vt(from._internal_y_v_vt());
  }
  if (!(from.psi_vt() <= 0 && from.psi_vt() >= 0)) {
    _internal_set_psi_vt(from._internal_psi_vt());
  }
  if (!(from.w_gt() <= 0 && from.w_gt() >= 0)) {
    _internal_set_w_gt(from._internal_w_gt());
  }
  if (!(from.v_gt() <= 0 && from.v_gt() >= 0)) {
    _internal_set_v_gt(from._internal_v_gt());
  }
  if (!(from.a_gt() <= 0 && from.a_gt() >= 0)) {
    _internal_set_a_gt(from._internal_a_gt());
  }
}

void TrackMixTargetState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.TrackMixTargetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackMixTargetState::CopyFrom(const TrackMixTargetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.TrackMixTargetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackMixTargetState::IsInitialized() const {
  return true;
}

void TrackMixTargetState::InternalSwap(TrackMixTargetState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackMixTargetState, a_gt_)
      + sizeof(TrackMixTargetState::a_gt_)
      - PROTOBUF_FIELD_OFFSET(TrackMixTargetState, x_v_vt_)>(
          reinterpret_cast<char*>(&x_v_vt_),
          reinterpret_cast<char*>(&other->x_v_vt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackMixTargetState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackEgoState::InitAsDefaultInstance() {
}
class TrackEgoState::_Internal {
 public:
};

TrackEgoState::TrackEgoState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.TrackEgoState)
}
TrackEgoState::TrackEgoState(const TrackEgoState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dx_m_, &from.dx_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&dyaw_rad_) -
    reinterpret_cast<char*>(&dx_m_)) + sizeof(dyaw_rad_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.TrackEgoState)
}

void TrackEgoState::SharedCtor() {
  ::memset(&dx_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dyaw_rad_) -
      reinterpret_cast<char*>(&dx_m_)) + sizeof(dyaw_rad_));
}

TrackEgoState::~TrackEgoState() {
  // @@protoc_insertion_point(destructor:minieye.parking.TrackEgoState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackEgoState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrackEgoState::ArenaDtor(void* object) {
  TrackEgoState* _this = reinterpret_cast< TrackEgoState* >(object);
  (void)_this;
}
void TrackEgoState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackEgoState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackEgoState& TrackEgoState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackEgoState_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void TrackEgoState::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.TrackEgoState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dx_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dyaw_rad_) -
      reinterpret_cast<char*>(&dx_m_)) + sizeof(dyaw_rad_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackEgoState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float dx_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          dx_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dy_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          dy_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dyaw_rad = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          dyaw_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackEgoState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.TrackEgoState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float dx_m = 1;
  if (!(this->dx_m() <= 0 && this->dx_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_dx_m(), target);
  }

  // float dy_m = 2;
  if (!(this->dy_m() <= 0 && this->dy_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_dy_m(), target);
  }

  // float dyaw_rad = 3;
  if (!(this->dyaw_rad() <= 0 && this->dyaw_rad() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_dyaw_rad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.TrackEgoState)
  return target;
}

size_t TrackEgoState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.TrackEgoState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float dx_m = 1;
  if (!(this->dx_m() <= 0 && this->dx_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float dy_m = 2;
  if (!(this->dy_m() <= 0 && this->dy_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float dyaw_rad = 3;
  if (!(this->dyaw_rad() <= 0 && this->dyaw_rad() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackEgoState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.TrackEgoState)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackEgoState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackEgoState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.TrackEgoState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.TrackEgoState)
    MergeFrom(*source);
  }
}

void TrackEgoState::MergeFrom(const TrackEgoState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.TrackEgoState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dx_m() <= 0 && from.dx_m() >= 0)) {
    _internal_set_dx_m(from._internal_dx_m());
  }
  if (!(from.dy_m() <= 0 && from.dy_m() >= 0)) {
    _internal_set_dy_m(from._internal_dy_m());
  }
  if (!(from.dyaw_rad() <= 0 && from.dyaw_rad() >= 0)) {
    _internal_set_dyaw_rad(from._internal_dyaw_rad());
  }
}

void TrackEgoState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.TrackEgoState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackEgoState::CopyFrom(const TrackEgoState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.TrackEgoState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackEgoState::IsInitialized() const {
  return true;
}

void TrackEgoState::InternalSwap(TrackEgoState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackEgoState, dyaw_rad_)
      + sizeof(TrackEgoState::dyaw_rad_)
      - PROTOBUF_FIELD_OFFSET(TrackEgoState, dx_m_)>(
          reinterpret_cast<char*>(&dx_m_),
          reinterpret_cast<char*>(&other->dx_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackEgoState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackModel::InitAsDefaultInstance() {
  ::minieye::parking::_TrackModel_default_instance_._instance.get_mutable()->prior_state_ = const_cast< ::minieye::parking::TrackMixTargetState*>(
      ::minieye::parking::TrackMixTargetState::internal_default_instance());
  ::minieye::parking::_TrackModel_default_instance_._instance.get_mutable()->prior_cov_ = const_cast< ::minieye::parking::TrackMixTargetState*>(
      ::minieye::parking::TrackMixTargetState::internal_default_instance());
  ::minieye::parking::_TrackModel_default_instance_._instance.get_mutable()->posterior_state_ = const_cast< ::minieye::parking::TrackMixTargetState*>(
      ::minieye::parking::TrackMixTargetState::internal_default_instance());
  ::minieye::parking::_TrackModel_default_instance_._instance.get_mutable()->posterior_cov_ = const_cast< ::minieye::parking::TrackMixTargetState*>(
      ::minieye::parking::TrackMixTargetState::internal_default_instance());
}
class TrackModel::_Internal {
 public:
  static const ::minieye::parking::TrackMixTargetState& prior_state(const TrackModel* msg);
  static const ::minieye::parking::TrackMixTargetState& prior_cov(const TrackModel* msg);
  static const ::minieye::parking::TrackMixTargetState& posterior_state(const TrackModel* msg);
  static const ::minieye::parking::TrackMixTargetState& posterior_cov(const TrackModel* msg);
};

const ::minieye::parking::TrackMixTargetState&
TrackModel::_Internal::prior_state(const TrackModel* msg) {
  return *msg->prior_state_;
}
const ::minieye::parking::TrackMixTargetState&
TrackModel::_Internal::prior_cov(const TrackModel* msg) {
  return *msg->prior_cov_;
}
const ::minieye::parking::TrackMixTargetState&
TrackModel::_Internal::posterior_state(const TrackModel* msg) {
  return *msg->posterior_state_;
}
const ::minieye::parking::TrackMixTargetState&
TrackModel::_Internal::posterior_cov(const TrackModel* msg) {
  return *msg->posterior_cov_;
}
TrackModel::TrackModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.TrackModel)
}
TrackModel::TrackModel(const TrackModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prior_state()) {
    prior_state_ = new ::minieye::parking::TrackMixTargetState(*from.prior_state_);
  } else {
    prior_state_ = nullptr;
  }
  if (from._internal_has_prior_cov()) {
    prior_cov_ = new ::minieye::parking::TrackMixTargetState(*from.prior_cov_);
  } else {
    prior_cov_ = nullptr;
  }
  if (from._internal_has_posterior_state()) {
    posterior_state_ = new ::minieye::parking::TrackMixTargetState(*from.posterior_state_);
  } else {
    posterior_state_ = nullptr;
  }
  if (from._internal_has_posterior_cov()) {
    posterior_cov_ = new ::minieye::parking::TrackMixTargetState(*from.posterior_cov_);
  } else {
    posterior_cov_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&prob_) -
    reinterpret_cast<char*>(&type_)) + sizeof(prob_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.TrackModel)
}

void TrackModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackModel_parking_5fobject_2eproto.base);
  ::memset(&prior_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_) -
      reinterpret_cast<char*>(&prior_state_)) + sizeof(prob_));
}

TrackModel::~TrackModel() {
  // @@protoc_insertion_point(destructor:minieye.parking.TrackModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prior_state_;
  if (this != internal_default_instance()) delete prior_cov_;
  if (this != internal_default_instance()) delete posterior_state_;
  if (this != internal_default_instance()) delete posterior_cov_;
}

void TrackModel::ArenaDtor(void* object) {
  TrackModel* _this = reinterpret_cast< TrackModel* >(object);
  (void)_this;
}
void TrackModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackModel& TrackModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackModel_parking_5fobject_2eproto.base);
  return *internal_default_instance();
}


void TrackModel::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.TrackModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && prior_state_ != nullptr) {
    delete prior_state_;
  }
  prior_state_ = nullptr;
  if (GetArena() == nullptr && prior_cov_ != nullptr) {
    delete prior_cov_;
  }
  prior_cov_ = nullptr;
  if (GetArena() == nullptr && posterior_state_ != nullptr) {
    delete posterior_state_;
  }
  posterior_state_ = nullptr;
  if (GetArena() == nullptr && posterior_cov_ != nullptr) {
    delete posterior_cov_;
  }
  posterior_cov_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_) -
      reinterpret_cast<char*>(&type_)) + sizeof(prob_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.TrackModelType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::minieye::parking::TrackModelType>(val));
        } else goto handle_unusual;
        continue;
      // float prob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.TrackMixTargetState prior_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prior_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.TrackMixTargetState prior_cov = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_prior_cov(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.TrackMixTargetState posterior_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_posterior_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.TrackMixTargetState posterior_cov = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_posterior_cov(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.TrackModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.TrackModelType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // float prob = 2;
  if (!(this->prob() <= 0 && this->prob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_prob(), target);
  }

  // .minieye.parking.TrackMixTargetState prior_state = 3;
  if (this->has_prior_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::prior_state(this), target, stream);
  }

  // .minieye.parking.TrackMixTargetState prior_cov = 4;
  if (this->has_prior_cov()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::prior_cov(this), target, stream);
  }

  // .minieye.parking.TrackMixTargetState posterior_state = 5;
  if (this->has_posterior_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::posterior_state(this), target, stream);
  }

  // .minieye.parking.TrackMixTargetState posterior_cov = 6;
  if (this->has_posterior_cov()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::posterior_cov(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.TrackModel)
  return target;
}

size_t TrackModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.TrackModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.TrackMixTargetState prior_state = 3;
  if (this->has_prior_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prior_state_);
  }

  // .minieye.parking.TrackMixTargetState prior_cov = 4;
  if (this->has_prior_cov()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prior_cov_);
  }

  // .minieye.parking.TrackMixTargetState posterior_state = 5;
  if (this->has_posterior_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *posterior_state_);
  }

  // .minieye.parking.TrackMixTargetState posterior_cov = 6;
  if (this->has_posterior_cov()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *posterior_cov_);
  }

  // .minieye.parking.TrackModelType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float prob = 2;
  if (!(this->prob() <= 0 && this->prob() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.TrackModel)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.TrackModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.TrackModel)
    MergeFrom(*source);
  }
}

void TrackModel::MergeFrom(const TrackModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.TrackModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prior_state()) {
    _internal_mutable_prior_state()->::minieye::parking::TrackMixTargetState::MergeFrom(from._internal_prior_state());
  }
  if (from.has_prior_cov()) {
    _internal_mutable_prior_cov()->::minieye::parking::TrackMixTargetState::MergeFrom(from._internal_prior_cov());
  }
  if (from.has_posterior_state()) {
    _internal_mutable_posterior_state()->::minieye::parking::TrackMixTargetState::MergeFrom(from._internal_posterior_state());
  }
  if (from.has_posterior_cov()) {
    _internal_mutable_posterior_cov()->::minieye::parking::TrackMixTargetState::MergeFrom(from._internal_posterior_cov());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.prob() <= 0 && from.prob() >= 0)) {
    _internal_set_prob(from._internal_prob());
  }
}

void TrackModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.TrackModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackModel::CopyFrom(const TrackModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.TrackModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackModel::IsInitialized() const {
  return true;
}

void TrackModel::InternalSwap(TrackModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackModel, prob_)
      + sizeof(TrackModel::prob_)
      - PROTOBUF_FIELD_OFFSET(TrackModel, prior_state_)>(
          reinterpret_cast<char*>(&prior_state_),
          reinterpret_cast<char*>(&other->prior_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackModel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace parking
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::parking::Point2f* Arena::CreateMaybeMessage< ::minieye::parking::Point2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::Point2f >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::Point3f* Arena::CreateMaybeMessage< ::minieye::parking::Point3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::Point3f >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ObjectV1* Arena::CreateMaybeMessage< ::minieye::parking::ObjectV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ObjectV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ObjectListV1* Arena::CreateMaybeMessage< ::minieye::parking::ObjectListV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ObjectListV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::Co3Point2f* Arena::CreateMaybeMessage< ::minieye::parking::Co3Point2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::Co3Point2f >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::Co3Point1f* Arena::CreateMaybeMessage< ::minieye::parking::Co3Point1f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::Co3Point1f >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::Co2Point2f* Arena::CreateMaybeMessage< ::minieye::parking::Co2Point2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::Co2Point2f >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ObjectTrackV1* Arena::CreateMaybeMessage< ::minieye::parking::ObjectTrackV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ObjectTrackV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ObjectTrackListV1* Arena::CreateMaybeMessage< ::minieye::parking::ObjectTrackListV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ObjectTrackListV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ObjectBev* Arena::CreateMaybeMessage< ::minieye::parking::ObjectBev >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ObjectBev >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::Detect2dData* Arena::CreateMaybeMessage< ::minieye::parking::Detect2dData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::Detect2dData >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::Detect3dData* Arena::CreateMaybeMessage< ::minieye::parking::Detect3dData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::Detect3dData >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ObjectMono3d* Arena::CreateMaybeMessage< ::minieye::parking::ObjectMono3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ObjectMono3d >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ObjectList* Arena::CreateMaybeMessage< ::minieye::parking::ObjectList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ObjectList >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ImageInfo* Arena::CreateMaybeMessage< ::minieye::parking::ImageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ImageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::VehicleInfo* Arena::CreateMaybeMessage< ::minieye::parking::VehicleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::VehicleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::OdomInfo* Arena::CreateMaybeMessage< ::minieye::parking::OdomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::OdomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ObjectTrack* Arena::CreateMaybeMessage< ::minieye::parking::ObjectTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ObjectTrack >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ObjectTrackList* Arena::CreateMaybeMessage< ::minieye::parking::ObjectTrackList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ObjectTrackList >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::TrackDebug* Arena::CreateMaybeMessage< ::minieye::parking::TrackDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::TrackDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::TrackDebugObject* Arena::CreateMaybeMessage< ::minieye::parking::TrackDebugObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::TrackDebugObject >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::TrackMixTargetState* Arena::CreateMaybeMessage< ::minieye::parking::TrackMixTargetState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::TrackMixTargetState >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::TrackEgoState* Arena::CreateMaybeMessage< ::minieye::parking::TrackEgoState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::TrackEgoState >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::TrackModel* Arena::CreateMaybeMessage< ::minieye::parking::TrackModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::TrackModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
