// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_shelter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_camera_5fshelter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_camera_5fshelter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_camera_5fshelter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_camera_5fshelter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_5fshelter_2eproto;
namespace perception {
class CameraShelter;
class CameraShelterDefaultTypeInternal;
extern CameraShelterDefaultTypeInternal _CameraShelter_default_instance_;
class SingleCameraShelter;
class SingleCameraShelterDefaultTypeInternal;
extern SingleCameraShelterDefaultTypeInternal _SingleCameraShelter_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::CameraShelter* Arena::CreateMaybeMessage<::perception::CameraShelter>(Arena*);
template<> ::perception::SingleCameraShelter* Arena::CreateMaybeMessage<::perception::SingleCameraShelter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

enum SingleCameraShelter_CameraId : int {
  SingleCameraShelter_CameraId_kLeft = 0,
  SingleCameraShelter_CameraId_kRight = 1,
  SingleCameraShelter_CameraId_kFront = 2,
  SingleCameraShelter_CameraId_kRear = 3,
  SingleCameraShelter_CameraId_SingleCameraShelter_CameraId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SingleCameraShelter_CameraId_SingleCameraShelter_CameraId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SingleCameraShelter_CameraId_IsValid(int value);
constexpr SingleCameraShelter_CameraId SingleCameraShelter_CameraId_CameraId_MIN = SingleCameraShelter_CameraId_kLeft;
constexpr SingleCameraShelter_CameraId SingleCameraShelter_CameraId_CameraId_MAX = SingleCameraShelter_CameraId_kRear;
constexpr int SingleCameraShelter_CameraId_CameraId_ARRAYSIZE = SingleCameraShelter_CameraId_CameraId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SingleCameraShelter_CameraId_descriptor();
template<typename T>
inline const std::string& SingleCameraShelter_CameraId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SingleCameraShelter_CameraId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SingleCameraShelter_CameraId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SingleCameraShelter_CameraId_descriptor(), enum_t_value);
}
inline bool SingleCameraShelter_CameraId_Parse(
    const std::string& name, SingleCameraShelter_CameraId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SingleCameraShelter_CameraId>(
    SingleCameraShelter_CameraId_descriptor(), name, value);
}
// ===================================================================

class SingleCameraShelter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.SingleCameraShelter) */ {
 public:
  inline SingleCameraShelter() : SingleCameraShelter(nullptr) {};
  virtual ~SingleCameraShelter();

  SingleCameraShelter(const SingleCameraShelter& from);
  SingleCameraShelter(SingleCameraShelter&& from) noexcept
    : SingleCameraShelter() {
    *this = ::std::move(from);
  }

  inline SingleCameraShelter& operator=(const SingleCameraShelter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleCameraShelter& operator=(SingleCameraShelter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleCameraShelter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleCameraShelter* internal_default_instance() {
    return reinterpret_cast<const SingleCameraShelter*>(
               &_SingleCameraShelter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SingleCameraShelter& a, SingleCameraShelter& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleCameraShelter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleCameraShelter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleCameraShelter* New() const final {
    return CreateMaybeMessage<SingleCameraShelter>(nullptr);
  }

  SingleCameraShelter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleCameraShelter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleCameraShelter& from);
  void MergeFrom(const SingleCameraShelter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleCameraShelter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.SingleCameraShelter";
  }
  protected:
  explicit SingleCameraShelter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_5fshelter_2eproto);
    return ::descriptor_table_camera_5fshelter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SingleCameraShelter_CameraId CameraId;
  static constexpr CameraId kLeft =
    SingleCameraShelter_CameraId_kLeft;
  static constexpr CameraId kRight =
    SingleCameraShelter_CameraId_kRight;
  static constexpr CameraId kFront =
    SingleCameraShelter_CameraId_kFront;
  static constexpr CameraId kRear =
    SingleCameraShelter_CameraId_kRear;
  static inline bool CameraId_IsValid(int value) {
    return SingleCameraShelter_CameraId_IsValid(value);
  }
  static constexpr CameraId CameraId_MIN =
    SingleCameraShelter_CameraId_CameraId_MIN;
  static constexpr CameraId CameraId_MAX =
    SingleCameraShelter_CameraId_CameraId_MAX;
  static constexpr int CameraId_ARRAYSIZE =
    SingleCameraShelter_CameraId_CameraId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CameraId_descriptor() {
    return SingleCameraShelter_CameraId_descriptor();
  }
  template<typename T>
  static inline const std::string& CameraId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CameraId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CameraId_Name.");
    return SingleCameraShelter_CameraId_Name(enum_t_value);
  }
  static inline bool CameraId_Parse(const std::string& name,
      CameraId* value) {
    return SingleCameraShelter_CameraId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCameraIdFieldNumber = 1,
    kUpLeftShelteredFieldNumber = 2,
    kUpRightShelteredFieldNumber = 3,
    kDownLeftShelteredFieldNumber = 4,
    kDownRightShelteredFieldNumber = 5,
  };
  // .perception.SingleCameraShelter.CameraId camera_id = 1;
  void clear_camera_id();
  ::perception::SingleCameraShelter_CameraId camera_id() const;
  void set_camera_id(::perception::SingleCameraShelter_CameraId value);
  private:
  ::perception::SingleCameraShelter_CameraId _internal_camera_id() const;
  void _internal_set_camera_id(::perception::SingleCameraShelter_CameraId value);
  public:

  // int32 up_left_sheltered = 2;
  void clear_up_left_sheltered();
  ::PROTOBUF_NAMESPACE_ID::int32 up_left_sheltered() const;
  void set_up_left_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_up_left_sheltered() const;
  void _internal_set_up_left_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 up_right_sheltered = 3;
  void clear_up_right_sheltered();
  ::PROTOBUF_NAMESPACE_ID::int32 up_right_sheltered() const;
  void set_up_right_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_up_right_sheltered() const;
  void _internal_set_up_right_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 down_left_sheltered = 4;
  void clear_down_left_sheltered();
  ::PROTOBUF_NAMESPACE_ID::int32 down_left_sheltered() const;
  void set_down_left_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_down_left_sheltered() const;
  void _internal_set_down_left_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 down_right_sheltered = 5;
  void clear_down_right_sheltered();
  ::PROTOBUF_NAMESPACE_ID::int32 down_right_sheltered() const;
  void set_down_right_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_down_right_sheltered() const;
  void _internal_set_down_right_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.SingleCameraShelter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int camera_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 up_left_sheltered_;
  ::PROTOBUF_NAMESPACE_ID::int32 up_right_sheltered_;
  ::PROTOBUF_NAMESPACE_ID::int32 down_left_sheltered_;
  ::PROTOBUF_NAMESPACE_ID::int32 down_right_sheltered_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fshelter_2eproto;
};
// -------------------------------------------------------------------

class CameraShelter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.CameraShelter) */ {
 public:
  inline CameraShelter() : CameraShelter(nullptr) {};
  virtual ~CameraShelter();

  CameraShelter(const CameraShelter& from);
  CameraShelter(CameraShelter&& from) noexcept
    : CameraShelter() {
    *this = ::std::move(from);
  }

  inline CameraShelter& operator=(const CameraShelter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraShelter& operator=(CameraShelter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraShelter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraShelter* internal_default_instance() {
    return reinterpret_cast<const CameraShelter*>(
               &_CameraShelter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CameraShelter& a, CameraShelter& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraShelter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraShelter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraShelter* New() const final {
    return CreateMaybeMessage<CameraShelter>(nullptr);
  }

  CameraShelter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraShelter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraShelter& from);
  void MergeFrom(const CameraShelter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraShelter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.CameraShelter";
  }
  protected:
  explicit CameraShelter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_5fshelter_2eproto);
    return ::descriptor_table_camera_5fshelter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShelteredFieldNumber = 4,
    kFrameIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // repeated .perception.SingleCameraShelter sheltered = 4;
  int sheltered_size() const;
  private:
  int _internal_sheltered_size() const;
  public:
  void clear_sheltered();
  ::perception::SingleCameraShelter* mutable_sheltered(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::SingleCameraShelter >*
      mutable_sheltered();
  private:
  const ::perception::SingleCameraShelter& _internal_sheltered(int index) const;
  ::perception::SingleCameraShelter* _internal_add_sheltered();
  public:
  const ::perception::SingleCameraShelter& sheltered(int index) const;
  ::perception::SingleCameraShelter* add_sheltered();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::SingleCameraShelter >&
      sheltered() const;

  // uint64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.CameraShelter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::SingleCameraShelter > sheltered_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_5fshelter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SingleCameraShelter

// .perception.SingleCameraShelter.CameraId camera_id = 1;
inline void SingleCameraShelter::clear_camera_id() {
  camera_id_ = 0;
}
inline ::perception::SingleCameraShelter_CameraId SingleCameraShelter::_internal_camera_id() const {
  return static_cast< ::perception::SingleCameraShelter_CameraId >(camera_id_);
}
inline ::perception::SingleCameraShelter_CameraId SingleCameraShelter::camera_id() const {
  // @@protoc_insertion_point(field_get:perception.SingleCameraShelter.camera_id)
  return _internal_camera_id();
}
inline void SingleCameraShelter::_internal_set_camera_id(::perception::SingleCameraShelter_CameraId value) {
  
  camera_id_ = value;
}
inline void SingleCameraShelter::set_camera_id(::perception::SingleCameraShelter_CameraId value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:perception.SingleCameraShelter.camera_id)
}

// int32 up_left_sheltered = 2;
inline void SingleCameraShelter::clear_up_left_sheltered() {
  up_left_sheltered_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleCameraShelter::_internal_up_left_sheltered() const {
  return up_left_sheltered_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleCameraShelter::up_left_sheltered() const {
  // @@protoc_insertion_point(field_get:perception.SingleCameraShelter.up_left_sheltered)
  return _internal_up_left_sheltered();
}
inline void SingleCameraShelter::_internal_set_up_left_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  up_left_sheltered_ = value;
}
inline void SingleCameraShelter::set_up_left_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_up_left_sheltered(value);
  // @@protoc_insertion_point(field_set:perception.SingleCameraShelter.up_left_sheltered)
}

// int32 up_right_sheltered = 3;
inline void SingleCameraShelter::clear_up_right_sheltered() {
  up_right_sheltered_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleCameraShelter::_internal_up_right_sheltered() const {
  return up_right_sheltered_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleCameraShelter::up_right_sheltered() const {
  // @@protoc_insertion_point(field_get:perception.SingleCameraShelter.up_right_sheltered)
  return _internal_up_right_sheltered();
}
inline void SingleCameraShelter::_internal_set_up_right_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  up_right_sheltered_ = value;
}
inline void SingleCameraShelter::set_up_right_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_up_right_sheltered(value);
  // @@protoc_insertion_point(field_set:perception.SingleCameraShelter.up_right_sheltered)
}

// int32 down_left_sheltered = 4;
inline void SingleCameraShelter::clear_down_left_sheltered() {
  down_left_sheltered_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleCameraShelter::_internal_down_left_sheltered() const {
  return down_left_sheltered_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleCameraShelter::down_left_sheltered() const {
  // @@protoc_insertion_point(field_get:perception.SingleCameraShelter.down_left_sheltered)
  return _internal_down_left_sheltered();
}
inline void SingleCameraShelter::_internal_set_down_left_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  down_left_sheltered_ = value;
}
inline void SingleCameraShelter::set_down_left_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_down_left_sheltered(value);
  // @@protoc_insertion_point(field_set:perception.SingleCameraShelter.down_left_sheltered)
}

// int32 down_right_sheltered = 5;
inline void SingleCameraShelter::clear_down_right_sheltered() {
  down_right_sheltered_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleCameraShelter::_internal_down_right_sheltered() const {
  return down_right_sheltered_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleCameraShelter::down_right_sheltered() const {
  // @@protoc_insertion_point(field_get:perception.SingleCameraShelter.down_right_sheltered)
  return _internal_down_right_sheltered();
}
inline void SingleCameraShelter::_internal_set_down_right_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  down_right_sheltered_ = value;
}
inline void SingleCameraShelter::set_down_right_sheltered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_down_right_sheltered(value);
  // @@protoc_insertion_point(field_set:perception.SingleCameraShelter.down_right_sheltered)
}

// -------------------------------------------------------------------

// CameraShelter

// uint64 frame_id = 1;
inline void CameraShelter::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraShelter::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraShelter::frame_id() const {
  // @@protoc_insertion_point(field_get:perception.CameraShelter.frame_id)
  return _internal_frame_id();
}
inline void CameraShelter::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void CameraShelter::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:perception.CameraShelter.frame_id)
}

// uint64 timestamp = 2;
inline void CameraShelter::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraShelter::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraShelter::timestamp() const {
  // @@protoc_insertion_point(field_get:perception.CameraShelter.timestamp)
  return _internal_timestamp();
}
inline void CameraShelter::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void CameraShelter::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perception.CameraShelter.timestamp)
}

// uint64 tick = 3;
inline void CameraShelter::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraShelter::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraShelter::tick() const {
  // @@protoc_insertion_point(field_get:perception.CameraShelter.tick)
  return _internal_tick();
}
inline void CameraShelter::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void CameraShelter::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:perception.CameraShelter.tick)
}

// repeated .perception.SingleCameraShelter sheltered = 4;
inline int CameraShelter::_internal_sheltered_size() const {
  return sheltered_.size();
}
inline int CameraShelter::sheltered_size() const {
  return _internal_sheltered_size();
}
inline void CameraShelter::clear_sheltered() {
  sheltered_.Clear();
}
inline ::perception::SingleCameraShelter* CameraShelter::mutable_sheltered(int index) {
  // @@protoc_insertion_point(field_mutable:perception.CameraShelter.sheltered)
  return sheltered_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::SingleCameraShelter >*
CameraShelter::mutable_sheltered() {
  // @@protoc_insertion_point(field_mutable_list:perception.CameraShelter.sheltered)
  return &sheltered_;
}
inline const ::perception::SingleCameraShelter& CameraShelter::_internal_sheltered(int index) const {
  return sheltered_.Get(index);
}
inline const ::perception::SingleCameraShelter& CameraShelter::sheltered(int index) const {
  // @@protoc_insertion_point(field_get:perception.CameraShelter.sheltered)
  return _internal_sheltered(index);
}
inline ::perception::SingleCameraShelter* CameraShelter::_internal_add_sheltered() {
  return sheltered_.Add();
}
inline ::perception::SingleCameraShelter* CameraShelter::add_sheltered() {
  // @@protoc_insertion_point(field_add:perception.CameraShelter.sheltered)
  return _internal_add_sheltered();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::SingleCameraShelter >&
CameraShelter::sheltered() const {
  // @@protoc_insertion_point(field_list:perception.CameraShelter.sheltered)
  return sheltered_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perception::SingleCameraShelter_CameraId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::SingleCameraShelter_CameraId>() {
  return ::perception::SingleCameraShelter_CameraId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_camera_5fshelter_2eproto
