// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apa_gnss.proto

#include "apa_gnss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_apa_5fgnss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GnssheadingData_apa_5fgnss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_apa_5fgnss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GnssposData_apa_5fgnss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_apa_5fgnss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GnssvelData_apa_5fgnss_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_data_5fheader_2eproto;
namespace minieye {
class GnssposDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnssposData> _instance;
} _GnssposData_default_instance_;
class GnssvelDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnssvelData> _instance;
} _GnssvelData_default_instance_;
class GnssheadingDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnssheadingData> _instance;
} _GnssheadingData_default_instance_;
class GnssDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnssData> _instance;
} _GnssData_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_GnssData_apa_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_GnssData_default_instance_;
    new (ptr) ::minieye::GnssData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::GnssData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GnssData_apa_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GnssData_apa_5fgnss_2eproto}, {
      &scc_info_GnssposData_apa_5fgnss_2eproto.base,
      &scc_info_GnssvelData_apa_5fgnss_2eproto.base,
      &scc_info_GnssheadingData_apa_5fgnss_2eproto.base,}};

static void InitDefaultsscc_info_GnssheadingData_apa_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_GnssheadingData_default_instance_;
    new (ptr) ::minieye::GnssheadingData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::GnssheadingData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GnssheadingData_apa_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_GnssheadingData_apa_5fgnss_2eproto}, {
      &scc_info_Header_data_5fheader_2eproto.base,
      &scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_GnssposData_apa_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_GnssposData_default_instance_;
    new (ptr) ::minieye::GnssposData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::GnssposData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GnssposData_apa_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_GnssposData_apa_5fgnss_2eproto}, {
      &scc_info_Header_data_5fheader_2eproto.base,
      &scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_GnssvelData_apa_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_GnssvelData_default_instance_;
    new (ptr) ::minieye::GnssvelData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::GnssvelData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GnssvelData_apa_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_GnssvelData_apa_5fgnss_2eproto}, {
      &scc_info_Header_data_5fheader_2eproto.base,
      &scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_apa_5fgnss_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_apa_5fgnss_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_apa_5fgnss_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_apa_5fgnss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, header_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, is_valid_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, gps_week_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, gps_sec_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, pos_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, latitude_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, longitude_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, undulation_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, height_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, lat_std_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, lon_std_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, hgt_std_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, svs_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, soln_svs_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, diff_age_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, hdop_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, pdop_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, tdop_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, vdop_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssposData, gdop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, header_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, is_valid_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, gps_week_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, gps_sec_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, sol_status_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, vel_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, hor_spd_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, vert_spd_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, trk_gnd_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, latency_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, vel_x_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, vel_y_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, vel_z_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, vel_x_std_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, vel_y_std_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssvelData, vel_z_std_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::GnssheadingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::GnssheadingData, header_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssheadingData, is_valid_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssheadingData, gps_week_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssheadingData, gps_sec_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssheadingData, svs_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssheadingData, soln_svs_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssheadingData, pos_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssheadingData, length_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssheadingData, heading_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssheadingData, pitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssheadingData, hdg_std_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssheadingData, pitch_std_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::GnssData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::GnssData, gnss_pos_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssData, gnss_vel_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssData, gnss_heading_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::GnssData, tick_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::GnssposData)},
  { 25, -1, sizeof(::minieye::GnssvelData)},
  { 46, -1, sizeof(::minieye::GnssheadingData)},
  { 63, -1, sizeof(::minieye::GnssData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_GnssposData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_GnssvelData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_GnssheadingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_GnssData_default_instance_),
};

const char descriptor_table_protodef_apa_5fgnss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016apa_gnss.proto\022\007minieye\032\036google/protob"
  "uf/wrappers.proto\032\021data_header.proto\"\372\006\n"
  "\013GnssposData\022\037\n\006header\030\001 \001(\0132\017.minieye.H"
  "eader\022\020\n\010is_valid\030\002 \001(\010\022.\n\010gps_week\030\003 \001("
  "\0132\034.google.protobuf.UInt32Value\022-\n\007gps_s"
  "ec\030\004 \001(\0132\034.google.protobuf.DoubleValue\022."
  "\n\010pos_type\030\005 \001(\0132\034.google.protobuf.UInt3"
  "2Value\022.\n\010latitude\030\006 \001(\0132\034.google.protob"
  "uf.DoubleValue\022/\n\tlongitude\030\007 \001(\0132\034.goog"
  "le.protobuf.DoubleValue\022/\n\nundulation\030\010 "
  "\001(\0132\033.google.protobuf.FloatValue\022+\n\006heig"
  "ht\030\t \001(\0132\033.google.protobuf.FloatValue\022,\n"
  "\007lat_std\030\n \001(\0132\033.google.protobuf.FloatVa"
  "lue\022,\n\007lon_std\030\013 \001(\0132\033.google.protobuf.F"
  "loatValue\022,\n\007hgt_std\030\014 \001(\0132\033.google.prot"
  "obuf.FloatValue\022)\n\003svs\030\r \001(\0132\034.google.pr"
  "otobuf.UInt32Value\022.\n\010soln_svs\030\016 \001(\0132\034.g"
  "oogle.protobuf.UInt32Value\022.\n\010diff_age\030\017"
  " \001(\0132\034.google.protobuf.UInt32Value\022)\n\004hd"
  "op\030\020 \001(\0132\033.google.protobuf.FloatValue\022)\n"
  "\004pdop\030\021 \001(\0132\033.google.protobuf.FloatValue"
  "\022)\n\004tdop\030\022 \001(\0132\033.google.protobuf.FloatVa"
  "lue\022)\n\004vdop\030\023 \001(\0132\033.google.protobuf.Floa"
  "tValue\022)\n\004gdop\030\024 \001(\0132\033.google.protobuf.F"
  "loatValue\"\316\005\n\013GnssvelData\022\037\n\006header\030\001 \001("
  "\0132\017.minieye.Header\022\020\n\010is_valid\030\002 \001(\010\022.\n\010"
  "gps_week\030\003 \001(\0132\034.google.protobuf.UInt32V"
  "alue\022-\n\007gps_sec\030\004 \001(\0132\034.google.protobuf."
  "DoubleValue\0220\n\nsol_status\030\005 \001(\0132\034.google"
  ".protobuf.UInt32Value\022.\n\010vel_type\030\006 \001(\0132"
  "\034.google.protobuf.UInt32Value\022,\n\007hor_spd"
  "\030\007 \001(\0132\033.google.protobuf.FloatValue\022-\n\010v"
  "ert_spd\030\010 \001(\0132\033.google.protobuf.FloatVal"
  "ue\022,\n\007trk_gnd\030\t \001(\0132\033.google.protobuf.Fl"
  "oatValue\022,\n\007latency\030\n \001(\0132\033.google.proto"
  "buf.FloatValue\022*\n\005vel_x\030\013 \001(\0132\033.google.p"
  "rotobuf.FloatValue\022*\n\005vel_y\030\014 \001(\0132\033.goog"
  "le.protobuf.FloatValue\022*\n\005vel_z\030\r \001(\0132\033."
  "google.protobuf.FloatValue\022.\n\tvel_x_std\030"
  "\016 \001(\0132\033.google.protobuf.FloatValue\022.\n\tve"
  "l_y_std\030\017 \001(\0132\033.google.protobuf.FloatVal"
  "ue\022.\n\tvel_z_std\030\020 \001(\0132\033.google.protobuf."
  "FloatValue\"\223\004\n\017GnssheadingData\022\037\n\006header"
  "\030\001 \001(\0132\017.minieye.Header\022\020\n\010is_valid\030\002 \001("
  "\010\022.\n\010gps_week\030\003 \001(\0132\034.google.protobuf.UI"
  "nt32Value\022-\n\007gps_sec\030\004 \001(\0132\034.google.prot"
  "obuf.DoubleValue\022)\n\003svs\030\005 \001(\0132\034.google.p"
  "rotobuf.UInt32Value\022.\n\010soln_svs\030\006 \001(\0132\034."
  "google.protobuf.UInt32Value\022.\n\010pos_type\030"
  "\007 \001(\0132\034.google.protobuf.UInt32Value\022+\n\006l"
  "ength\030\010 \001(\0132\033.google.protobuf.FloatValue"
  "\022,\n\007heading\030\t \001(\0132\033.google.protobuf.Floa"
  "tValue\022*\n\005pitch\030\n \001(\0132\033.google.protobuf."
  "FloatValue\022,\n\007hdg_std\030\013 \001(\0132\033.google.pro"
  "tobuf.FloatValue\022.\n\tpitch_std\030\014 \001(\0132\033.go"
  "ogle.protobuf.FloatValue\"\253\001\n\010GnssData\022&\n"
  "\010gnss_pos\030\001 \003(\0132\024.minieye.GnssposData\022&\n"
  "\010gnss_vel\030\002 \003(\0132\024.minieye.GnssvelData\022.\n"
  "\014gnss_heading\030\003 \003(\0132\030.minieye.Gnssheadin"
  "gData\022\021\n\ttimestamp\030\004 \001(\004\022\014\n\004tick\030\005 \001(\004b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_apa_5fgnss_2eproto_deps[2] = {
  &::descriptor_table_data_5fheader_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_apa_5fgnss_2eproto_sccs[4] = {
  &scc_info_GnssData_apa_5fgnss_2eproto.base,
  &scc_info_GnssheadingData_apa_5fgnss_2eproto.base,
  &scc_info_GnssposData_apa_5fgnss_2eproto.base,
  &scc_info_GnssvelData_apa_5fgnss_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_apa_5fgnss_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apa_5fgnss_2eproto = {
  false, false, descriptor_table_protodef_apa_5fgnss_2eproto, "apa_gnss.proto", 2406,
  &descriptor_table_apa_5fgnss_2eproto_once, descriptor_table_apa_5fgnss_2eproto_sccs, descriptor_table_apa_5fgnss_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_apa_5fgnss_2eproto::offsets,
  file_level_metadata_apa_5fgnss_2eproto, 4, file_level_enum_descriptors_apa_5fgnss_2eproto, file_level_service_descriptors_apa_5fgnss_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_apa_5fgnss_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_apa_5fgnss_2eproto)), true);
namespace minieye {

// ===================================================================

void GnssposData::InitAsDefaultInstance() {
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->header_ = const_cast< ::minieye::Header*>(
      ::minieye::Header::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->gps_week_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->gps_sec_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->pos_type_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->latitude_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->longitude_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->undulation_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->height_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->lat_std_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->lon_std_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->hgt_std_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->svs_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->soln_svs_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->diff_age_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->hdop_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->pdop_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->tdop_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->vdop_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssposData_default_instance_._instance.get_mutable()->gdop_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
}
class GnssposData::_Internal {
 public:
  static const ::minieye::Header& header(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& gps_week(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& gps_sec(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& pos_type(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& latitude(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& longitude(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& undulation(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& height(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& lat_std(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& lon_std(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& hgt_std(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& svs(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& soln_svs(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& diff_age(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& hdop(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pdop(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& tdop(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& vdop(const GnssposData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& gdop(const GnssposData* msg);
};

const ::minieye::Header&
GnssposData::_Internal::header(const GnssposData* msg) {
  return *msg->header_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
GnssposData::_Internal::gps_week(const GnssposData* msg) {
  return *msg->gps_week_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
GnssposData::_Internal::gps_sec(const GnssposData* msg) {
  return *msg->gps_sec_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
GnssposData::_Internal::pos_type(const GnssposData* msg) {
  return *msg->pos_type_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
GnssposData::_Internal::latitude(const GnssposData* msg) {
  return *msg->latitude_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
GnssposData::_Internal::longitude(const GnssposData* msg) {
  return *msg->longitude_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssposData::_Internal::undulation(const GnssposData* msg) {
  return *msg->undulation_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssposData::_Internal::height(const GnssposData* msg) {
  return *msg->height_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssposData::_Internal::lat_std(const GnssposData* msg) {
  return *msg->lat_std_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssposData::_Internal::lon_std(const GnssposData* msg) {
  return *msg->lon_std_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssposData::_Internal::hgt_std(const GnssposData* msg) {
  return *msg->hgt_std_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
GnssposData::_Internal::svs(const GnssposData* msg) {
  return *msg->svs_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
GnssposData::_Internal::soln_svs(const GnssposData* msg) {
  return *msg->soln_svs_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
GnssposData::_Internal::diff_age(const GnssposData* msg) {
  return *msg->diff_age_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssposData::_Internal::hdop(const GnssposData* msg) {
  return *msg->hdop_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssposData::_Internal::pdop(const GnssposData* msg) {
  return *msg->pdop_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssposData::_Internal::tdop(const GnssposData* msg) {
  return *msg->tdop_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssposData::_Internal::vdop(const GnssposData* msg) {
  return *msg->vdop_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssposData::_Internal::gdop(const GnssposData* msg) {
  return *msg->gdop_;
}
void GnssposData::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void GnssposData::clear_gps_week() {
  if (GetArena() == nullptr && gps_week_ != nullptr) {
    delete gps_week_;
  }
  gps_week_ = nullptr;
}
void GnssposData::clear_gps_sec() {
  if (GetArena() == nullptr && gps_sec_ != nullptr) {
    delete gps_sec_;
  }
  gps_sec_ = nullptr;
}
void GnssposData::clear_pos_type() {
  if (GetArena() == nullptr && pos_type_ != nullptr) {
    delete pos_type_;
  }
  pos_type_ = nullptr;
}
void GnssposData::clear_latitude() {
  if (GetArena() == nullptr && latitude_ != nullptr) {
    delete latitude_;
  }
  latitude_ = nullptr;
}
void GnssposData::clear_longitude() {
  if (GetArena() == nullptr && longitude_ != nullptr) {
    delete longitude_;
  }
  longitude_ = nullptr;
}
void GnssposData::clear_undulation() {
  if (GetArena() == nullptr && undulation_ != nullptr) {
    delete undulation_;
  }
  undulation_ = nullptr;
}
void GnssposData::clear_height() {
  if (GetArena() == nullptr && height_ != nullptr) {
    delete height_;
  }
  height_ = nullptr;
}
void GnssposData::clear_lat_std() {
  if (GetArena() == nullptr && lat_std_ != nullptr) {
    delete lat_std_;
  }
  lat_std_ = nullptr;
}
void GnssposData::clear_lon_std() {
  if (GetArena() == nullptr && lon_std_ != nullptr) {
    delete lon_std_;
  }
  lon_std_ = nullptr;
}
void GnssposData::clear_hgt_std() {
  if (GetArena() == nullptr && hgt_std_ != nullptr) {
    delete hgt_std_;
  }
  hgt_std_ = nullptr;
}
void GnssposData::clear_svs() {
  if (GetArena() == nullptr && svs_ != nullptr) {
    delete svs_;
  }
  svs_ = nullptr;
}
void GnssposData::clear_soln_svs() {
  if (GetArena() == nullptr && soln_svs_ != nullptr) {
    delete soln_svs_;
  }
  soln_svs_ = nullptr;
}
void GnssposData::clear_diff_age() {
  if (GetArena() == nullptr && diff_age_ != nullptr) {
    delete diff_age_;
  }
  diff_age_ = nullptr;
}
void GnssposData::clear_hdop() {
  if (GetArena() == nullptr && hdop_ != nullptr) {
    delete hdop_;
  }
  hdop_ = nullptr;
}
void GnssposData::clear_pdop() {
  if (GetArena() == nullptr && pdop_ != nullptr) {
    delete pdop_;
  }
  pdop_ = nullptr;
}
void GnssposData::clear_tdop() {
  if (GetArena() == nullptr && tdop_ != nullptr) {
    delete tdop_;
  }
  tdop_ = nullptr;
}
void GnssposData::clear_vdop() {
  if (GetArena() == nullptr && vdop_ != nullptr) {
    delete vdop_;
  }
  vdop_ = nullptr;
}
void GnssposData::clear_gdop() {
  if (GetArena() == nullptr && gdop_ != nullptr) {
    delete gdop_;
  }
  gdop_ = nullptr;
}
GnssposData::GnssposData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.GnssposData)
}
GnssposData::GnssposData(const GnssposData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::minieye::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_gps_week()) {
    gps_week_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.gps_week_);
  } else {
    gps_week_ = nullptr;
  }
  if (from._internal_has_gps_sec()) {
    gps_sec_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.gps_sec_);
  } else {
    gps_sec_ = nullptr;
  }
  if (from._internal_has_pos_type()) {
    pos_type_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.pos_type_);
  } else {
    pos_type_ = nullptr;
  }
  if (from._internal_has_latitude()) {
    latitude_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.latitude_);
  } else {
    latitude_ = nullptr;
  }
  if (from._internal_has_longitude()) {
    longitude_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.longitude_);
  } else {
    longitude_ = nullptr;
  }
  if (from._internal_has_undulation()) {
    undulation_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.undulation_);
  } else {
    undulation_ = nullptr;
  }
  if (from._internal_has_height()) {
    height_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.height_);
  } else {
    height_ = nullptr;
  }
  if (from._internal_has_lat_std()) {
    lat_std_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.lat_std_);
  } else {
    lat_std_ = nullptr;
  }
  if (from._internal_has_lon_std()) {
    lon_std_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.lon_std_);
  } else {
    lon_std_ = nullptr;
  }
  if (from._internal_has_hgt_std()) {
    hgt_std_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.hgt_std_);
  } else {
    hgt_std_ = nullptr;
  }
  if (from._internal_has_svs()) {
    svs_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.svs_);
  } else {
    svs_ = nullptr;
  }
  if (from._internal_has_soln_svs()) {
    soln_svs_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.soln_svs_);
  } else {
    soln_svs_ = nullptr;
  }
  if (from._internal_has_diff_age()) {
    diff_age_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.diff_age_);
  } else {
    diff_age_ = nullptr;
  }
  if (from._internal_has_hdop()) {
    hdop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.hdop_);
  } else {
    hdop_ = nullptr;
  }
  if (from._internal_has_pdop()) {
    pdop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pdop_);
  } else {
    pdop_ = nullptr;
  }
  if (from._internal_has_tdop()) {
    tdop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.tdop_);
  } else {
    tdop_ = nullptr;
  }
  if (from._internal_has_vdop()) {
    vdop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.vdop_);
  } else {
    vdop_ = nullptr;
  }
  if (from._internal_has_gdop()) {
    gdop_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.gdop_);
  } else {
    gdop_ = nullptr;
  }
  is_valid_ = from.is_valid_;
  // @@protoc_insertion_point(copy_constructor:minieye.GnssposData)
}

void GnssposData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GnssposData_apa_5fgnss_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(is_valid_));
}

GnssposData::~GnssposData() {
  // @@protoc_insertion_point(destructor:minieye.GnssposData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GnssposData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete gps_week_;
  if (this != internal_default_instance()) delete gps_sec_;
  if (this != internal_default_instance()) delete pos_type_;
  if (this != internal_default_instance()) delete latitude_;
  if (this != internal_default_instance()) delete longitude_;
  if (this != internal_default_instance()) delete undulation_;
  if (this != internal_default_instance()) delete height_;
  if (this != internal_default_instance()) delete lat_std_;
  if (this != internal_default_instance()) delete lon_std_;
  if (this != internal_default_instance()) delete hgt_std_;
  if (this != internal_default_instance()) delete svs_;
  if (this != internal_default_instance()) delete soln_svs_;
  if (this != internal_default_instance()) delete diff_age_;
  if (this != internal_default_instance()) delete hdop_;
  if (this != internal_default_instance()) delete pdop_;
  if (this != internal_default_instance()) delete tdop_;
  if (this != internal_default_instance()) delete vdop_;
  if (this != internal_default_instance()) delete gdop_;
}

void GnssposData::ArenaDtor(void* object) {
  GnssposData* _this = reinterpret_cast< GnssposData* >(object);
  (void)_this;
}
void GnssposData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GnssposData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnssposData& GnssposData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnssposData_apa_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void GnssposData::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.GnssposData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && gps_week_ != nullptr) {
    delete gps_week_;
  }
  gps_week_ = nullptr;
  if (GetArena() == nullptr && gps_sec_ != nullptr) {
    delete gps_sec_;
  }
  gps_sec_ = nullptr;
  if (GetArena() == nullptr && pos_type_ != nullptr) {
    delete pos_type_;
  }
  pos_type_ = nullptr;
  if (GetArena() == nullptr && latitude_ != nullptr) {
    delete latitude_;
  }
  latitude_ = nullptr;
  if (GetArena() == nullptr && longitude_ != nullptr) {
    delete longitude_;
  }
  longitude_ = nullptr;
  if (GetArena() == nullptr && undulation_ != nullptr) {
    delete undulation_;
  }
  undulation_ = nullptr;
  if (GetArena() == nullptr && height_ != nullptr) {
    delete height_;
  }
  height_ = nullptr;
  if (GetArena() == nullptr && lat_std_ != nullptr) {
    delete lat_std_;
  }
  lat_std_ = nullptr;
  if (GetArena() == nullptr && lon_std_ != nullptr) {
    delete lon_std_;
  }
  lon_std_ = nullptr;
  if (GetArena() == nullptr && hgt_std_ != nullptr) {
    delete hgt_std_;
  }
  hgt_std_ = nullptr;
  if (GetArena() == nullptr && svs_ != nullptr) {
    delete svs_;
  }
  svs_ = nullptr;
  if (GetArena() == nullptr && soln_svs_ != nullptr) {
    delete soln_svs_;
  }
  soln_svs_ = nullptr;
  if (GetArena() == nullptr && diff_age_ != nullptr) {
    delete diff_age_;
  }
  diff_age_ = nullptr;
  if (GetArena() == nullptr && hdop_ != nullptr) {
    delete hdop_;
  }
  hdop_ = nullptr;
  if (GetArena() == nullptr && pdop_ != nullptr) {
    delete pdop_;
  }
  pdop_ = nullptr;
  if (GetArena() == nullptr && tdop_ != nullptr) {
    delete tdop_;
  }
  tdop_ = nullptr;
  if (GetArena() == nullptr && vdop_ != nullptr) {
    delete vdop_;
  }
  vdop_ = nullptr;
  if (GetArena() == nullptr && gdop_ != nullptr) {
    delete gdop_;
  }
  gdop_ = nullptr;
  is_valid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssposData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value gps_week = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_week(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue gps_sec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_sec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value pos_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue latitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_latitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue longitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_longitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue undulation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_undulation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue lat_std = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_std(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue lon_std = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_lon_std(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue hgt_std = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_hgt_std(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value svs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_svs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value soln_svs = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_soln_svs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value diff_age = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_diff_age(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue hdop = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pdop = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_pdop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue tdop = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue vdop = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_vdop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue gdop = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_gdop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnssposData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.GnssposData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bool is_valid = 2;
  if (this->is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_valid(), target);
  }

  // .google.protobuf.UInt32Value gps_week = 3;
  if (this->has_gps_week()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gps_week(this), target, stream);
  }

  // .google.protobuf.DoubleValue gps_sec = 4;
  if (this->has_gps_sec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gps_sec(this), target, stream);
  }

  // .google.protobuf.UInt32Value pos_type = 5;
  if (this->has_pos_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pos_type(this), target, stream);
  }

  // .google.protobuf.DoubleValue latitude = 6;
  if (this->has_latitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::latitude(this), target, stream);
  }

  // .google.protobuf.DoubleValue longitude = 7;
  if (this->has_longitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::longitude(this), target, stream);
  }

  // .google.protobuf.FloatValue undulation = 8;
  if (this->has_undulation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::undulation(this), target, stream);
  }

  // .google.protobuf.FloatValue height = 9;
  if (this->has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::height(this), target, stream);
  }

  // .google.protobuf.FloatValue lat_std = 10;
  if (this->has_lat_std()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::lat_std(this), target, stream);
  }

  // .google.protobuf.FloatValue lon_std = 11;
  if (this->has_lon_std()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::lon_std(this), target, stream);
  }

  // .google.protobuf.FloatValue hgt_std = 12;
  if (this->has_hgt_std()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::hgt_std(this), target, stream);
  }

  // .google.protobuf.UInt32Value svs = 13;
  if (this->has_svs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::svs(this), target, stream);
  }

  // .google.protobuf.UInt32Value soln_svs = 14;
  if (this->has_soln_svs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::soln_svs(this), target, stream);
  }

  // .google.protobuf.UInt32Value diff_age = 15;
  if (this->has_diff_age()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::diff_age(this), target, stream);
  }

  // .google.protobuf.FloatValue hdop = 16;
  if (this->has_hdop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::hdop(this), target, stream);
  }

  // .google.protobuf.FloatValue pdop = 17;
  if (this->has_pdop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::pdop(this), target, stream);
  }

  // .google.protobuf.FloatValue tdop = 18;
  if (this->has_tdop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::tdop(this), target, stream);
  }

  // .google.protobuf.FloatValue vdop = 19;
  if (this->has_vdop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::vdop(this), target, stream);
  }

  // .google.protobuf.FloatValue gdop = 20;
  if (this->has_gdop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::gdop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.GnssposData)
  return target;
}

size_t GnssposData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.GnssposData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .google.protobuf.UInt32Value gps_week = 3;
  if (this->has_gps_week()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_week_);
  }

  // .google.protobuf.DoubleValue gps_sec = 4;
  if (this->has_gps_sec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_sec_);
  }

  // .google.protobuf.UInt32Value pos_type = 5;
  if (this->has_pos_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_type_);
  }

  // .google.protobuf.DoubleValue latitude = 6;
  if (this->has_latitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latitude_);
  }

  // .google.protobuf.DoubleValue longitude = 7;
  if (this->has_longitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *longitude_);
  }

  // .google.protobuf.FloatValue undulation = 8;
  if (this->has_undulation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *undulation_);
  }

  // .google.protobuf.FloatValue height = 9;
  if (this->has_height()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *height_);
  }

  // .google.protobuf.FloatValue lat_std = 10;
  if (this->has_lat_std()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lat_std_);
  }

  // .google.protobuf.FloatValue lon_std = 11;
  if (this->has_lon_std()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lon_std_);
  }

  // .google.protobuf.FloatValue hgt_std = 12;
  if (this->has_hgt_std()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hgt_std_);
  }

  // .google.protobuf.UInt32Value svs = 13;
  if (this->has_svs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *svs_);
  }

  // .google.protobuf.UInt32Value soln_svs = 14;
  if (this->has_soln_svs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *soln_svs_);
  }

  // .google.protobuf.UInt32Value diff_age = 15;
  if (this->has_diff_age()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diff_age_);
  }

  // .google.protobuf.FloatValue hdop = 16;
  if (this->has_hdop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdop_);
  }

  // .google.protobuf.FloatValue pdop = 17;
  if (this->has_pdop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pdop_);
  }

  // .google.protobuf.FloatValue tdop = 18;
  if (this->has_tdop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tdop_);
  }

  // .google.protobuf.FloatValue vdop = 19;
  if (this->has_vdop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vdop_);
  }

  // .google.protobuf.FloatValue gdop = 20;
  if (this->has_gdop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gdop_);
  }

  // bool is_valid = 2;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssposData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.GnssposData)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssposData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnssposData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.GnssposData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.GnssposData)
    MergeFrom(*source);
  }
}

void GnssposData::MergeFrom(const GnssposData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.GnssposData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::minieye::Header::MergeFrom(from._internal_header());
  }
  if (from.has_gps_week()) {
    _internal_mutable_gps_week()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_gps_week());
  }
  if (from.has_gps_sec()) {
    _internal_mutable_gps_sec()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_gps_sec());
  }
  if (from.has_pos_type()) {
    _internal_mutable_pos_type()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_pos_type());
  }
  if (from.has_latitude()) {
    _internal_mutable_latitude()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_latitude());
  }
  if (from.has_longitude()) {
    _internal_mutable_longitude()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_longitude());
  }
  if (from.has_undulation()) {
    _internal_mutable_undulation()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_undulation());
  }
  if (from.has_height()) {
    _internal_mutable_height()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_height());
  }
  if (from.has_lat_std()) {
    _internal_mutable_lat_std()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_lat_std());
  }
  if (from.has_lon_std()) {
    _internal_mutable_lon_std()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_lon_std());
  }
  if (from.has_hgt_std()) {
    _internal_mutable_hgt_std()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_hgt_std());
  }
  if (from.has_svs()) {
    _internal_mutable_svs()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_svs());
  }
  if (from.has_soln_svs()) {
    _internal_mutable_soln_svs()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_soln_svs());
  }
  if (from.has_diff_age()) {
    _internal_mutable_diff_age()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_diff_age());
  }
  if (from.has_hdop()) {
    _internal_mutable_hdop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_hdop());
  }
  if (from.has_pdop()) {
    _internal_mutable_pdop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pdop());
  }
  if (from.has_tdop()) {
    _internal_mutable_tdop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_tdop());
  }
  if (from.has_vdop()) {
    _internal_mutable_vdop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_vdop());
  }
  if (from.has_gdop()) {
    _internal_mutable_gdop()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_gdop());
  }
  if (from.is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
}

void GnssposData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.GnssposData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssposData::CopyFrom(const GnssposData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.GnssposData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssposData::IsInitialized() const {
  return true;
}

void GnssposData::InternalSwap(GnssposData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssposData, is_valid_)
      + sizeof(GnssposData::is_valid_)
      - PROTOBUF_FIELD_OFFSET(GnssposData, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssposData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GnssvelData::InitAsDefaultInstance() {
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->header_ = const_cast< ::minieye::Header*>(
      ::minieye::Header::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->gps_week_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->gps_sec_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->sol_status_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->vel_type_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->hor_spd_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->vert_spd_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->trk_gnd_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->latency_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->vel_x_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->vel_y_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->vel_z_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->vel_x_std_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->vel_y_std_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssvelData_default_instance_._instance.get_mutable()->vel_z_std_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
}
class GnssvelData::_Internal {
 public:
  static const ::minieye::Header& header(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& gps_week(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& gps_sec(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& sol_status(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& vel_type(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& hor_spd(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& vert_spd(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& trk_gnd(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& latency(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& vel_x(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& vel_y(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& vel_z(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& vel_x_std(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& vel_y_std(const GnssvelData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& vel_z_std(const GnssvelData* msg);
};

const ::minieye::Header&
GnssvelData::_Internal::header(const GnssvelData* msg) {
  return *msg->header_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
GnssvelData::_Internal::gps_week(const GnssvelData* msg) {
  return *msg->gps_week_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
GnssvelData::_Internal::gps_sec(const GnssvelData* msg) {
  return *msg->gps_sec_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
GnssvelData::_Internal::sol_status(const GnssvelData* msg) {
  return *msg->sol_status_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
GnssvelData::_Internal::vel_type(const GnssvelData* msg) {
  return *msg->vel_type_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssvelData::_Internal::hor_spd(const GnssvelData* msg) {
  return *msg->hor_spd_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssvelData::_Internal::vert_spd(const GnssvelData* msg) {
  return *msg->vert_spd_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssvelData::_Internal::trk_gnd(const GnssvelData* msg) {
  return *msg->trk_gnd_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssvelData::_Internal::latency(const GnssvelData* msg) {
  return *msg->latency_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssvelData::_Internal::vel_x(const GnssvelData* msg) {
  return *msg->vel_x_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssvelData::_Internal::vel_y(const GnssvelData* msg) {
  return *msg->vel_y_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssvelData::_Internal::vel_z(const GnssvelData* msg) {
  return *msg->vel_z_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssvelData::_Internal::vel_x_std(const GnssvelData* msg) {
  return *msg->vel_x_std_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssvelData::_Internal::vel_y_std(const GnssvelData* msg) {
  return *msg->vel_y_std_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssvelData::_Internal::vel_z_std(const GnssvelData* msg) {
  return *msg->vel_z_std_;
}
void GnssvelData::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void GnssvelData::clear_gps_week() {
  if (GetArena() == nullptr && gps_week_ != nullptr) {
    delete gps_week_;
  }
  gps_week_ = nullptr;
}
void GnssvelData::clear_gps_sec() {
  if (GetArena() == nullptr && gps_sec_ != nullptr) {
    delete gps_sec_;
  }
  gps_sec_ = nullptr;
}
void GnssvelData::clear_sol_status() {
  if (GetArena() == nullptr && sol_status_ != nullptr) {
    delete sol_status_;
  }
  sol_status_ = nullptr;
}
void GnssvelData::clear_vel_type() {
  if (GetArena() == nullptr && vel_type_ != nullptr) {
    delete vel_type_;
  }
  vel_type_ = nullptr;
}
void GnssvelData::clear_hor_spd() {
  if (GetArena() == nullptr && hor_spd_ != nullptr) {
    delete hor_spd_;
  }
  hor_spd_ = nullptr;
}
void GnssvelData::clear_vert_spd() {
  if (GetArena() == nullptr && vert_spd_ != nullptr) {
    delete vert_spd_;
  }
  vert_spd_ = nullptr;
}
void GnssvelData::clear_trk_gnd() {
  if (GetArena() == nullptr && trk_gnd_ != nullptr) {
    delete trk_gnd_;
  }
  trk_gnd_ = nullptr;
}
void GnssvelData::clear_latency() {
  if (GetArena() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
}
void GnssvelData::clear_vel_x() {
  if (GetArena() == nullptr && vel_x_ != nullptr) {
    delete vel_x_;
  }
  vel_x_ = nullptr;
}
void GnssvelData::clear_vel_y() {
  if (GetArena() == nullptr && vel_y_ != nullptr) {
    delete vel_y_;
  }
  vel_y_ = nullptr;
}
void GnssvelData::clear_vel_z() {
  if (GetArena() == nullptr && vel_z_ != nullptr) {
    delete vel_z_;
  }
  vel_z_ = nullptr;
}
void GnssvelData::clear_vel_x_std() {
  if (GetArena() == nullptr && vel_x_std_ != nullptr) {
    delete vel_x_std_;
  }
  vel_x_std_ = nullptr;
}
void GnssvelData::clear_vel_y_std() {
  if (GetArena() == nullptr && vel_y_std_ != nullptr) {
    delete vel_y_std_;
  }
  vel_y_std_ = nullptr;
}
void GnssvelData::clear_vel_z_std() {
  if (GetArena() == nullptr && vel_z_std_ != nullptr) {
    delete vel_z_std_;
  }
  vel_z_std_ = nullptr;
}
GnssvelData::GnssvelData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.GnssvelData)
}
GnssvelData::GnssvelData(const GnssvelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::minieye::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_gps_week()) {
    gps_week_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.gps_week_);
  } else {
    gps_week_ = nullptr;
  }
  if (from._internal_has_gps_sec()) {
    gps_sec_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.gps_sec_);
  } else {
    gps_sec_ = nullptr;
  }
  if (from._internal_has_sol_status()) {
    sol_status_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.sol_status_);
  } else {
    sol_status_ = nullptr;
  }
  if (from._internal_has_vel_type()) {
    vel_type_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.vel_type_);
  } else {
    vel_type_ = nullptr;
  }
  if (from._internal_has_hor_spd()) {
    hor_spd_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.hor_spd_);
  } else {
    hor_spd_ = nullptr;
  }
  if (from._internal_has_vert_spd()) {
    vert_spd_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.vert_spd_);
  } else {
    vert_spd_ = nullptr;
  }
  if (from._internal_has_trk_gnd()) {
    trk_gnd_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.trk_gnd_);
  } else {
    trk_gnd_ = nullptr;
  }
  if (from._internal_has_latency()) {
    latency_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.latency_);
  } else {
    latency_ = nullptr;
  }
  if (from._internal_has_vel_x()) {
    vel_x_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.vel_x_);
  } else {
    vel_x_ = nullptr;
  }
  if (from._internal_has_vel_y()) {
    vel_y_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.vel_y_);
  } else {
    vel_y_ = nullptr;
  }
  if (from._internal_has_vel_z()) {
    vel_z_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.vel_z_);
  } else {
    vel_z_ = nullptr;
  }
  if (from._internal_has_vel_x_std()) {
    vel_x_std_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.vel_x_std_);
  } else {
    vel_x_std_ = nullptr;
  }
  if (from._internal_has_vel_y_std()) {
    vel_y_std_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.vel_y_std_);
  } else {
    vel_y_std_ = nullptr;
  }
  if (from._internal_has_vel_z_std()) {
    vel_z_std_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.vel_z_std_);
  } else {
    vel_z_std_ = nullptr;
  }
  is_valid_ = from.is_valid_;
  // @@protoc_insertion_point(copy_constructor:minieye.GnssvelData)
}

void GnssvelData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GnssvelData_apa_5fgnss_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(is_valid_));
}

GnssvelData::~GnssvelData() {
  // @@protoc_insertion_point(destructor:minieye.GnssvelData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GnssvelData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete gps_week_;
  if (this != internal_default_instance()) delete gps_sec_;
  if (this != internal_default_instance()) delete sol_status_;
  if (this != internal_default_instance()) delete vel_type_;
  if (this != internal_default_instance()) delete hor_spd_;
  if (this != internal_default_instance()) delete vert_spd_;
  if (this != internal_default_instance()) delete trk_gnd_;
  if (this != internal_default_instance()) delete latency_;
  if (this != internal_default_instance()) delete vel_x_;
  if (this != internal_default_instance()) delete vel_y_;
  if (this != internal_default_instance()) delete vel_z_;
  if (this != internal_default_instance()) delete vel_x_std_;
  if (this != internal_default_instance()) delete vel_y_std_;
  if (this != internal_default_instance()) delete vel_z_std_;
}

void GnssvelData::ArenaDtor(void* object) {
  GnssvelData* _this = reinterpret_cast< GnssvelData* >(object);
  (void)_this;
}
void GnssvelData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GnssvelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnssvelData& GnssvelData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnssvelData_apa_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void GnssvelData::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.GnssvelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && gps_week_ != nullptr) {
    delete gps_week_;
  }
  gps_week_ = nullptr;
  if (GetArena() == nullptr && gps_sec_ != nullptr) {
    delete gps_sec_;
  }
  gps_sec_ = nullptr;
  if (GetArena() == nullptr && sol_status_ != nullptr) {
    delete sol_status_;
  }
  sol_status_ = nullptr;
  if (GetArena() == nullptr && vel_type_ != nullptr) {
    delete vel_type_;
  }
  vel_type_ = nullptr;
  if (GetArena() == nullptr && hor_spd_ != nullptr) {
    delete hor_spd_;
  }
  hor_spd_ = nullptr;
  if (GetArena() == nullptr && vert_spd_ != nullptr) {
    delete vert_spd_;
  }
  vert_spd_ = nullptr;
  if (GetArena() == nullptr && trk_gnd_ != nullptr) {
    delete trk_gnd_;
  }
  trk_gnd_ = nullptr;
  if (GetArena() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
  if (GetArena() == nullptr && vel_x_ != nullptr) {
    delete vel_x_;
  }
  vel_x_ = nullptr;
  if (GetArena() == nullptr && vel_y_ != nullptr) {
    delete vel_y_;
  }
  vel_y_ = nullptr;
  if (GetArena() == nullptr && vel_z_ != nullptr) {
    delete vel_z_;
  }
  vel_z_ = nullptr;
  if (GetArena() == nullptr && vel_x_std_ != nullptr) {
    delete vel_x_std_;
  }
  vel_x_std_ = nullptr;
  if (GetArena() == nullptr && vel_y_std_ != nullptr) {
    delete vel_y_std_;
  }
  vel_y_std_ = nullptr;
  if (GetArena() == nullptr && vel_z_std_ != nullptr) {
    delete vel_z_std_;
  }
  vel_z_std_ = nullptr;
  is_valid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssvelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value gps_week = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_week(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue gps_sec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_sec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value sol_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sol_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value vel_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue hor_spd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_hor_spd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue vert_spd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vert_spd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue trk_gnd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_trk_gnd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue latency = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue vel_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel_x(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue vel_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel_y(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue vel_z = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel_z(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue vel_x_std = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel_x_std(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue vel_y_std = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel_y_std(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue vel_z_std = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel_z_std(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnssvelData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.GnssvelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bool is_valid = 2;
  if (this->is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_valid(), target);
  }

  // .google.protobuf.UInt32Value gps_week = 3;
  if (this->has_gps_week()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gps_week(this), target, stream);
  }

  // .google.protobuf.DoubleValue gps_sec = 4;
  if (this->has_gps_sec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gps_sec(this), target, stream);
  }

  // .google.protobuf.UInt32Value sol_status = 5;
  if (this->has_sol_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sol_status(this), target, stream);
  }

  // .google.protobuf.UInt32Value vel_type = 6;
  if (this->has_vel_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::vel_type(this), target, stream);
  }

  // .google.protobuf.FloatValue hor_spd = 7;
  if (this->has_hor_spd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::hor_spd(this), target, stream);
  }

  // .google.protobuf.FloatValue vert_spd = 8;
  if (this->has_vert_spd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::vert_spd(this), target, stream);
  }

  // .google.protobuf.FloatValue trk_gnd = 9;
  if (this->has_trk_gnd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::trk_gnd(this), target, stream);
  }

  // .google.protobuf.FloatValue latency = 10;
  if (this->has_latency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::latency(this), target, stream);
  }

  // .google.protobuf.FloatValue vel_x = 11;
  if (this->has_vel_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::vel_x(this), target, stream);
  }

  // .google.protobuf.FloatValue vel_y = 12;
  if (this->has_vel_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::vel_y(this), target, stream);
  }

  // .google.protobuf.FloatValue vel_z = 13;
  if (this->has_vel_z()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::vel_z(this), target, stream);
  }

  // .google.protobuf.FloatValue vel_x_std = 14;
  if (this->has_vel_x_std()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::vel_x_std(this), target, stream);
  }

  // .google.protobuf.FloatValue vel_y_std = 15;
  if (this->has_vel_y_std()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::vel_y_std(this), target, stream);
  }

  // .google.protobuf.FloatValue vel_z_std = 16;
  if (this->has_vel_z_std()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::vel_z_std(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.GnssvelData)
  return target;
}

size_t GnssvelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.GnssvelData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .google.protobuf.UInt32Value gps_week = 3;
  if (this->has_gps_week()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_week_);
  }

  // .google.protobuf.DoubleValue gps_sec = 4;
  if (this->has_gps_sec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_sec_);
  }

  // .google.protobuf.UInt32Value sol_status = 5;
  if (this->has_sol_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sol_status_);
  }

  // .google.protobuf.UInt32Value vel_type = 6;
  if (this->has_vel_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_type_);
  }

  // .google.protobuf.FloatValue hor_spd = 7;
  if (this->has_hor_spd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hor_spd_);
  }

  // .google.protobuf.FloatValue vert_spd = 8;
  if (this->has_vert_spd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vert_spd_);
  }

  // .google.protobuf.FloatValue trk_gnd = 9;
  if (this->has_trk_gnd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trk_gnd_);
  }

  // .google.protobuf.FloatValue latency = 10;
  if (this->has_latency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latency_);
  }

  // .google.protobuf.FloatValue vel_x = 11;
  if (this->has_vel_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_x_);
  }

  // .google.protobuf.FloatValue vel_y = 12;
  if (this->has_vel_y()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_y_);
  }

  // .google.protobuf.FloatValue vel_z = 13;
  if (this->has_vel_z()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_z_);
  }

  // .google.protobuf.FloatValue vel_x_std = 14;
  if (this->has_vel_x_std()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_x_std_);
  }

  // .google.protobuf.FloatValue vel_y_std = 15;
  if (this->has_vel_y_std()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_y_std_);
  }

  // .google.protobuf.FloatValue vel_z_std = 16;
  if (this->has_vel_z_std()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_z_std_);
  }

  // bool is_valid = 2;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssvelData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.GnssvelData)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssvelData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnssvelData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.GnssvelData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.GnssvelData)
    MergeFrom(*source);
  }
}

void GnssvelData::MergeFrom(const GnssvelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.GnssvelData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::minieye::Header::MergeFrom(from._internal_header());
  }
  if (from.has_gps_week()) {
    _internal_mutable_gps_week()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_gps_week());
  }
  if (from.has_gps_sec()) {
    _internal_mutable_gps_sec()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_gps_sec());
  }
  if (from.has_sol_status()) {
    _internal_mutable_sol_status()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_sol_status());
  }
  if (from.has_vel_type()) {
    _internal_mutable_vel_type()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_vel_type());
  }
  if (from.has_hor_spd()) {
    _internal_mutable_hor_spd()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_hor_spd());
  }
  if (from.has_vert_spd()) {
    _internal_mutable_vert_spd()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_vert_spd());
  }
  if (from.has_trk_gnd()) {
    _internal_mutable_trk_gnd()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_trk_gnd());
  }
  if (from.has_latency()) {
    _internal_mutable_latency()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_latency());
  }
  if (from.has_vel_x()) {
    _internal_mutable_vel_x()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_vel_x());
  }
  if (from.has_vel_y()) {
    _internal_mutable_vel_y()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_vel_y());
  }
  if (from.has_vel_z()) {
    _internal_mutable_vel_z()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_vel_z());
  }
  if (from.has_vel_x_std()) {
    _internal_mutable_vel_x_std()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_vel_x_std());
  }
  if (from.has_vel_y_std()) {
    _internal_mutable_vel_y_std()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_vel_y_std());
  }
  if (from.has_vel_z_std()) {
    _internal_mutable_vel_z_std()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_vel_z_std());
  }
  if (from.is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
}

void GnssvelData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.GnssvelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssvelData::CopyFrom(const GnssvelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.GnssvelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssvelData::IsInitialized() const {
  return true;
}

void GnssvelData::InternalSwap(GnssvelData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssvelData, is_valid_)
      + sizeof(GnssvelData::is_valid_)
      - PROTOBUF_FIELD_OFFSET(GnssvelData, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssvelData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GnssheadingData::InitAsDefaultInstance() {
  ::minieye::_GnssheadingData_default_instance_._instance.get_mutable()->header_ = const_cast< ::minieye::Header*>(
      ::minieye::Header::internal_default_instance());
  ::minieye::_GnssheadingData_default_instance_._instance.get_mutable()->gps_week_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::minieye::_GnssheadingData_default_instance_._instance.get_mutable()->gps_sec_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::minieye::_GnssheadingData_default_instance_._instance.get_mutable()->svs_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::minieye::_GnssheadingData_default_instance_._instance.get_mutable()->soln_svs_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::minieye::_GnssheadingData_default_instance_._instance.get_mutable()->pos_type_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::minieye::_GnssheadingData_default_instance_._instance.get_mutable()->length_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssheadingData_default_instance_._instance.get_mutable()->heading_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssheadingData_default_instance_._instance.get_mutable()->pitch_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssheadingData_default_instance_._instance.get_mutable()->hdg_std_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::minieye::_GnssheadingData_default_instance_._instance.get_mutable()->pitch_std_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
}
class GnssheadingData::_Internal {
 public:
  static const ::minieye::Header& header(const GnssheadingData* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& gps_week(const GnssheadingData* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& gps_sec(const GnssheadingData* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& svs(const GnssheadingData* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& soln_svs(const GnssheadingData* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& pos_type(const GnssheadingData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& length(const GnssheadingData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& heading(const GnssheadingData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pitch(const GnssheadingData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& hdg_std(const GnssheadingData* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pitch_std(const GnssheadingData* msg);
};

const ::minieye::Header&
GnssheadingData::_Internal::header(const GnssheadingData* msg) {
  return *msg->header_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
GnssheadingData::_Internal::gps_week(const GnssheadingData* msg) {
  return *msg->gps_week_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
GnssheadingData::_Internal::gps_sec(const GnssheadingData* msg) {
  return *msg->gps_sec_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
GnssheadingData::_Internal::svs(const GnssheadingData* msg) {
  return *msg->svs_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
GnssheadingData::_Internal::soln_svs(const GnssheadingData* msg) {
  return *msg->soln_svs_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
GnssheadingData::_Internal::pos_type(const GnssheadingData* msg) {
  return *msg->pos_type_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssheadingData::_Internal::length(const GnssheadingData* msg) {
  return *msg->length_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssheadingData::_Internal::heading(const GnssheadingData* msg) {
  return *msg->heading_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssheadingData::_Internal::pitch(const GnssheadingData* msg) {
  return *msg->pitch_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssheadingData::_Internal::hdg_std(const GnssheadingData* msg) {
  return *msg->hdg_std_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
GnssheadingData::_Internal::pitch_std(const GnssheadingData* msg) {
  return *msg->pitch_std_;
}
void GnssheadingData::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void GnssheadingData::clear_gps_week() {
  if (GetArena() == nullptr && gps_week_ != nullptr) {
    delete gps_week_;
  }
  gps_week_ = nullptr;
}
void GnssheadingData::clear_gps_sec() {
  if (GetArena() == nullptr && gps_sec_ != nullptr) {
    delete gps_sec_;
  }
  gps_sec_ = nullptr;
}
void GnssheadingData::clear_svs() {
  if (GetArena() == nullptr && svs_ != nullptr) {
    delete svs_;
  }
  svs_ = nullptr;
}
void GnssheadingData::clear_soln_svs() {
  if (GetArena() == nullptr && soln_svs_ != nullptr) {
    delete soln_svs_;
  }
  soln_svs_ = nullptr;
}
void GnssheadingData::clear_pos_type() {
  if (GetArena() == nullptr && pos_type_ != nullptr) {
    delete pos_type_;
  }
  pos_type_ = nullptr;
}
void GnssheadingData::clear_length() {
  if (GetArena() == nullptr && length_ != nullptr) {
    delete length_;
  }
  length_ = nullptr;
}
void GnssheadingData::clear_heading() {
  if (GetArena() == nullptr && heading_ != nullptr) {
    delete heading_;
  }
  heading_ = nullptr;
}
void GnssheadingData::clear_pitch() {
  if (GetArena() == nullptr && pitch_ != nullptr) {
    delete pitch_;
  }
  pitch_ = nullptr;
}
void GnssheadingData::clear_hdg_std() {
  if (GetArena() == nullptr && hdg_std_ != nullptr) {
    delete hdg_std_;
  }
  hdg_std_ = nullptr;
}
void GnssheadingData::clear_pitch_std() {
  if (GetArena() == nullptr && pitch_std_ != nullptr) {
    delete pitch_std_;
  }
  pitch_std_ = nullptr;
}
GnssheadingData::GnssheadingData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.GnssheadingData)
}
GnssheadingData::GnssheadingData(const GnssheadingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::minieye::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_gps_week()) {
    gps_week_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.gps_week_);
  } else {
    gps_week_ = nullptr;
  }
  if (from._internal_has_gps_sec()) {
    gps_sec_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.gps_sec_);
  } else {
    gps_sec_ = nullptr;
  }
  if (from._internal_has_svs()) {
    svs_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.svs_);
  } else {
    svs_ = nullptr;
  }
  if (from._internal_has_soln_svs()) {
    soln_svs_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.soln_svs_);
  } else {
    soln_svs_ = nullptr;
  }
  if (from._internal_has_pos_type()) {
    pos_type_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.pos_type_);
  } else {
    pos_type_ = nullptr;
  }
  if (from._internal_has_length()) {
    length_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.length_);
  } else {
    length_ = nullptr;
  }
  if (from._internal_has_heading()) {
    heading_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.heading_);
  } else {
    heading_ = nullptr;
  }
  if (from._internal_has_pitch()) {
    pitch_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pitch_);
  } else {
    pitch_ = nullptr;
  }
  if (from._internal_has_hdg_std()) {
    hdg_std_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.hdg_std_);
  } else {
    hdg_std_ = nullptr;
  }
  if (from._internal_has_pitch_std()) {
    pitch_std_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pitch_std_);
  } else {
    pitch_std_ = nullptr;
  }
  is_valid_ = from.is_valid_;
  // @@protoc_insertion_point(copy_constructor:minieye.GnssheadingData)
}

void GnssheadingData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GnssheadingData_apa_5fgnss_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(is_valid_));
}

GnssheadingData::~GnssheadingData() {
  // @@protoc_insertion_point(destructor:minieye.GnssheadingData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GnssheadingData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete gps_week_;
  if (this != internal_default_instance()) delete gps_sec_;
  if (this != internal_default_instance()) delete svs_;
  if (this != internal_default_instance()) delete soln_svs_;
  if (this != internal_default_instance()) delete pos_type_;
  if (this != internal_default_instance()) delete length_;
  if (this != internal_default_instance()) delete heading_;
  if (this != internal_default_instance()) delete pitch_;
  if (this != internal_default_instance()) delete hdg_std_;
  if (this != internal_default_instance()) delete pitch_std_;
}

void GnssheadingData::ArenaDtor(void* object) {
  GnssheadingData* _this = reinterpret_cast< GnssheadingData* >(object);
  (void)_this;
}
void GnssheadingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GnssheadingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnssheadingData& GnssheadingData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnssheadingData_apa_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void GnssheadingData::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.GnssheadingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && gps_week_ != nullptr) {
    delete gps_week_;
  }
  gps_week_ = nullptr;
  if (GetArena() == nullptr && gps_sec_ != nullptr) {
    delete gps_sec_;
  }
  gps_sec_ = nullptr;
  if (GetArena() == nullptr && svs_ != nullptr) {
    delete svs_;
  }
  svs_ = nullptr;
  if (GetArena() == nullptr && soln_svs_ != nullptr) {
    delete soln_svs_;
  }
  soln_svs_ = nullptr;
  if (GetArena() == nullptr && pos_type_ != nullptr) {
    delete pos_type_;
  }
  pos_type_ = nullptr;
  if (GetArena() == nullptr && length_ != nullptr) {
    delete length_;
  }
  length_ = nullptr;
  if (GetArena() == nullptr && heading_ != nullptr) {
    delete heading_;
  }
  heading_ = nullptr;
  if (GetArena() == nullptr && pitch_ != nullptr) {
    delete pitch_;
  }
  pitch_ = nullptr;
  if (GetArena() == nullptr && hdg_std_ != nullptr) {
    delete hdg_std_;
  }
  hdg_std_ = nullptr;
  if (GetArena() == nullptr && pitch_std_ != nullptr) {
    delete pitch_std_;
  }
  pitch_std_ = nullptr;
  is_valid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssheadingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value gps_week = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_week(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue gps_sec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_sec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value svs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_svs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value soln_svs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_soln_svs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value pos_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue length = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_length(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue heading = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_heading(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pitch = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pitch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue hdg_std = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdg_std(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pitch_std = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pitch_std(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnssheadingData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.GnssheadingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bool is_valid = 2;
  if (this->is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_valid(), target);
  }

  // .google.protobuf.UInt32Value gps_week = 3;
  if (this->has_gps_week()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gps_week(this), target, stream);
  }

  // .google.protobuf.DoubleValue gps_sec = 4;
  if (this->has_gps_sec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gps_sec(this), target, stream);
  }

  // .google.protobuf.UInt32Value svs = 5;
  if (this->has_svs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::svs(this), target, stream);
  }

  // .google.protobuf.UInt32Value soln_svs = 6;
  if (this->has_soln_svs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::soln_svs(this), target, stream);
  }

  // .google.protobuf.UInt32Value pos_type = 7;
  if (this->has_pos_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::pos_type(this), target, stream);
  }

  // .google.protobuf.FloatValue length = 8;
  if (this->has_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::length(this), target, stream);
  }

  // .google.protobuf.FloatValue heading = 9;
  if (this->has_heading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::heading(this), target, stream);
  }

  // .google.protobuf.FloatValue pitch = 10;
  if (this->has_pitch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::pitch(this), target, stream);
  }

  // .google.protobuf.FloatValue hdg_std = 11;
  if (this->has_hdg_std()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::hdg_std(this), target, stream);
  }

  // .google.protobuf.FloatValue pitch_std = 12;
  if (this->has_pitch_std()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::pitch_std(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.GnssheadingData)
  return target;
}

size_t GnssheadingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.GnssheadingData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .google.protobuf.UInt32Value gps_week = 3;
  if (this->has_gps_week()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_week_);
  }

  // .google.protobuf.DoubleValue gps_sec = 4;
  if (this->has_gps_sec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_sec_);
  }

  // .google.protobuf.UInt32Value svs = 5;
  if (this->has_svs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *svs_);
  }

  // .google.protobuf.UInt32Value soln_svs = 6;
  if (this->has_soln_svs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *soln_svs_);
  }

  // .google.protobuf.UInt32Value pos_type = 7;
  if (this->has_pos_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_type_);
  }

  // .google.protobuf.FloatValue length = 8;
  if (this->has_length()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *length_);
  }

  // .google.protobuf.FloatValue heading = 9;
  if (this->has_heading()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heading_);
  }

  // .google.protobuf.FloatValue pitch = 10;
  if (this->has_pitch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pitch_);
  }

  // .google.protobuf.FloatValue hdg_std = 11;
  if (this->has_hdg_std()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdg_std_);
  }

  // .google.protobuf.FloatValue pitch_std = 12;
  if (this->has_pitch_std()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pitch_std_);
  }

  // bool is_valid = 2;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssheadingData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.GnssheadingData)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssheadingData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnssheadingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.GnssheadingData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.GnssheadingData)
    MergeFrom(*source);
  }
}

void GnssheadingData::MergeFrom(const GnssheadingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.GnssheadingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::minieye::Header::MergeFrom(from._internal_header());
  }
  if (from.has_gps_week()) {
    _internal_mutable_gps_week()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_gps_week());
  }
  if (from.has_gps_sec()) {
    _internal_mutable_gps_sec()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_gps_sec());
  }
  if (from.has_svs()) {
    _internal_mutable_svs()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_svs());
  }
  if (from.has_soln_svs()) {
    _internal_mutable_soln_svs()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_soln_svs());
  }
  if (from.has_pos_type()) {
    _internal_mutable_pos_type()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_pos_type());
  }
  if (from.has_length()) {
    _internal_mutable_length()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_length());
  }
  if (from.has_heading()) {
    _internal_mutable_heading()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_heading());
  }
  if (from.has_pitch()) {
    _internal_mutable_pitch()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pitch());
  }
  if (from.has_hdg_std()) {
    _internal_mutable_hdg_std()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_hdg_std());
  }
  if (from.has_pitch_std()) {
    _internal_mutable_pitch_std()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pitch_std());
  }
  if (from.is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
}

void GnssheadingData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.GnssheadingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssheadingData::CopyFrom(const GnssheadingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.GnssheadingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssheadingData::IsInitialized() const {
  return true;
}

void GnssheadingData::InternalSwap(GnssheadingData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssheadingData, is_valid_)
      + sizeof(GnssheadingData::is_valid_)
      - PROTOBUF_FIELD_OFFSET(GnssheadingData, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssheadingData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GnssData::InitAsDefaultInstance() {
}
class GnssData::_Internal {
 public:
};

GnssData::GnssData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gnss_pos_(arena),
  gnss_vel_(arena),
  gnss_heading_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.GnssData)
}
GnssData::GnssData(const GnssData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gnss_pos_(from.gnss_pos_),
      gnss_vel_(from.gnss_vel_),
      gnss_heading_(from.gnss_heading_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.GnssData)
}

void GnssData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GnssData_apa_5fgnss_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
}

GnssData::~GnssData() {
  // @@protoc_insertion_point(destructor:minieye.GnssData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GnssData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GnssData::ArenaDtor(void* object) {
  GnssData* _this = reinterpret_cast< GnssData* >(object);
  (void)_this;
}
void GnssData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GnssData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnssData& GnssData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnssData_apa_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void GnssData::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.GnssData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gnss_pos_.Clear();
  gnss_vel_.Clear();
  gnss_heading_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .minieye.GnssposData gnss_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gnss_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.GnssvelData gnss_vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gnss_vel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.GnssheadingData gnss_heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gnss_heading(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnssData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.GnssData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minieye.GnssposData gnss_pos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gnss_pos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gnss_pos(i), target, stream);
  }

  // repeated .minieye.GnssvelData gnss_vel = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gnss_vel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_gnss_vel(i), target, stream);
  }

  // repeated .minieye.GnssheadingData gnss_heading = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gnss_heading_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_gnss_heading(i), target, stream);
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // uint64 tick = 5;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.GnssData)
  return target;
}

size_t GnssData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.GnssData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.GnssposData gnss_pos = 1;
  total_size += 1UL * this->_internal_gnss_pos_size();
  for (const auto& msg : this->gnss_pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.GnssvelData gnss_vel = 2;
  total_size += 1UL * this->_internal_gnss_vel_size();
  for (const auto& msg : this->gnss_vel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.GnssheadingData gnss_heading = 3;
  total_size += 1UL * this->_internal_gnss_heading_size();
  for (const auto& msg : this->gnss_heading_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 5;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.GnssData)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnssData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.GnssData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.GnssData)
    MergeFrom(*source);
  }
}

void GnssData::MergeFrom(const GnssData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.GnssData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gnss_pos_.MergeFrom(from.gnss_pos_);
  gnss_vel_.MergeFrom(from.gnss_vel_);
  gnss_heading_.MergeFrom(from.gnss_heading_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void GnssData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.GnssData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssData::CopyFrom(const GnssData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.GnssData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssData::IsInitialized() const {
  return true;
}

void GnssData::InternalSwap(GnssData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gnss_pos_.InternalSwap(&other->gnss_pos_);
  gnss_vel_.InternalSwap(&other->gnss_vel_);
  gnss_heading_.InternalSwap(&other->gnss_heading_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssData, tick_)
      + sizeof(GnssData::tick_)
      - PROTOBUF_FIELD_OFFSET(GnssData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::GnssposData* Arena::CreateMaybeMessage< ::minieye::GnssposData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::GnssposData >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::GnssvelData* Arena::CreateMaybeMessage< ::minieye::GnssvelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::GnssvelData >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::GnssheadingData* Arena::CreateMaybeMessage< ::minieye::GnssheadingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::GnssheadingData >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::GnssData* Arena::CreateMaybeMessage< ::minieye::GnssData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::GnssData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
