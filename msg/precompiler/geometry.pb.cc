// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto

#include "geometry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EvalStats_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point2D_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point2f_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point3D_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point3f_geometry_2eproto;
namespace perception {
namespace common {
class EvalStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EvalStats> _instance;
} _EvalStats_default_instance_;
class Point2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point2D> _instance;
} _Point2D_default_instance_;
class Point3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point3D> _instance;
} _Point3D_default_instance_;
class XYZDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XYZ> _instance;
} _XYZ_default_instance_;
class XYDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XY> _instance;
} _XY_default_instance_;
class Size3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Size3D> _instance;
} _Size3D_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class Point2fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point2f> _instance;
} _Point2f_default_instance_;
class Point3fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point3f> _instance;
} _Point3f_default_instance_;
class HafQuaternionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HafQuaternion> _instance;
} _HafQuaternion_default_instance_;
class Angle3fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Angle3f> _instance;
} _Angle3f_default_instance_;
class Point2fListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point2fList> _instance;
} _Point2fList_default_instance_;
class Point2DListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point2DList> _instance;
} _Point2DList_default_instance_;
class Point3DListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point3DList> _instance;
} _Point3DList_default_instance_;
class Point3fListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point3fList> _instance;
} _Point3fList_default_instance_;
class PointListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointList> _instance;
} _PointList_default_instance_;
class RectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rect> _instance;
} _Rect_default_instance_;
class Rect2fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rect2f> _instance;
} _Rect2f_default_instance_;
class Rect3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rect3D> _instance;
} _Rect3D_default_instance_;
class Rect2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rect2D> _instance;
} _Rect2D_default_instance_;
class Box3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Box3D> _instance;
} _Box3D_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Polygon> _instance;
} _Polygon_default_instance_;
class PoseAngleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseAngle> _instance;
} _PoseAngle_default_instance_;
class IntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Int> _instance;
} _Int_default_instance_;
class FloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Float> _instance;
} _Float_default_instance_;
class UIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UInt> _instance;
} _UInt_default_instance_;
class FloatArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatArray> _instance;
} _FloatArray_default_instance_;
}  // namespace common
}  // namespace perception
static void InitDefaultsscc_info_Angle3f_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Angle3f_default_instance_;
    new (ptr) ::perception::common::Angle3f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Angle3f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Angle3f_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Angle3f_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Box3D_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Box3D_default_instance_;
    new (ptr) ::perception::common::Box3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Box3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Box3D_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Box3D_geometry_2eproto}, {
      &scc_info_Point3D_geometry_2eproto.base,
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_EvalStats_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_EvalStats_default_instance_;
    new (ptr) ::perception::common::EvalStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::EvalStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EvalStats_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EvalStats_geometry_2eproto}, {}};

static void InitDefaultsscc_info_Float_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Float_default_instance_;
    new (ptr) ::perception::common::Float();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Float::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Float_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Float_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_FloatArray_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_FloatArray_default_instance_;
    new (ptr) ::perception::common::FloatArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::FloatArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatArray_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FloatArray_geometry_2eproto}, {}};

static void InitDefaultsscc_info_HafQuaternion_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_HafQuaternion_default_instance_;
    new (ptr) ::perception::common::HafQuaternion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::HafQuaternion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HafQuaternion_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HafQuaternion_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Int_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Int_default_instance_;
    new (ptr) ::perception::common::Int();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Int::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Int_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Int_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Point_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Point_default_instance_;
    new (ptr) ::perception::common::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Point_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Point2D_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Point2D_default_instance_;
    new (ptr) ::perception::common::Point2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Point2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point2D_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Point2D_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Point2DList_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Point2DList_default_instance_;
    new (ptr) ::perception::common::Point2DList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Point2DList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Point2DList_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Point2DList_geometry_2eproto}, {
      &scc_info_Point2D_geometry_2eproto.base,
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Point2f_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Point2f_default_instance_;
    new (ptr) ::perception::common::Point2f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Point2f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point2f_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Point2f_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Point2fList_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Point2fList_default_instance_;
    new (ptr) ::perception::common::Point2fList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Point2fList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Point2fList_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Point2fList_geometry_2eproto}, {
      &scc_info_Point2f_geometry_2eproto.base,
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Point3D_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Point3D_default_instance_;
    new (ptr) ::perception::common::Point3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Point3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point3D_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Point3D_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Point3DList_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Point3DList_default_instance_;
    new (ptr) ::perception::common::Point3DList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Point3DList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Point3DList_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Point3DList_geometry_2eproto}, {
      &scc_info_Point3D_geometry_2eproto.base,
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Point3f_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Point3f_default_instance_;
    new (ptr) ::perception::common::Point3f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Point3f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point3f_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Point3f_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Point3fList_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Point3fList_default_instance_;
    new (ptr) ::perception::common::Point3fList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Point3fList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Point3fList_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Point3fList_geometry_2eproto}, {
      &scc_info_Point3f_geometry_2eproto.base,
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_PointList_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_PointList_default_instance_;
    new (ptr) ::perception::common::PointList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::PointList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PointList_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PointList_geometry_2eproto}, {
      &scc_info_Point_geometry_2eproto.base,
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Polygon_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Polygon_default_instance_;
    new (ptr) ::perception::common::Polygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Polygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Polygon_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Polygon_geometry_2eproto}, {
      &scc_info_Point3D_geometry_2eproto.base,
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_PoseAngle_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_PoseAngle_default_instance_;
    new (ptr) ::perception::common::PoseAngle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::PoseAngle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseAngle_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PoseAngle_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Rect_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Rect_default_instance_;
    new (ptr) ::perception::common::Rect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Rect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rect_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Rect_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Rect2D_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Rect2D_default_instance_;
    new (ptr) ::perception::common::Rect2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Rect2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rect2D_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Rect2D_geometry_2eproto}, {
      &scc_info_Point2D_geometry_2eproto.base,
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Rect2f_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Rect2f_default_instance_;
    new (ptr) ::perception::common::Rect2f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Rect2f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rect2f_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Rect2f_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Rect3D_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Rect3D_default_instance_;
    new (ptr) ::perception::common::Rect3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Rect3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rect3D_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Rect3D_geometry_2eproto}, {
      &scc_info_Point3D_geometry_2eproto.base,
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Size3D_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_Size3D_default_instance_;
    new (ptr) ::perception::common::Size3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::Size3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Size3D_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Size3D_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_UInt_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_UInt_default_instance_;
    new (ptr) ::perception::common::UInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::UInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UInt_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UInt_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static void InitDefaultsscc_info_XY_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_XY_default_instance_;
    new (ptr) ::perception::common::XY();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::XY::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XY_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_XY_geometry_2eproto}, {}};

static void InitDefaultsscc_info_XYZ_geometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::common::_XYZ_default_instance_;
    new (ptr) ::perception::common::XYZ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::common::XYZ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_XYZ_geometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_XYZ_geometry_2eproto}, {
      &scc_info_EvalStats_geometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_geometry_2eproto[27];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_geometry_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_geometry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_geometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::EvalStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::EvalStats, mean_),
  PROTOBUF_FIELD_OFFSET(::perception::common::EvalStats, std_),
  PROTOBUF_FIELD_OFFSET(::perception::common::EvalStats, prob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2D, x_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2D, y_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2D, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3D, x_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3D, y_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3D, z_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3D, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::XYZ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::XYZ, x_),
  PROTOBUF_FIELD_OFFSET(::perception::common::XYZ, y_),
  PROTOBUF_FIELD_OFFSET(::perception::common::XYZ, z_),
  PROTOBUF_FIELD_OFFSET(::perception::common::XYZ, evals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::XY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::XY, x_),
  PROTOBUF_FIELD_OFFSET(::perception::common::XY, y_),
  PROTOBUF_FIELD_OFFSET(::perception::common::XY, tm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Size3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Size3D, w_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Size3D, h_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Size3D, l_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Size3D, evals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point, x_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point, y_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2f, x_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2f, y_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2f, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3f, x_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3f, y_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3f, z_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3f, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::HafQuaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::HafQuaternion, x_),
  PROTOBUF_FIELD_OFFSET(::perception::common::HafQuaternion, y_),
  PROTOBUF_FIELD_OFFSET(::perception::common::HafQuaternion, z_),
  PROTOBUF_FIELD_OFFSET(::perception::common::HafQuaternion, w_),
  PROTOBUF_FIELD_OFFSET(::perception::common::HafQuaternion, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Angle3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Angle3f, center_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Angle3f, left_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Angle3f, right_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Angle3f, evals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2fList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2fList, pts_list_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2fList, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2DList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2DList, pts_list_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point2DList, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3DList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3DList, pts_list_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3DList, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3fList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3fList, pts_list_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Point3fList, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::PointList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::PointList, pts_list_),
  PROTOBUF_FIELD_OFFSET(::perception::common::PointList, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect, x_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect, y_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect, w_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect, h_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect2f, x_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect2f, y_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect2f, w_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect2f, h_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect2f, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect3D, center_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect3D, center_std_dev_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect3D, size_lwh_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect3D, size_std_dev_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect3D, orientation_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect3D, orientation_std_dev_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect3D, corners_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect3D, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect2D, center_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect2D, size_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Rect2D, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Box3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Box3D, lower_lt_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Box3D, lower_lb_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Box3D, lower_rb_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Box3D, lower_rt_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Box3D, upper_lt_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Box3D, upper_lb_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Box3D, upper_rb_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Box3D, upper_rt_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Box3D, conf_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Box3D, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Polygon, pts_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Polygon, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::PoseAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::PoseAngle, pitch_),
  PROTOBUF_FIELD_OFFSET(::perception::common::PoseAngle, yaw_),
  PROTOBUF_FIELD_OFFSET(::perception::common::PoseAngle, roll_),
  PROTOBUF_FIELD_OFFSET(::perception::common::PoseAngle, evals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Int, val_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Int, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::Float, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::Float, val_),
  PROTOBUF_FIELD_OFFSET(::perception::common::Float, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::UInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::UInt, val_),
  PROTOBUF_FIELD_OFFSET(::perception::common::UInt, eval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::common::FloatArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::common::FloatArray, vals_),
  PROTOBUF_FIELD_OFFSET(::perception::common::FloatArray, conf_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perception::common::EvalStats)},
  { 8, -1, sizeof(::perception::common::Point2D)},
  { 16, -1, sizeof(::perception::common::Point3D)},
  { 25, -1, sizeof(::perception::common::XYZ)},
  { 34, -1, sizeof(::perception::common::XY)},
  { 42, -1, sizeof(::perception::common::Size3D)},
  { 51, -1, sizeof(::perception::common::Point)},
  { 59, -1, sizeof(::perception::common::Point2f)},
  { 67, -1, sizeof(::perception::common::Point3f)},
  { 76, -1, sizeof(::perception::common::HafQuaternion)},
  { 86, -1, sizeof(::perception::common::Angle3f)},
  { 95, -1, sizeof(::perception::common::Point2fList)},
  { 102, -1, sizeof(::perception::common::Point2DList)},
  { 109, -1, sizeof(::perception::common::Point3DList)},
  { 116, -1, sizeof(::perception::common::Point3fList)},
  { 123, -1, sizeof(::perception::common::PointList)},
  { 130, -1, sizeof(::perception::common::Rect)},
  { 140, -1, sizeof(::perception::common::Rect2f)},
  { 150, -1, sizeof(::perception::common::Rect3D)},
  { 163, -1, sizeof(::perception::common::Rect2D)},
  { 171, -1, sizeof(::perception::common::Box3D)},
  { 186, -1, sizeof(::perception::common::Polygon)},
  { 193, -1, sizeof(::perception::common::PoseAngle)},
  { 202, -1, sizeof(::perception::common::Int)},
  { 209, -1, sizeof(::perception::common::Float)},
  { 216, -1, sizeof(::perception::common::UInt)},
  { 223, -1, sizeof(::perception::common::FloatArray)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_EvalStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Point2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Point3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_XYZ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_XY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Size3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Point2f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Point3f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_HafQuaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Angle3f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Point2fList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Point2DList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Point3DList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Point3fList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_PointList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Rect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Rect2f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Rect3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Rect2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Box3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_PoseAngle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Int_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_Float_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_UInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::common::_FloatArray_default_instance_),
};

const char descriptor_table_protodef_geometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016geometry.proto\022\021perception.common\"4\n\tE"
  "valStats\022\014\n\004mean\030\001 \001(\002\022\013\n\003std\030\002 \001(\002\022\014\n\004p"
  "rob\030\003 \001(\002\"K\n\007Point2D\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001"
  "(\001\022*\n\004eval\030\003 \001(\0132\034.perception.common.Eva"
  "lStats\"V\n\007Point3D\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022"
  "\t\n\001z\030\003 \001(\001\022*\n\004eval\030\004 \001(\0132\034.perception.co"
  "mmon.EvalStats\"S\n\003XYZ\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 "
  "\001(\001\022\t\n\001z\030\003 \001(\001\022+\n\005evals\030\004 \003(\0132\034.percepti"
  "on.common.EvalStats\"&\n\002XY\022\t\n\001x\030\001 \001(\002\022\t\n\001"
  "y\030\002 \001(\002\022\n\n\002tm\030\003 \001(\003\"V\n\006Size3D\022\t\n\001w\030\001 \001(\001"
  "\022\t\n\001h\030\002 \001(\001\022\t\n\001l\030\003 \001(\001\022+\n\005evals\030\004 \003(\0132\034."
  "perception.common.EvalStats\"I\n\005Point\022\t\n\001"
  "x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022*\n\004eval\030\003 \001(\0132\034.perce"
  "ption.common.EvalStats\"K\n\007Point2f\022\t\n\001x\030\001"
  " \001(\002\022\t\n\001y\030\002 \001(\002\022*\n\004eval\030\003 \001(\0132\034.percepti"
  "on.common.EvalStats\"V\n\007Point3f\022\t\n\001x\030\001 \001("
  "\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022*\n\004eval\030\004 \001(\0132\034."
  "perception.common.EvalStats\"g\n\rHafQuater"
  "nion\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n"
  "\001w\030\004 \001(\001\022*\n\004eval\030\005 \001(\0132\034.perception.comm"
  "on.EvalStats\"c\n\007Angle3f\022\016\n\006center\030\001 \001(\002\022"
  "\014\n\004left\030\002 \001(\002\022\r\n\005right\030\003 \001(\002\022+\n\005evals\030\004 "
  "\003(\0132\034.perception.common.EvalStats\"g\n\013Poi"
  "nt2fList\022,\n\010pts_list\030\001 \003(\0132\032.perception."
  "common.Point2f\022*\n\004eval\030\002 \001(\0132\034.perceptio"
  "n.common.EvalStats\"g\n\013Point2DList\022,\n\010pts"
  "_list\030\001 \003(\0132\032.perception.common.Point2D\022"
  "*\n\004eval\030\002 \001(\0132\034.perception.common.EvalSt"
  "ats\"g\n\013Point3DList\022,\n\010pts_list\030\001 \003(\0132\032.p"
  "erception.common.Point3D\022*\n\004eval\030\002 \001(\0132\034"
  ".perception.common.EvalStats\"g\n\013Point3fL"
  "ist\022,\n\010pts_list\030\001 \003(\0132\032.perception.commo"
  "n.Point3f\022*\n\004eval\030\002 \001(\0132\034.perception.com"
  "mon.EvalStats\"c\n\tPointList\022*\n\010pts_list\030\001"
  " \003(\0132\030.perception.common.Point\022*\n\004eval\030\002"
  " \001(\0132\034.perception.common.EvalStats\"^\n\004Re"
  "ct\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001w\030\003 \001(\005\022\t\n\001h"
  "\030\004 \001(\005\022*\n\004eval\030\005 \001(\0132\034.perception.common"
  ".EvalStats\"`\n\006Rect2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
  "(\002\022\t\n\001w\030\003 \001(\002\022\t\n\001h\030\004 \001(\002\022*\n\004eval\030\005 \001(\0132\034"
  ".perception.common.EvalStats\"\323\002\n\006Rect3D\022"
  "*\n\006center\030\001 \001(\0132\032.perception.common.Poin"
  "t3D\0222\n\016center_std_dev\030\002 \001(\0132\032.perception"
  ".common.Point3D\022,\n\010size_lwh\030\003 \001(\0132\032.perc"
  "eption.common.Point3D\0220\n\014size_std_dev\030\004 "
  "\001(\0132\032.perception.common.Point3D\022\023\n\013orien"
  "tation\030\005 \001(\001\022\033\n\023orientation_std_dev\030\006 \001("
  "\001\022+\n\007corners\030\007 \003(\0132\032.perception.common.P"
  "oint3D\022*\n\004eval\030\010 \001(\0132\034.perception.common"
  ".EvalStats\"\212\001\n\006Rect2D\022*\n\006center\030\001 \001(\0132\032."
  "perception.common.Point2D\022(\n\004size\030\002 \001(\0132"
  "\032.perception.common.Point2D\022*\n\004eval\030\003 \001("
  "\0132\034.perception.common.EvalStats\"\261\003\n\005Box3"
  "D\022,\n\010lower_lt\030\001 \001(\0132\032.perception.common."
  "Point3D\022,\n\010lower_lb\030\002 \001(\0132\032.perception.c"
  "ommon.Point3D\022,\n\010lower_rb\030\003 \001(\0132\032.percep"
  "tion.common.Point3D\022,\n\010lower_rt\030\004 \001(\0132\032."
  "perception.common.Point3D\022,\n\010upper_lt\030\005 "
  "\001(\0132\032.perception.common.Point3D\022,\n\010upper"
  "_lb\030\006 \001(\0132\032.perception.common.Point3D\022,\n"
  "\010upper_rb\030\007 \001(\0132\032.perception.common.Poin"
  "t3D\022,\n\010upper_rt\030\010 \001(\0132\032.perception.commo"
  "n.Point3D\022\014\n\004conf\030\t \001(\002\022*\n\004eval\030\n \001(\0132\034."
  "perception.common.EvalStats\"^\n\007Polygon\022\'"
  "\n\003pts\030\001 \003(\0132\032.perception.common.Point3D\022"
  "*\n\004eval\030\002 \001(\0132\034.perception.common.EvalSt"
  "ats\"b\n\tPoseAngle\022\r\n\005pitch\030\001 \001(\002\022\013\n\003yaw\030\002"
  " \001(\002\022\014\n\004roll\030\003 \001(\002\022+\n\005evals\030\004 \003(\0132\034.perc"
  "eption.common.EvalStats\">\n\003Int\022\013\n\003val\030\001 "
  "\001(\005\022*\n\004eval\030\002 \001(\0132\034.perception.common.Ev"
  "alStats\"@\n\005Float\022\013\n\003val\030\001 \001(\002\022*\n\004eval\030\002 "
  "\001(\0132\034.perception.common.EvalStats\"\?\n\004UIn"
  "t\022\013\n\003val\030\001 \001(\r\022*\n\004eval\030\002 \001(\0132\034.perceptio"
  "n.common.EvalStats\"(\n\nFloatArray\022\014\n\004vals"
  "\030\001 \003(\002\022\014\n\004conf\030\002 \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_geometry_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_geometry_2eproto_sccs[27] = {
  &scc_info_Angle3f_geometry_2eproto.base,
  &scc_info_Box3D_geometry_2eproto.base,
  &scc_info_EvalStats_geometry_2eproto.base,
  &scc_info_Float_geometry_2eproto.base,
  &scc_info_FloatArray_geometry_2eproto.base,
  &scc_info_HafQuaternion_geometry_2eproto.base,
  &scc_info_Int_geometry_2eproto.base,
  &scc_info_Point_geometry_2eproto.base,
  &scc_info_Point2D_geometry_2eproto.base,
  &scc_info_Point2DList_geometry_2eproto.base,
  &scc_info_Point2f_geometry_2eproto.base,
  &scc_info_Point2fList_geometry_2eproto.base,
  &scc_info_Point3D_geometry_2eproto.base,
  &scc_info_Point3DList_geometry_2eproto.base,
  &scc_info_Point3f_geometry_2eproto.base,
  &scc_info_Point3fList_geometry_2eproto.base,
  &scc_info_PointList_geometry_2eproto.base,
  &scc_info_Polygon_geometry_2eproto.base,
  &scc_info_PoseAngle_geometry_2eproto.base,
  &scc_info_Rect_geometry_2eproto.base,
  &scc_info_Rect2D_geometry_2eproto.base,
  &scc_info_Rect2f_geometry_2eproto.base,
  &scc_info_Rect3D_geometry_2eproto.base,
  &scc_info_Size3D_geometry_2eproto.base,
  &scc_info_UInt_geometry_2eproto.base,
  &scc_info_XY_geometry_2eproto.base,
  &scc_info_XYZ_geometry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_geometry_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geometry_2eproto = {
  false, false, descriptor_table_protodef_geometry_2eproto, "geometry.proto", 2988,
  &descriptor_table_geometry_2eproto_once, descriptor_table_geometry_2eproto_sccs, descriptor_table_geometry_2eproto_deps, 27, 0,
  schemas, file_default_instances, TableStruct_geometry_2eproto::offsets,
  file_level_metadata_geometry_2eproto, 27, file_level_enum_descriptors_geometry_2eproto, file_level_service_descriptors_geometry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_geometry_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_geometry_2eproto)), true);
namespace perception {
namespace common {

// ===================================================================

void EvalStats::InitAsDefaultInstance() {
}
class EvalStats::_Internal {
 public:
};

EvalStats::EvalStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.EvalStats)
}
EvalStats::EvalStats(const EvalStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mean_, &from.mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&prob_) -
    reinterpret_cast<char*>(&mean_)) + sizeof(prob_));
  // @@protoc_insertion_point(copy_constructor:perception.common.EvalStats)
}

void EvalStats::SharedCtor() {
  ::memset(&mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_) -
      reinterpret_cast<char*>(&mean_)) + sizeof(prob_));
}

EvalStats::~EvalStats() {
  // @@protoc_insertion_point(destructor:perception.common.EvalStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EvalStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EvalStats::ArenaDtor(void* object) {
  EvalStats* _this = reinterpret_cast< EvalStats* >(object);
  (void)_this;
}
void EvalStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvalStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EvalStats& EvalStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EvalStats_geometry_2eproto.base);
  return *internal_default_instance();
}


void EvalStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.EvalStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_) -
      reinterpret_cast<char*>(&mean_)) + sizeof(prob_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvalStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float mean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float std = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float prob = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvalStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.EvalStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float mean = 1;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_mean(), target);
  }

  // float std = 2;
  if (!(this->std() <= 0 && this->std() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_std(), target);
  }

  // float prob = 3;
  if (!(this->prob() <= 0 && this->prob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_prob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.EvalStats)
  return target;
}

size_t EvalStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.EvalStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float mean = 1;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    total_size += 1 + 4;
  }

  // float std = 2;
  if (!(this->std() <= 0 && this->std() >= 0)) {
    total_size += 1 + 4;
  }

  // float prob = 3;
  if (!(this->prob() <= 0 && this->prob() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvalStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.EvalStats)
  GOOGLE_DCHECK_NE(&from, this);
  const EvalStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EvalStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.EvalStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.EvalStats)
    MergeFrom(*source);
  }
}

void EvalStats::MergeFrom(const EvalStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.EvalStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.mean() <= 0 && from.mean() >= 0)) {
    _internal_set_mean(from._internal_mean());
  }
  if (!(from.std() <= 0 && from.std() >= 0)) {
    _internal_set_std(from._internal_std());
  }
  if (!(from.prob() <= 0 && from.prob() >= 0)) {
    _internal_set_prob(from._internal_prob());
  }
}

void EvalStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.EvalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvalStats::CopyFrom(const EvalStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.EvalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalStats::IsInitialized() const {
  return true;
}

void EvalStats::InternalSwap(EvalStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvalStats, prob_)
      + sizeof(EvalStats::prob_)
      - PROTOBUF_FIELD_OFFSET(EvalStats, mean_)>(
          reinterpret_cast<char*>(&mean_),
          reinterpret_cast<char*>(&other->mean_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point2D::InitAsDefaultInstance() {
  ::perception::common::_Point2D_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Point2D::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Point2D* msg);
};

const ::perception::common::EvalStats&
Point2D::_Internal::eval(const Point2D* msg) {
  return *msg->eval_;
}
Point2D::Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Point2D)
}
Point2D::Point2D(const Point2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:perception.common.Point2D)
}

void Point2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point2D_geometry_2eproto.base);
  ::memset(&eval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&eval_)) + sizeof(y_));
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:perception.common.Point2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Point2D::ArenaDtor(void* object) {
  Point2D* _this = reinterpret_cast< Point2D* >(object);
  (void)_this;
}
void Point2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point2D& Point2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point2D_geometry_2eproto.base);
  return *internal_default_instance();
}


void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // .perception.common.EvalStats eval = 3;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Point2D)
  return target;
}

size_t Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Point2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.EvalStats eval = 3;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Point2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Point2D)
    MergeFrom(*source);
  }
}

void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {
  return true;
}

void Point2D::InternalSwap(Point2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2D, y_)
      + sizeof(Point2D::y_)
      - PROTOBUF_FIELD_OFFSET(Point2D, eval_)>(
          reinterpret_cast<char*>(&eval_),
          reinterpret_cast<char*>(&other->eval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point3D::InitAsDefaultInstance() {
  ::perception::common::_Point3D_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Point3D::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Point3D* msg);
};

const ::perception::common::EvalStats&
Point3D::_Internal::eval(const Point3D* msg) {
  return *msg->eval_;
}
Point3D::Point3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Point3D)
}
Point3D::Point3D(const Point3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:perception.common.Point3D)
}

void Point3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point3D_geometry_2eproto.base);
  ::memset(&eval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&eval_)) + sizeof(z_));
}

Point3D::~Point3D() {
  // @@protoc_insertion_point(destructor:perception.common.Point3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Point3D::ArenaDtor(void* object) {
  Point3D* _this = reinterpret_cast< Point3D* >(object);
  (void)_this;
}
void Point3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point3D& Point3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point3D_geometry_2eproto.base);
  return *internal_default_instance();
}


void Point3D::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Point3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Point3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // .perception.common.EvalStats eval = 4;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Point3D)
  return target;
}

size_t Point3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Point3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.EvalStats eval = 4;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Point3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Point3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Point3D)
    MergeFrom(*source);
  }
}

void Point3D::MergeFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Point3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3D::CopyFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3D::IsInitialized() const {
  return true;
}

void Point3D::InternalSwap(Point3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3D, z_)
      + sizeof(Point3D::z_)
      - PROTOBUF_FIELD_OFFSET(Point3D, eval_)>(
          reinterpret_cast<char*>(&eval_),
          reinterpret_cast<char*>(&other->eval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void XYZ::InitAsDefaultInstance() {
}
class XYZ::_Internal {
 public:
};

XYZ::XYZ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  evals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.XYZ)
}
XYZ::XYZ(const XYZ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      evals_(from.evals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:perception.common.XYZ)
}

void XYZ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_XYZ_geometry_2eproto.base);
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

XYZ::~XYZ() {
  // @@protoc_insertion_point(destructor:perception.common.XYZ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XYZ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void XYZ::ArenaDtor(void* object) {
  XYZ* _this = reinterpret_cast< XYZ* >(object);
  (void)_this;
}
void XYZ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XYZ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XYZ& XYZ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XYZ_geometry_2eproto.base);
  return *internal_default_instance();
}


void XYZ::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.XYZ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  evals_.Clear();
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XYZ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .perception.common.EvalStats evals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_evals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XYZ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.XYZ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // repeated .perception.common.EvalStats evals = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_evals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_evals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.XYZ)
  return target;
}

size_t XYZ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.XYZ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.EvalStats evals = 4;
  total_size += 1UL * this->_internal_evals_size();
  for (const auto& msg : this->evals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XYZ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.XYZ)
  GOOGLE_DCHECK_NE(&from, this);
  const XYZ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XYZ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.XYZ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.XYZ)
    MergeFrom(*source);
  }
}

void XYZ::MergeFrom(const XYZ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.XYZ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  evals_.MergeFrom(from.evals_);
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void XYZ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.XYZ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XYZ::CopyFrom(const XYZ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.XYZ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XYZ::IsInitialized() const {
  return true;
}

void XYZ::InternalSwap(XYZ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  evals_.InternalSwap(&other->evals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XYZ, z_)
      + sizeof(XYZ::z_)
      - PROTOBUF_FIELD_OFFSET(XYZ, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XYZ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void XY::InitAsDefaultInstance() {
}
class XY::_Internal {
 public:
};

XY::XY(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.XY)
}
XY::XY(const XY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&tm_) -
    reinterpret_cast<char*>(&x_)) + sizeof(tm_));
  // @@protoc_insertion_point(copy_constructor:perception.common.XY)
}

void XY::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tm_) -
      reinterpret_cast<char*>(&x_)) + sizeof(tm_));
}

XY::~XY() {
  // @@protoc_insertion_point(destructor:perception.common.XY)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XY::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void XY::ArenaDtor(void* object) {
  XY* _this = reinterpret_cast< XY* >(object);
  (void)_this;
}
void XY::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XY& XY::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XY_geometry_2eproto.base);
  return *internal_default_instance();
}


void XY::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.XY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tm_) -
      reinterpret_cast<char*>(&x_)) + sizeof(tm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 tm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.XY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // int64 tm = 3;
  if (this->tm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_tm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.XY)
  return target;
}

size_t XY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.XY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 tm = 3;
  if (this->tm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.XY)
  GOOGLE_DCHECK_NE(&from, this);
  const XY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.XY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.XY)
    MergeFrom(*source);
  }
}

void XY::MergeFrom(const XY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.XY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (from.tm() != 0) {
    _internal_set_tm(from._internal_tm());
  }
}

void XY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.XY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XY::CopyFrom(const XY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.XY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XY::IsInitialized() const {
  return true;
}

void XY::InternalSwap(XY* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XY, tm_)
      + sizeof(XY::tm_)
      - PROTOBUF_FIELD_OFFSET(XY, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XY::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Size3D::InitAsDefaultInstance() {
}
class Size3D::_Internal {
 public:
};

Size3D::Size3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  evals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Size3D)
}
Size3D::Size3D(const Size3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      evals_(from.evals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&w_)) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:perception.common.Size3D)
}

void Size3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Size3D_geometry_2eproto.base);
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&w_)) + sizeof(l_));
}

Size3D::~Size3D() {
  // @@protoc_insertion_point(destructor:perception.common.Size3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Size3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Size3D::ArenaDtor(void* object) {
  Size3D* _this = reinterpret_cast< Size3D* >(object);
  (void)_this;
}
void Size3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Size3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Size3D& Size3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Size3D_geometry_2eproto.base);
  return *internal_default_instance();
}


void Size3D::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Size3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  evals_.Clear();
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&w_)) + sizeof(l_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Size3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double h = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .perception.common.EvalStats evals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_evals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Size3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Size3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_w(), target);
  }

  // double h = 2;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_h(), target);
  }

  // double l = 3;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_l(), target);
  }

  // repeated .perception.common.EvalStats evals = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_evals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_evals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Size3D)
  return target;
}

size_t Size3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Size3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.EvalStats evals = 4;
  total_size += 1UL * this->_internal_evals_size();
  for (const auto& msg : this->evals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 8;
  }

  // double h = 2;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    total_size += 1 + 8;
  }

  // double l = 3;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Size3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Size3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Size3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Size3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Size3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Size3D)
    MergeFrom(*source);
  }
}

void Size3D::MergeFrom(const Size3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Size3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  evals_.MergeFrom(from.evals_);
  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from.h() <= 0 && from.h() >= 0)) {
    _internal_set_h(from._internal_h());
  }
  if (!(from.l() <= 0 && from.l() >= 0)) {
    _internal_set_l(from._internal_l());
  }
}

void Size3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Size3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size3D::CopyFrom(const Size3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Size3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size3D::IsInitialized() const {
  return true;
}

void Size3D::InternalSwap(Size3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  evals_.InternalSwap(&other->evals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Size3D, l_)
      + sizeof(Size3D::l_)
      - PROTOBUF_FIELD_OFFSET(Size3D, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Size3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point::InitAsDefaultInstance() {
  ::perception::common::_Point_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Point::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Point* msg);
};

const ::perception::common::EvalStats&
Point::_Internal::eval(const Point* msg) {
  return *msg->eval_;
}
Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:perception.common.Point)
}

void Point::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point_geometry_2eproto.base);
  ::memset(&eval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&eval_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:perception.common.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_geometry_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // .perception.common.EvalStats eval = 3;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.EvalStats eval = 3;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, y_)
      + sizeof(Point::y_)
      - PROTOBUF_FIELD_OFFSET(Point, eval_)>(
          reinterpret_cast<char*>(&eval_),
          reinterpret_cast<char*>(&other->eval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point2f::InitAsDefaultInstance() {
  ::perception::common::_Point2f_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Point2f::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Point2f* msg);
};

const ::perception::common::EvalStats&
Point2f::_Internal::eval(const Point2f* msg) {
  return *msg->eval_;
}
Point2f::Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Point2f)
}
Point2f::Point2f(const Point2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:perception.common.Point2f)
}

void Point2f::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point2f_geometry_2eproto.base);
  ::memset(&eval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&eval_)) + sizeof(y_));
}

Point2f::~Point2f() {
  // @@protoc_insertion_point(destructor:perception.common.Point2f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point2f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Point2f::ArenaDtor(void* object) {
  Point2f* _this = reinterpret_cast< Point2f* >(object);
  (void)_this;
}
void Point2f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point2f& Point2f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point2f_geometry_2eproto.base);
  return *internal_default_instance();
}


void Point2f::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Point2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Point2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // .perception.common.EvalStats eval = 3;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Point2f)
  return target;
}

size_t Point2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Point2f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.EvalStats eval = 3;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point2f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Point2f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Point2f)
    MergeFrom(*source);
  }
}

void Point2f::MergeFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point2f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2f::CopyFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2f::IsInitialized() const {
  return true;
}

void Point2f::InternalSwap(Point2f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2f, y_)
      + sizeof(Point2f::y_)
      - PROTOBUF_FIELD_OFFSET(Point2f, eval_)>(
          reinterpret_cast<char*>(&eval_),
          reinterpret_cast<char*>(&other->eval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point3f::InitAsDefaultInstance() {
  ::perception::common::_Point3f_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Point3f::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Point3f* msg);
};

const ::perception::common::EvalStats&
Point3f::_Internal::eval(const Point3f* msg) {
  return *msg->eval_;
}
Point3f::Point3f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Point3f)
}
Point3f::Point3f(const Point3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:perception.common.Point3f)
}

void Point3f::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point3f_geometry_2eproto.base);
  ::memset(&eval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&eval_)) + sizeof(z_));
}

Point3f::~Point3f() {
  // @@protoc_insertion_point(destructor:perception.common.Point3f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point3f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Point3f::ArenaDtor(void* object) {
  Point3f* _this = reinterpret_cast< Point3f* >(object);
  (void)_this;
}
void Point3f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point3f& Point3f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point3f_geometry_2eproto.base);
  return *internal_default_instance();
}


void Point3f::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Point3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point3f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Point3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // .perception.common.EvalStats eval = 4;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Point3f)
  return target;
}

size_t Point3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Point3f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.EvalStats eval = 4;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Point3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point3f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Point3f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Point3f)
    MergeFrom(*source);
  }
}

void Point3f::MergeFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Point3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point3f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3f::CopyFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3f::IsInitialized() const {
  return true;
}

void Point3f::InternalSwap(Point3f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3f, z_)
      + sizeof(Point3f::z_)
      - PROTOBUF_FIELD_OFFSET(Point3f, eval_)>(
          reinterpret_cast<char*>(&eval_),
          reinterpret_cast<char*>(&other->eval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HafQuaternion::InitAsDefaultInstance() {
  ::perception::common::_HafQuaternion_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class HafQuaternion::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const HafQuaternion* msg);
};

const ::perception::common::EvalStats&
HafQuaternion::_Internal::eval(const HafQuaternion* msg) {
  return *msg->eval_;
}
HafQuaternion::HafQuaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.HafQuaternion)
}
HafQuaternion::HafQuaternion(const HafQuaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:perception.common.HafQuaternion)
}

void HafQuaternion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HafQuaternion_geometry_2eproto.base);
  ::memset(&eval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&eval_)) + sizeof(w_));
}

HafQuaternion::~HafQuaternion() {
  // @@protoc_insertion_point(destructor:perception.common.HafQuaternion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HafQuaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void HafQuaternion::ArenaDtor(void* object) {
  HafQuaternion* _this = reinterpret_cast< HafQuaternion* >(object);
  (void)_this;
}
void HafQuaternion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HafQuaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HafQuaternion& HafQuaternion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HafQuaternion_geometry_2eproto.base);
  return *internal_default_instance();
}


void HafQuaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.HafQuaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HafQuaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HafQuaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.HafQuaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double w = 4;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_w(), target);
  }

  // .perception.common.EvalStats eval = 5;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.HafQuaternion)
  return target;
}

size_t HafQuaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.HafQuaternion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.EvalStats eval = 5;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double w = 4;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HafQuaternion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.HafQuaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const HafQuaternion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HafQuaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.HafQuaternion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.HafQuaternion)
    MergeFrom(*source);
  }
}

void HafQuaternion::MergeFrom(const HafQuaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.HafQuaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
}

void HafQuaternion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.HafQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HafQuaternion::CopyFrom(const HafQuaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.HafQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HafQuaternion::IsInitialized() const {
  return true;
}

void HafQuaternion::InternalSwap(HafQuaternion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HafQuaternion, w_)
      + sizeof(HafQuaternion::w_)
      - PROTOBUF_FIELD_OFFSET(HafQuaternion, eval_)>(
          reinterpret_cast<char*>(&eval_),
          reinterpret_cast<char*>(&other->eval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HafQuaternion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Angle3f::InitAsDefaultInstance() {
}
class Angle3f::_Internal {
 public:
};

Angle3f::Angle3f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  evals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Angle3f)
}
Angle3f::Angle3f(const Angle3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      evals_(from.evals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&center_, &from.center_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&center_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:perception.common.Angle3f)
}

void Angle3f::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Angle3f_geometry_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&center_)) + sizeof(right_));
}

Angle3f::~Angle3f() {
  // @@protoc_insertion_point(destructor:perception.common.Angle3f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Angle3f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Angle3f::ArenaDtor(void* object) {
  Angle3f* _this = reinterpret_cast< Angle3f* >(object);
  (void)_this;
}
void Angle3f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Angle3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Angle3f& Angle3f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Angle3f_geometry_2eproto.base);
  return *internal_default_instance();
}


void Angle3f::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Angle3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  evals_.Clear();
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&center_)) + sizeof(right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Angle3f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .perception.common.EvalStats evals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_evals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Angle3f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Angle3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float center = 1;
  if (!(this->center() <= 0 && this->center() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_center(), target);
  }

  // float left = 2;
  if (!(this->left() <= 0 && this->left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_left(), target);
  }

  // float right = 3;
  if (!(this->right() <= 0 && this->right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_right(), target);
  }

  // repeated .perception.common.EvalStats evals = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_evals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_evals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Angle3f)
  return target;
}

size_t Angle3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Angle3f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.EvalStats evals = 4;
  total_size += 1UL * this->_internal_evals_size();
  for (const auto& msg : this->evals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float center = 1;
  if (!(this->center() <= 0 && this->center() >= 0)) {
    total_size += 1 + 4;
  }

  // float left = 2;
  if (!(this->left() <= 0 && this->left() >= 0)) {
    total_size += 1 + 4;
  }

  // float right = 3;
  if (!(this->right() <= 0 && this->right() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Angle3f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Angle3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Angle3f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Angle3f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Angle3f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Angle3f)
    MergeFrom(*source);
  }
}

void Angle3f::MergeFrom(const Angle3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Angle3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  evals_.MergeFrom(from.evals_);
  if (!(from.center() <= 0 && from.center() >= 0)) {
    _internal_set_center(from._internal_center());
  }
  if (!(from.left() <= 0 && from.left() >= 0)) {
    _internal_set_left(from._internal_left());
  }
  if (!(from.right() <= 0 && from.right() >= 0)) {
    _internal_set_right(from._internal_right());
  }
}

void Angle3f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Angle3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Angle3f::CopyFrom(const Angle3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Angle3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Angle3f::IsInitialized() const {
  return true;
}

void Angle3f::InternalSwap(Angle3f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  evals_.InternalSwap(&other->evals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Angle3f, right_)
      + sizeof(Angle3f::right_)
      - PROTOBUF_FIELD_OFFSET(Angle3f, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Angle3f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point2fList::InitAsDefaultInstance() {
  ::perception::common::_Point2fList_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Point2fList::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Point2fList* msg);
};

const ::perception::common::EvalStats&
Point2fList::_Internal::eval(const Point2fList* msg) {
  return *msg->eval_;
}
Point2fList::Point2fList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pts_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Point2fList)
}
Point2fList::Point2fList(const Point2fList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pts_list_(from.pts_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perception.common.Point2fList)
}

void Point2fList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point2fList_geometry_2eproto.base);
  eval_ = nullptr;
}

Point2fList::~Point2fList() {
  // @@protoc_insertion_point(destructor:perception.common.Point2fList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point2fList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Point2fList::ArenaDtor(void* object) {
  Point2fList* _this = reinterpret_cast< Point2fList* >(object);
  (void)_this;
}
void Point2fList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2fList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point2fList& Point2fList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point2fList_geometry_2eproto.base);
  return *internal_default_instance();
}


void Point2fList::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Point2fList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_list_.Clear();
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2fList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.common.Point2f pts_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2fList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Point2fList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.common.Point2f pts_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pts_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pts_list(i), target, stream);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Point2fList)
  return target;
}

size_t Point2fList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Point2fList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.Point2f pts_list = 1;
  total_size += 1UL * this->_internal_pts_list_size();
  for (const auto& msg : this->pts_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2fList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Point2fList)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2fList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point2fList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Point2fList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Point2fList)
    MergeFrom(*source);
  }
}

void Point2fList::MergeFrom(const Point2fList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Point2fList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_list_.MergeFrom(from.pts_list_);
  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
}

void Point2fList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Point2fList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2fList::CopyFrom(const Point2fList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Point2fList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2fList::IsInitialized() const {
  return true;
}

void Point2fList::InternalSwap(Point2fList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pts_list_.InternalSwap(&other->pts_list_);
  swap(eval_, other->eval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2fList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point2DList::InitAsDefaultInstance() {
  ::perception::common::_Point2DList_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Point2DList::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Point2DList* msg);
};

const ::perception::common::EvalStats&
Point2DList::_Internal::eval(const Point2DList* msg) {
  return *msg->eval_;
}
Point2DList::Point2DList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pts_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Point2DList)
}
Point2DList::Point2DList(const Point2DList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pts_list_(from.pts_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perception.common.Point2DList)
}

void Point2DList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point2DList_geometry_2eproto.base);
  eval_ = nullptr;
}

Point2DList::~Point2DList() {
  // @@protoc_insertion_point(destructor:perception.common.Point2DList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point2DList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Point2DList::ArenaDtor(void* object) {
  Point2DList* _this = reinterpret_cast< Point2DList* >(object);
  (void)_this;
}
void Point2DList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2DList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point2DList& Point2DList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point2DList_geometry_2eproto.base);
  return *internal_default_instance();
}


void Point2DList::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Point2DList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_list_.Clear();
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2DList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.common.Point2D pts_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2DList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Point2DList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.common.Point2D pts_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pts_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pts_list(i), target, stream);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Point2DList)
  return target;
}

size_t Point2DList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Point2DList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.Point2D pts_list = 1;
  total_size += 1UL * this->_internal_pts_list_size();
  for (const auto& msg : this->pts_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2DList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Point2DList)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2DList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point2DList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Point2DList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Point2DList)
    MergeFrom(*source);
  }
}

void Point2DList::MergeFrom(const Point2DList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Point2DList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_list_.MergeFrom(from.pts_list_);
  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
}

void Point2DList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Point2DList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2DList::CopyFrom(const Point2DList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Point2DList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2DList::IsInitialized() const {
  return true;
}

void Point2DList::InternalSwap(Point2DList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pts_list_.InternalSwap(&other->pts_list_);
  swap(eval_, other->eval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2DList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point3DList::InitAsDefaultInstance() {
  ::perception::common::_Point3DList_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Point3DList::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Point3DList* msg);
};

const ::perception::common::EvalStats&
Point3DList::_Internal::eval(const Point3DList* msg) {
  return *msg->eval_;
}
Point3DList::Point3DList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pts_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Point3DList)
}
Point3DList::Point3DList(const Point3DList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pts_list_(from.pts_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perception.common.Point3DList)
}

void Point3DList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point3DList_geometry_2eproto.base);
  eval_ = nullptr;
}

Point3DList::~Point3DList() {
  // @@protoc_insertion_point(destructor:perception.common.Point3DList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point3DList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Point3DList::ArenaDtor(void* object) {
  Point3DList* _this = reinterpret_cast< Point3DList* >(object);
  (void)_this;
}
void Point3DList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3DList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point3DList& Point3DList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point3DList_geometry_2eproto.base);
  return *internal_default_instance();
}


void Point3DList::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Point3DList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_list_.Clear();
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3DList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.common.Point3D pts_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point3DList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Point3DList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.common.Point3D pts_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pts_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pts_list(i), target, stream);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Point3DList)
  return target;
}

size_t Point3DList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Point3DList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.Point3D pts_list = 1;
  total_size += 1UL * this->_internal_pts_list_size();
  for (const auto& msg : this->pts_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3DList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Point3DList)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3DList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point3DList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Point3DList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Point3DList)
    MergeFrom(*source);
  }
}

void Point3DList::MergeFrom(const Point3DList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Point3DList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_list_.MergeFrom(from.pts_list_);
  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
}

void Point3DList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Point3DList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3DList::CopyFrom(const Point3DList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Point3DList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3DList::IsInitialized() const {
  return true;
}

void Point3DList::InternalSwap(Point3DList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pts_list_.InternalSwap(&other->pts_list_);
  swap(eval_, other->eval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3DList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point3fList::InitAsDefaultInstance() {
  ::perception::common::_Point3fList_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Point3fList::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Point3fList* msg);
};

const ::perception::common::EvalStats&
Point3fList::_Internal::eval(const Point3fList* msg) {
  return *msg->eval_;
}
Point3fList::Point3fList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pts_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Point3fList)
}
Point3fList::Point3fList(const Point3fList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pts_list_(from.pts_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perception.common.Point3fList)
}

void Point3fList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point3fList_geometry_2eproto.base);
  eval_ = nullptr;
}

Point3fList::~Point3fList() {
  // @@protoc_insertion_point(destructor:perception.common.Point3fList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point3fList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Point3fList::ArenaDtor(void* object) {
  Point3fList* _this = reinterpret_cast< Point3fList* >(object);
  (void)_this;
}
void Point3fList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3fList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point3fList& Point3fList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point3fList_geometry_2eproto.base);
  return *internal_default_instance();
}


void Point3fList::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Point3fList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_list_.Clear();
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3fList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.common.Point3f pts_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point3fList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Point3fList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.common.Point3f pts_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pts_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pts_list(i), target, stream);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Point3fList)
  return target;
}

size_t Point3fList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Point3fList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.Point3f pts_list = 1;
  total_size += 1UL * this->_internal_pts_list_size();
  for (const auto& msg : this->pts_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3fList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Point3fList)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3fList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point3fList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Point3fList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Point3fList)
    MergeFrom(*source);
  }
}

void Point3fList::MergeFrom(const Point3fList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Point3fList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_list_.MergeFrom(from.pts_list_);
  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
}

void Point3fList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Point3fList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3fList::CopyFrom(const Point3fList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Point3fList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3fList::IsInitialized() const {
  return true;
}

void Point3fList::InternalSwap(Point3fList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pts_list_.InternalSwap(&other->pts_list_);
  swap(eval_, other->eval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3fList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointList::InitAsDefaultInstance() {
  ::perception::common::_PointList_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class PointList::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const PointList* msg);
};

const ::perception::common::EvalStats&
PointList::_Internal::eval(const PointList* msg) {
  return *msg->eval_;
}
PointList::PointList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pts_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.PointList)
}
PointList::PointList(const PointList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pts_list_(from.pts_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perception.common.PointList)
}

void PointList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PointList_geometry_2eproto.base);
  eval_ = nullptr;
}

PointList::~PointList() {
  // @@protoc_insertion_point(destructor:perception.common.PointList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void PointList::ArenaDtor(void* object) {
  PointList* _this = reinterpret_cast< PointList* >(object);
  (void)_this;
}
void PointList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointList& PointList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointList_geometry_2eproto.base);
  return *internal_default_instance();
}


void PointList::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.PointList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_list_.Clear();
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.common.Point pts_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.PointList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.common.Point pts_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pts_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pts_list(i), target, stream);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.PointList)
  return target;
}

size_t PointList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.PointList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.Point pts_list = 1;
  total_size += 1UL * this->_internal_pts_list_size();
  for (const auto& msg : this->pts_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.PointList)
  GOOGLE_DCHECK_NE(&from, this);
  const PointList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.PointList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.PointList)
    MergeFrom(*source);
  }
}

void PointList::MergeFrom(const PointList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.PointList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_list_.MergeFrom(from.pts_list_);
  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
}

void PointList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.PointList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointList::CopyFrom(const PointList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.PointList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointList::IsInitialized() const {
  return true;
}

void PointList::InternalSwap(PointList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pts_list_.InternalSwap(&other->pts_list_);
  swap(eval_, other->eval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rect::InitAsDefaultInstance() {
  ::perception::common::_Rect_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Rect::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Rect* msg);
};

const ::perception::common::EvalStats&
Rect::_Internal::eval(const Rect* msg) {
  return *msg->eval_;
}
Rect::Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Rect)
}
Rect::Rect(const Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&x_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:perception.common.Rect)
}

void Rect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rect_geometry_2eproto.base);
  ::memset(&eval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&eval_)) + sizeof(h_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:perception.common.Rect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Rect::ArenaDtor(void* object) {
  Rect* _this = reinterpret_cast< Rect* >(object);
  (void)_this;
}
void Rect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rect& Rect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rect_geometry_2eproto.base);
  return *internal_default_instance();
}


void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&x_)) + sizeof(h_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 w = 3;
  if (this->w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_w(), target);
  }

  // int32 h = 4;
  if (this->h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_h(), target);
  }

  // .perception.common.EvalStats eval = 5;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Rect)
  return target;
}

size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Rect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.EvalStats eval = 5;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 w = 3;
  if (this->w() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_w());
  }

  // int32 h = 4;
  if (this->h() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_h());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Rect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Rect)
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.w() != 0) {
    _internal_set_w(from._internal_w());
  }
  if (from.h() != 0) {
    _internal_set_h(from._internal_h());
  }
}

void Rect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  return true;
}

void Rect::InternalSwap(Rect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rect, h_)
      + sizeof(Rect::h_)
      - PROTOBUF_FIELD_OFFSET(Rect, eval_)>(
          reinterpret_cast<char*>(&eval_),
          reinterpret_cast<char*>(&other->eval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rect2f::InitAsDefaultInstance() {
  ::perception::common::_Rect2f_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Rect2f::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Rect2f* msg);
};

const ::perception::common::EvalStats&
Rect2f::_Internal::eval(const Rect2f* msg) {
  return *msg->eval_;
}
Rect2f::Rect2f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Rect2f)
}
Rect2f::Rect2f(const Rect2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&x_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:perception.common.Rect2f)
}

void Rect2f::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rect2f_geometry_2eproto.base);
  ::memset(&eval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&eval_)) + sizeof(h_));
}

Rect2f::~Rect2f() {
  // @@protoc_insertion_point(destructor:perception.common.Rect2f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rect2f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Rect2f::ArenaDtor(void* object) {
  Rect2f* _this = reinterpret_cast< Rect2f* >(object);
  (void)_this;
}
void Rect2f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rect2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rect2f& Rect2f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rect2f_geometry_2eproto.base);
  return *internal_default_instance();
}


void Rect2f::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Rect2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&x_)) + sizeof(h_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rect2f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rect2f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Rect2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float w = 3;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_w(), target);
  }

  // float h = 4;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_h(), target);
  }

  // .perception.common.EvalStats eval = 5;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Rect2f)
  return target;
}

size_t Rect2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Rect2f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.EvalStats eval = 5;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float w = 3;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 4;
  }

  // float h = 4;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect2f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Rect2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect2f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rect2f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Rect2f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Rect2f)
    MergeFrom(*source);
  }
}

void Rect2f::MergeFrom(const Rect2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Rect2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from.h() <= 0 && from.h() >= 0)) {
    _internal_set_h(from._internal_h());
  }
}

void Rect2f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Rect2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect2f::CopyFrom(const Rect2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Rect2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect2f::IsInitialized() const {
  return true;
}

void Rect2f::InternalSwap(Rect2f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rect2f, h_)
      + sizeof(Rect2f::h_)
      - PROTOBUF_FIELD_OFFSET(Rect2f, eval_)>(
          reinterpret_cast<char*>(&eval_),
          reinterpret_cast<char*>(&other->eval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rect2f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rect3D::InitAsDefaultInstance() {
  ::perception::common::_Rect3D_default_instance_._instance.get_mutable()->center_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::common::_Rect3D_default_instance_._instance.get_mutable()->center_std_dev_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::common::_Rect3D_default_instance_._instance.get_mutable()->size_lwh_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::common::_Rect3D_default_instance_._instance.get_mutable()->size_std_dev_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::common::_Rect3D_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Rect3D::_Internal {
 public:
  static const ::perception::common::Point3D& center(const Rect3D* msg);
  static const ::perception::common::Point3D& center_std_dev(const Rect3D* msg);
  static const ::perception::common::Point3D& size_lwh(const Rect3D* msg);
  static const ::perception::common::Point3D& size_std_dev(const Rect3D* msg);
  static const ::perception::common::EvalStats& eval(const Rect3D* msg);
};

const ::perception::common::Point3D&
Rect3D::_Internal::center(const Rect3D* msg) {
  return *msg->center_;
}
const ::perception::common::Point3D&
Rect3D::_Internal::center_std_dev(const Rect3D* msg) {
  return *msg->center_std_dev_;
}
const ::perception::common::Point3D&
Rect3D::_Internal::size_lwh(const Rect3D* msg) {
  return *msg->size_lwh_;
}
const ::perception::common::Point3D&
Rect3D::_Internal::size_std_dev(const Rect3D* msg) {
  return *msg->size_std_dev_;
}
const ::perception::common::EvalStats&
Rect3D::_Internal::eval(const Rect3D* msg) {
  return *msg->eval_;
}
Rect3D::Rect3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  corners_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Rect3D)
}
Rect3D::Rect3D(const Rect3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      corners_(from.corners_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::perception::common::Point3D(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_center_std_dev()) {
    center_std_dev_ = new ::perception::common::Point3D(*from.center_std_dev_);
  } else {
    center_std_dev_ = nullptr;
  }
  if (from._internal_has_size_lwh()) {
    size_lwh_ = new ::perception::common::Point3D(*from.size_lwh_);
  } else {
    size_lwh_ = nullptr;
  }
  if (from._internal_has_size_std_dev()) {
    size_std_dev_ = new ::perception::common::Point3D(*from.size_std_dev_);
  } else {
    size_std_dev_ = nullptr;
  }
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  ::memcpy(&orientation_, &from.orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_std_dev_) -
    reinterpret_cast<char*>(&orientation_)) + sizeof(orientation_std_dev_));
  // @@protoc_insertion_point(copy_constructor:perception.common.Rect3D)
}

void Rect3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rect3D_geometry_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_std_dev_) -
      reinterpret_cast<char*>(&center_)) + sizeof(orientation_std_dev_));
}

Rect3D::~Rect3D() {
  // @@protoc_insertion_point(destructor:perception.common.Rect3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rect3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete center_std_dev_;
  if (this != internal_default_instance()) delete size_lwh_;
  if (this != internal_default_instance()) delete size_std_dev_;
  if (this != internal_default_instance()) delete eval_;
}

void Rect3D::ArenaDtor(void* object) {
  Rect3D* _this = reinterpret_cast< Rect3D* >(object);
  (void)_this;
}
void Rect3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rect3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rect3D& Rect3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rect3D_geometry_2eproto.base);
  return *internal_default_instance();
}


void Rect3D::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Rect3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  corners_.Clear();
  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  if (GetArena() == nullptr && center_std_dev_ != nullptr) {
    delete center_std_dev_;
  }
  center_std_dev_ = nullptr;
  if (GetArena() == nullptr && size_lwh_ != nullptr) {
    delete size_lwh_;
  }
  size_lwh_ = nullptr;
  if (GetArena() == nullptr && size_std_dev_ != nullptr) {
    delete size_std_dev_;
  }
  size_std_dev_ = nullptr;
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  ::memset(&orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_std_dev_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(orientation_std_dev_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rect3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.Point3D center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D center_std_dev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_std_dev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D size_lwh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_size_lwh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D size_std_dev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_size_std_dev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double orientation_std_dev = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          orientation_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .perception.common.Point3D corners = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_corners(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rect3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Rect3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.Point3D center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // .perception.common.Point3D center_std_dev = 2;
  if (this->has_center_std_dev()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::center_std_dev(this), target, stream);
  }

  // .perception.common.Point3D size_lwh = 3;
  if (this->has_size_lwh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::size_lwh(this), target, stream);
  }

  // .perception.common.Point3D size_std_dev = 4;
  if (this->has_size_std_dev()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::size_std_dev(this), target, stream);
  }

  // double orientation = 5;
  if (!(this->orientation() <= 0 && this->orientation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_orientation(), target);
  }

  // double orientation_std_dev = 6;
  if (!(this->orientation_std_dev() <= 0 && this->orientation_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_orientation_std_dev(), target);
  }

  // repeated .perception.common.Point3D corners = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_corners_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_corners(i), target, stream);
  }

  // .perception.common.EvalStats eval = 8;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Rect3D)
  return target;
}

size_t Rect3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Rect3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.Point3D corners = 7;
  total_size += 1UL * this->_internal_corners_size();
  for (const auto& msg : this->corners_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.common.Point3D center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .perception.common.Point3D center_std_dev = 2;
  if (this->has_center_std_dev()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_std_dev_);
  }

  // .perception.common.Point3D size_lwh = 3;
  if (this->has_size_lwh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_lwh_);
  }

  // .perception.common.Point3D size_std_dev = 4;
  if (this->has_size_std_dev()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_std_dev_);
  }

  // .perception.common.EvalStats eval = 8;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  // double orientation = 5;
  if (!(this->orientation() <= 0 && this->orientation() >= 0)) {
    total_size += 1 + 8;
  }

  // double orientation_std_dev = 6;
  if (!(this->orientation_std_dev() <= 0 && this->orientation_std_dev() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Rect3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rect3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Rect3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Rect3D)
    MergeFrom(*source);
  }
}

void Rect3D::MergeFrom(const Rect3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Rect3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  corners_.MergeFrom(from.corners_);
  if (from.has_center()) {
    _internal_mutable_center()->::perception::common::Point3D::MergeFrom(from._internal_center());
  }
  if (from.has_center_std_dev()) {
    _internal_mutable_center_std_dev()->::perception::common::Point3D::MergeFrom(from._internal_center_std_dev());
  }
  if (from.has_size_lwh()) {
    _internal_mutable_size_lwh()->::perception::common::Point3D::MergeFrom(from._internal_size_lwh());
  }
  if (from.has_size_std_dev()) {
    _internal_mutable_size_std_dev()->::perception::common::Point3D::MergeFrom(from._internal_size_std_dev());
  }
  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
  if (!(from.orientation() <= 0 && from.orientation() >= 0)) {
    _internal_set_orientation(from._internal_orientation());
  }
  if (!(from.orientation_std_dev() <= 0 && from.orientation_std_dev() >= 0)) {
    _internal_set_orientation_std_dev(from._internal_orientation_std_dev());
  }
}

void Rect3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Rect3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect3D::CopyFrom(const Rect3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Rect3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect3D::IsInitialized() const {
  return true;
}

void Rect3D::InternalSwap(Rect3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  corners_.InternalSwap(&other->corners_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rect3D, orientation_std_dev_)
      + sizeof(Rect3D::orientation_std_dev_)
      - PROTOBUF_FIELD_OFFSET(Rect3D, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rect3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rect2D::InitAsDefaultInstance() {
  ::perception::common::_Rect2D_default_instance_._instance.get_mutable()->center_ = const_cast< ::perception::common::Point2D*>(
      ::perception::common::Point2D::internal_default_instance());
  ::perception::common::_Rect2D_default_instance_._instance.get_mutable()->size_ = const_cast< ::perception::common::Point2D*>(
      ::perception::common::Point2D::internal_default_instance());
  ::perception::common::_Rect2D_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Rect2D::_Internal {
 public:
  static const ::perception::common::Point2D& center(const Rect2D* msg);
  static const ::perception::common::Point2D& size(const Rect2D* msg);
  static const ::perception::common::EvalStats& eval(const Rect2D* msg);
};

const ::perception::common::Point2D&
Rect2D::_Internal::center(const Rect2D* msg) {
  return *msg->center_;
}
const ::perception::common::Point2D&
Rect2D::_Internal::size(const Rect2D* msg) {
  return *msg->size_;
}
const ::perception::common::EvalStats&
Rect2D::_Internal::eval(const Rect2D* msg) {
  return *msg->eval_;
}
Rect2D::Rect2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Rect2D)
}
Rect2D::Rect2D(const Rect2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::perception::common::Point2D(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::perception::common::Point2D(*from.size_);
  } else {
    size_ = nullptr;
  }
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perception.common.Rect2D)
}

void Rect2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rect2D_geometry_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eval_) -
      reinterpret_cast<char*>(&center_)) + sizeof(eval_));
}

Rect2D::~Rect2D() {
  // @@protoc_insertion_point(destructor:perception.common.Rect2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rect2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete eval_;
}

void Rect2D::ArenaDtor(void* object) {
  Rect2D* _this = reinterpret_cast< Rect2D* >(object);
  (void)_this;
}
void Rect2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rect2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rect2D& Rect2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rect2D_geometry_2eproto.base);
  return *internal_default_instance();
}


void Rect2D::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Rect2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rect2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.Point2D center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2D size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rect2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Rect2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.Point2D center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // .perception.common.Point2D size = 2;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  // .perception.common.EvalStats eval = 3;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Rect2D)
  return target;
}

size_t Rect2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Rect2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Point2D center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .perception.common.Point2D size = 2;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .perception.common.EvalStats eval = 3;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Rect2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rect2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Rect2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Rect2D)
    MergeFrom(*source);
  }
}

void Rect2D::MergeFrom(const Rect2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Rect2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    _internal_mutable_center()->::perception::common::Point2D::MergeFrom(from._internal_center());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::perception::common::Point2D::MergeFrom(from._internal_size());
  }
  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
}

void Rect2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Rect2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect2D::CopyFrom(const Rect2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Rect2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect2D::IsInitialized() const {
  return true;
}

void Rect2D::InternalSwap(Rect2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rect2D, eval_)
      + sizeof(Rect2D::eval_)
      - PROTOBUF_FIELD_OFFSET(Rect2D, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rect2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Box3D::InitAsDefaultInstance() {
  ::perception::common::_Box3D_default_instance_._instance.get_mutable()->lower_lt_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::common::_Box3D_default_instance_._instance.get_mutable()->lower_lb_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::common::_Box3D_default_instance_._instance.get_mutable()->lower_rb_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::common::_Box3D_default_instance_._instance.get_mutable()->lower_rt_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::common::_Box3D_default_instance_._instance.get_mutable()->upper_lt_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::common::_Box3D_default_instance_._instance.get_mutable()->upper_lb_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::common::_Box3D_default_instance_._instance.get_mutable()->upper_rb_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::common::_Box3D_default_instance_._instance.get_mutable()->upper_rt_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::common::_Box3D_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Box3D::_Internal {
 public:
  static const ::perception::common::Point3D& lower_lt(const Box3D* msg);
  static const ::perception::common::Point3D& lower_lb(const Box3D* msg);
  static const ::perception::common::Point3D& lower_rb(const Box3D* msg);
  static const ::perception::common::Point3D& lower_rt(const Box3D* msg);
  static const ::perception::common::Point3D& upper_lt(const Box3D* msg);
  static const ::perception::common::Point3D& upper_lb(const Box3D* msg);
  static const ::perception::common::Point3D& upper_rb(const Box3D* msg);
  static const ::perception::common::Point3D& upper_rt(const Box3D* msg);
  static const ::perception::common::EvalStats& eval(const Box3D* msg);
};

const ::perception::common::Point3D&
Box3D::_Internal::lower_lt(const Box3D* msg) {
  return *msg->lower_lt_;
}
const ::perception::common::Point3D&
Box3D::_Internal::lower_lb(const Box3D* msg) {
  return *msg->lower_lb_;
}
const ::perception::common::Point3D&
Box3D::_Internal::lower_rb(const Box3D* msg) {
  return *msg->lower_rb_;
}
const ::perception::common::Point3D&
Box3D::_Internal::lower_rt(const Box3D* msg) {
  return *msg->lower_rt_;
}
const ::perception::common::Point3D&
Box3D::_Internal::upper_lt(const Box3D* msg) {
  return *msg->upper_lt_;
}
const ::perception::common::Point3D&
Box3D::_Internal::upper_lb(const Box3D* msg) {
  return *msg->upper_lb_;
}
const ::perception::common::Point3D&
Box3D::_Internal::upper_rb(const Box3D* msg) {
  return *msg->upper_rb_;
}
const ::perception::common::Point3D&
Box3D::_Internal::upper_rt(const Box3D* msg) {
  return *msg->upper_rt_;
}
const ::perception::common::EvalStats&
Box3D::_Internal::eval(const Box3D* msg) {
  return *msg->eval_;
}
Box3D::Box3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Box3D)
}
Box3D::Box3D(const Box3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lower_lt()) {
    lower_lt_ = new ::perception::common::Point3D(*from.lower_lt_);
  } else {
    lower_lt_ = nullptr;
  }
  if (from._internal_has_lower_lb()) {
    lower_lb_ = new ::perception::common::Point3D(*from.lower_lb_);
  } else {
    lower_lb_ = nullptr;
  }
  if (from._internal_has_lower_rb()) {
    lower_rb_ = new ::perception::common::Point3D(*from.lower_rb_);
  } else {
    lower_rb_ = nullptr;
  }
  if (from._internal_has_lower_rt()) {
    lower_rt_ = new ::perception::common::Point3D(*from.lower_rt_);
  } else {
    lower_rt_ = nullptr;
  }
  if (from._internal_has_upper_lt()) {
    upper_lt_ = new ::perception::common::Point3D(*from.upper_lt_);
  } else {
    upper_lt_ = nullptr;
  }
  if (from._internal_has_upper_lb()) {
    upper_lb_ = new ::perception::common::Point3D(*from.upper_lb_);
  } else {
    upper_lb_ = nullptr;
  }
  if (from._internal_has_upper_rb()) {
    upper_rb_ = new ::perception::common::Point3D(*from.upper_rb_);
  } else {
    upper_rb_ = nullptr;
  }
  if (from._internal_has_upper_rt()) {
    upper_rt_ = new ::perception::common::Point3D(*from.upper_rt_);
  } else {
    upper_rt_ = nullptr;
  }
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  conf_ = from.conf_;
  // @@protoc_insertion_point(copy_constructor:perception.common.Box3D)
}

void Box3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Box3D_geometry_2eproto.base);
  ::memset(&lower_lt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conf_) -
      reinterpret_cast<char*>(&lower_lt_)) + sizeof(conf_));
}

Box3D::~Box3D() {
  // @@protoc_insertion_point(destructor:perception.common.Box3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Box3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lower_lt_;
  if (this != internal_default_instance()) delete lower_lb_;
  if (this != internal_default_instance()) delete lower_rb_;
  if (this != internal_default_instance()) delete lower_rt_;
  if (this != internal_default_instance()) delete upper_lt_;
  if (this != internal_default_instance()) delete upper_lb_;
  if (this != internal_default_instance()) delete upper_rb_;
  if (this != internal_default_instance()) delete upper_rt_;
  if (this != internal_default_instance()) delete eval_;
}

void Box3D::ArenaDtor(void* object) {
  Box3D* _this = reinterpret_cast< Box3D* >(object);
  (void)_this;
}
void Box3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Box3D& Box3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Box3D_geometry_2eproto.base);
  return *internal_default_instance();
}


void Box3D::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Box3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && lower_lt_ != nullptr) {
    delete lower_lt_;
  }
  lower_lt_ = nullptr;
  if (GetArena() == nullptr && lower_lb_ != nullptr) {
    delete lower_lb_;
  }
  lower_lb_ = nullptr;
  if (GetArena() == nullptr && lower_rb_ != nullptr) {
    delete lower_rb_;
  }
  lower_rb_ = nullptr;
  if (GetArena() == nullptr && lower_rt_ != nullptr) {
    delete lower_rt_;
  }
  lower_rt_ = nullptr;
  if (GetArena() == nullptr && upper_lt_ != nullptr) {
    delete upper_lt_;
  }
  upper_lt_ = nullptr;
  if (GetArena() == nullptr && upper_lb_ != nullptr) {
    delete upper_lb_;
  }
  upper_lb_ = nullptr;
  if (GetArena() == nullptr && upper_rb_ != nullptr) {
    delete upper_rb_;
  }
  upper_rb_ = nullptr;
  if (GetArena() == nullptr && upper_rt_ != nullptr) {
    delete upper_rt_;
  }
  upper_rt_ = nullptr;
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  conf_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.Point3D lower_lt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_lt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D lower_lb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_lb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D lower_rb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_rb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D lower_rt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_rt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D upper_lt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_lt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D upper_lb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_lb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D upper_rb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_rb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D upper_rt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_rt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float conf = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          conf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Box3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.Point3D lower_lt = 1;
  if (this->has_lower_lt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lower_lt(this), target, stream);
  }

  // .perception.common.Point3D lower_lb = 2;
  if (this->has_lower_lb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lower_lb(this), target, stream);
  }

  // .perception.common.Point3D lower_rb = 3;
  if (this->has_lower_rb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lower_rb(this), target, stream);
  }

  // .perception.common.Point3D lower_rt = 4;
  if (this->has_lower_rt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lower_rt(this), target, stream);
  }

  // .perception.common.Point3D upper_lt = 5;
  if (this->has_upper_lt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::upper_lt(this), target, stream);
  }

  // .perception.common.Point3D upper_lb = 6;
  if (this->has_upper_lb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::upper_lb(this), target, stream);
  }

  // .perception.common.Point3D upper_rb = 7;
  if (this->has_upper_rb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::upper_rb(this), target, stream);
  }

  // .perception.common.Point3D upper_rt = 8;
  if (this->has_upper_rt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::upper_rt(this), target, stream);
  }

  // float conf = 9;
  if (!(this->conf() <= 0 && this->conf() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_conf(), target);
  }

  // .perception.common.EvalStats eval = 10;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Box3D)
  return target;
}

size_t Box3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Box3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Point3D lower_lt = 1;
  if (this->has_lower_lt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_lt_);
  }

  // .perception.common.Point3D lower_lb = 2;
  if (this->has_lower_lb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_lb_);
  }

  // .perception.common.Point3D lower_rb = 3;
  if (this->has_lower_rb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_rb_);
  }

  // .perception.common.Point3D lower_rt = 4;
  if (this->has_lower_rt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_rt_);
  }

  // .perception.common.Point3D upper_lt = 5;
  if (this->has_upper_lt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_lt_);
  }

  // .perception.common.Point3D upper_lb = 6;
  if (this->has_upper_lb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_lb_);
  }

  // .perception.common.Point3D upper_rb = 7;
  if (this->has_upper_rb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_rb_);
  }

  // .perception.common.Point3D upper_rt = 8;
  if (this->has_upper_rt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_rt_);
  }

  // .perception.common.EvalStats eval = 10;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  // float conf = 9;
  if (!(this->conf() <= 0 && this->conf() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Box3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Box3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Box3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Box3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Box3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Box3D)
    MergeFrom(*source);
  }
}

void Box3D::MergeFrom(const Box3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Box3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lower_lt()) {
    _internal_mutable_lower_lt()->::perception::common::Point3D::MergeFrom(from._internal_lower_lt());
  }
  if (from.has_lower_lb()) {
    _internal_mutable_lower_lb()->::perception::common::Point3D::MergeFrom(from._internal_lower_lb());
  }
  if (from.has_lower_rb()) {
    _internal_mutable_lower_rb()->::perception::common::Point3D::MergeFrom(from._internal_lower_rb());
  }
  if (from.has_lower_rt()) {
    _internal_mutable_lower_rt()->::perception::common::Point3D::MergeFrom(from._internal_lower_rt());
  }
  if (from.has_upper_lt()) {
    _internal_mutable_upper_lt()->::perception::common::Point3D::MergeFrom(from._internal_upper_lt());
  }
  if (from.has_upper_lb()) {
    _internal_mutable_upper_lb()->::perception::common::Point3D::MergeFrom(from._internal_upper_lb());
  }
  if (from.has_upper_rb()) {
    _internal_mutable_upper_rb()->::perception::common::Point3D::MergeFrom(from._internal_upper_rb());
  }
  if (from.has_upper_rt()) {
    _internal_mutable_upper_rt()->::perception::common::Point3D::MergeFrom(from._internal_upper_rt());
  }
  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
  if (!(from.conf() <= 0 && from.conf() >= 0)) {
    _internal_set_conf(from._internal_conf());
  }
}

void Box3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Box3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box3D::CopyFrom(const Box3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Box3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box3D::IsInitialized() const {
  return true;
}

void Box3D::InternalSwap(Box3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Box3D, conf_)
      + sizeof(Box3D::conf_)
      - PROTOBUF_FIELD_OFFSET(Box3D, lower_lt_)>(
          reinterpret_cast<char*>(&lower_lt_),
          reinterpret_cast<char*>(&other->lower_lt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Box3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
  ::perception::common::_Polygon_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Polygon::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Polygon* msg);
};

const ::perception::common::EvalStats&
Polygon::_Internal::eval(const Polygon* msg) {
  return *msg->eval_;
}
Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pts_(from.pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perception.common.Polygon)
}

void Polygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Polygon_geometry_2eproto.base);
  eval_ = nullptr;
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:perception.common.Polygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Polygon::ArenaDtor(void* object) {
  Polygon* _this = reinterpret_cast< Polygon* >(object);
  (void)_this;
}
void Polygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Polygon& Polygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Polygon_geometry_2eproto.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_.Clear();
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.common.Point3D pts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.common.Point3D pts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pts(i), target, stream);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.Point3D pts = 1;
  total_size += 1UL * this->_internal_pts_size();
  for (const auto& msg : this->pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Polygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_.MergeFrom(from.pts_);
  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
}

void Polygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pts_.InternalSwap(&other->pts_);
  swap(eval_, other->eval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoseAngle::InitAsDefaultInstance() {
}
class PoseAngle::_Internal {
 public:
};

PoseAngle::PoseAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  evals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.PoseAngle)
}
PoseAngle::PoseAngle(const PoseAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      evals_(from.evals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pitch_, &from.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:perception.common.PoseAngle)
}

void PoseAngle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoseAngle_geometry_2eproto.base);
  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
}

PoseAngle::~PoseAngle() {
  // @@protoc_insertion_point(destructor:perception.common.PoseAngle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoseAngle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PoseAngle::ArenaDtor(void* object) {
  PoseAngle* _this = reinterpret_cast< PoseAngle* >(object);
  (void)_this;
}
void PoseAngle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseAngle& PoseAngle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseAngle_geometry_2eproto.base);
  return *internal_default_instance();
}


void PoseAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.PoseAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  evals_.Clear();
  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseAngle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .perception.common.EvalStats evals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_evals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseAngle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.PoseAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pitch(), target);
  }

  // float yaw = 2;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw(), target);
  }

  // float roll = 3;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_roll(), target);
  }

  // repeated .perception.common.EvalStats evals = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_evals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_evals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.PoseAngle)
  return target;
}

size_t PoseAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.PoseAngle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.common.EvalStats evals = 4;
  total_size += 1UL * this->_internal_evals_size();
  for (const auto& msg : this->evals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float pitch = 1;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw = 2;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // float roll = 3;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseAngle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.PoseAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseAngle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.PoseAngle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.PoseAngle)
    MergeFrom(*source);
  }
}

void PoseAngle::MergeFrom(const PoseAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.PoseAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  evals_.MergeFrom(from.evals_);
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
}

void PoseAngle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.PoseAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseAngle::CopyFrom(const PoseAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.PoseAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseAngle::IsInitialized() const {
  return true;
}

void PoseAngle::InternalSwap(PoseAngle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  evals_.InternalSwap(&other->evals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseAngle, roll_)
      + sizeof(PoseAngle::roll_)
      - PROTOBUF_FIELD_OFFSET(PoseAngle, pitch_)>(
          reinterpret_cast<char*>(&pitch_),
          reinterpret_cast<char*>(&other->pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseAngle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Int::InitAsDefaultInstance() {
  ::perception::common::_Int_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Int::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Int* msg);
};

const ::perception::common::EvalStats&
Int::_Internal::eval(const Int* msg) {
  return *msg->eval_;
}
Int::Int(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Int)
}
Int::Int(const Int& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:perception.common.Int)
}

void Int::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Int_geometry_2eproto.base);
  ::memset(&eval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&eval_)) + sizeof(val_));
}

Int::~Int() {
  // @@protoc_insertion_point(destructor:perception.common.Int)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Int::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Int::ArenaDtor(void* object) {
  Int* _this = reinterpret_cast< Int* >(object);
  (void)_this;
}
void Int::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Int& Int::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Int_geometry_2eproto.base);
  return *internal_default_instance();
}


void Int::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Int)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  val_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Int::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Int::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Int)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 val = 1;
  if (this->val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_val(), target);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Int)
  return target;
}

size_t Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Int)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  // int32 val = 1;
  if (this->val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Int)
  GOOGLE_DCHECK_NE(&from, this);
  const Int* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Int>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Int)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Int)
    MergeFrom(*source);
  }
}

void Int::MergeFrom(const Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
  if (from.val() != 0) {
    _internal_set_val(from._internal_val());
  }
}

void Int::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int::CopyFrom(const Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int::IsInitialized() const {
  return true;
}

void Int::InternalSwap(Int* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Int, val_)
      + sizeof(Int::val_)
      - PROTOBUF_FIELD_OFFSET(Int, eval_)>(
          reinterpret_cast<char*>(&eval_),
          reinterpret_cast<char*>(&other->eval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Int::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Float::InitAsDefaultInstance() {
  ::perception::common::_Float_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class Float::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const Float* msg);
};

const ::perception::common::EvalStats&
Float::_Internal::eval(const Float* msg) {
  return *msg->eval_;
}
Float::Float(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.Float)
}
Float::Float(const Float& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:perception.common.Float)
}

void Float::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Float_geometry_2eproto.base);
  ::memset(&eval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&eval_)) + sizeof(val_));
}

Float::~Float() {
  // @@protoc_insertion_point(destructor:perception.common.Float)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Float::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void Float::ArenaDtor(void* object) {
  Float* _this = reinterpret_cast< Float* >(object);
  (void)_this;
}
void Float::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Float::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Float& Float::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Float_geometry_2eproto.base);
  return *internal_default_instance();
}


void Float::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.Float)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  val_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Float::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Float::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.Float)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_val(), target);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.Float)
  return target;
}

size_t Float::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.Float)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  // float val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Float::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.Float)
  GOOGLE_DCHECK_NE(&from, this);
  const Float* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Float>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.Float)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.Float)
    MergeFrom(*source);
  }
}

void Float::MergeFrom(const Float& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.Float)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
  if (!(from.val() <= 0 && from.val() >= 0)) {
    _internal_set_val(from._internal_val());
  }
}

void Float::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Float::CopyFrom(const Float& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float::IsInitialized() const {
  return true;
}

void Float::InternalSwap(Float* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Float, val_)
      + sizeof(Float::val_)
      - PROTOBUF_FIELD_OFFSET(Float, eval_)>(
          reinterpret_cast<char*>(&eval_),
          reinterpret_cast<char*>(&other->eval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Float::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UInt::InitAsDefaultInstance() {
  ::perception::common::_UInt_default_instance_._instance.get_mutable()->eval_ = const_cast< ::perception::common::EvalStats*>(
      ::perception::common::EvalStats::internal_default_instance());
}
class UInt::_Internal {
 public:
  static const ::perception::common::EvalStats& eval(const UInt* msg);
};

const ::perception::common::EvalStats&
UInt::_Internal::eval(const UInt* msg) {
  return *msg->eval_;
}
UInt::UInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.UInt)
}
UInt::UInt(const UInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eval()) {
    eval_ = new ::perception::common::EvalStats(*from.eval_);
  } else {
    eval_ = nullptr;
  }
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:perception.common.UInt)
}

void UInt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UInt_geometry_2eproto.base);
  ::memset(&eval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&eval_)) + sizeof(val_));
}

UInt::~UInt() {
  // @@protoc_insertion_point(destructor:perception.common.UInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UInt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete eval_;
}

void UInt::ArenaDtor(void* object) {
  UInt* _this = reinterpret_cast< UInt* >(object);
  (void)_this;
}
void UInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UInt& UInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UInt_geometry_2eproto.base);
  return *internal_default_instance();
}


void UInt::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.UInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
  val_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.EvalStats eval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.UInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 val = 1;
  if (this->val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_val(), target);
  }

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::eval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.UInt)
  return target;
}

size_t UInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.UInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.EvalStats eval = 2;
  if (this->has_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_);
  }

  // uint32 val = 1;
  if (this->val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.UInt)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.UInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.UInt)
    MergeFrom(*source);
  }
}

void UInt::MergeFrom(const UInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.UInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eval()) {
    _internal_mutable_eval()->::perception::common::EvalStats::MergeFrom(from._internal_eval());
  }
  if (from.val() != 0) {
    _internal_set_val(from._internal_val());
  }
}

void UInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.UInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt::CopyFrom(const UInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.UInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt::IsInitialized() const {
  return true;
}

void UInt::InternalSwap(UInt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UInt, val_)
      + sizeof(UInt::val_)
      - PROTOBUF_FIELD_OFFSET(UInt, eval_)>(
          reinterpret_cast<char*>(&eval_),
          reinterpret_cast<char*>(&other->eval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FloatArray::InitAsDefaultInstance() {
}
class FloatArray::_Internal {
 public:
};

FloatArray::FloatArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.common.FloatArray)
}
FloatArray::FloatArray(const FloatArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vals_(from.vals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  conf_ = from.conf_;
  // @@protoc_insertion_point(copy_constructor:perception.common.FloatArray)
}

void FloatArray::SharedCtor() {
  conf_ = 0;
}

FloatArray::~FloatArray() {
  // @@protoc_insertion_point(destructor:perception.common.FloatArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FloatArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FloatArray::ArenaDtor(void* object) {
  FloatArray* _this = reinterpret_cast< FloatArray* >(object);
  (void)_this;
}
void FloatArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatArray& FloatArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatArray_geometry_2eproto.base);
  return *internal_default_instance();
}


void FloatArray::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.common.FloatArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vals_.Clear();
  conf_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float vals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_vals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          conf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.common.FloatArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float vals = 1;
  if (this->_internal_vals_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vals(), target);
  }

  // float conf = 2;
  if (!(this->conf() <= 0 && this->conf() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_conf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.common.FloatArray)
  return target;
}

size_t FloatArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.common.FloatArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vals = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vals_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float conf = 2;
  if (!(this->conf() <= 0 && this->conf() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.common.FloatArray)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.common.FloatArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.common.FloatArray)
    MergeFrom(*source);
  }
}

void FloatArray::MergeFrom(const FloatArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.common.FloatArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vals_.MergeFrom(from.vals_);
  if (!(from.conf() <= 0 && from.conf() >= 0)) {
    _internal_set_conf(from._internal_conf());
  }
}

void FloatArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.common.FloatArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatArray::CopyFrom(const FloatArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.common.FloatArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatArray::IsInitialized() const {
  return true;
}

void FloatArray::InternalSwap(FloatArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vals_.InternalSwap(&other->vals_);
  swap(conf_, other->conf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatArray::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perception::common::EvalStats* Arena::CreateMaybeMessage< ::perception::common::EvalStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::EvalStats >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Point2D* Arena::CreateMaybeMessage< ::perception::common::Point2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Point2D >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Point3D* Arena::CreateMaybeMessage< ::perception::common::Point3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Point3D >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::XYZ* Arena::CreateMaybeMessage< ::perception::common::XYZ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::XYZ >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::XY* Arena::CreateMaybeMessage< ::perception::common::XY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::XY >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Size3D* Arena::CreateMaybeMessage< ::perception::common::Size3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Size3D >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Point* Arena::CreateMaybeMessage< ::perception::common::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Point2f* Arena::CreateMaybeMessage< ::perception::common::Point2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Point2f >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Point3f* Arena::CreateMaybeMessage< ::perception::common::Point3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Point3f >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::HafQuaternion* Arena::CreateMaybeMessage< ::perception::common::HafQuaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::HafQuaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Angle3f* Arena::CreateMaybeMessage< ::perception::common::Angle3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Angle3f >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Point2fList* Arena::CreateMaybeMessage< ::perception::common::Point2fList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Point2fList >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Point2DList* Arena::CreateMaybeMessage< ::perception::common::Point2DList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Point2DList >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Point3DList* Arena::CreateMaybeMessage< ::perception::common::Point3DList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Point3DList >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Point3fList* Arena::CreateMaybeMessage< ::perception::common::Point3fList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Point3fList >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::PointList* Arena::CreateMaybeMessage< ::perception::common::PointList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::PointList >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Rect* Arena::CreateMaybeMessage< ::perception::common::Rect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Rect2f* Arena::CreateMaybeMessage< ::perception::common::Rect2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Rect2f >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Rect3D* Arena::CreateMaybeMessage< ::perception::common::Rect3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Rect3D >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Rect2D* Arena::CreateMaybeMessage< ::perception::common::Rect2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Rect2D >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Box3D* Arena::CreateMaybeMessage< ::perception::common::Box3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Box3D >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Polygon* Arena::CreateMaybeMessage< ::perception::common::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::PoseAngle* Arena::CreateMaybeMessage< ::perception::common::PoseAngle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::PoseAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Int* Arena::CreateMaybeMessage< ::perception::common::Int >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Int >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::Float* Arena::CreateMaybeMessage< ::perception::common::Float >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::Float >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::UInt* Arena::CreateMaybeMessage< ::perception::common::UInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::UInt >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::common::FloatArray* Arena::CreateMaybeMessage< ::perception::common::FloatArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::common::FloatArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
