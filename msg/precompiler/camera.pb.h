// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_camera_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_camera_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_camera_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_camera_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_2eproto;
namespace minieye {
class CamID;
class CamIDDefaultTypeInternal;
extern CamIDDefaultTypeInternal _CamID_default_instance_;
class CameraEmbeddedInfo;
class CameraEmbeddedInfoDefaultTypeInternal;
extern CameraEmbeddedInfoDefaultTypeInternal _CameraEmbeddedInfo_default_instance_;
class CameraFrame;
class CameraFrameDefaultTypeInternal;
extern CameraFrameDefaultTypeInternal _CameraFrame_default_instance_;
class CameraFrameExtendedInfo;
class CameraFrameExtendedInfoDefaultTypeInternal;
extern CameraFrameExtendedInfoDefaultTypeInternal _CameraFrameExtendedInfo_default_instance_;
class CameraParam;
class CameraParamDefaultTypeInternal;
extern CameraParamDefaultTypeInternal _CameraParam_default_instance_;
class TransMatrix;
class TransMatrixDefaultTypeInternal;
extern TransMatrixDefaultTypeInternal _TransMatrix_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::CamID* Arena::CreateMaybeMessage<::minieye::CamID>(Arena*);
template<> ::minieye::CameraEmbeddedInfo* Arena::CreateMaybeMessage<::minieye::CameraEmbeddedInfo>(Arena*);
template<> ::minieye::CameraFrame* Arena::CreateMaybeMessage<::minieye::CameraFrame>(Arena*);
template<> ::minieye::CameraFrameExtendedInfo* Arena::CreateMaybeMessage<::minieye::CameraFrameExtendedInfo>(Arena*);
template<> ::minieye::CameraParam* Arena::CreateMaybeMessage<::minieye::CameraParam>(Arena*);
template<> ::minieye::TransMatrix* Arena::CreateMaybeMessage<::minieye::TransMatrix>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

enum ImageFormat : int {
  FORMAT_UNKNOWN = 0,
  GRAY = 1,
  YV12 = 2,
  JPEG = 3,
  PNG = 4,
  CR12 = 5,
  BAD = 6,
  NV12 = 7,
  NV21 = 8,
  BYPASS_ONLY = 9,
  ImageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImageFormat_IsValid(int value);
constexpr ImageFormat ImageFormat_MIN = FORMAT_UNKNOWN;
constexpr ImageFormat ImageFormat_MAX = BYPASS_ONLY;
constexpr int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor();
template<typename T>
inline const std::string& ImageFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageFormat_descriptor(), enum_t_value);
}
inline bool ImageFormat_Parse(
    const std::string& name, ImageFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageFormat>(
    ImageFormat_descriptor(), name, value);
}
enum CamDirect : int {
  DIRECT_UNKNOWN = 0,
  FRONT = 1,
  REAR = 2,
  LEFT = 4,
  RIGHT = 8,
  CamDirect_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CamDirect_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CamDirect_IsValid(int value);
constexpr CamDirect CamDirect_MIN = DIRECT_UNKNOWN;
constexpr CamDirect CamDirect_MAX = RIGHT;
constexpr int CamDirect_ARRAYSIZE = CamDirect_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CamDirect_descriptor();
template<typename T>
inline const std::string& CamDirect_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CamDirect>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CamDirect_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CamDirect_descriptor(), enum_t_value);
}
inline bool CamDirect_Parse(
    const std::string& name, CamDirect* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CamDirect>(
    CamDirect_descriptor(), name, value);
}
enum CamFov : int {
  kFovUnknown = 0,
  kFov30 = 1,
  kFov100 = 2,
  CamFov_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CamFov_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CamFov_IsValid(int value);
constexpr CamFov CamFov_MIN = kFovUnknown;
constexpr CamFov CamFov_MAX = kFov100;
constexpr int CamFov_ARRAYSIZE = CamFov_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CamFov_descriptor();
template<typename T>
inline const std::string& CamFov_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CamFov>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CamFov_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CamFov_descriptor(), enum_t_value);
}
inline bool CamFov_Parse(
    const std::string& name, CamFov* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CamFov>(
    CamFov_descriptor(), name, value);
}
enum ProjectionModel : int {
  PRJ_MODEL_UNKNOWN = 0,
  FISHEYE = 1,
  MEI = 2,
  PIN_HOLE = 3,
  ATAN = 4,
  DAVIDE_SCARAMUZZA = 5,
  ProjectionModel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProjectionModel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProjectionModel_IsValid(int value);
constexpr ProjectionModel ProjectionModel_MIN = PRJ_MODEL_UNKNOWN;
constexpr ProjectionModel ProjectionModel_MAX = DAVIDE_SCARAMUZZA;
constexpr int ProjectionModel_ARRAYSIZE = ProjectionModel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectionModel_descriptor();
template<typename T>
inline const std::string& ProjectionModel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProjectionModel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProjectionModel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProjectionModel_descriptor(), enum_t_value);
}
inline bool ProjectionModel_Parse(
    const std::string& name, ProjectionModel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProjectionModel>(
    ProjectionModel_descriptor(), name, value);
}
// ===================================================================

class CameraFrameExtendedInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.CameraFrameExtendedInfo) */ {
 public:
  inline CameraFrameExtendedInfo() : CameraFrameExtendedInfo(nullptr) {};
  virtual ~CameraFrameExtendedInfo();

  CameraFrameExtendedInfo(const CameraFrameExtendedInfo& from);
  CameraFrameExtendedInfo(CameraFrameExtendedInfo&& from) noexcept
    : CameraFrameExtendedInfo() {
    *this = ::std::move(from);
  }

  inline CameraFrameExtendedInfo& operator=(const CameraFrameExtendedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraFrameExtendedInfo& operator=(CameraFrameExtendedInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraFrameExtendedInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraFrameExtendedInfo* internal_default_instance() {
    return reinterpret_cast<const CameraFrameExtendedInfo*>(
               &_CameraFrameExtendedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraFrameExtendedInfo& a, CameraFrameExtendedInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraFrameExtendedInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraFrameExtendedInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraFrameExtendedInfo* New() const final {
    return CreateMaybeMessage<CameraFrameExtendedInfo>(nullptr);
  }

  CameraFrameExtendedInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraFrameExtendedInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraFrameExtendedInfo& from);
  void MergeFrom(const CameraFrameExtendedInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraFrameExtendedInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.CameraFrameExtendedInfo";
  }
  protected:
  explicit CameraFrameExtendedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2eproto);
    return ::descriptor_table_camera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageSupplementFieldNumber = 20,
    kSeqFieldNumber = 1,
    kFrameTypeFieldNumber = 2,
    kDataSizeFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kFsyncAdsSecFieldNumber = 6,
    kFsyncAdsNsecFieldNumber = 7,
    kFsyncGnssSecFieldNumber = 8,
    kFsyncGnssNsecFieldNumber = 9,
    kExpStartAdsSecFieldNumber = 10,
    kExpStartAdsNsecFieldNumber = 11,
    kExpStartGnssSecFieldNumber = 12,
    kExpStartGnssNsecFieldNumber = 13,
    kExpEndAdsSecFieldNumber = 14,
    kExpEndAdsNsecFieldNumber = 15,
    kExpEndGnssSecFieldNumber = 16,
    kExpEndGnssNsecFieldNumber = 17,
    kShutter1FieldNumber = 18,
    kShutter2FieldNumber = 19,
  };
  // bytes image_supplement = 20;
  void clear_image_supplement();
  const std::string& image_supplement() const;
  void set_image_supplement(const std::string& value);
  void set_image_supplement(std::string&& value);
  void set_image_supplement(const char* value);
  void set_image_supplement(const void* value, size_t size);
  std::string* mutable_image_supplement();
  std::string* release_image_supplement();
  void set_allocated_image_supplement(std::string* image_supplement);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_supplement();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_supplement(
      std::string* image_supplement);
  private:
  const std::string& _internal_image_supplement() const;
  void _internal_set_image_supplement(const std::string& value);
  std::string* _internal_mutable_image_supplement();
  public:

  // uint32 seq = 1;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 frame_type = 2;
  void clear_frame_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_type() const;
  void set_frame_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_type() const;
  void _internal_set_frame_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 data_size = 3;
  void clear_data_size();
  ::PROTOBUF_NAMESPACE_ID::int32 data_size() const;
  void set_data_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_size() const;
  void _internal_set_data_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 4;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 5;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 fsync_ads_sec = 6;
  void clear_fsync_ads_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 fsync_ads_sec() const;
  void set_fsync_ads_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fsync_ads_sec() const;
  void _internal_set_fsync_ads_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fsync_ads_nsec = 7;
  void clear_fsync_ads_nsec();
  ::PROTOBUF_NAMESPACE_ID::uint32 fsync_ads_nsec() const;
  void set_fsync_ads_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fsync_ads_nsec() const;
  void _internal_set_fsync_ads_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fsync_gnss_sec = 8;
  void clear_fsync_gnss_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 fsync_gnss_sec() const;
  void set_fsync_gnss_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fsync_gnss_sec() const;
  void _internal_set_fsync_gnss_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fsync_gnss_nsec = 9;
  void clear_fsync_gnss_nsec();
  ::PROTOBUF_NAMESPACE_ID::uint32 fsync_gnss_nsec() const;
  void set_fsync_gnss_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fsync_gnss_nsec() const;
  void _internal_set_fsync_gnss_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exp_start_ads_sec = 10;
  void clear_exp_start_ads_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_start_ads_sec() const;
  void set_exp_start_ads_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp_start_ads_sec() const;
  void _internal_set_exp_start_ads_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exp_start_ads_nsec = 11;
  void clear_exp_start_ads_nsec();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_start_ads_nsec() const;
  void set_exp_start_ads_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp_start_ads_nsec() const;
  void _internal_set_exp_start_ads_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exp_start_gnss_sec = 12;
  void clear_exp_start_gnss_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_start_gnss_sec() const;
  void set_exp_start_gnss_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp_start_gnss_sec() const;
  void _internal_set_exp_start_gnss_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exp_start_gnss_nsec = 13;
  void clear_exp_start_gnss_nsec();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_start_gnss_nsec() const;
  void set_exp_start_gnss_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp_start_gnss_nsec() const;
  void _internal_set_exp_start_gnss_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exp_end_ads_sec = 14;
  void clear_exp_end_ads_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_end_ads_sec() const;
  void set_exp_end_ads_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp_end_ads_sec() const;
  void _internal_set_exp_end_ads_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exp_end_ads_nsec = 15;
  void clear_exp_end_ads_nsec();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_end_ads_nsec() const;
  void set_exp_end_ads_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp_end_ads_nsec() const;
  void _internal_set_exp_end_ads_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exp_end_gnss_sec = 16;
  void clear_exp_end_gnss_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_end_gnss_sec() const;
  void set_exp_end_gnss_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp_end_gnss_sec() const;
  void _internal_set_exp_end_gnss_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exp_end_gnss_nsec = 17;
  void clear_exp_end_gnss_nsec();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_end_gnss_nsec() const;
  void set_exp_end_gnss_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp_end_gnss_nsec() const;
  void _internal_set_exp_end_gnss_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 shutter_1 = 18;
  void clear_shutter_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 shutter_1() const;
  void set_shutter_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shutter_1() const;
  void _internal_set_shutter_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 shutter_2 = 19;
  void clear_shutter_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 shutter_2() const;
  void set_shutter_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shutter_2() const;
  void _internal_set_shutter_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.CameraFrameExtendedInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_supplement_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fsync_ads_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fsync_ads_nsec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fsync_gnss_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fsync_gnss_nsec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_start_ads_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_start_ads_nsec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_start_gnss_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_start_gnss_nsec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_end_ads_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_end_ads_nsec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_end_gnss_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_end_gnss_nsec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shutter_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shutter_2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2eproto;
};
// -------------------------------------------------------------------

class CameraFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.CameraFrame) */ {
 public:
  inline CameraFrame() : CameraFrame(nullptr) {};
  virtual ~CameraFrame();

  CameraFrame(const CameraFrame& from);
  CameraFrame(CameraFrame&& from) noexcept
    : CameraFrame() {
    *this = ::std::move(from);
  }

  inline CameraFrame& operator=(const CameraFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraFrame& operator=(CameraFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraFrame* internal_default_instance() {
    return reinterpret_cast<const CameraFrame*>(
               &_CameraFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CameraFrame& a, CameraFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraFrame* New() const final {
    return CreateMaybeMessage<CameraFrame>(nullptr);
  }

  CameraFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraFrame& from);
  void MergeFrom(const CameraFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.CameraFrame";
  }
  protected:
  explicit CameraFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2eproto);
    return ::descriptor_table_camera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagePlaneAddrFieldNumber = 5,
    kImageSupplementFieldNumber = 10,
    kExtendedInfoFieldNumber = 11,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
    kCameraIdFieldNumber = 1,
    kImageWidthFieldNumber = 6,
    kFrameIdFieldNumber = 4,
    kImageHeightFieldNumber = 7,
    kStrideFieldNumber = 8,
    kImageTypeFieldNumber = 9,
  };
  // repeated uint64 image_plane_addr = 5;
  int image_plane_addr_size() const;
  private:
  int _internal_image_plane_addr_size() const;
  public:
  void clear_image_plane_addr();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_image_plane_addr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_image_plane_addr() const;
  void _internal_add_image_plane_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_image_plane_addr();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 image_plane_addr(int index) const;
  void set_image_plane_addr(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_image_plane_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      image_plane_addr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_image_plane_addr();

  // bytes image_supplement = 10;
  void clear_image_supplement();
  const std::string& image_supplement() const;
  void set_image_supplement(const std::string& value);
  void set_image_supplement(std::string&& value);
  void set_image_supplement(const char* value);
  void set_image_supplement(const void* value, size_t size);
  std::string* mutable_image_supplement();
  std::string* release_image_supplement();
  void set_allocated_image_supplement(std::string* image_supplement);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_supplement();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_supplement(
      std::string* image_supplement);
  private:
  const std::string& _internal_image_supplement() const;
  void _internal_set_image_supplement(const std::string& value);
  std::string* _internal_mutable_image_supplement();
  public:

  // .minieye.CameraFrameExtendedInfo extended_info = 11;
  bool has_extended_info() const;
  private:
  bool _internal_has_extended_info() const;
  public:
  void clear_extended_info();
  const ::minieye::CameraFrameExtendedInfo& extended_info() const;
  ::minieye::CameraFrameExtendedInfo* release_extended_info();
  ::minieye::CameraFrameExtendedInfo* mutable_extended_info();
  void set_allocated_extended_info(::minieye::CameraFrameExtendedInfo* extended_info);
  private:
  const ::minieye::CameraFrameExtendedInfo& _internal_extended_info() const;
  ::minieye::CameraFrameExtendedInfo* _internal_mutable_extended_info();
  public:
  void unsafe_arena_set_allocated_extended_info(
      ::minieye::CameraFrameExtendedInfo* extended_info);
  ::minieye::CameraFrameExtendedInfo* unsafe_arena_release_extended_info();

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 camera_id = 1;
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_camera_id() const;
  void _internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 image_width = 6;
  void clear_image_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 image_width() const;
  void set_image_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_image_width() const;
  void _internal_set_image_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 frame_id = 4;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 image_height = 7;
  void clear_image_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 image_height() const;
  void set_image_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_image_height() const;
  void _internal_set_image_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stride = 8;
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::uint32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 image_type = 9;
  void clear_image_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 image_type() const;
  void set_image_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_image_type() const;
  void _internal_set_image_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.CameraFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > image_plane_addr_;
  mutable std::atomic<int> _image_plane_addr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_supplement_;
  ::minieye::CameraFrameExtendedInfo* extended_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 image_width_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 image_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_;
  ::PROTOBUF_NAMESPACE_ID::uint32 image_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2eproto;
};
// -------------------------------------------------------------------

class CamID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.CamID) */ {
 public:
  inline CamID() : CamID(nullptr) {};
  virtual ~CamID();

  CamID(const CamID& from);
  CamID(CamID&& from) noexcept
    : CamID() {
    *this = ::std::move(from);
  }

  inline CamID& operator=(const CamID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamID& operator=(CamID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CamID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CamID* internal_default_instance() {
    return reinterpret_cast<const CamID*>(
               &_CamID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CamID& a, CamID& b) {
    a.Swap(&b);
  }
  inline void Swap(CamID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CamID* New() const final {
    return CreateMaybeMessage<CamID>(nullptr);
  }

  CamID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CamID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CamID& from);
  void MergeFrom(const CamID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.CamID";
  }
  protected:
  explicit CamID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2eproto);
    return ::descriptor_table_camera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamDirectFieldNumber = 1,
    kFovFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // int32 cam_direct = 1;
  void clear_cam_direct();
  ::PROTOBUF_NAMESPACE_ID::int32 cam_direct() const;
  void set_cam_direct(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cam_direct() const;
  void _internal_set_cam_direct(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .minieye.CamFov fov = 2;
  void clear_fov();
  ::minieye::CamFov fov() const;
  void set_fov(::minieye::CamFov value);
  private:
  ::minieye::CamFov _internal_fov() const;
  void _internal_set_fov(::minieye::CamFov value);
  public:

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.CamID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cam_direct_;
  int fov_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2eproto;
};
// -------------------------------------------------------------------

class TransMatrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.TransMatrix) */ {
 public:
  inline TransMatrix() : TransMatrix(nullptr) {};
  virtual ~TransMatrix();

  TransMatrix(const TransMatrix& from);
  TransMatrix(TransMatrix&& from) noexcept
    : TransMatrix() {
    *this = ::std::move(from);
  }

  inline TransMatrix& operator=(const TransMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMatrix& operator=(TransMatrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMatrix* internal_default_instance() {
    return reinterpret_cast<const TransMatrix*>(
               &_TransMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransMatrix& a, TransMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(TransMatrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransMatrix* New() const final {
    return CreateMaybeMessage<TransMatrix>(nullptr);
  }

  TransMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMatrix& from);
  void MergeFrom(const TransMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.TransMatrix";
  }
  protected:
  explicit TransMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2eproto);
    return ::descriptor_table_camera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVcsgnd2ImgFieldNumber = 1,
    kImg2VcsgndFieldNumber = 2,
    kLocal2ImgFieldNumber = 3,
    kImg2LocalFieldNumber = 4,
  };
  // repeated float vcsgnd2img = 1;
  int vcsgnd2img_size() const;
  private:
  int _internal_vcsgnd2img_size() const;
  public:
  void clear_vcsgnd2img();
  private:
  float _internal_vcsgnd2img(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vcsgnd2img() const;
  void _internal_add_vcsgnd2img(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vcsgnd2img();
  public:
  float vcsgnd2img(int index) const;
  void set_vcsgnd2img(int index, float value);
  void add_vcsgnd2img(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vcsgnd2img() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vcsgnd2img();

  // repeated float img2vcsgnd = 2;
  int img2vcsgnd_size() const;
  private:
  int _internal_img2vcsgnd_size() const;
  public:
  void clear_img2vcsgnd();
  private:
  float _internal_img2vcsgnd(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_img2vcsgnd() const;
  void _internal_add_img2vcsgnd(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_img2vcsgnd();
  public:
  float img2vcsgnd(int index) const;
  void set_img2vcsgnd(int index, float value);
  void add_img2vcsgnd(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      img2vcsgnd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_img2vcsgnd();

  // repeated float local2img = 3;
  int local2img_size() const;
  private:
  int _internal_local2img_size() const;
  public:
  void clear_local2img();
  private:
  float _internal_local2img(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_local2img() const;
  void _internal_add_local2img(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_local2img();
  public:
  float local2img(int index) const;
  void set_local2img(int index, float value);
  void add_local2img(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      local2img() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_local2img();

  // repeated float img2local = 4;
  int img2local_size() const;
  private:
  int _internal_img2local_size() const;
  public:
  void clear_img2local();
  private:
  float _internal_img2local(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_img2local() const;
  void _internal_add_img2local(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_img2local();
  public:
  float img2local(int index) const;
  void set_img2local(int index, float value);
  void add_img2local(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      img2local() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_img2local();

  // @@protoc_insertion_point(class_scope:minieye.TransMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vcsgnd2img_;
  mutable std::atomic<int> _vcsgnd2img_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > img2vcsgnd_;
  mutable std::atomic<int> _img2vcsgnd_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > local2img_;
  mutable std::atomic<int> _local2img_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > img2local_;
  mutable std::atomic<int> _img2local_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2eproto;
};
// -------------------------------------------------------------------

class CameraParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.CameraParam) */ {
 public:
  inline CameraParam() : CameraParam(nullptr) {};
  virtual ~CameraParam();

  CameraParam(const CameraParam& from);
  CameraParam(CameraParam&& from) noexcept
    : CameraParam() {
    *this = ::std::move(from);
  }

  inline CameraParam& operator=(const CameraParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraParam& operator=(CameraParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraParam* internal_default_instance() {
    return reinterpret_cast<const CameraParam*>(
               &_CameraParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CameraParam& a, CameraParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraParam* New() const final {
    return CreateMaybeMessage<CameraParam>(nullptr);
  }

  CameraParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraParam& from);
  void MergeFrom(const CameraParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.CameraParam";
  }
  protected:
  explicit CameraParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2eproto);
    return ::descriptor_table_camera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 5,
    kDistortCoeffsFieldNumber = 17,
    kIspVerFieldNumber = 11,
    kTransMtxFieldNumber = 13,
    kFocalUFieldNumber = 1,
    kFocalVFieldNumber = 2,
    kCuFieldNumber = 3,
    kCvFieldNumber = 4,
    kPitchFieldNumber = 6,
    kYawFieldNumber = 7,
    kRollFieldNumber = 8,
    kFovFieldNumber = 9,
    kImageFormatFieldNumber = 10,
    kInstallDirectionFieldNumber = 12,
    kPrjModelFieldNumber = 14,
    kImageWidthFieldNumber = 15,
    kImageHeightFieldNumber = 16,
    kCameraIdFieldNumber = 18,
    kIsValidFieldNumber = 19,
    kCalibMethodFieldNumber = 20,
    kCalibTimestampFieldNumber = 21,
  };
  // repeated float pos = 5;
  int pos_size() const;
  private:
  int _internal_pos_size() const;
  public:
  void clear_pos();
  private:
  float _internal_pos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_pos() const;
  void _internal_add_pos(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_pos();
  public:
  float pos(int index) const;
  void set_pos(int index, float value);
  void add_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pos();

  // repeated double distort_coeffs = 17;
  int distort_coeffs_size() const;
  private:
  int _internal_distort_coeffs_size() const;
  public:
  void clear_distort_coeffs();
  private:
  double _internal_distort_coeffs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_distort_coeffs() const;
  void _internal_add_distort_coeffs(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_distort_coeffs();
  public:
  double distort_coeffs(int index) const;
  void set_distort_coeffs(int index, double value);
  void add_distort_coeffs(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      distort_coeffs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_distort_coeffs();

  // string isp_ver = 11;
  void clear_isp_ver();
  const std::string& isp_ver() const;
  void set_isp_ver(const std::string& value);
  void set_isp_ver(std::string&& value);
  void set_isp_ver(const char* value);
  void set_isp_ver(const char* value, size_t size);
  std::string* mutable_isp_ver();
  std::string* release_isp_ver();
  void set_allocated_isp_ver(std::string* isp_ver);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_isp_ver();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_isp_ver(
      std::string* isp_ver);
  private:
  const std::string& _internal_isp_ver() const;
  void _internal_set_isp_ver(const std::string& value);
  std::string* _internal_mutable_isp_ver();
  public:

  // .minieye.TransMatrix trans_mtx = 13;
  bool has_trans_mtx() const;
  private:
  bool _internal_has_trans_mtx() const;
  public:
  void clear_trans_mtx();
  const ::minieye::TransMatrix& trans_mtx() const;
  ::minieye::TransMatrix* release_trans_mtx();
  ::minieye::TransMatrix* mutable_trans_mtx();
  void set_allocated_trans_mtx(::minieye::TransMatrix* trans_mtx);
  private:
  const ::minieye::TransMatrix& _internal_trans_mtx() const;
  ::minieye::TransMatrix* _internal_mutable_trans_mtx();
  public:
  void unsafe_arena_set_allocated_trans_mtx(
      ::minieye::TransMatrix* trans_mtx);
  ::minieye::TransMatrix* unsafe_arena_release_trans_mtx();

  // float focal_u = 1;
  void clear_focal_u();
  float focal_u() const;
  void set_focal_u(float value);
  private:
  float _internal_focal_u() const;
  void _internal_set_focal_u(float value);
  public:

  // float focal_v = 2;
  void clear_focal_v();
  float focal_v() const;
  void set_focal_v(float value);
  private:
  float _internal_focal_v() const;
  void _internal_set_focal_v(float value);
  public:

  // float cu = 3;
  void clear_cu();
  float cu() const;
  void set_cu(float value);
  private:
  float _internal_cu() const;
  void _internal_set_cu(float value);
  public:

  // float cv = 4;
  void clear_cv();
  float cv() const;
  void set_cv(float value);
  private:
  float _internal_cv() const;
  void _internal_set_cv(float value);
  public:

  // float pitch = 6;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float yaw = 7;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float roll = 8;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float fov = 9;
  void clear_fov();
  float fov() const;
  void set_fov(float value);
  private:
  float _internal_fov() const;
  void _internal_set_fov(float value);
  public:

  // int32 image_format = 10;
  void clear_image_format();
  ::PROTOBUF_NAMESPACE_ID::int32 image_format() const;
  void set_image_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_format() const;
  void _internal_set_image_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 install_direction = 12;
  void clear_install_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 install_direction() const;
  void set_install_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_install_direction() const;
  void _internal_set_install_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .minieye.ProjectionModel prj_model = 14;
  void clear_prj_model();
  ::minieye::ProjectionModel prj_model() const;
  void set_prj_model(::minieye::ProjectionModel value);
  private:
  ::minieye::ProjectionModel _internal_prj_model() const;
  void _internal_set_prj_model(::minieye::ProjectionModel value);
  public:

  // uint32 image_width = 15;
  void clear_image_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 image_width() const;
  void set_image_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_image_width() const;
  void _internal_set_image_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 image_height = 16;
  void clear_image_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 image_height() const;
  void set_image_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_image_height() const;
  void _internal_set_image_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 camera_id = 18;
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_camera_id() const;
  void _internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_valid = 19;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // int32 calib_method = 20;
  void clear_calib_method();
  ::PROTOBUF_NAMESPACE_ID::int32 calib_method() const;
  void set_calib_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_calib_method() const;
  void _internal_set_calib_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 calib_timestamp = 21;
  void clear_calib_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 calib_timestamp() const;
  void set_calib_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_calib_timestamp() const;
  void _internal_set_calib_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.CameraParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pos_;
  mutable std::atomic<int> _pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > distort_coeffs_;
  mutable std::atomic<int> _distort_coeffs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isp_ver_;
  ::minieye::TransMatrix* trans_mtx_;
  float focal_u_;
  float focal_v_;
  float cu_;
  float cv_;
  float pitch_;
  float yaw_;
  float roll_;
  float fov_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_format_;
  ::PROTOBUF_NAMESPACE_ID::int32 install_direction_;
  int prj_model_;
  ::PROTOBUF_NAMESPACE_ID::uint32 image_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 image_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_id_;
  bool is_valid_;
  ::PROTOBUF_NAMESPACE_ID::int32 calib_method_;
  ::PROTOBUF_NAMESPACE_ID::uint64 calib_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2eproto;
};
// -------------------------------------------------------------------

class CameraEmbeddedInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.CameraEmbeddedInfo) */ {
 public:
  inline CameraEmbeddedInfo() : CameraEmbeddedInfo(nullptr) {};
  virtual ~CameraEmbeddedInfo();

  CameraEmbeddedInfo(const CameraEmbeddedInfo& from);
  CameraEmbeddedInfo(CameraEmbeddedInfo&& from) noexcept
    : CameraEmbeddedInfo() {
    *this = ::std::move(from);
  }

  inline CameraEmbeddedInfo& operator=(const CameraEmbeddedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraEmbeddedInfo& operator=(CameraEmbeddedInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraEmbeddedInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraEmbeddedInfo* internal_default_instance() {
    return reinterpret_cast<const CameraEmbeddedInfo*>(
               &_CameraEmbeddedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CameraEmbeddedInfo& a, CameraEmbeddedInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraEmbeddedInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraEmbeddedInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraEmbeddedInfo* New() const final {
    return CreateMaybeMessage<CameraEmbeddedInfo>(nullptr);
  }

  CameraEmbeddedInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraEmbeddedInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraEmbeddedInfo& from);
  void MergeFrom(const CameraEmbeddedInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraEmbeddedInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.CameraEmbeddedInfo";
  }
  protected:
  explicit CameraEmbeddedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2eproto);
    return ::descriptor_table_camera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpoRatioFieldNumber = 3,
    kShutterTimeFieldNumber = 4,
    kSensorAGainFieldNumber = 5,
    kSensorDGainFieldNumber = 6,
    kExpStartCameraTimeStampFieldNumber = 7,
    kExpEndCameraTimeStampFieldNumber = 8,
    kFrameCountFieldNumber = 1,
    kExpoNumFieldNumber = 2,
    kIsValidBitmapFieldNumber = 64,
  };
  // repeated uint32 expo_ratio = 3;
  int expo_ratio_size() const;
  private:
  int _internal_expo_ratio_size() const;
  public:
  void clear_expo_ratio();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expo_ratio(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_expo_ratio() const;
  void _internal_add_expo_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_expo_ratio();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 expo_ratio(int index) const;
  void set_expo_ratio(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_expo_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      expo_ratio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_expo_ratio();

  // repeated uint32 shutter_time = 4;
  int shutter_time_size() const;
  private:
  int _internal_shutter_time_size() const;
  public:
  void clear_shutter_time();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shutter_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_shutter_time() const;
  void _internal_add_shutter_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_shutter_time();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 shutter_time(int index) const;
  void set_shutter_time(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_shutter_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      shutter_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_shutter_time();

  // repeated float sensor_a_gain = 5;
  int sensor_a_gain_size() const;
  private:
  int _internal_sensor_a_gain_size() const;
  public:
  void clear_sensor_a_gain();
  private:
  float _internal_sensor_a_gain(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_sensor_a_gain() const;
  void _internal_add_sensor_a_gain(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_sensor_a_gain();
  public:
  float sensor_a_gain(int index) const;
  void set_sensor_a_gain(int index, float value);
  void add_sensor_a_gain(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sensor_a_gain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sensor_a_gain();

  // repeated float sensor_d_gain = 6;
  int sensor_d_gain_size() const;
  private:
  int _internal_sensor_d_gain_size() const;
  public:
  void clear_sensor_d_gain();
  private:
  float _internal_sensor_d_gain(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_sensor_d_gain() const;
  void _internal_add_sensor_d_gain(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_sensor_d_gain();
  public:
  float sensor_d_gain(int index) const;
  void set_sensor_d_gain(int index, float value);
  void add_sensor_d_gain(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      sensor_d_gain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_sensor_d_gain();

  // .google.protobuf.Timestamp exp_start_camera_time_stamp = 7;
  bool has_exp_start_camera_time_stamp() const;
  private:
  bool _internal_has_exp_start_camera_time_stamp() const;
  public:
  void clear_exp_start_camera_time_stamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& exp_start_camera_time_stamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_exp_start_camera_time_stamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_exp_start_camera_time_stamp();
  void set_allocated_exp_start_camera_time_stamp(PROTOBUF_NAMESPACE_ID::Timestamp* exp_start_camera_time_stamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_exp_start_camera_time_stamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_exp_start_camera_time_stamp();
  public:
  void unsafe_arena_set_allocated_exp_start_camera_time_stamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* exp_start_camera_time_stamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_exp_start_camera_time_stamp();

  // .google.protobuf.Timestamp exp_end_camera_time_stamp = 8;
  bool has_exp_end_camera_time_stamp() const;
  private:
  bool _internal_has_exp_end_camera_time_stamp() const;
  public:
  void clear_exp_end_camera_time_stamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& exp_end_camera_time_stamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_exp_end_camera_time_stamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_exp_end_camera_time_stamp();
  void set_allocated_exp_end_camera_time_stamp(PROTOBUF_NAMESPACE_ID::Timestamp* exp_end_camera_time_stamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_exp_end_camera_time_stamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_exp_end_camera_time_stamp();
  public:
  void unsafe_arena_set_allocated_exp_end_camera_time_stamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* exp_end_camera_time_stamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_exp_end_camera_time_stamp();

  // uint32 frame_count = 1;
  void clear_frame_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_count() const;
  void set_frame_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_count() const;
  void _internal_set_frame_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expo_num = 2;
  void clear_expo_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 expo_num() const;
  void set_expo_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expo_num() const;
  void _internal_set_expo_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 is_valid_bitmap = 64;
  void clear_is_valid_bitmap();
  ::PROTOBUF_NAMESPACE_ID::uint64 is_valid_bitmap() const;
  void set_is_valid_bitmap(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_is_valid_bitmap() const;
  void _internal_set_is_valid_bitmap(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.CameraEmbeddedInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > expo_ratio_;
  mutable std::atomic<int> _expo_ratio_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > shutter_time_;
  mutable std::atomic<int> _shutter_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sensor_a_gain_;
  mutable std::atomic<int> _sensor_a_gain_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > sensor_d_gain_;
  mutable std::atomic<int> _sensor_d_gain_cached_byte_size_;
  PROTOBUF_NAMESPACE_ID::Timestamp* exp_start_camera_time_stamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* exp_end_camera_time_stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expo_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 is_valid_bitmap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraFrameExtendedInfo

// uint32 seq = 1;
inline void CameraFrameExtendedInfo::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::seq() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.seq)
  return _internal_seq();
}
inline void CameraFrameExtendedInfo::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
}
inline void CameraFrameExtendedInfo::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.seq)
}

// uint32 frame_type = 2;
inline void CameraFrameExtendedInfo::clear_frame_type() {
  frame_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_frame_type() const {
  return frame_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::frame_type() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.frame_type)
  return _internal_frame_type();
}
inline void CameraFrameExtendedInfo::_internal_set_frame_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frame_type_ = value;
}
inline void CameraFrameExtendedInfo::set_frame_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_type(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.frame_type)
}

// int32 data_size = 3;
inline void CameraFrameExtendedInfo::clear_data_size() {
  data_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraFrameExtendedInfo::_internal_data_size() const {
  return data_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraFrameExtendedInfo::data_size() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.data_size)
  return _internal_data_size();
}
inline void CameraFrameExtendedInfo::_internal_set_data_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_size_ = value;
}
inline void CameraFrameExtendedInfo::set_data_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_size(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.data_size)
}

// int32 width = 4;
inline void CameraFrameExtendedInfo::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraFrameExtendedInfo::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraFrameExtendedInfo::width() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.width)
  return _internal_width();
}
inline void CameraFrameExtendedInfo::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void CameraFrameExtendedInfo::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.width)
}

// int32 height = 5;
inline void CameraFrameExtendedInfo::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraFrameExtendedInfo::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraFrameExtendedInfo::height() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.height)
  return _internal_height();
}
inline void CameraFrameExtendedInfo::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void CameraFrameExtendedInfo::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.height)
}

// uint32 fsync_ads_sec = 6;
inline void CameraFrameExtendedInfo::clear_fsync_ads_sec() {
  fsync_ads_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_fsync_ads_sec() const {
  return fsync_ads_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::fsync_ads_sec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.fsync_ads_sec)
  return _internal_fsync_ads_sec();
}
inline void CameraFrameExtendedInfo::_internal_set_fsync_ads_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fsync_ads_sec_ = value;
}
inline void CameraFrameExtendedInfo::set_fsync_ads_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fsync_ads_sec(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.fsync_ads_sec)
}

// uint32 fsync_ads_nsec = 7;
inline void CameraFrameExtendedInfo::clear_fsync_ads_nsec() {
  fsync_ads_nsec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_fsync_ads_nsec() const {
  return fsync_ads_nsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::fsync_ads_nsec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.fsync_ads_nsec)
  return _internal_fsync_ads_nsec();
}
inline void CameraFrameExtendedInfo::_internal_set_fsync_ads_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fsync_ads_nsec_ = value;
}
inline void CameraFrameExtendedInfo::set_fsync_ads_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fsync_ads_nsec(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.fsync_ads_nsec)
}

// uint32 fsync_gnss_sec = 8;
inline void CameraFrameExtendedInfo::clear_fsync_gnss_sec() {
  fsync_gnss_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_fsync_gnss_sec() const {
  return fsync_gnss_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::fsync_gnss_sec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.fsync_gnss_sec)
  return _internal_fsync_gnss_sec();
}
inline void CameraFrameExtendedInfo::_internal_set_fsync_gnss_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fsync_gnss_sec_ = value;
}
inline void CameraFrameExtendedInfo::set_fsync_gnss_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fsync_gnss_sec(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.fsync_gnss_sec)
}

// uint32 fsync_gnss_nsec = 9;
inline void CameraFrameExtendedInfo::clear_fsync_gnss_nsec() {
  fsync_gnss_nsec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_fsync_gnss_nsec() const {
  return fsync_gnss_nsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::fsync_gnss_nsec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.fsync_gnss_nsec)
  return _internal_fsync_gnss_nsec();
}
inline void CameraFrameExtendedInfo::_internal_set_fsync_gnss_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fsync_gnss_nsec_ = value;
}
inline void CameraFrameExtendedInfo::set_fsync_gnss_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fsync_gnss_nsec(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.fsync_gnss_nsec)
}

// uint32 exp_start_ads_sec = 10;
inline void CameraFrameExtendedInfo::clear_exp_start_ads_sec() {
  exp_start_ads_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_exp_start_ads_sec() const {
  return exp_start_ads_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::exp_start_ads_sec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_start_ads_sec)
  return _internal_exp_start_ads_sec();
}
inline void CameraFrameExtendedInfo::_internal_set_exp_start_ads_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exp_start_ads_sec_ = value;
}
inline void CameraFrameExtendedInfo::set_exp_start_ads_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp_start_ads_sec(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_start_ads_sec)
}

// uint32 exp_start_ads_nsec = 11;
inline void CameraFrameExtendedInfo::clear_exp_start_ads_nsec() {
  exp_start_ads_nsec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_exp_start_ads_nsec() const {
  return exp_start_ads_nsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::exp_start_ads_nsec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_start_ads_nsec)
  return _internal_exp_start_ads_nsec();
}
inline void CameraFrameExtendedInfo::_internal_set_exp_start_ads_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exp_start_ads_nsec_ = value;
}
inline void CameraFrameExtendedInfo::set_exp_start_ads_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp_start_ads_nsec(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_start_ads_nsec)
}

// uint32 exp_start_gnss_sec = 12;
inline void CameraFrameExtendedInfo::clear_exp_start_gnss_sec() {
  exp_start_gnss_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_exp_start_gnss_sec() const {
  return exp_start_gnss_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::exp_start_gnss_sec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_start_gnss_sec)
  return _internal_exp_start_gnss_sec();
}
inline void CameraFrameExtendedInfo::_internal_set_exp_start_gnss_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exp_start_gnss_sec_ = value;
}
inline void CameraFrameExtendedInfo::set_exp_start_gnss_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp_start_gnss_sec(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_start_gnss_sec)
}

// uint32 exp_start_gnss_nsec = 13;
inline void CameraFrameExtendedInfo::clear_exp_start_gnss_nsec() {
  exp_start_gnss_nsec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_exp_start_gnss_nsec() const {
  return exp_start_gnss_nsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::exp_start_gnss_nsec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_start_gnss_nsec)
  return _internal_exp_start_gnss_nsec();
}
inline void CameraFrameExtendedInfo::_internal_set_exp_start_gnss_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exp_start_gnss_nsec_ = value;
}
inline void CameraFrameExtendedInfo::set_exp_start_gnss_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp_start_gnss_nsec(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_start_gnss_nsec)
}

// uint32 exp_end_ads_sec = 14;
inline void CameraFrameExtendedInfo::clear_exp_end_ads_sec() {
  exp_end_ads_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_exp_end_ads_sec() const {
  return exp_end_ads_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::exp_end_ads_sec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_end_ads_sec)
  return _internal_exp_end_ads_sec();
}
inline void CameraFrameExtendedInfo::_internal_set_exp_end_ads_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exp_end_ads_sec_ = value;
}
inline void CameraFrameExtendedInfo::set_exp_end_ads_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp_end_ads_sec(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_end_ads_sec)
}

// uint32 exp_end_ads_nsec = 15;
inline void CameraFrameExtendedInfo::clear_exp_end_ads_nsec() {
  exp_end_ads_nsec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_exp_end_ads_nsec() const {
  return exp_end_ads_nsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::exp_end_ads_nsec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_end_ads_nsec)
  return _internal_exp_end_ads_nsec();
}
inline void CameraFrameExtendedInfo::_internal_set_exp_end_ads_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exp_end_ads_nsec_ = value;
}
inline void CameraFrameExtendedInfo::set_exp_end_ads_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp_end_ads_nsec(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_end_ads_nsec)
}

// uint32 exp_end_gnss_sec = 16;
inline void CameraFrameExtendedInfo::clear_exp_end_gnss_sec() {
  exp_end_gnss_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_exp_end_gnss_sec() const {
  return exp_end_gnss_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::exp_end_gnss_sec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_end_gnss_sec)
  return _internal_exp_end_gnss_sec();
}
inline void CameraFrameExtendedInfo::_internal_set_exp_end_gnss_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exp_end_gnss_sec_ = value;
}
inline void CameraFrameExtendedInfo::set_exp_end_gnss_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp_end_gnss_sec(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_end_gnss_sec)
}

// uint32 exp_end_gnss_nsec = 17;
inline void CameraFrameExtendedInfo::clear_exp_end_gnss_nsec() {
  exp_end_gnss_nsec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_exp_end_gnss_nsec() const {
  return exp_end_gnss_nsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::exp_end_gnss_nsec() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.exp_end_gnss_nsec)
  return _internal_exp_end_gnss_nsec();
}
inline void CameraFrameExtendedInfo::_internal_set_exp_end_gnss_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exp_end_gnss_nsec_ = value;
}
inline void CameraFrameExtendedInfo::set_exp_end_gnss_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp_end_gnss_nsec(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.exp_end_gnss_nsec)
}

// uint32 shutter_1 = 18;
inline void CameraFrameExtendedInfo::clear_shutter_1() {
  shutter_1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_shutter_1() const {
  return shutter_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::shutter_1() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.shutter_1)
  return _internal_shutter_1();
}
inline void CameraFrameExtendedInfo::_internal_set_shutter_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shutter_1_ = value;
}
inline void CameraFrameExtendedInfo::set_shutter_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shutter_1(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.shutter_1)
}

// uint32 shutter_2 = 19;
inline void CameraFrameExtendedInfo::clear_shutter_2() {
  shutter_2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::_internal_shutter_2() const {
  return shutter_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrameExtendedInfo::shutter_2() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.shutter_2)
  return _internal_shutter_2();
}
inline void CameraFrameExtendedInfo::_internal_set_shutter_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shutter_2_ = value;
}
inline void CameraFrameExtendedInfo::set_shutter_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shutter_2(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.shutter_2)
}

// bytes image_supplement = 20;
inline void CameraFrameExtendedInfo::clear_image_supplement() {
  image_supplement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CameraFrameExtendedInfo::image_supplement() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrameExtendedInfo.image_supplement)
  return _internal_image_supplement();
}
inline void CameraFrameExtendedInfo::set_image_supplement(const std::string& value) {
  _internal_set_image_supplement(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrameExtendedInfo.image_supplement)
}
inline std::string* CameraFrameExtendedInfo::mutable_image_supplement() {
  // @@protoc_insertion_point(field_mutable:minieye.CameraFrameExtendedInfo.image_supplement)
  return _internal_mutable_image_supplement();
}
inline const std::string& CameraFrameExtendedInfo::_internal_image_supplement() const {
  return image_supplement_.Get();
}
inline void CameraFrameExtendedInfo::_internal_set_image_supplement(const std::string& value) {
  
  image_supplement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CameraFrameExtendedInfo::set_image_supplement(std::string&& value) {
  
  image_supplement_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minieye.CameraFrameExtendedInfo.image_supplement)
}
inline void CameraFrameExtendedInfo::set_image_supplement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_supplement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minieye.CameraFrameExtendedInfo.image_supplement)
}
inline void CameraFrameExtendedInfo::set_image_supplement(const void* value,
    size_t size) {
  
  image_supplement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minieye.CameraFrameExtendedInfo.image_supplement)
}
inline std::string* CameraFrameExtendedInfo::_internal_mutable_image_supplement() {
  
  return image_supplement_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CameraFrameExtendedInfo::release_image_supplement() {
  // @@protoc_insertion_point(field_release:minieye.CameraFrameExtendedInfo.image_supplement)
  return image_supplement_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraFrameExtendedInfo::set_allocated_image_supplement(std::string* image_supplement) {
  if (image_supplement != nullptr) {
    
  } else {
    
  }
  image_supplement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_supplement,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minieye.CameraFrameExtendedInfo.image_supplement)
}
inline std::string* CameraFrameExtendedInfo::unsafe_arena_release_image_supplement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minieye.CameraFrameExtendedInfo.image_supplement)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_supplement_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CameraFrameExtendedInfo::unsafe_arena_set_allocated_image_supplement(
    std::string* image_supplement) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_supplement != nullptr) {
    
  } else {
    
  }
  image_supplement_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_supplement, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.CameraFrameExtendedInfo.image_supplement)
}

// -------------------------------------------------------------------

// CameraFrame

// uint32 camera_id = 1;
inline void CameraFrame::clear_camera_id() {
  camera_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrame::_internal_camera_id() const {
  return camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrame::camera_id() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.camera_id)
  return _internal_camera_id();
}
inline void CameraFrame::_internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  camera_id_ = value;
}
inline void CameraFrame::set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.camera_id)
}

// uint64 timestamp = 2;
inline void CameraFrame::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraFrame::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraFrame::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.timestamp)
  return _internal_timestamp();
}
inline void CameraFrame::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void CameraFrame::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.timestamp)
}

// uint64 tick = 3;
inline void CameraFrame::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraFrame::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraFrame::tick() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.tick)
  return _internal_tick();
}
inline void CameraFrame::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void CameraFrame::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.tick)
}

// uint64 frame_id = 4;
inline void CameraFrame::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraFrame::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.frame_id)
  return _internal_frame_id();
}
inline void CameraFrame::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void CameraFrame::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.frame_id)
}

// repeated uint64 image_plane_addr = 5;
inline int CameraFrame::_internal_image_plane_addr_size() const {
  return image_plane_addr_.size();
}
inline int CameraFrame::image_plane_addr_size() const {
  return _internal_image_plane_addr_size();
}
inline void CameraFrame::clear_image_plane_addr() {
  image_plane_addr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraFrame::_internal_image_plane_addr(int index) const {
  return image_plane_addr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraFrame::image_plane_addr(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.image_plane_addr)
  return _internal_image_plane_addr(index);
}
inline void CameraFrame::set_image_plane_addr(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  image_plane_addr_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.image_plane_addr)
}
inline void CameraFrame::_internal_add_image_plane_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  image_plane_addr_.Add(value);
}
inline void CameraFrame::add_image_plane_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_image_plane_addr(value);
  // @@protoc_insertion_point(field_add:minieye.CameraFrame.image_plane_addr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CameraFrame::_internal_image_plane_addr() const {
  return image_plane_addr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CameraFrame::image_plane_addr() const {
  // @@protoc_insertion_point(field_list:minieye.CameraFrame.image_plane_addr)
  return _internal_image_plane_addr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CameraFrame::_internal_mutable_image_plane_addr() {
  return &image_plane_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CameraFrame::mutable_image_plane_addr() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraFrame.image_plane_addr)
  return _internal_mutable_image_plane_addr();
}

// uint32 image_width = 6;
inline void CameraFrame::clear_image_width() {
  image_width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrame::_internal_image_width() const {
  return image_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrame::image_width() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.image_width)
  return _internal_image_width();
}
inline void CameraFrame::_internal_set_image_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  image_width_ = value;
}
inline void CameraFrame::set_image_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_image_width(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.image_width)
}

// uint32 image_height = 7;
inline void CameraFrame::clear_image_height() {
  image_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrame::_internal_image_height() const {
  return image_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrame::image_height() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.image_height)
  return _internal_image_height();
}
inline void CameraFrame::_internal_set_image_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  image_height_ = value;
}
inline void CameraFrame::set_image_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_image_height(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.image_height)
}

// uint32 stride = 8;
inline void CameraFrame::clear_stride() {
  stride_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrame::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrame::stride() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.stride)
  return _internal_stride();
}
inline void CameraFrame::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stride_ = value;
}
inline void CameraFrame::set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.stride)
}

// uint32 image_type = 9;
inline void CameraFrame::clear_image_type() {
  image_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrame::_internal_image_type() const {
  return image_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraFrame::image_type() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.image_type)
  return _internal_image_type();
}
inline void CameraFrame::_internal_set_image_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  image_type_ = value;
}
inline void CameraFrame::set_image_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_image_type(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.image_type)
}

// bytes image_supplement = 10;
inline void CameraFrame::clear_image_supplement() {
  image_supplement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CameraFrame::image_supplement() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.image_supplement)
  return _internal_image_supplement();
}
inline void CameraFrame::set_image_supplement(const std::string& value) {
  _internal_set_image_supplement(value);
  // @@protoc_insertion_point(field_set:minieye.CameraFrame.image_supplement)
}
inline std::string* CameraFrame::mutable_image_supplement() {
  // @@protoc_insertion_point(field_mutable:minieye.CameraFrame.image_supplement)
  return _internal_mutable_image_supplement();
}
inline const std::string& CameraFrame::_internal_image_supplement() const {
  return image_supplement_.Get();
}
inline void CameraFrame::_internal_set_image_supplement(const std::string& value) {
  
  image_supplement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CameraFrame::set_image_supplement(std::string&& value) {
  
  image_supplement_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minieye.CameraFrame.image_supplement)
}
inline void CameraFrame::set_image_supplement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_supplement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minieye.CameraFrame.image_supplement)
}
inline void CameraFrame::set_image_supplement(const void* value,
    size_t size) {
  
  image_supplement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minieye.CameraFrame.image_supplement)
}
inline std::string* CameraFrame::_internal_mutable_image_supplement() {
  
  return image_supplement_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CameraFrame::release_image_supplement() {
  // @@protoc_insertion_point(field_release:minieye.CameraFrame.image_supplement)
  return image_supplement_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraFrame::set_allocated_image_supplement(std::string* image_supplement) {
  if (image_supplement != nullptr) {
    
  } else {
    
  }
  image_supplement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_supplement,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minieye.CameraFrame.image_supplement)
}
inline std::string* CameraFrame::unsafe_arena_release_image_supplement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minieye.CameraFrame.image_supplement)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_supplement_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CameraFrame::unsafe_arena_set_allocated_image_supplement(
    std::string* image_supplement) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_supplement != nullptr) {
    
  } else {
    
  }
  image_supplement_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_supplement, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.CameraFrame.image_supplement)
}

// .minieye.CameraFrameExtendedInfo extended_info = 11;
inline bool CameraFrame::_internal_has_extended_info() const {
  return this != internal_default_instance() && extended_info_ != nullptr;
}
inline bool CameraFrame::has_extended_info() const {
  return _internal_has_extended_info();
}
inline void CameraFrame::clear_extended_info() {
  if (GetArena() == nullptr && extended_info_ != nullptr) {
    delete extended_info_;
  }
  extended_info_ = nullptr;
}
inline const ::minieye::CameraFrameExtendedInfo& CameraFrame::_internal_extended_info() const {
  const ::minieye::CameraFrameExtendedInfo* p = extended_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::CameraFrameExtendedInfo*>(
      &::minieye::_CameraFrameExtendedInfo_default_instance_);
}
inline const ::minieye::CameraFrameExtendedInfo& CameraFrame::extended_info() const {
  // @@protoc_insertion_point(field_get:minieye.CameraFrame.extended_info)
  return _internal_extended_info();
}
inline void CameraFrame::unsafe_arena_set_allocated_extended_info(
    ::minieye::CameraFrameExtendedInfo* extended_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extended_info_);
  }
  extended_info_ = extended_info;
  if (extended_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.CameraFrame.extended_info)
}
inline ::minieye::CameraFrameExtendedInfo* CameraFrame::release_extended_info() {
  auto temp = unsafe_arena_release_extended_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::CameraFrameExtendedInfo* CameraFrame::unsafe_arena_release_extended_info() {
  // @@protoc_insertion_point(field_release:minieye.CameraFrame.extended_info)
  
  ::minieye::CameraFrameExtendedInfo* temp = extended_info_;
  extended_info_ = nullptr;
  return temp;
}
inline ::minieye::CameraFrameExtendedInfo* CameraFrame::_internal_mutable_extended_info() {
  
  if (extended_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::CameraFrameExtendedInfo>(GetArena());
    extended_info_ = p;
  }
  return extended_info_;
}
inline ::minieye::CameraFrameExtendedInfo* CameraFrame::mutable_extended_info() {
  // @@protoc_insertion_point(field_mutable:minieye.CameraFrame.extended_info)
  return _internal_mutable_extended_info();
}
inline void CameraFrame::set_allocated_extended_info(::minieye::CameraFrameExtendedInfo* extended_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extended_info_;
  }
  if (extended_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extended_info);
    if (message_arena != submessage_arena) {
      extended_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extended_info, submessage_arena);
    }
    
  } else {
    
  }
  extended_info_ = extended_info;
  // @@protoc_insertion_point(field_set_allocated:minieye.CameraFrame.extended_info)
}

// -------------------------------------------------------------------

// CamID

// int32 cam_direct = 1;
inline void CamID::clear_cam_direct() {
  cam_direct_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CamID::_internal_cam_direct() const {
  return cam_direct_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CamID::cam_direct() const {
  // @@protoc_insertion_point(field_get:minieye.CamID.cam_direct)
  return _internal_cam_direct();
}
inline void CamID::_internal_set_cam_direct(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cam_direct_ = value;
}
inline void CamID::set_cam_direct(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cam_direct(value);
  // @@protoc_insertion_point(field_set:minieye.CamID.cam_direct)
}

// .minieye.CamFov fov = 2;
inline void CamID::clear_fov() {
  fov_ = 0;
}
inline ::minieye::CamFov CamID::_internal_fov() const {
  return static_cast< ::minieye::CamFov >(fov_);
}
inline ::minieye::CamFov CamID::fov() const {
  // @@protoc_insertion_point(field_get:minieye.CamID.fov)
  return _internal_fov();
}
inline void CamID::_internal_set_fov(::minieye::CamFov value) {
  
  fov_ = value;
}
inline void CamID::set_fov(::minieye::CamFov value) {
  _internal_set_fov(value);
  // @@protoc_insertion_point(field_set:minieye.CamID.fov)
}

// int32 id = 3;
inline void CamID::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CamID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CamID::id() const {
  // @@protoc_insertion_point(field_get:minieye.CamID.id)
  return _internal_id();
}
inline void CamID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CamID::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minieye.CamID.id)
}

// -------------------------------------------------------------------

// TransMatrix

// repeated float vcsgnd2img = 1;
inline int TransMatrix::_internal_vcsgnd2img_size() const {
  return vcsgnd2img_.size();
}
inline int TransMatrix::vcsgnd2img_size() const {
  return _internal_vcsgnd2img_size();
}
inline void TransMatrix::clear_vcsgnd2img() {
  vcsgnd2img_.Clear();
}
inline float TransMatrix::_internal_vcsgnd2img(int index) const {
  return vcsgnd2img_.Get(index);
}
inline float TransMatrix::vcsgnd2img(int index) const {
  // @@protoc_insertion_point(field_get:minieye.TransMatrix.vcsgnd2img)
  return _internal_vcsgnd2img(index);
}
inline void TransMatrix::set_vcsgnd2img(int index, float value) {
  vcsgnd2img_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.TransMatrix.vcsgnd2img)
}
inline void TransMatrix::_internal_add_vcsgnd2img(float value) {
  vcsgnd2img_.Add(value);
}
inline void TransMatrix::add_vcsgnd2img(float value) {
  _internal_add_vcsgnd2img(value);
  // @@protoc_insertion_point(field_add:minieye.TransMatrix.vcsgnd2img)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TransMatrix::_internal_vcsgnd2img() const {
  return vcsgnd2img_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TransMatrix::vcsgnd2img() const {
  // @@protoc_insertion_point(field_list:minieye.TransMatrix.vcsgnd2img)
  return _internal_vcsgnd2img();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TransMatrix::_internal_mutable_vcsgnd2img() {
  return &vcsgnd2img_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TransMatrix::mutable_vcsgnd2img() {
  // @@protoc_insertion_point(field_mutable_list:minieye.TransMatrix.vcsgnd2img)
  return _internal_mutable_vcsgnd2img();
}

// repeated float img2vcsgnd = 2;
inline int TransMatrix::_internal_img2vcsgnd_size() const {
  return img2vcsgnd_.size();
}
inline int TransMatrix::img2vcsgnd_size() const {
  return _internal_img2vcsgnd_size();
}
inline void TransMatrix::clear_img2vcsgnd() {
  img2vcsgnd_.Clear();
}
inline float TransMatrix::_internal_img2vcsgnd(int index) const {
  return img2vcsgnd_.Get(index);
}
inline float TransMatrix::img2vcsgnd(int index) const {
  // @@protoc_insertion_point(field_get:minieye.TransMatrix.img2vcsgnd)
  return _internal_img2vcsgnd(index);
}
inline void TransMatrix::set_img2vcsgnd(int index, float value) {
  img2vcsgnd_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.TransMatrix.img2vcsgnd)
}
inline void TransMatrix::_internal_add_img2vcsgnd(float value) {
  img2vcsgnd_.Add(value);
}
inline void TransMatrix::add_img2vcsgnd(float value) {
  _internal_add_img2vcsgnd(value);
  // @@protoc_insertion_point(field_add:minieye.TransMatrix.img2vcsgnd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TransMatrix::_internal_img2vcsgnd() const {
  return img2vcsgnd_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TransMatrix::img2vcsgnd() const {
  // @@protoc_insertion_point(field_list:minieye.TransMatrix.img2vcsgnd)
  return _internal_img2vcsgnd();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TransMatrix::_internal_mutable_img2vcsgnd() {
  return &img2vcsgnd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TransMatrix::mutable_img2vcsgnd() {
  // @@protoc_insertion_point(field_mutable_list:minieye.TransMatrix.img2vcsgnd)
  return _internal_mutable_img2vcsgnd();
}

// repeated float local2img = 3;
inline int TransMatrix::_internal_local2img_size() const {
  return local2img_.size();
}
inline int TransMatrix::local2img_size() const {
  return _internal_local2img_size();
}
inline void TransMatrix::clear_local2img() {
  local2img_.Clear();
}
inline float TransMatrix::_internal_local2img(int index) const {
  return local2img_.Get(index);
}
inline float TransMatrix::local2img(int index) const {
  // @@protoc_insertion_point(field_get:minieye.TransMatrix.local2img)
  return _internal_local2img(index);
}
inline void TransMatrix::set_local2img(int index, float value) {
  local2img_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.TransMatrix.local2img)
}
inline void TransMatrix::_internal_add_local2img(float value) {
  local2img_.Add(value);
}
inline void TransMatrix::add_local2img(float value) {
  _internal_add_local2img(value);
  // @@protoc_insertion_point(field_add:minieye.TransMatrix.local2img)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TransMatrix::_internal_local2img() const {
  return local2img_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TransMatrix::local2img() const {
  // @@protoc_insertion_point(field_list:minieye.TransMatrix.local2img)
  return _internal_local2img();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TransMatrix::_internal_mutable_local2img() {
  return &local2img_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TransMatrix::mutable_local2img() {
  // @@protoc_insertion_point(field_mutable_list:minieye.TransMatrix.local2img)
  return _internal_mutable_local2img();
}

// repeated float img2local = 4;
inline int TransMatrix::_internal_img2local_size() const {
  return img2local_.size();
}
inline int TransMatrix::img2local_size() const {
  return _internal_img2local_size();
}
inline void TransMatrix::clear_img2local() {
  img2local_.Clear();
}
inline float TransMatrix::_internal_img2local(int index) const {
  return img2local_.Get(index);
}
inline float TransMatrix::img2local(int index) const {
  // @@protoc_insertion_point(field_get:minieye.TransMatrix.img2local)
  return _internal_img2local(index);
}
inline void TransMatrix::set_img2local(int index, float value) {
  img2local_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.TransMatrix.img2local)
}
inline void TransMatrix::_internal_add_img2local(float value) {
  img2local_.Add(value);
}
inline void TransMatrix::add_img2local(float value) {
  _internal_add_img2local(value);
  // @@protoc_insertion_point(field_add:minieye.TransMatrix.img2local)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TransMatrix::_internal_img2local() const {
  return img2local_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TransMatrix::img2local() const {
  // @@protoc_insertion_point(field_list:minieye.TransMatrix.img2local)
  return _internal_img2local();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TransMatrix::_internal_mutable_img2local() {
  return &img2local_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TransMatrix::mutable_img2local() {
  // @@protoc_insertion_point(field_mutable_list:minieye.TransMatrix.img2local)
  return _internal_mutable_img2local();
}

// -------------------------------------------------------------------

// CameraParam

// float focal_u = 1;
inline void CameraParam::clear_focal_u() {
  focal_u_ = 0;
}
inline float CameraParam::_internal_focal_u() const {
  return focal_u_;
}
inline float CameraParam::focal_u() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.focal_u)
  return _internal_focal_u();
}
inline void CameraParam::_internal_set_focal_u(float value) {
  
  focal_u_ = value;
}
inline void CameraParam::set_focal_u(float value) {
  _internal_set_focal_u(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.focal_u)
}

// float focal_v = 2;
inline void CameraParam::clear_focal_v() {
  focal_v_ = 0;
}
inline float CameraParam::_internal_focal_v() const {
  return focal_v_;
}
inline float CameraParam::focal_v() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.focal_v)
  return _internal_focal_v();
}
inline void CameraParam::_internal_set_focal_v(float value) {
  
  focal_v_ = value;
}
inline void CameraParam::set_focal_v(float value) {
  _internal_set_focal_v(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.focal_v)
}

// float cu = 3;
inline void CameraParam::clear_cu() {
  cu_ = 0;
}
inline float CameraParam::_internal_cu() const {
  return cu_;
}
inline float CameraParam::cu() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.cu)
  return _internal_cu();
}
inline void CameraParam::_internal_set_cu(float value) {
  
  cu_ = value;
}
inline void CameraParam::set_cu(float value) {
  _internal_set_cu(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.cu)
}

// float cv = 4;
inline void CameraParam::clear_cv() {
  cv_ = 0;
}
inline float CameraParam::_internal_cv() const {
  return cv_;
}
inline float CameraParam::cv() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.cv)
  return _internal_cv();
}
inline void CameraParam::_internal_set_cv(float value) {
  
  cv_ = value;
}
inline void CameraParam::set_cv(float value) {
  _internal_set_cv(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.cv)
}

// repeated float pos = 5;
inline int CameraParam::_internal_pos_size() const {
  return pos_.size();
}
inline int CameraParam::pos_size() const {
  return _internal_pos_size();
}
inline void CameraParam::clear_pos() {
  pos_.Clear();
}
inline float CameraParam::_internal_pos(int index) const {
  return pos_.Get(index);
}
inline float CameraParam::pos(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.pos)
  return _internal_pos(index);
}
inline void CameraParam::set_pos(int index, float value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.pos)
}
inline void CameraParam::_internal_add_pos(float value) {
  pos_.Add(value);
}
inline void CameraParam::add_pos(float value) {
  _internal_add_pos(value);
  // @@protoc_insertion_point(field_add:minieye.CameraParam.pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraParam::_internal_pos() const {
  return pos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraParam::pos() const {
  // @@protoc_insertion_point(field_list:minieye.CameraParam.pos)
  return _internal_pos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraParam::_internal_mutable_pos() {
  return &pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraParam::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraParam.pos)
  return _internal_mutable_pos();
}

// float pitch = 6;
inline void CameraParam::clear_pitch() {
  pitch_ = 0;
}
inline float CameraParam::_internal_pitch() const {
  return pitch_;
}
inline float CameraParam::pitch() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.pitch)
  return _internal_pitch();
}
inline void CameraParam::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void CameraParam::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.pitch)
}

// float yaw = 7;
inline void CameraParam::clear_yaw() {
  yaw_ = 0;
}
inline float CameraParam::_internal_yaw() const {
  return yaw_;
}
inline float CameraParam::yaw() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.yaw)
  return _internal_yaw();
}
inline void CameraParam::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void CameraParam::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.yaw)
}

// float roll = 8;
inline void CameraParam::clear_roll() {
  roll_ = 0;
}
inline float CameraParam::_internal_roll() const {
  return roll_;
}
inline float CameraParam::roll() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.roll)
  return _internal_roll();
}
inline void CameraParam::_internal_set_roll(float value) {
  
  roll_ = value;
}
inline void CameraParam::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.roll)
}

// float fov = 9;
inline void CameraParam::clear_fov() {
  fov_ = 0;
}
inline float CameraParam::_internal_fov() const {
  return fov_;
}
inline float CameraParam::fov() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.fov)
  return _internal_fov();
}
inline void CameraParam::_internal_set_fov(float value) {
  
  fov_ = value;
}
inline void CameraParam::set_fov(float value) {
  _internal_set_fov(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.fov)
}

// int32 image_format = 10;
inline void CameraParam::clear_image_format() {
  image_format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParam::_internal_image_format() const {
  return image_format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParam::image_format() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.image_format)
  return _internal_image_format();
}
inline void CameraParam::_internal_set_image_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_format_ = value;
}
inline void CameraParam::set_image_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_format(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.image_format)
}

// string isp_ver = 11;
inline void CameraParam::clear_isp_ver() {
  isp_ver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CameraParam::isp_ver() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.isp_ver)
  return _internal_isp_ver();
}
inline void CameraParam::set_isp_ver(const std::string& value) {
  _internal_set_isp_ver(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.isp_ver)
}
inline std::string* CameraParam::mutable_isp_ver() {
  // @@protoc_insertion_point(field_mutable:minieye.CameraParam.isp_ver)
  return _internal_mutable_isp_ver();
}
inline const std::string& CameraParam::_internal_isp_ver() const {
  return isp_ver_.Get();
}
inline void CameraParam::_internal_set_isp_ver(const std::string& value) {
  
  isp_ver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CameraParam::set_isp_ver(std::string&& value) {
  
  isp_ver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minieye.CameraParam.isp_ver)
}
inline void CameraParam::set_isp_ver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  isp_ver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minieye.CameraParam.isp_ver)
}
inline void CameraParam::set_isp_ver(const char* value,
    size_t size) {
  
  isp_ver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minieye.CameraParam.isp_ver)
}
inline std::string* CameraParam::_internal_mutable_isp_ver() {
  
  return isp_ver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CameraParam::release_isp_ver() {
  // @@protoc_insertion_point(field_release:minieye.CameraParam.isp_ver)
  return isp_ver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraParam::set_allocated_isp_ver(std::string* isp_ver) {
  if (isp_ver != nullptr) {
    
  } else {
    
  }
  isp_ver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), isp_ver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minieye.CameraParam.isp_ver)
}
inline std::string* CameraParam::unsafe_arena_release_isp_ver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minieye.CameraParam.isp_ver)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return isp_ver_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CameraParam::unsafe_arena_set_allocated_isp_ver(
    std::string* isp_ver) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (isp_ver != nullptr) {
    
  } else {
    
  }
  isp_ver_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      isp_ver, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.CameraParam.isp_ver)
}

// int32 install_direction = 12;
inline void CameraParam::clear_install_direction() {
  install_direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParam::_internal_install_direction() const {
  return install_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParam::install_direction() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.install_direction)
  return _internal_install_direction();
}
inline void CameraParam::_internal_set_install_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  install_direction_ = value;
}
inline void CameraParam::set_install_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_install_direction(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.install_direction)
}

// .minieye.TransMatrix trans_mtx = 13;
inline bool CameraParam::_internal_has_trans_mtx() const {
  return this != internal_default_instance() && trans_mtx_ != nullptr;
}
inline bool CameraParam::has_trans_mtx() const {
  return _internal_has_trans_mtx();
}
inline void CameraParam::clear_trans_mtx() {
  if (GetArena() == nullptr && trans_mtx_ != nullptr) {
    delete trans_mtx_;
  }
  trans_mtx_ = nullptr;
}
inline const ::minieye::TransMatrix& CameraParam::_internal_trans_mtx() const {
  const ::minieye::TransMatrix* p = trans_mtx_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::TransMatrix*>(
      &::minieye::_TransMatrix_default_instance_);
}
inline const ::minieye::TransMatrix& CameraParam::trans_mtx() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.trans_mtx)
  return _internal_trans_mtx();
}
inline void CameraParam::unsafe_arena_set_allocated_trans_mtx(
    ::minieye::TransMatrix* trans_mtx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trans_mtx_);
  }
  trans_mtx_ = trans_mtx;
  if (trans_mtx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.CameraParam.trans_mtx)
}
inline ::minieye::TransMatrix* CameraParam::release_trans_mtx() {
  auto temp = unsafe_arena_release_trans_mtx();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::TransMatrix* CameraParam::unsafe_arena_release_trans_mtx() {
  // @@protoc_insertion_point(field_release:minieye.CameraParam.trans_mtx)
  
  ::minieye::TransMatrix* temp = trans_mtx_;
  trans_mtx_ = nullptr;
  return temp;
}
inline ::minieye::TransMatrix* CameraParam::_internal_mutable_trans_mtx() {
  
  if (trans_mtx_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::TransMatrix>(GetArena());
    trans_mtx_ = p;
  }
  return trans_mtx_;
}
inline ::minieye::TransMatrix* CameraParam::mutable_trans_mtx() {
  // @@protoc_insertion_point(field_mutable:minieye.CameraParam.trans_mtx)
  return _internal_mutable_trans_mtx();
}
inline void CameraParam::set_allocated_trans_mtx(::minieye::TransMatrix* trans_mtx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trans_mtx_;
  }
  if (trans_mtx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trans_mtx);
    if (message_arena != submessage_arena) {
      trans_mtx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trans_mtx, submessage_arena);
    }
    
  } else {
    
  }
  trans_mtx_ = trans_mtx;
  // @@protoc_insertion_point(field_set_allocated:minieye.CameraParam.trans_mtx)
}

// .minieye.ProjectionModel prj_model = 14;
inline void CameraParam::clear_prj_model() {
  prj_model_ = 0;
}
inline ::minieye::ProjectionModel CameraParam::_internal_prj_model() const {
  return static_cast< ::minieye::ProjectionModel >(prj_model_);
}
inline ::minieye::ProjectionModel CameraParam::prj_model() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.prj_model)
  return _internal_prj_model();
}
inline void CameraParam::_internal_set_prj_model(::minieye::ProjectionModel value) {
  
  prj_model_ = value;
}
inline void CameraParam::set_prj_model(::minieye::ProjectionModel value) {
  _internal_set_prj_model(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.prj_model)
}

// uint32 image_width = 15;
inline void CameraParam::clear_image_width() {
  image_width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraParam::_internal_image_width() const {
  return image_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraParam::image_width() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.image_width)
  return _internal_image_width();
}
inline void CameraParam::_internal_set_image_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  image_width_ = value;
}
inline void CameraParam::set_image_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_image_width(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.image_width)
}

// uint32 image_height = 16;
inline void CameraParam::clear_image_height() {
  image_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraParam::_internal_image_height() const {
  return image_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraParam::image_height() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.image_height)
  return _internal_image_height();
}
inline void CameraParam::_internal_set_image_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  image_height_ = value;
}
inline void CameraParam::set_image_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_image_height(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.image_height)
}

// repeated double distort_coeffs = 17;
inline int CameraParam::_internal_distort_coeffs_size() const {
  return distort_coeffs_.size();
}
inline int CameraParam::distort_coeffs_size() const {
  return _internal_distort_coeffs_size();
}
inline void CameraParam::clear_distort_coeffs() {
  distort_coeffs_.Clear();
}
inline double CameraParam::_internal_distort_coeffs(int index) const {
  return distort_coeffs_.Get(index);
}
inline double CameraParam::distort_coeffs(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.distort_coeffs)
  return _internal_distort_coeffs(index);
}
inline void CameraParam::set_distort_coeffs(int index, double value) {
  distort_coeffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.distort_coeffs)
}
inline void CameraParam::_internal_add_distort_coeffs(double value) {
  distort_coeffs_.Add(value);
}
inline void CameraParam::add_distort_coeffs(double value) {
  _internal_add_distort_coeffs(value);
  // @@protoc_insertion_point(field_add:minieye.CameraParam.distort_coeffs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraParam::_internal_distort_coeffs() const {
  return distort_coeffs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraParam::distort_coeffs() const {
  // @@protoc_insertion_point(field_list:minieye.CameraParam.distort_coeffs)
  return _internal_distort_coeffs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraParam::_internal_mutable_distort_coeffs() {
  return &distort_coeffs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraParam::mutable_distort_coeffs() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraParam.distort_coeffs)
  return _internal_mutable_distort_coeffs();
}

// uint32 camera_id = 18;
inline void CameraParam::clear_camera_id() {
  camera_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraParam::_internal_camera_id() const {
  return camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraParam::camera_id() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.camera_id)
  return _internal_camera_id();
}
inline void CameraParam::_internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  camera_id_ = value;
}
inline void CameraParam::set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.camera_id)
}

// bool is_valid = 19;
inline void CameraParam::clear_is_valid() {
  is_valid_ = false;
}
inline bool CameraParam::_internal_is_valid() const {
  return is_valid_;
}
inline bool CameraParam::is_valid() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.is_valid)
  return _internal_is_valid();
}
inline void CameraParam::_internal_set_is_valid(bool value) {
  
  is_valid_ = value;
}
inline void CameraParam::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.is_valid)
}

// int32 calib_method = 20;
inline void CameraParam::clear_calib_method() {
  calib_method_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParam::_internal_calib_method() const {
  return calib_method_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraParam::calib_method() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.calib_method)
  return _internal_calib_method();
}
inline void CameraParam::_internal_set_calib_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  calib_method_ = value;
}
inline void CameraParam::set_calib_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_calib_method(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.calib_method)
}

// uint64 calib_timestamp = 21;
inline void CameraParam::clear_calib_timestamp() {
  calib_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraParam::_internal_calib_timestamp() const {
  return calib_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraParam::calib_timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.CameraParam.calib_timestamp)
  return _internal_calib_timestamp();
}
inline void CameraParam::_internal_set_calib_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  calib_timestamp_ = value;
}
inline void CameraParam::set_calib_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_calib_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.CameraParam.calib_timestamp)
}

// -------------------------------------------------------------------

// CameraEmbeddedInfo

// uint32 frame_count = 1;
inline void CameraEmbeddedInfo::clear_frame_count() {
  frame_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraEmbeddedInfo::_internal_frame_count() const {
  return frame_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraEmbeddedInfo::frame_count() const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.frame_count)
  return _internal_frame_count();
}
inline void CameraEmbeddedInfo::_internal_set_frame_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frame_count_ = value;
}
inline void CameraEmbeddedInfo::set_frame_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_count(value);
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.frame_count)
}

// uint32 expo_num = 2;
inline void CameraEmbeddedInfo::clear_expo_num() {
  expo_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraEmbeddedInfo::_internal_expo_num() const {
  return expo_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraEmbeddedInfo::expo_num() const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.expo_num)
  return _internal_expo_num();
}
inline void CameraEmbeddedInfo::_internal_set_expo_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expo_num_ = value;
}
inline void CameraEmbeddedInfo::set_expo_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expo_num(value);
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.expo_num)
}

// repeated uint32 expo_ratio = 3;
inline int CameraEmbeddedInfo::_internal_expo_ratio_size() const {
  return expo_ratio_.size();
}
inline int CameraEmbeddedInfo::expo_ratio_size() const {
  return _internal_expo_ratio_size();
}
inline void CameraEmbeddedInfo::clear_expo_ratio() {
  expo_ratio_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraEmbeddedInfo::_internal_expo_ratio(int index) const {
  return expo_ratio_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraEmbeddedInfo::expo_ratio(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.expo_ratio)
  return _internal_expo_ratio(index);
}
inline void CameraEmbeddedInfo::set_expo_ratio(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  expo_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.expo_ratio)
}
inline void CameraEmbeddedInfo::_internal_add_expo_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  expo_ratio_.Add(value);
}
inline void CameraEmbeddedInfo::add_expo_ratio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_expo_ratio(value);
  // @@protoc_insertion_point(field_add:minieye.CameraEmbeddedInfo.expo_ratio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CameraEmbeddedInfo::_internal_expo_ratio() const {
  return expo_ratio_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CameraEmbeddedInfo::expo_ratio() const {
  // @@protoc_insertion_point(field_list:minieye.CameraEmbeddedInfo.expo_ratio)
  return _internal_expo_ratio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CameraEmbeddedInfo::_internal_mutable_expo_ratio() {
  return &expo_ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CameraEmbeddedInfo::mutable_expo_ratio() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraEmbeddedInfo.expo_ratio)
  return _internal_mutable_expo_ratio();
}

// repeated uint32 shutter_time = 4;
inline int CameraEmbeddedInfo::_internal_shutter_time_size() const {
  return shutter_time_.size();
}
inline int CameraEmbeddedInfo::shutter_time_size() const {
  return _internal_shutter_time_size();
}
inline void CameraEmbeddedInfo::clear_shutter_time() {
  shutter_time_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraEmbeddedInfo::_internal_shutter_time(int index) const {
  return shutter_time_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraEmbeddedInfo::shutter_time(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.shutter_time)
  return _internal_shutter_time(index);
}
inline void CameraEmbeddedInfo::set_shutter_time(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shutter_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.shutter_time)
}
inline void CameraEmbeddedInfo::_internal_add_shutter_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shutter_time_.Add(value);
}
inline void CameraEmbeddedInfo::add_shutter_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_shutter_time(value);
  // @@protoc_insertion_point(field_add:minieye.CameraEmbeddedInfo.shutter_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CameraEmbeddedInfo::_internal_shutter_time() const {
  return shutter_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CameraEmbeddedInfo::shutter_time() const {
  // @@protoc_insertion_point(field_list:minieye.CameraEmbeddedInfo.shutter_time)
  return _internal_shutter_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CameraEmbeddedInfo::_internal_mutable_shutter_time() {
  return &shutter_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CameraEmbeddedInfo::mutable_shutter_time() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraEmbeddedInfo.shutter_time)
  return _internal_mutable_shutter_time();
}

// repeated float sensor_a_gain = 5;
inline int CameraEmbeddedInfo::_internal_sensor_a_gain_size() const {
  return sensor_a_gain_.size();
}
inline int CameraEmbeddedInfo::sensor_a_gain_size() const {
  return _internal_sensor_a_gain_size();
}
inline void CameraEmbeddedInfo::clear_sensor_a_gain() {
  sensor_a_gain_.Clear();
}
inline float CameraEmbeddedInfo::_internal_sensor_a_gain(int index) const {
  return sensor_a_gain_.Get(index);
}
inline float CameraEmbeddedInfo::sensor_a_gain(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.sensor_a_gain)
  return _internal_sensor_a_gain(index);
}
inline void CameraEmbeddedInfo::set_sensor_a_gain(int index, float value) {
  sensor_a_gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.sensor_a_gain)
}
inline void CameraEmbeddedInfo::_internal_add_sensor_a_gain(float value) {
  sensor_a_gain_.Add(value);
}
inline void CameraEmbeddedInfo::add_sensor_a_gain(float value) {
  _internal_add_sensor_a_gain(value);
  // @@protoc_insertion_point(field_add:minieye.CameraEmbeddedInfo.sensor_a_gain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraEmbeddedInfo::_internal_sensor_a_gain() const {
  return sensor_a_gain_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraEmbeddedInfo::sensor_a_gain() const {
  // @@protoc_insertion_point(field_list:minieye.CameraEmbeddedInfo.sensor_a_gain)
  return _internal_sensor_a_gain();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraEmbeddedInfo::_internal_mutable_sensor_a_gain() {
  return &sensor_a_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraEmbeddedInfo::mutable_sensor_a_gain() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraEmbeddedInfo.sensor_a_gain)
  return _internal_mutable_sensor_a_gain();
}

// repeated float sensor_d_gain = 6;
inline int CameraEmbeddedInfo::_internal_sensor_d_gain_size() const {
  return sensor_d_gain_.size();
}
inline int CameraEmbeddedInfo::sensor_d_gain_size() const {
  return _internal_sensor_d_gain_size();
}
inline void CameraEmbeddedInfo::clear_sensor_d_gain() {
  sensor_d_gain_.Clear();
}
inline float CameraEmbeddedInfo::_internal_sensor_d_gain(int index) const {
  return sensor_d_gain_.Get(index);
}
inline float CameraEmbeddedInfo::sensor_d_gain(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.sensor_d_gain)
  return _internal_sensor_d_gain(index);
}
inline void CameraEmbeddedInfo::set_sensor_d_gain(int index, float value) {
  sensor_d_gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.sensor_d_gain)
}
inline void CameraEmbeddedInfo::_internal_add_sensor_d_gain(float value) {
  sensor_d_gain_.Add(value);
}
inline void CameraEmbeddedInfo::add_sensor_d_gain(float value) {
  _internal_add_sensor_d_gain(value);
  // @@protoc_insertion_point(field_add:minieye.CameraEmbeddedInfo.sensor_d_gain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraEmbeddedInfo::_internal_sensor_d_gain() const {
  return sensor_d_gain_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CameraEmbeddedInfo::sensor_d_gain() const {
  // @@protoc_insertion_point(field_list:minieye.CameraEmbeddedInfo.sensor_d_gain)
  return _internal_sensor_d_gain();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraEmbeddedInfo::_internal_mutable_sensor_d_gain() {
  return &sensor_d_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CameraEmbeddedInfo::mutable_sensor_d_gain() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CameraEmbeddedInfo.sensor_d_gain)
  return _internal_mutable_sensor_d_gain();
}

// .google.protobuf.Timestamp exp_start_camera_time_stamp = 7;
inline bool CameraEmbeddedInfo::_internal_has_exp_start_camera_time_stamp() const {
  return this != internal_default_instance() && exp_start_camera_time_stamp_ != nullptr;
}
inline bool CameraEmbeddedInfo::has_exp_start_camera_time_stamp() const {
  return _internal_has_exp_start_camera_time_stamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CameraEmbeddedInfo::_internal_exp_start_camera_time_stamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = exp_start_camera_time_stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CameraEmbeddedInfo::exp_start_camera_time_stamp() const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.exp_start_camera_time_stamp)
  return _internal_exp_start_camera_time_stamp();
}
inline void CameraEmbeddedInfo::unsafe_arena_set_allocated_exp_start_camera_time_stamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* exp_start_camera_time_stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exp_start_camera_time_stamp_);
  }
  exp_start_camera_time_stamp_ = exp_start_camera_time_stamp;
  if (exp_start_camera_time_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.CameraEmbeddedInfo.exp_start_camera_time_stamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraEmbeddedInfo::release_exp_start_camera_time_stamp() {
  auto temp = unsafe_arena_release_exp_start_camera_time_stamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraEmbeddedInfo::unsafe_arena_release_exp_start_camera_time_stamp() {
  // @@protoc_insertion_point(field_release:minieye.CameraEmbeddedInfo.exp_start_camera_time_stamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = exp_start_camera_time_stamp_;
  exp_start_camera_time_stamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraEmbeddedInfo::_internal_mutable_exp_start_camera_time_stamp() {
  
  if (exp_start_camera_time_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    exp_start_camera_time_stamp_ = p;
  }
  return exp_start_camera_time_stamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraEmbeddedInfo::mutable_exp_start_camera_time_stamp() {
  // @@protoc_insertion_point(field_mutable:minieye.CameraEmbeddedInfo.exp_start_camera_time_stamp)
  return _internal_mutable_exp_start_camera_time_stamp();
}
inline void CameraEmbeddedInfo::set_allocated_exp_start_camera_time_stamp(PROTOBUF_NAMESPACE_ID::Timestamp* exp_start_camera_time_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exp_start_camera_time_stamp_);
  }
  if (exp_start_camera_time_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exp_start_camera_time_stamp)->GetArena();
    if (message_arena != submessage_arena) {
      exp_start_camera_time_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exp_start_camera_time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  exp_start_camera_time_stamp_ = exp_start_camera_time_stamp;
  // @@protoc_insertion_point(field_set_allocated:minieye.CameraEmbeddedInfo.exp_start_camera_time_stamp)
}

// .google.protobuf.Timestamp exp_end_camera_time_stamp = 8;
inline bool CameraEmbeddedInfo::_internal_has_exp_end_camera_time_stamp() const {
  return this != internal_default_instance() && exp_end_camera_time_stamp_ != nullptr;
}
inline bool CameraEmbeddedInfo::has_exp_end_camera_time_stamp() const {
  return _internal_has_exp_end_camera_time_stamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CameraEmbeddedInfo::_internal_exp_end_camera_time_stamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = exp_end_camera_time_stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CameraEmbeddedInfo::exp_end_camera_time_stamp() const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.exp_end_camera_time_stamp)
  return _internal_exp_end_camera_time_stamp();
}
inline void CameraEmbeddedInfo::unsafe_arena_set_allocated_exp_end_camera_time_stamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* exp_end_camera_time_stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exp_end_camera_time_stamp_);
  }
  exp_end_camera_time_stamp_ = exp_end_camera_time_stamp;
  if (exp_end_camera_time_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.CameraEmbeddedInfo.exp_end_camera_time_stamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraEmbeddedInfo::release_exp_end_camera_time_stamp() {
  auto temp = unsafe_arena_release_exp_end_camera_time_stamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraEmbeddedInfo::unsafe_arena_release_exp_end_camera_time_stamp() {
  // @@protoc_insertion_point(field_release:minieye.CameraEmbeddedInfo.exp_end_camera_time_stamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = exp_end_camera_time_stamp_;
  exp_end_camera_time_stamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraEmbeddedInfo::_internal_mutable_exp_end_camera_time_stamp() {
  
  if (exp_end_camera_time_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    exp_end_camera_time_stamp_ = p;
  }
  return exp_end_camera_time_stamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraEmbeddedInfo::mutable_exp_end_camera_time_stamp() {
  // @@protoc_insertion_point(field_mutable:minieye.CameraEmbeddedInfo.exp_end_camera_time_stamp)
  return _internal_mutable_exp_end_camera_time_stamp();
}
inline void CameraEmbeddedInfo::set_allocated_exp_end_camera_time_stamp(PROTOBUF_NAMESPACE_ID::Timestamp* exp_end_camera_time_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exp_end_camera_time_stamp_);
  }
  if (exp_end_camera_time_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exp_end_camera_time_stamp)->GetArena();
    if (message_arena != submessage_arena) {
      exp_end_camera_time_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exp_end_camera_time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  exp_end_camera_time_stamp_ = exp_end_camera_time_stamp;
  // @@protoc_insertion_point(field_set_allocated:minieye.CameraEmbeddedInfo.exp_end_camera_time_stamp)
}

// uint64 is_valid_bitmap = 64;
inline void CameraEmbeddedInfo::clear_is_valid_bitmap() {
  is_valid_bitmap_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraEmbeddedInfo::_internal_is_valid_bitmap() const {
  return is_valid_bitmap_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CameraEmbeddedInfo::is_valid_bitmap() const {
  // @@protoc_insertion_point(field_get:minieye.CameraEmbeddedInfo.is_valid_bitmap)
  return _internal_is_valid_bitmap();
}
inline void CameraEmbeddedInfo::_internal_set_is_valid_bitmap(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  is_valid_bitmap_ = value;
}
inline void CameraEmbeddedInfo::set_is_valid_bitmap(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_is_valid_bitmap(value);
  // @@protoc_insertion_point(field_set:minieye.CameraEmbeddedInfo.is_valid_bitmap)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minieye::ImageFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::ImageFormat>() {
  return ::minieye::ImageFormat_descriptor();
}
template <> struct is_proto_enum< ::minieye::CamDirect> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::CamDirect>() {
  return ::minieye::CamDirect_descriptor();
}
template <> struct is_proto_enum< ::minieye::CamFov> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::CamFov>() {
  return ::minieye::CamFov_descriptor();
}
template <> struct is_proto_enum< ::minieye::ProjectionModel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::ProjectionModel>() {
  return ::minieye::ProjectionModel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_camera_2eproto
