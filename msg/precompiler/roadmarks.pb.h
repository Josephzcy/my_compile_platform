// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roadmarks.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_roadmarks_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_roadmarks_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_roadmarks_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_roadmarks_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_roadmarks_2eproto;
namespace perception {
class KeyPt;
class KeyPtDefaultTypeInternal;
extern KeyPtDefaultTypeInternal _KeyPt_default_instance_;
class ObjContourPoints;
class ObjContourPointsDefaultTypeInternal;
extern ObjContourPointsDefaultTypeInternal _ObjContourPoints_default_instance_;
class Roadmarks;
class RoadmarksDefaultTypeInternal;
extern RoadmarksDefaultTypeInternal _Roadmarks_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::KeyPt* Arena::CreateMaybeMessage<::perception::KeyPt>(Arena*);
template<> ::perception::ObjContourPoints* Arena::CreateMaybeMessage<::perception::ObjContourPoints>(Arena*);
template<> ::perception::Roadmarks* Arena::CreateMaybeMessage<::perception::Roadmarks>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

enum PContourType : int {
  PLANE = 0,
  PBUMP = 1,
  PARROW = 2,
  PUNKNOWN = 3,
  PContourType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PContourType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PContourType_IsValid(int value);
constexpr PContourType PContourType_MIN = PLANE;
constexpr PContourType PContourType_MAX = PUNKNOWN;
constexpr int PContourType_ARRAYSIZE = PContourType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PContourType_descriptor();
template<typename T>
inline const std::string& PContourType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PContourType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PContourType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PContourType_descriptor(), enum_t_value);
}
inline bool PContourType_Parse(
    const std::string& name, PContourType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PContourType>(
    PContourType_descriptor(), name, value);
}
enum PObjCamNum : int {
  PLEFT = 0,
  PRIGHT = 1,
  PFRONT = 2,
  PREAR = 3,
  PObjCamNum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PObjCamNum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PObjCamNum_IsValid(int value);
constexpr PObjCamNum PObjCamNum_MIN = PLEFT;
constexpr PObjCamNum PObjCamNum_MAX = PREAR;
constexpr int PObjCamNum_ARRAYSIZE = PObjCamNum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PObjCamNum_descriptor();
template<typename T>
inline const std::string& PObjCamNum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PObjCamNum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PObjCamNum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PObjCamNum_descriptor(), enum_t_value);
}
inline bool PObjCamNum_Parse(
    const std::string& name, PObjCamNum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PObjCamNum>(
    PObjCamNum_descriptor(), name, value);
}
// ===================================================================

class KeyPt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.KeyPt) */ {
 public:
  inline KeyPt() : KeyPt(nullptr) {};
  virtual ~KeyPt();

  KeyPt(const KeyPt& from);
  KeyPt(KeyPt&& from) noexcept
    : KeyPt() {
    *this = ::std::move(from);
  }

  inline KeyPt& operator=(const KeyPt& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyPt& operator=(KeyPt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyPt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyPt* internal_default_instance() {
    return reinterpret_cast<const KeyPt*>(
               &_KeyPt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyPt& a, KeyPt& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyPt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyPt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyPt* New() const final {
    return CreateMaybeMessage<KeyPt>(nullptr);
  }

  KeyPt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyPt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyPt& from);
  void MergeFrom(const KeyPt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyPt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.KeyPt";
  }
  protected:
  explicit KeyPt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roadmarks_2eproto);
    return ::descriptor_table_roadmarks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgPtFieldNumber = 1,
    kVehPtFieldNumber = 2,
    kOdomPtFieldNumber = 3,
  };
  // .perception.common.Point2D img_pt = 1;
  bool has_img_pt() const;
  private:
  bool _internal_has_img_pt() const;
  public:
  void clear_img_pt();
  const ::perception::common::Point2D& img_pt() const;
  ::perception::common::Point2D* release_img_pt();
  ::perception::common::Point2D* mutable_img_pt();
  void set_allocated_img_pt(::perception::common::Point2D* img_pt);
  private:
  const ::perception::common::Point2D& _internal_img_pt() const;
  ::perception::common::Point2D* _internal_mutable_img_pt();
  public:
  void unsafe_arena_set_allocated_img_pt(
      ::perception::common::Point2D* img_pt);
  ::perception::common::Point2D* unsafe_arena_release_img_pt();

  // .perception.common.Point3D veh_pt = 2;
  bool has_veh_pt() const;
  private:
  bool _internal_has_veh_pt() const;
  public:
  void clear_veh_pt();
  const ::perception::common::Point3D& veh_pt() const;
  ::perception::common::Point3D* release_veh_pt();
  ::perception::common::Point3D* mutable_veh_pt();
  void set_allocated_veh_pt(::perception::common::Point3D* veh_pt);
  private:
  const ::perception::common::Point3D& _internal_veh_pt() const;
  ::perception::common::Point3D* _internal_mutable_veh_pt();
  public:
  void unsafe_arena_set_allocated_veh_pt(
      ::perception::common::Point3D* veh_pt);
  ::perception::common::Point3D* unsafe_arena_release_veh_pt();

  // .perception.common.Point3D odom_pt = 3;
  bool has_odom_pt() const;
  private:
  bool _internal_has_odom_pt() const;
  public:
  void clear_odom_pt();
  const ::perception::common::Point3D& odom_pt() const;
  ::perception::common::Point3D* release_odom_pt();
  ::perception::common::Point3D* mutable_odom_pt();
  void set_allocated_odom_pt(::perception::common::Point3D* odom_pt);
  private:
  const ::perception::common::Point3D& _internal_odom_pt() const;
  ::perception::common::Point3D* _internal_mutable_odom_pt();
  public:
  void unsafe_arena_set_allocated_odom_pt(
      ::perception::common::Point3D* odom_pt);
  ::perception::common::Point3D* unsafe_arena_release_odom_pt();

  // @@protoc_insertion_point(class_scope:perception.KeyPt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::Point2D* img_pt_;
  ::perception::common::Point3D* veh_pt_;
  ::perception::common::Point3D* odom_pt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roadmarks_2eproto;
};
// -------------------------------------------------------------------

class ObjContourPoints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.ObjContourPoints) */ {
 public:
  inline ObjContourPoints() : ObjContourPoints(nullptr) {};
  virtual ~ObjContourPoints();

  ObjContourPoints(const ObjContourPoints& from);
  ObjContourPoints(ObjContourPoints&& from) noexcept
    : ObjContourPoints() {
    *this = ::std::move(from);
  }

  inline ObjContourPoints& operator=(const ObjContourPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjContourPoints& operator=(ObjContourPoints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjContourPoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjContourPoints* internal_default_instance() {
    return reinterpret_cast<const ObjContourPoints*>(
               &_ObjContourPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjContourPoints& a, ObjContourPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjContourPoints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjContourPoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjContourPoints* New() const final {
    return CreateMaybeMessage<ObjContourPoints>(nullptr);
  }

  ObjContourPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjContourPoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjContourPoints& from);
  void MergeFrom(const ObjContourPoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjContourPoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.ObjContourPoints";
  }
  protected:
  explicit ObjContourPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roadmarks_2eproto);
    return ::descriptor_table_roadmarks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyPtsFieldNumber = 4,
    kIdFieldNumber = 1,
    kContourTypeFieldNumber = 2,
    kObjCamNumFieldNumber = 3,
  };
  // repeated .perception.KeyPt key_pts = 4;
  int key_pts_size() const;
  private:
  int _internal_key_pts_size() const;
  public:
  void clear_key_pts();
  ::perception::KeyPt* mutable_key_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::KeyPt >*
      mutable_key_pts();
  private:
  const ::perception::KeyPt& _internal_key_pts(int index) const;
  ::perception::KeyPt* _internal_add_key_pts();
  public:
  const ::perception::KeyPt& key_pts(int index) const;
  ::perception::KeyPt* add_key_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::KeyPt >&
      key_pts() const;

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .perception.PContourType contour_type = 2;
  void clear_contour_type();
  ::perception::PContourType contour_type() const;
  void set_contour_type(::perception::PContourType value);
  private:
  ::perception::PContourType _internal_contour_type() const;
  void _internal_set_contour_type(::perception::PContourType value);
  public:

  // .perception.PObjCamNum obj_cam_num = 3;
  void clear_obj_cam_num();
  ::perception::PObjCamNum obj_cam_num() const;
  void set_obj_cam_num(::perception::PObjCamNum value);
  private:
  ::perception::PObjCamNum _internal_obj_cam_num() const;
  void _internal_set_obj_cam_num(::perception::PObjCamNum value);
  public:

  // @@protoc_insertion_point(class_scope:perception.ObjContourPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::KeyPt > key_pts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int contour_type_;
  int obj_cam_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roadmarks_2eproto;
};
// -------------------------------------------------------------------

class Roadmarks PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Roadmarks) */ {
 public:
  inline Roadmarks() : Roadmarks(nullptr) {};
  virtual ~Roadmarks();

  Roadmarks(const Roadmarks& from);
  Roadmarks(Roadmarks&& from) noexcept
    : Roadmarks() {
    *this = ::std::move(from);
  }

  inline Roadmarks& operator=(const Roadmarks& from) {
    CopyFrom(from);
    return *this;
  }
  inline Roadmarks& operator=(Roadmarks&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Roadmarks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Roadmarks* internal_default_instance() {
    return reinterpret_cast<const Roadmarks*>(
               &_Roadmarks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Roadmarks& a, Roadmarks& b) {
    a.Swap(&b);
  }
  inline void Swap(Roadmarks* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Roadmarks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Roadmarks* New() const final {
    return CreateMaybeMessage<Roadmarks>(nullptr);
  }

  Roadmarks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Roadmarks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Roadmarks& from);
  void MergeFrom(const Roadmarks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Roadmarks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Roadmarks";
  }
  protected:
  explicit Roadmarks(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_roadmarks_2eproto);
    return ::descriptor_table_roadmarks_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContoursFieldNumber = 4,
    kFrameIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // repeated .perception.ObjContourPoints contours = 4;
  int contours_size() const;
  private:
  int _internal_contours_size() const;
  public:
  void clear_contours();
  ::perception::ObjContourPoints* mutable_contours(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ObjContourPoints >*
      mutable_contours();
  private:
  const ::perception::ObjContourPoints& _internal_contours(int index) const;
  ::perception::ObjContourPoints* _internal_add_contours();
  public:
  const ::perception::ObjContourPoints& contours(int index) const;
  ::perception::ObjContourPoints* add_contours();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ObjContourPoints >&
      contours() const;

  // uint64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Roadmarks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ObjContourPoints > contours_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_roadmarks_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyPt

// .perception.common.Point2D img_pt = 1;
inline bool KeyPt::_internal_has_img_pt() const {
  return this != internal_default_instance() && img_pt_ != nullptr;
}
inline bool KeyPt::has_img_pt() const {
  return _internal_has_img_pt();
}
inline const ::perception::common::Point2D& KeyPt::_internal_img_pt() const {
  const ::perception::common::Point2D* p = img_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point2D*>(
      &::perception::common::_Point2D_default_instance_);
}
inline const ::perception::common::Point2D& KeyPt::img_pt() const {
  // @@protoc_insertion_point(field_get:perception.KeyPt.img_pt)
  return _internal_img_pt();
}
inline void KeyPt::unsafe_arena_set_allocated_img_pt(
    ::perception::common::Point2D* img_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(img_pt_);
  }
  img_pt_ = img_pt;
  if (img_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.KeyPt.img_pt)
}
inline ::perception::common::Point2D* KeyPt::release_img_pt() {
  auto temp = unsafe_arena_release_img_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point2D* KeyPt::unsafe_arena_release_img_pt() {
  // @@protoc_insertion_point(field_release:perception.KeyPt.img_pt)
  
  ::perception::common::Point2D* temp = img_pt_;
  img_pt_ = nullptr;
  return temp;
}
inline ::perception::common::Point2D* KeyPt::_internal_mutable_img_pt() {
  
  if (img_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point2D>(GetArena());
    img_pt_ = p;
  }
  return img_pt_;
}
inline ::perception::common::Point2D* KeyPt::mutable_img_pt() {
  // @@protoc_insertion_point(field_mutable:perception.KeyPt.img_pt)
  return _internal_mutable_img_pt();
}
inline void KeyPt::set_allocated_img_pt(::perception::common::Point2D* img_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(img_pt_);
  }
  if (img_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(img_pt)->GetArena();
    if (message_arena != submessage_arena) {
      img_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, img_pt, submessage_arena);
    }
    
  } else {
    
  }
  img_pt_ = img_pt;
  // @@protoc_insertion_point(field_set_allocated:perception.KeyPt.img_pt)
}

// .perception.common.Point3D veh_pt = 2;
inline bool KeyPt::_internal_has_veh_pt() const {
  return this != internal_default_instance() && veh_pt_ != nullptr;
}
inline bool KeyPt::has_veh_pt() const {
  return _internal_has_veh_pt();
}
inline const ::perception::common::Point3D& KeyPt::_internal_veh_pt() const {
  const ::perception::common::Point3D* p = veh_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& KeyPt::veh_pt() const {
  // @@protoc_insertion_point(field_get:perception.KeyPt.veh_pt)
  return _internal_veh_pt();
}
inline void KeyPt::unsafe_arena_set_allocated_veh_pt(
    ::perception::common::Point3D* veh_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(veh_pt_);
  }
  veh_pt_ = veh_pt;
  if (veh_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.KeyPt.veh_pt)
}
inline ::perception::common::Point3D* KeyPt::release_veh_pt() {
  auto temp = unsafe_arena_release_veh_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* KeyPt::unsafe_arena_release_veh_pt() {
  // @@protoc_insertion_point(field_release:perception.KeyPt.veh_pt)
  
  ::perception::common::Point3D* temp = veh_pt_;
  veh_pt_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* KeyPt::_internal_mutable_veh_pt() {
  
  if (veh_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    veh_pt_ = p;
  }
  return veh_pt_;
}
inline ::perception::common::Point3D* KeyPt::mutable_veh_pt() {
  // @@protoc_insertion_point(field_mutable:perception.KeyPt.veh_pt)
  return _internal_mutable_veh_pt();
}
inline void KeyPt::set_allocated_veh_pt(::perception::common::Point3D* veh_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(veh_pt_);
  }
  if (veh_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(veh_pt)->GetArena();
    if (message_arena != submessage_arena) {
      veh_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, veh_pt, submessage_arena);
    }
    
  } else {
    
  }
  veh_pt_ = veh_pt;
  // @@protoc_insertion_point(field_set_allocated:perception.KeyPt.veh_pt)
}

// .perception.common.Point3D odom_pt = 3;
inline bool KeyPt::_internal_has_odom_pt() const {
  return this != internal_default_instance() && odom_pt_ != nullptr;
}
inline bool KeyPt::has_odom_pt() const {
  return _internal_has_odom_pt();
}
inline const ::perception::common::Point3D& KeyPt::_internal_odom_pt() const {
  const ::perception::common::Point3D* p = odom_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& KeyPt::odom_pt() const {
  // @@protoc_insertion_point(field_get:perception.KeyPt.odom_pt)
  return _internal_odom_pt();
}
inline void KeyPt::unsafe_arena_set_allocated_odom_pt(
    ::perception::common::Point3D* odom_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odom_pt_);
  }
  odom_pt_ = odom_pt;
  if (odom_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.KeyPt.odom_pt)
}
inline ::perception::common::Point3D* KeyPt::release_odom_pt() {
  auto temp = unsafe_arena_release_odom_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* KeyPt::unsafe_arena_release_odom_pt() {
  // @@protoc_insertion_point(field_release:perception.KeyPt.odom_pt)
  
  ::perception::common::Point3D* temp = odom_pt_;
  odom_pt_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* KeyPt::_internal_mutable_odom_pt() {
  
  if (odom_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    odom_pt_ = p;
  }
  return odom_pt_;
}
inline ::perception::common::Point3D* KeyPt::mutable_odom_pt() {
  // @@protoc_insertion_point(field_mutable:perception.KeyPt.odom_pt)
  return _internal_mutable_odom_pt();
}
inline void KeyPt::set_allocated_odom_pt(::perception::common::Point3D* odom_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(odom_pt_);
  }
  if (odom_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odom_pt)->GetArena();
    if (message_arena != submessage_arena) {
      odom_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odom_pt, submessage_arena);
    }
    
  } else {
    
  }
  odom_pt_ = odom_pt;
  // @@protoc_insertion_point(field_set_allocated:perception.KeyPt.odom_pt)
}

// -------------------------------------------------------------------

// ObjContourPoints

// uint32 id = 1;
inline void ObjContourPoints::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjContourPoints::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjContourPoints::id() const {
  // @@protoc_insertion_point(field_get:perception.ObjContourPoints.id)
  return _internal_id();
}
inline void ObjContourPoints::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ObjContourPoints::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perception.ObjContourPoints.id)
}

// .perception.PContourType contour_type = 2;
inline void ObjContourPoints::clear_contour_type() {
  contour_type_ = 0;
}
inline ::perception::PContourType ObjContourPoints::_internal_contour_type() const {
  return static_cast< ::perception::PContourType >(contour_type_);
}
inline ::perception::PContourType ObjContourPoints::contour_type() const {
  // @@protoc_insertion_point(field_get:perception.ObjContourPoints.contour_type)
  return _internal_contour_type();
}
inline void ObjContourPoints::_internal_set_contour_type(::perception::PContourType value) {
  
  contour_type_ = value;
}
inline void ObjContourPoints::set_contour_type(::perception::PContourType value) {
  _internal_set_contour_type(value);
  // @@protoc_insertion_point(field_set:perception.ObjContourPoints.contour_type)
}

// .perception.PObjCamNum obj_cam_num = 3;
inline void ObjContourPoints::clear_obj_cam_num() {
  obj_cam_num_ = 0;
}
inline ::perception::PObjCamNum ObjContourPoints::_internal_obj_cam_num() const {
  return static_cast< ::perception::PObjCamNum >(obj_cam_num_);
}
inline ::perception::PObjCamNum ObjContourPoints::obj_cam_num() const {
  // @@protoc_insertion_point(field_get:perception.ObjContourPoints.obj_cam_num)
  return _internal_obj_cam_num();
}
inline void ObjContourPoints::_internal_set_obj_cam_num(::perception::PObjCamNum value) {
  
  obj_cam_num_ = value;
}
inline void ObjContourPoints::set_obj_cam_num(::perception::PObjCamNum value) {
  _internal_set_obj_cam_num(value);
  // @@protoc_insertion_point(field_set:perception.ObjContourPoints.obj_cam_num)
}

// repeated .perception.KeyPt key_pts = 4;
inline int ObjContourPoints::_internal_key_pts_size() const {
  return key_pts_.size();
}
inline int ObjContourPoints::key_pts_size() const {
  return _internal_key_pts_size();
}
inline void ObjContourPoints::clear_key_pts() {
  key_pts_.Clear();
}
inline ::perception::KeyPt* ObjContourPoints::mutable_key_pts(int index) {
  // @@protoc_insertion_point(field_mutable:perception.ObjContourPoints.key_pts)
  return key_pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::KeyPt >*
ObjContourPoints::mutable_key_pts() {
  // @@protoc_insertion_point(field_mutable_list:perception.ObjContourPoints.key_pts)
  return &key_pts_;
}
inline const ::perception::KeyPt& ObjContourPoints::_internal_key_pts(int index) const {
  return key_pts_.Get(index);
}
inline const ::perception::KeyPt& ObjContourPoints::key_pts(int index) const {
  // @@protoc_insertion_point(field_get:perception.ObjContourPoints.key_pts)
  return _internal_key_pts(index);
}
inline ::perception::KeyPt* ObjContourPoints::_internal_add_key_pts() {
  return key_pts_.Add();
}
inline ::perception::KeyPt* ObjContourPoints::add_key_pts() {
  // @@protoc_insertion_point(field_add:perception.ObjContourPoints.key_pts)
  return _internal_add_key_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::KeyPt >&
ObjContourPoints::key_pts() const {
  // @@protoc_insertion_point(field_list:perception.ObjContourPoints.key_pts)
  return key_pts_;
}

// -------------------------------------------------------------------

// Roadmarks

// uint64 frame_id = 1;
inline void Roadmarks::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Roadmarks::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Roadmarks::frame_id() const {
  // @@protoc_insertion_point(field_get:perception.Roadmarks.frame_id)
  return _internal_frame_id();
}
inline void Roadmarks::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void Roadmarks::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:perception.Roadmarks.frame_id)
}

// uint64 timestamp = 2;
inline void Roadmarks::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Roadmarks::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Roadmarks::timestamp() const {
  // @@protoc_insertion_point(field_get:perception.Roadmarks.timestamp)
  return _internal_timestamp();
}
inline void Roadmarks::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Roadmarks::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perception.Roadmarks.timestamp)
}

// uint64 tick = 3;
inline void Roadmarks::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Roadmarks::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Roadmarks::tick() const {
  // @@protoc_insertion_point(field_get:perception.Roadmarks.tick)
  return _internal_tick();
}
inline void Roadmarks::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void Roadmarks::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:perception.Roadmarks.tick)
}

// repeated .perception.ObjContourPoints contours = 4;
inline int Roadmarks::_internal_contours_size() const {
  return contours_.size();
}
inline int Roadmarks::contours_size() const {
  return _internal_contours_size();
}
inline void Roadmarks::clear_contours() {
  contours_.Clear();
}
inline ::perception::ObjContourPoints* Roadmarks::mutable_contours(int index) {
  // @@protoc_insertion_point(field_mutable:perception.Roadmarks.contours)
  return contours_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ObjContourPoints >*
Roadmarks::mutable_contours() {
  // @@protoc_insertion_point(field_mutable_list:perception.Roadmarks.contours)
  return &contours_;
}
inline const ::perception::ObjContourPoints& Roadmarks::_internal_contours(int index) const {
  return contours_.Get(index);
}
inline const ::perception::ObjContourPoints& Roadmarks::contours(int index) const {
  // @@protoc_insertion_point(field_get:perception.Roadmarks.contours)
  return _internal_contours(index);
}
inline ::perception::ObjContourPoints* Roadmarks::_internal_add_contours() {
  return contours_.Add();
}
inline ::perception::ObjContourPoints* Roadmarks::add_contours() {
  // @@protoc_insertion_point(field_add:perception.Roadmarks.contours)
  return _internal_add_contours();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ObjContourPoints >&
Roadmarks::contours() const {
  // @@protoc_insertion_point(field_list:perception.Roadmarks.contours)
  return contours_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perception::PContourType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::PContourType>() {
  return ::perception::PContourType_descriptor();
}
template <> struct is_proto_enum< ::perception::PObjCamNum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::PObjCamNum>() {
  return ::perception::PObjCamNum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_roadmarks_2eproto
