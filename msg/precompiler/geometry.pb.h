// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_geometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_geometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_geometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_geometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geometry_2eproto;
namespace perception {
namespace common {
class Angle3f;
class Angle3fDefaultTypeInternal;
extern Angle3fDefaultTypeInternal _Angle3f_default_instance_;
class Box3D;
class Box3DDefaultTypeInternal;
extern Box3DDefaultTypeInternal _Box3D_default_instance_;
class EvalStats;
class EvalStatsDefaultTypeInternal;
extern EvalStatsDefaultTypeInternal _EvalStats_default_instance_;
class Float;
class FloatDefaultTypeInternal;
extern FloatDefaultTypeInternal _Float_default_instance_;
class FloatArray;
class FloatArrayDefaultTypeInternal;
extern FloatArrayDefaultTypeInternal _FloatArray_default_instance_;
class HafQuaternion;
class HafQuaternionDefaultTypeInternal;
extern HafQuaternionDefaultTypeInternal _HafQuaternion_default_instance_;
class Int;
class IntDefaultTypeInternal;
extern IntDefaultTypeInternal _Int_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point2DList;
class Point2DListDefaultTypeInternal;
extern Point2DListDefaultTypeInternal _Point2DList_default_instance_;
class Point2f;
class Point2fDefaultTypeInternal;
extern Point2fDefaultTypeInternal _Point2f_default_instance_;
class Point2fList;
class Point2fListDefaultTypeInternal;
extern Point2fListDefaultTypeInternal _Point2fList_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class Point3DList;
class Point3DListDefaultTypeInternal;
extern Point3DListDefaultTypeInternal _Point3DList_default_instance_;
class Point3f;
class Point3fDefaultTypeInternal;
extern Point3fDefaultTypeInternal _Point3f_default_instance_;
class Point3fList;
class Point3fListDefaultTypeInternal;
extern Point3fListDefaultTypeInternal _Point3fList_default_instance_;
class PointList;
class PointListDefaultTypeInternal;
extern PointListDefaultTypeInternal _PointList_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class PoseAngle;
class PoseAngleDefaultTypeInternal;
extern PoseAngleDefaultTypeInternal _PoseAngle_default_instance_;
class Rect;
class RectDefaultTypeInternal;
extern RectDefaultTypeInternal _Rect_default_instance_;
class Rect2D;
class Rect2DDefaultTypeInternal;
extern Rect2DDefaultTypeInternal _Rect2D_default_instance_;
class Rect2f;
class Rect2fDefaultTypeInternal;
extern Rect2fDefaultTypeInternal _Rect2f_default_instance_;
class Rect3D;
class Rect3DDefaultTypeInternal;
extern Rect3DDefaultTypeInternal _Rect3D_default_instance_;
class Size3D;
class Size3DDefaultTypeInternal;
extern Size3DDefaultTypeInternal _Size3D_default_instance_;
class UInt;
class UIntDefaultTypeInternal;
extern UIntDefaultTypeInternal _UInt_default_instance_;
class XY;
class XYDefaultTypeInternal;
extern XYDefaultTypeInternal _XY_default_instance_;
class XYZ;
class XYZDefaultTypeInternal;
extern XYZDefaultTypeInternal _XYZ_default_instance_;
}  // namespace common
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::common::Angle3f* Arena::CreateMaybeMessage<::perception::common::Angle3f>(Arena*);
template<> ::perception::common::Box3D* Arena::CreateMaybeMessage<::perception::common::Box3D>(Arena*);
template<> ::perception::common::EvalStats* Arena::CreateMaybeMessage<::perception::common::EvalStats>(Arena*);
template<> ::perception::common::Float* Arena::CreateMaybeMessage<::perception::common::Float>(Arena*);
template<> ::perception::common::FloatArray* Arena::CreateMaybeMessage<::perception::common::FloatArray>(Arena*);
template<> ::perception::common::HafQuaternion* Arena::CreateMaybeMessage<::perception::common::HafQuaternion>(Arena*);
template<> ::perception::common::Int* Arena::CreateMaybeMessage<::perception::common::Int>(Arena*);
template<> ::perception::common::Point* Arena::CreateMaybeMessage<::perception::common::Point>(Arena*);
template<> ::perception::common::Point2D* Arena::CreateMaybeMessage<::perception::common::Point2D>(Arena*);
template<> ::perception::common::Point2DList* Arena::CreateMaybeMessage<::perception::common::Point2DList>(Arena*);
template<> ::perception::common::Point2f* Arena::CreateMaybeMessage<::perception::common::Point2f>(Arena*);
template<> ::perception::common::Point2fList* Arena::CreateMaybeMessage<::perception::common::Point2fList>(Arena*);
template<> ::perception::common::Point3D* Arena::CreateMaybeMessage<::perception::common::Point3D>(Arena*);
template<> ::perception::common::Point3DList* Arena::CreateMaybeMessage<::perception::common::Point3DList>(Arena*);
template<> ::perception::common::Point3f* Arena::CreateMaybeMessage<::perception::common::Point3f>(Arena*);
template<> ::perception::common::Point3fList* Arena::CreateMaybeMessage<::perception::common::Point3fList>(Arena*);
template<> ::perception::common::PointList* Arena::CreateMaybeMessage<::perception::common::PointList>(Arena*);
template<> ::perception::common::Polygon* Arena::CreateMaybeMessage<::perception::common::Polygon>(Arena*);
template<> ::perception::common::PoseAngle* Arena::CreateMaybeMessage<::perception::common::PoseAngle>(Arena*);
template<> ::perception::common::Rect* Arena::CreateMaybeMessage<::perception::common::Rect>(Arena*);
template<> ::perception::common::Rect2D* Arena::CreateMaybeMessage<::perception::common::Rect2D>(Arena*);
template<> ::perception::common::Rect2f* Arena::CreateMaybeMessage<::perception::common::Rect2f>(Arena*);
template<> ::perception::common::Rect3D* Arena::CreateMaybeMessage<::perception::common::Rect3D>(Arena*);
template<> ::perception::common::Size3D* Arena::CreateMaybeMessage<::perception::common::Size3D>(Arena*);
template<> ::perception::common::UInt* Arena::CreateMaybeMessage<::perception::common::UInt>(Arena*);
template<> ::perception::common::XY* Arena::CreateMaybeMessage<::perception::common::XY>(Arena*);
template<> ::perception::common::XYZ* Arena::CreateMaybeMessage<::perception::common::XYZ>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {
namespace common {

// ===================================================================

class EvalStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.EvalStats) */ {
 public:
  inline EvalStats() : EvalStats(nullptr) {};
  virtual ~EvalStats();

  EvalStats(const EvalStats& from);
  EvalStats(EvalStats&& from) noexcept
    : EvalStats() {
    *this = ::std::move(from);
  }

  inline EvalStats& operator=(const EvalStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvalStats& operator=(EvalStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EvalStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EvalStats* internal_default_instance() {
    return reinterpret_cast<const EvalStats*>(
               &_EvalStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EvalStats& a, EvalStats& b) {
    a.Swap(&b);
  }
  inline void Swap(EvalStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvalStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvalStats* New() const final {
    return CreateMaybeMessage<EvalStats>(nullptr);
  }

  EvalStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvalStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EvalStats& from);
  void MergeFrom(const EvalStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvalStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.EvalStats";
  }
  protected:
  explicit EvalStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeanFieldNumber = 1,
    kStdFieldNumber = 2,
    kProbFieldNumber = 3,
  };
  // float mean = 1;
  void clear_mean();
  float mean() const;
  void set_mean(float value);
  private:
  float _internal_mean() const;
  void _internal_set_mean(float value);
  public:

  // float std = 2;
  void clear_std();
  float std() const;
  void set_std(float value);
  private:
  float _internal_std() const;
  void _internal_set_std(float value);
  public:

  // float prob = 3;
  void clear_prob();
  float prob() const;
  void set_prob(float value);
  private:
  float _internal_prob() const;
  void _internal_set_prob(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.EvalStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float mean_;
  float std_;
  float prob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Point2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Point2D) */ {
 public:
  inline Point2D() : Point2D(nullptr) {};
  virtual ~Point2D();

  Point2D(const Point2D& from);
  Point2D(Point2D&& from) noexcept
    : Point2D() {
    *this = ::std::move(from);
  }

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2D& operator=(Point2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2D* internal_default_instance() {
    return reinterpret_cast<const Point2D*>(
               &_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point2D& a, Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2D* New() const final {
    return CreateMaybeMessage<Point2D>(nullptr);
  }

  Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Point2D";
  }
  protected:
  explicit Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalFieldNumber = 3,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // .perception.common.EvalStats eval = 3;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.Point2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::EvalStats* eval_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Point3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Point3D) */ {
 public:
  inline Point3D() : Point3D(nullptr) {};
  virtual ~Point3D();

  Point3D(const Point3D& from);
  Point3D(Point3D&& from) noexcept
    : Point3D() {
    *this = ::std::move(from);
  }

  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3D& operator=(Point3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3D* internal_default_instance() {
    return reinterpret_cast<const Point3D*>(
               &_Point3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Point3D& a, Point3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3D* New() const final {
    return CreateMaybeMessage<Point3D>(nullptr);
  }

  Point3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3D& from);
  void MergeFrom(const Point3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Point3D";
  }
  protected:
  explicit Point3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalFieldNumber = 4,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // .perception.common.EvalStats eval = 4;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.Point3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::EvalStats* eval_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class XYZ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.XYZ) */ {
 public:
  inline XYZ() : XYZ(nullptr) {};
  virtual ~XYZ();

  XYZ(const XYZ& from);
  XYZ(XYZ&& from) noexcept
    : XYZ() {
    *this = ::std::move(from);
  }

  inline XYZ& operator=(const XYZ& from) {
    CopyFrom(from);
    return *this;
  }
  inline XYZ& operator=(XYZ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XYZ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XYZ* internal_default_instance() {
    return reinterpret_cast<const XYZ*>(
               &_XYZ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(XYZ& a, XYZ& b) {
    a.Swap(&b);
  }
  inline void Swap(XYZ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XYZ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XYZ* New() const final {
    return CreateMaybeMessage<XYZ>(nullptr);
  }

  XYZ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XYZ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XYZ& from);
  void MergeFrom(const XYZ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XYZ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.XYZ";
  }
  protected:
  explicit XYZ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalsFieldNumber = 4,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // repeated .perception.common.EvalStats evals = 4;
  int evals_size() const;
  private:
  int _internal_evals_size() const;
  public:
  void clear_evals();
  ::perception::common::EvalStats* mutable_evals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >*
      mutable_evals();
  private:
  const ::perception::common::EvalStats& _internal_evals(int index) const;
  ::perception::common::EvalStats* _internal_add_evals();
  public:
  const ::perception::common::EvalStats& evals(int index) const;
  ::perception::common::EvalStats* add_evals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >&
      evals() const;

  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.XYZ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats > evals_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class XY PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.XY) */ {
 public:
  inline XY() : XY(nullptr) {};
  virtual ~XY();

  XY(const XY& from);
  XY(XY&& from) noexcept
    : XY() {
    *this = ::std::move(from);
  }

  inline XY& operator=(const XY& from) {
    CopyFrom(from);
    return *this;
  }
  inline XY& operator=(XY&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XY& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XY* internal_default_instance() {
    return reinterpret_cast<const XY*>(
               &_XY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(XY& a, XY& b) {
    a.Swap(&b);
  }
  inline void Swap(XY* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XY* New() const final {
    return CreateMaybeMessage<XY>(nullptr);
  }

  XY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XY& from);
  void MergeFrom(const XY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.XY";
  }
  protected:
  explicit XY(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kTmFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // int64 tm = 3;
  void clear_tm();
  ::PROTOBUF_NAMESPACE_ID::int64 tm() const;
  void set_tm(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tm() const;
  void _internal_set_tm(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.XY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int64 tm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Size3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Size3D) */ {
 public:
  inline Size3D() : Size3D(nullptr) {};
  virtual ~Size3D();

  Size3D(const Size3D& from);
  Size3D(Size3D&& from) noexcept
    : Size3D() {
    *this = ::std::move(from);
  }

  inline Size3D& operator=(const Size3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Size3D& operator=(Size3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Size3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Size3D* internal_default_instance() {
    return reinterpret_cast<const Size3D*>(
               &_Size3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Size3D& a, Size3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Size3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Size3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Size3D* New() const final {
    return CreateMaybeMessage<Size3D>(nullptr);
  }

  Size3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Size3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Size3D& from);
  void MergeFrom(const Size3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Size3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Size3D";
  }
  protected:
  explicit Size3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalsFieldNumber = 4,
    kWFieldNumber = 1,
    kHFieldNumber = 2,
    kLFieldNumber = 3,
  };
  // repeated .perception.common.EvalStats evals = 4;
  int evals_size() const;
  private:
  int _internal_evals_size() const;
  public:
  void clear_evals();
  ::perception::common::EvalStats* mutable_evals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >*
      mutable_evals();
  private:
  const ::perception::common::EvalStats& _internal_evals(int index) const;
  ::perception::common::EvalStats* _internal_add_evals();
  public:
  const ::perception::common::EvalStats& evals(int index) const;
  ::perception::common::EvalStats* add_evals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >&
      evals() const;

  // double w = 1;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // double h = 2;
  void clear_h();
  double h() const;
  void set_h(double value);
  private:
  double _internal_h() const;
  void _internal_set_h(double value);
  public:

  // double l = 3;
  void clear_l();
  double l() const;
  void set_l(double value);
  private:
  double _internal_l() const;
  void _internal_set_l(double value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.Size3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats > evals_;
  double w_;
  double h_;
  double l_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Point) */ {
 public:
  inline Point() : Point(nullptr) {};
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalFieldNumber = 3,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // .perception.common.EvalStats eval = 3;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::EvalStats* eval_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Point2f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Point2f) */ {
 public:
  inline Point2f() : Point2f(nullptr) {};
  virtual ~Point2f();

  Point2f(const Point2f& from);
  Point2f(Point2f&& from) noexcept
    : Point2f() {
    *this = ::std::move(from);
  }

  inline Point2f& operator=(const Point2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2f& operator=(Point2f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2f* internal_default_instance() {
    return reinterpret_cast<const Point2f*>(
               &_Point2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Point2f& a, Point2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2f* New() const final {
    return CreateMaybeMessage<Point2f>(nullptr);
  }

  Point2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2f& from);
  void MergeFrom(const Point2f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Point2f";
  }
  protected:
  explicit Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalFieldNumber = 3,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // .perception.common.EvalStats eval = 3;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.Point2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::EvalStats* eval_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Point3f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Point3f) */ {
 public:
  inline Point3f() : Point3f(nullptr) {};
  virtual ~Point3f();

  Point3f(const Point3f& from);
  Point3f(Point3f&& from) noexcept
    : Point3f() {
    *this = ::std::move(from);
  }

  inline Point3f& operator=(const Point3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3f& operator=(Point3f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3f* internal_default_instance() {
    return reinterpret_cast<const Point3f*>(
               &_Point3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Point3f& a, Point3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3f* New() const final {
    return CreateMaybeMessage<Point3f>(nullptr);
  }

  Point3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3f& from);
  void MergeFrom(const Point3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Point3f";
  }
  protected:
  explicit Point3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalFieldNumber = 4,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // .perception.common.EvalStats eval = 4;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.Point3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::EvalStats* eval_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class HafQuaternion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.HafQuaternion) */ {
 public:
  inline HafQuaternion() : HafQuaternion(nullptr) {};
  virtual ~HafQuaternion();

  HafQuaternion(const HafQuaternion& from);
  HafQuaternion(HafQuaternion&& from) noexcept
    : HafQuaternion() {
    *this = ::std::move(from);
  }

  inline HafQuaternion& operator=(const HafQuaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline HafQuaternion& operator=(HafQuaternion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HafQuaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HafQuaternion* internal_default_instance() {
    return reinterpret_cast<const HafQuaternion*>(
               &_HafQuaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(HafQuaternion& a, HafQuaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(HafQuaternion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HafQuaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HafQuaternion* New() const final {
    return CreateMaybeMessage<HafQuaternion>(nullptr);
  }

  HafQuaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HafQuaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HafQuaternion& from);
  void MergeFrom(const HafQuaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HafQuaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.HafQuaternion";
  }
  protected:
  explicit HafQuaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalFieldNumber = 5,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // .perception.common.EvalStats eval = 5;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double w = 4;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.HafQuaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::EvalStats* eval_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Angle3f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Angle3f) */ {
 public:
  inline Angle3f() : Angle3f(nullptr) {};
  virtual ~Angle3f();

  Angle3f(const Angle3f& from);
  Angle3f(Angle3f&& from) noexcept
    : Angle3f() {
    *this = ::std::move(from);
  }

  inline Angle3f& operator=(const Angle3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Angle3f& operator=(Angle3f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Angle3f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Angle3f* internal_default_instance() {
    return reinterpret_cast<const Angle3f*>(
               &_Angle3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Angle3f& a, Angle3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Angle3f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Angle3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Angle3f* New() const final {
    return CreateMaybeMessage<Angle3f>(nullptr);
  }

  Angle3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Angle3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Angle3f& from);
  void MergeFrom(const Angle3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Angle3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Angle3f";
  }
  protected:
  explicit Angle3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalsFieldNumber = 4,
    kCenterFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
  };
  // repeated .perception.common.EvalStats evals = 4;
  int evals_size() const;
  private:
  int _internal_evals_size() const;
  public:
  void clear_evals();
  ::perception::common::EvalStats* mutable_evals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >*
      mutable_evals();
  private:
  const ::perception::common::EvalStats& _internal_evals(int index) const;
  ::perception::common::EvalStats* _internal_add_evals();
  public:
  const ::perception::common::EvalStats& evals(int index) const;
  ::perception::common::EvalStats* add_evals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >&
      evals() const;

  // float center = 1;
  void clear_center();
  float center() const;
  void set_center(float value);
  private:
  float _internal_center() const;
  void _internal_set_center(float value);
  public:

  // float left = 2;
  void clear_left();
  float left() const;
  void set_left(float value);
  private:
  float _internal_left() const;
  void _internal_set_left(float value);
  public:

  // float right = 3;
  void clear_right();
  float right() const;
  void set_right(float value);
  private:
  float _internal_right() const;
  void _internal_set_right(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.Angle3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats > evals_;
  float center_;
  float left_;
  float right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Point2fList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Point2fList) */ {
 public:
  inline Point2fList() : Point2fList(nullptr) {};
  virtual ~Point2fList();

  Point2fList(const Point2fList& from);
  Point2fList(Point2fList&& from) noexcept
    : Point2fList() {
    *this = ::std::move(from);
  }

  inline Point2fList& operator=(const Point2fList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2fList& operator=(Point2fList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2fList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2fList* internal_default_instance() {
    return reinterpret_cast<const Point2fList*>(
               &_Point2fList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Point2fList& a, Point2fList& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2fList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2fList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2fList* New() const final {
    return CreateMaybeMessage<Point2fList>(nullptr);
  }

  Point2fList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2fList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2fList& from);
  void MergeFrom(const Point2fList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2fList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Point2fList";
  }
  protected:
  explicit Point2fList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsListFieldNumber = 1,
    kEvalFieldNumber = 2,
  };
  // repeated .perception.common.Point2f pts_list = 1;
  int pts_list_size() const;
  private:
  int _internal_pts_list_size() const;
  public:
  void clear_pts_list();
  ::perception::common::Point2f* mutable_pts_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point2f >*
      mutable_pts_list();
  private:
  const ::perception::common::Point2f& _internal_pts_list(int index) const;
  ::perception::common::Point2f* _internal_add_pts_list();
  public:
  const ::perception::common::Point2f& pts_list(int index) const;
  ::perception::common::Point2f* add_pts_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point2f >&
      pts_list() const;

  // .perception.common.EvalStats eval = 2;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // @@protoc_insertion_point(class_scope:perception.common.Point2fList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point2f > pts_list_;
  ::perception::common::EvalStats* eval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Point2DList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Point2DList) */ {
 public:
  inline Point2DList() : Point2DList(nullptr) {};
  virtual ~Point2DList();

  Point2DList(const Point2DList& from);
  Point2DList(Point2DList&& from) noexcept
    : Point2DList() {
    *this = ::std::move(from);
  }

  inline Point2DList& operator=(const Point2DList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2DList& operator=(Point2DList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2DList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2DList* internal_default_instance() {
    return reinterpret_cast<const Point2DList*>(
               &_Point2DList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Point2DList& a, Point2DList& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2DList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2DList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2DList* New() const final {
    return CreateMaybeMessage<Point2DList>(nullptr);
  }

  Point2DList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2DList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2DList& from);
  void MergeFrom(const Point2DList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2DList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Point2DList";
  }
  protected:
  explicit Point2DList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsListFieldNumber = 1,
    kEvalFieldNumber = 2,
  };
  // repeated .perception.common.Point2D pts_list = 1;
  int pts_list_size() const;
  private:
  int _internal_pts_list_size() const;
  public:
  void clear_pts_list();
  ::perception::common::Point2D* mutable_pts_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point2D >*
      mutable_pts_list();
  private:
  const ::perception::common::Point2D& _internal_pts_list(int index) const;
  ::perception::common::Point2D* _internal_add_pts_list();
  public:
  const ::perception::common::Point2D& pts_list(int index) const;
  ::perception::common::Point2D* add_pts_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point2D >&
      pts_list() const;

  // .perception.common.EvalStats eval = 2;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // @@protoc_insertion_point(class_scope:perception.common.Point2DList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point2D > pts_list_;
  ::perception::common::EvalStats* eval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Point3DList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Point3DList) */ {
 public:
  inline Point3DList() : Point3DList(nullptr) {};
  virtual ~Point3DList();

  Point3DList(const Point3DList& from);
  Point3DList(Point3DList&& from) noexcept
    : Point3DList() {
    *this = ::std::move(from);
  }

  inline Point3DList& operator=(const Point3DList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3DList& operator=(Point3DList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3DList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3DList* internal_default_instance() {
    return reinterpret_cast<const Point3DList*>(
               &_Point3DList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Point3DList& a, Point3DList& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3DList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3DList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3DList* New() const final {
    return CreateMaybeMessage<Point3DList>(nullptr);
  }

  Point3DList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3DList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3DList& from);
  void MergeFrom(const Point3DList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3DList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Point3DList";
  }
  protected:
  explicit Point3DList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsListFieldNumber = 1,
    kEvalFieldNumber = 2,
  };
  // repeated .perception.common.Point3D pts_list = 1;
  int pts_list_size() const;
  private:
  int _internal_pts_list_size() const;
  public:
  void clear_pts_list();
  ::perception::common::Point3D* mutable_pts_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >*
      mutable_pts_list();
  private:
  const ::perception::common::Point3D& _internal_pts_list(int index) const;
  ::perception::common::Point3D* _internal_add_pts_list();
  public:
  const ::perception::common::Point3D& pts_list(int index) const;
  ::perception::common::Point3D* add_pts_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >&
      pts_list() const;

  // .perception.common.EvalStats eval = 2;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // @@protoc_insertion_point(class_scope:perception.common.Point3DList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D > pts_list_;
  ::perception::common::EvalStats* eval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Point3fList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Point3fList) */ {
 public:
  inline Point3fList() : Point3fList(nullptr) {};
  virtual ~Point3fList();

  Point3fList(const Point3fList& from);
  Point3fList(Point3fList&& from) noexcept
    : Point3fList() {
    *this = ::std::move(from);
  }

  inline Point3fList& operator=(const Point3fList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3fList& operator=(Point3fList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3fList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3fList* internal_default_instance() {
    return reinterpret_cast<const Point3fList*>(
               &_Point3fList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Point3fList& a, Point3fList& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3fList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3fList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3fList* New() const final {
    return CreateMaybeMessage<Point3fList>(nullptr);
  }

  Point3fList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3fList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3fList& from);
  void MergeFrom(const Point3fList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3fList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Point3fList";
  }
  protected:
  explicit Point3fList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsListFieldNumber = 1,
    kEvalFieldNumber = 2,
  };
  // repeated .perception.common.Point3f pts_list = 1;
  int pts_list_size() const;
  private:
  int _internal_pts_list_size() const;
  public:
  void clear_pts_list();
  ::perception::common::Point3f* mutable_pts_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3f >*
      mutable_pts_list();
  private:
  const ::perception::common::Point3f& _internal_pts_list(int index) const;
  ::perception::common::Point3f* _internal_add_pts_list();
  public:
  const ::perception::common::Point3f& pts_list(int index) const;
  ::perception::common::Point3f* add_pts_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3f >&
      pts_list() const;

  // .perception.common.EvalStats eval = 2;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // @@protoc_insertion_point(class_scope:perception.common.Point3fList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3f > pts_list_;
  ::perception::common::EvalStats* eval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class PointList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.PointList) */ {
 public:
  inline PointList() : PointList(nullptr) {};
  virtual ~PointList();

  PointList(const PointList& from);
  PointList(PointList&& from) noexcept
    : PointList() {
    *this = ::std::move(from);
  }

  inline PointList& operator=(const PointList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointList& operator=(PointList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointList* internal_default_instance() {
    return reinterpret_cast<const PointList*>(
               &_PointList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PointList& a, PointList& b) {
    a.Swap(&b);
  }
  inline void Swap(PointList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointList* New() const final {
    return CreateMaybeMessage<PointList>(nullptr);
  }

  PointList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointList& from);
  void MergeFrom(const PointList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.PointList";
  }
  protected:
  explicit PointList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsListFieldNumber = 1,
    kEvalFieldNumber = 2,
  };
  // repeated .perception.common.Point pts_list = 1;
  int pts_list_size() const;
  private:
  int _internal_pts_list_size() const;
  public:
  void clear_pts_list();
  ::perception::common::Point* mutable_pts_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point >*
      mutable_pts_list();
  private:
  const ::perception::common::Point& _internal_pts_list(int index) const;
  ::perception::common::Point* _internal_add_pts_list();
  public:
  const ::perception::common::Point& pts_list(int index) const;
  ::perception::common::Point* add_pts_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point >&
      pts_list() const;

  // .perception.common.EvalStats eval = 2;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // @@protoc_insertion_point(class_scope:perception.common.PointList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point > pts_list_;
  ::perception::common::EvalStats* eval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Rect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Rect) */ {
 public:
  inline Rect() : Rect(nullptr) {};
  virtual ~Rect();

  Rect(const Rect& from);
  Rect(Rect&& from) noexcept
    : Rect() {
    *this = ::std::move(from);
  }

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rect& operator=(Rect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rect* internal_default_instance() {
    return reinterpret_cast<const Rect*>(
               &_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Rect& a, Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(Rect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rect* New() const final {
    return CreateMaybeMessage<Rect>(nullptr);
  }

  Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Rect";
  }
  protected:
  explicit Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalFieldNumber = 5,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // .perception.common.EvalStats eval = 5;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 w = 3;
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 h = 4;
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.Rect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::EvalStats* eval_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Rect2f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Rect2f) */ {
 public:
  inline Rect2f() : Rect2f(nullptr) {};
  virtual ~Rect2f();

  Rect2f(const Rect2f& from);
  Rect2f(Rect2f&& from) noexcept
    : Rect2f() {
    *this = ::std::move(from);
  }

  inline Rect2f& operator=(const Rect2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rect2f& operator=(Rect2f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rect2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rect2f* internal_default_instance() {
    return reinterpret_cast<const Rect2f*>(
               &_Rect2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Rect2f& a, Rect2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Rect2f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rect2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rect2f* New() const final {
    return CreateMaybeMessage<Rect2f>(nullptr);
  }

  Rect2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rect2f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rect2f& from);
  void MergeFrom(const Rect2f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rect2f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Rect2f";
  }
  protected:
  explicit Rect2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalFieldNumber = 5,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // .perception.common.EvalStats eval = 5;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float w = 3;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float h = 4;
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.Rect2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::EvalStats* eval_;
  float x_;
  float y_;
  float w_;
  float h_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Rect3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Rect3D) */ {
 public:
  inline Rect3D() : Rect3D(nullptr) {};
  virtual ~Rect3D();

  Rect3D(const Rect3D& from);
  Rect3D(Rect3D&& from) noexcept
    : Rect3D() {
    *this = ::std::move(from);
  }

  inline Rect3D& operator=(const Rect3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rect3D& operator=(Rect3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rect3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rect3D* internal_default_instance() {
    return reinterpret_cast<const Rect3D*>(
               &_Rect3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Rect3D& a, Rect3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Rect3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rect3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rect3D* New() const final {
    return CreateMaybeMessage<Rect3D>(nullptr);
  }

  Rect3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rect3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rect3D& from);
  void MergeFrom(const Rect3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rect3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Rect3D";
  }
  protected:
  explicit Rect3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCornersFieldNumber = 7,
    kCenterFieldNumber = 1,
    kCenterStdDevFieldNumber = 2,
    kSizeLwhFieldNumber = 3,
    kSizeStdDevFieldNumber = 4,
    kEvalFieldNumber = 8,
    kOrientationFieldNumber = 5,
    kOrientationStdDevFieldNumber = 6,
  };
  // repeated .perception.common.Point3D corners = 7;
  int corners_size() const;
  private:
  int _internal_corners_size() const;
  public:
  void clear_corners();
  ::perception::common::Point3D* mutable_corners(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >*
      mutable_corners();
  private:
  const ::perception::common::Point3D& _internal_corners(int index) const;
  ::perception::common::Point3D* _internal_add_corners();
  public:
  const ::perception::common::Point3D& corners(int index) const;
  ::perception::common::Point3D* add_corners();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >&
      corners() const;

  // .perception.common.Point3D center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::perception::common::Point3D& center() const;
  ::perception::common::Point3D* release_center();
  ::perception::common::Point3D* mutable_center();
  void set_allocated_center(::perception::common::Point3D* center);
  private:
  const ::perception::common::Point3D& _internal_center() const;
  ::perception::common::Point3D* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::perception::common::Point3D* center);
  ::perception::common::Point3D* unsafe_arena_release_center();

  // .perception.common.Point3D center_std_dev = 2;
  bool has_center_std_dev() const;
  private:
  bool _internal_has_center_std_dev() const;
  public:
  void clear_center_std_dev();
  const ::perception::common::Point3D& center_std_dev() const;
  ::perception::common::Point3D* release_center_std_dev();
  ::perception::common::Point3D* mutable_center_std_dev();
  void set_allocated_center_std_dev(::perception::common::Point3D* center_std_dev);
  private:
  const ::perception::common::Point3D& _internal_center_std_dev() const;
  ::perception::common::Point3D* _internal_mutable_center_std_dev();
  public:
  void unsafe_arena_set_allocated_center_std_dev(
      ::perception::common::Point3D* center_std_dev);
  ::perception::common::Point3D* unsafe_arena_release_center_std_dev();

  // .perception.common.Point3D size_lwh = 3;
  bool has_size_lwh() const;
  private:
  bool _internal_has_size_lwh() const;
  public:
  void clear_size_lwh();
  const ::perception::common::Point3D& size_lwh() const;
  ::perception::common::Point3D* release_size_lwh();
  ::perception::common::Point3D* mutable_size_lwh();
  void set_allocated_size_lwh(::perception::common::Point3D* size_lwh);
  private:
  const ::perception::common::Point3D& _internal_size_lwh() const;
  ::perception::common::Point3D* _internal_mutable_size_lwh();
  public:
  void unsafe_arena_set_allocated_size_lwh(
      ::perception::common::Point3D* size_lwh);
  ::perception::common::Point3D* unsafe_arena_release_size_lwh();

  // .perception.common.Point3D size_std_dev = 4;
  bool has_size_std_dev() const;
  private:
  bool _internal_has_size_std_dev() const;
  public:
  void clear_size_std_dev();
  const ::perception::common::Point3D& size_std_dev() const;
  ::perception::common::Point3D* release_size_std_dev();
  ::perception::common::Point3D* mutable_size_std_dev();
  void set_allocated_size_std_dev(::perception::common::Point3D* size_std_dev);
  private:
  const ::perception::common::Point3D& _internal_size_std_dev() const;
  ::perception::common::Point3D* _internal_mutable_size_std_dev();
  public:
  void unsafe_arena_set_allocated_size_std_dev(
      ::perception::common::Point3D* size_std_dev);
  ::perception::common::Point3D* unsafe_arena_release_size_std_dev();

  // .perception.common.EvalStats eval = 8;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // double orientation = 5;
  void clear_orientation();
  double orientation() const;
  void set_orientation(double value);
  private:
  double _internal_orientation() const;
  void _internal_set_orientation(double value);
  public:

  // double orientation_std_dev = 6;
  void clear_orientation_std_dev();
  double orientation_std_dev() const;
  void set_orientation_std_dev(double value);
  private:
  double _internal_orientation_std_dev() const;
  void _internal_set_orientation_std_dev(double value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.Rect3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D > corners_;
  ::perception::common::Point3D* center_;
  ::perception::common::Point3D* center_std_dev_;
  ::perception::common::Point3D* size_lwh_;
  ::perception::common::Point3D* size_std_dev_;
  ::perception::common::EvalStats* eval_;
  double orientation_;
  double orientation_std_dev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Rect2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Rect2D) */ {
 public:
  inline Rect2D() : Rect2D(nullptr) {};
  virtual ~Rect2D();

  Rect2D(const Rect2D& from);
  Rect2D(Rect2D&& from) noexcept
    : Rect2D() {
    *this = ::std::move(from);
  }

  inline Rect2D& operator=(const Rect2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rect2D& operator=(Rect2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rect2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rect2D* internal_default_instance() {
    return reinterpret_cast<const Rect2D*>(
               &_Rect2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Rect2D& a, Rect2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Rect2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rect2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rect2D* New() const final {
    return CreateMaybeMessage<Rect2D>(nullptr);
  }

  Rect2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rect2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rect2D& from);
  void MergeFrom(const Rect2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rect2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Rect2D";
  }
  protected:
  explicit Rect2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kSizeFieldNumber = 2,
    kEvalFieldNumber = 3,
  };
  // .perception.common.Point2D center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::perception::common::Point2D& center() const;
  ::perception::common::Point2D* release_center();
  ::perception::common::Point2D* mutable_center();
  void set_allocated_center(::perception::common::Point2D* center);
  private:
  const ::perception::common::Point2D& _internal_center() const;
  ::perception::common::Point2D* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::perception::common::Point2D* center);
  ::perception::common::Point2D* unsafe_arena_release_center();

  // .perception.common.Point2D size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::perception::common::Point2D& size() const;
  ::perception::common::Point2D* release_size();
  ::perception::common::Point2D* mutable_size();
  void set_allocated_size(::perception::common::Point2D* size);
  private:
  const ::perception::common::Point2D& _internal_size() const;
  ::perception::common::Point2D* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::perception::common::Point2D* size);
  ::perception::common::Point2D* unsafe_arena_release_size();

  // .perception.common.EvalStats eval = 3;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // @@protoc_insertion_point(class_scope:perception.common.Rect2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::Point2D* center_;
  ::perception::common::Point2D* size_;
  ::perception::common::EvalStats* eval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Box3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Box3D) */ {
 public:
  inline Box3D() : Box3D(nullptr) {};
  virtual ~Box3D();

  Box3D(const Box3D& from);
  Box3D(Box3D&& from) noexcept
    : Box3D() {
    *this = ::std::move(from);
  }

  inline Box3D& operator=(const Box3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Box3D& operator=(Box3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Box3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Box3D* internal_default_instance() {
    return reinterpret_cast<const Box3D*>(
               &_Box3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Box3D& a, Box3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Box3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Box3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Box3D* New() const final {
    return CreateMaybeMessage<Box3D>(nullptr);
  }

  Box3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Box3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Box3D& from);
  void MergeFrom(const Box3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Box3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Box3D";
  }
  protected:
  explicit Box3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerLtFieldNumber = 1,
    kLowerLbFieldNumber = 2,
    kLowerRbFieldNumber = 3,
    kLowerRtFieldNumber = 4,
    kUpperLtFieldNumber = 5,
    kUpperLbFieldNumber = 6,
    kUpperRbFieldNumber = 7,
    kUpperRtFieldNumber = 8,
    kEvalFieldNumber = 10,
    kConfFieldNumber = 9,
  };
  // .perception.common.Point3D lower_lt = 1;
  bool has_lower_lt() const;
  private:
  bool _internal_has_lower_lt() const;
  public:
  void clear_lower_lt();
  const ::perception::common::Point3D& lower_lt() const;
  ::perception::common::Point3D* release_lower_lt();
  ::perception::common::Point3D* mutable_lower_lt();
  void set_allocated_lower_lt(::perception::common::Point3D* lower_lt);
  private:
  const ::perception::common::Point3D& _internal_lower_lt() const;
  ::perception::common::Point3D* _internal_mutable_lower_lt();
  public:
  void unsafe_arena_set_allocated_lower_lt(
      ::perception::common::Point3D* lower_lt);
  ::perception::common::Point3D* unsafe_arena_release_lower_lt();

  // .perception.common.Point3D lower_lb = 2;
  bool has_lower_lb() const;
  private:
  bool _internal_has_lower_lb() const;
  public:
  void clear_lower_lb();
  const ::perception::common::Point3D& lower_lb() const;
  ::perception::common::Point3D* release_lower_lb();
  ::perception::common::Point3D* mutable_lower_lb();
  void set_allocated_lower_lb(::perception::common::Point3D* lower_lb);
  private:
  const ::perception::common::Point3D& _internal_lower_lb() const;
  ::perception::common::Point3D* _internal_mutable_lower_lb();
  public:
  void unsafe_arena_set_allocated_lower_lb(
      ::perception::common::Point3D* lower_lb);
  ::perception::common::Point3D* unsafe_arena_release_lower_lb();

  // .perception.common.Point3D lower_rb = 3;
  bool has_lower_rb() const;
  private:
  bool _internal_has_lower_rb() const;
  public:
  void clear_lower_rb();
  const ::perception::common::Point3D& lower_rb() const;
  ::perception::common::Point3D* release_lower_rb();
  ::perception::common::Point3D* mutable_lower_rb();
  void set_allocated_lower_rb(::perception::common::Point3D* lower_rb);
  private:
  const ::perception::common::Point3D& _internal_lower_rb() const;
  ::perception::common::Point3D* _internal_mutable_lower_rb();
  public:
  void unsafe_arena_set_allocated_lower_rb(
      ::perception::common::Point3D* lower_rb);
  ::perception::common::Point3D* unsafe_arena_release_lower_rb();

  // .perception.common.Point3D lower_rt = 4;
  bool has_lower_rt() const;
  private:
  bool _internal_has_lower_rt() const;
  public:
  void clear_lower_rt();
  const ::perception::common::Point3D& lower_rt() const;
  ::perception::common::Point3D* release_lower_rt();
  ::perception::common::Point3D* mutable_lower_rt();
  void set_allocated_lower_rt(::perception::common::Point3D* lower_rt);
  private:
  const ::perception::common::Point3D& _internal_lower_rt() const;
  ::perception::common::Point3D* _internal_mutable_lower_rt();
  public:
  void unsafe_arena_set_allocated_lower_rt(
      ::perception::common::Point3D* lower_rt);
  ::perception::common::Point3D* unsafe_arena_release_lower_rt();

  // .perception.common.Point3D upper_lt = 5;
  bool has_upper_lt() const;
  private:
  bool _internal_has_upper_lt() const;
  public:
  void clear_upper_lt();
  const ::perception::common::Point3D& upper_lt() const;
  ::perception::common::Point3D* release_upper_lt();
  ::perception::common::Point3D* mutable_upper_lt();
  void set_allocated_upper_lt(::perception::common::Point3D* upper_lt);
  private:
  const ::perception::common::Point3D& _internal_upper_lt() const;
  ::perception::common::Point3D* _internal_mutable_upper_lt();
  public:
  void unsafe_arena_set_allocated_upper_lt(
      ::perception::common::Point3D* upper_lt);
  ::perception::common::Point3D* unsafe_arena_release_upper_lt();

  // .perception.common.Point3D upper_lb = 6;
  bool has_upper_lb() const;
  private:
  bool _internal_has_upper_lb() const;
  public:
  void clear_upper_lb();
  const ::perception::common::Point3D& upper_lb() const;
  ::perception::common::Point3D* release_upper_lb();
  ::perception::common::Point3D* mutable_upper_lb();
  void set_allocated_upper_lb(::perception::common::Point3D* upper_lb);
  private:
  const ::perception::common::Point3D& _internal_upper_lb() const;
  ::perception::common::Point3D* _internal_mutable_upper_lb();
  public:
  void unsafe_arena_set_allocated_upper_lb(
      ::perception::common::Point3D* upper_lb);
  ::perception::common::Point3D* unsafe_arena_release_upper_lb();

  // .perception.common.Point3D upper_rb = 7;
  bool has_upper_rb() const;
  private:
  bool _internal_has_upper_rb() const;
  public:
  void clear_upper_rb();
  const ::perception::common::Point3D& upper_rb() const;
  ::perception::common::Point3D* release_upper_rb();
  ::perception::common::Point3D* mutable_upper_rb();
  void set_allocated_upper_rb(::perception::common::Point3D* upper_rb);
  private:
  const ::perception::common::Point3D& _internal_upper_rb() const;
  ::perception::common::Point3D* _internal_mutable_upper_rb();
  public:
  void unsafe_arena_set_allocated_upper_rb(
      ::perception::common::Point3D* upper_rb);
  ::perception::common::Point3D* unsafe_arena_release_upper_rb();

  // .perception.common.Point3D upper_rt = 8;
  bool has_upper_rt() const;
  private:
  bool _internal_has_upper_rt() const;
  public:
  void clear_upper_rt();
  const ::perception::common::Point3D& upper_rt() const;
  ::perception::common::Point3D* release_upper_rt();
  ::perception::common::Point3D* mutable_upper_rt();
  void set_allocated_upper_rt(::perception::common::Point3D* upper_rt);
  private:
  const ::perception::common::Point3D& _internal_upper_rt() const;
  ::perception::common::Point3D* _internal_mutable_upper_rt();
  public:
  void unsafe_arena_set_allocated_upper_rt(
      ::perception::common::Point3D* upper_rt);
  ::perception::common::Point3D* unsafe_arena_release_upper_rt();

  // .perception.common.EvalStats eval = 10;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // float conf = 9;
  void clear_conf();
  float conf() const;
  void set_conf(float value);
  private:
  float _internal_conf() const;
  void _internal_set_conf(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.Box3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::Point3D* lower_lt_;
  ::perception::common::Point3D* lower_lb_;
  ::perception::common::Point3D* lower_rb_;
  ::perception::common::Point3D* lower_rt_;
  ::perception::common::Point3D* upper_lt_;
  ::perception::common::Point3D* upper_lb_;
  ::perception::common::Point3D* upper_rb_;
  ::perception::common::Point3D* upper_rt_;
  ::perception::common::EvalStats* eval_;
  float conf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Polygon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {};
  virtual ~Polygon();

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsFieldNumber = 1,
    kEvalFieldNumber = 2,
  };
  // repeated .perception.common.Point3D pts = 1;
  int pts_size() const;
  private:
  int _internal_pts_size() const;
  public:
  void clear_pts();
  ::perception::common::Point3D* mutable_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >*
      mutable_pts();
  private:
  const ::perception::common::Point3D& _internal_pts(int index) const;
  ::perception::common::Point3D* _internal_add_pts();
  public:
  const ::perception::common::Point3D& pts(int index) const;
  ::perception::common::Point3D* add_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >&
      pts() const;

  // .perception.common.EvalStats eval = 2;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // @@protoc_insertion_point(class_scope:perception.common.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D > pts_;
  ::perception::common::EvalStats* eval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class PoseAngle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.PoseAngle) */ {
 public:
  inline PoseAngle() : PoseAngle(nullptr) {};
  virtual ~PoseAngle();

  PoseAngle(const PoseAngle& from);
  PoseAngle(PoseAngle&& from) noexcept
    : PoseAngle() {
    *this = ::std::move(from);
  }

  inline PoseAngle& operator=(const PoseAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseAngle& operator=(PoseAngle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseAngle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseAngle* internal_default_instance() {
    return reinterpret_cast<const PoseAngle*>(
               &_PoseAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PoseAngle& a, PoseAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseAngle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseAngle* New() const final {
    return CreateMaybeMessage<PoseAngle>(nullptr);
  }

  PoseAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseAngle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseAngle& from);
  void MergeFrom(const PoseAngle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseAngle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.PoseAngle";
  }
  protected:
  explicit PoseAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalsFieldNumber = 4,
    kPitchFieldNumber = 1,
    kYawFieldNumber = 2,
    kRollFieldNumber = 3,
  };
  // repeated .perception.common.EvalStats evals = 4;
  int evals_size() const;
  private:
  int _internal_evals_size() const;
  public:
  void clear_evals();
  ::perception::common::EvalStats* mutable_evals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >*
      mutable_evals();
  private:
  const ::perception::common::EvalStats& _internal_evals(int index) const;
  ::perception::common::EvalStats* _internal_add_evals();
  public:
  const ::perception::common::EvalStats& evals(int index) const;
  ::perception::common::EvalStats* add_evals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >&
      evals() const;

  // float pitch = 1;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float yaw = 2;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float roll = 3;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.PoseAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats > evals_;
  float pitch_;
  float yaw_;
  float roll_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Int PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Int) */ {
 public:
  inline Int() : Int(nullptr) {};
  virtual ~Int();

  Int(const Int& from);
  Int(Int&& from) noexcept
    : Int() {
    *this = ::std::move(from);
  }

  inline Int& operator=(const Int& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int& operator=(Int&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Int& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Int* internal_default_instance() {
    return reinterpret_cast<const Int*>(
               &_Int_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Int& a, Int& b) {
    a.Swap(&b);
  }
  inline void Swap(Int* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int* New() const final {
    return CreateMaybeMessage<Int>(nullptr);
  }

  Int* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Int& from);
  void MergeFrom(const Int& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Int";
  }
  protected:
  explicit Int(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalFieldNumber = 2,
    kValFieldNumber = 1,
  };
  // .perception.common.EvalStats eval = 2;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // int32 val = 1;
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::int32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.Int)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::EvalStats* eval_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class Float PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Float) */ {
 public:
  inline Float() : Float(nullptr) {};
  virtual ~Float();

  Float(const Float& from);
  Float(Float&& from) noexcept
    : Float() {
    *this = ::std::move(from);
  }

  inline Float& operator=(const Float& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float& operator=(Float&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Float& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Float* internal_default_instance() {
    return reinterpret_cast<const Float*>(
               &_Float_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Float& a, Float& b) {
    a.Swap(&b);
  }
  inline void Swap(Float* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Float* New() const final {
    return CreateMaybeMessage<Float>(nullptr);
  }

  Float* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Float>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Float& from);
  void MergeFrom(const Float& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Float";
  }
  protected:
  explicit Float(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalFieldNumber = 2,
    kValFieldNumber = 1,
  };
  // .perception.common.EvalStats eval = 2;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // float val = 1;
  void clear_val();
  float val() const;
  void set_val(float value);
  private:
  float _internal_val() const;
  void _internal_set_val(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.Float)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::EvalStats* eval_;
  float val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class UInt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.UInt) */ {
 public:
  inline UInt() : UInt(nullptr) {};
  virtual ~UInt();

  UInt(const UInt& from);
  UInt(UInt&& from) noexcept
    : UInt() {
    *this = ::std::move(from);
  }

  inline UInt& operator=(const UInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline UInt& operator=(UInt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UInt* internal_default_instance() {
    return reinterpret_cast<const UInt*>(
               &_UInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UInt& a, UInt& b) {
    a.Swap(&b);
  }
  inline void Swap(UInt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UInt* New() const final {
    return CreateMaybeMessage<UInt>(nullptr);
  }

  UInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UInt& from);
  void MergeFrom(const UInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.UInt";
  }
  protected:
  explicit UInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalFieldNumber = 2,
    kValFieldNumber = 1,
  };
  // .perception.common.EvalStats eval = 2;
  bool has_eval() const;
  private:
  bool _internal_has_eval() const;
  public:
  void clear_eval();
  const ::perception::common::EvalStats& eval() const;
  ::perception::common::EvalStats* release_eval();
  ::perception::common::EvalStats* mutable_eval();
  void set_allocated_eval(::perception::common::EvalStats* eval);
  private:
  const ::perception::common::EvalStats& _internal_eval() const;
  ::perception::common::EvalStats* _internal_mutable_eval();
  public:
  void unsafe_arena_set_allocated_eval(
      ::perception::common::EvalStats* eval);
  ::perception::common::EvalStats* unsafe_arena_release_eval();

  // uint32 val = 1;
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::uint32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.UInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::EvalStats* eval_;
  ::PROTOBUF_NAMESPACE_ID::uint32 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// -------------------------------------------------------------------

class FloatArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.FloatArray) */ {
 public:
  inline FloatArray() : FloatArray(nullptr) {};
  virtual ~FloatArray();

  FloatArray(const FloatArray& from);
  FloatArray(FloatArray&& from) noexcept
    : FloatArray() {
    *this = ::std::move(from);
  }

  inline FloatArray& operator=(const FloatArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatArray& operator=(FloatArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatArray* internal_default_instance() {
    return reinterpret_cast<const FloatArray*>(
               &_FloatArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(FloatArray& a, FloatArray& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatArray* New() const final {
    return CreateMaybeMessage<FloatArray>(nullptr);
  }

  FloatArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatArray& from);
  void MergeFrom(const FloatArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.FloatArray";
  }
  protected:
  explicit FloatArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_2eproto);
    return ::descriptor_table_geometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValsFieldNumber = 1,
    kConfFieldNumber = 2,
  };
  // repeated float vals = 1;
  int vals_size() const;
  private:
  int _internal_vals_size() const;
  public:
  void clear_vals();
  private:
  float _internal_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vals() const;
  void _internal_add_vals(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vals();
  public:
  float vals(int index) const;
  void set_vals(int index, float value);
  void add_vals(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vals();

  // float conf = 2;
  void clear_conf();
  float conf() const;
  void set_conf(float value);
  private:
  float _internal_conf() const;
  void _internal_set_conf(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.common.FloatArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vals_;
  mutable std::atomic<int> _vals_cached_byte_size_;
  float conf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EvalStats

// float mean = 1;
inline void EvalStats::clear_mean() {
  mean_ = 0;
}
inline float EvalStats::_internal_mean() const {
  return mean_;
}
inline float EvalStats::mean() const {
  // @@protoc_insertion_point(field_get:perception.common.EvalStats.mean)
  return _internal_mean();
}
inline void EvalStats::_internal_set_mean(float value) {
  
  mean_ = value;
}
inline void EvalStats::set_mean(float value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:perception.common.EvalStats.mean)
}

// float std = 2;
inline void EvalStats::clear_std() {
  std_ = 0;
}
inline float EvalStats::_internal_std() const {
  return std_;
}
inline float EvalStats::std() const {
  // @@protoc_insertion_point(field_get:perception.common.EvalStats.std)
  return _internal_std();
}
inline void EvalStats::_internal_set_std(float value) {
  
  std_ = value;
}
inline void EvalStats::set_std(float value) {
  _internal_set_std(value);
  // @@protoc_insertion_point(field_set:perception.common.EvalStats.std)
}

// float prob = 3;
inline void EvalStats::clear_prob() {
  prob_ = 0;
}
inline float EvalStats::_internal_prob() const {
  return prob_;
}
inline float EvalStats::prob() const {
  // @@protoc_insertion_point(field_get:perception.common.EvalStats.prob)
  return _internal_prob();
}
inline void EvalStats::_internal_set_prob(float value) {
  
  prob_ = value;
}
inline void EvalStats::set_prob(float value) {
  _internal_set_prob(value);
  // @@protoc_insertion_point(field_set:perception.common.EvalStats.prob)
}

// -------------------------------------------------------------------

// Point2D

// double x = 1;
inline void Point2D::clear_x() {
  x_ = 0;
}
inline double Point2D::_internal_x() const {
  return x_;
}
inline double Point2D::x() const {
  // @@protoc_insertion_point(field_get:perception.common.Point2D.x)
  return _internal_x();
}
inline void Point2D::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point2D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.common.Point2D.x)
}

// double y = 2;
inline void Point2D::clear_y() {
  y_ = 0;
}
inline double Point2D::_internal_y() const {
  return y_;
}
inline double Point2D::y() const {
  // @@protoc_insertion_point(field_get:perception.common.Point2D.y)
  return _internal_y();
}
inline void Point2D::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point2D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.common.Point2D.y)
}

// .perception.common.EvalStats eval = 3;
inline bool Point2D::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Point2D::has_eval() const {
  return _internal_has_eval();
}
inline void Point2D::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Point2D::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Point2D::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Point2D.eval)
  return _internal_eval();
}
inline void Point2D::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Point2D.eval)
}
inline ::perception::common::EvalStats* Point2D::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Point2D::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Point2D.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Point2D::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Point2D::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Point2D.eval)
  return _internal_mutable_eval();
}
inline void Point2D::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Point2D.eval)
}

// -------------------------------------------------------------------

// Point3D

// double x = 1;
inline void Point3D::clear_x() {
  x_ = 0;
}
inline double Point3D::_internal_x() const {
  return x_;
}
inline double Point3D::x() const {
  // @@protoc_insertion_point(field_get:perception.common.Point3D.x)
  return _internal_x();
}
inline void Point3D::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point3D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.common.Point3D.x)
}

// double y = 2;
inline void Point3D::clear_y() {
  y_ = 0;
}
inline double Point3D::_internal_y() const {
  return y_;
}
inline double Point3D::y() const {
  // @@protoc_insertion_point(field_get:perception.common.Point3D.y)
  return _internal_y();
}
inline void Point3D::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point3D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.common.Point3D.y)
}

// double z = 3;
inline void Point3D::clear_z() {
  z_ = 0;
}
inline double Point3D::_internal_z() const {
  return z_;
}
inline double Point3D::z() const {
  // @@protoc_insertion_point(field_get:perception.common.Point3D.z)
  return _internal_z();
}
inline void Point3D::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Point3D::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:perception.common.Point3D.z)
}

// .perception.common.EvalStats eval = 4;
inline bool Point3D::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Point3D::has_eval() const {
  return _internal_has_eval();
}
inline void Point3D::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Point3D::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Point3D::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Point3D.eval)
  return _internal_eval();
}
inline void Point3D::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Point3D.eval)
}
inline ::perception::common::EvalStats* Point3D::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Point3D::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Point3D.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Point3D::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Point3D::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Point3D.eval)
  return _internal_mutable_eval();
}
inline void Point3D::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Point3D.eval)
}

// -------------------------------------------------------------------

// XYZ

// double x = 1;
inline void XYZ::clear_x() {
  x_ = 0;
}
inline double XYZ::_internal_x() const {
  return x_;
}
inline double XYZ::x() const {
  // @@protoc_insertion_point(field_get:perception.common.XYZ.x)
  return _internal_x();
}
inline void XYZ::_internal_set_x(double value) {
  
  x_ = value;
}
inline void XYZ::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.common.XYZ.x)
}

// double y = 2;
inline void XYZ::clear_y() {
  y_ = 0;
}
inline double XYZ::_internal_y() const {
  return y_;
}
inline double XYZ::y() const {
  // @@protoc_insertion_point(field_get:perception.common.XYZ.y)
  return _internal_y();
}
inline void XYZ::_internal_set_y(double value) {
  
  y_ = value;
}
inline void XYZ::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.common.XYZ.y)
}

// double z = 3;
inline void XYZ::clear_z() {
  z_ = 0;
}
inline double XYZ::_internal_z() const {
  return z_;
}
inline double XYZ::z() const {
  // @@protoc_insertion_point(field_get:perception.common.XYZ.z)
  return _internal_z();
}
inline void XYZ::_internal_set_z(double value) {
  
  z_ = value;
}
inline void XYZ::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:perception.common.XYZ.z)
}

// repeated .perception.common.EvalStats evals = 4;
inline int XYZ::_internal_evals_size() const {
  return evals_.size();
}
inline int XYZ::evals_size() const {
  return _internal_evals_size();
}
inline void XYZ::clear_evals() {
  evals_.Clear();
}
inline ::perception::common::EvalStats* XYZ::mutable_evals(int index) {
  // @@protoc_insertion_point(field_mutable:perception.common.XYZ.evals)
  return evals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >*
XYZ::mutable_evals() {
  // @@protoc_insertion_point(field_mutable_list:perception.common.XYZ.evals)
  return &evals_;
}
inline const ::perception::common::EvalStats& XYZ::_internal_evals(int index) const {
  return evals_.Get(index);
}
inline const ::perception::common::EvalStats& XYZ::evals(int index) const {
  // @@protoc_insertion_point(field_get:perception.common.XYZ.evals)
  return _internal_evals(index);
}
inline ::perception::common::EvalStats* XYZ::_internal_add_evals() {
  return evals_.Add();
}
inline ::perception::common::EvalStats* XYZ::add_evals() {
  // @@protoc_insertion_point(field_add:perception.common.XYZ.evals)
  return _internal_add_evals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >&
XYZ::evals() const {
  // @@protoc_insertion_point(field_list:perception.common.XYZ.evals)
  return evals_;
}

// -------------------------------------------------------------------

// XY

// float x = 1;
inline void XY::clear_x() {
  x_ = 0;
}
inline float XY::_internal_x() const {
  return x_;
}
inline float XY::x() const {
  // @@protoc_insertion_point(field_get:perception.common.XY.x)
  return _internal_x();
}
inline void XY::_internal_set_x(float value) {
  
  x_ = value;
}
inline void XY::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.common.XY.x)
}

// float y = 2;
inline void XY::clear_y() {
  y_ = 0;
}
inline float XY::_internal_y() const {
  return y_;
}
inline float XY::y() const {
  // @@protoc_insertion_point(field_get:perception.common.XY.y)
  return _internal_y();
}
inline void XY::_internal_set_y(float value) {
  
  y_ = value;
}
inline void XY::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.common.XY.y)
}

// int64 tm = 3;
inline void XY::clear_tm() {
  tm_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 XY::_internal_tm() const {
  return tm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 XY::tm() const {
  // @@protoc_insertion_point(field_get:perception.common.XY.tm)
  return _internal_tm();
}
inline void XY::_internal_set_tm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tm_ = value;
}
inline void XY::set_tm(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tm(value);
  // @@protoc_insertion_point(field_set:perception.common.XY.tm)
}

// -------------------------------------------------------------------

// Size3D

// double w = 1;
inline void Size3D::clear_w() {
  w_ = 0;
}
inline double Size3D::_internal_w() const {
  return w_;
}
inline double Size3D::w() const {
  // @@protoc_insertion_point(field_get:perception.common.Size3D.w)
  return _internal_w();
}
inline void Size3D::_internal_set_w(double value) {
  
  w_ = value;
}
inline void Size3D::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:perception.common.Size3D.w)
}

// double h = 2;
inline void Size3D::clear_h() {
  h_ = 0;
}
inline double Size3D::_internal_h() const {
  return h_;
}
inline double Size3D::h() const {
  // @@protoc_insertion_point(field_get:perception.common.Size3D.h)
  return _internal_h();
}
inline void Size3D::_internal_set_h(double value) {
  
  h_ = value;
}
inline void Size3D::set_h(double value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:perception.common.Size3D.h)
}

// double l = 3;
inline void Size3D::clear_l() {
  l_ = 0;
}
inline double Size3D::_internal_l() const {
  return l_;
}
inline double Size3D::l() const {
  // @@protoc_insertion_point(field_get:perception.common.Size3D.l)
  return _internal_l();
}
inline void Size3D::_internal_set_l(double value) {
  
  l_ = value;
}
inline void Size3D::set_l(double value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:perception.common.Size3D.l)
}

// repeated .perception.common.EvalStats evals = 4;
inline int Size3D::_internal_evals_size() const {
  return evals_.size();
}
inline int Size3D::evals_size() const {
  return _internal_evals_size();
}
inline void Size3D::clear_evals() {
  evals_.Clear();
}
inline ::perception::common::EvalStats* Size3D::mutable_evals(int index) {
  // @@protoc_insertion_point(field_mutable:perception.common.Size3D.evals)
  return evals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >*
Size3D::mutable_evals() {
  // @@protoc_insertion_point(field_mutable_list:perception.common.Size3D.evals)
  return &evals_;
}
inline const ::perception::common::EvalStats& Size3D::_internal_evals(int index) const {
  return evals_.Get(index);
}
inline const ::perception::common::EvalStats& Size3D::evals(int index) const {
  // @@protoc_insertion_point(field_get:perception.common.Size3D.evals)
  return _internal_evals(index);
}
inline ::perception::common::EvalStats* Size3D::_internal_add_evals() {
  return evals_.Add();
}
inline ::perception::common::EvalStats* Size3D::add_evals() {
  // @@protoc_insertion_point(field_add:perception.common.Size3D.evals)
  return _internal_add_evals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >&
Size3D::evals() const {
  // @@protoc_insertion_point(field_list:perception.common.Size3D.evals)
  return evals_;
}

// -------------------------------------------------------------------

// Point

// int32 x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:perception.common.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Point::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.common.Point.x)
}

// int32 y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:perception.common.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Point::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.common.Point.y)
}

// .perception.common.EvalStats eval = 3;
inline bool Point::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Point::has_eval() const {
  return _internal_has_eval();
}
inline void Point::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Point::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Point::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Point.eval)
  return _internal_eval();
}
inline void Point::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Point.eval)
}
inline ::perception::common::EvalStats* Point::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Point::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Point.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Point::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Point::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Point.eval)
  return _internal_mutable_eval();
}
inline void Point::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Point.eval)
}

// -------------------------------------------------------------------

// Point2f

// float x = 1;
inline void Point2f::clear_x() {
  x_ = 0;
}
inline float Point2f::_internal_x() const {
  return x_;
}
inline float Point2f::x() const {
  // @@protoc_insertion_point(field_get:perception.common.Point2f.x)
  return _internal_x();
}
inline void Point2f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.common.Point2f.x)
}

// float y = 2;
inline void Point2f::clear_y() {
  y_ = 0;
}
inline float Point2f::_internal_y() const {
  return y_;
}
inline float Point2f::y() const {
  // @@protoc_insertion_point(field_get:perception.common.Point2f.y)
  return _internal_y();
}
inline void Point2f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.common.Point2f.y)
}

// .perception.common.EvalStats eval = 3;
inline bool Point2f::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Point2f::has_eval() const {
  return _internal_has_eval();
}
inline void Point2f::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Point2f::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Point2f::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Point2f.eval)
  return _internal_eval();
}
inline void Point2f::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Point2f.eval)
}
inline ::perception::common::EvalStats* Point2f::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Point2f::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Point2f.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Point2f::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Point2f::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Point2f.eval)
  return _internal_mutable_eval();
}
inline void Point2f::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Point2f.eval)
}

// -------------------------------------------------------------------

// Point3f

// float x = 1;
inline void Point3f::clear_x() {
  x_ = 0;
}
inline float Point3f::_internal_x() const {
  return x_;
}
inline float Point3f::x() const {
  // @@protoc_insertion_point(field_get:perception.common.Point3f.x)
  return _internal_x();
}
inline void Point3f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.common.Point3f.x)
}

// float y = 2;
inline void Point3f::clear_y() {
  y_ = 0;
}
inline float Point3f::_internal_y() const {
  return y_;
}
inline float Point3f::y() const {
  // @@protoc_insertion_point(field_get:perception.common.Point3f.y)
  return _internal_y();
}
inline void Point3f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.common.Point3f.y)
}

// float z = 3;
inline void Point3f::clear_z() {
  z_ = 0;
}
inline float Point3f::_internal_z() const {
  return z_;
}
inline float Point3f::z() const {
  // @@protoc_insertion_point(field_get:perception.common.Point3f.z)
  return _internal_z();
}
inline void Point3f::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Point3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:perception.common.Point3f.z)
}

// .perception.common.EvalStats eval = 4;
inline bool Point3f::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Point3f::has_eval() const {
  return _internal_has_eval();
}
inline void Point3f::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Point3f::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Point3f::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Point3f.eval)
  return _internal_eval();
}
inline void Point3f::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Point3f.eval)
}
inline ::perception::common::EvalStats* Point3f::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Point3f::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Point3f.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Point3f::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Point3f::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Point3f.eval)
  return _internal_mutable_eval();
}
inline void Point3f::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Point3f.eval)
}

// -------------------------------------------------------------------

// HafQuaternion

// double x = 1;
inline void HafQuaternion::clear_x() {
  x_ = 0;
}
inline double HafQuaternion::_internal_x() const {
  return x_;
}
inline double HafQuaternion::x() const {
  // @@protoc_insertion_point(field_get:perception.common.HafQuaternion.x)
  return _internal_x();
}
inline void HafQuaternion::_internal_set_x(double value) {
  
  x_ = value;
}
inline void HafQuaternion::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.common.HafQuaternion.x)
}

// double y = 2;
inline void HafQuaternion::clear_y() {
  y_ = 0;
}
inline double HafQuaternion::_internal_y() const {
  return y_;
}
inline double HafQuaternion::y() const {
  // @@protoc_insertion_point(field_get:perception.common.HafQuaternion.y)
  return _internal_y();
}
inline void HafQuaternion::_internal_set_y(double value) {
  
  y_ = value;
}
inline void HafQuaternion::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.common.HafQuaternion.y)
}

// double z = 3;
inline void HafQuaternion::clear_z() {
  z_ = 0;
}
inline double HafQuaternion::_internal_z() const {
  return z_;
}
inline double HafQuaternion::z() const {
  // @@protoc_insertion_point(field_get:perception.common.HafQuaternion.z)
  return _internal_z();
}
inline void HafQuaternion::_internal_set_z(double value) {
  
  z_ = value;
}
inline void HafQuaternion::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:perception.common.HafQuaternion.z)
}

// double w = 4;
inline void HafQuaternion::clear_w() {
  w_ = 0;
}
inline double HafQuaternion::_internal_w() const {
  return w_;
}
inline double HafQuaternion::w() const {
  // @@protoc_insertion_point(field_get:perception.common.HafQuaternion.w)
  return _internal_w();
}
inline void HafQuaternion::_internal_set_w(double value) {
  
  w_ = value;
}
inline void HafQuaternion::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:perception.common.HafQuaternion.w)
}

// .perception.common.EvalStats eval = 5;
inline bool HafQuaternion::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool HafQuaternion::has_eval() const {
  return _internal_has_eval();
}
inline void HafQuaternion::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& HafQuaternion::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& HafQuaternion::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.HafQuaternion.eval)
  return _internal_eval();
}
inline void HafQuaternion::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.HafQuaternion.eval)
}
inline ::perception::common::EvalStats* HafQuaternion::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* HafQuaternion::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.HafQuaternion.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* HafQuaternion::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* HafQuaternion::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.HafQuaternion.eval)
  return _internal_mutable_eval();
}
inline void HafQuaternion::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.HafQuaternion.eval)
}

// -------------------------------------------------------------------

// Angle3f

// float center = 1;
inline void Angle3f::clear_center() {
  center_ = 0;
}
inline float Angle3f::_internal_center() const {
  return center_;
}
inline float Angle3f::center() const {
  // @@protoc_insertion_point(field_get:perception.common.Angle3f.center)
  return _internal_center();
}
inline void Angle3f::_internal_set_center(float value) {
  
  center_ = value;
}
inline void Angle3f::set_center(float value) {
  _internal_set_center(value);
  // @@protoc_insertion_point(field_set:perception.common.Angle3f.center)
}

// float left = 2;
inline void Angle3f::clear_left() {
  left_ = 0;
}
inline float Angle3f::_internal_left() const {
  return left_;
}
inline float Angle3f::left() const {
  // @@protoc_insertion_point(field_get:perception.common.Angle3f.left)
  return _internal_left();
}
inline void Angle3f::_internal_set_left(float value) {
  
  left_ = value;
}
inline void Angle3f::set_left(float value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:perception.common.Angle3f.left)
}

// float right = 3;
inline void Angle3f::clear_right() {
  right_ = 0;
}
inline float Angle3f::_internal_right() const {
  return right_;
}
inline float Angle3f::right() const {
  // @@protoc_insertion_point(field_get:perception.common.Angle3f.right)
  return _internal_right();
}
inline void Angle3f::_internal_set_right(float value) {
  
  right_ = value;
}
inline void Angle3f::set_right(float value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:perception.common.Angle3f.right)
}

// repeated .perception.common.EvalStats evals = 4;
inline int Angle3f::_internal_evals_size() const {
  return evals_.size();
}
inline int Angle3f::evals_size() const {
  return _internal_evals_size();
}
inline void Angle3f::clear_evals() {
  evals_.Clear();
}
inline ::perception::common::EvalStats* Angle3f::mutable_evals(int index) {
  // @@protoc_insertion_point(field_mutable:perception.common.Angle3f.evals)
  return evals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >*
Angle3f::mutable_evals() {
  // @@protoc_insertion_point(field_mutable_list:perception.common.Angle3f.evals)
  return &evals_;
}
inline const ::perception::common::EvalStats& Angle3f::_internal_evals(int index) const {
  return evals_.Get(index);
}
inline const ::perception::common::EvalStats& Angle3f::evals(int index) const {
  // @@protoc_insertion_point(field_get:perception.common.Angle3f.evals)
  return _internal_evals(index);
}
inline ::perception::common::EvalStats* Angle3f::_internal_add_evals() {
  return evals_.Add();
}
inline ::perception::common::EvalStats* Angle3f::add_evals() {
  // @@protoc_insertion_point(field_add:perception.common.Angle3f.evals)
  return _internal_add_evals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >&
Angle3f::evals() const {
  // @@protoc_insertion_point(field_list:perception.common.Angle3f.evals)
  return evals_;
}

// -------------------------------------------------------------------

// Point2fList

// repeated .perception.common.Point2f pts_list = 1;
inline int Point2fList::_internal_pts_list_size() const {
  return pts_list_.size();
}
inline int Point2fList::pts_list_size() const {
  return _internal_pts_list_size();
}
inline void Point2fList::clear_pts_list() {
  pts_list_.Clear();
}
inline ::perception::common::Point2f* Point2fList::mutable_pts_list(int index) {
  // @@protoc_insertion_point(field_mutable:perception.common.Point2fList.pts_list)
  return pts_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point2f >*
Point2fList::mutable_pts_list() {
  // @@protoc_insertion_point(field_mutable_list:perception.common.Point2fList.pts_list)
  return &pts_list_;
}
inline const ::perception::common::Point2f& Point2fList::_internal_pts_list(int index) const {
  return pts_list_.Get(index);
}
inline const ::perception::common::Point2f& Point2fList::pts_list(int index) const {
  // @@protoc_insertion_point(field_get:perception.common.Point2fList.pts_list)
  return _internal_pts_list(index);
}
inline ::perception::common::Point2f* Point2fList::_internal_add_pts_list() {
  return pts_list_.Add();
}
inline ::perception::common::Point2f* Point2fList::add_pts_list() {
  // @@protoc_insertion_point(field_add:perception.common.Point2fList.pts_list)
  return _internal_add_pts_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point2f >&
Point2fList::pts_list() const {
  // @@protoc_insertion_point(field_list:perception.common.Point2fList.pts_list)
  return pts_list_;
}

// .perception.common.EvalStats eval = 2;
inline bool Point2fList::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Point2fList::has_eval() const {
  return _internal_has_eval();
}
inline void Point2fList::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Point2fList::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Point2fList::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Point2fList.eval)
  return _internal_eval();
}
inline void Point2fList::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Point2fList.eval)
}
inline ::perception::common::EvalStats* Point2fList::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Point2fList::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Point2fList.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Point2fList::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Point2fList::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Point2fList.eval)
  return _internal_mutable_eval();
}
inline void Point2fList::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Point2fList.eval)
}

// -------------------------------------------------------------------

// Point2DList

// repeated .perception.common.Point2D pts_list = 1;
inline int Point2DList::_internal_pts_list_size() const {
  return pts_list_.size();
}
inline int Point2DList::pts_list_size() const {
  return _internal_pts_list_size();
}
inline void Point2DList::clear_pts_list() {
  pts_list_.Clear();
}
inline ::perception::common::Point2D* Point2DList::mutable_pts_list(int index) {
  // @@protoc_insertion_point(field_mutable:perception.common.Point2DList.pts_list)
  return pts_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point2D >*
Point2DList::mutable_pts_list() {
  // @@protoc_insertion_point(field_mutable_list:perception.common.Point2DList.pts_list)
  return &pts_list_;
}
inline const ::perception::common::Point2D& Point2DList::_internal_pts_list(int index) const {
  return pts_list_.Get(index);
}
inline const ::perception::common::Point2D& Point2DList::pts_list(int index) const {
  // @@protoc_insertion_point(field_get:perception.common.Point2DList.pts_list)
  return _internal_pts_list(index);
}
inline ::perception::common::Point2D* Point2DList::_internal_add_pts_list() {
  return pts_list_.Add();
}
inline ::perception::common::Point2D* Point2DList::add_pts_list() {
  // @@protoc_insertion_point(field_add:perception.common.Point2DList.pts_list)
  return _internal_add_pts_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point2D >&
Point2DList::pts_list() const {
  // @@protoc_insertion_point(field_list:perception.common.Point2DList.pts_list)
  return pts_list_;
}

// .perception.common.EvalStats eval = 2;
inline bool Point2DList::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Point2DList::has_eval() const {
  return _internal_has_eval();
}
inline void Point2DList::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Point2DList::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Point2DList::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Point2DList.eval)
  return _internal_eval();
}
inline void Point2DList::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Point2DList.eval)
}
inline ::perception::common::EvalStats* Point2DList::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Point2DList::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Point2DList.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Point2DList::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Point2DList::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Point2DList.eval)
  return _internal_mutable_eval();
}
inline void Point2DList::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Point2DList.eval)
}

// -------------------------------------------------------------------

// Point3DList

// repeated .perception.common.Point3D pts_list = 1;
inline int Point3DList::_internal_pts_list_size() const {
  return pts_list_.size();
}
inline int Point3DList::pts_list_size() const {
  return _internal_pts_list_size();
}
inline void Point3DList::clear_pts_list() {
  pts_list_.Clear();
}
inline ::perception::common::Point3D* Point3DList::mutable_pts_list(int index) {
  // @@protoc_insertion_point(field_mutable:perception.common.Point3DList.pts_list)
  return pts_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >*
Point3DList::mutable_pts_list() {
  // @@protoc_insertion_point(field_mutable_list:perception.common.Point3DList.pts_list)
  return &pts_list_;
}
inline const ::perception::common::Point3D& Point3DList::_internal_pts_list(int index) const {
  return pts_list_.Get(index);
}
inline const ::perception::common::Point3D& Point3DList::pts_list(int index) const {
  // @@protoc_insertion_point(field_get:perception.common.Point3DList.pts_list)
  return _internal_pts_list(index);
}
inline ::perception::common::Point3D* Point3DList::_internal_add_pts_list() {
  return pts_list_.Add();
}
inline ::perception::common::Point3D* Point3DList::add_pts_list() {
  // @@protoc_insertion_point(field_add:perception.common.Point3DList.pts_list)
  return _internal_add_pts_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >&
Point3DList::pts_list() const {
  // @@protoc_insertion_point(field_list:perception.common.Point3DList.pts_list)
  return pts_list_;
}

// .perception.common.EvalStats eval = 2;
inline bool Point3DList::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Point3DList::has_eval() const {
  return _internal_has_eval();
}
inline void Point3DList::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Point3DList::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Point3DList::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Point3DList.eval)
  return _internal_eval();
}
inline void Point3DList::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Point3DList.eval)
}
inline ::perception::common::EvalStats* Point3DList::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Point3DList::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Point3DList.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Point3DList::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Point3DList::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Point3DList.eval)
  return _internal_mutable_eval();
}
inline void Point3DList::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Point3DList.eval)
}

// -------------------------------------------------------------------

// Point3fList

// repeated .perception.common.Point3f pts_list = 1;
inline int Point3fList::_internal_pts_list_size() const {
  return pts_list_.size();
}
inline int Point3fList::pts_list_size() const {
  return _internal_pts_list_size();
}
inline void Point3fList::clear_pts_list() {
  pts_list_.Clear();
}
inline ::perception::common::Point3f* Point3fList::mutable_pts_list(int index) {
  // @@protoc_insertion_point(field_mutable:perception.common.Point3fList.pts_list)
  return pts_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3f >*
Point3fList::mutable_pts_list() {
  // @@protoc_insertion_point(field_mutable_list:perception.common.Point3fList.pts_list)
  return &pts_list_;
}
inline const ::perception::common::Point3f& Point3fList::_internal_pts_list(int index) const {
  return pts_list_.Get(index);
}
inline const ::perception::common::Point3f& Point3fList::pts_list(int index) const {
  // @@protoc_insertion_point(field_get:perception.common.Point3fList.pts_list)
  return _internal_pts_list(index);
}
inline ::perception::common::Point3f* Point3fList::_internal_add_pts_list() {
  return pts_list_.Add();
}
inline ::perception::common::Point3f* Point3fList::add_pts_list() {
  // @@protoc_insertion_point(field_add:perception.common.Point3fList.pts_list)
  return _internal_add_pts_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3f >&
Point3fList::pts_list() const {
  // @@protoc_insertion_point(field_list:perception.common.Point3fList.pts_list)
  return pts_list_;
}

// .perception.common.EvalStats eval = 2;
inline bool Point3fList::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Point3fList::has_eval() const {
  return _internal_has_eval();
}
inline void Point3fList::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Point3fList::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Point3fList::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Point3fList.eval)
  return _internal_eval();
}
inline void Point3fList::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Point3fList.eval)
}
inline ::perception::common::EvalStats* Point3fList::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Point3fList::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Point3fList.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Point3fList::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Point3fList::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Point3fList.eval)
  return _internal_mutable_eval();
}
inline void Point3fList::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Point3fList.eval)
}

// -------------------------------------------------------------------

// PointList

// repeated .perception.common.Point pts_list = 1;
inline int PointList::_internal_pts_list_size() const {
  return pts_list_.size();
}
inline int PointList::pts_list_size() const {
  return _internal_pts_list_size();
}
inline void PointList::clear_pts_list() {
  pts_list_.Clear();
}
inline ::perception::common::Point* PointList::mutable_pts_list(int index) {
  // @@protoc_insertion_point(field_mutable:perception.common.PointList.pts_list)
  return pts_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point >*
PointList::mutable_pts_list() {
  // @@protoc_insertion_point(field_mutable_list:perception.common.PointList.pts_list)
  return &pts_list_;
}
inline const ::perception::common::Point& PointList::_internal_pts_list(int index) const {
  return pts_list_.Get(index);
}
inline const ::perception::common::Point& PointList::pts_list(int index) const {
  // @@protoc_insertion_point(field_get:perception.common.PointList.pts_list)
  return _internal_pts_list(index);
}
inline ::perception::common::Point* PointList::_internal_add_pts_list() {
  return pts_list_.Add();
}
inline ::perception::common::Point* PointList::add_pts_list() {
  // @@protoc_insertion_point(field_add:perception.common.PointList.pts_list)
  return _internal_add_pts_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point >&
PointList::pts_list() const {
  // @@protoc_insertion_point(field_list:perception.common.PointList.pts_list)
  return pts_list_;
}

// .perception.common.EvalStats eval = 2;
inline bool PointList::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool PointList::has_eval() const {
  return _internal_has_eval();
}
inline void PointList::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& PointList::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& PointList::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.PointList.eval)
  return _internal_eval();
}
inline void PointList::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.PointList.eval)
}
inline ::perception::common::EvalStats* PointList::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* PointList::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.PointList.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* PointList::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* PointList::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.PointList.eval)
  return _internal_mutable_eval();
}
inline void PointList::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.PointList.eval)
}

// -------------------------------------------------------------------

// Rect

// int32 x = 1;
inline void Rect::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::x() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect.x)
  return _internal_x();
}
inline void Rect::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Rect::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.common.Rect.x)
}

// int32 y = 2;
inline void Rect::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::y() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect.y)
  return _internal_y();
}
inline void Rect::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Rect::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.common.Rect.y)
}

// int32 w = 3;
inline void Rect::clear_w() {
  w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::w() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect.w)
  return _internal_w();
}
inline void Rect::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  w_ = value;
}
inline void Rect::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:perception.common.Rect.w)
}

// int32 h = 4;
inline void Rect::clear_h() {
  h_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::h() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect.h)
  return _internal_h();
}
inline void Rect::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  h_ = value;
}
inline void Rect::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:perception.common.Rect.h)
}

// .perception.common.EvalStats eval = 5;
inline bool Rect::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Rect::has_eval() const {
  return _internal_has_eval();
}
inline void Rect::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Rect::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Rect::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect.eval)
  return _internal_eval();
}
inline void Rect::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Rect.eval)
}
inline ::perception::common::EvalStats* Rect::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Rect::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Rect.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Rect::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Rect::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Rect.eval)
  return _internal_mutable_eval();
}
inline void Rect::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Rect.eval)
}

// -------------------------------------------------------------------

// Rect2f

// float x = 1;
inline void Rect2f::clear_x() {
  x_ = 0;
}
inline float Rect2f::_internal_x() const {
  return x_;
}
inline float Rect2f::x() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect2f.x)
  return _internal_x();
}
inline void Rect2f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Rect2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.common.Rect2f.x)
}

// float y = 2;
inline void Rect2f::clear_y() {
  y_ = 0;
}
inline float Rect2f::_internal_y() const {
  return y_;
}
inline float Rect2f::y() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect2f.y)
  return _internal_y();
}
inline void Rect2f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Rect2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.common.Rect2f.y)
}

// float w = 3;
inline void Rect2f::clear_w() {
  w_ = 0;
}
inline float Rect2f::_internal_w() const {
  return w_;
}
inline float Rect2f::w() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect2f.w)
  return _internal_w();
}
inline void Rect2f::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Rect2f::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:perception.common.Rect2f.w)
}

// float h = 4;
inline void Rect2f::clear_h() {
  h_ = 0;
}
inline float Rect2f::_internal_h() const {
  return h_;
}
inline float Rect2f::h() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect2f.h)
  return _internal_h();
}
inline void Rect2f::_internal_set_h(float value) {
  
  h_ = value;
}
inline void Rect2f::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:perception.common.Rect2f.h)
}

// .perception.common.EvalStats eval = 5;
inline bool Rect2f::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Rect2f::has_eval() const {
  return _internal_has_eval();
}
inline void Rect2f::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Rect2f::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Rect2f::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect2f.eval)
  return _internal_eval();
}
inline void Rect2f::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Rect2f.eval)
}
inline ::perception::common::EvalStats* Rect2f::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Rect2f::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Rect2f.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Rect2f::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Rect2f::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Rect2f.eval)
  return _internal_mutable_eval();
}
inline void Rect2f::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Rect2f.eval)
}

// -------------------------------------------------------------------

// Rect3D

// .perception.common.Point3D center = 1;
inline bool Rect3D::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool Rect3D::has_center() const {
  return _internal_has_center();
}
inline void Rect3D::clear_center() {
  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::perception::common::Point3D& Rect3D::_internal_center() const {
  const ::perception::common::Point3D* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& Rect3D::center() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect3D.center)
  return _internal_center();
}
inline void Rect3D::unsafe_arena_set_allocated_center(
    ::perception::common::Point3D* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Rect3D.center)
}
inline ::perception::common::Point3D* Rect3D::release_center() {
  auto temp = unsafe_arena_release_center();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* Rect3D::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:perception.common.Rect3D.center)
  
  ::perception::common::Point3D* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* Rect3D::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::perception::common::Point3D* Rect3D::mutable_center() {
  // @@protoc_insertion_point(field_mutable:perception.common.Rect3D.center)
  return _internal_mutable_center();
}
inline void Rect3D::set_allocated_center(::perception::common::Point3D* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Rect3D.center)
}

// .perception.common.Point3D center_std_dev = 2;
inline bool Rect3D::_internal_has_center_std_dev() const {
  return this != internal_default_instance() && center_std_dev_ != nullptr;
}
inline bool Rect3D::has_center_std_dev() const {
  return _internal_has_center_std_dev();
}
inline void Rect3D::clear_center_std_dev() {
  if (GetArena() == nullptr && center_std_dev_ != nullptr) {
    delete center_std_dev_;
  }
  center_std_dev_ = nullptr;
}
inline const ::perception::common::Point3D& Rect3D::_internal_center_std_dev() const {
  const ::perception::common::Point3D* p = center_std_dev_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& Rect3D::center_std_dev() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect3D.center_std_dev)
  return _internal_center_std_dev();
}
inline void Rect3D::unsafe_arena_set_allocated_center_std_dev(
    ::perception::common::Point3D* center_std_dev) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_std_dev_);
  }
  center_std_dev_ = center_std_dev;
  if (center_std_dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Rect3D.center_std_dev)
}
inline ::perception::common::Point3D* Rect3D::release_center_std_dev() {
  auto temp = unsafe_arena_release_center_std_dev();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* Rect3D::unsafe_arena_release_center_std_dev() {
  // @@protoc_insertion_point(field_release:perception.common.Rect3D.center_std_dev)
  
  ::perception::common::Point3D* temp = center_std_dev_;
  center_std_dev_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* Rect3D::_internal_mutable_center_std_dev() {
  
  if (center_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    center_std_dev_ = p;
  }
  return center_std_dev_;
}
inline ::perception::common::Point3D* Rect3D::mutable_center_std_dev() {
  // @@protoc_insertion_point(field_mutable:perception.common.Rect3D.center_std_dev)
  return _internal_mutable_center_std_dev();
}
inline void Rect3D::set_allocated_center_std_dev(::perception::common::Point3D* center_std_dev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_std_dev_;
  }
  if (center_std_dev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center_std_dev);
    if (message_arena != submessage_arena) {
      center_std_dev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_std_dev, submessage_arena);
    }
    
  } else {
    
  }
  center_std_dev_ = center_std_dev;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Rect3D.center_std_dev)
}

// .perception.common.Point3D size_lwh = 3;
inline bool Rect3D::_internal_has_size_lwh() const {
  return this != internal_default_instance() && size_lwh_ != nullptr;
}
inline bool Rect3D::has_size_lwh() const {
  return _internal_has_size_lwh();
}
inline void Rect3D::clear_size_lwh() {
  if (GetArena() == nullptr && size_lwh_ != nullptr) {
    delete size_lwh_;
  }
  size_lwh_ = nullptr;
}
inline const ::perception::common::Point3D& Rect3D::_internal_size_lwh() const {
  const ::perception::common::Point3D* p = size_lwh_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& Rect3D::size_lwh() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect3D.size_lwh)
  return _internal_size_lwh();
}
inline void Rect3D::unsafe_arena_set_allocated_size_lwh(
    ::perception::common::Point3D* size_lwh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_lwh_);
  }
  size_lwh_ = size_lwh;
  if (size_lwh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Rect3D.size_lwh)
}
inline ::perception::common::Point3D* Rect3D::release_size_lwh() {
  auto temp = unsafe_arena_release_size_lwh();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* Rect3D::unsafe_arena_release_size_lwh() {
  // @@protoc_insertion_point(field_release:perception.common.Rect3D.size_lwh)
  
  ::perception::common::Point3D* temp = size_lwh_;
  size_lwh_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* Rect3D::_internal_mutable_size_lwh() {
  
  if (size_lwh_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    size_lwh_ = p;
  }
  return size_lwh_;
}
inline ::perception::common::Point3D* Rect3D::mutable_size_lwh() {
  // @@protoc_insertion_point(field_mutable:perception.common.Rect3D.size_lwh)
  return _internal_mutable_size_lwh();
}
inline void Rect3D::set_allocated_size_lwh(::perception::common::Point3D* size_lwh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_lwh_;
  }
  if (size_lwh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size_lwh);
    if (message_arena != submessage_arena) {
      size_lwh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size_lwh, submessage_arena);
    }
    
  } else {
    
  }
  size_lwh_ = size_lwh;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Rect3D.size_lwh)
}

// .perception.common.Point3D size_std_dev = 4;
inline bool Rect3D::_internal_has_size_std_dev() const {
  return this != internal_default_instance() && size_std_dev_ != nullptr;
}
inline bool Rect3D::has_size_std_dev() const {
  return _internal_has_size_std_dev();
}
inline void Rect3D::clear_size_std_dev() {
  if (GetArena() == nullptr && size_std_dev_ != nullptr) {
    delete size_std_dev_;
  }
  size_std_dev_ = nullptr;
}
inline const ::perception::common::Point3D& Rect3D::_internal_size_std_dev() const {
  const ::perception::common::Point3D* p = size_std_dev_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& Rect3D::size_std_dev() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect3D.size_std_dev)
  return _internal_size_std_dev();
}
inline void Rect3D::unsafe_arena_set_allocated_size_std_dev(
    ::perception::common::Point3D* size_std_dev) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_std_dev_);
  }
  size_std_dev_ = size_std_dev;
  if (size_std_dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Rect3D.size_std_dev)
}
inline ::perception::common::Point3D* Rect3D::release_size_std_dev() {
  auto temp = unsafe_arena_release_size_std_dev();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* Rect3D::unsafe_arena_release_size_std_dev() {
  // @@protoc_insertion_point(field_release:perception.common.Rect3D.size_std_dev)
  
  ::perception::common::Point3D* temp = size_std_dev_;
  size_std_dev_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* Rect3D::_internal_mutable_size_std_dev() {
  
  if (size_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    size_std_dev_ = p;
  }
  return size_std_dev_;
}
inline ::perception::common::Point3D* Rect3D::mutable_size_std_dev() {
  // @@protoc_insertion_point(field_mutable:perception.common.Rect3D.size_std_dev)
  return _internal_mutable_size_std_dev();
}
inline void Rect3D::set_allocated_size_std_dev(::perception::common::Point3D* size_std_dev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_std_dev_;
  }
  if (size_std_dev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size_std_dev);
    if (message_arena != submessage_arena) {
      size_std_dev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size_std_dev, submessage_arena);
    }
    
  } else {
    
  }
  size_std_dev_ = size_std_dev;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Rect3D.size_std_dev)
}

// double orientation = 5;
inline void Rect3D::clear_orientation() {
  orientation_ = 0;
}
inline double Rect3D::_internal_orientation() const {
  return orientation_;
}
inline double Rect3D::orientation() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect3D.orientation)
  return _internal_orientation();
}
inline void Rect3D::_internal_set_orientation(double value) {
  
  orientation_ = value;
}
inline void Rect3D::set_orientation(double value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:perception.common.Rect3D.orientation)
}

// double orientation_std_dev = 6;
inline void Rect3D::clear_orientation_std_dev() {
  orientation_std_dev_ = 0;
}
inline double Rect3D::_internal_orientation_std_dev() const {
  return orientation_std_dev_;
}
inline double Rect3D::orientation_std_dev() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect3D.orientation_std_dev)
  return _internal_orientation_std_dev();
}
inline void Rect3D::_internal_set_orientation_std_dev(double value) {
  
  orientation_std_dev_ = value;
}
inline void Rect3D::set_orientation_std_dev(double value) {
  _internal_set_orientation_std_dev(value);
  // @@protoc_insertion_point(field_set:perception.common.Rect3D.orientation_std_dev)
}

// repeated .perception.common.Point3D corners = 7;
inline int Rect3D::_internal_corners_size() const {
  return corners_.size();
}
inline int Rect3D::corners_size() const {
  return _internal_corners_size();
}
inline void Rect3D::clear_corners() {
  corners_.Clear();
}
inline ::perception::common::Point3D* Rect3D::mutable_corners(int index) {
  // @@protoc_insertion_point(field_mutable:perception.common.Rect3D.corners)
  return corners_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >*
Rect3D::mutable_corners() {
  // @@protoc_insertion_point(field_mutable_list:perception.common.Rect3D.corners)
  return &corners_;
}
inline const ::perception::common::Point3D& Rect3D::_internal_corners(int index) const {
  return corners_.Get(index);
}
inline const ::perception::common::Point3D& Rect3D::corners(int index) const {
  // @@protoc_insertion_point(field_get:perception.common.Rect3D.corners)
  return _internal_corners(index);
}
inline ::perception::common::Point3D* Rect3D::_internal_add_corners() {
  return corners_.Add();
}
inline ::perception::common::Point3D* Rect3D::add_corners() {
  // @@protoc_insertion_point(field_add:perception.common.Rect3D.corners)
  return _internal_add_corners();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >&
Rect3D::corners() const {
  // @@protoc_insertion_point(field_list:perception.common.Rect3D.corners)
  return corners_;
}

// .perception.common.EvalStats eval = 8;
inline bool Rect3D::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Rect3D::has_eval() const {
  return _internal_has_eval();
}
inline void Rect3D::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Rect3D::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Rect3D::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect3D.eval)
  return _internal_eval();
}
inline void Rect3D::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Rect3D.eval)
}
inline ::perception::common::EvalStats* Rect3D::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Rect3D::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Rect3D.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Rect3D::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Rect3D::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Rect3D.eval)
  return _internal_mutable_eval();
}
inline void Rect3D::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Rect3D.eval)
}

// -------------------------------------------------------------------

// Rect2D

// .perception.common.Point2D center = 1;
inline bool Rect2D::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool Rect2D::has_center() const {
  return _internal_has_center();
}
inline void Rect2D::clear_center() {
  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::perception::common::Point2D& Rect2D::_internal_center() const {
  const ::perception::common::Point2D* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point2D*>(
      &::perception::common::_Point2D_default_instance_);
}
inline const ::perception::common::Point2D& Rect2D::center() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect2D.center)
  return _internal_center();
}
inline void Rect2D::unsafe_arena_set_allocated_center(
    ::perception::common::Point2D* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Rect2D.center)
}
inline ::perception::common::Point2D* Rect2D::release_center() {
  auto temp = unsafe_arena_release_center();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point2D* Rect2D::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:perception.common.Rect2D.center)
  
  ::perception::common::Point2D* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::perception::common::Point2D* Rect2D::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point2D>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::perception::common::Point2D* Rect2D::mutable_center() {
  // @@protoc_insertion_point(field_mutable:perception.common.Rect2D.center)
  return _internal_mutable_center();
}
inline void Rect2D::set_allocated_center(::perception::common::Point2D* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Rect2D.center)
}

// .perception.common.Point2D size = 2;
inline bool Rect2D::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool Rect2D::has_size() const {
  return _internal_has_size();
}
inline void Rect2D::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
inline const ::perception::common::Point2D& Rect2D::_internal_size() const {
  const ::perception::common::Point2D* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point2D*>(
      &::perception::common::_Point2D_default_instance_);
}
inline const ::perception::common::Point2D& Rect2D::size() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect2D.size)
  return _internal_size();
}
inline void Rect2D::unsafe_arena_set_allocated_size(
    ::perception::common::Point2D* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Rect2D.size)
}
inline ::perception::common::Point2D* Rect2D::release_size() {
  auto temp = unsafe_arena_release_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point2D* Rect2D::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:perception.common.Rect2D.size)
  
  ::perception::common::Point2D* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::perception::common::Point2D* Rect2D::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point2D>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::perception::common::Point2D* Rect2D::mutable_size() {
  // @@protoc_insertion_point(field_mutable:perception.common.Rect2D.size)
  return _internal_mutable_size();
}
inline void Rect2D::set_allocated_size(::perception::common::Point2D* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Rect2D.size)
}

// .perception.common.EvalStats eval = 3;
inline bool Rect2D::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Rect2D::has_eval() const {
  return _internal_has_eval();
}
inline void Rect2D::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Rect2D::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Rect2D::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Rect2D.eval)
  return _internal_eval();
}
inline void Rect2D::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Rect2D.eval)
}
inline ::perception::common::EvalStats* Rect2D::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Rect2D::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Rect2D.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Rect2D::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Rect2D::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Rect2D.eval)
  return _internal_mutable_eval();
}
inline void Rect2D::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Rect2D.eval)
}

// -------------------------------------------------------------------

// Box3D

// .perception.common.Point3D lower_lt = 1;
inline bool Box3D::_internal_has_lower_lt() const {
  return this != internal_default_instance() && lower_lt_ != nullptr;
}
inline bool Box3D::has_lower_lt() const {
  return _internal_has_lower_lt();
}
inline void Box3D::clear_lower_lt() {
  if (GetArena() == nullptr && lower_lt_ != nullptr) {
    delete lower_lt_;
  }
  lower_lt_ = nullptr;
}
inline const ::perception::common::Point3D& Box3D::_internal_lower_lt() const {
  const ::perception::common::Point3D* p = lower_lt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& Box3D::lower_lt() const {
  // @@protoc_insertion_point(field_get:perception.common.Box3D.lower_lt)
  return _internal_lower_lt();
}
inline void Box3D::unsafe_arena_set_allocated_lower_lt(
    ::perception::common::Point3D* lower_lt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lower_lt_);
  }
  lower_lt_ = lower_lt;
  if (lower_lt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Box3D.lower_lt)
}
inline ::perception::common::Point3D* Box3D::release_lower_lt() {
  auto temp = unsafe_arena_release_lower_lt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* Box3D::unsafe_arena_release_lower_lt() {
  // @@protoc_insertion_point(field_release:perception.common.Box3D.lower_lt)
  
  ::perception::common::Point3D* temp = lower_lt_;
  lower_lt_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* Box3D::_internal_mutable_lower_lt() {
  
  if (lower_lt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    lower_lt_ = p;
  }
  return lower_lt_;
}
inline ::perception::common::Point3D* Box3D::mutable_lower_lt() {
  // @@protoc_insertion_point(field_mutable:perception.common.Box3D.lower_lt)
  return _internal_mutable_lower_lt();
}
inline void Box3D::set_allocated_lower_lt(::perception::common::Point3D* lower_lt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lower_lt_;
  }
  if (lower_lt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lower_lt);
    if (message_arena != submessage_arena) {
      lower_lt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_lt, submessage_arena);
    }
    
  } else {
    
  }
  lower_lt_ = lower_lt;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Box3D.lower_lt)
}

// .perception.common.Point3D lower_lb = 2;
inline bool Box3D::_internal_has_lower_lb() const {
  return this != internal_default_instance() && lower_lb_ != nullptr;
}
inline bool Box3D::has_lower_lb() const {
  return _internal_has_lower_lb();
}
inline void Box3D::clear_lower_lb() {
  if (GetArena() == nullptr && lower_lb_ != nullptr) {
    delete lower_lb_;
  }
  lower_lb_ = nullptr;
}
inline const ::perception::common::Point3D& Box3D::_internal_lower_lb() const {
  const ::perception::common::Point3D* p = lower_lb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& Box3D::lower_lb() const {
  // @@protoc_insertion_point(field_get:perception.common.Box3D.lower_lb)
  return _internal_lower_lb();
}
inline void Box3D::unsafe_arena_set_allocated_lower_lb(
    ::perception::common::Point3D* lower_lb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lower_lb_);
  }
  lower_lb_ = lower_lb;
  if (lower_lb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Box3D.lower_lb)
}
inline ::perception::common::Point3D* Box3D::release_lower_lb() {
  auto temp = unsafe_arena_release_lower_lb();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* Box3D::unsafe_arena_release_lower_lb() {
  // @@protoc_insertion_point(field_release:perception.common.Box3D.lower_lb)
  
  ::perception::common::Point3D* temp = lower_lb_;
  lower_lb_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* Box3D::_internal_mutable_lower_lb() {
  
  if (lower_lb_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    lower_lb_ = p;
  }
  return lower_lb_;
}
inline ::perception::common::Point3D* Box3D::mutable_lower_lb() {
  // @@protoc_insertion_point(field_mutable:perception.common.Box3D.lower_lb)
  return _internal_mutable_lower_lb();
}
inline void Box3D::set_allocated_lower_lb(::perception::common::Point3D* lower_lb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lower_lb_;
  }
  if (lower_lb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lower_lb);
    if (message_arena != submessage_arena) {
      lower_lb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_lb, submessage_arena);
    }
    
  } else {
    
  }
  lower_lb_ = lower_lb;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Box3D.lower_lb)
}

// .perception.common.Point3D lower_rb = 3;
inline bool Box3D::_internal_has_lower_rb() const {
  return this != internal_default_instance() && lower_rb_ != nullptr;
}
inline bool Box3D::has_lower_rb() const {
  return _internal_has_lower_rb();
}
inline void Box3D::clear_lower_rb() {
  if (GetArena() == nullptr && lower_rb_ != nullptr) {
    delete lower_rb_;
  }
  lower_rb_ = nullptr;
}
inline const ::perception::common::Point3D& Box3D::_internal_lower_rb() const {
  const ::perception::common::Point3D* p = lower_rb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& Box3D::lower_rb() const {
  // @@protoc_insertion_point(field_get:perception.common.Box3D.lower_rb)
  return _internal_lower_rb();
}
inline void Box3D::unsafe_arena_set_allocated_lower_rb(
    ::perception::common::Point3D* lower_rb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lower_rb_);
  }
  lower_rb_ = lower_rb;
  if (lower_rb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Box3D.lower_rb)
}
inline ::perception::common::Point3D* Box3D::release_lower_rb() {
  auto temp = unsafe_arena_release_lower_rb();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* Box3D::unsafe_arena_release_lower_rb() {
  // @@protoc_insertion_point(field_release:perception.common.Box3D.lower_rb)
  
  ::perception::common::Point3D* temp = lower_rb_;
  lower_rb_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* Box3D::_internal_mutable_lower_rb() {
  
  if (lower_rb_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    lower_rb_ = p;
  }
  return lower_rb_;
}
inline ::perception::common::Point3D* Box3D::mutable_lower_rb() {
  // @@protoc_insertion_point(field_mutable:perception.common.Box3D.lower_rb)
  return _internal_mutable_lower_rb();
}
inline void Box3D::set_allocated_lower_rb(::perception::common::Point3D* lower_rb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lower_rb_;
  }
  if (lower_rb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lower_rb);
    if (message_arena != submessage_arena) {
      lower_rb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_rb, submessage_arena);
    }
    
  } else {
    
  }
  lower_rb_ = lower_rb;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Box3D.lower_rb)
}

// .perception.common.Point3D lower_rt = 4;
inline bool Box3D::_internal_has_lower_rt() const {
  return this != internal_default_instance() && lower_rt_ != nullptr;
}
inline bool Box3D::has_lower_rt() const {
  return _internal_has_lower_rt();
}
inline void Box3D::clear_lower_rt() {
  if (GetArena() == nullptr && lower_rt_ != nullptr) {
    delete lower_rt_;
  }
  lower_rt_ = nullptr;
}
inline const ::perception::common::Point3D& Box3D::_internal_lower_rt() const {
  const ::perception::common::Point3D* p = lower_rt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& Box3D::lower_rt() const {
  // @@protoc_insertion_point(field_get:perception.common.Box3D.lower_rt)
  return _internal_lower_rt();
}
inline void Box3D::unsafe_arena_set_allocated_lower_rt(
    ::perception::common::Point3D* lower_rt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lower_rt_);
  }
  lower_rt_ = lower_rt;
  if (lower_rt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Box3D.lower_rt)
}
inline ::perception::common::Point3D* Box3D::release_lower_rt() {
  auto temp = unsafe_arena_release_lower_rt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* Box3D::unsafe_arena_release_lower_rt() {
  // @@protoc_insertion_point(field_release:perception.common.Box3D.lower_rt)
  
  ::perception::common::Point3D* temp = lower_rt_;
  lower_rt_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* Box3D::_internal_mutable_lower_rt() {
  
  if (lower_rt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    lower_rt_ = p;
  }
  return lower_rt_;
}
inline ::perception::common::Point3D* Box3D::mutable_lower_rt() {
  // @@protoc_insertion_point(field_mutable:perception.common.Box3D.lower_rt)
  return _internal_mutable_lower_rt();
}
inline void Box3D::set_allocated_lower_rt(::perception::common::Point3D* lower_rt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lower_rt_;
  }
  if (lower_rt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lower_rt);
    if (message_arena != submessage_arena) {
      lower_rt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_rt, submessage_arena);
    }
    
  } else {
    
  }
  lower_rt_ = lower_rt;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Box3D.lower_rt)
}

// .perception.common.Point3D upper_lt = 5;
inline bool Box3D::_internal_has_upper_lt() const {
  return this != internal_default_instance() && upper_lt_ != nullptr;
}
inline bool Box3D::has_upper_lt() const {
  return _internal_has_upper_lt();
}
inline void Box3D::clear_upper_lt() {
  if (GetArena() == nullptr && upper_lt_ != nullptr) {
    delete upper_lt_;
  }
  upper_lt_ = nullptr;
}
inline const ::perception::common::Point3D& Box3D::_internal_upper_lt() const {
  const ::perception::common::Point3D* p = upper_lt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& Box3D::upper_lt() const {
  // @@protoc_insertion_point(field_get:perception.common.Box3D.upper_lt)
  return _internal_upper_lt();
}
inline void Box3D::unsafe_arena_set_allocated_upper_lt(
    ::perception::common::Point3D* upper_lt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upper_lt_);
  }
  upper_lt_ = upper_lt;
  if (upper_lt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Box3D.upper_lt)
}
inline ::perception::common::Point3D* Box3D::release_upper_lt() {
  auto temp = unsafe_arena_release_upper_lt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* Box3D::unsafe_arena_release_upper_lt() {
  // @@protoc_insertion_point(field_release:perception.common.Box3D.upper_lt)
  
  ::perception::common::Point3D* temp = upper_lt_;
  upper_lt_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* Box3D::_internal_mutable_upper_lt() {
  
  if (upper_lt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    upper_lt_ = p;
  }
  return upper_lt_;
}
inline ::perception::common::Point3D* Box3D::mutable_upper_lt() {
  // @@protoc_insertion_point(field_mutable:perception.common.Box3D.upper_lt)
  return _internal_mutable_upper_lt();
}
inline void Box3D::set_allocated_upper_lt(::perception::common::Point3D* upper_lt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upper_lt_;
  }
  if (upper_lt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upper_lt);
    if (message_arena != submessage_arena) {
      upper_lt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_lt, submessage_arena);
    }
    
  } else {
    
  }
  upper_lt_ = upper_lt;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Box3D.upper_lt)
}

// .perception.common.Point3D upper_lb = 6;
inline bool Box3D::_internal_has_upper_lb() const {
  return this != internal_default_instance() && upper_lb_ != nullptr;
}
inline bool Box3D::has_upper_lb() const {
  return _internal_has_upper_lb();
}
inline void Box3D::clear_upper_lb() {
  if (GetArena() == nullptr && upper_lb_ != nullptr) {
    delete upper_lb_;
  }
  upper_lb_ = nullptr;
}
inline const ::perception::common::Point3D& Box3D::_internal_upper_lb() const {
  const ::perception::common::Point3D* p = upper_lb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& Box3D::upper_lb() const {
  // @@protoc_insertion_point(field_get:perception.common.Box3D.upper_lb)
  return _internal_upper_lb();
}
inline void Box3D::unsafe_arena_set_allocated_upper_lb(
    ::perception::common::Point3D* upper_lb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upper_lb_);
  }
  upper_lb_ = upper_lb;
  if (upper_lb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Box3D.upper_lb)
}
inline ::perception::common::Point3D* Box3D::release_upper_lb() {
  auto temp = unsafe_arena_release_upper_lb();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* Box3D::unsafe_arena_release_upper_lb() {
  // @@protoc_insertion_point(field_release:perception.common.Box3D.upper_lb)
  
  ::perception::common::Point3D* temp = upper_lb_;
  upper_lb_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* Box3D::_internal_mutable_upper_lb() {
  
  if (upper_lb_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    upper_lb_ = p;
  }
  return upper_lb_;
}
inline ::perception::common::Point3D* Box3D::mutable_upper_lb() {
  // @@protoc_insertion_point(field_mutable:perception.common.Box3D.upper_lb)
  return _internal_mutable_upper_lb();
}
inline void Box3D::set_allocated_upper_lb(::perception::common::Point3D* upper_lb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upper_lb_;
  }
  if (upper_lb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upper_lb);
    if (message_arena != submessage_arena) {
      upper_lb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_lb, submessage_arena);
    }
    
  } else {
    
  }
  upper_lb_ = upper_lb;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Box3D.upper_lb)
}

// .perception.common.Point3D upper_rb = 7;
inline bool Box3D::_internal_has_upper_rb() const {
  return this != internal_default_instance() && upper_rb_ != nullptr;
}
inline bool Box3D::has_upper_rb() const {
  return _internal_has_upper_rb();
}
inline void Box3D::clear_upper_rb() {
  if (GetArena() == nullptr && upper_rb_ != nullptr) {
    delete upper_rb_;
  }
  upper_rb_ = nullptr;
}
inline const ::perception::common::Point3D& Box3D::_internal_upper_rb() const {
  const ::perception::common::Point3D* p = upper_rb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& Box3D::upper_rb() const {
  // @@protoc_insertion_point(field_get:perception.common.Box3D.upper_rb)
  return _internal_upper_rb();
}
inline void Box3D::unsafe_arena_set_allocated_upper_rb(
    ::perception::common::Point3D* upper_rb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upper_rb_);
  }
  upper_rb_ = upper_rb;
  if (upper_rb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Box3D.upper_rb)
}
inline ::perception::common::Point3D* Box3D::release_upper_rb() {
  auto temp = unsafe_arena_release_upper_rb();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* Box3D::unsafe_arena_release_upper_rb() {
  // @@protoc_insertion_point(field_release:perception.common.Box3D.upper_rb)
  
  ::perception::common::Point3D* temp = upper_rb_;
  upper_rb_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* Box3D::_internal_mutable_upper_rb() {
  
  if (upper_rb_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    upper_rb_ = p;
  }
  return upper_rb_;
}
inline ::perception::common::Point3D* Box3D::mutable_upper_rb() {
  // @@protoc_insertion_point(field_mutable:perception.common.Box3D.upper_rb)
  return _internal_mutable_upper_rb();
}
inline void Box3D::set_allocated_upper_rb(::perception::common::Point3D* upper_rb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upper_rb_;
  }
  if (upper_rb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upper_rb);
    if (message_arena != submessage_arena) {
      upper_rb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_rb, submessage_arena);
    }
    
  } else {
    
  }
  upper_rb_ = upper_rb;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Box3D.upper_rb)
}

// .perception.common.Point3D upper_rt = 8;
inline bool Box3D::_internal_has_upper_rt() const {
  return this != internal_default_instance() && upper_rt_ != nullptr;
}
inline bool Box3D::has_upper_rt() const {
  return _internal_has_upper_rt();
}
inline void Box3D::clear_upper_rt() {
  if (GetArena() == nullptr && upper_rt_ != nullptr) {
    delete upper_rt_;
  }
  upper_rt_ = nullptr;
}
inline const ::perception::common::Point3D& Box3D::_internal_upper_rt() const {
  const ::perception::common::Point3D* p = upper_rt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& Box3D::upper_rt() const {
  // @@protoc_insertion_point(field_get:perception.common.Box3D.upper_rt)
  return _internal_upper_rt();
}
inline void Box3D::unsafe_arena_set_allocated_upper_rt(
    ::perception::common::Point3D* upper_rt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upper_rt_);
  }
  upper_rt_ = upper_rt;
  if (upper_rt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Box3D.upper_rt)
}
inline ::perception::common::Point3D* Box3D::release_upper_rt() {
  auto temp = unsafe_arena_release_upper_rt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* Box3D::unsafe_arena_release_upper_rt() {
  // @@protoc_insertion_point(field_release:perception.common.Box3D.upper_rt)
  
  ::perception::common::Point3D* temp = upper_rt_;
  upper_rt_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* Box3D::_internal_mutable_upper_rt() {
  
  if (upper_rt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    upper_rt_ = p;
  }
  return upper_rt_;
}
inline ::perception::common::Point3D* Box3D::mutable_upper_rt() {
  // @@protoc_insertion_point(field_mutable:perception.common.Box3D.upper_rt)
  return _internal_mutable_upper_rt();
}
inline void Box3D::set_allocated_upper_rt(::perception::common::Point3D* upper_rt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upper_rt_;
  }
  if (upper_rt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upper_rt);
    if (message_arena != submessage_arena) {
      upper_rt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_rt, submessage_arena);
    }
    
  } else {
    
  }
  upper_rt_ = upper_rt;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Box3D.upper_rt)
}

// float conf = 9;
inline void Box3D::clear_conf() {
  conf_ = 0;
}
inline float Box3D::_internal_conf() const {
  return conf_;
}
inline float Box3D::conf() const {
  // @@protoc_insertion_point(field_get:perception.common.Box3D.conf)
  return _internal_conf();
}
inline void Box3D::_internal_set_conf(float value) {
  
  conf_ = value;
}
inline void Box3D::set_conf(float value) {
  _internal_set_conf(value);
  // @@protoc_insertion_point(field_set:perception.common.Box3D.conf)
}

// .perception.common.EvalStats eval = 10;
inline bool Box3D::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Box3D::has_eval() const {
  return _internal_has_eval();
}
inline void Box3D::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Box3D::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Box3D::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Box3D.eval)
  return _internal_eval();
}
inline void Box3D::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Box3D.eval)
}
inline ::perception::common::EvalStats* Box3D::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Box3D::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Box3D.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Box3D::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Box3D::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Box3D.eval)
  return _internal_mutable_eval();
}
inline void Box3D::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Box3D.eval)
}

// -------------------------------------------------------------------

// Polygon

// repeated .perception.common.Point3D pts = 1;
inline int Polygon::_internal_pts_size() const {
  return pts_.size();
}
inline int Polygon::pts_size() const {
  return _internal_pts_size();
}
inline void Polygon::clear_pts() {
  pts_.Clear();
}
inline ::perception::common::Point3D* Polygon::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:perception.common.Polygon.pts)
  return pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >*
Polygon::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:perception.common.Polygon.pts)
  return &pts_;
}
inline const ::perception::common::Point3D& Polygon::_internal_pts(int index) const {
  return pts_.Get(index);
}
inline const ::perception::common::Point3D& Polygon::pts(int index) const {
  // @@protoc_insertion_point(field_get:perception.common.Polygon.pts)
  return _internal_pts(index);
}
inline ::perception::common::Point3D* Polygon::_internal_add_pts() {
  return pts_.Add();
}
inline ::perception::common::Point3D* Polygon::add_pts() {
  // @@protoc_insertion_point(field_add:perception.common.Polygon.pts)
  return _internal_add_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >&
Polygon::pts() const {
  // @@protoc_insertion_point(field_list:perception.common.Polygon.pts)
  return pts_;
}

// .perception.common.EvalStats eval = 2;
inline bool Polygon::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Polygon::has_eval() const {
  return _internal_has_eval();
}
inline void Polygon::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Polygon::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Polygon::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Polygon.eval)
  return _internal_eval();
}
inline void Polygon::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Polygon.eval)
}
inline ::perception::common::EvalStats* Polygon::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Polygon::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Polygon.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Polygon::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Polygon::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Polygon.eval)
  return _internal_mutable_eval();
}
inline void Polygon::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Polygon.eval)
}

// -------------------------------------------------------------------

// PoseAngle

// float pitch = 1;
inline void PoseAngle::clear_pitch() {
  pitch_ = 0;
}
inline float PoseAngle::_internal_pitch() const {
  return pitch_;
}
inline float PoseAngle::pitch() const {
  // @@protoc_insertion_point(field_get:perception.common.PoseAngle.pitch)
  return _internal_pitch();
}
inline void PoseAngle::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void PoseAngle::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:perception.common.PoseAngle.pitch)
}

// float yaw = 2;
inline void PoseAngle::clear_yaw() {
  yaw_ = 0;
}
inline float PoseAngle::_internal_yaw() const {
  return yaw_;
}
inline float PoseAngle::yaw() const {
  // @@protoc_insertion_point(field_get:perception.common.PoseAngle.yaw)
  return _internal_yaw();
}
inline void PoseAngle::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void PoseAngle::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:perception.common.PoseAngle.yaw)
}

// float roll = 3;
inline void PoseAngle::clear_roll() {
  roll_ = 0;
}
inline float PoseAngle::_internal_roll() const {
  return roll_;
}
inline float PoseAngle::roll() const {
  // @@protoc_insertion_point(field_get:perception.common.PoseAngle.roll)
  return _internal_roll();
}
inline void PoseAngle::_internal_set_roll(float value) {
  
  roll_ = value;
}
inline void PoseAngle::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:perception.common.PoseAngle.roll)
}

// repeated .perception.common.EvalStats evals = 4;
inline int PoseAngle::_internal_evals_size() const {
  return evals_.size();
}
inline int PoseAngle::evals_size() const {
  return _internal_evals_size();
}
inline void PoseAngle::clear_evals() {
  evals_.Clear();
}
inline ::perception::common::EvalStats* PoseAngle::mutable_evals(int index) {
  // @@protoc_insertion_point(field_mutable:perception.common.PoseAngle.evals)
  return evals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >*
PoseAngle::mutable_evals() {
  // @@protoc_insertion_point(field_mutable_list:perception.common.PoseAngle.evals)
  return &evals_;
}
inline const ::perception::common::EvalStats& PoseAngle::_internal_evals(int index) const {
  return evals_.Get(index);
}
inline const ::perception::common::EvalStats& PoseAngle::evals(int index) const {
  // @@protoc_insertion_point(field_get:perception.common.PoseAngle.evals)
  return _internal_evals(index);
}
inline ::perception::common::EvalStats* PoseAngle::_internal_add_evals() {
  return evals_.Add();
}
inline ::perception::common::EvalStats* PoseAngle::add_evals() {
  // @@protoc_insertion_point(field_add:perception.common.PoseAngle.evals)
  return _internal_add_evals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::EvalStats >&
PoseAngle::evals() const {
  // @@protoc_insertion_point(field_list:perception.common.PoseAngle.evals)
  return evals_;
}

// -------------------------------------------------------------------

// Int

// int32 val = 1;
inline void Int::clear_val() {
  val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int::val() const {
  // @@protoc_insertion_point(field_get:perception.common.Int.val)
  return _internal_val();
}
inline void Int::_internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  val_ = value;
}
inline void Int::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:perception.common.Int.val)
}

// .perception.common.EvalStats eval = 2;
inline bool Int::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Int::has_eval() const {
  return _internal_has_eval();
}
inline void Int::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Int::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Int::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Int.eval)
  return _internal_eval();
}
inline void Int::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Int.eval)
}
inline ::perception::common::EvalStats* Int::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Int::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Int.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Int::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Int::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Int.eval)
  return _internal_mutable_eval();
}
inline void Int::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Int.eval)
}

// -------------------------------------------------------------------

// Float

// float val = 1;
inline void Float::clear_val() {
  val_ = 0;
}
inline float Float::_internal_val() const {
  return val_;
}
inline float Float::val() const {
  // @@protoc_insertion_point(field_get:perception.common.Float.val)
  return _internal_val();
}
inline void Float::_internal_set_val(float value) {
  
  val_ = value;
}
inline void Float::set_val(float value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:perception.common.Float.val)
}

// .perception.common.EvalStats eval = 2;
inline bool Float::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool Float::has_eval() const {
  return _internal_has_eval();
}
inline void Float::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& Float::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& Float::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.Float.eval)
  return _internal_eval();
}
inline void Float::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.Float.eval)
}
inline ::perception::common::EvalStats* Float::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* Float::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.Float.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* Float::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* Float::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.Float.eval)
  return _internal_mutable_eval();
}
inline void Float::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.Float.eval)
}

// -------------------------------------------------------------------

// UInt

// uint32 val = 1;
inline void UInt::clear_val() {
  val_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt::val() const {
  // @@protoc_insertion_point(field_get:perception.common.UInt.val)
  return _internal_val();
}
inline void UInt::_internal_set_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  val_ = value;
}
inline void UInt::set_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:perception.common.UInt.val)
}

// .perception.common.EvalStats eval = 2;
inline bool UInt::_internal_has_eval() const {
  return this != internal_default_instance() && eval_ != nullptr;
}
inline bool UInt::has_eval() const {
  return _internal_has_eval();
}
inline void UInt::clear_eval() {
  if (GetArena() == nullptr && eval_ != nullptr) {
    delete eval_;
  }
  eval_ = nullptr;
}
inline const ::perception::common::EvalStats& UInt::_internal_eval() const {
  const ::perception::common::EvalStats* p = eval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::EvalStats*>(
      &::perception::common::_EvalStats_default_instance_);
}
inline const ::perception::common::EvalStats& UInt::eval() const {
  // @@protoc_insertion_point(field_get:perception.common.UInt.eval)
  return _internal_eval();
}
inline void UInt::unsafe_arena_set_allocated_eval(
    ::perception::common::EvalStats* eval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eval_);
  }
  eval_ = eval;
  if (eval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.common.UInt.eval)
}
inline ::perception::common::EvalStats* UInt::release_eval() {
  auto temp = unsafe_arena_release_eval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::EvalStats* UInt::unsafe_arena_release_eval() {
  // @@protoc_insertion_point(field_release:perception.common.UInt.eval)
  
  ::perception::common::EvalStats* temp = eval_;
  eval_ = nullptr;
  return temp;
}
inline ::perception::common::EvalStats* UInt::_internal_mutable_eval() {
  
  if (eval_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::EvalStats>(GetArena());
    eval_ = p;
  }
  return eval_;
}
inline ::perception::common::EvalStats* UInt::mutable_eval() {
  // @@protoc_insertion_point(field_mutable:perception.common.UInt.eval)
  return _internal_mutable_eval();
}
inline void UInt::set_allocated_eval(::perception::common::EvalStats* eval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eval_;
  }
  if (eval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eval);
    if (message_arena != submessage_arena) {
      eval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval, submessage_arena);
    }
    
  } else {
    
  }
  eval_ = eval;
  // @@protoc_insertion_point(field_set_allocated:perception.common.UInt.eval)
}

// -------------------------------------------------------------------

// FloatArray

// repeated float vals = 1;
inline int FloatArray::_internal_vals_size() const {
  return vals_.size();
}
inline int FloatArray::vals_size() const {
  return _internal_vals_size();
}
inline void FloatArray::clear_vals() {
  vals_.Clear();
}
inline float FloatArray::_internal_vals(int index) const {
  return vals_.Get(index);
}
inline float FloatArray::vals(int index) const {
  // @@protoc_insertion_point(field_get:perception.common.FloatArray.vals)
  return _internal_vals(index);
}
inline void FloatArray::set_vals(int index, float value) {
  vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception.common.FloatArray.vals)
}
inline void FloatArray::_internal_add_vals(float value) {
  vals_.Add(value);
}
inline void FloatArray::add_vals(float value) {
  _internal_add_vals(value);
  // @@protoc_insertion_point(field_add:perception.common.FloatArray.vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArray::_internal_vals() const {
  return vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArray::vals() const {
  // @@protoc_insertion_point(field_list:perception.common.FloatArray.vals)
  return _internal_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArray::_internal_mutable_vals() {
  return &vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArray::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:perception.common.FloatArray.vals)
  return _internal_mutable_vals();
}

// float conf = 2;
inline void FloatArray::clear_conf() {
  conf_ = 0;
}
inline float FloatArray::_internal_conf() const {
  return conf_;
}
inline float FloatArray::conf() const {
  // @@protoc_insertion_point(field_get:perception.common.FloatArray.conf)
  return _internal_conf();
}
inline void FloatArray::_internal_set_conf(float value) {
  
  conf_ = value;
}
inline void FloatArray::set_conf(float value) {
  _internal_set_conf(value);
  // @@protoc_insertion_point(field_set:perception.common.FloatArray.conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace perception

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_geometry_2eproto
