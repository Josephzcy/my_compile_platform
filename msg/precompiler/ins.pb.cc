// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ins.proto

#include "ins.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_data_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_data_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point3f_geometry_2eproto;
namespace minieye {
class InsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsData> _instance;
} _InsData_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_InsData_ins_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_InsData_default_instance_;
    new (ptr) ::minieye::InsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::InsData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsData_ins_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InsData_ins_2eproto}, {
      &scc_info_Header_data_5fheader_2eproto.base,
      &scc_info_Point3f_geometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ins_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ins_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ins_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ins_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, header_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, is_valid_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, gps_week_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, gps_sec_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, latitude_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, longitude_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, elevation_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, attitude_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, sd_position_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, sd_attitude_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, sd_velocity_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, sys_status_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, gps_status_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, warn_info_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, corr_angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, corr_linear_accel_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, heading_),
  PROTOBUF_FIELD_OFFSET(::minieye::InsData, mounting_error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::InsData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_InsData_default_instance_),
};

const char descriptor_table_protodef_ins_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tins.proto\022\007minieye\032\021data_header.proto\032"
  "\016geometry.proto\"\377\004\n\007InsData\022\037\n\006header\030\001 "
  "\001(\0132\017.minieye.Header\022\020\n\010is_valid\030\002 \001(\010\022\020"
  "\n\010gps_week\030\003 \001(\r\022\017\n\007gps_sec\030\004 \001(\001\022\020\n\010lat"
  "itude\030\005 \001(\001\022\021\n\tlongitude\030\006 \001(\001\022\021\n\televat"
  "ion\030\007 \001(\001\022,\n\010attitude\030\010 \001(\0132\032.perception"
  ".common.Point3f\0223\n\017linear_velocity\030\t \001(\013"
  "2\032.perception.common.Point3f\022/\n\013sd_posit"
  "ion\030\n \001(\0132\032.perception.common.Point3f\022/\n"
  "\013sd_attitude\030\013 \001(\0132\032.perception.common.P"
  "oint3f\022/\n\013sd_velocity\030\014 \001(\0132\032.perception"
  ".common.Point3f\022\022\n\nsys_status\030\r \001(\r\022\022\n\ng"
  "ps_status\030\016 \001(\r\022\021\n\twarn_info\030\017 \001(\r\0229\n\025co"
  "rr_angular_velocity\030\020 \001(\0132\032.perception.c"
  "ommon.Point3f\0225\n\021corr_linear_accel\030\021 \001(\013"
  "2\032.perception.common.Point3f\022\017\n\007heading\030"
  "\022 \001(\002\0222\n\016mounting_error\030\023 \001(\0132\032.percepti"
  "on.common.Point3fb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ins_2eproto_deps[2] = {
  &::descriptor_table_data_5fheader_2eproto,
  &::descriptor_table_geometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ins_2eproto_sccs[1] = {
  &scc_info_InsData_ins_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ins_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ins_2eproto = {
  false, false, descriptor_table_protodef_ins_2eproto, "ins.proto", 705,
  &descriptor_table_ins_2eproto_once, descriptor_table_ins_2eproto_sccs, descriptor_table_ins_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_ins_2eproto::offsets,
  file_level_metadata_ins_2eproto, 1, file_level_enum_descriptors_ins_2eproto, file_level_service_descriptors_ins_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ins_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ins_2eproto)), true);
namespace minieye {

// ===================================================================

void InsData::InitAsDefaultInstance() {
  ::minieye::_InsData_default_instance_._instance.get_mutable()->header_ = const_cast< ::minieye::Header*>(
      ::minieye::Header::internal_default_instance());
  ::minieye::_InsData_default_instance_._instance.get_mutable()->attitude_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
  ::minieye::_InsData_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
  ::minieye::_InsData_default_instance_._instance.get_mutable()->sd_position_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
  ::minieye::_InsData_default_instance_._instance.get_mutable()->sd_attitude_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
  ::minieye::_InsData_default_instance_._instance.get_mutable()->sd_velocity_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
  ::minieye::_InsData_default_instance_._instance.get_mutable()->corr_angular_velocity_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
  ::minieye::_InsData_default_instance_._instance.get_mutable()->corr_linear_accel_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
  ::minieye::_InsData_default_instance_._instance.get_mutable()->mounting_error_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
}
class InsData::_Internal {
 public:
  static const ::minieye::Header& header(const InsData* msg);
  static const ::perception::common::Point3f& attitude(const InsData* msg);
  static const ::perception::common::Point3f& linear_velocity(const InsData* msg);
  static const ::perception::common::Point3f& sd_position(const InsData* msg);
  static const ::perception::common::Point3f& sd_attitude(const InsData* msg);
  static const ::perception::common::Point3f& sd_velocity(const InsData* msg);
  static const ::perception::common::Point3f& corr_angular_velocity(const InsData* msg);
  static const ::perception::common::Point3f& corr_linear_accel(const InsData* msg);
  static const ::perception::common::Point3f& mounting_error(const InsData* msg);
};

const ::minieye::Header&
InsData::_Internal::header(const InsData* msg) {
  return *msg->header_;
}
const ::perception::common::Point3f&
InsData::_Internal::attitude(const InsData* msg) {
  return *msg->attitude_;
}
const ::perception::common::Point3f&
InsData::_Internal::linear_velocity(const InsData* msg) {
  return *msg->linear_velocity_;
}
const ::perception::common::Point3f&
InsData::_Internal::sd_position(const InsData* msg) {
  return *msg->sd_position_;
}
const ::perception::common::Point3f&
InsData::_Internal::sd_attitude(const InsData* msg) {
  return *msg->sd_attitude_;
}
const ::perception::common::Point3f&
InsData::_Internal::sd_velocity(const InsData* msg) {
  return *msg->sd_velocity_;
}
const ::perception::common::Point3f&
InsData::_Internal::corr_angular_velocity(const InsData* msg) {
  return *msg->corr_angular_velocity_;
}
const ::perception::common::Point3f&
InsData::_Internal::corr_linear_accel(const InsData* msg) {
  return *msg->corr_linear_accel_;
}
const ::perception::common::Point3f&
InsData::_Internal::mounting_error(const InsData* msg) {
  return *msg->mounting_error_;
}
void InsData::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void InsData::clear_attitude() {
  if (GetArena() == nullptr && attitude_ != nullptr) {
    delete attitude_;
  }
  attitude_ = nullptr;
}
void InsData::clear_linear_velocity() {
  if (GetArena() == nullptr && linear_velocity_ != nullptr) {
    delete linear_velocity_;
  }
  linear_velocity_ = nullptr;
}
void InsData::clear_sd_position() {
  if (GetArena() == nullptr && sd_position_ != nullptr) {
    delete sd_position_;
  }
  sd_position_ = nullptr;
}
void InsData::clear_sd_attitude() {
  if (GetArena() == nullptr && sd_attitude_ != nullptr) {
    delete sd_attitude_;
  }
  sd_attitude_ = nullptr;
}
void InsData::clear_sd_velocity() {
  if (GetArena() == nullptr && sd_velocity_ != nullptr) {
    delete sd_velocity_;
  }
  sd_velocity_ = nullptr;
}
void InsData::clear_corr_angular_velocity() {
  if (GetArena() == nullptr && corr_angular_velocity_ != nullptr) {
    delete corr_angular_velocity_;
  }
  corr_angular_velocity_ = nullptr;
}
void InsData::clear_corr_linear_accel() {
  if (GetArena() == nullptr && corr_linear_accel_ != nullptr) {
    delete corr_linear_accel_;
  }
  corr_linear_accel_ = nullptr;
}
void InsData::clear_mounting_error() {
  if (GetArena() == nullptr && mounting_error_ != nullptr) {
    delete mounting_error_;
  }
  mounting_error_ = nullptr;
}
InsData::InsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.InsData)
}
InsData::InsData(const InsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::minieye::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_attitude()) {
    attitude_ = new ::perception::common::Point3f(*from.attitude_);
  } else {
    attitude_ = nullptr;
  }
  if (from._internal_has_linear_velocity()) {
    linear_velocity_ = new ::perception::common::Point3f(*from.linear_velocity_);
  } else {
    linear_velocity_ = nullptr;
  }
  if (from._internal_has_sd_position()) {
    sd_position_ = new ::perception::common::Point3f(*from.sd_position_);
  } else {
    sd_position_ = nullptr;
  }
  if (from._internal_has_sd_attitude()) {
    sd_attitude_ = new ::perception::common::Point3f(*from.sd_attitude_);
  } else {
    sd_attitude_ = nullptr;
  }
  if (from._internal_has_sd_velocity()) {
    sd_velocity_ = new ::perception::common::Point3f(*from.sd_velocity_);
  } else {
    sd_velocity_ = nullptr;
  }
  if (from._internal_has_corr_angular_velocity()) {
    corr_angular_velocity_ = new ::perception::common::Point3f(*from.corr_angular_velocity_);
  } else {
    corr_angular_velocity_ = nullptr;
  }
  if (from._internal_has_corr_linear_accel()) {
    corr_linear_accel_ = new ::perception::common::Point3f(*from.corr_linear_accel_);
  } else {
    corr_linear_accel_ = nullptr;
  }
  if (from._internal_has_mounting_error()) {
    mounting_error_ = new ::perception::common::Point3f(*from.mounting_error_);
  } else {
    mounting_error_ = nullptr;
  }
  ::memcpy(&is_valid_, &from.is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&is_valid_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:minieye.InsData)
}

void InsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsData_ins_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&header_)) + sizeof(heading_));
}

InsData::~InsData() {
  // @@protoc_insertion_point(destructor:minieye.InsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete attitude_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete sd_position_;
  if (this != internal_default_instance()) delete sd_attitude_;
  if (this != internal_default_instance()) delete sd_velocity_;
  if (this != internal_default_instance()) delete corr_angular_velocity_;
  if (this != internal_default_instance()) delete corr_linear_accel_;
  if (this != internal_default_instance()) delete mounting_error_;
}

void InsData::ArenaDtor(void* object) {
  InsData* _this = reinterpret_cast< InsData* >(object);
  (void)_this;
}
void InsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsData& InsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsData_ins_2eproto.base);
  return *internal_default_instance();
}


void InsData::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.InsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && attitude_ != nullptr) {
    delete attitude_;
  }
  attitude_ = nullptr;
  if (GetArena() == nullptr && linear_velocity_ != nullptr) {
    delete linear_velocity_;
  }
  linear_velocity_ = nullptr;
  if (GetArena() == nullptr && sd_position_ != nullptr) {
    delete sd_position_;
  }
  sd_position_ = nullptr;
  if (GetArena() == nullptr && sd_attitude_ != nullptr) {
    delete sd_attitude_;
  }
  sd_attitude_ = nullptr;
  if (GetArena() == nullptr && sd_velocity_ != nullptr) {
    delete sd_velocity_;
  }
  sd_velocity_ = nullptr;
  if (GetArena() == nullptr && corr_angular_velocity_ != nullptr) {
    delete corr_angular_velocity_;
  }
  corr_angular_velocity_ = nullptr;
  if (GetArena() == nullptr && corr_linear_accel_ != nullptr) {
    delete corr_linear_accel_;
  }
  corr_linear_accel_ = nullptr;
  if (GetArena() == nullptr && mounting_error_ != nullptr) {
    delete mounting_error_;
  }
  mounting_error_ = nullptr;
  ::memset(&is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&is_valid_)) + sizeof(heading_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gps_week = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gps_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double gps_sec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          gps_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double elevation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f attitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f linear_velocity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f sd_position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sd_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f sd_attitude = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_sd_attitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f sd_velocity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sd_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sys_status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sys_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gps_status = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          gps_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 warn_info = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          warn_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f corr_angular_velocity = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_corr_angular_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f corr_linear_accel = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_corr_linear_accel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f mounting_error = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.InsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bool is_valid = 2;
  if (this->is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_valid(), target);
  }

  // uint32 gps_week = 3;
  if (this->gps_week() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gps_week(), target);
  }

  // double gps_sec = 4;
  if (!(this->gps_sec() <= 0 && this->gps_sec() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_gps_sec(), target);
  }

  // double latitude = 5;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_latitude(), target);
  }

  // double longitude = 6;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_longitude(), target);
  }

  // double elevation = 7;
  if (!(this->elevation() <= 0 && this->elevation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_elevation(), target);
  }

  // .perception.common.Point3f attitude = 8;
  if (this->has_attitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::attitude(this), target, stream);
  }

  // .perception.common.Point3f linear_velocity = 9;
  if (this->has_linear_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::linear_velocity(this), target, stream);
  }

  // .perception.common.Point3f sd_position = 10;
  if (this->has_sd_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::sd_position(this), target, stream);
  }

  // .perception.common.Point3f sd_attitude = 11;
  if (this->has_sd_attitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::sd_attitude(this), target, stream);
  }

  // .perception.common.Point3f sd_velocity = 12;
  if (this->has_sd_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::sd_velocity(this), target, stream);
  }

  // uint32 sys_status = 13;
  if (this->sys_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_sys_status(), target);
  }

  // uint32 gps_status = 14;
  if (this->gps_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_gps_status(), target);
  }

  // uint32 warn_info = 15;
  if (this->warn_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_warn_info(), target);
  }

  // .perception.common.Point3f corr_angular_velocity = 16;
  if (this->has_corr_angular_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::corr_angular_velocity(this), target, stream);
  }

  // .perception.common.Point3f corr_linear_accel = 17;
  if (this->has_corr_linear_accel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::corr_linear_accel(this), target, stream);
  }

  // float heading = 18;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_heading(), target);
  }

  // .perception.common.Point3f mounting_error = 19;
  if (this->has_mounting_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::mounting_error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.InsData)
  return target;
}

size_t InsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.InsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .perception.common.Point3f attitude = 8;
  if (this->has_attitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_);
  }

  // .perception.common.Point3f linear_velocity = 9;
  if (this->has_linear_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_velocity_);
  }

  // .perception.common.Point3f sd_position = 10;
  if (this->has_sd_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sd_position_);
  }

  // .perception.common.Point3f sd_attitude = 11;
  if (this->has_sd_attitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sd_attitude_);
  }

  // .perception.common.Point3f sd_velocity = 12;
  if (this->has_sd_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sd_velocity_);
  }

  // .perception.common.Point3f corr_angular_velocity = 16;
  if (this->has_corr_angular_velocity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *corr_angular_velocity_);
  }

  // .perception.common.Point3f corr_linear_accel = 17;
  if (this->has_corr_linear_accel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *corr_linear_accel_);
  }

  // .perception.common.Point3f mounting_error = 19;
  if (this->has_mounting_error()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_error_);
  }

  // bool is_valid = 2;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // uint32 gps_week = 3;
  if (this->gps_week() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gps_week());
  }

  // double gps_sec = 4;
  if (!(this->gps_sec() <= 0 && this->gps_sec() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 5;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 6;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double elevation = 7;
  if (!(this->elevation() <= 0 && this->elevation() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 sys_status = 13;
  if (this->sys_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sys_status());
  }

  // uint32 gps_status = 14;
  if (this->gps_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gps_status());
  }

  // uint32 warn_info = 15;
  if (this->warn_info() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_warn_info());
  }

  // float heading = 18;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.InsData)
  GOOGLE_DCHECK_NE(&from, this);
  const InsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.InsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.InsData)
    MergeFrom(*source);
  }
}

void InsData::MergeFrom(const InsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.InsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::minieye::Header::MergeFrom(from._internal_header());
  }
  if (from.has_attitude()) {
    _internal_mutable_attitude()->::perception::common::Point3f::MergeFrom(from._internal_attitude());
  }
  if (from.has_linear_velocity()) {
    _internal_mutable_linear_velocity()->::perception::common::Point3f::MergeFrom(from._internal_linear_velocity());
  }
  if (from.has_sd_position()) {
    _internal_mutable_sd_position()->::perception::common::Point3f::MergeFrom(from._internal_sd_position());
  }
  if (from.has_sd_attitude()) {
    _internal_mutable_sd_attitude()->::perception::common::Point3f::MergeFrom(from._internal_sd_attitude());
  }
  if (from.has_sd_velocity()) {
    _internal_mutable_sd_velocity()->::perception::common::Point3f::MergeFrom(from._internal_sd_velocity());
  }
  if (from.has_corr_angular_velocity()) {
    _internal_mutable_corr_angular_velocity()->::perception::common::Point3f::MergeFrom(from._internal_corr_angular_velocity());
  }
  if (from.has_corr_linear_accel()) {
    _internal_mutable_corr_linear_accel()->::perception::common::Point3f::MergeFrom(from._internal_corr_linear_accel());
  }
  if (from.has_mounting_error()) {
    _internal_mutable_mounting_error()->::perception::common::Point3f::MergeFrom(from._internal_mounting_error());
  }
  if (from.is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
  if (from.gps_week() != 0) {
    _internal_set_gps_week(from._internal_gps_week());
  }
  if (!(from.gps_sec() <= 0 && from.gps_sec() >= 0)) {
    _internal_set_gps_sec(from._internal_gps_sec());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.elevation() <= 0 && from.elevation() >= 0)) {
    _internal_set_elevation(from._internal_elevation());
  }
  if (from.sys_status() != 0) {
    _internal_set_sys_status(from._internal_sys_status());
  }
  if (from.gps_status() != 0) {
    _internal_set_gps_status(from._internal_gps_status());
  }
  if (from.warn_info() != 0) {
    _internal_set_warn_info(from._internal_warn_info());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
}

void InsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.InsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsData::CopyFrom(const InsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.InsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsData::IsInitialized() const {
  return true;
}

void InsData::InternalSwap(InsData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsData, heading_)
      + sizeof(InsData::heading_)
      - PROTOBUF_FIELD_OFFSET(InsData, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::InsData* Arena::CreateMaybeMessage< ::minieye::InsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::InsData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
