// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parking_gnss.proto

#include "parking_gnss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_parking_5fgnss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsensingGNSSData_parking_5fgnss_2eproto;
namespace minieye {
namespace parking {
class AsensingGNSSDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsensingGNSSData> _instance;
} _AsensingGNSSData_default_instance_;
class AsensingGNSSDatasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsensingGNSSDatas> _instance;
} _AsensingGNSSDatas_default_instance_;
}  // namespace parking
}  // namespace minieye
static void InitDefaultsscc_info_AsensingGNSSData_parking_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_AsensingGNSSData_default_instance_;
    new (ptr) ::minieye::parking::AsensingGNSSData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::AsensingGNSSData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsensingGNSSData_parking_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AsensingGNSSData_parking_5fgnss_2eproto}, {}};

static void InitDefaultsscc_info_AsensingGNSSDatas_parking_5fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_AsensingGNSSDatas_default_instance_;
    new (ptr) ::minieye::parking::AsensingGNSSDatas();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::AsensingGNSSDatas::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AsensingGNSSDatas_parking_5fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AsensingGNSSDatas_parking_5fgnss_2eproto}, {
      &scc_info_AsensingGNSSData_parking_5fgnss_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_parking_5fgnss_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_parking_5fgnss_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_parking_5fgnss_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_parking_5fgnss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, pos_measurement_time_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, vel_measurement_time_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, heading_measurement_time_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, latitude_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, longitude_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, height_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, latitude_std_dev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, longitude_std_dev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, height_std_dev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, position_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, velocity_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, heading_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, horizontal_speed_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, track_over_ground_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, vertical_speed_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, heading_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, heading_std_dev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSData, num_sats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingGNSSDatas, asensing_gnss_datas_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::parking::AsensingGNSSData)},
  { 26, -1, sizeof(::minieye::parking::AsensingGNSSDatas)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_AsensingGNSSData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_AsensingGNSSDatas_default_instance_),
};

const char descriptor_table_protodef_parking_5fgnss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022parking_gnss.proto\022\017minieye.parking\"\362\003"
  "\n\020AsensingGNSSData\022\021\n\ttimestamp\030\001 \001(\004\022\014\n"
  "\004tick\030\002 \001(\004\022\020\n\010frame_id\030\003 \001(\004\022\034\n\024pos_mea"
  "surement_time\030\004 \001(\004\022\034\n\024vel_measurement_t"
  "ime\030\005 \001(\004\022 \n\030heading_measurement_time\030\006 "
  "\001(\004\022\020\n\010latitude\030\007 \001(\001\022\021\n\tlongitude\030\010 \001(\001"
  "\022\016\n\006height\030\t \001(\001\022\030\n\020latitude_std_dev\030\n \001"
  "(\002\022\031\n\021longitude_std_dev\030\013 \001(\002\022\026\n\016height_"
  "std_dev\030\014 \001(\002\022\025\n\rposition_type\030\r \001(\r\022\025\n\r"
  "velocity_type\030\016 \001(\r\022\024\n\014heading_type\030\017 \001("
  "\r\022\030\n\020horizontal_speed\030\020 \001(\002\022\031\n\021track_ove"
  "r_ground\030\021 \001(\002\022\026\n\016vertical_speed\030\022 \001(\002\022\017"
  "\n\007heading\030\023 \001(\002\022\027\n\017heading_std_dev\030\024 \001(\002"
  "\022\020\n\010num_sats\030\025 \001(\r\"S\n\021AsensingGNSSDatas\022"
  ">\n\023asensing_gnss_datas\030\001 \003(\0132!.minieye.p"
  "arking.AsensingGNSSDatab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_parking_5fgnss_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_parking_5fgnss_2eproto_sccs[2] = {
  &scc_info_AsensingGNSSData_parking_5fgnss_2eproto.base,
  &scc_info_AsensingGNSSDatas_parking_5fgnss_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_parking_5fgnss_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parking_5fgnss_2eproto = {
  false, false, descriptor_table_protodef_parking_5fgnss_2eproto, "parking_gnss.proto", 631,
  &descriptor_table_parking_5fgnss_2eproto_once, descriptor_table_parking_5fgnss_2eproto_sccs, descriptor_table_parking_5fgnss_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_parking_5fgnss_2eproto::offsets,
  file_level_metadata_parking_5fgnss_2eproto, 2, file_level_enum_descriptors_parking_5fgnss_2eproto, file_level_service_descriptors_parking_5fgnss_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_parking_5fgnss_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_parking_5fgnss_2eproto)), true);
namespace minieye {
namespace parking {

// ===================================================================

void AsensingGNSSData::InitAsDefaultInstance() {
}
class AsensingGNSSData::_Internal {
 public:
};

AsensingGNSSData::AsensingGNSSData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.AsensingGNSSData)
}
AsensingGNSSData::AsensingGNSSData(const AsensingGNSSData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_sats_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(num_sats_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.AsensingGNSSData)
}

void AsensingGNSSData::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sats_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(num_sats_));
}

AsensingGNSSData::~AsensingGNSSData() {
  // @@protoc_insertion_point(destructor:minieye.parking.AsensingGNSSData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AsensingGNSSData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AsensingGNSSData::ArenaDtor(void* object) {
  AsensingGNSSData* _this = reinterpret_cast< AsensingGNSSData* >(object);
  (void)_this;
}
void AsensingGNSSData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AsensingGNSSData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsensingGNSSData& AsensingGNSSData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsensingGNSSData_parking_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void AsensingGNSSData::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.AsensingGNSSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sats_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(num_sats_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsensingGNSSData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pos_measurement_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pos_measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 vel_measurement_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          vel_measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 heading_measurement_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          heading_measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float latitude_std_dev = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          latitude_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float longitude_std_dev = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          longitude_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height_std_dev = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          height_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 position_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          position_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 velocity_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          velocity_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 heading_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          heading_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float horizontal_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          horizontal_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float track_over_ground = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          track_over_ground_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vertical_speed = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          vertical_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading_std_dev = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          heading_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 num_sats = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          num_sats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsensingGNSSData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.AsensingGNSSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tick(), target);
  }

  // uint64 frame_id = 3;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_frame_id(), target);
  }

  // uint64 pos_measurement_time = 4;
  if (this->pos_measurement_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pos_measurement_time(), target);
  }

  // uint64 vel_measurement_time = 5;
  if (this->vel_measurement_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_vel_measurement_time(), target);
  }

  // uint64 heading_measurement_time = 6;
  if (this->heading_measurement_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_heading_measurement_time(), target);
  }

  // double latitude = 7;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_latitude(), target);
  }

  // double longitude = 8;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_longitude(), target);
  }

  // double height = 9;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_height(), target);
  }

  // float latitude_std_dev = 10;
  if (!(this->latitude_std_dev() <= 0 && this->latitude_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_latitude_std_dev(), target);
  }

  // float longitude_std_dev = 11;
  if (!(this->longitude_std_dev() <= 0 && this->longitude_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_longitude_std_dev(), target);
  }

  // float height_std_dev = 12;
  if (!(this->height_std_dev() <= 0 && this->height_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_height_std_dev(), target);
  }

  // uint32 position_type = 13;
  if (this->position_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_position_type(), target);
  }

  // uint32 velocity_type = 14;
  if (this->velocity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_velocity_type(), target);
  }

  // uint32 heading_type = 15;
  if (this->heading_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_heading_type(), target);
  }

  // float horizontal_speed = 16;
  if (!(this->horizontal_speed() <= 0 && this->horizontal_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_horizontal_speed(), target);
  }

  // float track_over_ground = 17;
  if (!(this->track_over_ground() <= 0 && this->track_over_ground() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_track_over_ground(), target);
  }

  // float vertical_speed = 18;
  if (!(this->vertical_speed() <= 0 && this->vertical_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_vertical_speed(), target);
  }

  // float heading = 19;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_heading(), target);
  }

  // float heading_std_dev = 20;
  if (!(this->heading_std_dev() <= 0 && this->heading_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_heading_std_dev(), target);
  }

  // uint32 num_sats = 21;
  if (this->num_sats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_num_sats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.AsensingGNSSData)
  return target;
}

size_t AsensingGNSSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.AsensingGNSSData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 frame_id = 3;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 pos_measurement_time = 4;
  if (this->pos_measurement_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pos_measurement_time());
  }

  // uint64 vel_measurement_time = 5;
  if (this->vel_measurement_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_vel_measurement_time());
  }

  // uint64 heading_measurement_time = 6;
  if (this->heading_measurement_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_heading_measurement_time());
  }

  // double latitude = 7;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 8;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 9;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // float latitude_std_dev = 10;
  if (!(this->latitude_std_dev() <= 0 && this->latitude_std_dev() >= 0)) {
    total_size += 1 + 4;
  }

  // float longitude_std_dev = 11;
  if (!(this->longitude_std_dev() <= 0 && this->longitude_std_dev() >= 0)) {
    total_size += 1 + 4;
  }

  // float height_std_dev = 12;
  if (!(this->height_std_dev() <= 0 && this->height_std_dev() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 position_type = 13;
  if (this->position_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position_type());
  }

  // uint32 velocity_type = 14;
  if (this->velocity_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_velocity_type());
  }

  // uint32 heading_type = 15;
  if (this->heading_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_heading_type());
  }

  // float horizontal_speed = 16;
  if (!(this->horizontal_speed() <= 0 && this->horizontal_speed() >= 0)) {
    total_size += 2 + 4;
  }

  // float track_over_ground = 17;
  if (!(this->track_over_ground() <= 0 && this->track_over_ground() >= 0)) {
    total_size += 2 + 4;
  }

  // float vertical_speed = 18;
  if (!(this->vertical_speed() <= 0 && this->vertical_speed() >= 0)) {
    total_size += 2 + 4;
  }

  // float heading = 19;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 2 + 4;
  }

  // float heading_std_dev = 20;
  if (!(this->heading_std_dev() <= 0 && this->heading_std_dev() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 num_sats = 21;
  if (this->num_sats() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_sats());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsensingGNSSData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.AsensingGNSSData)
  GOOGLE_DCHECK_NE(&from, this);
  const AsensingGNSSData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsensingGNSSData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.AsensingGNSSData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.AsensingGNSSData)
    MergeFrom(*source);
  }
}

void AsensingGNSSData::MergeFrom(const AsensingGNSSData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.AsensingGNSSData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.pos_measurement_time() != 0) {
    _internal_set_pos_measurement_time(from._internal_pos_measurement_time());
  }
  if (from.vel_measurement_time() != 0) {
    _internal_set_vel_measurement_time(from._internal_vel_measurement_time());
  }
  if (from.heading_measurement_time() != 0) {
    _internal_set_heading_measurement_time(from._internal_heading_measurement_time());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.latitude_std_dev() <= 0 && from.latitude_std_dev() >= 0)) {
    _internal_set_latitude_std_dev(from._internal_latitude_std_dev());
  }
  if (!(from.longitude_std_dev() <= 0 && from.longitude_std_dev() >= 0)) {
    _internal_set_longitude_std_dev(from._internal_longitude_std_dev());
  }
  if (!(from.height_std_dev() <= 0 && from.height_std_dev() >= 0)) {
    _internal_set_height_std_dev(from._internal_height_std_dev());
  }
  if (from.position_type() != 0) {
    _internal_set_position_type(from._internal_position_type());
  }
  if (from.velocity_type() != 0) {
    _internal_set_velocity_type(from._internal_velocity_type());
  }
  if (from.heading_type() != 0) {
    _internal_set_heading_type(from._internal_heading_type());
  }
  if (!(from.horizontal_speed() <= 0 && from.horizontal_speed() >= 0)) {
    _internal_set_horizontal_speed(from._internal_horizontal_speed());
  }
  if (!(from.track_over_ground() <= 0 && from.track_over_ground() >= 0)) {
    _internal_set_track_over_ground(from._internal_track_over_ground());
  }
  if (!(from.vertical_speed() <= 0 && from.vertical_speed() >= 0)) {
    _internal_set_vertical_speed(from._internal_vertical_speed());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.heading_std_dev() <= 0 && from.heading_std_dev() >= 0)) {
    _internal_set_heading_std_dev(from._internal_heading_std_dev());
  }
  if (from.num_sats() != 0) {
    _internal_set_num_sats(from._internal_num_sats());
  }
}

void AsensingGNSSData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.AsensingGNSSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsensingGNSSData::CopyFrom(const AsensingGNSSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.AsensingGNSSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsensingGNSSData::IsInitialized() const {
  return true;
}

void AsensingGNSSData::InternalSwap(AsensingGNSSData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AsensingGNSSData, num_sats_)
      + sizeof(AsensingGNSSData::num_sats_)
      - PROTOBUF_FIELD_OFFSET(AsensingGNSSData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AsensingGNSSData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsensingGNSSDatas::InitAsDefaultInstance() {
}
class AsensingGNSSDatas::_Internal {
 public:
};

AsensingGNSSDatas::AsensingGNSSDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  asensing_gnss_datas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.AsensingGNSSDatas)
}
AsensingGNSSDatas::AsensingGNSSDatas(const AsensingGNSSDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      asensing_gnss_datas_(from.asensing_gnss_datas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minieye.parking.AsensingGNSSDatas)
}

void AsensingGNSSDatas::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AsensingGNSSDatas_parking_5fgnss_2eproto.base);
}

AsensingGNSSDatas::~AsensingGNSSDatas() {
  // @@protoc_insertion_point(destructor:minieye.parking.AsensingGNSSDatas)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AsensingGNSSDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AsensingGNSSDatas::ArenaDtor(void* object) {
  AsensingGNSSDatas* _this = reinterpret_cast< AsensingGNSSDatas* >(object);
  (void)_this;
}
void AsensingGNSSDatas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AsensingGNSSDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsensingGNSSDatas& AsensingGNSSDatas::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsensingGNSSDatas_parking_5fgnss_2eproto.base);
  return *internal_default_instance();
}


void AsensingGNSSDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.AsensingGNSSDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asensing_gnss_datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsensingGNSSDatas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .minieye.parking.AsensingGNSSData asensing_gnss_datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asensing_gnss_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsensingGNSSDatas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.AsensingGNSSDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minieye.parking.AsensingGNSSData asensing_gnss_datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_asensing_gnss_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_asensing_gnss_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.AsensingGNSSDatas)
  return target;
}

size_t AsensingGNSSDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.AsensingGNSSDatas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.parking.AsensingGNSSData asensing_gnss_datas = 1;
  total_size += 1UL * this->_internal_asensing_gnss_datas_size();
  for (const auto& msg : this->asensing_gnss_datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsensingGNSSDatas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.AsensingGNSSDatas)
  GOOGLE_DCHECK_NE(&from, this);
  const AsensingGNSSDatas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsensingGNSSDatas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.AsensingGNSSDatas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.AsensingGNSSDatas)
    MergeFrom(*source);
  }
}

void AsensingGNSSDatas::MergeFrom(const AsensingGNSSDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.AsensingGNSSDatas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  asensing_gnss_datas_.MergeFrom(from.asensing_gnss_datas_);
}

void AsensingGNSSDatas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.AsensingGNSSDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsensingGNSSDatas::CopyFrom(const AsensingGNSSDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.AsensingGNSSDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsensingGNSSDatas::IsInitialized() const {
  return true;
}

void AsensingGNSSDatas::InternalSwap(AsensingGNSSDatas* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asensing_gnss_datas_.InternalSwap(&other->asensing_gnss_datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsensingGNSSDatas::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace parking
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::parking::AsensingGNSSData* Arena::CreateMaybeMessage< ::minieye::parking::AsensingGNSSData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::AsensingGNSSData >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::AsensingGNSSDatas* Arena::CreateMaybeMessage< ::minieye::parking::AsensingGNSSDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::AsensingGNSSDatas >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
