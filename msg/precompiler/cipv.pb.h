// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cipv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cipv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cipv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cipv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cipv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cipv_2eproto;
namespace perception {
class CIPV;
class CIPVDefaultTypeInternal;
extern CIPVDefaultTypeInternal _CIPV_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::CIPV* Arena::CreateMaybeMessage<::perception::CIPV>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

// ===================================================================

class CIPV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.CIPV) */ {
 public:
  inline CIPV() : CIPV(nullptr) {};
  virtual ~CIPV();

  CIPV(const CIPV& from);
  CIPV(CIPV&& from) noexcept
    : CIPV() {
    *this = ::std::move(from);
  }

  inline CIPV& operator=(const CIPV& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIPV& operator=(CIPV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CIPV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CIPV* internal_default_instance() {
    return reinterpret_cast<const CIPV*>(
               &_CIPV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CIPV& a, CIPV& b) {
    a.Swap(&b);
  }
  inline void Swap(CIPV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CIPV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIPV* New() const final {
    return CreateMaybeMessage<CIPV>(nullptr);
  }

  CIPV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIPV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CIPV& from);
  void MergeFrom(const CIPV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CIPV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.CIPV";
  }
  protected:
  explicit CIPV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cipv_2eproto);
    return ::descriptor_table_cipv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 1,
    kTickFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kVehicleIdFieldNumber = 4,
    kLongitudeDistFieldNumber = 5,
    kLateralDistFieldNumber = 6,
    kRelLongitudeSpeedFieldNumber = 7,
    kRelLateralSpeedFieldNumber = 8,
    kTtcFieldNumber = 9,
  };
  // uint64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 2;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 vehicle_id = 4;
  void clear_vehicle_id();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_id() const;
  void set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_id() const;
  void _internal_set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float longitude_dist = 5;
  void clear_longitude_dist();
  float longitude_dist() const;
  void set_longitude_dist(float value);
  private:
  float _internal_longitude_dist() const;
  void _internal_set_longitude_dist(float value);
  public:

  // float lateral_dist = 6;
  void clear_lateral_dist();
  float lateral_dist() const;
  void set_lateral_dist(float value);
  private:
  float _internal_lateral_dist() const;
  void _internal_set_lateral_dist(float value);
  public:

  // float rel_longitude_speed = 7;
  void clear_rel_longitude_speed();
  float rel_longitude_speed() const;
  void set_rel_longitude_speed(float value);
  private:
  float _internal_rel_longitude_speed() const;
  void _internal_set_rel_longitude_speed(float value);
  public:

  // float rel_lateral_speed = 8;
  void clear_rel_lateral_speed();
  float rel_lateral_speed() const;
  void set_rel_lateral_speed(float value);
  private:
  float _internal_rel_lateral_speed() const;
  void _internal_set_rel_lateral_speed(float value);
  public:

  // float ttc = 9;
  void clear_ttc();
  float ttc() const;
  void set_ttc(float value);
  private:
  float _internal_ttc() const;
  void _internal_set_ttc(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.CIPV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_id_;
  float longitude_dist_;
  float lateral_dist_;
  float rel_longitude_speed_;
  float rel_lateral_speed_;
  float ttc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cipv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CIPV

// uint64 frame_id = 1;
inline void CIPV::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIPV::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIPV::frame_id() const {
  // @@protoc_insertion_point(field_get:perception.CIPV.frame_id)
  return _internal_frame_id();
}
inline void CIPV::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void CIPV::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:perception.CIPV.frame_id)
}

// uint64 tick = 2;
inline void CIPV::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIPV::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIPV::tick() const {
  // @@protoc_insertion_point(field_get:perception.CIPV.tick)
  return _internal_tick();
}
inline void CIPV::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void CIPV::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:perception.CIPV.tick)
}

// uint64 timestamp = 3;
inline void CIPV::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIPV::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CIPV::timestamp() const {
  // @@protoc_insertion_point(field_get:perception.CIPV.timestamp)
  return _internal_timestamp();
}
inline void CIPV::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void CIPV::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perception.CIPV.timestamp)
}

// int32 vehicle_id = 4;
inline void CIPV::clear_vehicle_id() {
  vehicle_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CIPV::_internal_vehicle_id() const {
  return vehicle_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CIPV::vehicle_id() const {
  // @@protoc_insertion_point(field_get:perception.CIPV.vehicle_id)
  return _internal_vehicle_id();
}
inline void CIPV::_internal_set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_id_ = value;
}
inline void CIPV::set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:perception.CIPV.vehicle_id)
}

// float longitude_dist = 5;
inline void CIPV::clear_longitude_dist() {
  longitude_dist_ = 0;
}
inline float CIPV::_internal_longitude_dist() const {
  return longitude_dist_;
}
inline float CIPV::longitude_dist() const {
  // @@protoc_insertion_point(field_get:perception.CIPV.longitude_dist)
  return _internal_longitude_dist();
}
inline void CIPV::_internal_set_longitude_dist(float value) {
  
  longitude_dist_ = value;
}
inline void CIPV::set_longitude_dist(float value) {
  _internal_set_longitude_dist(value);
  // @@protoc_insertion_point(field_set:perception.CIPV.longitude_dist)
}

// float lateral_dist = 6;
inline void CIPV::clear_lateral_dist() {
  lateral_dist_ = 0;
}
inline float CIPV::_internal_lateral_dist() const {
  return lateral_dist_;
}
inline float CIPV::lateral_dist() const {
  // @@protoc_insertion_point(field_get:perception.CIPV.lateral_dist)
  return _internal_lateral_dist();
}
inline void CIPV::_internal_set_lateral_dist(float value) {
  
  lateral_dist_ = value;
}
inline void CIPV::set_lateral_dist(float value) {
  _internal_set_lateral_dist(value);
  // @@protoc_insertion_point(field_set:perception.CIPV.lateral_dist)
}

// float rel_longitude_speed = 7;
inline void CIPV::clear_rel_longitude_speed() {
  rel_longitude_speed_ = 0;
}
inline float CIPV::_internal_rel_longitude_speed() const {
  return rel_longitude_speed_;
}
inline float CIPV::rel_longitude_speed() const {
  // @@protoc_insertion_point(field_get:perception.CIPV.rel_longitude_speed)
  return _internal_rel_longitude_speed();
}
inline void CIPV::_internal_set_rel_longitude_speed(float value) {
  
  rel_longitude_speed_ = value;
}
inline void CIPV::set_rel_longitude_speed(float value) {
  _internal_set_rel_longitude_speed(value);
  // @@protoc_insertion_point(field_set:perception.CIPV.rel_longitude_speed)
}

// float rel_lateral_speed = 8;
inline void CIPV::clear_rel_lateral_speed() {
  rel_lateral_speed_ = 0;
}
inline float CIPV::_internal_rel_lateral_speed() const {
  return rel_lateral_speed_;
}
inline float CIPV::rel_lateral_speed() const {
  // @@protoc_insertion_point(field_get:perception.CIPV.rel_lateral_speed)
  return _internal_rel_lateral_speed();
}
inline void CIPV::_internal_set_rel_lateral_speed(float value) {
  
  rel_lateral_speed_ = value;
}
inline void CIPV::set_rel_lateral_speed(float value) {
  _internal_set_rel_lateral_speed(value);
  // @@protoc_insertion_point(field_set:perception.CIPV.rel_lateral_speed)
}

// float ttc = 9;
inline void CIPV::clear_ttc() {
  ttc_ = 0;
}
inline float CIPV::_internal_ttc() const {
  return ttc_;
}
inline float CIPV::ttc() const {
  // @@protoc_insertion_point(field_get:perception.CIPV.ttc)
  return _internal_ttc();
}
inline void CIPV::_internal_set_ttc(float value) {
  
  ttc_ = value;
}
inline void CIPV::set_ttc(float value) {
  _internal_set_ttc(value);
  // @@protoc_insertion_point(field_set:perception.CIPV.ttc)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cipv_2eproto
