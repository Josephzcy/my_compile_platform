// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vtr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vtr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vtr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vtr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vtr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vtr_2eproto;
namespace minieye {
class Vtr;
class VtrDefaultTypeInternal;
extern VtrDefaultTypeInternal _Vtr_default_instance_;
class VtrPathPoint;
class VtrPathPointDefaultTypeInternal;
extern VtrPathPointDefaultTypeInternal _VtrPathPoint_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::Vtr* Arena::CreateMaybeMessage<::minieye::Vtr>(Arena*);
template<> ::minieye::VtrPathPoint* Arena::CreateMaybeMessage<::minieye::VtrPathPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

enum Vtr_VtrStatus : int {
  Vtr_VtrStatus_Standby = 0,
  Vtr_VtrStatus_RecordingPath = 1,
  Vtr_VtrStatus_PathSatisfied = 2,
  Vtr_VtrStatus_PathSmoothed = 3,
  Vtr_VtrStatus_PathSended = 4,
  Vtr_VtrStatus_Vtr_VtrStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Vtr_VtrStatus_Vtr_VtrStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Vtr_VtrStatus_IsValid(int value);
constexpr Vtr_VtrStatus Vtr_VtrStatus_VtrStatus_MIN = Vtr_VtrStatus_Standby;
constexpr Vtr_VtrStatus Vtr_VtrStatus_VtrStatus_MAX = Vtr_VtrStatus_PathSended;
constexpr int Vtr_VtrStatus_VtrStatus_ARRAYSIZE = Vtr_VtrStatus_VtrStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vtr_VtrStatus_descriptor();
template<typename T>
inline const std::string& Vtr_VtrStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vtr_VtrStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vtr_VtrStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vtr_VtrStatus_descriptor(), enum_t_value);
}
inline bool Vtr_VtrStatus_Parse(
    const std::string& name, Vtr_VtrStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vtr_VtrStatus>(
    Vtr_VtrStatus_descriptor(), name, value);
}
// ===================================================================

class VtrPathPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.VtrPathPoint) */ {
 public:
  inline VtrPathPoint() : VtrPathPoint(nullptr) {};
  virtual ~VtrPathPoint();

  VtrPathPoint(const VtrPathPoint& from);
  VtrPathPoint(VtrPathPoint&& from) noexcept
    : VtrPathPoint() {
    *this = ::std::move(from);
  }

  inline VtrPathPoint& operator=(const VtrPathPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline VtrPathPoint& operator=(VtrPathPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VtrPathPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VtrPathPoint* internal_default_instance() {
    return reinterpret_cast<const VtrPathPoint*>(
               &_VtrPathPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VtrPathPoint& a, VtrPathPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(VtrPathPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VtrPathPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VtrPathPoint* New() const final {
    return CreateMaybeMessage<VtrPathPoint>(nullptr);
  }

  VtrPathPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VtrPathPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VtrPathPoint& from);
  void MergeFrom(const VtrPathPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VtrPathPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.VtrPathPoint";
  }
  protected:
  explicit VtrPathPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtr_2eproto);
    return ::descriptor_table_vtr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kThetaFieldNumber = 3,
    kSFieldNumber = 4,
    kKappaFieldNumber = 5,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float theta = 3;
  void clear_theta();
  float theta() const;
  void set_theta(float value);
  private:
  float _internal_theta() const;
  void _internal_set_theta(float value);
  public:

  // float s = 4;
  void clear_s();
  float s() const;
  void set_s(float value);
  private:
  float _internal_s() const;
  void _internal_set_s(float value);
  public:

  // float kappa = 5;
  void clear_kappa();
  float kappa() const;
  void set_kappa(float value);
  private:
  float _internal_kappa() const;
  void _internal_set_kappa(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.VtrPathPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float theta_;
  float s_;
  float kappa_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtr_2eproto;
};
// -------------------------------------------------------------------

class Vtr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.Vtr) */ {
 public:
  inline Vtr() : Vtr(nullptr) {};
  virtual ~Vtr();

  Vtr(const Vtr& from);
  Vtr(Vtr&& from) noexcept
    : Vtr() {
    *this = ::std::move(from);
  }

  inline Vtr& operator=(const Vtr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vtr& operator=(Vtr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vtr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vtr* internal_default_instance() {
    return reinterpret_cast<const Vtr*>(
               &_Vtr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vtr& a, Vtr& b) {
    a.Swap(&b);
  }
  inline void Swap(Vtr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vtr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vtr* New() const final {
    return CreateMaybeMessage<Vtr>(nullptr);
  }

  Vtr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vtr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vtr& from);
  void MergeFrom(const Vtr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vtr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.Vtr";
  }
  protected:
  explicit Vtr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vtr_2eproto);
    return ::descriptor_table_vtr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Vtr_VtrStatus VtrStatus;
  static constexpr VtrStatus Standby =
    Vtr_VtrStatus_Standby;
  static constexpr VtrStatus RecordingPath =
    Vtr_VtrStatus_RecordingPath;
  static constexpr VtrStatus PathSatisfied =
    Vtr_VtrStatus_PathSatisfied;
  static constexpr VtrStatus PathSmoothed =
    Vtr_VtrStatus_PathSmoothed;
  static constexpr VtrStatus PathSended =
    Vtr_VtrStatus_PathSended;
  static inline bool VtrStatus_IsValid(int value) {
    return Vtr_VtrStatus_IsValid(value);
  }
  static constexpr VtrStatus VtrStatus_MIN =
    Vtr_VtrStatus_VtrStatus_MIN;
  static constexpr VtrStatus VtrStatus_MAX =
    Vtr_VtrStatus_VtrStatus_MAX;
  static constexpr int VtrStatus_ARRAYSIZE =
    Vtr_VtrStatus_VtrStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VtrStatus_descriptor() {
    return Vtr_VtrStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& VtrStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VtrStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VtrStatus_Name.");
    return Vtr_VtrStatus_Name(enum_t_value);
  }
  static inline bool VtrStatus_Parse(const std::string& name,
      VtrStatus* value) {
    return Vtr_VtrStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVtrPathPointsFieldNumber = 5,
    kTimestampFieldNumber = 1,
    kTickFieldNumber = 2,
    kFrameIdFieldNumber = 3,
    kVtrStatusFieldNumber = 4,
  };
  // repeated .minieye.VtrPathPoint vtr_path_points = 5;
  int vtr_path_points_size() const;
  private:
  int _internal_vtr_path_points_size() const;
  public:
  void clear_vtr_path_points();
  ::minieye::VtrPathPoint* mutable_vtr_path_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::VtrPathPoint >*
      mutable_vtr_path_points();
  private:
  const ::minieye::VtrPathPoint& _internal_vtr_path_points(int index) const;
  ::minieye::VtrPathPoint* _internal_add_vtr_path_points();
  public:
  const ::minieye::VtrPathPoint& vtr_path_points(int index) const;
  ::minieye::VtrPathPoint* add_vtr_path_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::VtrPathPoint >&
      vtr_path_points() const;

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 2;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 frame_id = 3;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .minieye.Vtr.VtrStatus vtr_status = 4;
  void clear_vtr_status();
  ::minieye::Vtr_VtrStatus vtr_status() const;
  void set_vtr_status(::minieye::Vtr_VtrStatus value);
  private:
  ::minieye::Vtr_VtrStatus _internal_vtr_status() const;
  void _internal_set_vtr_status(::minieye::Vtr_VtrStatus value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.Vtr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::VtrPathPoint > vtr_path_points_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  int vtr_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vtr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VtrPathPoint

// float x = 1;
inline void VtrPathPoint::clear_x() {
  x_ = 0;
}
inline float VtrPathPoint::_internal_x() const {
  return x_;
}
inline float VtrPathPoint::x() const {
  // @@protoc_insertion_point(field_get:minieye.VtrPathPoint.x)
  return _internal_x();
}
inline void VtrPathPoint::_internal_set_x(float value) {
  
  x_ = value;
}
inline void VtrPathPoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minieye.VtrPathPoint.x)
}

// float y = 2;
inline void VtrPathPoint::clear_y() {
  y_ = 0;
}
inline float VtrPathPoint::_internal_y() const {
  return y_;
}
inline float VtrPathPoint::y() const {
  // @@protoc_insertion_point(field_get:minieye.VtrPathPoint.y)
  return _internal_y();
}
inline void VtrPathPoint::_internal_set_y(float value) {
  
  y_ = value;
}
inline void VtrPathPoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minieye.VtrPathPoint.y)
}

// float theta = 3;
inline void VtrPathPoint::clear_theta() {
  theta_ = 0;
}
inline float VtrPathPoint::_internal_theta() const {
  return theta_;
}
inline float VtrPathPoint::theta() const {
  // @@protoc_insertion_point(field_get:minieye.VtrPathPoint.theta)
  return _internal_theta();
}
inline void VtrPathPoint::_internal_set_theta(float value) {
  
  theta_ = value;
}
inline void VtrPathPoint::set_theta(float value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:minieye.VtrPathPoint.theta)
}

// float s = 4;
inline void VtrPathPoint::clear_s() {
  s_ = 0;
}
inline float VtrPathPoint::_internal_s() const {
  return s_;
}
inline float VtrPathPoint::s() const {
  // @@protoc_insertion_point(field_get:minieye.VtrPathPoint.s)
  return _internal_s();
}
inline void VtrPathPoint::_internal_set_s(float value) {
  
  s_ = value;
}
inline void VtrPathPoint::set_s(float value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:minieye.VtrPathPoint.s)
}

// float kappa = 5;
inline void VtrPathPoint::clear_kappa() {
  kappa_ = 0;
}
inline float VtrPathPoint::_internal_kappa() const {
  return kappa_;
}
inline float VtrPathPoint::kappa() const {
  // @@protoc_insertion_point(field_get:minieye.VtrPathPoint.kappa)
  return _internal_kappa();
}
inline void VtrPathPoint::_internal_set_kappa(float value) {
  
  kappa_ = value;
}
inline void VtrPathPoint::set_kappa(float value) {
  _internal_set_kappa(value);
  // @@protoc_insertion_point(field_set:minieye.VtrPathPoint.kappa)
}

// -------------------------------------------------------------------

// Vtr

// uint64 timestamp = 1;
inline void Vtr::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vtr::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vtr::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.Vtr.timestamp)
  return _internal_timestamp();
}
inline void Vtr::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Vtr::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.Vtr.timestamp)
}

// uint64 tick = 2;
inline void Vtr::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vtr::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vtr::tick() const {
  // @@protoc_insertion_point(field_get:minieye.Vtr.tick)
  return _internal_tick();
}
inline void Vtr::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void Vtr::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.Vtr.tick)
}

// uint64 frame_id = 3;
inline void Vtr::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vtr::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vtr::frame_id() const {
  // @@protoc_insertion_point(field_get:minieye.Vtr.frame_id)
  return _internal_frame_id();
}
inline void Vtr::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void Vtr::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:minieye.Vtr.frame_id)
}

// .minieye.Vtr.VtrStatus vtr_status = 4;
inline void Vtr::clear_vtr_status() {
  vtr_status_ = 0;
}
inline ::minieye::Vtr_VtrStatus Vtr::_internal_vtr_status() const {
  return static_cast< ::minieye::Vtr_VtrStatus >(vtr_status_);
}
inline ::minieye::Vtr_VtrStatus Vtr::vtr_status() const {
  // @@protoc_insertion_point(field_get:minieye.Vtr.vtr_status)
  return _internal_vtr_status();
}
inline void Vtr::_internal_set_vtr_status(::minieye::Vtr_VtrStatus value) {
  
  vtr_status_ = value;
}
inline void Vtr::set_vtr_status(::minieye::Vtr_VtrStatus value) {
  _internal_set_vtr_status(value);
  // @@protoc_insertion_point(field_set:minieye.Vtr.vtr_status)
}

// repeated .minieye.VtrPathPoint vtr_path_points = 5;
inline int Vtr::_internal_vtr_path_points_size() const {
  return vtr_path_points_.size();
}
inline int Vtr::vtr_path_points_size() const {
  return _internal_vtr_path_points_size();
}
inline void Vtr::clear_vtr_path_points() {
  vtr_path_points_.Clear();
}
inline ::minieye::VtrPathPoint* Vtr::mutable_vtr_path_points(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.Vtr.vtr_path_points)
  return vtr_path_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::VtrPathPoint >*
Vtr::mutable_vtr_path_points() {
  // @@protoc_insertion_point(field_mutable_list:minieye.Vtr.vtr_path_points)
  return &vtr_path_points_;
}
inline const ::minieye::VtrPathPoint& Vtr::_internal_vtr_path_points(int index) const {
  return vtr_path_points_.Get(index);
}
inline const ::minieye::VtrPathPoint& Vtr::vtr_path_points(int index) const {
  // @@protoc_insertion_point(field_get:minieye.Vtr.vtr_path_points)
  return _internal_vtr_path_points(index);
}
inline ::minieye::VtrPathPoint* Vtr::_internal_add_vtr_path_points() {
  return vtr_path_points_.Add();
}
inline ::minieye::VtrPathPoint* Vtr::add_vtr_path_points() {
  // @@protoc_insertion_point(field_add:minieye.Vtr.vtr_path_points)
  return _internal_add_vtr_path_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::VtrPathPoint >&
Vtr::vtr_path_points() const {
  // @@protoc_insertion_point(field_list:minieye.Vtr.vtr_path_points)
  return vtr_path_points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minieye::Vtr_VtrStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::Vtr_VtrStatus>() {
  return ::minieye::Vtr_VtrStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vtr_2eproto
