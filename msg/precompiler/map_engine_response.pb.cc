// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_engine_response.proto

#include "map_engine_response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_planning_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Planning_planning_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_odometry_5f3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3d_odometry_5f3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_odometry_5f3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose6d_odometry_5f3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_5fengine_5fresponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapEngineResponse_Semantic_map_5fengine_5fresponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_5fengine_5fresponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapEngineResponse_Slope_map_5fengine_5fresponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_5fengine_5fresponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapEngineResponse_Turn_map_5fengine_5fresponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parkingspace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParkingSlot_parkingspace_2eproto;
namespace minieye {
namespace parking {
class MapEngineResponse_TurnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapEngineResponse_Turn> _instance;
} _MapEngineResponse_Turn_default_instance_;
class MapEngineResponse_SlopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapEngineResponse_Slope> _instance;
} _MapEngineResponse_Slope_default_instance_;
class MapEngineResponse_SemanticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapEngineResponse_Semantic> _instance;
} _MapEngineResponse_Semantic_default_instance_;
class MapEngineResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapEngineResponse> _instance;
} _MapEngineResponse_default_instance_;
}  // namespace parking
}  // namespace minieye
static void InitDefaultsscc_info_MapEngineResponse_map_5fengine_5fresponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_MapEngineResponse_default_instance_;
    new (ptr) ::minieye::parking::MapEngineResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::MapEngineResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_MapEngineResponse_map_5fengine_5fresponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_MapEngineResponse_map_5fengine_5fresponse_2eproto}, {
      &scc_info_Planning_planning_2eproto.base,
      &scc_info_Point3d_odometry_5f3d_2eproto.base,
      &scc_info_ParkingSlot_parkingspace_2eproto.base,
      &scc_info_MapEngineResponse_Turn_map_5fengine_5fresponse_2eproto.base,
      &scc_info_MapEngineResponse_Slope_map_5fengine_5fresponse_2eproto.base,
      &scc_info_MapEngineResponse_Semantic_map_5fengine_5fresponse_2eproto.base,
      &scc_info_Pose6d_odometry_5f3d_2eproto.base,}};

static void InitDefaultsscc_info_MapEngineResponse_Semantic_map_5fengine_5fresponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_MapEngineResponse_Semantic_default_instance_;
    new (ptr) ::minieye::parking::MapEngineResponse_Semantic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::MapEngineResponse_Semantic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapEngineResponse_Semantic_map_5fengine_5fresponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapEngineResponse_Semantic_map_5fengine_5fresponse_2eproto}, {
      &scc_info_Point3d_odometry_5f3d_2eproto.base,}};

static void InitDefaultsscc_info_MapEngineResponse_Slope_map_5fengine_5fresponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_MapEngineResponse_Slope_default_instance_;
    new (ptr) ::minieye::parking::MapEngineResponse_Slope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::MapEngineResponse_Slope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapEngineResponse_Slope_map_5fengine_5fresponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapEngineResponse_Slope_map_5fengine_5fresponse_2eproto}, {
      &scc_info_Point3d_odometry_5f3d_2eproto.base,}};

static void InitDefaultsscc_info_MapEngineResponse_Turn_map_5fengine_5fresponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_MapEngineResponse_Turn_default_instance_;
    new (ptr) ::minieye::parking::MapEngineResponse_Turn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::MapEngineResponse_Turn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapEngineResponse_Turn_map_5fengine_5fresponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapEngineResponse_Turn_map_5fengine_5fresponse_2eproto}, {
      &scc_info_Point3d_odometry_5f3d_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_map_5fengine_5fresponse_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_map_5fengine_5fresponse_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_map_5fengine_5fresponse_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_map_5fengine_5fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse_Turn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse_Turn, turn_start_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse_Turn, turn_end_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse_Turn, true_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse_Slope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse_Slope, slope_start_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse_Slope, slope_end_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse_Slope, slope_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse_Semantic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse_Semantic, semantic_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse_Semantic, contour_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse, planning_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse, mapping_triger_point_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse, trajectory_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse, target_parking_slot_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse, turn_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse, slope_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse, semantic_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::MapEngineResponse, mapping_end_pose_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::parking::MapEngineResponse_Turn)},
  { 8, -1, sizeof(::minieye::parking::MapEngineResponse_Slope)},
  { 16, -1, sizeof(::minieye::parking::MapEngineResponse_Semantic)},
  { 23, -1, sizeof(::minieye::parking::MapEngineResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_MapEngineResponse_Turn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_MapEngineResponse_Slope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_MapEngineResponse_Semantic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_MapEngineResponse_default_instance_),
};

const char descriptor_table_protodef_map_5fengine_5fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031map_engine_response.proto\022\017minieye.par"
  "king\032\016planning.proto\032\021odometry_3d.proto\032"
  "\022parkingspace.proto\"\251\010\n\021MapEngineRespons"
  "e\022\021\n\ttimestamp\030\001 \001(\004\022\014\n\004tick\030\002 \001(\004\022\020\n\010fr"
  "ame_id\030\003 \001(\004\022#\n\010planning\030\004 \001(\0132\021.minieye"
  ".Planning\022.\n\024mapping_triger_point\030\005 \001(\0132"
  "\020.minieye.Point3d\022$\n\ntrajectory\030\006 \003(\0132\020."
  "minieye.Point3d\0224\n\023target_parking_slot\030\007"
  " \001(\0132\027.perception.ParkingSlot\0225\n\004turn\030\010 "
  "\003(\0132\'.minieye.parking.MapEngineResponse."
  "Turn\0227\n\005slope\030\t \003(\0132(.minieye.parking.Ma"
  "pEngineResponse.Slope\022=\n\010semantic\030\n \003(\0132"
  "+.minieye.parking.MapEngineResponse.Sema"
  "ntic\022)\n\020mapping_end_pose\030\013 \001(\0132\017.minieye"
  ".Pose6d\032\312\001\n\004Turn\022$\n\nturn_start\030\001 \001(\0132\020.m"
  "inieye.Point3d\022\"\n\010turn_end\030\002 \001(\0132\020.minie"
  "ye.Point3d\022C\n\ttrue_type\030\003 \001(\01620.minieye."
  "parking.MapEngineResponse.Turn.TurnType\""
  "3\n\010TurnType\022\005\n\001U\020\000\022\r\n\tClockWise\020\001\022\021\n\rAnt"
  "iClockWise\020\002\032\272\001\n\005Slope\022%\n\013slope_start\030\001 "
  "\001(\0132\020.minieye.Point3d\022#\n\tslope_end\030\002 \001(\013"
  "2\020.minieye.Point3d\022F\n\nslope_type\030\003 \001(\01622"
  ".minieye.parking.MapEngineResponse.Slope"
  ".SlopeType\"\035\n\tSlopeType\022\006\n\002Up\020\000\022\010\n\004Down\020"
  "\001\032\313\001\n\010Semantic\022O\n\rsemantic_type\030\001 \001(\01628."
  "minieye.parking.MapEngineResponse.Semant"
  "ic.SemanticType\022(\n\016contour_points\030\002 \003(\0132"
  "\020.minieye.Point3d\"D\n\014SemanticType\022\017\n\013Par"
  "kingSlot\020\000\022\010\n\004Lane\020\001\022\r\n\tSpeedBump\020\002\022\n\n\006P"
  "illar\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_map_5fengine_5fresponse_2eproto_deps[3] = {
  &::descriptor_table_odometry_5f3d_2eproto,
  &::descriptor_table_parkingspace_2eproto,
  &::descriptor_table_planning_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_map_5fengine_5fresponse_2eproto_sccs[4] = {
  &scc_info_MapEngineResponse_map_5fengine_5fresponse_2eproto.base,
  &scc_info_MapEngineResponse_Semantic_map_5fengine_5fresponse_2eproto.base,
  &scc_info_MapEngineResponse_Slope_map_5fengine_5fresponse_2eproto.base,
  &scc_info_MapEngineResponse_Turn_map_5fengine_5fresponse_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_map_5fengine_5fresponse_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5fengine_5fresponse_2eproto = {
  false, false, descriptor_table_protodef_map_5fengine_5fresponse_2eproto, "map_engine_response.proto", 1175,
  &descriptor_table_map_5fengine_5fresponse_2eproto_once, descriptor_table_map_5fengine_5fresponse_2eproto_sccs, descriptor_table_map_5fengine_5fresponse_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_map_5fengine_5fresponse_2eproto::offsets,
  file_level_metadata_map_5fengine_5fresponse_2eproto, 4, file_level_enum_descriptors_map_5fengine_5fresponse_2eproto, file_level_service_descriptors_map_5fengine_5fresponse_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_map_5fengine_5fresponse_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_map_5fengine_5fresponse_2eproto)), true);
namespace minieye {
namespace parking {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapEngineResponse_Turn_TurnType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_map_5fengine_5fresponse_2eproto);
  return file_level_enum_descriptors_map_5fengine_5fresponse_2eproto[0];
}
bool MapEngineResponse_Turn_TurnType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MapEngineResponse_Turn_TurnType MapEngineResponse_Turn::U;
constexpr MapEngineResponse_Turn_TurnType MapEngineResponse_Turn::ClockWise;
constexpr MapEngineResponse_Turn_TurnType MapEngineResponse_Turn::AntiClockWise;
constexpr MapEngineResponse_Turn_TurnType MapEngineResponse_Turn::TurnType_MIN;
constexpr MapEngineResponse_Turn_TurnType MapEngineResponse_Turn::TurnType_MAX;
constexpr int MapEngineResponse_Turn::TurnType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapEngineResponse_Slope_SlopeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_map_5fengine_5fresponse_2eproto);
  return file_level_enum_descriptors_map_5fengine_5fresponse_2eproto[1];
}
bool MapEngineResponse_Slope_SlopeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MapEngineResponse_Slope_SlopeType MapEngineResponse_Slope::Up;
constexpr MapEngineResponse_Slope_SlopeType MapEngineResponse_Slope::Down;
constexpr MapEngineResponse_Slope_SlopeType MapEngineResponse_Slope::SlopeType_MIN;
constexpr MapEngineResponse_Slope_SlopeType MapEngineResponse_Slope::SlopeType_MAX;
constexpr int MapEngineResponse_Slope::SlopeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapEngineResponse_Semantic_SemanticType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_map_5fengine_5fresponse_2eproto);
  return file_level_enum_descriptors_map_5fengine_5fresponse_2eproto[2];
}
bool MapEngineResponse_Semantic_SemanticType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MapEngineResponse_Semantic_SemanticType MapEngineResponse_Semantic::ParkingSlot;
constexpr MapEngineResponse_Semantic_SemanticType MapEngineResponse_Semantic::Lane;
constexpr MapEngineResponse_Semantic_SemanticType MapEngineResponse_Semantic::SpeedBump;
constexpr MapEngineResponse_Semantic_SemanticType MapEngineResponse_Semantic::Pillar;
constexpr MapEngineResponse_Semantic_SemanticType MapEngineResponse_Semantic::SemanticType_MIN;
constexpr MapEngineResponse_Semantic_SemanticType MapEngineResponse_Semantic::SemanticType_MAX;
constexpr int MapEngineResponse_Semantic::SemanticType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MapEngineResponse_Turn::InitAsDefaultInstance() {
  ::minieye::parking::_MapEngineResponse_Turn_default_instance_._instance.get_mutable()->turn_start_ = const_cast< ::minieye::Point3d*>(
      ::minieye::Point3d::internal_default_instance());
  ::minieye::parking::_MapEngineResponse_Turn_default_instance_._instance.get_mutable()->turn_end_ = const_cast< ::minieye::Point3d*>(
      ::minieye::Point3d::internal_default_instance());
}
class MapEngineResponse_Turn::_Internal {
 public:
  static const ::minieye::Point3d& turn_start(const MapEngineResponse_Turn* msg);
  static const ::minieye::Point3d& turn_end(const MapEngineResponse_Turn* msg);
};

const ::minieye::Point3d&
MapEngineResponse_Turn::_Internal::turn_start(const MapEngineResponse_Turn* msg) {
  return *msg->turn_start_;
}
const ::minieye::Point3d&
MapEngineResponse_Turn::_Internal::turn_end(const MapEngineResponse_Turn* msg) {
  return *msg->turn_end_;
}
void MapEngineResponse_Turn::clear_turn_start() {
  if (GetArena() == nullptr && turn_start_ != nullptr) {
    delete turn_start_;
  }
  turn_start_ = nullptr;
}
void MapEngineResponse_Turn::clear_turn_end() {
  if (GetArena() == nullptr && turn_end_ != nullptr) {
    delete turn_end_;
  }
  turn_end_ = nullptr;
}
MapEngineResponse_Turn::MapEngineResponse_Turn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.MapEngineResponse.Turn)
}
MapEngineResponse_Turn::MapEngineResponse_Turn(const MapEngineResponse_Turn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_turn_start()) {
    turn_start_ = new ::minieye::Point3d(*from.turn_start_);
  } else {
    turn_start_ = nullptr;
  }
  if (from._internal_has_turn_end()) {
    turn_end_ = new ::minieye::Point3d(*from.turn_end_);
  } else {
    turn_end_ = nullptr;
  }
  true_type_ = from.true_type_;
  // @@protoc_insertion_point(copy_constructor:minieye.parking.MapEngineResponse.Turn)
}

void MapEngineResponse_Turn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapEngineResponse_Turn_map_5fengine_5fresponse_2eproto.base);
  ::memset(&turn_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&true_type_) -
      reinterpret_cast<char*>(&turn_start_)) + sizeof(true_type_));
}

MapEngineResponse_Turn::~MapEngineResponse_Turn() {
  // @@protoc_insertion_point(destructor:minieye.parking.MapEngineResponse.Turn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapEngineResponse_Turn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete turn_start_;
  if (this != internal_default_instance()) delete turn_end_;
}

void MapEngineResponse_Turn::ArenaDtor(void* object) {
  MapEngineResponse_Turn* _this = reinterpret_cast< MapEngineResponse_Turn* >(object);
  (void)_this;
}
void MapEngineResponse_Turn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapEngineResponse_Turn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapEngineResponse_Turn& MapEngineResponse_Turn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapEngineResponse_Turn_map_5fengine_5fresponse_2eproto.base);
  return *internal_default_instance();
}


void MapEngineResponse_Turn::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.MapEngineResponse.Turn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && turn_start_ != nullptr) {
    delete turn_start_;
  }
  turn_start_ = nullptr;
  if (GetArena() == nullptr && turn_end_ != nullptr) {
    delete turn_end_;
  }
  turn_end_ = nullptr;
  true_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapEngineResponse_Turn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.Point3d turn_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_turn_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Point3d turn_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_turn_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.MapEngineResponse.Turn.TurnType true_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_true_type(static_cast<::minieye::parking::MapEngineResponse_Turn_TurnType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapEngineResponse_Turn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.MapEngineResponse.Turn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.Point3d turn_start = 1;
  if (this->has_turn_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::turn_start(this), target, stream);
  }

  // .minieye.Point3d turn_end = 2;
  if (this->has_turn_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::turn_end(this), target, stream);
  }

  // .minieye.parking.MapEngineResponse.Turn.TurnType true_type = 3;
  if (this->true_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_true_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.MapEngineResponse.Turn)
  return target;
}

size_t MapEngineResponse_Turn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.MapEngineResponse.Turn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.Point3d turn_start = 1;
  if (this->has_turn_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *turn_start_);
  }

  // .minieye.Point3d turn_end = 2;
  if (this->has_turn_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *turn_end_);
  }

  // .minieye.parking.MapEngineResponse.Turn.TurnType true_type = 3;
  if (this->true_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_true_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapEngineResponse_Turn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.MapEngineResponse.Turn)
  GOOGLE_DCHECK_NE(&from, this);
  const MapEngineResponse_Turn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapEngineResponse_Turn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.MapEngineResponse.Turn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.MapEngineResponse.Turn)
    MergeFrom(*source);
  }
}

void MapEngineResponse_Turn::MergeFrom(const MapEngineResponse_Turn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.MapEngineResponse.Turn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_turn_start()) {
    _internal_mutable_turn_start()->::minieye::Point3d::MergeFrom(from._internal_turn_start());
  }
  if (from.has_turn_end()) {
    _internal_mutable_turn_end()->::minieye::Point3d::MergeFrom(from._internal_turn_end());
  }
  if (from.true_type() != 0) {
    _internal_set_true_type(from._internal_true_type());
  }
}

void MapEngineResponse_Turn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.MapEngineResponse.Turn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapEngineResponse_Turn::CopyFrom(const MapEngineResponse_Turn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.MapEngineResponse.Turn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapEngineResponse_Turn::IsInitialized() const {
  return true;
}

void MapEngineResponse_Turn::InternalSwap(MapEngineResponse_Turn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapEngineResponse_Turn, true_type_)
      + sizeof(MapEngineResponse_Turn::true_type_)
      - PROTOBUF_FIELD_OFFSET(MapEngineResponse_Turn, turn_start_)>(
          reinterpret_cast<char*>(&turn_start_),
          reinterpret_cast<char*>(&other->turn_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapEngineResponse_Turn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapEngineResponse_Slope::InitAsDefaultInstance() {
  ::minieye::parking::_MapEngineResponse_Slope_default_instance_._instance.get_mutable()->slope_start_ = const_cast< ::minieye::Point3d*>(
      ::minieye::Point3d::internal_default_instance());
  ::minieye::parking::_MapEngineResponse_Slope_default_instance_._instance.get_mutable()->slope_end_ = const_cast< ::minieye::Point3d*>(
      ::minieye::Point3d::internal_default_instance());
}
class MapEngineResponse_Slope::_Internal {
 public:
  static const ::minieye::Point3d& slope_start(const MapEngineResponse_Slope* msg);
  static const ::minieye::Point3d& slope_end(const MapEngineResponse_Slope* msg);
};

const ::minieye::Point3d&
MapEngineResponse_Slope::_Internal::slope_start(const MapEngineResponse_Slope* msg) {
  return *msg->slope_start_;
}
const ::minieye::Point3d&
MapEngineResponse_Slope::_Internal::slope_end(const MapEngineResponse_Slope* msg) {
  return *msg->slope_end_;
}
void MapEngineResponse_Slope::clear_slope_start() {
  if (GetArena() == nullptr && slope_start_ != nullptr) {
    delete slope_start_;
  }
  slope_start_ = nullptr;
}
void MapEngineResponse_Slope::clear_slope_end() {
  if (GetArena() == nullptr && slope_end_ != nullptr) {
    delete slope_end_;
  }
  slope_end_ = nullptr;
}
MapEngineResponse_Slope::MapEngineResponse_Slope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.MapEngineResponse.Slope)
}
MapEngineResponse_Slope::MapEngineResponse_Slope(const MapEngineResponse_Slope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slope_start()) {
    slope_start_ = new ::minieye::Point3d(*from.slope_start_);
  } else {
    slope_start_ = nullptr;
  }
  if (from._internal_has_slope_end()) {
    slope_end_ = new ::minieye::Point3d(*from.slope_end_);
  } else {
    slope_end_ = nullptr;
  }
  slope_type_ = from.slope_type_;
  // @@protoc_insertion_point(copy_constructor:minieye.parking.MapEngineResponse.Slope)
}

void MapEngineResponse_Slope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapEngineResponse_Slope_map_5fengine_5fresponse_2eproto.base);
  ::memset(&slope_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slope_type_) -
      reinterpret_cast<char*>(&slope_start_)) + sizeof(slope_type_));
}

MapEngineResponse_Slope::~MapEngineResponse_Slope() {
  // @@protoc_insertion_point(destructor:minieye.parking.MapEngineResponse.Slope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapEngineResponse_Slope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete slope_start_;
  if (this != internal_default_instance()) delete slope_end_;
}

void MapEngineResponse_Slope::ArenaDtor(void* object) {
  MapEngineResponse_Slope* _this = reinterpret_cast< MapEngineResponse_Slope* >(object);
  (void)_this;
}
void MapEngineResponse_Slope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapEngineResponse_Slope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapEngineResponse_Slope& MapEngineResponse_Slope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapEngineResponse_Slope_map_5fengine_5fresponse_2eproto.base);
  return *internal_default_instance();
}


void MapEngineResponse_Slope::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.MapEngineResponse.Slope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && slope_start_ != nullptr) {
    delete slope_start_;
  }
  slope_start_ = nullptr;
  if (GetArena() == nullptr && slope_end_ != nullptr) {
    delete slope_end_;
  }
  slope_end_ = nullptr;
  slope_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapEngineResponse_Slope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.Point3d slope_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slope_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Point3d slope_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slope_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.MapEngineResponse.Slope.SlopeType slope_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_slope_type(static_cast<::minieye::parking::MapEngineResponse_Slope_SlopeType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapEngineResponse_Slope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.MapEngineResponse.Slope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.Point3d slope_start = 1;
  if (this->has_slope_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::slope_start(this), target, stream);
  }

  // .minieye.Point3d slope_end = 2;
  if (this->has_slope_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slope_end(this), target, stream);
  }

  // .minieye.parking.MapEngineResponse.Slope.SlopeType slope_type = 3;
  if (this->slope_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_slope_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.MapEngineResponse.Slope)
  return target;
}

size_t MapEngineResponse_Slope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.MapEngineResponse.Slope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.Point3d slope_start = 1;
  if (this->has_slope_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slope_start_);
  }

  // .minieye.Point3d slope_end = 2;
  if (this->has_slope_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slope_end_);
  }

  // .minieye.parking.MapEngineResponse.Slope.SlopeType slope_type = 3;
  if (this->slope_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_slope_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapEngineResponse_Slope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.MapEngineResponse.Slope)
  GOOGLE_DCHECK_NE(&from, this);
  const MapEngineResponse_Slope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapEngineResponse_Slope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.MapEngineResponse.Slope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.MapEngineResponse.Slope)
    MergeFrom(*source);
  }
}

void MapEngineResponse_Slope::MergeFrom(const MapEngineResponse_Slope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.MapEngineResponse.Slope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slope_start()) {
    _internal_mutable_slope_start()->::minieye::Point3d::MergeFrom(from._internal_slope_start());
  }
  if (from.has_slope_end()) {
    _internal_mutable_slope_end()->::minieye::Point3d::MergeFrom(from._internal_slope_end());
  }
  if (from.slope_type() != 0) {
    _internal_set_slope_type(from._internal_slope_type());
  }
}

void MapEngineResponse_Slope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.MapEngineResponse.Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapEngineResponse_Slope::CopyFrom(const MapEngineResponse_Slope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.MapEngineResponse.Slope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapEngineResponse_Slope::IsInitialized() const {
  return true;
}

void MapEngineResponse_Slope::InternalSwap(MapEngineResponse_Slope* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapEngineResponse_Slope, slope_type_)
      + sizeof(MapEngineResponse_Slope::slope_type_)
      - PROTOBUF_FIELD_OFFSET(MapEngineResponse_Slope, slope_start_)>(
          reinterpret_cast<char*>(&slope_start_),
          reinterpret_cast<char*>(&other->slope_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapEngineResponse_Slope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapEngineResponse_Semantic::InitAsDefaultInstance() {
}
class MapEngineResponse_Semantic::_Internal {
 public:
};

void MapEngineResponse_Semantic::clear_contour_points() {
  contour_points_.Clear();
}
MapEngineResponse_Semantic::MapEngineResponse_Semantic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contour_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.MapEngineResponse.Semantic)
}
MapEngineResponse_Semantic::MapEngineResponse_Semantic(const MapEngineResponse_Semantic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contour_points_(from.contour_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  semantic_type_ = from.semantic_type_;
  // @@protoc_insertion_point(copy_constructor:minieye.parking.MapEngineResponse.Semantic)
}

void MapEngineResponse_Semantic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapEngineResponse_Semantic_map_5fengine_5fresponse_2eproto.base);
  semantic_type_ = 0;
}

MapEngineResponse_Semantic::~MapEngineResponse_Semantic() {
  // @@protoc_insertion_point(destructor:minieye.parking.MapEngineResponse.Semantic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapEngineResponse_Semantic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MapEngineResponse_Semantic::ArenaDtor(void* object) {
  MapEngineResponse_Semantic* _this = reinterpret_cast< MapEngineResponse_Semantic* >(object);
  (void)_this;
}
void MapEngineResponse_Semantic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapEngineResponse_Semantic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapEngineResponse_Semantic& MapEngineResponse_Semantic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapEngineResponse_Semantic_map_5fengine_5fresponse_2eproto.base);
  return *internal_default_instance();
}


void MapEngineResponse_Semantic::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.MapEngineResponse.Semantic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contour_points_.Clear();
  semantic_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapEngineResponse_Semantic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.MapEngineResponse.Semantic.SemanticType semantic_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_semantic_type(static_cast<::minieye::parking::MapEngineResponse_Semantic_SemanticType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.Point3d contour_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contour_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapEngineResponse_Semantic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.MapEngineResponse.Semantic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.MapEngineResponse.Semantic.SemanticType semantic_type = 1;
  if (this->semantic_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_semantic_type(), target);
  }

  // repeated .minieye.Point3d contour_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contour_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_contour_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.MapEngineResponse.Semantic)
  return target;
}

size_t MapEngineResponse_Semantic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.MapEngineResponse.Semantic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.Point3d contour_points = 2;
  total_size += 1UL * this->_internal_contour_points_size();
  for (const auto& msg : this->contour_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .minieye.parking.MapEngineResponse.Semantic.SemanticType semantic_type = 1;
  if (this->semantic_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_semantic_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapEngineResponse_Semantic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.MapEngineResponse.Semantic)
  GOOGLE_DCHECK_NE(&from, this);
  const MapEngineResponse_Semantic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapEngineResponse_Semantic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.MapEngineResponse.Semantic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.MapEngineResponse.Semantic)
    MergeFrom(*source);
  }
}

void MapEngineResponse_Semantic::MergeFrom(const MapEngineResponse_Semantic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.MapEngineResponse.Semantic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contour_points_.MergeFrom(from.contour_points_);
  if (from.semantic_type() != 0) {
    _internal_set_semantic_type(from._internal_semantic_type());
  }
}

void MapEngineResponse_Semantic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.MapEngineResponse.Semantic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapEngineResponse_Semantic::CopyFrom(const MapEngineResponse_Semantic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.MapEngineResponse.Semantic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapEngineResponse_Semantic::IsInitialized() const {
  return true;
}

void MapEngineResponse_Semantic::InternalSwap(MapEngineResponse_Semantic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contour_points_.InternalSwap(&other->contour_points_);
  swap(semantic_type_, other->semantic_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapEngineResponse_Semantic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapEngineResponse::InitAsDefaultInstance() {
  ::minieye::parking::_MapEngineResponse_default_instance_._instance.get_mutable()->planning_ = const_cast< ::minieye::Planning*>(
      ::minieye::Planning::internal_default_instance());
  ::minieye::parking::_MapEngineResponse_default_instance_._instance.get_mutable()->mapping_triger_point_ = const_cast< ::minieye::Point3d*>(
      ::minieye::Point3d::internal_default_instance());
  ::minieye::parking::_MapEngineResponse_default_instance_._instance.get_mutable()->target_parking_slot_ = const_cast< ::perception::ParkingSlot*>(
      ::perception::ParkingSlot::internal_default_instance());
  ::minieye::parking::_MapEngineResponse_default_instance_._instance.get_mutable()->mapping_end_pose_ = const_cast< ::minieye::Pose6d*>(
      ::minieye::Pose6d::internal_default_instance());
}
class MapEngineResponse::_Internal {
 public:
  static const ::minieye::Planning& planning(const MapEngineResponse* msg);
  static const ::minieye::Point3d& mapping_triger_point(const MapEngineResponse* msg);
  static const ::perception::ParkingSlot& target_parking_slot(const MapEngineResponse* msg);
  static const ::minieye::Pose6d& mapping_end_pose(const MapEngineResponse* msg);
};

const ::minieye::Planning&
MapEngineResponse::_Internal::planning(const MapEngineResponse* msg) {
  return *msg->planning_;
}
const ::minieye::Point3d&
MapEngineResponse::_Internal::mapping_triger_point(const MapEngineResponse* msg) {
  return *msg->mapping_triger_point_;
}
const ::perception::ParkingSlot&
MapEngineResponse::_Internal::target_parking_slot(const MapEngineResponse* msg) {
  return *msg->target_parking_slot_;
}
const ::minieye::Pose6d&
MapEngineResponse::_Internal::mapping_end_pose(const MapEngineResponse* msg) {
  return *msg->mapping_end_pose_;
}
void MapEngineResponse::clear_planning() {
  if (GetArena() == nullptr && planning_ != nullptr) {
    delete planning_;
  }
  planning_ = nullptr;
}
void MapEngineResponse::clear_mapping_triger_point() {
  if (GetArena() == nullptr && mapping_triger_point_ != nullptr) {
    delete mapping_triger_point_;
  }
  mapping_triger_point_ = nullptr;
}
void MapEngineResponse::clear_trajectory() {
  trajectory_.Clear();
}
void MapEngineResponse::clear_target_parking_slot() {
  if (GetArena() == nullptr && target_parking_slot_ != nullptr) {
    delete target_parking_slot_;
  }
  target_parking_slot_ = nullptr;
}
void MapEngineResponse::clear_mapping_end_pose() {
  if (GetArena() == nullptr && mapping_end_pose_ != nullptr) {
    delete mapping_end_pose_;
  }
  mapping_end_pose_ = nullptr;
}
MapEngineResponse::MapEngineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trajectory_(arena),
  turn_(arena),
  slope_(arena),
  semantic_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.MapEngineResponse)
}
MapEngineResponse::MapEngineResponse(const MapEngineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trajectory_(from.trajectory_),
      turn_(from.turn_),
      slope_(from.slope_),
      semantic_(from.semantic_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_planning()) {
    planning_ = new ::minieye::Planning(*from.planning_);
  } else {
    planning_ = nullptr;
  }
  if (from._internal_has_mapping_triger_point()) {
    mapping_triger_point_ = new ::minieye::Point3d(*from.mapping_triger_point_);
  } else {
    mapping_triger_point_ = nullptr;
  }
  if (from._internal_has_target_parking_slot()) {
    target_parking_slot_ = new ::perception::ParkingSlot(*from.target_parking_slot_);
  } else {
    target_parking_slot_ = nullptr;
  }
  if (from._internal_has_mapping_end_pose()) {
    mapping_end_pose_ = new ::minieye::Pose6d(*from.mapping_end_pose_);
  } else {
    mapping_end_pose_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(frame_id_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.MapEngineResponse)
}

void MapEngineResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapEngineResponse_map_5fengine_5fresponse_2eproto.base);
  ::memset(&planning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&planning_)) + sizeof(frame_id_));
}

MapEngineResponse::~MapEngineResponse() {
  // @@protoc_insertion_point(destructor:minieye.parking.MapEngineResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapEngineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete planning_;
  if (this != internal_default_instance()) delete mapping_triger_point_;
  if (this != internal_default_instance()) delete target_parking_slot_;
  if (this != internal_default_instance()) delete mapping_end_pose_;
}

void MapEngineResponse::ArenaDtor(void* object) {
  MapEngineResponse* _this = reinterpret_cast< MapEngineResponse* >(object);
  (void)_this;
}
void MapEngineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapEngineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapEngineResponse& MapEngineResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapEngineResponse_map_5fengine_5fresponse_2eproto.base);
  return *internal_default_instance();
}


void MapEngineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.MapEngineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_.Clear();
  turn_.Clear();
  slope_.Clear();
  semantic_.Clear();
  if (GetArena() == nullptr && planning_ != nullptr) {
    delete planning_;
  }
  planning_ = nullptr;
  if (GetArena() == nullptr && mapping_triger_point_ != nullptr) {
    delete mapping_triger_point_;
  }
  mapping_triger_point_ = nullptr;
  if (GetArena() == nullptr && target_parking_slot_ != nullptr) {
    delete target_parking_slot_;
  }
  target_parking_slot_ = nullptr;
  if (GetArena() == nullptr && mapping_end_pose_ != nullptr) {
    delete mapping_end_pose_;
  }
  mapping_end_pose_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapEngineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Planning planning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_planning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Point3d mapping_triger_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapping_triger_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minieye.Point3d trajectory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.ParkingSlot target_parking_slot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_parking_slot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.MapEngineResponse.Turn turn = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_turn(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.MapEngineResponse.Slope slope = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slope(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.MapEngineResponse.Semantic semantic = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_semantic(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .minieye.Pose6d mapping_end_pose = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapping_end_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapEngineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.MapEngineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tick(), target);
  }

  // uint64 frame_id = 3;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_frame_id(), target);
  }

  // .minieye.Planning planning = 4;
  if (this->has_planning()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::planning(this), target, stream);
  }

  // .minieye.Point3d mapping_triger_point = 5;
  if (this->has_mapping_triger_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mapping_triger_point(this), target, stream);
  }

  // repeated .minieye.Point3d trajectory = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_trajectory(i), target, stream);
  }

  // .perception.ParkingSlot target_parking_slot = 7;
  if (this->has_target_parking_slot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::target_parking_slot(this), target, stream);
  }

  // repeated .minieye.parking.MapEngineResponse.Turn turn = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_turn_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_turn(i), target, stream);
  }

  // repeated .minieye.parking.MapEngineResponse.Slope slope = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slope_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_slope(i), target, stream);
  }

  // repeated .minieye.parking.MapEngineResponse.Semantic semantic = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_semantic_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_semantic(i), target, stream);
  }

  // .minieye.Pose6d mapping_end_pose = 11;
  if (this->has_mapping_end_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::mapping_end_pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.MapEngineResponse)
  return target;
}

size_t MapEngineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.MapEngineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.Point3d trajectory = 6;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.parking.MapEngineResponse.Turn turn = 8;
  total_size += 1UL * this->_internal_turn_size();
  for (const auto& msg : this->turn_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.parking.MapEngineResponse.Slope slope = 9;
  total_size += 1UL * this->_internal_slope_size();
  for (const auto& msg : this->slope_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.parking.MapEngineResponse.Semantic semantic = 10;
  total_size += 1UL * this->_internal_semantic_size();
  for (const auto& msg : this->semantic_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .minieye.Planning planning = 4;
  if (this->has_planning()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *planning_);
  }

  // .minieye.Point3d mapping_triger_point = 5;
  if (this->has_mapping_triger_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mapping_triger_point_);
  }

  // .perception.ParkingSlot target_parking_slot = 7;
  if (this->has_target_parking_slot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_parking_slot_);
  }

  // .minieye.Pose6d mapping_end_pose = 11;
  if (this->has_mapping_end_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mapping_end_pose_);
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 frame_id = 3;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapEngineResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.MapEngineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MapEngineResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapEngineResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.MapEngineResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.MapEngineResponse)
    MergeFrom(*source);
  }
}

void MapEngineResponse::MergeFrom(const MapEngineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.MapEngineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
  turn_.MergeFrom(from.turn_);
  slope_.MergeFrom(from.slope_);
  semantic_.MergeFrom(from.semantic_);
  if (from.has_planning()) {
    _internal_mutable_planning()->::minieye::Planning::MergeFrom(from._internal_planning());
  }
  if (from.has_mapping_triger_point()) {
    _internal_mutable_mapping_triger_point()->::minieye::Point3d::MergeFrom(from._internal_mapping_triger_point());
  }
  if (from.has_target_parking_slot()) {
    _internal_mutable_target_parking_slot()->::perception::ParkingSlot::MergeFrom(from._internal_target_parking_slot());
  }
  if (from.has_mapping_end_pose()) {
    _internal_mutable_mapping_end_pose()->::minieye::Pose6d::MergeFrom(from._internal_mapping_end_pose());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void MapEngineResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.MapEngineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapEngineResponse::CopyFrom(const MapEngineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.MapEngineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapEngineResponse::IsInitialized() const {
  return true;
}

void MapEngineResponse::InternalSwap(MapEngineResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trajectory_.InternalSwap(&other->trajectory_);
  turn_.InternalSwap(&other->turn_);
  slope_.InternalSwap(&other->slope_);
  semantic_.InternalSwap(&other->semantic_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapEngineResponse, frame_id_)
      + sizeof(MapEngineResponse::frame_id_)
      - PROTOBUF_FIELD_OFFSET(MapEngineResponse, planning_)>(
          reinterpret_cast<char*>(&planning_),
          reinterpret_cast<char*>(&other->planning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapEngineResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace parking
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::parking::MapEngineResponse_Turn* Arena::CreateMaybeMessage< ::minieye::parking::MapEngineResponse_Turn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::MapEngineResponse_Turn >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::MapEngineResponse_Slope* Arena::CreateMaybeMessage< ::minieye::parking::MapEngineResponse_Slope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::MapEngineResponse_Slope >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::MapEngineResponse_Semantic* Arena::CreateMaybeMessage< ::minieye::parking::MapEngineResponse_Semantic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::MapEngineResponse_Semantic >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::MapEngineResponse* Arena::CreateMaybeMessage< ::minieye::parking::MapEngineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::MapEngineResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
