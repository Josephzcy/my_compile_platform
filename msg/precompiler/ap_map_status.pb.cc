// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_map_status.proto

#include "ap_map_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fmap_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApMapStatus_JointMatch_ap_5fmap_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5fmap_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApMapStatus_Map_ap_5fmap_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5fmap_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApMapStatus_Map_JointsEntry_DoNotUse_ap_5fmap_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5fmap_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApMapStatus_Pose_ap_5fmap_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5fmap_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApMapStatus_SemanticMatch_ap_5fmap_5fstatus_2eproto;
namespace minieye {
namespace parking {
class ApMapStatus_PoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApMapStatus_Pose> _instance;
} _ApMapStatus_Pose_default_instance_;
class ApMapStatus_Map_JointsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApMapStatus_Map_JointsEntry_DoNotUse> _instance;
} _ApMapStatus_Map_JointsEntry_DoNotUse_default_instance_;
class ApMapStatus_MapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApMapStatus_Map> _instance;
} _ApMapStatus_Map_default_instance_;
class ApMapStatus_JointMatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApMapStatus_JointMatch> _instance;
} _ApMapStatus_JointMatch_default_instance_;
class ApMapStatus_SemanticMatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApMapStatus_SemanticMatch> _instance;
} _ApMapStatus_SemanticMatch_default_instance_;
class ApMapStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApMapStatus> _instance;
} _ApMapStatus_default_instance_;
}  // namespace parking
}  // namespace minieye
static void InitDefaultsscc_info_ApMapStatus_ap_5fmap_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ApMapStatus_default_instance_;
    new (ptr) ::minieye::parking::ApMapStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ApMapStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ApMapStatus_ap_5fmap_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ApMapStatus_ap_5fmap_5fstatus_2eproto}, {
      &scc_info_ApMapStatus_Map_ap_5fmap_5fstatus_2eproto.base,
      &scc_info_ApMapStatus_JointMatch_ap_5fmap_5fstatus_2eproto.base,
      &scc_info_ApMapStatus_SemanticMatch_ap_5fmap_5fstatus_2eproto.base,
      &scc_info_ApMapStatus_Pose_ap_5fmap_5fstatus_2eproto.base,}};

static void InitDefaultsscc_info_ApMapStatus_JointMatch_ap_5fmap_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ApMapStatus_JointMatch_default_instance_;
    new (ptr) ::minieye::parking::ApMapStatus_JointMatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ApMapStatus_JointMatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApMapStatus_JointMatch_ap_5fmap_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApMapStatus_JointMatch_ap_5fmap_5fstatus_2eproto}, {}};

static void InitDefaultsscc_info_ApMapStatus_Map_ap_5fmap_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ApMapStatus_Map_default_instance_;
    new (ptr) ::minieye::parking::ApMapStatus_Map();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ApMapStatus_Map::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApMapStatus_Map_ap_5fmap_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApMapStatus_Map_ap_5fmap_5fstatus_2eproto}, {
      &scc_info_ApMapStatus_Map_JointsEntry_DoNotUse_ap_5fmap_5fstatus_2eproto.base,}};

static void InitDefaultsscc_info_ApMapStatus_Map_JointsEntry_DoNotUse_ap_5fmap_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ApMapStatus_Map_JointsEntry_DoNotUse_default_instance_;
    new (ptr) ::minieye::parking::ApMapStatus_Map_JointsEntry_DoNotUse();
  }
  ::minieye::parking::ApMapStatus_Map_JointsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApMapStatus_Map_JointsEntry_DoNotUse_ap_5fmap_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApMapStatus_Map_JointsEntry_DoNotUse_ap_5fmap_5fstatus_2eproto}, {
      &scc_info_ApMapStatus_Pose_ap_5fmap_5fstatus_2eproto.base,}};

static void InitDefaultsscc_info_ApMapStatus_Pose_ap_5fmap_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ApMapStatus_Pose_default_instance_;
    new (ptr) ::minieye::parking::ApMapStatus_Pose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ApMapStatus_Pose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApMapStatus_Pose_ap_5fmap_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApMapStatus_Pose_ap_5fmap_5fstatus_2eproto}, {}};

static void InitDefaultsscc_info_ApMapStatus_SemanticMatch_ap_5fmap_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ApMapStatus_SemanticMatch_default_instance_;
    new (ptr) ::minieye::parking::ApMapStatus_SemanticMatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ApMapStatus_SemanticMatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApMapStatus_SemanticMatch_ap_5fmap_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApMapStatus_SemanticMatch_ap_5fmap_5fstatus_2eproto}, {
      &scc_info_ApMapStatus_Pose_ap_5fmap_5fstatus_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5fmap_5fstatus_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5fmap_5fstatus_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fmap_5fstatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fmap_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Pose, x_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Pose, y_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Pose, z_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Pose, qw_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Pose, qx_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Pose, qy_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Pose, qz_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Map_JointsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Map_JointsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Map_JointsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Map_JointsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_Map, joints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_JointMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_JointMatch, rt_joint_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_JointMatch, ap_joint_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_SemanticMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_SemanticMatch, ap_point_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus_SemanticMatch, rt_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus, rt_map_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus, ap_map_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus, joint_match_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus, semantic_match_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapStatus, odom_points_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::parking::ApMapStatus_Pose)},
  { 12, 19, sizeof(::minieye::parking::ApMapStatus_Map_JointsEntry_DoNotUse)},
  { 21, -1, sizeof(::minieye::parking::ApMapStatus_Map)},
  { 27, -1, sizeof(::minieye::parking::ApMapStatus_JointMatch)},
  { 34, -1, sizeof(::minieye::parking::ApMapStatus_SemanticMatch)},
  { 41, -1, sizeof(::minieye::parking::ApMapStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ApMapStatus_Pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ApMapStatus_Map_JointsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ApMapStatus_Map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ApMapStatus_JointMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ApMapStatus_SemanticMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ApMapStatus_default_instance_),
};

const char descriptor_table_protodef_ap_5fmap_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023ap_map_status.proto\022\017minieye.parking\"\202"
  "\006\n\013ApMapStatus\022\021\n\ttimestamp\030\001 \001(\004\022\014\n\004tic"
  "k\030\002 \001(\004\022\020\n\010frame_id\030\003 \001(\004\0220\n\006rt_map\030\004 \001("
  "\0132 .minieye.parking.ApMapStatus.Map\0220\n\006a"
  "p_map\030\005 \001(\0132 .minieye.parking.ApMapStatu"
  "s.Map\022<\n\013joint_match\030\006 \003(\0132\'.minieye.par"
  "king.ApMapStatus.JointMatch\022B\n\016semantic_"
  "match\030\007 \003(\0132*.minieye.parking.ApMapStatu"
  "s.SemanticMatch\0226\n\013odom_points\030\010 \003(\0132!.m"
  "inieye.parking.ApMapStatus.Pose\032W\n\004Pose\022"
  "\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\n\n\002qw\030\004"
  " \001(\001\022\n\n\002qx\030\005 \001(\001\022\n\n\002qy\030\006 \001(\001\022\n\n\002qz\030\007 \001(\001"
  "\032\225\001\n\003Map\022<\n\006joints\030\001 \003(\0132,.minieye.parki"
  "ng.ApMapStatus.Map.JointsEntry\032P\n\013Joints"
  "Entry\022\013\n\003key\030\001 \001(\003\0220\n\005value\030\002 \001(\0132!.mini"
  "eye.parking.ApMapStatus.Pose:\0028\001\0326\n\nJoin"
  "tMatch\022\023\n\013rt_joint_id\030\001 \001(\003\022\023\n\013ap_joint_"
  "id\030\002 \001(\003\032y\n\rSemanticMatch\0223\n\010ap_point\030\001 "
  "\001(\0132!.minieye.parking.ApMapStatus.Pose\0223"
  "\n\010rt_point\030\002 \001(\0132!.minieye.parking.ApMap"
  "Status.Poseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fmap_5fstatus_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fmap_5fstatus_2eproto_sccs[6] = {
  &scc_info_ApMapStatus_ap_5fmap_5fstatus_2eproto.base,
  &scc_info_ApMapStatus_JointMatch_ap_5fmap_5fstatus_2eproto.base,
  &scc_info_ApMapStatus_Map_ap_5fmap_5fstatus_2eproto.base,
  &scc_info_ApMapStatus_Map_JointsEntry_DoNotUse_ap_5fmap_5fstatus_2eproto.base,
  &scc_info_ApMapStatus_Pose_ap_5fmap_5fstatus_2eproto.base,
  &scc_info_ApMapStatus_SemanticMatch_ap_5fmap_5fstatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fmap_5fstatus_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fmap_5fstatus_2eproto = {
  false, false, descriptor_table_protodef_ap_5fmap_5fstatus_2eproto, "ap_map_status.proto", 819,
  &descriptor_table_ap_5fmap_5fstatus_2eproto_once, descriptor_table_ap_5fmap_5fstatus_2eproto_sccs, descriptor_table_ap_5fmap_5fstatus_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_ap_5fmap_5fstatus_2eproto::offsets,
  file_level_metadata_ap_5fmap_5fstatus_2eproto, 6, file_level_enum_descriptors_ap_5fmap_5fstatus_2eproto, file_level_service_descriptors_ap_5fmap_5fstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fmap_5fstatus_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fmap_5fstatus_2eproto)), true);
namespace minieye {
namespace parking {

// ===================================================================

void ApMapStatus_Pose::InitAsDefaultInstance() {
}
class ApMapStatus_Pose::_Internal {
 public:
};

ApMapStatus_Pose::ApMapStatus_Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ApMapStatus.Pose)
}
ApMapStatus_Pose::ApMapStatus_Pose(const ApMapStatus_Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&qz_) -
    reinterpret_cast<char*>(&x_)) + sizeof(qz_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ApMapStatus.Pose)
}

void ApMapStatus_Pose::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qz_) -
      reinterpret_cast<char*>(&x_)) + sizeof(qz_));
}

ApMapStatus_Pose::~ApMapStatus_Pose() {
  // @@protoc_insertion_point(destructor:minieye.parking.ApMapStatus.Pose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApMapStatus_Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ApMapStatus_Pose::ArenaDtor(void* object) {
  ApMapStatus_Pose* _this = reinterpret_cast< ApMapStatus_Pose* >(object);
  (void)_this;
}
void ApMapStatus_Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApMapStatus_Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApMapStatus_Pose& ApMapStatus_Pose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApMapStatus_Pose_ap_5fmap_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void ApMapStatus_Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ApMapStatus.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qz_) -
      reinterpret_cast<char*>(&x_)) + sizeof(qz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApMapStatus_Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          qw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          qx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          qy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          qz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApMapStatus_Pose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ApMapStatus.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double qw = 4;
  if (!(this->qw() <= 0 && this->qw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_qw(), target);
  }

  // double qx = 5;
  if (!(this->qx() <= 0 && this->qx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_qx(), target);
  }

  // double qy = 6;
  if (!(this->qy() <= 0 && this->qy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_qy(), target);
  }

  // double qz = 7;
  if (!(this->qz() <= 0 && this->qz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_qz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ApMapStatus.Pose)
  return target;
}

size_t ApMapStatus_Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ApMapStatus.Pose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double qw = 4;
  if (!(this->qw() <= 0 && this->qw() >= 0)) {
    total_size += 1 + 8;
  }

  // double qx = 5;
  if (!(this->qx() <= 0 && this->qx() >= 0)) {
    total_size += 1 + 8;
  }

  // double qy = 6;
  if (!(this->qy() <= 0 && this->qy() >= 0)) {
    total_size += 1 + 8;
  }

  // double qz = 7;
  if (!(this->qz() <= 0 && this->qz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApMapStatus_Pose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ApMapStatus.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const ApMapStatus_Pose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApMapStatus_Pose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ApMapStatus.Pose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ApMapStatus.Pose)
    MergeFrom(*source);
  }
}

void ApMapStatus_Pose::MergeFrom(const ApMapStatus_Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ApMapStatus.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.qw() <= 0 && from.qw() >= 0)) {
    _internal_set_qw(from._internal_qw());
  }
  if (!(from.qx() <= 0 && from.qx() >= 0)) {
    _internal_set_qx(from._internal_qx());
  }
  if (!(from.qy() <= 0 && from.qy() >= 0)) {
    _internal_set_qy(from._internal_qy());
  }
  if (!(from.qz() <= 0 && from.qz() >= 0)) {
    _internal_set_qz(from._internal_qz());
  }
}

void ApMapStatus_Pose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ApMapStatus.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApMapStatus_Pose::CopyFrom(const ApMapStatus_Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ApMapStatus.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApMapStatus_Pose::IsInitialized() const {
  return true;
}

void ApMapStatus_Pose::InternalSwap(ApMapStatus_Pose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApMapStatus_Pose, qz_)
      + sizeof(ApMapStatus_Pose::qz_)
      - PROTOBUF_FIELD_OFFSET(ApMapStatus_Pose, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApMapStatus_Pose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ApMapStatus_Map_JointsEntry_DoNotUse::ApMapStatus_Map_JointsEntry_DoNotUse() {}
ApMapStatus_Map_JointsEntry_DoNotUse::ApMapStatus_Map_JointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ApMapStatus_Map_JointsEntry_DoNotUse::MergeFrom(const ApMapStatus_Map_JointsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ApMapStatus_Map_JointsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ApMapStatus_Map_JointsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ApMapStatus_Map::InitAsDefaultInstance() {
}
class ApMapStatus_Map::_Internal {
 public:
};

ApMapStatus_Map::ApMapStatus_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  joints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ApMapStatus.Map)
}
ApMapStatus_Map::ApMapStatus_Map(const ApMapStatus_Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  joints_.MergeFrom(from.joints_);
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ApMapStatus.Map)
}

void ApMapStatus_Map::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApMapStatus_Map_ap_5fmap_5fstatus_2eproto.base);
}

ApMapStatus_Map::~ApMapStatus_Map() {
  // @@protoc_insertion_point(destructor:minieye.parking.ApMapStatus.Map)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApMapStatus_Map::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ApMapStatus_Map::ArenaDtor(void* object) {
  ApMapStatus_Map* _this = reinterpret_cast< ApMapStatus_Map* >(object);
  (void)_this;
}
void ApMapStatus_Map::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApMapStatus_Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApMapStatus_Map& ApMapStatus_Map::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApMapStatus_Map_ap_5fmap_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void ApMapStatus_Map::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ApMapStatus.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApMapStatus_Map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int64, .minieye.parking.ApMapStatus.Pose> joints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&joints_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApMapStatus_Map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ApMapStatus.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .minieye.parking.ApMapStatus.Pose> joints = 1;
  if (!this->_internal_joints().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_joints().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_joints().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose >::const_iterator
          it = this->_internal_joints().begin();
          it != this->_internal_joints().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ApMapStatus_Map_JointsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose >::const_iterator
          it = this->_internal_joints().begin();
          it != this->_internal_joints().end(); ++it) {
        target = ApMapStatus_Map_JointsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ApMapStatus.Map)
  return target;
}

size_t ApMapStatus_Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ApMapStatus.Map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .minieye.parking.ApMapStatus.Pose> joints = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_joints_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose >::const_iterator
      it = this->_internal_joints().begin();
      it != this->_internal_joints().end(); ++it) {
    total_size += ApMapStatus_Map_JointsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApMapStatus_Map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ApMapStatus.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const ApMapStatus_Map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApMapStatus_Map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ApMapStatus.Map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ApMapStatus.Map)
    MergeFrom(*source);
  }
}

void ApMapStatus_Map::MergeFrom(const ApMapStatus_Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ApMapStatus.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joints_.MergeFrom(from.joints_);
}

void ApMapStatus_Map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ApMapStatus.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApMapStatus_Map::CopyFrom(const ApMapStatus_Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ApMapStatus.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApMapStatus_Map::IsInitialized() const {
  return true;
}

void ApMapStatus_Map::InternalSwap(ApMapStatus_Map* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  joints_.Swap(&other->joints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApMapStatus_Map::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApMapStatus_JointMatch::InitAsDefaultInstance() {
}
class ApMapStatus_JointMatch::_Internal {
 public:
};

ApMapStatus_JointMatch::ApMapStatus_JointMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ApMapStatus.JointMatch)
}
ApMapStatus_JointMatch::ApMapStatus_JointMatch(const ApMapStatus_JointMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rt_joint_id_, &from.rt_joint_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ap_joint_id_) -
    reinterpret_cast<char*>(&rt_joint_id_)) + sizeof(ap_joint_id_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ApMapStatus.JointMatch)
}

void ApMapStatus_JointMatch::SharedCtor() {
  ::memset(&rt_joint_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_joint_id_) -
      reinterpret_cast<char*>(&rt_joint_id_)) + sizeof(ap_joint_id_));
}

ApMapStatus_JointMatch::~ApMapStatus_JointMatch() {
  // @@protoc_insertion_point(destructor:minieye.parking.ApMapStatus.JointMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApMapStatus_JointMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ApMapStatus_JointMatch::ArenaDtor(void* object) {
  ApMapStatus_JointMatch* _this = reinterpret_cast< ApMapStatus_JointMatch* >(object);
  (void)_this;
}
void ApMapStatus_JointMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApMapStatus_JointMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApMapStatus_JointMatch& ApMapStatus_JointMatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApMapStatus_JointMatch_ap_5fmap_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void ApMapStatus_JointMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ApMapStatus.JointMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rt_joint_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_joint_id_) -
      reinterpret_cast<char*>(&rt_joint_id_)) + sizeof(ap_joint_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApMapStatus_JointMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 rt_joint_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rt_joint_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ap_joint_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ap_joint_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApMapStatus_JointMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ApMapStatus.JointMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 rt_joint_id = 1;
  if (this->rt_joint_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_rt_joint_id(), target);
  }

  // int64 ap_joint_id = 2;
  if (this->ap_joint_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ap_joint_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ApMapStatus.JointMatch)
  return target;
}

size_t ApMapStatus_JointMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ApMapStatus.JointMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 rt_joint_id = 1;
  if (this->rt_joint_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rt_joint_id());
  }

  // int64 ap_joint_id = 2;
  if (this->ap_joint_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ap_joint_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApMapStatus_JointMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ApMapStatus.JointMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const ApMapStatus_JointMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApMapStatus_JointMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ApMapStatus.JointMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ApMapStatus.JointMatch)
    MergeFrom(*source);
  }
}

void ApMapStatus_JointMatch::MergeFrom(const ApMapStatus_JointMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ApMapStatus.JointMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rt_joint_id() != 0) {
    _internal_set_rt_joint_id(from._internal_rt_joint_id());
  }
  if (from.ap_joint_id() != 0) {
    _internal_set_ap_joint_id(from._internal_ap_joint_id());
  }
}

void ApMapStatus_JointMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ApMapStatus.JointMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApMapStatus_JointMatch::CopyFrom(const ApMapStatus_JointMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ApMapStatus.JointMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApMapStatus_JointMatch::IsInitialized() const {
  return true;
}

void ApMapStatus_JointMatch::InternalSwap(ApMapStatus_JointMatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApMapStatus_JointMatch, ap_joint_id_)
      + sizeof(ApMapStatus_JointMatch::ap_joint_id_)
      - PROTOBUF_FIELD_OFFSET(ApMapStatus_JointMatch, rt_joint_id_)>(
          reinterpret_cast<char*>(&rt_joint_id_),
          reinterpret_cast<char*>(&other->rt_joint_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApMapStatus_JointMatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApMapStatus_SemanticMatch::InitAsDefaultInstance() {
  ::minieye::parking::_ApMapStatus_SemanticMatch_default_instance_._instance.get_mutable()->ap_point_ = const_cast< ::minieye::parking::ApMapStatus_Pose*>(
      ::minieye::parking::ApMapStatus_Pose::internal_default_instance());
  ::minieye::parking::_ApMapStatus_SemanticMatch_default_instance_._instance.get_mutable()->rt_point_ = const_cast< ::minieye::parking::ApMapStatus_Pose*>(
      ::minieye::parking::ApMapStatus_Pose::internal_default_instance());
}
class ApMapStatus_SemanticMatch::_Internal {
 public:
  static const ::minieye::parking::ApMapStatus_Pose& ap_point(const ApMapStatus_SemanticMatch* msg);
  static const ::minieye::parking::ApMapStatus_Pose& rt_point(const ApMapStatus_SemanticMatch* msg);
};

const ::minieye::parking::ApMapStatus_Pose&
ApMapStatus_SemanticMatch::_Internal::ap_point(const ApMapStatus_SemanticMatch* msg) {
  return *msg->ap_point_;
}
const ::minieye::parking::ApMapStatus_Pose&
ApMapStatus_SemanticMatch::_Internal::rt_point(const ApMapStatus_SemanticMatch* msg) {
  return *msg->rt_point_;
}
ApMapStatus_SemanticMatch::ApMapStatus_SemanticMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ApMapStatus.SemanticMatch)
}
ApMapStatus_SemanticMatch::ApMapStatus_SemanticMatch(const ApMapStatus_SemanticMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ap_point()) {
    ap_point_ = new ::minieye::parking::ApMapStatus_Pose(*from.ap_point_);
  } else {
    ap_point_ = nullptr;
  }
  if (from._internal_has_rt_point()) {
    rt_point_ = new ::minieye::parking::ApMapStatus_Pose(*from.rt_point_);
  } else {
    rt_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ApMapStatus.SemanticMatch)
}

void ApMapStatus_SemanticMatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApMapStatus_SemanticMatch_ap_5fmap_5fstatus_2eproto.base);
  ::memset(&ap_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rt_point_) -
      reinterpret_cast<char*>(&ap_point_)) + sizeof(rt_point_));
}

ApMapStatus_SemanticMatch::~ApMapStatus_SemanticMatch() {
  // @@protoc_insertion_point(destructor:minieye.parking.ApMapStatus.SemanticMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApMapStatus_SemanticMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ap_point_;
  if (this != internal_default_instance()) delete rt_point_;
}

void ApMapStatus_SemanticMatch::ArenaDtor(void* object) {
  ApMapStatus_SemanticMatch* _this = reinterpret_cast< ApMapStatus_SemanticMatch* >(object);
  (void)_this;
}
void ApMapStatus_SemanticMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApMapStatus_SemanticMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApMapStatus_SemanticMatch& ApMapStatus_SemanticMatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApMapStatus_SemanticMatch_ap_5fmap_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void ApMapStatus_SemanticMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ApMapStatus.SemanticMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ap_point_ != nullptr) {
    delete ap_point_;
  }
  ap_point_ = nullptr;
  if (GetArena() == nullptr && rt_point_ != nullptr) {
    delete rt_point_;
  }
  rt_point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApMapStatus_SemanticMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.parking.ApMapStatus.Pose ap_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ap_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.ApMapStatus.Pose rt_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rt_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApMapStatus_SemanticMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ApMapStatus.SemanticMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.parking.ApMapStatus.Pose ap_point = 1;
  if (this->has_ap_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ap_point(this), target, stream);
  }

  // .minieye.parking.ApMapStatus.Pose rt_point = 2;
  if (this->has_rt_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rt_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ApMapStatus.SemanticMatch)
  return target;
}

size_t ApMapStatus_SemanticMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ApMapStatus.SemanticMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.parking.ApMapStatus.Pose ap_point = 1;
  if (this->has_ap_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ap_point_);
  }

  // .minieye.parking.ApMapStatus.Pose rt_point = 2;
  if (this->has_rt_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rt_point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApMapStatus_SemanticMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ApMapStatus.SemanticMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const ApMapStatus_SemanticMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApMapStatus_SemanticMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ApMapStatus.SemanticMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ApMapStatus.SemanticMatch)
    MergeFrom(*source);
  }
}

void ApMapStatus_SemanticMatch::MergeFrom(const ApMapStatus_SemanticMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ApMapStatus.SemanticMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ap_point()) {
    _internal_mutable_ap_point()->::minieye::parking::ApMapStatus_Pose::MergeFrom(from._internal_ap_point());
  }
  if (from.has_rt_point()) {
    _internal_mutable_rt_point()->::minieye::parking::ApMapStatus_Pose::MergeFrom(from._internal_rt_point());
  }
}

void ApMapStatus_SemanticMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ApMapStatus.SemanticMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApMapStatus_SemanticMatch::CopyFrom(const ApMapStatus_SemanticMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ApMapStatus.SemanticMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApMapStatus_SemanticMatch::IsInitialized() const {
  return true;
}

void ApMapStatus_SemanticMatch::InternalSwap(ApMapStatus_SemanticMatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApMapStatus_SemanticMatch, rt_point_)
      + sizeof(ApMapStatus_SemanticMatch::rt_point_)
      - PROTOBUF_FIELD_OFFSET(ApMapStatus_SemanticMatch, ap_point_)>(
          reinterpret_cast<char*>(&ap_point_),
          reinterpret_cast<char*>(&other->ap_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApMapStatus_SemanticMatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApMapStatus::InitAsDefaultInstance() {
  ::minieye::parking::_ApMapStatus_default_instance_._instance.get_mutable()->rt_map_ = const_cast< ::minieye::parking::ApMapStatus_Map*>(
      ::minieye::parking::ApMapStatus_Map::internal_default_instance());
  ::minieye::parking::_ApMapStatus_default_instance_._instance.get_mutable()->ap_map_ = const_cast< ::minieye::parking::ApMapStatus_Map*>(
      ::minieye::parking::ApMapStatus_Map::internal_default_instance());
}
class ApMapStatus::_Internal {
 public:
  static const ::minieye::parking::ApMapStatus_Map& rt_map(const ApMapStatus* msg);
  static const ::minieye::parking::ApMapStatus_Map& ap_map(const ApMapStatus* msg);
};

const ::minieye::parking::ApMapStatus_Map&
ApMapStatus::_Internal::rt_map(const ApMapStatus* msg) {
  return *msg->rt_map_;
}
const ::minieye::parking::ApMapStatus_Map&
ApMapStatus::_Internal::ap_map(const ApMapStatus* msg) {
  return *msg->ap_map_;
}
ApMapStatus::ApMapStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  joint_match_(arena),
  semantic_match_(arena),
  odom_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ApMapStatus)
}
ApMapStatus::ApMapStatus(const ApMapStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joint_match_(from.joint_match_),
      semantic_match_(from.semantic_match_),
      odom_points_(from.odom_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rt_map()) {
    rt_map_ = new ::minieye::parking::ApMapStatus_Map(*from.rt_map_);
  } else {
    rt_map_ = nullptr;
  }
  if (from._internal_has_ap_map()) {
    ap_map_ = new ::minieye::parking::ApMapStatus_Map(*from.ap_map_);
  } else {
    ap_map_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(frame_id_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ApMapStatus)
}

void ApMapStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApMapStatus_ap_5fmap_5fstatus_2eproto.base);
  ::memset(&rt_map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&rt_map_)) + sizeof(frame_id_));
}

ApMapStatus::~ApMapStatus() {
  // @@protoc_insertion_point(destructor:minieye.parking.ApMapStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApMapStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rt_map_;
  if (this != internal_default_instance()) delete ap_map_;
}

void ApMapStatus::ArenaDtor(void* object) {
  ApMapStatus* _this = reinterpret_cast< ApMapStatus* >(object);
  (void)_this;
}
void ApMapStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApMapStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApMapStatus& ApMapStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApMapStatus_ap_5fmap_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void ApMapStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ApMapStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_match_.Clear();
  semantic_match_.Clear();
  odom_points_.Clear();
  if (GetArena() == nullptr && rt_map_ != nullptr) {
    delete rt_map_;
  }
  rt_map_ = nullptr;
  if (GetArena() == nullptr && ap_map_ != nullptr) {
    delete ap_map_;
  }
  ap_map_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApMapStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.ApMapStatus.Map rt_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rt_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.ApMapStatus.Map ap_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ap_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.ApMapStatus.JointMatch joint_match = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joint_match(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.ApMapStatus.SemanticMatch semantic_match = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_semantic_match(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.parking.ApMapStatus.Pose odom_points = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_odom_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApMapStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ApMapStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tick(), target);
  }

  // uint64 frame_id = 3;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_frame_id(), target);
  }

  // .minieye.parking.ApMapStatus.Map rt_map = 4;
  if (this->has_rt_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rt_map(this), target, stream);
  }

  // .minieye.parking.ApMapStatus.Map ap_map = 5;
  if (this->has_ap_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ap_map(this), target, stream);
  }

  // repeated .minieye.parking.ApMapStatus.JointMatch joint_match = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joint_match_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_joint_match(i), target, stream);
  }

  // repeated .minieye.parking.ApMapStatus.SemanticMatch semantic_match = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_semantic_match_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_semantic_match(i), target, stream);
  }

  // repeated .minieye.parking.ApMapStatus.Pose odom_points = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_odom_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_odom_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ApMapStatus)
  return target;
}

size_t ApMapStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ApMapStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.parking.ApMapStatus.JointMatch joint_match = 6;
  total_size += 1UL * this->_internal_joint_match_size();
  for (const auto& msg : this->joint_match_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.parking.ApMapStatus.SemanticMatch semantic_match = 7;
  total_size += 1UL * this->_internal_semantic_match_size();
  for (const auto& msg : this->semantic_match_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.parking.ApMapStatus.Pose odom_points = 8;
  total_size += 1UL * this->_internal_odom_points_size();
  for (const auto& msg : this->odom_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .minieye.parking.ApMapStatus.Map rt_map = 4;
  if (this->has_rt_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rt_map_);
  }

  // .minieye.parking.ApMapStatus.Map ap_map = 5;
  if (this->has_ap_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ap_map_);
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 frame_id = 3;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApMapStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ApMapStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ApMapStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApMapStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ApMapStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ApMapStatus)
    MergeFrom(*source);
  }
}

void ApMapStatus::MergeFrom(const ApMapStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ApMapStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_match_.MergeFrom(from.joint_match_);
  semantic_match_.MergeFrom(from.semantic_match_);
  odom_points_.MergeFrom(from.odom_points_);
  if (from.has_rt_map()) {
    _internal_mutable_rt_map()->::minieye::parking::ApMapStatus_Map::MergeFrom(from._internal_rt_map());
  }
  if (from.has_ap_map()) {
    _internal_mutable_ap_map()->::minieye::parking::ApMapStatus_Map::MergeFrom(from._internal_ap_map());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void ApMapStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ApMapStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApMapStatus::CopyFrom(const ApMapStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ApMapStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApMapStatus::IsInitialized() const {
  return true;
}

void ApMapStatus::InternalSwap(ApMapStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  joint_match_.InternalSwap(&other->joint_match_);
  semantic_match_.InternalSwap(&other->semantic_match_);
  odom_points_.InternalSwap(&other->odom_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApMapStatus, frame_id_)
      + sizeof(ApMapStatus::frame_id_)
      - PROTOBUF_FIELD_OFFSET(ApMapStatus, rt_map_)>(
          reinterpret_cast<char*>(&rt_map_),
          reinterpret_cast<char*>(&other->rt_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApMapStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace parking
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::parking::ApMapStatus_Pose* Arena::CreateMaybeMessage< ::minieye::parking::ApMapStatus_Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ApMapStatus_Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ApMapStatus_Map_JointsEntry_DoNotUse* Arena::CreateMaybeMessage< ::minieye::parking::ApMapStatus_Map_JointsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ApMapStatus_Map_JointsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ApMapStatus_Map* Arena::CreateMaybeMessage< ::minieye::parking::ApMapStatus_Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ApMapStatus_Map >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ApMapStatus_JointMatch* Arena::CreateMaybeMessage< ::minieye::parking::ApMapStatus_JointMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ApMapStatus_JointMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ApMapStatus_SemanticMatch* Arena::CreateMaybeMessage< ::minieye::parking::ApMapStatus_SemanticMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ApMapStatus_SemanticMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ApMapStatus* Arena::CreateMaybeMessage< ::minieye::parking::ApMapStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ApMapStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
