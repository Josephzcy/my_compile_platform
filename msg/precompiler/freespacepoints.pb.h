// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: freespacepoints.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_freespacepoints_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_freespacepoints_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_freespacepoints_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_freespacepoints_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_freespacepoints_2eproto;
namespace freespacepoints {
class FreespacePoints;
class FreespacePointsDefaultTypeInternal;
extern FreespacePointsDefaultTypeInternal _FreespacePoints_default_instance_;
class ObstacleRects;
class ObstacleRectsDefaultTypeInternal;
extern ObstacleRectsDefaultTypeInternal _ObstacleRects_default_instance_;
class ObstacleSingleRect;
class ObstacleSingleRectDefaultTypeInternal;
extern ObstacleSingleRectDefaultTypeInternal _ObstacleSingleRect_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Points;
class PointsDefaultTypeInternal;
extern PointsDefaultTypeInternal _Points_default_instance_;
}  // namespace freespacepoints
PROTOBUF_NAMESPACE_OPEN
template<> ::freespacepoints::FreespacePoints* Arena::CreateMaybeMessage<::freespacepoints::FreespacePoints>(Arena*);
template<> ::freespacepoints::ObstacleRects* Arena::CreateMaybeMessage<::freespacepoints::ObstacleRects>(Arena*);
template<> ::freespacepoints::ObstacleSingleRect* Arena::CreateMaybeMessage<::freespacepoints::ObstacleSingleRect>(Arena*);
template<> ::freespacepoints::Point2D* Arena::CreateMaybeMessage<::freespacepoints::Point2D>(Arena*);
template<> ::freespacepoints::Points* Arena::CreateMaybeMessage<::freespacepoints::Points>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace freespacepoints {

enum ObstacleType : int {
  kNormal = 0,
  kNoCrash = 1,
  kRod = 2,
  kVehicle = 3,
  kWheelTwo = 4,
  kRider = 5,
  kPed = 6,
  kCone = 7,
  kWsign = 8,
  kStone = 9,
  kPiles = 10,
  kLock = 11,
  kPillar = 12,
  ObstacleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ObstacleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ObstacleType_IsValid(int value);
constexpr ObstacleType ObstacleType_MIN = kNormal;
constexpr ObstacleType ObstacleType_MAX = kPillar;
constexpr int ObstacleType_ARRAYSIZE = ObstacleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleType_descriptor();
template<typename T>
inline const std::string& ObstacleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleType_descriptor(), enum_t_value);
}
inline bool ObstacleType_Parse(
    const std::string& name, ObstacleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleType>(
    ObstacleType_descriptor(), name, value);
}
// ===================================================================

class Point2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:freespacepoints.Point2D) */ {
 public:
  inline Point2D() : Point2D(nullptr) {};
  virtual ~Point2D();

  Point2D(const Point2D& from);
  Point2D(Point2D&& from) noexcept
    : Point2D() {
    *this = ::std::move(from);
  }

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2D& operator=(Point2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2D* internal_default_instance() {
    return reinterpret_cast<const Point2D*>(
               &_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point2D& a, Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2D* New() const final {
    return CreateMaybeMessage<Point2D>(nullptr);
  }

  Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "freespacepoints.Point2D";
  }
  protected:
  explicit Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_freespacepoints_2eproto);
    return ::descriptor_table_freespacepoints_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:freespacepoints.Point2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_freespacepoints_2eproto;
};
// -------------------------------------------------------------------

class Points PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:freespacepoints.Points) */ {
 public:
  inline Points() : Points(nullptr) {};
  virtual ~Points();

  Points(const Points& from);
  Points(Points&& from) noexcept
    : Points() {
    *this = ::std::move(from);
  }

  inline Points& operator=(const Points& from) {
    CopyFrom(from);
    return *this;
  }
  inline Points& operator=(Points&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Points& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Points* internal_default_instance() {
    return reinterpret_cast<const Points*>(
               &_Points_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Points& a, Points& b) {
    a.Swap(&b);
  }
  inline void Swap(Points* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Points* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Points* New() const final {
    return CreateMaybeMessage<Points>(nullptr);
  }

  Points* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Points>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Points& from);
  void MergeFrom(const Points& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Points* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "freespacepoints.Points";
  }
  protected:
  explicit Points(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_freespacepoints_2eproto);
    return ::descriptor_table_freespacepoints_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .freespacepoints.Point2D points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::freespacepoints::Point2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::Point2D >*
      mutable_points();
  private:
  const ::freespacepoints::Point2D& _internal_points(int index) const;
  ::freespacepoints::Point2D* _internal_add_points();
  public:
  const ::freespacepoints::Point2D& points(int index) const;
  ::freespacepoints::Point2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::Point2D >&
      points() const;

  // @@protoc_insertion_point(class_scope:freespacepoints.Points)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::Point2D > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_freespacepoints_2eproto;
};
// -------------------------------------------------------------------

class ObstacleSingleRect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:freespacepoints.ObstacleSingleRect) */ {
 public:
  inline ObstacleSingleRect() : ObstacleSingleRect(nullptr) {};
  virtual ~ObstacleSingleRect();

  ObstacleSingleRect(const ObstacleSingleRect& from);
  ObstacleSingleRect(ObstacleSingleRect&& from) noexcept
    : ObstacleSingleRect() {
    *this = ::std::move(from);
  }

  inline ObstacleSingleRect& operator=(const ObstacleSingleRect& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleSingleRect& operator=(ObstacleSingleRect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleSingleRect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleSingleRect* internal_default_instance() {
    return reinterpret_cast<const ObstacleSingleRect*>(
               &_ObstacleSingleRect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObstacleSingleRect& a, ObstacleSingleRect& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleSingleRect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObstacleSingleRect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleSingleRect* New() const final {
    return CreateMaybeMessage<ObstacleSingleRect>(nullptr);
  }

  ObstacleSingleRect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleSingleRect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleSingleRect& from);
  void MergeFrom(const ObstacleSingleRect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleSingleRect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "freespacepoints.ObstacleSingleRect";
  }
  protected:
  explicit ObstacleSingleRect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_freespacepoints_2eproto);
    return ::descriptor_table_freespacepoints_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kP0FieldNumber = 3,
    kP1FieldNumber = 4,
    kConfFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .freespacepoints.Point2D p0 = 3;
  bool has_p0() const;
  private:
  bool _internal_has_p0() const;
  public:
  void clear_p0();
  const ::freespacepoints::Point2D& p0() const;
  ::freespacepoints::Point2D* release_p0();
  ::freespacepoints::Point2D* mutable_p0();
  void set_allocated_p0(::freespacepoints::Point2D* p0);
  private:
  const ::freespacepoints::Point2D& _internal_p0() const;
  ::freespacepoints::Point2D* _internal_mutable_p0();
  public:
  void unsafe_arena_set_allocated_p0(
      ::freespacepoints::Point2D* p0);
  ::freespacepoints::Point2D* unsafe_arena_release_p0();

  // .freespacepoints.Point2D p1 = 4;
  bool has_p1() const;
  private:
  bool _internal_has_p1() const;
  public:
  void clear_p1();
  const ::freespacepoints::Point2D& p1() const;
  ::freespacepoints::Point2D* release_p1();
  ::freespacepoints::Point2D* mutable_p1();
  void set_allocated_p1(::freespacepoints::Point2D* p1);
  private:
  const ::freespacepoints::Point2D& _internal_p1() const;
  ::freespacepoints::Point2D* _internal_mutable_p1();
  public:
  void unsafe_arena_set_allocated_p1(
      ::freespacepoints::Point2D* p1);
  ::freespacepoints::Point2D* unsafe_arena_release_p1();

  // float conf = 1;
  void clear_conf();
  float conf() const;
  void set_conf(float value);
  private:
  float _internal_conf() const;
  void _internal_set_conf(float value);
  public:

  // .freespacepoints.ObstacleType type = 2;
  void clear_type();
  ::freespacepoints::ObstacleType type() const;
  void set_type(::freespacepoints::ObstacleType value);
  private:
  ::freespacepoints::ObstacleType _internal_type() const;
  void _internal_set_type(::freespacepoints::ObstacleType value);
  public:

  // @@protoc_insertion_point(class_scope:freespacepoints.ObstacleSingleRect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::freespacepoints::Point2D* p0_;
  ::freespacepoints::Point2D* p1_;
  float conf_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_freespacepoints_2eproto;
};
// -------------------------------------------------------------------

class ObstacleRects PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:freespacepoints.ObstacleRects) */ {
 public:
  inline ObstacleRects() : ObstacleRects(nullptr) {};
  virtual ~ObstacleRects();

  ObstacleRects(const ObstacleRects& from);
  ObstacleRects(ObstacleRects&& from) noexcept
    : ObstacleRects() {
    *this = ::std::move(from);
  }

  inline ObstacleRects& operator=(const ObstacleRects& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleRects& operator=(ObstacleRects&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleRects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleRects* internal_default_instance() {
    return reinterpret_cast<const ObstacleRects*>(
               &_ObstacleRects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ObstacleRects& a, ObstacleRects& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleRects* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObstacleRects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleRects* New() const final {
    return CreateMaybeMessage<ObstacleRects>(nullptr);
  }

  ObstacleRects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleRects>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleRects& from);
  void MergeFrom(const ObstacleRects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleRects* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "freespacepoints.ObstacleRects";
  }
  protected:
  explicit ObstacleRects(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_freespacepoints_2eproto);
    return ::descriptor_table_freespacepoints_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectsFieldNumber = 2,
  };
  // repeated .freespacepoints.ObstacleSingleRect rects = 2;
  int rects_size() const;
  private:
  int _internal_rects_size() const;
  public:
  void clear_rects();
  ::freespacepoints::ObstacleSingleRect* mutable_rects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::ObstacleSingleRect >*
      mutable_rects();
  private:
  const ::freespacepoints::ObstacleSingleRect& _internal_rects(int index) const;
  ::freespacepoints::ObstacleSingleRect* _internal_add_rects();
  public:
  const ::freespacepoints::ObstacleSingleRect& rects(int index) const;
  ::freespacepoints::ObstacleSingleRect* add_rects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::ObstacleSingleRect >&
      rects() const;

  // @@protoc_insertion_point(class_scope:freespacepoints.ObstacleRects)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::ObstacleSingleRect > rects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_freespacepoints_2eproto;
};
// -------------------------------------------------------------------

class FreespacePoints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:freespacepoints.FreespacePoints) */ {
 public:
  inline FreespacePoints() : FreespacePoints(nullptr) {};
  virtual ~FreespacePoints();

  FreespacePoints(const FreespacePoints& from);
  FreespacePoints(FreespacePoints&& from) noexcept
    : FreespacePoints() {
    *this = ::std::move(from);
  }

  inline FreespacePoints& operator=(const FreespacePoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreespacePoints& operator=(FreespacePoints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FreespacePoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FreespacePoints* internal_default_instance() {
    return reinterpret_cast<const FreespacePoints*>(
               &_FreespacePoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FreespacePoints& a, FreespacePoints& b) {
    a.Swap(&b);
  }
  inline void Swap(FreespacePoints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FreespacePoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FreespacePoints* New() const final {
    return CreateMaybeMessage<FreespacePoints>(nullptr);
  }

  FreespacePoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FreespacePoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FreespacePoints& from);
  void MergeFrom(const FreespacePoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreespacePoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "freespacepoints.FreespacePoints";
  }
  protected:
  explicit FreespacePoints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_freespacepoints_2eproto);
    return ::descriptor_table_freespacepoints_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFreespacepointsFieldNumber = 4,
    kObstacleRectsFieldNumber = 5,
    kTimestampFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // repeated .freespacepoints.Points freespacepoints = 4;
  int freespacepoints_size() const;
  private:
  int _internal_freespacepoints_size() const;
  public:
  void clear_freespacepoints();
  ::freespacepoints::Points* mutable_freespacepoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::Points >*
      mutable_freespacepoints();
  private:
  const ::freespacepoints::Points& _internal_freespacepoints(int index) const;
  ::freespacepoints::Points* _internal_add_freespacepoints();
  public:
  const ::freespacepoints::Points& freespacepoints(int index) const;
  ::freespacepoints::Points* add_freespacepoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::Points >&
      freespacepoints() const;

  // repeated .freespacepoints.ObstacleRects obstacle_rects = 5;
  int obstacle_rects_size() const;
  private:
  int _internal_obstacle_rects_size() const;
  public:
  void clear_obstacle_rects();
  ::freespacepoints::ObstacleRects* mutable_obstacle_rects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::ObstacleRects >*
      mutable_obstacle_rects();
  private:
  const ::freespacepoints::ObstacleRects& _internal_obstacle_rects(int index) const;
  ::freespacepoints::ObstacleRects* _internal_add_obstacle_rects();
  public:
  const ::freespacepoints::ObstacleRects& obstacle_rects(int index) const;
  ::freespacepoints::ObstacleRects* add_obstacle_rects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::ObstacleRects >&
      obstacle_rects() const;

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 frame_id = 2;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:freespacepoints.FreespacePoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::Points > freespacepoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::ObstacleRects > obstacle_rects_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_freespacepoints_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point2D

// float x = 1;
inline void Point2D::clear_x() {
  x_ = 0;
}
inline float Point2D::_internal_x() const {
  return x_;
}
inline float Point2D::x() const {
  // @@protoc_insertion_point(field_get:freespacepoints.Point2D.x)
  return _internal_x();
}
inline void Point2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:freespacepoints.Point2D.x)
}

// float y = 2;
inline void Point2D::clear_y() {
  y_ = 0;
}
inline float Point2D::_internal_y() const {
  return y_;
}
inline float Point2D::y() const {
  // @@protoc_insertion_point(field_get:freespacepoints.Point2D.y)
  return _internal_y();
}
inline void Point2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:freespacepoints.Point2D.y)
}

// -------------------------------------------------------------------

// Points

// repeated .freespacepoints.Point2D points = 1;
inline int Points::_internal_points_size() const {
  return points_.size();
}
inline int Points::points_size() const {
  return _internal_points_size();
}
inline void Points::clear_points() {
  points_.Clear();
}
inline ::freespacepoints::Point2D* Points::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:freespacepoints.Points.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::Point2D >*
Points::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:freespacepoints.Points.points)
  return &points_;
}
inline const ::freespacepoints::Point2D& Points::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::freespacepoints::Point2D& Points::points(int index) const {
  // @@protoc_insertion_point(field_get:freespacepoints.Points.points)
  return _internal_points(index);
}
inline ::freespacepoints::Point2D* Points::_internal_add_points() {
  return points_.Add();
}
inline ::freespacepoints::Point2D* Points::add_points() {
  // @@protoc_insertion_point(field_add:freespacepoints.Points.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::Point2D >&
Points::points() const {
  // @@protoc_insertion_point(field_list:freespacepoints.Points.points)
  return points_;
}

// -------------------------------------------------------------------

// ObstacleSingleRect

// float conf = 1;
inline void ObstacleSingleRect::clear_conf() {
  conf_ = 0;
}
inline float ObstacleSingleRect::_internal_conf() const {
  return conf_;
}
inline float ObstacleSingleRect::conf() const {
  // @@protoc_insertion_point(field_get:freespacepoints.ObstacleSingleRect.conf)
  return _internal_conf();
}
inline void ObstacleSingleRect::_internal_set_conf(float value) {
  
  conf_ = value;
}
inline void ObstacleSingleRect::set_conf(float value) {
  _internal_set_conf(value);
  // @@protoc_insertion_point(field_set:freespacepoints.ObstacleSingleRect.conf)
}

// .freespacepoints.ObstacleType type = 2;
inline void ObstacleSingleRect::clear_type() {
  type_ = 0;
}
inline ::freespacepoints::ObstacleType ObstacleSingleRect::_internal_type() const {
  return static_cast< ::freespacepoints::ObstacleType >(type_);
}
inline ::freespacepoints::ObstacleType ObstacleSingleRect::type() const {
  // @@protoc_insertion_point(field_get:freespacepoints.ObstacleSingleRect.type)
  return _internal_type();
}
inline void ObstacleSingleRect::_internal_set_type(::freespacepoints::ObstacleType value) {
  
  type_ = value;
}
inline void ObstacleSingleRect::set_type(::freespacepoints::ObstacleType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:freespacepoints.ObstacleSingleRect.type)
}

// .freespacepoints.Point2D p0 = 3;
inline bool ObstacleSingleRect::_internal_has_p0() const {
  return this != internal_default_instance() && p0_ != nullptr;
}
inline bool ObstacleSingleRect::has_p0() const {
  return _internal_has_p0();
}
inline void ObstacleSingleRect::clear_p0() {
  if (GetArena() == nullptr && p0_ != nullptr) {
    delete p0_;
  }
  p0_ = nullptr;
}
inline const ::freespacepoints::Point2D& ObstacleSingleRect::_internal_p0() const {
  const ::freespacepoints::Point2D* p = p0_;
  return p != nullptr ? *p : *reinterpret_cast<const ::freespacepoints::Point2D*>(
      &::freespacepoints::_Point2D_default_instance_);
}
inline const ::freespacepoints::Point2D& ObstacleSingleRect::p0() const {
  // @@protoc_insertion_point(field_get:freespacepoints.ObstacleSingleRect.p0)
  return _internal_p0();
}
inline void ObstacleSingleRect::unsafe_arena_set_allocated_p0(
    ::freespacepoints::Point2D* p0) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(p0_);
  }
  p0_ = p0;
  if (p0) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:freespacepoints.ObstacleSingleRect.p0)
}
inline ::freespacepoints::Point2D* ObstacleSingleRect::release_p0() {
  auto temp = unsafe_arena_release_p0();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::freespacepoints::Point2D* ObstacleSingleRect::unsafe_arena_release_p0() {
  // @@protoc_insertion_point(field_release:freespacepoints.ObstacleSingleRect.p0)
  
  ::freespacepoints::Point2D* temp = p0_;
  p0_ = nullptr;
  return temp;
}
inline ::freespacepoints::Point2D* ObstacleSingleRect::_internal_mutable_p0() {
  
  if (p0_ == nullptr) {
    auto* p = CreateMaybeMessage<::freespacepoints::Point2D>(GetArena());
    p0_ = p;
  }
  return p0_;
}
inline ::freespacepoints::Point2D* ObstacleSingleRect::mutable_p0() {
  // @@protoc_insertion_point(field_mutable:freespacepoints.ObstacleSingleRect.p0)
  return _internal_mutable_p0();
}
inline void ObstacleSingleRect::set_allocated_p0(::freespacepoints::Point2D* p0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete p0_;
  }
  if (p0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(p0);
    if (message_arena != submessage_arena) {
      p0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p0, submessage_arena);
    }
    
  } else {
    
  }
  p0_ = p0;
  // @@protoc_insertion_point(field_set_allocated:freespacepoints.ObstacleSingleRect.p0)
}

// .freespacepoints.Point2D p1 = 4;
inline bool ObstacleSingleRect::_internal_has_p1() const {
  return this != internal_default_instance() && p1_ != nullptr;
}
inline bool ObstacleSingleRect::has_p1() const {
  return _internal_has_p1();
}
inline void ObstacleSingleRect::clear_p1() {
  if (GetArena() == nullptr && p1_ != nullptr) {
    delete p1_;
  }
  p1_ = nullptr;
}
inline const ::freespacepoints::Point2D& ObstacleSingleRect::_internal_p1() const {
  const ::freespacepoints::Point2D* p = p1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::freespacepoints::Point2D*>(
      &::freespacepoints::_Point2D_default_instance_);
}
inline const ::freespacepoints::Point2D& ObstacleSingleRect::p1() const {
  // @@protoc_insertion_point(field_get:freespacepoints.ObstacleSingleRect.p1)
  return _internal_p1();
}
inline void ObstacleSingleRect::unsafe_arena_set_allocated_p1(
    ::freespacepoints::Point2D* p1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(p1_);
  }
  p1_ = p1;
  if (p1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:freespacepoints.ObstacleSingleRect.p1)
}
inline ::freespacepoints::Point2D* ObstacleSingleRect::release_p1() {
  auto temp = unsafe_arena_release_p1();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::freespacepoints::Point2D* ObstacleSingleRect::unsafe_arena_release_p1() {
  // @@protoc_insertion_point(field_release:freespacepoints.ObstacleSingleRect.p1)
  
  ::freespacepoints::Point2D* temp = p1_;
  p1_ = nullptr;
  return temp;
}
inline ::freespacepoints::Point2D* ObstacleSingleRect::_internal_mutable_p1() {
  
  if (p1_ == nullptr) {
    auto* p = CreateMaybeMessage<::freespacepoints::Point2D>(GetArena());
    p1_ = p;
  }
  return p1_;
}
inline ::freespacepoints::Point2D* ObstacleSingleRect::mutable_p1() {
  // @@protoc_insertion_point(field_mutable:freespacepoints.ObstacleSingleRect.p1)
  return _internal_mutable_p1();
}
inline void ObstacleSingleRect::set_allocated_p1(::freespacepoints::Point2D* p1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete p1_;
  }
  if (p1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(p1);
    if (message_arena != submessage_arena) {
      p1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p1, submessage_arena);
    }
    
  } else {
    
  }
  p1_ = p1;
  // @@protoc_insertion_point(field_set_allocated:freespacepoints.ObstacleSingleRect.p1)
}

// -------------------------------------------------------------------

// ObstacleRects

// repeated .freespacepoints.ObstacleSingleRect rects = 2;
inline int ObstacleRects::_internal_rects_size() const {
  return rects_.size();
}
inline int ObstacleRects::rects_size() const {
  return _internal_rects_size();
}
inline void ObstacleRects::clear_rects() {
  rects_.Clear();
}
inline ::freespacepoints::ObstacleSingleRect* ObstacleRects::mutable_rects(int index) {
  // @@protoc_insertion_point(field_mutable:freespacepoints.ObstacleRects.rects)
  return rects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::ObstacleSingleRect >*
ObstacleRects::mutable_rects() {
  // @@protoc_insertion_point(field_mutable_list:freespacepoints.ObstacleRects.rects)
  return &rects_;
}
inline const ::freespacepoints::ObstacleSingleRect& ObstacleRects::_internal_rects(int index) const {
  return rects_.Get(index);
}
inline const ::freespacepoints::ObstacleSingleRect& ObstacleRects::rects(int index) const {
  // @@protoc_insertion_point(field_get:freespacepoints.ObstacleRects.rects)
  return _internal_rects(index);
}
inline ::freespacepoints::ObstacleSingleRect* ObstacleRects::_internal_add_rects() {
  return rects_.Add();
}
inline ::freespacepoints::ObstacleSingleRect* ObstacleRects::add_rects() {
  // @@protoc_insertion_point(field_add:freespacepoints.ObstacleRects.rects)
  return _internal_add_rects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::ObstacleSingleRect >&
ObstacleRects::rects() const {
  // @@protoc_insertion_point(field_list:freespacepoints.ObstacleRects.rects)
  return rects_;
}

// -------------------------------------------------------------------

// FreespacePoints

// uint64 timestamp = 1;
inline void FreespacePoints::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FreespacePoints::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FreespacePoints::timestamp() const {
  // @@protoc_insertion_point(field_get:freespacepoints.FreespacePoints.timestamp)
  return _internal_timestamp();
}
inline void FreespacePoints::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void FreespacePoints::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:freespacepoints.FreespacePoints.timestamp)
}

// uint64 frame_id = 2;
inline void FreespacePoints::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FreespacePoints::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FreespacePoints::frame_id() const {
  // @@protoc_insertion_point(field_get:freespacepoints.FreespacePoints.frame_id)
  return _internal_frame_id();
}
inline void FreespacePoints::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void FreespacePoints::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:freespacepoints.FreespacePoints.frame_id)
}

// uint64 tick = 3;
inline void FreespacePoints::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FreespacePoints::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FreespacePoints::tick() const {
  // @@protoc_insertion_point(field_get:freespacepoints.FreespacePoints.tick)
  return _internal_tick();
}
inline void FreespacePoints::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void FreespacePoints::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:freespacepoints.FreespacePoints.tick)
}

// repeated .freespacepoints.Points freespacepoints = 4;
inline int FreespacePoints::_internal_freespacepoints_size() const {
  return freespacepoints_.size();
}
inline int FreespacePoints::freespacepoints_size() const {
  return _internal_freespacepoints_size();
}
inline void FreespacePoints::clear_freespacepoints() {
  freespacepoints_.Clear();
}
inline ::freespacepoints::Points* FreespacePoints::mutable_freespacepoints(int index) {
  // @@protoc_insertion_point(field_mutable:freespacepoints.FreespacePoints.freespacepoints)
  return freespacepoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::Points >*
FreespacePoints::mutable_freespacepoints() {
  // @@protoc_insertion_point(field_mutable_list:freespacepoints.FreespacePoints.freespacepoints)
  return &freespacepoints_;
}
inline const ::freespacepoints::Points& FreespacePoints::_internal_freespacepoints(int index) const {
  return freespacepoints_.Get(index);
}
inline const ::freespacepoints::Points& FreespacePoints::freespacepoints(int index) const {
  // @@protoc_insertion_point(field_get:freespacepoints.FreespacePoints.freespacepoints)
  return _internal_freespacepoints(index);
}
inline ::freespacepoints::Points* FreespacePoints::_internal_add_freespacepoints() {
  return freespacepoints_.Add();
}
inline ::freespacepoints::Points* FreespacePoints::add_freespacepoints() {
  // @@protoc_insertion_point(field_add:freespacepoints.FreespacePoints.freespacepoints)
  return _internal_add_freespacepoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::Points >&
FreespacePoints::freespacepoints() const {
  // @@protoc_insertion_point(field_list:freespacepoints.FreespacePoints.freespacepoints)
  return freespacepoints_;
}

// repeated .freespacepoints.ObstacleRects obstacle_rects = 5;
inline int FreespacePoints::_internal_obstacle_rects_size() const {
  return obstacle_rects_.size();
}
inline int FreespacePoints::obstacle_rects_size() const {
  return _internal_obstacle_rects_size();
}
inline void FreespacePoints::clear_obstacle_rects() {
  obstacle_rects_.Clear();
}
inline ::freespacepoints::ObstacleRects* FreespacePoints::mutable_obstacle_rects(int index) {
  // @@protoc_insertion_point(field_mutable:freespacepoints.FreespacePoints.obstacle_rects)
  return obstacle_rects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::ObstacleRects >*
FreespacePoints::mutable_obstacle_rects() {
  // @@protoc_insertion_point(field_mutable_list:freespacepoints.FreespacePoints.obstacle_rects)
  return &obstacle_rects_;
}
inline const ::freespacepoints::ObstacleRects& FreespacePoints::_internal_obstacle_rects(int index) const {
  return obstacle_rects_.Get(index);
}
inline const ::freespacepoints::ObstacleRects& FreespacePoints::obstacle_rects(int index) const {
  // @@protoc_insertion_point(field_get:freespacepoints.FreespacePoints.obstacle_rects)
  return _internal_obstacle_rects(index);
}
inline ::freespacepoints::ObstacleRects* FreespacePoints::_internal_add_obstacle_rects() {
  return obstacle_rects_.Add();
}
inline ::freespacepoints::ObstacleRects* FreespacePoints::add_obstacle_rects() {
  // @@protoc_insertion_point(field_add:freespacepoints.FreespacePoints.obstacle_rects)
  return _internal_add_obstacle_rects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::freespacepoints::ObstacleRects >&
FreespacePoints::obstacle_rects() const {
  // @@protoc_insertion_point(field_list:freespacepoints.FreespacePoints.obstacle_rects)
  return obstacle_rects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace freespacepoints

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::freespacepoints::ObstacleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::freespacepoints::ObstacleType>() {
  return ::freespacepoints::ObstacleType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_freespacepoints_2eproto
