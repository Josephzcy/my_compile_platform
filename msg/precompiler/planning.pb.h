// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_planning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_planning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_planning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_planning_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planning_2eproto;
namespace minieye {
class PathPoint;
class PathPointDefaultTypeInternal;
extern PathPointDefaultTypeInternal _PathPoint_default_instance_;
class Planning;
class PlanningDefaultTypeInternal;
extern PlanningDefaultTypeInternal _Planning_default_instance_;
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
class TrajectoryPoint;
class TrajectoryPointDefaultTypeInternal;
extern TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::PathPoint* Arena::CreateMaybeMessage<::minieye::PathPoint>(Arena*);
template<> ::minieye::Planning* Arena::CreateMaybeMessage<::minieye::Planning>(Arena*);
template<> ::minieye::Trajectory* Arena::CreateMaybeMessage<::minieye::Trajectory>(Arena*);
template<> ::minieye::TrajectoryPoint* Arena::CreateMaybeMessage<::minieye::TrajectoryPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

// ===================================================================

class PathPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.PathPoint) */ {
 public:
  inline PathPoint() : PathPoint(nullptr) {};
  virtual ~PathPoint();

  PathPoint(const PathPoint& from);
  PathPoint(PathPoint&& from) noexcept
    : PathPoint() {
    *this = ::std::move(from);
  }

  inline PathPoint& operator=(const PathPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathPoint& operator=(PathPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PathPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPoint* internal_default_instance() {
    return reinterpret_cast<const PathPoint*>(
               &_PathPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PathPoint& a, PathPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PathPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathPoint* New() const final {
    return CreateMaybeMessage<PathPoint>(nullptr);
  }

  PathPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathPoint& from);
  void MergeFrom(const PathPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.PathPoint";
  }
  protected:
  explicit PathPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_2eproto);
    return ::descriptor_table_planning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kThetaFieldNumber = 4,
    kSFieldNumber = 5,
    kKappaFieldNumber = 6,
    kDkappaFieldNumber = 7,
    kDdkappaFieldNumber = 8,
    kXDerivativeFieldNumber = 9,
    kYDerivativeFieldNumber = 10,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float theta = 4;
  void clear_theta();
  float theta() const;
  void set_theta(float value);
  private:
  float _internal_theta() const;
  void _internal_set_theta(float value);
  public:

  // float s = 5;
  void clear_s();
  float s() const;
  void set_s(float value);
  private:
  float _internal_s() const;
  void _internal_set_s(float value);
  public:

  // float kappa = 6;
  void clear_kappa();
  float kappa() const;
  void set_kappa(float value);
  private:
  float _internal_kappa() const;
  void _internal_set_kappa(float value);
  public:

  // float dkappa = 7;
  void clear_dkappa();
  float dkappa() const;
  void set_dkappa(float value);
  private:
  float _internal_dkappa() const;
  void _internal_set_dkappa(float value);
  public:

  // float ddkappa = 8;
  void clear_ddkappa();
  float ddkappa() const;
  void set_ddkappa(float value);
  private:
  float _internal_ddkappa() const;
  void _internal_set_ddkappa(float value);
  public:

  // float x_derivative = 9;
  void clear_x_derivative();
  float x_derivative() const;
  void set_x_derivative(float value);
  private:
  float _internal_x_derivative() const;
  void _internal_set_x_derivative(float value);
  public:

  // float y_derivative = 10;
  void clear_y_derivative();
  float y_derivative() const;
  void set_y_derivative(float value);
  private:
  float _internal_y_derivative() const;
  void _internal_set_y_derivative(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.PathPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float theta_;
  float s_;
  float kappa_;
  float dkappa_;
  float ddkappa_;
  float x_derivative_;
  float y_derivative_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planning_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.TrajectoryPoint) */ {
 public:
  inline TrajectoryPoint() : TrajectoryPoint(nullptr) {};
  virtual ~TrajectoryPoint();

  TrajectoryPoint(const TrajectoryPoint& from);
  TrajectoryPoint(TrajectoryPoint&& from) noexcept
    : TrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline TrajectoryPoint& operator=(const TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryPoint& operator=(TrajectoryPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPoint*>(
               &_TrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrajectoryPoint& a, TrajectoryPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPoint* New() const final {
    return CreateMaybeMessage<TrajectoryPoint>(nullptr);
  }

  TrajectoryPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryPoint& from);
  void MergeFrom(const TrajectoryPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.TrajectoryPoint";
  }
  protected:
  explicit TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_2eproto);
    return ::descriptor_table_planning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathPointFieldNumber = 1,
    kVFieldNumber = 2,
    kAFieldNumber = 3,
    kDaFieldNumber = 4,
    kRlTimeFieldNumber = 5,
    kSteerFieldNumber = 6,
  };
  // .minieye.PathPoint path_point = 1;
  bool has_path_point() const;
  private:
  bool _internal_has_path_point() const;
  public:
  void clear_path_point();
  const ::minieye::PathPoint& path_point() const;
  ::minieye::PathPoint* release_path_point();
  ::minieye::PathPoint* mutable_path_point();
  void set_allocated_path_point(::minieye::PathPoint* path_point);
  private:
  const ::minieye::PathPoint& _internal_path_point() const;
  ::minieye::PathPoint* _internal_mutable_path_point();
  public:
  void unsafe_arena_set_allocated_path_point(
      ::minieye::PathPoint* path_point);
  ::minieye::PathPoint* unsafe_arena_release_path_point();

  // float v = 2;
  void clear_v();
  float v() const;
  void set_v(float value);
  private:
  float _internal_v() const;
  void _internal_set_v(float value);
  public:

  // float a = 3;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // float da = 4;
  void clear_da();
  float da() const;
  void set_da(float value);
  private:
  float _internal_da() const;
  void _internal_set_da(float value);
  public:

  // float rl_time = 5;
  void clear_rl_time();
  float rl_time() const;
  void set_rl_time(float value);
  private:
  float _internal_rl_time() const;
  void _internal_set_rl_time(float value);
  public:

  // float steer = 6;
  void clear_steer();
  float steer() const;
  void set_steer(float value);
  private:
  float _internal_steer() const;
  void _internal_set_steer(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.TrajectoryPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::PathPoint* path_point_;
  float v_;
  float a_;
  float da_;
  float rl_time_;
  float steer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planning_2eproto;
};
// -------------------------------------------------------------------

class Trajectory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.Trajectory) */ {
 public:
  inline Trajectory() : Trajectory(nullptr) {};
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(Trajectory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trajectory* New() const final {
    return CreateMaybeMessage<Trajectory>(nullptr);
  }

  Trajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.Trajectory";
  }
  protected:
  explicit Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_2eproto);
    return ::descriptor_table_planning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryFieldNumber = 6,
    kTimestampFieldNumber = 1,
    kTickFieldNumber = 2,
    kIdFieldNumber = 3,
    kGearFieldNumber = 4,
    kTypeFieldNumber = 5,
    kTotalLengthFieldNumber = 7,
    kTotalTimeFieldNumber = 8,
  };
  // repeated .minieye.TrajectoryPoint trajectory = 6;
  int trajectory_size() const;
  private:
  int _internal_trajectory_size() const;
  public:
  void clear_trajectory();
  ::minieye::TrajectoryPoint* mutable_trajectory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::TrajectoryPoint >*
      mutable_trajectory();
  private:
  const ::minieye::TrajectoryPoint& _internal_trajectory(int index) const;
  ::minieye::TrajectoryPoint* _internal_add_trajectory();
  public:
  const ::minieye::TrajectoryPoint& trajectory(int index) const;
  ::minieye::TrajectoryPoint* add_trajectory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::TrajectoryPoint >&
      trajectory() const;

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 2;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 gear = 4;
  void clear_gear();
  ::PROTOBUF_NAMESPACE_ID::int32 gear() const;
  void set_gear(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gear() const;
  void _internal_set_gear(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 5;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float total_length = 7;
  void clear_total_length();
  float total_length() const;
  void set_total_length(float value);
  private:
  float _internal_total_length() const;
  void _internal_set_total_length(float value);
  public:

  // float total_time = 8;
  void clear_total_time();
  float total_time() const;
  void set_total_time(float value);
  private:
  float _internal_total_time() const;
  void _internal_set_total_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.Trajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::TrajectoryPoint > trajectory_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 gear_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float total_length_;
  float total_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planning_2eproto;
};
// -------------------------------------------------------------------

class Planning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.Planning) */ {
 public:
  inline Planning() : Planning(nullptr) {};
  virtual ~Planning();

  Planning(const Planning& from);
  Planning(Planning&& from) noexcept
    : Planning() {
    *this = ::std::move(from);
  }

  inline Planning& operator=(const Planning& from) {
    CopyFrom(from);
    return *this;
  }
  inline Planning& operator=(Planning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Planning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Planning* internal_default_instance() {
    return reinterpret_cast<const Planning*>(
               &_Planning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Planning& a, Planning& b) {
    a.Swap(&b);
  }
  inline void Swap(Planning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Planning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Planning* New() const final {
    return CreateMaybeMessage<Planning>(nullptr);
  }

  Planning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Planning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Planning& from);
  void MergeFrom(const Planning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Planning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.Planning";
  }
  protected:
  explicit Planning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planning_2eproto);
    return ::descriptor_table_planning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanningTrajectoryFieldNumber = 4,
    kTimestampFieldNumber = 1,
    kTickFieldNumber = 2,
    kPlanningStatusFieldNumber = 3,
    kTargetYawBiasFieldNumber = 5,
    kTargetLBiasFieldNumber = 6,
    kTargetSBiasFieldNumber = 7,
  };
  // .minieye.Trajectory planning_trajectory = 4;
  bool has_planning_trajectory() const;
  private:
  bool _internal_has_planning_trajectory() const;
  public:
  void clear_planning_trajectory();
  const ::minieye::Trajectory& planning_trajectory() const;
  ::minieye::Trajectory* release_planning_trajectory();
  ::minieye::Trajectory* mutable_planning_trajectory();
  void set_allocated_planning_trajectory(::minieye::Trajectory* planning_trajectory);
  private:
  const ::minieye::Trajectory& _internal_planning_trajectory() const;
  ::minieye::Trajectory* _internal_mutable_planning_trajectory();
  public:
  void unsafe_arena_set_allocated_planning_trajectory(
      ::minieye::Trajectory* planning_trajectory);
  ::minieye::Trajectory* unsafe_arena_release_planning_trajectory();

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 2;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 planning_status = 3;
  void clear_planning_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 planning_status() const;
  void set_planning_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_planning_status() const;
  void _internal_set_planning_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float target_yaw_bias = 5;
  void clear_target_yaw_bias();
  float target_yaw_bias() const;
  void set_target_yaw_bias(float value);
  private:
  float _internal_target_yaw_bias() const;
  void _internal_set_target_yaw_bias(float value);
  public:

  // float target_l_bias = 6;
  void clear_target_l_bias();
  float target_l_bias() const;
  void set_target_l_bias(float value);
  private:
  float _internal_target_l_bias() const;
  void _internal_set_target_l_bias(float value);
  public:

  // float target_s_bias = 7;
  void clear_target_s_bias();
  float target_s_bias() const;
  void set_target_s_bias(float value);
  private:
  float _internal_target_s_bias() const;
  void _internal_set_target_s_bias(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.Planning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::Trajectory* planning_trajectory_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint32 planning_status_;
  float target_yaw_bias_;
  float target_l_bias_;
  float target_s_bias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PathPoint

// float x = 1;
inline void PathPoint::clear_x() {
  x_ = 0;
}
inline float PathPoint::_internal_x() const {
  return x_;
}
inline float PathPoint::x() const {
  // @@protoc_insertion_point(field_get:minieye.PathPoint.x)
  return _internal_x();
}
inline void PathPoint::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PathPoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minieye.PathPoint.x)
}

// float y = 2;
inline void PathPoint::clear_y() {
  y_ = 0;
}
inline float PathPoint::_internal_y() const {
  return y_;
}
inline float PathPoint::y() const {
  // @@protoc_insertion_point(field_get:minieye.PathPoint.y)
  return _internal_y();
}
inline void PathPoint::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PathPoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minieye.PathPoint.y)
}

// float z = 3;
inline void PathPoint::clear_z() {
  z_ = 0;
}
inline float PathPoint::_internal_z() const {
  return z_;
}
inline float PathPoint::z() const {
  // @@protoc_insertion_point(field_get:minieye.PathPoint.z)
  return _internal_z();
}
inline void PathPoint::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PathPoint::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minieye.PathPoint.z)
}

// float theta = 4;
inline void PathPoint::clear_theta() {
  theta_ = 0;
}
inline float PathPoint::_internal_theta() const {
  return theta_;
}
inline float PathPoint::theta() const {
  // @@protoc_insertion_point(field_get:minieye.PathPoint.theta)
  return _internal_theta();
}
inline void PathPoint::_internal_set_theta(float value) {
  
  theta_ = value;
}
inline void PathPoint::set_theta(float value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:minieye.PathPoint.theta)
}

// float s = 5;
inline void PathPoint::clear_s() {
  s_ = 0;
}
inline float PathPoint::_internal_s() const {
  return s_;
}
inline float PathPoint::s() const {
  // @@protoc_insertion_point(field_get:minieye.PathPoint.s)
  return _internal_s();
}
inline void PathPoint::_internal_set_s(float value) {
  
  s_ = value;
}
inline void PathPoint::set_s(float value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:minieye.PathPoint.s)
}

// float kappa = 6;
inline void PathPoint::clear_kappa() {
  kappa_ = 0;
}
inline float PathPoint::_internal_kappa() const {
  return kappa_;
}
inline float PathPoint::kappa() const {
  // @@protoc_insertion_point(field_get:minieye.PathPoint.kappa)
  return _internal_kappa();
}
inline void PathPoint::_internal_set_kappa(float value) {
  
  kappa_ = value;
}
inline void PathPoint::set_kappa(float value) {
  _internal_set_kappa(value);
  // @@protoc_insertion_point(field_set:minieye.PathPoint.kappa)
}

// float dkappa = 7;
inline void PathPoint::clear_dkappa() {
  dkappa_ = 0;
}
inline float PathPoint::_internal_dkappa() const {
  return dkappa_;
}
inline float PathPoint::dkappa() const {
  // @@protoc_insertion_point(field_get:minieye.PathPoint.dkappa)
  return _internal_dkappa();
}
inline void PathPoint::_internal_set_dkappa(float value) {
  
  dkappa_ = value;
}
inline void PathPoint::set_dkappa(float value) {
  _internal_set_dkappa(value);
  // @@protoc_insertion_point(field_set:minieye.PathPoint.dkappa)
}

// float ddkappa = 8;
inline void PathPoint::clear_ddkappa() {
  ddkappa_ = 0;
}
inline float PathPoint::_internal_ddkappa() const {
  return ddkappa_;
}
inline float PathPoint::ddkappa() const {
  // @@protoc_insertion_point(field_get:minieye.PathPoint.ddkappa)
  return _internal_ddkappa();
}
inline void PathPoint::_internal_set_ddkappa(float value) {
  
  ddkappa_ = value;
}
inline void PathPoint::set_ddkappa(float value) {
  _internal_set_ddkappa(value);
  // @@protoc_insertion_point(field_set:minieye.PathPoint.ddkappa)
}

// float x_derivative = 9;
inline void PathPoint::clear_x_derivative() {
  x_derivative_ = 0;
}
inline float PathPoint::_internal_x_derivative() const {
  return x_derivative_;
}
inline float PathPoint::x_derivative() const {
  // @@protoc_insertion_point(field_get:minieye.PathPoint.x_derivative)
  return _internal_x_derivative();
}
inline void PathPoint::_internal_set_x_derivative(float value) {
  
  x_derivative_ = value;
}
inline void PathPoint::set_x_derivative(float value) {
  _internal_set_x_derivative(value);
  // @@protoc_insertion_point(field_set:minieye.PathPoint.x_derivative)
}

// float y_derivative = 10;
inline void PathPoint::clear_y_derivative() {
  y_derivative_ = 0;
}
inline float PathPoint::_internal_y_derivative() const {
  return y_derivative_;
}
inline float PathPoint::y_derivative() const {
  // @@protoc_insertion_point(field_get:minieye.PathPoint.y_derivative)
  return _internal_y_derivative();
}
inline void PathPoint::_internal_set_y_derivative(float value) {
  
  y_derivative_ = value;
}
inline void PathPoint::set_y_derivative(float value) {
  _internal_set_y_derivative(value);
  // @@protoc_insertion_point(field_set:minieye.PathPoint.y_derivative)
}

// -------------------------------------------------------------------

// TrajectoryPoint

// .minieye.PathPoint path_point = 1;
inline bool TrajectoryPoint::_internal_has_path_point() const {
  return this != internal_default_instance() && path_point_ != nullptr;
}
inline bool TrajectoryPoint::has_path_point() const {
  return _internal_has_path_point();
}
inline void TrajectoryPoint::clear_path_point() {
  if (GetArena() == nullptr && path_point_ != nullptr) {
    delete path_point_;
  }
  path_point_ = nullptr;
}
inline const ::minieye::PathPoint& TrajectoryPoint::_internal_path_point() const {
  const ::minieye::PathPoint* p = path_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::PathPoint*>(
      &::minieye::_PathPoint_default_instance_);
}
inline const ::minieye::PathPoint& TrajectoryPoint::path_point() const {
  // @@protoc_insertion_point(field_get:minieye.TrajectoryPoint.path_point)
  return _internal_path_point();
}
inline void TrajectoryPoint::unsafe_arena_set_allocated_path_point(
    ::minieye::PathPoint* path_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_point_);
  }
  path_point_ = path_point;
  if (path_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.TrajectoryPoint.path_point)
}
inline ::minieye::PathPoint* TrajectoryPoint::release_path_point() {
  auto temp = unsafe_arena_release_path_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::PathPoint* TrajectoryPoint::unsafe_arena_release_path_point() {
  // @@protoc_insertion_point(field_release:minieye.TrajectoryPoint.path_point)
  
  ::minieye::PathPoint* temp = path_point_;
  path_point_ = nullptr;
  return temp;
}
inline ::minieye::PathPoint* TrajectoryPoint::_internal_mutable_path_point() {
  
  if (path_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::PathPoint>(GetArena());
    path_point_ = p;
  }
  return path_point_;
}
inline ::minieye::PathPoint* TrajectoryPoint::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable:minieye.TrajectoryPoint.path_point)
  return _internal_mutable_path_point();
}
inline void TrajectoryPoint::set_allocated_path_point(::minieye::PathPoint* path_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete path_point_;
  }
  if (path_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(path_point);
    if (message_arena != submessage_arena) {
      path_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_point, submessage_arena);
    }
    
  } else {
    
  }
  path_point_ = path_point;
  // @@protoc_insertion_point(field_set_allocated:minieye.TrajectoryPoint.path_point)
}

// float v = 2;
inline void TrajectoryPoint::clear_v() {
  v_ = 0;
}
inline float TrajectoryPoint::_internal_v() const {
  return v_;
}
inline float TrajectoryPoint::v() const {
  // @@protoc_insertion_point(field_get:minieye.TrajectoryPoint.v)
  return _internal_v();
}
inline void TrajectoryPoint::_internal_set_v(float value) {
  
  v_ = value;
}
inline void TrajectoryPoint::set_v(float value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:minieye.TrajectoryPoint.v)
}

// float a = 3;
inline void TrajectoryPoint::clear_a() {
  a_ = 0;
}
inline float TrajectoryPoint::_internal_a() const {
  return a_;
}
inline float TrajectoryPoint::a() const {
  // @@protoc_insertion_point(field_get:minieye.TrajectoryPoint.a)
  return _internal_a();
}
inline void TrajectoryPoint::_internal_set_a(float value) {
  
  a_ = value;
}
inline void TrajectoryPoint::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:minieye.TrajectoryPoint.a)
}

// float da = 4;
inline void TrajectoryPoint::clear_da() {
  da_ = 0;
}
inline float TrajectoryPoint::_internal_da() const {
  return da_;
}
inline float TrajectoryPoint::da() const {
  // @@protoc_insertion_point(field_get:minieye.TrajectoryPoint.da)
  return _internal_da();
}
inline void TrajectoryPoint::_internal_set_da(float value) {
  
  da_ = value;
}
inline void TrajectoryPoint::set_da(float value) {
  _internal_set_da(value);
  // @@protoc_insertion_point(field_set:minieye.TrajectoryPoint.da)
}

// float rl_time = 5;
inline void TrajectoryPoint::clear_rl_time() {
  rl_time_ = 0;
}
inline float TrajectoryPoint::_internal_rl_time() const {
  return rl_time_;
}
inline float TrajectoryPoint::rl_time() const {
  // @@protoc_insertion_point(field_get:minieye.TrajectoryPoint.rl_time)
  return _internal_rl_time();
}
inline void TrajectoryPoint::_internal_set_rl_time(float value) {
  
  rl_time_ = value;
}
inline void TrajectoryPoint::set_rl_time(float value) {
  _internal_set_rl_time(value);
  // @@protoc_insertion_point(field_set:minieye.TrajectoryPoint.rl_time)
}

// float steer = 6;
inline void TrajectoryPoint::clear_steer() {
  steer_ = 0;
}
inline float TrajectoryPoint::_internal_steer() const {
  return steer_;
}
inline float TrajectoryPoint::steer() const {
  // @@protoc_insertion_point(field_get:minieye.TrajectoryPoint.steer)
  return _internal_steer();
}
inline void TrajectoryPoint::_internal_set_steer(float value) {
  
  steer_ = value;
}
inline void TrajectoryPoint::set_steer(float value) {
  _internal_set_steer(value);
  // @@protoc_insertion_point(field_set:minieye.TrajectoryPoint.steer)
}

// -------------------------------------------------------------------

// Trajectory

// uint64 timestamp = 1;
inline void Trajectory::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trajectory::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trajectory::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.Trajectory.timestamp)
  return _internal_timestamp();
}
inline void Trajectory::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Trajectory::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.Trajectory.timestamp)
}

// uint64 tick = 2;
inline void Trajectory::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trajectory::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trajectory::tick() const {
  // @@protoc_insertion_point(field_get:minieye.Trajectory.tick)
  return _internal_tick();
}
inline void Trajectory::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void Trajectory::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.Trajectory.tick)
}

// uint32 id = 3;
inline void Trajectory::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trajectory::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trajectory::id() const {
  // @@protoc_insertion_point(field_get:minieye.Trajectory.id)
  return _internal_id();
}
inline void Trajectory::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Trajectory::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minieye.Trajectory.id)
}

// int32 gear = 4;
inline void Trajectory::clear_gear() {
  gear_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory::_internal_gear() const {
  return gear_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory::gear() const {
  // @@protoc_insertion_point(field_get:minieye.Trajectory.gear)
  return _internal_gear();
}
inline void Trajectory::_internal_set_gear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gear_ = value;
}
inline void Trajectory::set_gear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:minieye.Trajectory.gear)
}

// int32 type = 5;
inline void Trajectory::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory::type() const {
  // @@protoc_insertion_point(field_get:minieye.Trajectory.type)
  return _internal_type();
}
inline void Trajectory::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Trajectory::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:minieye.Trajectory.type)
}

// repeated .minieye.TrajectoryPoint trajectory = 6;
inline int Trajectory::_internal_trajectory_size() const {
  return trajectory_.size();
}
inline int Trajectory::trajectory_size() const {
  return _internal_trajectory_size();
}
inline void Trajectory::clear_trajectory() {
  trajectory_.Clear();
}
inline ::minieye::TrajectoryPoint* Trajectory::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.Trajectory.trajectory)
  return trajectory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::TrajectoryPoint >*
Trajectory::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:minieye.Trajectory.trajectory)
  return &trajectory_;
}
inline const ::minieye::TrajectoryPoint& Trajectory::_internal_trajectory(int index) const {
  return trajectory_.Get(index);
}
inline const ::minieye::TrajectoryPoint& Trajectory::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:minieye.Trajectory.trajectory)
  return _internal_trajectory(index);
}
inline ::minieye::TrajectoryPoint* Trajectory::_internal_add_trajectory() {
  return trajectory_.Add();
}
inline ::minieye::TrajectoryPoint* Trajectory::add_trajectory() {
  // @@protoc_insertion_point(field_add:minieye.Trajectory.trajectory)
  return _internal_add_trajectory();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::TrajectoryPoint >&
Trajectory::trajectory() const {
  // @@protoc_insertion_point(field_list:minieye.Trajectory.trajectory)
  return trajectory_;
}

// float total_length = 7;
inline void Trajectory::clear_total_length() {
  total_length_ = 0;
}
inline float Trajectory::_internal_total_length() const {
  return total_length_;
}
inline float Trajectory::total_length() const {
  // @@protoc_insertion_point(field_get:minieye.Trajectory.total_length)
  return _internal_total_length();
}
inline void Trajectory::_internal_set_total_length(float value) {
  
  total_length_ = value;
}
inline void Trajectory::set_total_length(float value) {
  _internal_set_total_length(value);
  // @@protoc_insertion_point(field_set:minieye.Trajectory.total_length)
}

// float total_time = 8;
inline void Trajectory::clear_total_time() {
  total_time_ = 0;
}
inline float Trajectory::_internal_total_time() const {
  return total_time_;
}
inline float Trajectory::total_time() const {
  // @@protoc_insertion_point(field_get:minieye.Trajectory.total_time)
  return _internal_total_time();
}
inline void Trajectory::_internal_set_total_time(float value) {
  
  total_time_ = value;
}
inline void Trajectory::set_total_time(float value) {
  _internal_set_total_time(value);
  // @@protoc_insertion_point(field_set:minieye.Trajectory.total_time)
}

// -------------------------------------------------------------------

// Planning

// uint64 timestamp = 1;
inline void Planning::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Planning::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Planning::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.Planning.timestamp)
  return _internal_timestamp();
}
inline void Planning::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Planning::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.Planning.timestamp)
}

// uint64 tick = 2;
inline void Planning::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Planning::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Planning::tick() const {
  // @@protoc_insertion_point(field_get:minieye.Planning.tick)
  return _internal_tick();
}
inline void Planning::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void Planning::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.Planning.tick)
}

// uint32 planning_status = 3;
inline void Planning::clear_planning_status() {
  planning_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Planning::_internal_planning_status() const {
  return planning_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Planning::planning_status() const {
  // @@protoc_insertion_point(field_get:minieye.Planning.planning_status)
  return _internal_planning_status();
}
inline void Planning::_internal_set_planning_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  planning_status_ = value;
}
inline void Planning::set_planning_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_planning_status(value);
  // @@protoc_insertion_point(field_set:minieye.Planning.planning_status)
}

// .minieye.Trajectory planning_trajectory = 4;
inline bool Planning::_internal_has_planning_trajectory() const {
  return this != internal_default_instance() && planning_trajectory_ != nullptr;
}
inline bool Planning::has_planning_trajectory() const {
  return _internal_has_planning_trajectory();
}
inline void Planning::clear_planning_trajectory() {
  if (GetArena() == nullptr && planning_trajectory_ != nullptr) {
    delete planning_trajectory_;
  }
  planning_trajectory_ = nullptr;
}
inline const ::minieye::Trajectory& Planning::_internal_planning_trajectory() const {
  const ::minieye::Trajectory* p = planning_trajectory_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::Trajectory*>(
      &::minieye::_Trajectory_default_instance_);
}
inline const ::minieye::Trajectory& Planning::planning_trajectory() const {
  // @@protoc_insertion_point(field_get:minieye.Planning.planning_trajectory)
  return _internal_planning_trajectory();
}
inline void Planning::unsafe_arena_set_allocated_planning_trajectory(
    ::minieye::Trajectory* planning_trajectory) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(planning_trajectory_);
  }
  planning_trajectory_ = planning_trajectory;
  if (planning_trajectory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.Planning.planning_trajectory)
}
inline ::minieye::Trajectory* Planning::release_planning_trajectory() {
  auto temp = unsafe_arena_release_planning_trajectory();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::Trajectory* Planning::unsafe_arena_release_planning_trajectory() {
  // @@protoc_insertion_point(field_release:minieye.Planning.planning_trajectory)
  
  ::minieye::Trajectory* temp = planning_trajectory_;
  planning_trajectory_ = nullptr;
  return temp;
}
inline ::minieye::Trajectory* Planning::_internal_mutable_planning_trajectory() {
  
  if (planning_trajectory_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::Trajectory>(GetArena());
    planning_trajectory_ = p;
  }
  return planning_trajectory_;
}
inline ::minieye::Trajectory* Planning::mutable_planning_trajectory() {
  // @@protoc_insertion_point(field_mutable:minieye.Planning.planning_trajectory)
  return _internal_mutable_planning_trajectory();
}
inline void Planning::set_allocated_planning_trajectory(::minieye::Trajectory* planning_trajectory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete planning_trajectory_;
  }
  if (planning_trajectory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(planning_trajectory);
    if (message_arena != submessage_arena) {
      planning_trajectory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planning_trajectory, submessage_arena);
    }
    
  } else {
    
  }
  planning_trajectory_ = planning_trajectory;
  // @@protoc_insertion_point(field_set_allocated:minieye.Planning.planning_trajectory)
}

// float target_yaw_bias = 5;
inline void Planning::clear_target_yaw_bias() {
  target_yaw_bias_ = 0;
}
inline float Planning::_internal_target_yaw_bias() const {
  return target_yaw_bias_;
}
inline float Planning::target_yaw_bias() const {
  // @@protoc_insertion_point(field_get:minieye.Planning.target_yaw_bias)
  return _internal_target_yaw_bias();
}
inline void Planning::_internal_set_target_yaw_bias(float value) {
  
  target_yaw_bias_ = value;
}
inline void Planning::set_target_yaw_bias(float value) {
  _internal_set_target_yaw_bias(value);
  // @@protoc_insertion_point(field_set:minieye.Planning.target_yaw_bias)
}

// float target_l_bias = 6;
inline void Planning::clear_target_l_bias() {
  target_l_bias_ = 0;
}
inline float Planning::_internal_target_l_bias() const {
  return target_l_bias_;
}
inline float Planning::target_l_bias() const {
  // @@protoc_insertion_point(field_get:minieye.Planning.target_l_bias)
  return _internal_target_l_bias();
}
inline void Planning::_internal_set_target_l_bias(float value) {
  
  target_l_bias_ = value;
}
inline void Planning::set_target_l_bias(float value) {
  _internal_set_target_l_bias(value);
  // @@protoc_insertion_point(field_set:minieye.Planning.target_l_bias)
}

// float target_s_bias = 7;
inline void Planning::clear_target_s_bias() {
  target_s_bias_ = 0;
}
inline float Planning::_internal_target_s_bias() const {
  return target_s_bias_;
}
inline float Planning::target_s_bias() const {
  // @@protoc_insertion_point(field_get:minieye.Planning.target_s_bias)
  return _internal_target_s_bias();
}
inline void Planning::_internal_set_target_s_bias(float value) {
  
  target_s_bias_ = value;
}
inline void Planning::set_target_s_bias(float value) {
  _internal_set_target_s_bias(value);
  // @@protoc_insertion_point(field_set:minieye.Planning.target_s_bias)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_planning_2eproto
