// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vtr.proto

#include "vtr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vtr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VtrPathPoint_vtr_2eproto;
namespace minieye {
class VtrPathPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VtrPathPoint> _instance;
} _VtrPathPoint_default_instance_;
class VtrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vtr> _instance;
} _Vtr_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_Vtr_vtr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_Vtr_default_instance_;
    new (ptr) ::minieye::Vtr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::Vtr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vtr_vtr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Vtr_vtr_2eproto}, {
      &scc_info_VtrPathPoint_vtr_2eproto.base,}};

static void InitDefaultsscc_info_VtrPathPoint_vtr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_VtrPathPoint_default_instance_;
    new (ptr) ::minieye::VtrPathPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::VtrPathPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VtrPathPoint_vtr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VtrPathPoint_vtr_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vtr_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vtr_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vtr_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vtr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::VtrPathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::VtrPathPoint, x_),
  PROTOBUF_FIELD_OFFSET(::minieye::VtrPathPoint, y_),
  PROTOBUF_FIELD_OFFSET(::minieye::VtrPathPoint, theta_),
  PROTOBUF_FIELD_OFFSET(::minieye::VtrPathPoint, s_),
  PROTOBUF_FIELD_OFFSET(::minieye::VtrPathPoint, kappa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::Vtr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::Vtr, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::Vtr, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::Vtr, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::Vtr, vtr_status_),
  PROTOBUF_FIELD_OFFSET(::minieye::Vtr, vtr_path_points_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::VtrPathPoint)},
  { 10, -1, sizeof(::minieye::Vtr)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_VtrPathPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_Vtr_default_instance_),
};

const char descriptor_table_protodef_vtr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tvtr.proto\022\007minieye\"M\n\014VtrPathPoint\022\t\n\001"
  "x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\r\n\005theta\030\003 \001(\002\022\t\n\001s\030\004"
  " \001(\002\022\r\n\005kappa\030\005 \001(\002\"\366\001\n\003Vtr\022\021\n\ttimestamp"
  "\030\001 \001(\004\022\014\n\004tick\030\002 \001(\004\022\020\n\010frame_id\030\003 \001(\004\022*"
  "\n\nvtr_status\030\004 \001(\0162\026.minieye.Vtr.VtrStat"
  "us\022.\n\017vtr_path_points\030\005 \003(\0132\025.minieye.Vt"
  "rPathPoint\"`\n\tVtrStatus\022\013\n\007Standby\020\000\022\021\n\r"
  "RecordingPath\020\001\022\021\n\rPathSatisfied\020\002\022\020\n\014Pa"
  "thSmoothed\020\003\022\016\n\nPathSended\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vtr_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vtr_2eproto_sccs[2] = {
  &scc_info_Vtr_vtr_2eproto.base,
  &scc_info_VtrPathPoint_vtr_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vtr_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vtr_2eproto = {
  false, false, descriptor_table_protodef_vtr_2eproto, "vtr.proto", 356,
  &descriptor_table_vtr_2eproto_once, descriptor_table_vtr_2eproto_sccs, descriptor_table_vtr_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_vtr_2eproto::offsets,
  file_level_metadata_vtr_2eproto, 2, file_level_enum_descriptors_vtr_2eproto, file_level_service_descriptors_vtr_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vtr_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vtr_2eproto)), true);
namespace minieye {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vtr_VtrStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vtr_2eproto);
  return file_level_enum_descriptors_vtr_2eproto[0];
}
bool Vtr_VtrStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vtr_VtrStatus Vtr::Standby;
constexpr Vtr_VtrStatus Vtr::RecordingPath;
constexpr Vtr_VtrStatus Vtr::PathSatisfied;
constexpr Vtr_VtrStatus Vtr::PathSmoothed;
constexpr Vtr_VtrStatus Vtr::PathSended;
constexpr Vtr_VtrStatus Vtr::VtrStatus_MIN;
constexpr Vtr_VtrStatus Vtr::VtrStatus_MAX;
constexpr int Vtr::VtrStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void VtrPathPoint::InitAsDefaultInstance() {
}
class VtrPathPoint::_Internal {
 public:
};

VtrPathPoint::VtrPathPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.VtrPathPoint)
}
VtrPathPoint::VtrPathPoint(const VtrPathPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&kappa_) -
    reinterpret_cast<char*>(&x_)) + sizeof(kappa_));
  // @@protoc_insertion_point(copy_constructor:minieye.VtrPathPoint)
}

void VtrPathPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kappa_) -
      reinterpret_cast<char*>(&x_)) + sizeof(kappa_));
}

VtrPathPoint::~VtrPathPoint() {
  // @@protoc_insertion_point(destructor:minieye.VtrPathPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VtrPathPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VtrPathPoint::ArenaDtor(void* object) {
  VtrPathPoint* _this = reinterpret_cast< VtrPathPoint* >(object);
  (void)_this;
}
void VtrPathPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VtrPathPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VtrPathPoint& VtrPathPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VtrPathPoint_vtr_2eproto.base);
  return *internal_default_instance();
}


void VtrPathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.VtrPathPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kappa_) -
      reinterpret_cast<char*>(&x_)) + sizeof(kappa_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VtrPathPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float theta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float kappa = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VtrPathPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.VtrPathPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float theta = 3;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_theta(), target);
  }

  // float s = 4;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_s(), target);
  }

  // float kappa = 5;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_kappa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.VtrPathPoint)
  return target;
}

size_t VtrPathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.VtrPathPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float theta = 3;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 4;
  }

  // float s = 4;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 4;
  }

  // float kappa = 5;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VtrPathPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.VtrPathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const VtrPathPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VtrPathPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.VtrPathPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.VtrPathPoint)
    MergeFrom(*source);
  }
}

void VtrPathPoint::MergeFrom(const VtrPathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.VtrPathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    _internal_set_s(from._internal_s());
  }
  if (!(from.kappa() <= 0 && from.kappa() >= 0)) {
    _internal_set_kappa(from._internal_kappa());
  }
}

void VtrPathPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.VtrPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VtrPathPoint::CopyFrom(const VtrPathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.VtrPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VtrPathPoint::IsInitialized() const {
  return true;
}

void VtrPathPoint::InternalSwap(VtrPathPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VtrPathPoint, kappa_)
      + sizeof(VtrPathPoint::kappa_)
      - PROTOBUF_FIELD_OFFSET(VtrPathPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VtrPathPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vtr::InitAsDefaultInstance() {
}
class Vtr::_Internal {
 public:
};

Vtr::Vtr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vtr_path_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.Vtr)
}
Vtr::Vtr(const Vtr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vtr_path_points_(from.vtr_path_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&vtr_status_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(vtr_status_));
  // @@protoc_insertion_point(copy_constructor:minieye.Vtr)
}

void Vtr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vtr_vtr_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vtr_status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(vtr_status_));
}

Vtr::~Vtr() {
  // @@protoc_insertion_point(destructor:minieye.Vtr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vtr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vtr::ArenaDtor(void* object) {
  Vtr* _this = reinterpret_cast< Vtr* >(object);
  (void)_this;
}
void Vtr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vtr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vtr& Vtr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vtr_vtr_2eproto.base);
  return *internal_default_instance();
}


void Vtr::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.Vtr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vtr_path_points_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vtr_status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(vtr_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vtr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.Vtr.VtrStatus vtr_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vtr_status(static_cast<::minieye::Vtr_VtrStatus>(val));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.VtrPathPoint vtr_path_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vtr_path_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vtr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.Vtr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tick(), target);
  }

  // uint64 frame_id = 3;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_frame_id(), target);
  }

  // .minieye.Vtr.VtrStatus vtr_status = 4;
  if (this->vtr_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_vtr_status(), target);
  }

  // repeated .minieye.VtrPathPoint vtr_path_points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vtr_path_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_vtr_path_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.Vtr)
  return target;
}

size_t Vtr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.Vtr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.VtrPathPoint vtr_path_points = 5;
  total_size += 1UL * this->_internal_vtr_path_points_size();
  for (const auto& msg : this->vtr_path_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 frame_id = 3;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // .minieye.Vtr.VtrStatus vtr_status = 4;
  if (this->vtr_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vtr_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vtr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.Vtr)
  GOOGLE_DCHECK_NE(&from, this);
  const Vtr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vtr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.Vtr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.Vtr)
    MergeFrom(*source);
  }
}

void Vtr::MergeFrom(const Vtr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.Vtr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vtr_path_points_.MergeFrom(from.vtr_path_points_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.vtr_status() != 0) {
    _internal_set_vtr_status(from._internal_vtr_status());
  }
}

void Vtr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.Vtr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vtr::CopyFrom(const Vtr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.Vtr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vtr::IsInitialized() const {
  return true;
}

void Vtr::InternalSwap(Vtr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vtr_path_points_.InternalSwap(&other->vtr_path_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vtr, vtr_status_)
      + sizeof(Vtr::vtr_status_)
      - PROTOBUF_FIELD_OFFSET(Vtr, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vtr::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::VtrPathPoint* Arena::CreateMaybeMessage< ::minieye::VtrPathPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::VtrPathPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::Vtr* Arena::CreateMaybeMessage< ::minieye::Vtr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::Vtr >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
