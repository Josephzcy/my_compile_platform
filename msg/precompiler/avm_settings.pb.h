// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avm_settings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_avm_5fsettings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_avm_5fsettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_avm_5fsettings_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_avm_5fsettings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_avm_5fsettings_2eproto;
namespace minieye {
class AVMSettings;
class AVMSettingsDefaultTypeInternal;
extern AVMSettingsDefaultTypeInternal _AVMSettings_default_instance_;
class AVMSettings_SettingsEntry_DoNotUse;
class AVMSettings_SettingsEntry_DoNotUseDefaultTypeInternal;
extern AVMSettings_SettingsEntry_DoNotUseDefaultTypeInternal _AVMSettings_SettingsEntry_DoNotUse_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::AVMSettings* Arena::CreateMaybeMessage<::minieye::AVMSettings>(Arena*);
template<> ::minieye::AVMSettings_SettingsEntry_DoNotUse* Arena::CreateMaybeMessage<::minieye::AVMSettings_SettingsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

enum AVMSettings_SettingType : int {
  AVMSettings_SettingType_AVM_OP_VIEW_DVR_SW = 0,
  AVMSettings_SettingType_BtnPressInputValueX = 1,
  AVMSettings_SettingType_BtnPressInputValueY = 2,
  AVMSettings_SettingType_TouchEvt = 3,
  AVMSettings_SettingType_AVMViewModeSwitch = 4,
  AVMSettings_SettingType_LicensePlate1 = 5,
  AVMSettings_SettingType_LicensePlate2 = 6,
  AVMSettings_SettingType_LicensePlate3 = 7,
  AVMSettings_SettingType_LicensePlate4 = 8,
  AVMSettings_SettingType_LicensePlate5 = 9,
  AVMSettings_SettingType_LicensePlate6 = 10,
  AVMSettings_SettingType_LicensePlate7 = 11,
  AVMSettings_SettingType_LicensePlate8 = 12,
  AVMSettings_SettingType_AVMTransparentHoodSwitch = 13,
  AVMSettings_SettingType_AVMTrailSwitch = 14,
  AVMSettings_SettingType_Language = 15,
  AVMSettings_SettingType_RadarWarining = 16,
  AVMSettings_SettingType_Transparency = 17,
  AVMSettings_SettingType_LicensePlate = 18,
  AVMSettings_SettingType_GuideLine = 19,
  AVMSettings_SettingType_AVMCalibrationReq = 20,
  AVMSettings_SettingType_RCTAWarningLeft = 21,
  AVMSettings_SettingType_RCTAWarningRight = 22,
  AVMSettings_SettingType_LHTurnlightSts = 23,
  AVMSettings_SettingType_RHTurnlightSts = 24,
  AVMSettings_SettingType_APAStatus = 25,
  AVMSettings_SettingType_AVMSettings_SettingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AVMSettings_SettingType_AVMSettings_SettingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AVMSettings_SettingType_IsValid(int value);
constexpr AVMSettings_SettingType AVMSettings_SettingType_SettingType_MIN = AVMSettings_SettingType_AVM_OP_VIEW_DVR_SW;
constexpr AVMSettings_SettingType AVMSettings_SettingType_SettingType_MAX = AVMSettings_SettingType_APAStatus;
constexpr int AVMSettings_SettingType_SettingType_ARRAYSIZE = AVMSettings_SettingType_SettingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AVMSettings_SettingType_descriptor();
template<typename T>
inline const std::string& AVMSettings_SettingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AVMSettings_SettingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AVMSettings_SettingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AVMSettings_SettingType_descriptor(), enum_t_value);
}
inline bool AVMSettings_SettingType_Parse(
    const std::string& name, AVMSettings_SettingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AVMSettings_SettingType>(
    AVMSettings_SettingType_descriptor(), name, value);
}
// ===================================================================

class AVMSettings_SettingsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AVMSettings_SettingsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AVMSettings_SettingsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  AVMSettings_SettingsEntry_DoNotUse();
  AVMSettings_SettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AVMSettings_SettingsEntry_DoNotUse& other);
  static const AVMSettings_SettingsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AVMSettings_SettingsEntry_DoNotUse*>(&_AVMSettings_SettingsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm_5fsettings_2eproto);
    return ::descriptor_table_avm_5fsettings_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class AVMSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.AVMSettings) */ {
 public:
  inline AVMSettings() : AVMSettings(nullptr) {};
  virtual ~AVMSettings();

  AVMSettings(const AVMSettings& from);
  AVMSettings(AVMSettings&& from) noexcept
    : AVMSettings() {
    *this = ::std::move(from);
  }

  inline AVMSettings& operator=(const AVMSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline AVMSettings& operator=(AVMSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AVMSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AVMSettings* internal_default_instance() {
    return reinterpret_cast<const AVMSettings*>(
               &_AVMSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AVMSettings& a, AVMSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(AVMSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AVMSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AVMSettings* New() const final {
    return CreateMaybeMessage<AVMSettings>(nullptr);
  }

  AVMSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AVMSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AVMSettings& from);
  void MergeFrom(const AVMSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AVMSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.AVMSettings";
  }
  protected:
  explicit AVMSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm_5fsettings_2eproto);
    return ::descriptor_table_avm_5fsettings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef AVMSettings_SettingType SettingType;
  static constexpr SettingType AVM_OP_VIEW_DVR_SW =
    AVMSettings_SettingType_AVM_OP_VIEW_DVR_SW;
  static constexpr SettingType BtnPressInputValueX =
    AVMSettings_SettingType_BtnPressInputValueX;
  static constexpr SettingType BtnPressInputValueY =
    AVMSettings_SettingType_BtnPressInputValueY;
  static constexpr SettingType TouchEvt =
    AVMSettings_SettingType_TouchEvt;
  static constexpr SettingType AVMViewModeSwitch =
    AVMSettings_SettingType_AVMViewModeSwitch;
  static constexpr SettingType LicensePlate1 =
    AVMSettings_SettingType_LicensePlate1;
  static constexpr SettingType LicensePlate2 =
    AVMSettings_SettingType_LicensePlate2;
  static constexpr SettingType LicensePlate3 =
    AVMSettings_SettingType_LicensePlate3;
  static constexpr SettingType LicensePlate4 =
    AVMSettings_SettingType_LicensePlate4;
  static constexpr SettingType LicensePlate5 =
    AVMSettings_SettingType_LicensePlate5;
  static constexpr SettingType LicensePlate6 =
    AVMSettings_SettingType_LicensePlate6;
  static constexpr SettingType LicensePlate7 =
    AVMSettings_SettingType_LicensePlate7;
  static constexpr SettingType LicensePlate8 =
    AVMSettings_SettingType_LicensePlate8;
  static constexpr SettingType AVMTransparentHoodSwitch =
    AVMSettings_SettingType_AVMTransparentHoodSwitch;
  static constexpr SettingType AVMTrailSwitch =
    AVMSettings_SettingType_AVMTrailSwitch;
  static constexpr SettingType Language =
    AVMSettings_SettingType_Language;
  static constexpr SettingType RadarWarining =
    AVMSettings_SettingType_RadarWarining;
  static constexpr SettingType Transparency =
    AVMSettings_SettingType_Transparency;
  static constexpr SettingType LicensePlate =
    AVMSettings_SettingType_LicensePlate;
  static constexpr SettingType GuideLine =
    AVMSettings_SettingType_GuideLine;
  static constexpr SettingType AVMCalibrationReq =
    AVMSettings_SettingType_AVMCalibrationReq;
  static constexpr SettingType RCTAWarningLeft =
    AVMSettings_SettingType_RCTAWarningLeft;
  static constexpr SettingType RCTAWarningRight =
    AVMSettings_SettingType_RCTAWarningRight;
  static constexpr SettingType LHTurnlightSts =
    AVMSettings_SettingType_LHTurnlightSts;
  static constexpr SettingType RHTurnlightSts =
    AVMSettings_SettingType_RHTurnlightSts;
  static constexpr SettingType APAStatus =
    AVMSettings_SettingType_APAStatus;
  static inline bool SettingType_IsValid(int value) {
    return AVMSettings_SettingType_IsValid(value);
  }
  static constexpr SettingType SettingType_MIN =
    AVMSettings_SettingType_SettingType_MIN;
  static constexpr SettingType SettingType_MAX =
    AVMSettings_SettingType_SettingType_MAX;
  static constexpr int SettingType_ARRAYSIZE =
    AVMSettings_SettingType_SettingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SettingType_descriptor() {
    return AVMSettings_SettingType_descriptor();
  }
  template<typename T>
  static inline const std::string& SettingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SettingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SettingType_Name.");
    return AVMSettings_SettingType_Name(enum_t_value);
  }
  static inline bool SettingType_Parse(const std::string& name,
      SettingType* value) {
    return AVMSettings_SettingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // map<int32, int32> settings = 1;
  int settings_size() const;
  private:
  int _internal_settings_size() const;
  public:
  void clear_settings();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_settings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_settings();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      settings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_settings();

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.AVMSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AVMSettings_SettingsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > settings_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avm_5fsettings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AVMSettings

// map<int32, int32> settings = 1;
inline int AVMSettings::_internal_settings_size() const {
  return settings_.size();
}
inline int AVMSettings::settings_size() const {
  return _internal_settings_size();
}
inline void AVMSettings::clear_settings() {
  settings_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
AVMSettings::_internal_settings() const {
  return settings_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
AVMSettings::settings() const {
  // @@protoc_insertion_point(field_map:minieye.AVMSettings.settings)
  return _internal_settings();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
AVMSettings::_internal_mutable_settings() {
  return settings_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
AVMSettings::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_map:minieye.AVMSettings.settings)
  return _internal_mutable_settings();
}

// uint64 timestamp = 2;
inline void AVMSettings::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AVMSettings::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AVMSettings::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.AVMSettings.timestamp)
  return _internal_timestamp();
}
inline void AVMSettings::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void AVMSettings::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.AVMSettings.timestamp)
}

// uint64 tick = 3;
inline void AVMSettings::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AVMSettings::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AVMSettings::tick() const {
  // @@protoc_insertion_point(field_get:minieye.AVMSettings.tick)
  return _internal_tick();
}
inline void AVMSettings::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void AVMSettings::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.AVMSettings.tick)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minieye::AVMSettings_SettingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::AVMSettings_SettingType>() {
  return ::minieye::AVMSettings_SettingType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_avm_5fsettings_2eproto
