// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parkingspace.proto

#include "parkingspace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_parkingspace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CornerPt_parkingspace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parkingspace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParkingSlot_parkingspace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_parkingspace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RodPt_parkingspace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point2D_geometry_2eproto;
namespace perception {
class CornerPtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CornerPt> _instance;
} _CornerPt_default_instance_;
class RodPtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RodPt> _instance;
} _RodPt_default_instance_;
class ParkingSlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingSlot> _instance;
} _ParkingSlot_default_instance_;
class ParkingSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingSpace> _instance;
} _ParkingSpace_default_instance_;
}  // namespace perception
static void InitDefaultsscc_info_CornerPt_parkingspace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_CornerPt_default_instance_;
    new (ptr) ::perception::CornerPt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::CornerPt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CornerPt_parkingspace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CornerPt_parkingspace_2eproto}, {
      &scc_info_Point2D_geometry_2eproto.base,}};

static void InitDefaultsscc_info_ParkingSlot_parkingspace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_ParkingSlot_default_instance_;
    new (ptr) ::perception::ParkingSlot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::ParkingSlot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParkingSlot_parkingspace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ParkingSlot_parkingspace_2eproto}, {
      &scc_info_CornerPt_parkingspace_2eproto.base,
      &scc_info_RodPt_parkingspace_2eproto.base,}};

static void InitDefaultsscc_info_ParkingSpace_parkingspace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_ParkingSpace_default_instance_;
    new (ptr) ::perception::ParkingSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::ParkingSpace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingSpace_parkingspace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParkingSpace_parkingspace_2eproto}, {
      &scc_info_ParkingSlot_parkingspace_2eproto.base,}};

static void InitDefaultsscc_info_RodPt_parkingspace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_RodPt_default_instance_;
    new (ptr) ::perception::RodPt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::RodPt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RodPt_parkingspace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RodPt_parkingspace_2eproto}, {
      &scc_info_Point2D_geometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_parkingspace_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_parkingspace_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_parkingspace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_parkingspace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::CornerPt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::CornerPt, id_),
  PROTOBUF_FIELD_OFFSET(::perception::CornerPt, image_pt_),
  PROTOBUF_FIELD_OFFSET(::perception::CornerPt, vehicle_pt_),
  PROTOBUF_FIELD_OFFSET(::perception::CornerPt, odom_pt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::RodPt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::RodPt, id_),
  PROTOBUF_FIELD_OFFSET(::perception::RodPt, image_pt_),
  PROTOBUF_FIELD_OFFSET(::perception::RodPt, vehicle_pt_),
  PROTOBUF_FIELD_OFFSET(::perception::RodPt, odom_pt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSlot, id_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSlot, corner_pts_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSlot, type_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSlot, occupied_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSlot, width_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSlot, length_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSlot, search_stage_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSlot, parking_stage_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSlot, exist_rod_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSlot, rod_pts_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSlot, rod_stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSpace, parkslots_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSpace, frame_id_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSpace, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSpace, tick_),
  PROTOBUF_FIELD_OFFSET(::perception::ParkingSpace, source_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perception::CornerPt)},
  { 9, -1, sizeof(::perception::RodPt)},
  { 18, -1, sizeof(::perception::ParkingSlot)},
  { 34, -1, sizeof(::perception::ParkingSpace)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_CornerPt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_RodPt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_ParkingSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_ParkingSpace_default_instance_),
};

const char descriptor_table_protodef_parkingspace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022parkingspace.proto\022\nperception\032\016geomet"
  "ry.proto\032\021data_source.proto\"\241\001\n\010CornerPt"
  "\022\n\n\002id\030\001 \001(\r\022,\n\010image_pt\030\002 \001(\0132\032.percept"
  "ion.common.Point2D\022.\n\nvehicle_pt\030\003 \001(\0132\032"
  ".perception.common.Point2D\022+\n\007odom_pt\030\004 "
  "\001(\0132\032.perception.common.Point2D\"\236\001\n\005RodP"
  "t\022\n\n\002id\030\001 \001(\r\022,\n\010image_pt\030\002 \001(\0132\032.percep"
  "tion.common.Point2D\022.\n\nvehicle_pt\030\003 \001(\0132"
  "\032.perception.common.Point2D\022+\n\007odom_pt\030\004"
  " \001(\0132\032.perception.common.Point2D\"\377\005\n\013Par"
  "kingSlot\022\n\n\002id\030\001 \001(\r\022(\n\ncorner_pts\030\002 \003(\013"
  "2\024.perception.CornerPt\0222\n\004type\030\003 \001(\0162$.p"
  "erception.ParkingSlot.ParkSlotType\022\020\n\010oc"
  "cupied\030\004 \001(\010\022\r\n\005width\030\005 \001(\001\022\016\n\006length\030\006 "
  "\001(\001\0229\n\014search_stage\030\007 \001(\0162#.perception.P"
  "arkingSlot.SearchStage\022;\n\rparking_stage\030"
  "\010 \001(\0162$.perception.ParkingSlot.ParkingSt"
  "age\022\021\n\texist_rod\030\t \001(\010\022\"\n\007rod_pts\030\n \003(\0132"
  "\021.perception.RodPt\0223\n\trod_stage\030\013 \001(\0162 ."
  "perception.ParkingSlot.RodStage\"V\n\014ParkS"
  "lotType\022\014\n\010kUnknown\020\000\022\021\n\rkVerticalSpot\020\001"
  "\022\023\n\017kHorizontalSpot\020\002\022\020\n\014kObliqueSpot\020\003\""
  "X\n\013SearchStage\022\016\n\nkSsDefault\020\000\022\021\n\rkSsDis"
  "content\020\001\022\014\n\010kSsFront\020\002\022\013\n\007kSsSide\020\003\022\013\n\007"
  "kSsRear\020\004\"i\n\014ParkingStage\022\016\n\nkPsDefault\020"
  "\000\022\021\n\rkPsDiscontent\020\001\022\016\n\nkPsOutside\020\002\022\r\n\t"
  "kPsInside\020\003\022\027\n\023KInsideContinuously\020\004\"T\n\010"
  "RodStage\022\016\n\nkRsDefault\020\000\022\021\n\rkRsDisconten"
  "t\020\001\022\n\n\006kRsFar\020\002\022\013\n\007kRsNear\020\003\022\014\n\010kRsClose"
  "\020\004\"\222\001\n\014ParkingSpace\022*\n\tparkslots\030\001 \003(\0132\027"
  ".perception.ParkingSlot\022\020\n\010frame_id\030\002 \001("
  "\004\022\021\n\ttimestamp\030\003 \001(\004\022\014\n\004tick\030\004 \001(\004\022#\n\006so"
  "urce\030\005 \001(\0162\023.minieye.DataSourceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_parkingspace_2eproto_deps[2] = {
  &::descriptor_table_data_5fsource_2eproto,
  &::descriptor_table_geometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_parkingspace_2eproto_sccs[4] = {
  &scc_info_CornerPt_parkingspace_2eproto.base,
  &scc_info_ParkingSlot_parkingspace_2eproto.base,
  &scc_info_ParkingSpace_parkingspace_2eproto.base,
  &scc_info_RodPt_parkingspace_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_parkingspace_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parkingspace_2eproto = {
  false, false, descriptor_table_protodef_parkingspace_2eproto, "parkingspace.proto", 1319,
  &descriptor_table_parkingspace_2eproto_once, descriptor_table_parkingspace_2eproto_sccs, descriptor_table_parkingspace_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_parkingspace_2eproto::offsets,
  file_level_metadata_parkingspace_2eproto, 4, file_level_enum_descriptors_parkingspace_2eproto, file_level_service_descriptors_parkingspace_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_parkingspace_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_parkingspace_2eproto)), true);
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSlot_ParkSlotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_parkingspace_2eproto);
  return file_level_enum_descriptors_parkingspace_2eproto[0];
}
bool ParkingSlot_ParkSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ParkingSlot_ParkSlotType ParkingSlot::kUnknown;
constexpr ParkingSlot_ParkSlotType ParkingSlot::kVerticalSpot;
constexpr ParkingSlot_ParkSlotType ParkingSlot::kHorizontalSpot;
constexpr ParkingSlot_ParkSlotType ParkingSlot::kObliqueSpot;
constexpr ParkingSlot_ParkSlotType ParkingSlot::ParkSlotType_MIN;
constexpr ParkingSlot_ParkSlotType ParkingSlot::ParkSlotType_MAX;
constexpr int ParkingSlot::ParkSlotType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSlot_SearchStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_parkingspace_2eproto);
  return file_level_enum_descriptors_parkingspace_2eproto[1];
}
bool ParkingSlot_SearchStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ParkingSlot_SearchStage ParkingSlot::kSsDefault;
constexpr ParkingSlot_SearchStage ParkingSlot::kSsDiscontent;
constexpr ParkingSlot_SearchStage ParkingSlot::kSsFront;
constexpr ParkingSlot_SearchStage ParkingSlot::kSsSide;
constexpr ParkingSlot_SearchStage ParkingSlot::kSsRear;
constexpr ParkingSlot_SearchStage ParkingSlot::SearchStage_MIN;
constexpr ParkingSlot_SearchStage ParkingSlot::SearchStage_MAX;
constexpr int ParkingSlot::SearchStage_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSlot_ParkingStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_parkingspace_2eproto);
  return file_level_enum_descriptors_parkingspace_2eproto[2];
}
bool ParkingSlot_ParkingStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ParkingSlot_ParkingStage ParkingSlot::kPsDefault;
constexpr ParkingSlot_ParkingStage ParkingSlot::kPsDiscontent;
constexpr ParkingSlot_ParkingStage ParkingSlot::kPsOutside;
constexpr ParkingSlot_ParkingStage ParkingSlot::kPsInside;
constexpr ParkingSlot_ParkingStage ParkingSlot::KInsideContinuously;
constexpr ParkingSlot_ParkingStage ParkingSlot::ParkingStage_MIN;
constexpr ParkingSlot_ParkingStage ParkingSlot::ParkingStage_MAX;
constexpr int ParkingSlot::ParkingStage_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSlot_RodStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_parkingspace_2eproto);
  return file_level_enum_descriptors_parkingspace_2eproto[3];
}
bool ParkingSlot_RodStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ParkingSlot_RodStage ParkingSlot::kRsDefault;
constexpr ParkingSlot_RodStage ParkingSlot::kRsDiscontent;
constexpr ParkingSlot_RodStage ParkingSlot::kRsFar;
constexpr ParkingSlot_RodStage ParkingSlot::kRsNear;
constexpr ParkingSlot_RodStage ParkingSlot::kRsClose;
constexpr ParkingSlot_RodStage ParkingSlot::RodStage_MIN;
constexpr ParkingSlot_RodStage ParkingSlot::RodStage_MAX;
constexpr int ParkingSlot::RodStage_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CornerPt::InitAsDefaultInstance() {
  ::perception::_CornerPt_default_instance_._instance.get_mutable()->image_pt_ = const_cast< ::perception::common::Point2D*>(
      ::perception::common::Point2D::internal_default_instance());
  ::perception::_CornerPt_default_instance_._instance.get_mutable()->vehicle_pt_ = const_cast< ::perception::common::Point2D*>(
      ::perception::common::Point2D::internal_default_instance());
  ::perception::_CornerPt_default_instance_._instance.get_mutable()->odom_pt_ = const_cast< ::perception::common::Point2D*>(
      ::perception::common::Point2D::internal_default_instance());
}
class CornerPt::_Internal {
 public:
  static const ::perception::common::Point2D& image_pt(const CornerPt* msg);
  static const ::perception::common::Point2D& vehicle_pt(const CornerPt* msg);
  static const ::perception::common::Point2D& odom_pt(const CornerPt* msg);
};

const ::perception::common::Point2D&
CornerPt::_Internal::image_pt(const CornerPt* msg) {
  return *msg->image_pt_;
}
const ::perception::common::Point2D&
CornerPt::_Internal::vehicle_pt(const CornerPt* msg) {
  return *msg->vehicle_pt_;
}
const ::perception::common::Point2D&
CornerPt::_Internal::odom_pt(const CornerPt* msg) {
  return *msg->odom_pt_;
}
void CornerPt::clear_image_pt() {
  if (GetArena() == nullptr && image_pt_ != nullptr) {
    delete image_pt_;
  }
  image_pt_ = nullptr;
}
void CornerPt::clear_vehicle_pt() {
  if (GetArena() == nullptr && vehicle_pt_ != nullptr) {
    delete vehicle_pt_;
  }
  vehicle_pt_ = nullptr;
}
void CornerPt::clear_odom_pt() {
  if (GetArena() == nullptr && odom_pt_ != nullptr) {
    delete odom_pt_;
  }
  odom_pt_ = nullptr;
}
CornerPt::CornerPt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.CornerPt)
}
CornerPt::CornerPt(const CornerPt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image_pt()) {
    image_pt_ = new ::perception::common::Point2D(*from.image_pt_);
  } else {
    image_pt_ = nullptr;
  }
  if (from._internal_has_vehicle_pt()) {
    vehicle_pt_ = new ::perception::common::Point2D(*from.vehicle_pt_);
  } else {
    vehicle_pt_ = nullptr;
  }
  if (from._internal_has_odom_pt()) {
    odom_pt_ = new ::perception::common::Point2D(*from.odom_pt_);
  } else {
    odom_pt_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:perception.CornerPt)
}

void CornerPt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CornerPt_parkingspace_2eproto.base);
  ::memset(&image_pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&image_pt_)) + sizeof(id_));
}

CornerPt::~CornerPt() {
  // @@protoc_insertion_point(destructor:perception.CornerPt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CornerPt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_pt_;
  if (this != internal_default_instance()) delete vehicle_pt_;
  if (this != internal_default_instance()) delete odom_pt_;
}

void CornerPt::ArenaDtor(void* object) {
  CornerPt* _this = reinterpret_cast< CornerPt* >(object);
  (void)_this;
}
void CornerPt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CornerPt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CornerPt& CornerPt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CornerPt_parkingspace_2eproto.base);
  return *internal_default_instance();
}


void CornerPt::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.CornerPt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && image_pt_ != nullptr) {
    delete image_pt_;
  }
  image_pt_ = nullptr;
  if (GetArena() == nullptr && vehicle_pt_ != nullptr) {
    delete vehicle_pt_;
  }
  vehicle_pt_ = nullptr;
  if (GetArena() == nullptr && odom_pt_ != nullptr) {
    delete odom_pt_;
  }
  odom_pt_ = nullptr;
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CornerPt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2D image_pt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2D vehicle_pt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2D odom_pt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_odom_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CornerPt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.CornerPt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .perception.common.Point2D image_pt = 2;
  if (this->has_image_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image_pt(this), target, stream);
  }

  // .perception.common.Point2D vehicle_pt = 3;
  if (this->has_vehicle_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vehicle_pt(this), target, stream);
  }

  // .perception.common.Point2D odom_pt = 4;
  if (this->has_odom_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::odom_pt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.CornerPt)
  return target;
}

size_t CornerPt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.CornerPt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Point2D image_pt = 2;
  if (this->has_image_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_pt_);
  }

  // .perception.common.Point2D vehicle_pt = 3;
  if (this->has_vehicle_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_pt_);
  }

  // .perception.common.Point2D odom_pt = 4;
  if (this->has_odom_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odom_pt_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CornerPt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.CornerPt)
  GOOGLE_DCHECK_NE(&from, this);
  const CornerPt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CornerPt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.CornerPt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.CornerPt)
    MergeFrom(*source);
  }
}

void CornerPt::MergeFrom(const CornerPt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.CornerPt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image_pt()) {
    _internal_mutable_image_pt()->::perception::common::Point2D::MergeFrom(from._internal_image_pt());
  }
  if (from.has_vehicle_pt()) {
    _internal_mutable_vehicle_pt()->::perception::common::Point2D::MergeFrom(from._internal_vehicle_pt());
  }
  if (from.has_odom_pt()) {
    _internal_mutable_odom_pt()->::perception::common::Point2D::MergeFrom(from._internal_odom_pt());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CornerPt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.CornerPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CornerPt::CopyFrom(const CornerPt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.CornerPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CornerPt::IsInitialized() const {
  return true;
}

void CornerPt::InternalSwap(CornerPt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CornerPt, id_)
      + sizeof(CornerPt::id_)
      - PROTOBUF_FIELD_OFFSET(CornerPt, image_pt_)>(
          reinterpret_cast<char*>(&image_pt_),
          reinterpret_cast<char*>(&other->image_pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CornerPt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RodPt::InitAsDefaultInstance() {
  ::perception::_RodPt_default_instance_._instance.get_mutable()->image_pt_ = const_cast< ::perception::common::Point2D*>(
      ::perception::common::Point2D::internal_default_instance());
  ::perception::_RodPt_default_instance_._instance.get_mutable()->vehicle_pt_ = const_cast< ::perception::common::Point2D*>(
      ::perception::common::Point2D::internal_default_instance());
  ::perception::_RodPt_default_instance_._instance.get_mutable()->odom_pt_ = const_cast< ::perception::common::Point2D*>(
      ::perception::common::Point2D::internal_default_instance());
}
class RodPt::_Internal {
 public:
  static const ::perception::common::Point2D& image_pt(const RodPt* msg);
  static const ::perception::common::Point2D& vehicle_pt(const RodPt* msg);
  static const ::perception::common::Point2D& odom_pt(const RodPt* msg);
};

const ::perception::common::Point2D&
RodPt::_Internal::image_pt(const RodPt* msg) {
  return *msg->image_pt_;
}
const ::perception::common::Point2D&
RodPt::_Internal::vehicle_pt(const RodPt* msg) {
  return *msg->vehicle_pt_;
}
const ::perception::common::Point2D&
RodPt::_Internal::odom_pt(const RodPt* msg) {
  return *msg->odom_pt_;
}
void RodPt::clear_image_pt() {
  if (GetArena() == nullptr && image_pt_ != nullptr) {
    delete image_pt_;
  }
  image_pt_ = nullptr;
}
void RodPt::clear_vehicle_pt() {
  if (GetArena() == nullptr && vehicle_pt_ != nullptr) {
    delete vehicle_pt_;
  }
  vehicle_pt_ = nullptr;
}
void RodPt::clear_odom_pt() {
  if (GetArena() == nullptr && odom_pt_ != nullptr) {
    delete odom_pt_;
  }
  odom_pt_ = nullptr;
}
RodPt::RodPt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.RodPt)
}
RodPt::RodPt(const RodPt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image_pt()) {
    image_pt_ = new ::perception::common::Point2D(*from.image_pt_);
  } else {
    image_pt_ = nullptr;
  }
  if (from._internal_has_vehicle_pt()) {
    vehicle_pt_ = new ::perception::common::Point2D(*from.vehicle_pt_);
  } else {
    vehicle_pt_ = nullptr;
  }
  if (from._internal_has_odom_pt()) {
    odom_pt_ = new ::perception::common::Point2D(*from.odom_pt_);
  } else {
    odom_pt_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:perception.RodPt)
}

void RodPt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RodPt_parkingspace_2eproto.base);
  ::memset(&image_pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&image_pt_)) + sizeof(id_));
}

RodPt::~RodPt() {
  // @@protoc_insertion_point(destructor:perception.RodPt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RodPt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete image_pt_;
  if (this != internal_default_instance()) delete vehicle_pt_;
  if (this != internal_default_instance()) delete odom_pt_;
}

void RodPt::ArenaDtor(void* object) {
  RodPt* _this = reinterpret_cast< RodPt* >(object);
  (void)_this;
}
void RodPt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RodPt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RodPt& RodPt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RodPt_parkingspace_2eproto.base);
  return *internal_default_instance();
}


void RodPt::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.RodPt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && image_pt_ != nullptr) {
    delete image_pt_;
  }
  image_pt_ = nullptr;
  if (GetArena() == nullptr && vehicle_pt_ != nullptr) {
    delete vehicle_pt_;
  }
  vehicle_pt_ = nullptr;
  if (GetArena() == nullptr && odom_pt_ != nullptr) {
    delete odom_pt_;
  }
  odom_pt_ = nullptr;
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RodPt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2D image_pt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2D vehicle_pt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point2D odom_pt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_odom_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RodPt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.RodPt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .perception.common.Point2D image_pt = 2;
  if (this->has_image_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image_pt(this), target, stream);
  }

  // .perception.common.Point2D vehicle_pt = 3;
  if (this->has_vehicle_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vehicle_pt(this), target, stream);
  }

  // .perception.common.Point2D odom_pt = 4;
  if (this->has_odom_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::odom_pt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.RodPt)
  return target;
}

size_t RodPt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.RodPt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Point2D image_pt = 2;
  if (this->has_image_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_pt_);
  }

  // .perception.common.Point2D vehicle_pt = 3;
  if (this->has_vehicle_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_pt_);
  }

  // .perception.common.Point2D odom_pt = 4;
  if (this->has_odom_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odom_pt_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RodPt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.RodPt)
  GOOGLE_DCHECK_NE(&from, this);
  const RodPt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RodPt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.RodPt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.RodPt)
    MergeFrom(*source);
  }
}

void RodPt::MergeFrom(const RodPt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.RodPt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image_pt()) {
    _internal_mutable_image_pt()->::perception::common::Point2D::MergeFrom(from._internal_image_pt());
  }
  if (from.has_vehicle_pt()) {
    _internal_mutable_vehicle_pt()->::perception::common::Point2D::MergeFrom(from._internal_vehicle_pt());
  }
  if (from.has_odom_pt()) {
    _internal_mutable_odom_pt()->::perception::common::Point2D::MergeFrom(from._internal_odom_pt());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void RodPt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.RodPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RodPt::CopyFrom(const RodPt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.RodPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RodPt::IsInitialized() const {
  return true;
}

void RodPt::InternalSwap(RodPt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RodPt, id_)
      + sizeof(RodPt::id_)
      - PROTOBUF_FIELD_OFFSET(RodPt, image_pt_)>(
          reinterpret_cast<char*>(&image_pt_),
          reinterpret_cast<char*>(&other->image_pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RodPt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParkingSlot::InitAsDefaultInstance() {
}
class ParkingSlot::_Internal {
 public:
};

ParkingSlot::ParkingSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  corner_pts_(arena),
  rod_pts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.ParkingSlot)
}
ParkingSlot::ParkingSlot(const ParkingSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      corner_pts_(from.corner_pts_),
      rod_pts_(from.rod_pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rod_stage_) -
    reinterpret_cast<char*>(&id_)) + sizeof(rod_stage_));
  // @@protoc_insertion_point(copy_constructor:perception.ParkingSlot)
}

void ParkingSlot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingSlot_parkingspace_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rod_stage_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rod_stage_));
}

ParkingSlot::~ParkingSlot() {
  // @@protoc_insertion_point(destructor:perception.ParkingSlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParkingSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParkingSlot::ArenaDtor(void* object) {
  ParkingSlot* _this = reinterpret_cast< ParkingSlot* >(object);
  (void)_this;
}
void ParkingSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParkingSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingSlot& ParkingSlot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingSlot_parkingspace_2eproto.base);
  return *internal_default_instance();
}


void ParkingSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.ParkingSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  corner_pts_.Clear();
  rod_pts_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rod_stage_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rod_stage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.CornerPt corner_pts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_corner_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.ParkingSlot.ParkSlotType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::perception::ParkingSlot_ParkSlotType>(val));
        } else goto handle_unusual;
        continue;
      // bool occupied = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          occupied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .perception.ParkingSlot.SearchStage search_stage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_search_stage(static_cast<::perception::ParkingSlot_SearchStage>(val));
        } else goto handle_unusual;
        continue;
      // .perception.ParkingSlot.ParkingStage parking_stage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_parking_stage(static_cast<::perception::ParkingSlot_ParkingStage>(val));
        } else goto handle_unusual;
        continue;
      // bool exist_rod = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          exist_rod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.RodPt rod_pts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rod_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.ParkingSlot.RodStage rod_stage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rod_stage(static_cast<::perception::ParkingSlot_RodStage>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.ParkingSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .perception.CornerPt corner_pts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_corner_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_corner_pts(i), target, stream);
  }

  // .perception.ParkingSlot.ParkSlotType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // bool occupied = 4;
  if (this->occupied() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_occupied(), target);
  }

  // double width = 5;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_width(), target);
  }

  // double length = 6;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_length(), target);
  }

  // .perception.ParkingSlot.SearchStage search_stage = 7;
  if (this->search_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_search_stage(), target);
  }

  // .perception.ParkingSlot.ParkingStage parking_stage = 8;
  if (this->parking_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_parking_stage(), target);
  }

  // bool exist_rod = 9;
  if (this->exist_rod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_exist_rod(), target);
  }

  // repeated .perception.RodPt rod_pts = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rod_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_rod_pts(i), target, stream);
  }

  // .perception.ParkingSlot.RodStage rod_stage = 11;
  if (this->rod_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_rod_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.ParkingSlot)
  return target;
}

size_t ParkingSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.ParkingSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.CornerPt corner_pts = 2;
  total_size += 1UL * this->_internal_corner_pts_size();
  for (const auto& msg : this->corner_pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perception.RodPt rod_pts = 10;
  total_size += 1UL * this->_internal_rod_pts_size();
  for (const auto& msg : this->rod_pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .perception.ParkingSlot.ParkSlotType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // double width = 5;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double length = 6;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 8;
  }

  // bool occupied = 4;
  if (this->occupied() != 0) {
    total_size += 1 + 1;
  }

  // bool exist_rod = 9;
  if (this->exist_rod() != 0) {
    total_size += 1 + 1;
  }

  // .perception.ParkingSlot.SearchStage search_stage = 7;
  if (this->search_stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_search_stage());
  }

  // .perception.ParkingSlot.ParkingStage parking_stage = 8;
  if (this->parking_stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parking_stage());
  }

  // .perception.ParkingSlot.RodStage rod_stage = 11;
  if (this->rod_stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rod_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.ParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.ParkingSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.ParkingSlot)
    MergeFrom(*source);
  }
}

void ParkingSlot::MergeFrom(const ParkingSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.ParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  corner_pts_.MergeFrom(from.corner_pts_);
  rod_pts_.MergeFrom(from.rod_pts_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (from.occupied() != 0) {
    _internal_set_occupied(from._internal_occupied());
  }
  if (from.exist_rod() != 0) {
    _internal_set_exist_rod(from._internal_exist_rod());
  }
  if (from.search_stage() != 0) {
    _internal_set_search_stage(from._internal_search_stage());
  }
  if (from.parking_stage() != 0) {
    _internal_set_parking_stage(from._internal_parking_stage());
  }
  if (from.rod_stage() != 0) {
    _internal_set_rod_stage(from._internal_rod_stage());
  }
}

void ParkingSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.ParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSlot::CopyFrom(const ParkingSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.ParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSlot::IsInitialized() const {
  return true;
}

void ParkingSlot::InternalSwap(ParkingSlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  corner_pts_.InternalSwap(&other->corner_pts_);
  rod_pts_.InternalSwap(&other->rod_pts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParkingSlot, rod_stage_)
      + sizeof(ParkingSlot::rod_stage_)
      - PROTOBUF_FIELD_OFFSET(ParkingSlot, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParkingSpace::InitAsDefaultInstance() {
}
class ParkingSpace::_Internal {
 public:
};

ParkingSpace::ParkingSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parkslots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.ParkingSpace)
}
ParkingSpace::ParkingSpace(const ParkingSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parkslots_(from.parkslots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:perception.ParkingSpace)
}

void ParkingSpace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingSpace_parkingspace_2eproto.base);
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(source_));
}

ParkingSpace::~ParkingSpace() {
  // @@protoc_insertion_point(destructor:perception.ParkingSpace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParkingSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParkingSpace::ArenaDtor(void* object) {
  ParkingSpace* _this = reinterpret_cast< ParkingSpace* >(object);
  (void)_this;
}
void ParkingSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParkingSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingSpace& ParkingSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingSpace_parkingspace_2eproto.base);
  return *internal_default_instance();
}


void ParkingSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.ParkingSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parkslots_.Clear();
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perception.ParkingSlot parkslots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parkslots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.DataSource source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::minieye::DataSource>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.ParkingSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perception.ParkingSlot parkslots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parkslots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_parkslots(i), target, stream);
  }

  // uint64 frame_id = 2;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // uint64 tick = 4;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_tick(), target);
  }

  // .minieye.DataSource source = 5;
  if (this->source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.ParkingSpace)
  return target;
}

size_t ParkingSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.ParkingSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.ParkingSlot parkslots = 1;
  total_size += 1UL * this->_internal_parkslots_size();
  for (const auto& msg : this->parkslots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 frame_id = 2;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 4;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // .minieye.DataSource source = 5;
  if (this->source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.ParkingSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.ParkingSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.ParkingSpace)
    MergeFrom(*source);
  }
}

void ParkingSpace::MergeFrom(const ParkingSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.ParkingSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parkslots_.MergeFrom(from.parkslots_);
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.source() != 0) {
    _internal_set_source(from._internal_source());
  }
}

void ParkingSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.ParkingSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSpace::CopyFrom(const ParkingSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.ParkingSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSpace::IsInitialized() const {
  return true;
}

void ParkingSpace::InternalSwap(ParkingSpace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parkslots_.InternalSwap(&other->parkslots_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParkingSpace, source_)
      + sizeof(ParkingSpace::source_)
      - PROTOBUF_FIELD_OFFSET(ParkingSpace, frame_id_)>(
          reinterpret_cast<char*>(&frame_id_),
          reinterpret_cast<char*>(&other->frame_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perception::CornerPt* Arena::CreateMaybeMessage< ::perception::CornerPt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::CornerPt >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::RodPt* Arena::CreateMaybeMessage< ::perception::RodPt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::RodPt >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::ParkingSlot* Arena::CreateMaybeMessage< ::perception::ParkingSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::ParkingSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::ParkingSpace* Arena::CreateMaybeMessage< ::perception::ParkingSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::ParkingSpace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
