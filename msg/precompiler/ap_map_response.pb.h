// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_map_response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ap_5fmap_5fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ap_5fmap_5fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ap_5fmap_5fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ap_5fmap_5fresponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fmap_5fresponse_2eproto;
namespace minieye {
namespace parking {
class ApMapResponse;
class ApMapResponseDefaultTypeInternal;
extern ApMapResponseDefaultTypeInternal _ApMapResponse_default_instance_;
class ApMapResponse_Pose;
class ApMapResponse_PoseDefaultTypeInternal;
extern ApMapResponse_PoseDefaultTypeInternal _ApMapResponse_Pose_default_instance_;
}  // namespace parking
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::parking::ApMapResponse* Arena::CreateMaybeMessage<::minieye::parking::ApMapResponse>(Arena*);
template<> ::minieye::parking::ApMapResponse_Pose* Arena::CreateMaybeMessage<::minieye::parking::ApMapResponse_Pose>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {
namespace parking {

enum ApMapResponse_ApResponseType : int {
  ApMapResponse_ApResponseType_kChooseMap = 0,
  ApMapResponse_ApResponseType_kParkingMappingReadyToMapping = 1,
  ApMapResponse_ApResponseType_kParkingMapping = 2,
  ApMapResponse_ApResponseType_kParkingMappingDone = 3,
  ApMapResponse_ApResponseType_kParkingMappingFailed = 4,
  ApMapResponse_ApResponseType_kParkingLocalizationReadyToMapping = 5,
  ApMapResponse_ApResponseType_kParkingLocalizationReadyToLocalization = 6,
  ApMapResponse_ApResponseType_kParkingLocalization = 7,
  ApMapResponse_ApResponseType_kParkingLocalizationOutOfMap = 11,
  ApMapResponse_ApResponseType_kParkingLocalizationDone = 8,
  ApMapResponse_ApResponseType_kParkingLocalizationFailed = 9,
  ApMapResponse_ApResponseType_kBackToGround = 10,
  ApMapResponse_ApResponseType_ApMapResponse_ApResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ApMapResponse_ApResponseType_ApMapResponse_ApResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ApMapResponse_ApResponseType_IsValid(int value);
constexpr ApMapResponse_ApResponseType ApMapResponse_ApResponseType_ApResponseType_MIN = ApMapResponse_ApResponseType_kChooseMap;
constexpr ApMapResponse_ApResponseType ApMapResponse_ApResponseType_ApResponseType_MAX = ApMapResponse_ApResponseType_kParkingLocalizationOutOfMap;
constexpr int ApMapResponse_ApResponseType_ApResponseType_ARRAYSIZE = ApMapResponse_ApResponseType_ApResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApMapResponse_ApResponseType_descriptor();
template<typename T>
inline const std::string& ApMapResponse_ApResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApMapResponse_ApResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApMapResponse_ApResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApMapResponse_ApResponseType_descriptor(), enum_t_value);
}
inline bool ApMapResponse_ApResponseType_Parse(
    const std::string& name, ApMapResponse_ApResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApMapResponse_ApResponseType>(
    ApMapResponse_ApResponseType_descriptor(), name, value);
}
enum ApMapResponse_FailReason : int {
  ApMapResponse_FailReason_kNotFail = 0,
  ApMapResponse_FailReason_kBackwardTooFar = 1,
  ApMapResponse_FailReason_kSpeeding = 2,
  ApMapResponse_FailReason_ApMapResponse_FailReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ApMapResponse_FailReason_ApMapResponse_FailReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ApMapResponse_FailReason_IsValid(int value);
constexpr ApMapResponse_FailReason ApMapResponse_FailReason_FailReason_MIN = ApMapResponse_FailReason_kNotFail;
constexpr ApMapResponse_FailReason ApMapResponse_FailReason_FailReason_MAX = ApMapResponse_FailReason_kSpeeding;
constexpr int ApMapResponse_FailReason_FailReason_ARRAYSIZE = ApMapResponse_FailReason_FailReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApMapResponse_FailReason_descriptor();
template<typename T>
inline const std::string& ApMapResponse_FailReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApMapResponse_FailReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApMapResponse_FailReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApMapResponse_FailReason_descriptor(), enum_t_value);
}
inline bool ApMapResponse_FailReason_Parse(
    const std::string& name, ApMapResponse_FailReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApMapResponse_FailReason>(
    ApMapResponse_FailReason_descriptor(), name, value);
}
// ===================================================================

class ApMapResponse_Pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ApMapResponse.Pose) */ {
 public:
  inline ApMapResponse_Pose() : ApMapResponse_Pose(nullptr) {};
  virtual ~ApMapResponse_Pose();

  ApMapResponse_Pose(const ApMapResponse_Pose& from);
  ApMapResponse_Pose(ApMapResponse_Pose&& from) noexcept
    : ApMapResponse_Pose() {
    *this = ::std::move(from);
  }

  inline ApMapResponse_Pose& operator=(const ApMapResponse_Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApMapResponse_Pose& operator=(ApMapResponse_Pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApMapResponse_Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApMapResponse_Pose* internal_default_instance() {
    return reinterpret_cast<const ApMapResponse_Pose*>(
               &_ApMapResponse_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApMapResponse_Pose& a, ApMapResponse_Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(ApMapResponse_Pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApMapResponse_Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApMapResponse_Pose* New() const final {
    return CreateMaybeMessage<ApMapResponse_Pose>(nullptr);
  }

  ApMapResponse_Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApMapResponse_Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApMapResponse_Pose& from);
  void MergeFrom(const ApMapResponse_Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApMapResponse_Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ApMapResponse.Pose";
  }
  protected:
  explicit ApMapResponse_Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fmap_5fresponse_2eproto);
    return ::descriptor_table_ap_5fmap_5fresponse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kQwFieldNumber = 4,
    kQxFieldNumber = 5,
    kQyFieldNumber = 6,
    kQzFieldNumber = 7,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double qw = 4;
  void clear_qw();
  double qw() const;
  void set_qw(double value);
  private:
  double _internal_qw() const;
  void _internal_set_qw(double value);
  public:

  // double qx = 5;
  void clear_qx();
  double qx() const;
  void set_qx(double value);
  private:
  double _internal_qx() const;
  void _internal_set_qx(double value);
  public:

  // double qy = 6;
  void clear_qy();
  double qy() const;
  void set_qy(double value);
  private:
  double _internal_qy() const;
  void _internal_set_qy(double value);
  public:

  // double qz = 7;
  void clear_qz();
  double qz() const;
  void set_qz(double value);
  private:
  double _internal_qz() const;
  void _internal_set_qz(double value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ApMapResponse.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double qw_;
  double qx_;
  double qy_;
  double qz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ap_5fmap_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class ApMapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ApMapResponse) */ {
 public:
  inline ApMapResponse() : ApMapResponse(nullptr) {};
  virtual ~ApMapResponse();

  ApMapResponse(const ApMapResponse& from);
  ApMapResponse(ApMapResponse&& from) noexcept
    : ApMapResponse() {
    *this = ::std::move(from);
  }

  inline ApMapResponse& operator=(const ApMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApMapResponse& operator=(ApMapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApMapResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApMapResponse* internal_default_instance() {
    return reinterpret_cast<const ApMapResponse*>(
               &_ApMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ApMapResponse& a, ApMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ApMapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApMapResponse* New() const final {
    return CreateMaybeMessage<ApMapResponse>(nullptr);
  }

  ApMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApMapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApMapResponse& from);
  void MergeFrom(const ApMapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApMapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ApMapResponse";
  }
  protected:
  explicit ApMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fmap_5fresponse_2eproto);
    return ::descriptor_table_ap_5fmap_5fresponse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ApMapResponse_Pose Pose;

  typedef ApMapResponse_ApResponseType ApResponseType;
  static constexpr ApResponseType kChooseMap =
    ApMapResponse_ApResponseType_kChooseMap;
  static constexpr ApResponseType kParkingMappingReadyToMapping =
    ApMapResponse_ApResponseType_kParkingMappingReadyToMapping;
  static constexpr ApResponseType kParkingMapping =
    ApMapResponse_ApResponseType_kParkingMapping;
  static constexpr ApResponseType kParkingMappingDone =
    ApMapResponse_ApResponseType_kParkingMappingDone;
  static constexpr ApResponseType kParkingMappingFailed =
    ApMapResponse_ApResponseType_kParkingMappingFailed;
  static constexpr ApResponseType kParkingLocalizationReadyToMapping =
    ApMapResponse_ApResponseType_kParkingLocalizationReadyToMapping;
  static constexpr ApResponseType kParkingLocalizationReadyToLocalization =
    ApMapResponse_ApResponseType_kParkingLocalizationReadyToLocalization;
  static constexpr ApResponseType kParkingLocalization =
    ApMapResponse_ApResponseType_kParkingLocalization;
  static constexpr ApResponseType kParkingLocalizationOutOfMap =
    ApMapResponse_ApResponseType_kParkingLocalizationOutOfMap;
  static constexpr ApResponseType kParkingLocalizationDone =
    ApMapResponse_ApResponseType_kParkingLocalizationDone;
  static constexpr ApResponseType kParkingLocalizationFailed =
    ApMapResponse_ApResponseType_kParkingLocalizationFailed;
  static constexpr ApResponseType kBackToGround =
    ApMapResponse_ApResponseType_kBackToGround;
  static inline bool ApResponseType_IsValid(int value) {
    return ApMapResponse_ApResponseType_IsValid(value);
  }
  static constexpr ApResponseType ApResponseType_MIN =
    ApMapResponse_ApResponseType_ApResponseType_MIN;
  static constexpr ApResponseType ApResponseType_MAX =
    ApMapResponse_ApResponseType_ApResponseType_MAX;
  static constexpr int ApResponseType_ARRAYSIZE =
    ApMapResponse_ApResponseType_ApResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ApResponseType_descriptor() {
    return ApMapResponse_ApResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ApResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ApResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ApResponseType_Name.");
    return ApMapResponse_ApResponseType_Name(enum_t_value);
  }
  static inline bool ApResponseType_Parse(const std::string& name,
      ApResponseType* value) {
    return ApMapResponse_ApResponseType_Parse(name, value);
  }

  typedef ApMapResponse_FailReason FailReason;
  static constexpr FailReason kNotFail =
    ApMapResponse_FailReason_kNotFail;
  static constexpr FailReason kBackwardTooFar =
    ApMapResponse_FailReason_kBackwardTooFar;
  static constexpr FailReason kSpeeding =
    ApMapResponse_FailReason_kSpeeding;
  static inline bool FailReason_IsValid(int value) {
    return ApMapResponse_FailReason_IsValid(value);
  }
  static constexpr FailReason FailReason_MIN =
    ApMapResponse_FailReason_FailReason_MIN;
  static constexpr FailReason FailReason_MAX =
    ApMapResponse_FailReason_FailReason_MAX;
  static constexpr int FailReason_ARRAYSIZE =
    ApMapResponse_FailReason_FailReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FailReason_descriptor() {
    return ApMapResponse_FailReason_descriptor();
  }
  template<typename T>
  static inline const std::string& FailReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FailReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FailReason_Name.");
    return ApMapResponse_FailReason_Name(enum_t_value);
  }
  static inline bool FailReason_Parse(const std::string& name,
      FailReason* value) {
    return ApMapResponse_FailReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNearestApMapFieldNumber = 7,
    kApEnuToRtOdomFieldNumber = 4,
    kCurrOdomFieldNumber = 6,
    kTimestampFieldNumber = 1,
    kTickFieldNumber = 2,
    kFrameIdFieldNumber = 3,
    kApResponseTypeFieldNumber = 8,
    kLocalizationAccuracyFieldNumber = 10,
    kSFieldNumber = 12,
    kFailResonFieldNumber = 11,
    kCurrentApMapJointIdFieldNumber = 13,
  };
  // string nearest_ap_map = 7;
  void clear_nearest_ap_map();
  const std::string& nearest_ap_map() const;
  void set_nearest_ap_map(const std::string& value);
  void set_nearest_ap_map(std::string&& value);
  void set_nearest_ap_map(const char* value);
  void set_nearest_ap_map(const char* value, size_t size);
  std::string* mutable_nearest_ap_map();
  std::string* release_nearest_ap_map();
  void set_allocated_nearest_ap_map(std::string* nearest_ap_map);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nearest_ap_map();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nearest_ap_map(
      std::string* nearest_ap_map);
  private:
  const std::string& _internal_nearest_ap_map() const;
  void _internal_set_nearest_ap_map(const std::string& value);
  std::string* _internal_mutable_nearest_ap_map();
  public:

  // .minieye.parking.ApMapResponse.Pose ap_enu_to_rt_odom = 4;
  bool has_ap_enu_to_rt_odom() const;
  private:
  bool _internal_has_ap_enu_to_rt_odom() const;
  public:
  void clear_ap_enu_to_rt_odom();
  const ::minieye::parking::ApMapResponse_Pose& ap_enu_to_rt_odom() const;
  ::minieye::parking::ApMapResponse_Pose* release_ap_enu_to_rt_odom();
  ::minieye::parking::ApMapResponse_Pose* mutable_ap_enu_to_rt_odom();
  void set_allocated_ap_enu_to_rt_odom(::minieye::parking::ApMapResponse_Pose* ap_enu_to_rt_odom);
  private:
  const ::minieye::parking::ApMapResponse_Pose& _internal_ap_enu_to_rt_odom() const;
  ::minieye::parking::ApMapResponse_Pose* _internal_mutable_ap_enu_to_rt_odom();
  public:
  void unsafe_arena_set_allocated_ap_enu_to_rt_odom(
      ::minieye::parking::ApMapResponse_Pose* ap_enu_to_rt_odom);
  ::minieye::parking::ApMapResponse_Pose* unsafe_arena_release_ap_enu_to_rt_odom();

  // .minieye.parking.ApMapResponse.Pose curr_odom = 6;
  bool has_curr_odom() const;
  private:
  bool _internal_has_curr_odom() const;
  public:
  void clear_curr_odom();
  const ::minieye::parking::ApMapResponse_Pose& curr_odom() const;
  ::minieye::parking::ApMapResponse_Pose* release_curr_odom();
  ::minieye::parking::ApMapResponse_Pose* mutable_curr_odom();
  void set_allocated_curr_odom(::minieye::parking::ApMapResponse_Pose* curr_odom);
  private:
  const ::minieye::parking::ApMapResponse_Pose& _internal_curr_odom() const;
  ::minieye::parking::ApMapResponse_Pose* _internal_mutable_curr_odom();
  public:
  void unsafe_arena_set_allocated_curr_odom(
      ::minieye::parking::ApMapResponse_Pose* curr_odom);
  ::minieye::parking::ApMapResponse_Pose* unsafe_arena_release_curr_odom();

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 2;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 frame_id = 3;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .minieye.parking.ApMapResponse.ApResponseType ap_response_type = 8;
  void clear_ap_response_type();
  ::minieye::parking::ApMapResponse_ApResponseType ap_response_type() const;
  void set_ap_response_type(::minieye::parking::ApMapResponse_ApResponseType value);
  private:
  ::minieye::parking::ApMapResponse_ApResponseType _internal_ap_response_type() const;
  void _internal_set_ap_response_type(::minieye::parking::ApMapResponse_ApResponseType value);
  public:

  // float localization_accuracy = 10;
  void clear_localization_accuracy();
  float localization_accuracy() const;
  void set_localization_accuracy(float value);
  private:
  float _internal_localization_accuracy() const;
  void _internal_set_localization_accuracy(float value);
  public:

  // double s = 12;
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // .minieye.parking.ApMapResponse.FailReason fail_reson = 11;
  void clear_fail_reson();
  ::minieye::parking::ApMapResponse_FailReason fail_reson() const;
  void set_fail_reson(::minieye::parking::ApMapResponse_FailReason value);
  private:
  ::minieye::parking::ApMapResponse_FailReason _internal_fail_reson() const;
  void _internal_set_fail_reson(::minieye::parking::ApMapResponse_FailReason value);
  public:

  // int64 current_ap_map_joint_id = 13;
  void clear_current_ap_map_joint_id();
  ::PROTOBUF_NAMESPACE_ID::int64 current_ap_map_joint_id() const;
  void set_current_ap_map_joint_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_current_ap_map_joint_id() const;
  void _internal_set_current_ap_map_joint_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ApMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nearest_ap_map_;
  ::minieye::parking::ApMapResponse_Pose* ap_enu_to_rt_odom_;
  ::minieye::parking::ApMapResponse_Pose* curr_odom_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  int ap_response_type_;
  float localization_accuracy_;
  double s_;
  int fail_reson_;
  ::PROTOBUF_NAMESPACE_ID::int64 current_ap_map_joint_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ap_5fmap_5fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ApMapResponse_Pose

// double x = 1;
inline void ApMapResponse_Pose::clear_x() {
  x_ = 0;
}
inline double ApMapResponse_Pose::_internal_x() const {
  return x_;
}
inline double ApMapResponse_Pose::x() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.Pose.x)
  return _internal_x();
}
inline void ApMapResponse_Pose::_internal_set_x(double value) {
  
  x_ = value;
}
inline void ApMapResponse_Pose::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.Pose.x)
}

// double y = 2;
inline void ApMapResponse_Pose::clear_y() {
  y_ = 0;
}
inline double ApMapResponse_Pose::_internal_y() const {
  return y_;
}
inline double ApMapResponse_Pose::y() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.Pose.y)
  return _internal_y();
}
inline void ApMapResponse_Pose::_internal_set_y(double value) {
  
  y_ = value;
}
inline void ApMapResponse_Pose::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.Pose.y)
}

// double z = 3;
inline void ApMapResponse_Pose::clear_z() {
  z_ = 0;
}
inline double ApMapResponse_Pose::_internal_z() const {
  return z_;
}
inline double ApMapResponse_Pose::z() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.Pose.z)
  return _internal_z();
}
inline void ApMapResponse_Pose::_internal_set_z(double value) {
  
  z_ = value;
}
inline void ApMapResponse_Pose::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.Pose.z)
}

// double qw = 4;
inline void ApMapResponse_Pose::clear_qw() {
  qw_ = 0;
}
inline double ApMapResponse_Pose::_internal_qw() const {
  return qw_;
}
inline double ApMapResponse_Pose::qw() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.Pose.qw)
  return _internal_qw();
}
inline void ApMapResponse_Pose::_internal_set_qw(double value) {
  
  qw_ = value;
}
inline void ApMapResponse_Pose::set_qw(double value) {
  _internal_set_qw(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.Pose.qw)
}

// double qx = 5;
inline void ApMapResponse_Pose::clear_qx() {
  qx_ = 0;
}
inline double ApMapResponse_Pose::_internal_qx() const {
  return qx_;
}
inline double ApMapResponse_Pose::qx() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.Pose.qx)
  return _internal_qx();
}
inline void ApMapResponse_Pose::_internal_set_qx(double value) {
  
  qx_ = value;
}
inline void ApMapResponse_Pose::set_qx(double value) {
  _internal_set_qx(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.Pose.qx)
}

// double qy = 6;
inline void ApMapResponse_Pose::clear_qy() {
  qy_ = 0;
}
inline double ApMapResponse_Pose::_internal_qy() const {
  return qy_;
}
inline double ApMapResponse_Pose::qy() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.Pose.qy)
  return _internal_qy();
}
inline void ApMapResponse_Pose::_internal_set_qy(double value) {
  
  qy_ = value;
}
inline void ApMapResponse_Pose::set_qy(double value) {
  _internal_set_qy(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.Pose.qy)
}

// double qz = 7;
inline void ApMapResponse_Pose::clear_qz() {
  qz_ = 0;
}
inline double ApMapResponse_Pose::_internal_qz() const {
  return qz_;
}
inline double ApMapResponse_Pose::qz() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.Pose.qz)
  return _internal_qz();
}
inline void ApMapResponse_Pose::_internal_set_qz(double value) {
  
  qz_ = value;
}
inline void ApMapResponse_Pose::set_qz(double value) {
  _internal_set_qz(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.Pose.qz)
}

// -------------------------------------------------------------------

// ApMapResponse

// uint64 timestamp = 1;
inline void ApMapResponse::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApMapResponse::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApMapResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.timestamp)
  return _internal_timestamp();
}
inline void ApMapResponse::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ApMapResponse::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.timestamp)
}

// uint64 tick = 2;
inline void ApMapResponse::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApMapResponse::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApMapResponse::tick() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.tick)
  return _internal_tick();
}
inline void ApMapResponse::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void ApMapResponse::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.tick)
}

// uint64 frame_id = 3;
inline void ApMapResponse::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApMapResponse::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApMapResponse::frame_id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.frame_id)
  return _internal_frame_id();
}
inline void ApMapResponse::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void ApMapResponse::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.frame_id)
}

// .minieye.parking.ApMapResponse.Pose ap_enu_to_rt_odom = 4;
inline bool ApMapResponse::_internal_has_ap_enu_to_rt_odom() const {
  return this != internal_default_instance() && ap_enu_to_rt_odom_ != nullptr;
}
inline bool ApMapResponse::has_ap_enu_to_rt_odom() const {
  return _internal_has_ap_enu_to_rt_odom();
}
inline void ApMapResponse::clear_ap_enu_to_rt_odom() {
  if (GetArena() == nullptr && ap_enu_to_rt_odom_ != nullptr) {
    delete ap_enu_to_rt_odom_;
  }
  ap_enu_to_rt_odom_ = nullptr;
}
inline const ::minieye::parking::ApMapResponse_Pose& ApMapResponse::_internal_ap_enu_to_rt_odom() const {
  const ::minieye::parking::ApMapResponse_Pose* p = ap_enu_to_rt_odom_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::ApMapResponse_Pose*>(
      &::minieye::parking::_ApMapResponse_Pose_default_instance_);
}
inline const ::minieye::parking::ApMapResponse_Pose& ApMapResponse::ap_enu_to_rt_odom() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.ap_enu_to_rt_odom)
  return _internal_ap_enu_to_rt_odom();
}
inline void ApMapResponse::unsafe_arena_set_allocated_ap_enu_to_rt_odom(
    ::minieye::parking::ApMapResponse_Pose* ap_enu_to_rt_odom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ap_enu_to_rt_odom_);
  }
  ap_enu_to_rt_odom_ = ap_enu_to_rt_odom;
  if (ap_enu_to_rt_odom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ApMapResponse.ap_enu_to_rt_odom)
}
inline ::minieye::parking::ApMapResponse_Pose* ApMapResponse::release_ap_enu_to_rt_odom() {
  auto temp = unsafe_arena_release_ap_enu_to_rt_odom();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::ApMapResponse_Pose* ApMapResponse::unsafe_arena_release_ap_enu_to_rt_odom() {
  // @@protoc_insertion_point(field_release:minieye.parking.ApMapResponse.ap_enu_to_rt_odom)
  
  ::minieye::parking::ApMapResponse_Pose* temp = ap_enu_to_rt_odom_;
  ap_enu_to_rt_odom_ = nullptr;
  return temp;
}
inline ::minieye::parking::ApMapResponse_Pose* ApMapResponse::_internal_mutable_ap_enu_to_rt_odom() {
  
  if (ap_enu_to_rt_odom_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::ApMapResponse_Pose>(GetArena());
    ap_enu_to_rt_odom_ = p;
  }
  return ap_enu_to_rt_odom_;
}
inline ::minieye::parking::ApMapResponse_Pose* ApMapResponse::mutable_ap_enu_to_rt_odom() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ApMapResponse.ap_enu_to_rt_odom)
  return _internal_mutable_ap_enu_to_rt_odom();
}
inline void ApMapResponse::set_allocated_ap_enu_to_rt_odom(::minieye::parking::ApMapResponse_Pose* ap_enu_to_rt_odom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ap_enu_to_rt_odom_;
  }
  if (ap_enu_to_rt_odom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ap_enu_to_rt_odom);
    if (message_arena != submessage_arena) {
      ap_enu_to_rt_odom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ap_enu_to_rt_odom, submessage_arena);
    }
    
  } else {
    
  }
  ap_enu_to_rt_odom_ = ap_enu_to_rt_odom;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ApMapResponse.ap_enu_to_rt_odom)
}

// .minieye.parking.ApMapResponse.Pose curr_odom = 6;
inline bool ApMapResponse::_internal_has_curr_odom() const {
  return this != internal_default_instance() && curr_odom_ != nullptr;
}
inline bool ApMapResponse::has_curr_odom() const {
  return _internal_has_curr_odom();
}
inline void ApMapResponse::clear_curr_odom() {
  if (GetArena() == nullptr && curr_odom_ != nullptr) {
    delete curr_odom_;
  }
  curr_odom_ = nullptr;
}
inline const ::minieye::parking::ApMapResponse_Pose& ApMapResponse::_internal_curr_odom() const {
  const ::minieye::parking::ApMapResponse_Pose* p = curr_odom_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::ApMapResponse_Pose*>(
      &::minieye::parking::_ApMapResponse_Pose_default_instance_);
}
inline const ::minieye::parking::ApMapResponse_Pose& ApMapResponse::curr_odom() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.curr_odom)
  return _internal_curr_odom();
}
inline void ApMapResponse::unsafe_arena_set_allocated_curr_odom(
    ::minieye::parking::ApMapResponse_Pose* curr_odom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(curr_odom_);
  }
  curr_odom_ = curr_odom;
  if (curr_odom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ApMapResponse.curr_odom)
}
inline ::minieye::parking::ApMapResponse_Pose* ApMapResponse::release_curr_odom() {
  auto temp = unsafe_arena_release_curr_odom();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::ApMapResponse_Pose* ApMapResponse::unsafe_arena_release_curr_odom() {
  // @@protoc_insertion_point(field_release:minieye.parking.ApMapResponse.curr_odom)
  
  ::minieye::parking::ApMapResponse_Pose* temp = curr_odom_;
  curr_odom_ = nullptr;
  return temp;
}
inline ::minieye::parking::ApMapResponse_Pose* ApMapResponse::_internal_mutable_curr_odom() {
  
  if (curr_odom_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::ApMapResponse_Pose>(GetArena());
    curr_odom_ = p;
  }
  return curr_odom_;
}
inline ::minieye::parking::ApMapResponse_Pose* ApMapResponse::mutable_curr_odom() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ApMapResponse.curr_odom)
  return _internal_mutable_curr_odom();
}
inline void ApMapResponse::set_allocated_curr_odom(::minieye::parking::ApMapResponse_Pose* curr_odom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete curr_odom_;
  }
  if (curr_odom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(curr_odom);
    if (message_arena != submessage_arena) {
      curr_odom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curr_odom, submessage_arena);
    }
    
  } else {
    
  }
  curr_odom_ = curr_odom;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ApMapResponse.curr_odom)
}

// string nearest_ap_map = 7;
inline void ApMapResponse::clear_nearest_ap_map() {
  nearest_ap_map_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApMapResponse::nearest_ap_map() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.nearest_ap_map)
  return _internal_nearest_ap_map();
}
inline void ApMapResponse::set_nearest_ap_map(const std::string& value) {
  _internal_set_nearest_ap_map(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.nearest_ap_map)
}
inline std::string* ApMapResponse::mutable_nearest_ap_map() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ApMapResponse.nearest_ap_map)
  return _internal_mutable_nearest_ap_map();
}
inline const std::string& ApMapResponse::_internal_nearest_ap_map() const {
  return nearest_ap_map_.Get();
}
inline void ApMapResponse::_internal_set_nearest_ap_map(const std::string& value) {
  
  nearest_ap_map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApMapResponse::set_nearest_ap_map(std::string&& value) {
  
  nearest_ap_map_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minieye.parking.ApMapResponse.nearest_ap_map)
}
inline void ApMapResponse::set_nearest_ap_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nearest_ap_map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minieye.parking.ApMapResponse.nearest_ap_map)
}
inline void ApMapResponse::set_nearest_ap_map(const char* value,
    size_t size) {
  
  nearest_ap_map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minieye.parking.ApMapResponse.nearest_ap_map)
}
inline std::string* ApMapResponse::_internal_mutable_nearest_ap_map() {
  
  return nearest_ap_map_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApMapResponse::release_nearest_ap_map() {
  // @@protoc_insertion_point(field_release:minieye.parking.ApMapResponse.nearest_ap_map)
  return nearest_ap_map_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApMapResponse::set_allocated_nearest_ap_map(std::string* nearest_ap_map) {
  if (nearest_ap_map != nullptr) {
    
  } else {
    
  }
  nearest_ap_map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nearest_ap_map,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ApMapResponse.nearest_ap_map)
}
inline std::string* ApMapResponse::unsafe_arena_release_nearest_ap_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minieye.parking.ApMapResponse.nearest_ap_map)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nearest_ap_map_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ApMapResponse::unsafe_arena_set_allocated_nearest_ap_map(
    std::string* nearest_ap_map) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nearest_ap_map != nullptr) {
    
  } else {
    
  }
  nearest_ap_map_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nearest_ap_map, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ApMapResponse.nearest_ap_map)
}

// .minieye.parking.ApMapResponse.ApResponseType ap_response_type = 8;
inline void ApMapResponse::clear_ap_response_type() {
  ap_response_type_ = 0;
}
inline ::minieye::parking::ApMapResponse_ApResponseType ApMapResponse::_internal_ap_response_type() const {
  return static_cast< ::minieye::parking::ApMapResponse_ApResponseType >(ap_response_type_);
}
inline ::minieye::parking::ApMapResponse_ApResponseType ApMapResponse::ap_response_type() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.ap_response_type)
  return _internal_ap_response_type();
}
inline void ApMapResponse::_internal_set_ap_response_type(::minieye::parking::ApMapResponse_ApResponseType value) {
  
  ap_response_type_ = value;
}
inline void ApMapResponse::set_ap_response_type(::minieye::parking::ApMapResponse_ApResponseType value) {
  _internal_set_ap_response_type(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.ap_response_type)
}

// float localization_accuracy = 10;
inline void ApMapResponse::clear_localization_accuracy() {
  localization_accuracy_ = 0;
}
inline float ApMapResponse::_internal_localization_accuracy() const {
  return localization_accuracy_;
}
inline float ApMapResponse::localization_accuracy() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.localization_accuracy)
  return _internal_localization_accuracy();
}
inline void ApMapResponse::_internal_set_localization_accuracy(float value) {
  
  localization_accuracy_ = value;
}
inline void ApMapResponse::set_localization_accuracy(float value) {
  _internal_set_localization_accuracy(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.localization_accuracy)
}

// .minieye.parking.ApMapResponse.FailReason fail_reson = 11;
inline void ApMapResponse::clear_fail_reson() {
  fail_reson_ = 0;
}
inline ::minieye::parking::ApMapResponse_FailReason ApMapResponse::_internal_fail_reson() const {
  return static_cast< ::minieye::parking::ApMapResponse_FailReason >(fail_reson_);
}
inline ::minieye::parking::ApMapResponse_FailReason ApMapResponse::fail_reson() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.fail_reson)
  return _internal_fail_reson();
}
inline void ApMapResponse::_internal_set_fail_reson(::minieye::parking::ApMapResponse_FailReason value) {
  
  fail_reson_ = value;
}
inline void ApMapResponse::set_fail_reson(::minieye::parking::ApMapResponse_FailReason value) {
  _internal_set_fail_reson(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.fail_reson)
}

// double s = 12;
inline void ApMapResponse::clear_s() {
  s_ = 0;
}
inline double ApMapResponse::_internal_s() const {
  return s_;
}
inline double ApMapResponse::s() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.s)
  return _internal_s();
}
inline void ApMapResponse::_internal_set_s(double value) {
  
  s_ = value;
}
inline void ApMapResponse::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.s)
}

// int64 current_ap_map_joint_id = 13;
inline void ApMapResponse::clear_current_ap_map_joint_id() {
  current_ap_map_joint_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApMapResponse::_internal_current_ap_map_joint_id() const {
  return current_ap_map_joint_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApMapResponse::current_ap_map_joint_id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapResponse.current_ap_map_joint_id)
  return _internal_current_ap_map_joint_id();
}
inline void ApMapResponse::_internal_set_current_ap_map_joint_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  current_ap_map_joint_id_ = value;
}
inline void ApMapResponse::set_current_ap_map_joint_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_current_ap_map_joint_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapResponse.current_ap_map_joint_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace parking
}  // namespace minieye

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minieye::parking::ApMapResponse_ApResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::parking::ApMapResponse_ApResponseType>() {
  return ::minieye::parking::ApMapResponse_ApResponseType_descriptor();
}
template <> struct is_proto_enum< ::minieye::parking::ApMapResponse_FailReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::parking::ApMapResponse_FailReason>() {
  return ::minieye::parking::ApMapResponse_FailReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ap_5fmap_5fresponse_2eproto
