// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: haf_location.proto

#include "haf_location.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_haf_5flocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HafLocation_HafAccel_haf_5flocation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_haf_5flocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HafLocation_HafAccelWithCovariance_haf_5flocation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_haf_5flocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HafLocation_HafPose_haf_5flocation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_haf_5flocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HafLocation_HafPoseWithCovariance_haf_5flocation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_haf_5flocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HafLocation_HafTwist_haf_5flocation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_haf_5flocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HafLocation_HafTwistWithCovariance_haf_5flocation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_data_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HafQuaternion_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point3D_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point3f_geometry_2eproto;
namespace location {
class HafLocation_HafPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HafLocation_HafPose> _instance;
} _HafLocation_HafPose_default_instance_;
class HafLocation_HafPoseWithCovarianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HafLocation_HafPoseWithCovariance> _instance;
} _HafLocation_HafPoseWithCovariance_default_instance_;
class HafLocation_HafTwistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HafLocation_HafTwist> _instance;
} _HafLocation_HafTwist_default_instance_;
class HafLocation_HafTwistWithCovarianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HafLocation_HafTwistWithCovariance> _instance;
} _HafLocation_HafTwistWithCovariance_default_instance_;
class HafLocation_HafAccelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HafLocation_HafAccel> _instance;
} _HafLocation_HafAccel_default_instance_;
class HafLocation_HafAccelWithCovarianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HafLocation_HafAccelWithCovariance> _instance;
} _HafLocation_HafAccelWithCovariance_default_instance_;
class HafLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HafLocation> _instance;
} _HafLocation_default_instance_;
}  // namespace location
static void InitDefaultsscc_info_HafLocation_haf_5flocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::location::_HafLocation_default_instance_;
    new (ptr) ::location::HafLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::location::HafLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_HafLocation_haf_5flocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_HafLocation_haf_5flocation_2eproto}, {
      &scc_info_Header_data_5fheader_2eproto.base,
      &scc_info_HafLocation_HafPoseWithCovariance_haf_5flocation_2eproto.base,
      &scc_info_HafLocation_HafTwistWithCovariance_haf_5flocation_2eproto.base,
      &scc_info_HafLocation_HafAccelWithCovariance_haf_5flocation_2eproto.base,
      &scc_info_Point3f_geometry_2eproto.base,}};

static void InitDefaultsscc_info_HafLocation_HafAccel_haf_5flocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::location::_HafLocation_HafAccel_default_instance_;
    new (ptr) ::location::HafLocation_HafAccel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::location::HafLocation_HafAccel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HafLocation_HafAccel_haf_5flocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HafLocation_HafAccel_haf_5flocation_2eproto}, {
      &scc_info_Point3f_geometry_2eproto.base,}};

static void InitDefaultsscc_info_HafLocation_HafAccelWithCovariance_haf_5flocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::location::_HafLocation_HafAccelWithCovariance_default_instance_;
    new (ptr) ::location::HafLocation_HafAccelWithCovariance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::location::HafLocation_HafAccelWithCovariance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HafLocation_HafAccelWithCovariance_haf_5flocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HafLocation_HafAccelWithCovariance_haf_5flocation_2eproto}, {
      &scc_info_HafLocation_HafAccel_haf_5flocation_2eproto.base,}};

static void InitDefaultsscc_info_HafLocation_HafPose_haf_5flocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::location::_HafLocation_HafPose_default_instance_;
    new (ptr) ::location::HafLocation_HafPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::location::HafLocation_HafPose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HafLocation_HafPose_haf_5flocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_HafLocation_HafPose_haf_5flocation_2eproto}, {
      &scc_info_Point3D_geometry_2eproto.base,
      &scc_info_HafQuaternion_geometry_2eproto.base,
      &scc_info_Point3f_geometry_2eproto.base,}};

static void InitDefaultsscc_info_HafLocation_HafPoseWithCovariance_haf_5flocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::location::_HafLocation_HafPoseWithCovariance_default_instance_;
    new (ptr) ::location::HafLocation_HafPoseWithCovariance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::location::HafLocation_HafPoseWithCovariance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HafLocation_HafPoseWithCovariance_haf_5flocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HafLocation_HafPoseWithCovariance_haf_5flocation_2eproto}, {
      &scc_info_HafLocation_HafPose_haf_5flocation_2eproto.base,}};

static void InitDefaultsscc_info_HafLocation_HafTwist_haf_5flocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::location::_HafLocation_HafTwist_default_instance_;
    new (ptr) ::location::HafLocation_HafTwist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::location::HafLocation_HafTwist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HafLocation_HafTwist_haf_5flocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HafLocation_HafTwist_haf_5flocation_2eproto}, {
      &scc_info_Point3f_geometry_2eproto.base,}};

static void InitDefaultsscc_info_HafLocation_HafTwistWithCovariance_haf_5flocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::location::_HafLocation_HafTwistWithCovariance_default_instance_;
    new (ptr) ::location::HafLocation_HafTwistWithCovariance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::location::HafLocation_HafTwistWithCovariance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HafLocation_HafTwistWithCovariance_haf_5flocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HafLocation_HafTwistWithCovariance_haf_5flocation_2eproto}, {
      &scc_info_HafLocation_HafTwist_haf_5flocation_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_haf_5flocation_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_haf_5flocation_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_haf_5flocation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_haf_5flocation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPose, position_wgs84_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPose, quaternion_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPose, euler_angle_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPose, rotation_vrf_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPose, heading_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPoseWithCovariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPoseWithCovariance, pose_wgs_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPoseWithCovariance, pose_local_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPoseWithCovariance, pose_gcj02_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPoseWithCovariance, covariance_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPoseWithCovariance, pose_utm_01_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPoseWithCovariance, pose_utm_02_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPoseWithCovariance, utm_zone_id_01_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafPoseWithCovariance, utm_zone_id_02_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafTwist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafTwist, linear_vrf_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafTwist, angular_vrf_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafTwist, angular_raw_vrf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafTwistWithCovariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafTwistWithCovariance, twist_vrf_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafTwistWithCovariance, covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafAccel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafAccel, linear_vrf_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafAccel, angular_vrf_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafAccel, linear_raw_vrf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafAccelWithCovariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafAccelWithCovariance, linear_vrf_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation_HafAccelWithCovariance, covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::location::HafLocation, header_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation, is_valid_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation, gps_week_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation, gps_sec_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation, coordinate_type_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation, pose_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation, velocity_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation, acceleration_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation, rtk_status_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation, location_state_),
  PROTOBUF_FIELD_OFFSET(::location::HafLocation, mounting_error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::location::HafLocation_HafPose)},
  { 10, -1, sizeof(::location::HafLocation_HafPoseWithCovariance)},
  { 23, -1, sizeof(::location::HafLocation_HafTwist)},
  { 31, -1, sizeof(::location::HafLocation_HafTwistWithCovariance)},
  { 38, -1, sizeof(::location::HafLocation_HafAccel)},
  { 46, -1, sizeof(::location::HafLocation_HafAccelWithCovariance)},
  { 53, -1, sizeof(::location::HafLocation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::location::_HafLocation_HafPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::location::_HafLocation_HafPoseWithCovariance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::location::_HafLocation_HafTwist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::location::_HafLocation_HafTwistWithCovariance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::location::_HafLocation_HafAccel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::location::_HafLocation_HafAccelWithCovariance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::location::_HafLocation_default_instance_),
};

const char descriptor_table_protodef_haf_5flocation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022haf_location.proto\022\010location\032\021data_hea"
  "der.proto\032\016geometry.proto\"\267\014\n\013HafLocatio"
  "n\022\037\n\006header\030\001 \001(\0132\017.minieye.Header\022\020\n\010is"
  "_valid\030\002 \001(\010\022\020\n\010gps_week\030\003 \001(\r\022\017\n\007gps_se"
  "c\030\004 \001(\001\0228\n\017coordinate_type\030\005 \001(\0162\037.locat"
  "ion.HafLocation.CoordType\0229\n\004pose\030\006 \001(\0132"
  "+.location.HafLocation.HafPoseWithCovari"
  "ance\022>\n\010velocity\030\007 \001(\0132,.location.HafLoc"
  "ation.HafTwistWithCovariance\022B\n\014accelera"
  "tion\030\010 \001(\0132,.location.HafLocation.HafAcc"
  "elWithCovariance\022\022\n\nrtk_status\030\t \001(\r\022\026\n\016"
  "location_state\030\n \001(\r\0222\n\016mounting_error\030\013"
  " \001(\0132\032.perception.common.Point3f\032\347\001\n\007Haf"
  "Pose\0222\n\016position_wgs84\030\001 \001(\0132\032.perceptio"
  "n.common.Point3D\0224\n\nquaternion\030\002 \001(\0132 .p"
  "erception.common.HafQuaternion\022/\n\013euler_"
  "angle\030\003 \001(\0132\032.perception.common.Point3f\022"
  "0\n\014rotation_vrf\030\004 \001(\0132\032.perception.commo"
  "n.Point3f\022\017\n\007heading\030\005 \001(\002\032\332\002\n\025HafPoseWi"
  "thCovariance\022/\n\010pose_wgs\030\001 \001(\0132\035.locatio"
  "n.HafLocation.HafPose\0221\n\npose_local\030\002 \001("
  "\0132\035.location.HafLocation.HafPose\0221\n\npose"
  "_gcj02\030\003 \001(\0132\035.location.HafLocation.HafP"
  "ose\022\022\n\ncovariance\030\004 \003(\002\0222\n\013pose_utm_01\030\005"
  " \001(\0132\035.location.HafLocation.HafPose\0222\n\013p"
  "ose_utm_02\030\006 \001(\0132\035.location.HafLocation."
  "HafPose\022\026\n\016utm_zone_id_01\030\007 \001(\r\022\026\n\016utm_z"
  "one_id_02\030\010 \001(\r\032\240\001\n\010HafTwist\022.\n\nlinear_v"
  "rf\030\001 \001(\0132\032.perception.common.Point3f\022/\n\013"
  "angular_vrf\030\002 \001(\0132\032.perception.common.Po"
  "int3f\0223\n\017angular_raw_vrf\030\003 \001(\0132\032.percept"
  "ion.common.Point3f\032_\n\026HafTwistWithCovari"
  "ance\0221\n\ttwist_vrf\030\001 \001(\0132\036.location.HafLo"
  "cation.HafTwist\022\022\n\ncovariance\030\002 \003(\002\032\237\001\n\010"
  "HafAccel\022.\n\nlinear_vrf\030\001 \001(\0132\032.perceptio"
  "n.common.Point3f\022/\n\013angular_vrf\030\002 \001(\0132\032."
  "perception.common.Point3f\0222\n\016linear_raw_"
  "vrf\030\003 \001(\0132\032.perception.common.Point3f\032`\n"
  "\026HafAccelWithCovariance\0222\n\nlinear_vrf\030\001 "
  "\001(\0132\036.location.HafLocation.HafAccel\022\022\n\nc"
  "ovariance\030\002 \003(\002\"*\n\tCoordType\022\r\n\tENU_COOR"
  "D\020\000\022\016\n\nSLAM_COORD\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_haf_5flocation_2eproto_deps[2] = {
  &::descriptor_table_data_5fheader_2eproto,
  &::descriptor_table_geometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_haf_5flocation_2eproto_sccs[7] = {
  &scc_info_HafLocation_haf_5flocation_2eproto.base,
  &scc_info_HafLocation_HafAccel_haf_5flocation_2eproto.base,
  &scc_info_HafLocation_HafAccelWithCovariance_haf_5flocation_2eproto.base,
  &scc_info_HafLocation_HafPose_haf_5flocation_2eproto.base,
  &scc_info_HafLocation_HafPoseWithCovariance_haf_5flocation_2eproto.base,
  &scc_info_HafLocation_HafTwist_haf_5flocation_2eproto.base,
  &scc_info_HafLocation_HafTwistWithCovariance_haf_5flocation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_haf_5flocation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_haf_5flocation_2eproto = {
  false, false, descriptor_table_protodef_haf_5flocation_2eproto, "haf_location.proto", 1667,
  &descriptor_table_haf_5flocation_2eproto_once, descriptor_table_haf_5flocation_2eproto_sccs, descriptor_table_haf_5flocation_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_haf_5flocation_2eproto::offsets,
  file_level_metadata_haf_5flocation_2eproto, 7, file_level_enum_descriptors_haf_5flocation_2eproto, file_level_service_descriptors_haf_5flocation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_haf_5flocation_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_haf_5flocation_2eproto)), true);
namespace location {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HafLocation_CoordType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_haf_5flocation_2eproto);
  return file_level_enum_descriptors_haf_5flocation_2eproto[0];
}
bool HafLocation_CoordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HafLocation_CoordType HafLocation::ENU_COORD;
constexpr HafLocation_CoordType HafLocation::SLAM_COORD;
constexpr HafLocation_CoordType HafLocation::CoordType_MIN;
constexpr HafLocation_CoordType HafLocation::CoordType_MAX;
constexpr int HafLocation::CoordType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void HafLocation_HafPose::InitAsDefaultInstance() {
  ::location::_HafLocation_HafPose_default_instance_._instance.get_mutable()->position_wgs84_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::location::_HafLocation_HafPose_default_instance_._instance.get_mutable()->quaternion_ = const_cast< ::perception::common::HafQuaternion*>(
      ::perception::common::HafQuaternion::internal_default_instance());
  ::location::_HafLocation_HafPose_default_instance_._instance.get_mutable()->euler_angle_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
  ::location::_HafLocation_HafPose_default_instance_._instance.get_mutable()->rotation_vrf_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
}
class HafLocation_HafPose::_Internal {
 public:
  static const ::perception::common::Point3D& position_wgs84(const HafLocation_HafPose* msg);
  static const ::perception::common::HafQuaternion& quaternion(const HafLocation_HafPose* msg);
  static const ::perception::common::Point3f& euler_angle(const HafLocation_HafPose* msg);
  static const ::perception::common::Point3f& rotation_vrf(const HafLocation_HafPose* msg);
};

const ::perception::common::Point3D&
HafLocation_HafPose::_Internal::position_wgs84(const HafLocation_HafPose* msg) {
  return *msg->position_wgs84_;
}
const ::perception::common::HafQuaternion&
HafLocation_HafPose::_Internal::quaternion(const HafLocation_HafPose* msg) {
  return *msg->quaternion_;
}
const ::perception::common::Point3f&
HafLocation_HafPose::_Internal::euler_angle(const HafLocation_HafPose* msg) {
  return *msg->euler_angle_;
}
const ::perception::common::Point3f&
HafLocation_HafPose::_Internal::rotation_vrf(const HafLocation_HafPose* msg) {
  return *msg->rotation_vrf_;
}
void HafLocation_HafPose::clear_position_wgs84() {
  if (GetArena() == nullptr && position_wgs84_ != nullptr) {
    delete position_wgs84_;
  }
  position_wgs84_ = nullptr;
}
void HafLocation_HafPose::clear_quaternion() {
  if (GetArena() == nullptr && quaternion_ != nullptr) {
    delete quaternion_;
  }
  quaternion_ = nullptr;
}
void HafLocation_HafPose::clear_euler_angle() {
  if (GetArena() == nullptr && euler_angle_ != nullptr) {
    delete euler_angle_;
  }
  euler_angle_ = nullptr;
}
void HafLocation_HafPose::clear_rotation_vrf() {
  if (GetArena() == nullptr && rotation_vrf_ != nullptr) {
    delete rotation_vrf_;
  }
  rotation_vrf_ = nullptr;
}
HafLocation_HafPose::HafLocation_HafPose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:location.HafLocation.HafPose)
}
HafLocation_HafPose::HafLocation_HafPose(const HafLocation_HafPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_wgs84()) {
    position_wgs84_ = new ::perception::common::Point3D(*from.position_wgs84_);
  } else {
    position_wgs84_ = nullptr;
  }
  if (from._internal_has_quaternion()) {
    quaternion_ = new ::perception::common::HafQuaternion(*from.quaternion_);
  } else {
    quaternion_ = nullptr;
  }
  if (from._internal_has_euler_angle()) {
    euler_angle_ = new ::perception::common::Point3f(*from.euler_angle_);
  } else {
    euler_angle_ = nullptr;
  }
  if (from._internal_has_rotation_vrf()) {
    rotation_vrf_ = new ::perception::common::Point3f(*from.rotation_vrf_);
  } else {
    rotation_vrf_ = nullptr;
  }
  heading_ = from.heading_;
  // @@protoc_insertion_point(copy_constructor:location.HafLocation.HafPose)
}

void HafLocation_HafPose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HafLocation_HafPose_haf_5flocation_2eproto.base);
  ::memset(&position_wgs84_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&position_wgs84_)) + sizeof(heading_));
}

HafLocation_HafPose::~HafLocation_HafPose() {
  // @@protoc_insertion_point(destructor:location.HafLocation.HafPose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HafLocation_HafPose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_wgs84_;
  if (this != internal_default_instance()) delete quaternion_;
  if (this != internal_default_instance()) delete euler_angle_;
  if (this != internal_default_instance()) delete rotation_vrf_;
}

void HafLocation_HafPose::ArenaDtor(void* object) {
  HafLocation_HafPose* _this = reinterpret_cast< HafLocation_HafPose* >(object);
  (void)_this;
}
void HafLocation_HafPose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HafLocation_HafPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HafLocation_HafPose& HafLocation_HafPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HafLocation_HafPose_haf_5flocation_2eproto.base);
  return *internal_default_instance();
}


void HafLocation_HafPose::Clear() {
// @@protoc_insertion_point(message_clear_start:location.HafLocation.HafPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_wgs84_ != nullptr) {
    delete position_wgs84_;
  }
  position_wgs84_ = nullptr;
  if (GetArena() == nullptr && quaternion_ != nullptr) {
    delete quaternion_;
  }
  quaternion_ = nullptr;
  if (GetArena() == nullptr && euler_angle_ != nullptr) {
    delete euler_angle_;
  }
  euler_angle_ = nullptr;
  if (GetArena() == nullptr && rotation_vrf_ != nullptr) {
    delete rotation_vrf_;
  }
  rotation_vrf_ = nullptr;
  heading_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HafLocation_HafPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.Point3D position_wgs84 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_wgs84(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.HafQuaternion quaternion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quaternion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f euler_angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_euler_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f rotation_vrf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation_vrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HafLocation_HafPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.HafLocation.HafPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.Point3D position_wgs84 = 1;
  if (this->has_position_wgs84()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position_wgs84(this), target, stream);
  }

  // .perception.common.HafQuaternion quaternion = 2;
  if (this->has_quaternion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quaternion(this), target, stream);
  }

  // .perception.common.Point3f euler_angle = 3;
  if (this->has_euler_angle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::euler_angle(this), target, stream);
  }

  // .perception.common.Point3f rotation_vrf = 4;
  if (this->has_rotation_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rotation_vrf(this), target, stream);
  }

  // float heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.HafLocation.HafPose)
  return target;
}

size_t HafLocation_HafPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.HafLocation.HafPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Point3D position_wgs84 = 1;
  if (this->has_position_wgs84()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_wgs84_);
  }

  // .perception.common.HafQuaternion quaternion = 2;
  if (this->has_quaternion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quaternion_);
  }

  // .perception.common.Point3f euler_angle = 3;
  if (this->has_euler_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *euler_angle_);
  }

  // .perception.common.Point3f rotation_vrf = 4;
  if (this->has_rotation_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_vrf_);
  }

  // float heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HafLocation_HafPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:location.HafLocation.HafPose)
  GOOGLE_DCHECK_NE(&from, this);
  const HafLocation_HafPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HafLocation_HafPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:location.HafLocation.HafPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:location.HafLocation.HafPose)
    MergeFrom(*source);
  }
}

void HafLocation_HafPose::MergeFrom(const HafLocation_HafPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:location.HafLocation.HafPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_wgs84()) {
    _internal_mutable_position_wgs84()->::perception::common::Point3D::MergeFrom(from._internal_position_wgs84());
  }
  if (from.has_quaternion()) {
    _internal_mutable_quaternion()->::perception::common::HafQuaternion::MergeFrom(from._internal_quaternion());
  }
  if (from.has_euler_angle()) {
    _internal_mutable_euler_angle()->::perception::common::Point3f::MergeFrom(from._internal_euler_angle());
  }
  if (from.has_rotation_vrf()) {
    _internal_mutable_rotation_vrf()->::perception::common::Point3f::MergeFrom(from._internal_rotation_vrf());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
}

void HafLocation_HafPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:location.HafLocation.HafPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HafLocation_HafPose::CopyFrom(const HafLocation_HafPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.HafLocation.HafPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HafLocation_HafPose::IsInitialized() const {
  return true;
}

void HafLocation_HafPose::InternalSwap(HafLocation_HafPose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HafLocation_HafPose, heading_)
      + sizeof(HafLocation_HafPose::heading_)
      - PROTOBUF_FIELD_OFFSET(HafLocation_HafPose, position_wgs84_)>(
          reinterpret_cast<char*>(&position_wgs84_),
          reinterpret_cast<char*>(&other->position_wgs84_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HafLocation_HafPose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HafLocation_HafPoseWithCovariance::InitAsDefaultInstance() {
  ::location::_HafLocation_HafPoseWithCovariance_default_instance_._instance.get_mutable()->pose_wgs_ = const_cast< ::location::HafLocation_HafPose*>(
      ::location::HafLocation_HafPose::internal_default_instance());
  ::location::_HafLocation_HafPoseWithCovariance_default_instance_._instance.get_mutable()->pose_local_ = const_cast< ::location::HafLocation_HafPose*>(
      ::location::HafLocation_HafPose::internal_default_instance());
  ::location::_HafLocation_HafPoseWithCovariance_default_instance_._instance.get_mutable()->pose_gcj02_ = const_cast< ::location::HafLocation_HafPose*>(
      ::location::HafLocation_HafPose::internal_default_instance());
  ::location::_HafLocation_HafPoseWithCovariance_default_instance_._instance.get_mutable()->pose_utm_01_ = const_cast< ::location::HafLocation_HafPose*>(
      ::location::HafLocation_HafPose::internal_default_instance());
  ::location::_HafLocation_HafPoseWithCovariance_default_instance_._instance.get_mutable()->pose_utm_02_ = const_cast< ::location::HafLocation_HafPose*>(
      ::location::HafLocation_HafPose::internal_default_instance());
}
class HafLocation_HafPoseWithCovariance::_Internal {
 public:
  static const ::location::HafLocation_HafPose& pose_wgs(const HafLocation_HafPoseWithCovariance* msg);
  static const ::location::HafLocation_HafPose& pose_local(const HafLocation_HafPoseWithCovariance* msg);
  static const ::location::HafLocation_HafPose& pose_gcj02(const HafLocation_HafPoseWithCovariance* msg);
  static const ::location::HafLocation_HafPose& pose_utm_01(const HafLocation_HafPoseWithCovariance* msg);
  static const ::location::HafLocation_HafPose& pose_utm_02(const HafLocation_HafPoseWithCovariance* msg);
};

const ::location::HafLocation_HafPose&
HafLocation_HafPoseWithCovariance::_Internal::pose_wgs(const HafLocation_HafPoseWithCovariance* msg) {
  return *msg->pose_wgs_;
}
const ::location::HafLocation_HafPose&
HafLocation_HafPoseWithCovariance::_Internal::pose_local(const HafLocation_HafPoseWithCovariance* msg) {
  return *msg->pose_local_;
}
const ::location::HafLocation_HafPose&
HafLocation_HafPoseWithCovariance::_Internal::pose_gcj02(const HafLocation_HafPoseWithCovariance* msg) {
  return *msg->pose_gcj02_;
}
const ::location::HafLocation_HafPose&
HafLocation_HafPoseWithCovariance::_Internal::pose_utm_01(const HafLocation_HafPoseWithCovariance* msg) {
  return *msg->pose_utm_01_;
}
const ::location::HafLocation_HafPose&
HafLocation_HafPoseWithCovariance::_Internal::pose_utm_02(const HafLocation_HafPoseWithCovariance* msg) {
  return *msg->pose_utm_02_;
}
HafLocation_HafPoseWithCovariance::HafLocation_HafPoseWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  covariance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:location.HafLocation.HafPoseWithCovariance)
}
HafLocation_HafPoseWithCovariance::HafLocation_HafPoseWithCovariance(const HafLocation_HafPoseWithCovariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      covariance_(from.covariance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose_wgs()) {
    pose_wgs_ = new ::location::HafLocation_HafPose(*from.pose_wgs_);
  } else {
    pose_wgs_ = nullptr;
  }
  if (from._internal_has_pose_local()) {
    pose_local_ = new ::location::HafLocation_HafPose(*from.pose_local_);
  } else {
    pose_local_ = nullptr;
  }
  if (from._internal_has_pose_gcj02()) {
    pose_gcj02_ = new ::location::HafLocation_HafPose(*from.pose_gcj02_);
  } else {
    pose_gcj02_ = nullptr;
  }
  if (from._internal_has_pose_utm_01()) {
    pose_utm_01_ = new ::location::HafLocation_HafPose(*from.pose_utm_01_);
  } else {
    pose_utm_01_ = nullptr;
  }
  if (from._internal_has_pose_utm_02()) {
    pose_utm_02_ = new ::location::HafLocation_HafPose(*from.pose_utm_02_);
  } else {
    pose_utm_02_ = nullptr;
  }
  ::memcpy(&utm_zone_id_01_, &from.utm_zone_id_01_,
    static_cast<size_t>(reinterpret_cast<char*>(&utm_zone_id_02_) -
    reinterpret_cast<char*>(&utm_zone_id_01_)) + sizeof(utm_zone_id_02_));
  // @@protoc_insertion_point(copy_constructor:location.HafLocation.HafPoseWithCovariance)
}

void HafLocation_HafPoseWithCovariance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HafLocation_HafPoseWithCovariance_haf_5flocation_2eproto.base);
  ::memset(&pose_wgs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utm_zone_id_02_) -
      reinterpret_cast<char*>(&pose_wgs_)) + sizeof(utm_zone_id_02_));
}

HafLocation_HafPoseWithCovariance::~HafLocation_HafPoseWithCovariance() {
  // @@protoc_insertion_point(destructor:location.HafLocation.HafPoseWithCovariance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HafLocation_HafPoseWithCovariance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pose_wgs_;
  if (this != internal_default_instance()) delete pose_local_;
  if (this != internal_default_instance()) delete pose_gcj02_;
  if (this != internal_default_instance()) delete pose_utm_01_;
  if (this != internal_default_instance()) delete pose_utm_02_;
}

void HafLocation_HafPoseWithCovariance::ArenaDtor(void* object) {
  HafLocation_HafPoseWithCovariance* _this = reinterpret_cast< HafLocation_HafPoseWithCovariance* >(object);
  (void)_this;
}
void HafLocation_HafPoseWithCovariance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HafLocation_HafPoseWithCovariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HafLocation_HafPoseWithCovariance& HafLocation_HafPoseWithCovariance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HafLocation_HafPoseWithCovariance_haf_5flocation_2eproto.base);
  return *internal_default_instance();
}


void HafLocation_HafPoseWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:location.HafLocation.HafPoseWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_.Clear();
  if (GetArena() == nullptr && pose_wgs_ != nullptr) {
    delete pose_wgs_;
  }
  pose_wgs_ = nullptr;
  if (GetArena() == nullptr && pose_local_ != nullptr) {
    delete pose_local_;
  }
  pose_local_ = nullptr;
  if (GetArena() == nullptr && pose_gcj02_ != nullptr) {
    delete pose_gcj02_;
  }
  pose_gcj02_ = nullptr;
  if (GetArena() == nullptr && pose_utm_01_ != nullptr) {
    delete pose_utm_01_;
  }
  pose_utm_01_ = nullptr;
  if (GetArena() == nullptr && pose_utm_02_ != nullptr) {
    delete pose_utm_02_;
  }
  pose_utm_02_ = nullptr;
  ::memset(&utm_zone_id_01_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utm_zone_id_02_) -
      reinterpret_cast<char*>(&utm_zone_id_01_)) + sizeof(utm_zone_id_02_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HafLocation_HafPoseWithCovariance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .location.HafLocation.HafPose pose_wgs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_wgs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .location.HafLocation.HafPose pose_local = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_local(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .location.HafLocation.HafPose pose_gcj02 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_gcj02(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float covariance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .location.HafLocation.HafPose pose_utm_01 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_utm_01(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .location.HafLocation.HafPose pose_utm_02 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_utm_02(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 utm_zone_id_01 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          utm_zone_id_01_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 utm_zone_id_02 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          utm_zone_id_02_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HafLocation_HafPoseWithCovariance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.HafLocation.HafPoseWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .location.HafLocation.HafPose pose_wgs = 1;
  if (this->has_pose_wgs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose_wgs(this), target, stream);
  }

  // .location.HafLocation.HafPose pose_local = 2;
  if (this->has_pose_local()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose_local(this), target, stream);
  }

  // .location.HafLocation.HafPose pose_gcj02 = 3;
  if (this->has_pose_gcj02()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pose_gcj02(this), target, stream);
  }

  // repeated float covariance = 4;
  if (this->_internal_covariance_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_covariance(), target);
  }

  // .location.HafLocation.HafPose pose_utm_01 = 5;
  if (this->has_pose_utm_01()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pose_utm_01(this), target, stream);
  }

  // .location.HafLocation.HafPose pose_utm_02 = 6;
  if (this->has_pose_utm_02()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pose_utm_02(this), target, stream);
  }

  // uint32 utm_zone_id_01 = 7;
  if (this->utm_zone_id_01() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_utm_zone_id_01(), target);
  }

  // uint32 utm_zone_id_02 = 8;
  if (this->utm_zone_id_02() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_utm_zone_id_02(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.HafLocation.HafPoseWithCovariance)
  return target;
}

size_t HafLocation_HafPoseWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.HafLocation.HafPoseWithCovariance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float covariance = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .location.HafLocation.HafPose pose_wgs = 1;
  if (this->has_pose_wgs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_wgs_);
  }

  // .location.HafLocation.HafPose pose_local = 2;
  if (this->has_pose_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_local_);
  }

  // .location.HafLocation.HafPose pose_gcj02 = 3;
  if (this->has_pose_gcj02()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_gcj02_);
  }

  // .location.HafLocation.HafPose pose_utm_01 = 5;
  if (this->has_pose_utm_01()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_utm_01_);
  }

  // .location.HafLocation.HafPose pose_utm_02 = 6;
  if (this->has_pose_utm_02()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_utm_02_);
  }

  // uint32 utm_zone_id_01 = 7;
  if (this->utm_zone_id_01() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utm_zone_id_01());
  }

  // uint32 utm_zone_id_02 = 8;
  if (this->utm_zone_id_02() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utm_zone_id_02());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HafLocation_HafPoseWithCovariance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:location.HafLocation.HafPoseWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  const HafLocation_HafPoseWithCovariance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HafLocation_HafPoseWithCovariance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:location.HafLocation.HafPoseWithCovariance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:location.HafLocation.HafPoseWithCovariance)
    MergeFrom(*source);
  }
}

void HafLocation_HafPoseWithCovariance::MergeFrom(const HafLocation_HafPoseWithCovariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:location.HafLocation.HafPoseWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_.MergeFrom(from.covariance_);
  if (from.has_pose_wgs()) {
    _internal_mutable_pose_wgs()->::location::HafLocation_HafPose::MergeFrom(from._internal_pose_wgs());
  }
  if (from.has_pose_local()) {
    _internal_mutable_pose_local()->::location::HafLocation_HafPose::MergeFrom(from._internal_pose_local());
  }
  if (from.has_pose_gcj02()) {
    _internal_mutable_pose_gcj02()->::location::HafLocation_HafPose::MergeFrom(from._internal_pose_gcj02());
  }
  if (from.has_pose_utm_01()) {
    _internal_mutable_pose_utm_01()->::location::HafLocation_HafPose::MergeFrom(from._internal_pose_utm_01());
  }
  if (from.has_pose_utm_02()) {
    _internal_mutable_pose_utm_02()->::location::HafLocation_HafPose::MergeFrom(from._internal_pose_utm_02());
  }
  if (from.utm_zone_id_01() != 0) {
    _internal_set_utm_zone_id_01(from._internal_utm_zone_id_01());
  }
  if (from.utm_zone_id_02() != 0) {
    _internal_set_utm_zone_id_02(from._internal_utm_zone_id_02());
  }
}

void HafLocation_HafPoseWithCovariance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:location.HafLocation.HafPoseWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HafLocation_HafPoseWithCovariance::CopyFrom(const HafLocation_HafPoseWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.HafLocation.HafPoseWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HafLocation_HafPoseWithCovariance::IsInitialized() const {
  return true;
}

void HafLocation_HafPoseWithCovariance::InternalSwap(HafLocation_HafPoseWithCovariance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  covariance_.InternalSwap(&other->covariance_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HafLocation_HafPoseWithCovariance, utm_zone_id_02_)
      + sizeof(HafLocation_HafPoseWithCovariance::utm_zone_id_02_)
      - PROTOBUF_FIELD_OFFSET(HafLocation_HafPoseWithCovariance, pose_wgs_)>(
          reinterpret_cast<char*>(&pose_wgs_),
          reinterpret_cast<char*>(&other->pose_wgs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HafLocation_HafPoseWithCovariance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HafLocation_HafTwist::InitAsDefaultInstance() {
  ::location::_HafLocation_HafTwist_default_instance_._instance.get_mutable()->linear_vrf_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
  ::location::_HafLocation_HafTwist_default_instance_._instance.get_mutable()->angular_vrf_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
  ::location::_HafLocation_HafTwist_default_instance_._instance.get_mutable()->angular_raw_vrf_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
}
class HafLocation_HafTwist::_Internal {
 public:
  static const ::perception::common::Point3f& linear_vrf(const HafLocation_HafTwist* msg);
  static const ::perception::common::Point3f& angular_vrf(const HafLocation_HafTwist* msg);
  static const ::perception::common::Point3f& angular_raw_vrf(const HafLocation_HafTwist* msg);
};

const ::perception::common::Point3f&
HafLocation_HafTwist::_Internal::linear_vrf(const HafLocation_HafTwist* msg) {
  return *msg->linear_vrf_;
}
const ::perception::common::Point3f&
HafLocation_HafTwist::_Internal::angular_vrf(const HafLocation_HafTwist* msg) {
  return *msg->angular_vrf_;
}
const ::perception::common::Point3f&
HafLocation_HafTwist::_Internal::angular_raw_vrf(const HafLocation_HafTwist* msg) {
  return *msg->angular_raw_vrf_;
}
void HafLocation_HafTwist::clear_linear_vrf() {
  if (GetArena() == nullptr && linear_vrf_ != nullptr) {
    delete linear_vrf_;
  }
  linear_vrf_ = nullptr;
}
void HafLocation_HafTwist::clear_angular_vrf() {
  if (GetArena() == nullptr && angular_vrf_ != nullptr) {
    delete angular_vrf_;
  }
  angular_vrf_ = nullptr;
}
void HafLocation_HafTwist::clear_angular_raw_vrf() {
  if (GetArena() == nullptr && angular_raw_vrf_ != nullptr) {
    delete angular_raw_vrf_;
  }
  angular_raw_vrf_ = nullptr;
}
HafLocation_HafTwist::HafLocation_HafTwist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:location.HafLocation.HafTwist)
}
HafLocation_HafTwist::HafLocation_HafTwist(const HafLocation_HafTwist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear_vrf()) {
    linear_vrf_ = new ::perception::common::Point3f(*from.linear_vrf_);
  } else {
    linear_vrf_ = nullptr;
  }
  if (from._internal_has_angular_vrf()) {
    angular_vrf_ = new ::perception::common::Point3f(*from.angular_vrf_);
  } else {
    angular_vrf_ = nullptr;
  }
  if (from._internal_has_angular_raw_vrf()) {
    angular_raw_vrf_ = new ::perception::common::Point3f(*from.angular_raw_vrf_);
  } else {
    angular_raw_vrf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:location.HafLocation.HafTwist)
}

void HafLocation_HafTwist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HafLocation_HafTwist_haf_5flocation_2eproto.base);
  ::memset(&linear_vrf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_raw_vrf_) -
      reinterpret_cast<char*>(&linear_vrf_)) + sizeof(angular_raw_vrf_));
}

HafLocation_HafTwist::~HafLocation_HafTwist() {
  // @@protoc_insertion_point(destructor:location.HafLocation.HafTwist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HafLocation_HafTwist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete linear_vrf_;
  if (this != internal_default_instance()) delete angular_vrf_;
  if (this != internal_default_instance()) delete angular_raw_vrf_;
}

void HafLocation_HafTwist::ArenaDtor(void* object) {
  HafLocation_HafTwist* _this = reinterpret_cast< HafLocation_HafTwist* >(object);
  (void)_this;
}
void HafLocation_HafTwist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HafLocation_HafTwist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HafLocation_HafTwist& HafLocation_HafTwist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HafLocation_HafTwist_haf_5flocation_2eproto.base);
  return *internal_default_instance();
}


void HafLocation_HafTwist::Clear() {
// @@protoc_insertion_point(message_clear_start:location.HafLocation.HafTwist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && linear_vrf_ != nullptr) {
    delete linear_vrf_;
  }
  linear_vrf_ = nullptr;
  if (GetArena() == nullptr && angular_vrf_ != nullptr) {
    delete angular_vrf_;
  }
  angular_vrf_ = nullptr;
  if (GetArena() == nullptr && angular_raw_vrf_ != nullptr) {
    delete angular_raw_vrf_;
  }
  angular_raw_vrf_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HafLocation_HafTwist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.Point3f linear_vrf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_vrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f angular_vrf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_vrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f angular_raw_vrf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_raw_vrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HafLocation_HafTwist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.HafLocation.HafTwist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.Point3f linear_vrf = 1;
  if (this->has_linear_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear_vrf(this), target, stream);
  }

  // .perception.common.Point3f angular_vrf = 2;
  if (this->has_angular_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular_vrf(this), target, stream);
  }

  // .perception.common.Point3f angular_raw_vrf = 3;
  if (this->has_angular_raw_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::angular_raw_vrf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.HafLocation.HafTwist)
  return target;
}

size_t HafLocation_HafTwist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.HafLocation.HafTwist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Point3f linear_vrf = 1;
  if (this->has_linear_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_vrf_);
  }

  // .perception.common.Point3f angular_vrf = 2;
  if (this->has_angular_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_vrf_);
  }

  // .perception.common.Point3f angular_raw_vrf = 3;
  if (this->has_angular_raw_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_raw_vrf_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HafLocation_HafTwist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:location.HafLocation.HafTwist)
  GOOGLE_DCHECK_NE(&from, this);
  const HafLocation_HafTwist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HafLocation_HafTwist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:location.HafLocation.HafTwist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:location.HafLocation.HafTwist)
    MergeFrom(*source);
  }
}

void HafLocation_HafTwist::MergeFrom(const HafLocation_HafTwist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:location.HafLocation.HafTwist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear_vrf()) {
    _internal_mutable_linear_vrf()->::perception::common::Point3f::MergeFrom(from._internal_linear_vrf());
  }
  if (from.has_angular_vrf()) {
    _internal_mutable_angular_vrf()->::perception::common::Point3f::MergeFrom(from._internal_angular_vrf());
  }
  if (from.has_angular_raw_vrf()) {
    _internal_mutable_angular_raw_vrf()->::perception::common::Point3f::MergeFrom(from._internal_angular_raw_vrf());
  }
}

void HafLocation_HafTwist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:location.HafLocation.HafTwist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HafLocation_HafTwist::CopyFrom(const HafLocation_HafTwist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.HafLocation.HafTwist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HafLocation_HafTwist::IsInitialized() const {
  return true;
}

void HafLocation_HafTwist::InternalSwap(HafLocation_HafTwist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HafLocation_HafTwist, angular_raw_vrf_)
      + sizeof(HafLocation_HafTwist::angular_raw_vrf_)
      - PROTOBUF_FIELD_OFFSET(HafLocation_HafTwist, linear_vrf_)>(
          reinterpret_cast<char*>(&linear_vrf_),
          reinterpret_cast<char*>(&other->linear_vrf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HafLocation_HafTwist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HafLocation_HafTwistWithCovariance::InitAsDefaultInstance() {
  ::location::_HafLocation_HafTwistWithCovariance_default_instance_._instance.get_mutable()->twist_vrf_ = const_cast< ::location::HafLocation_HafTwist*>(
      ::location::HafLocation_HafTwist::internal_default_instance());
}
class HafLocation_HafTwistWithCovariance::_Internal {
 public:
  static const ::location::HafLocation_HafTwist& twist_vrf(const HafLocation_HafTwistWithCovariance* msg);
};

const ::location::HafLocation_HafTwist&
HafLocation_HafTwistWithCovariance::_Internal::twist_vrf(const HafLocation_HafTwistWithCovariance* msg) {
  return *msg->twist_vrf_;
}
HafLocation_HafTwistWithCovariance::HafLocation_HafTwistWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  covariance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:location.HafLocation.HafTwistWithCovariance)
}
HafLocation_HafTwistWithCovariance::HafLocation_HafTwistWithCovariance(const HafLocation_HafTwistWithCovariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      covariance_(from.covariance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_twist_vrf()) {
    twist_vrf_ = new ::location::HafLocation_HafTwist(*from.twist_vrf_);
  } else {
    twist_vrf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:location.HafLocation.HafTwistWithCovariance)
}

void HafLocation_HafTwistWithCovariance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HafLocation_HafTwistWithCovariance_haf_5flocation_2eproto.base);
  twist_vrf_ = nullptr;
}

HafLocation_HafTwistWithCovariance::~HafLocation_HafTwistWithCovariance() {
  // @@protoc_insertion_point(destructor:location.HafLocation.HafTwistWithCovariance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HafLocation_HafTwistWithCovariance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete twist_vrf_;
}

void HafLocation_HafTwistWithCovariance::ArenaDtor(void* object) {
  HafLocation_HafTwistWithCovariance* _this = reinterpret_cast< HafLocation_HafTwistWithCovariance* >(object);
  (void)_this;
}
void HafLocation_HafTwistWithCovariance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HafLocation_HafTwistWithCovariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HafLocation_HafTwistWithCovariance& HafLocation_HafTwistWithCovariance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HafLocation_HafTwistWithCovariance_haf_5flocation_2eproto.base);
  return *internal_default_instance();
}


void HafLocation_HafTwistWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:location.HafLocation.HafTwistWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_.Clear();
  if (GetArena() == nullptr && twist_vrf_ != nullptr) {
    delete twist_vrf_;
  }
  twist_vrf_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HafLocation_HafTwistWithCovariance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .location.HafLocation.HafTwist twist_vrf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_twist_vrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float covariance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HafLocation_HafTwistWithCovariance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.HafLocation.HafTwistWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .location.HafLocation.HafTwist twist_vrf = 1;
  if (this->has_twist_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::twist_vrf(this), target, stream);
  }

  // repeated float covariance = 2;
  if (this->_internal_covariance_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.HafLocation.HafTwistWithCovariance)
  return target;
}

size_t HafLocation_HafTwistWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.HafLocation.HafTwistWithCovariance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float covariance = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .location.HafLocation.HafTwist twist_vrf = 1;
  if (this->has_twist_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *twist_vrf_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HafLocation_HafTwistWithCovariance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:location.HafLocation.HafTwistWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  const HafLocation_HafTwistWithCovariance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HafLocation_HafTwistWithCovariance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:location.HafLocation.HafTwistWithCovariance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:location.HafLocation.HafTwistWithCovariance)
    MergeFrom(*source);
  }
}

void HafLocation_HafTwistWithCovariance::MergeFrom(const HafLocation_HafTwistWithCovariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:location.HafLocation.HafTwistWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_.MergeFrom(from.covariance_);
  if (from.has_twist_vrf()) {
    _internal_mutable_twist_vrf()->::location::HafLocation_HafTwist::MergeFrom(from._internal_twist_vrf());
  }
}

void HafLocation_HafTwistWithCovariance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:location.HafLocation.HafTwistWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HafLocation_HafTwistWithCovariance::CopyFrom(const HafLocation_HafTwistWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.HafLocation.HafTwistWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HafLocation_HafTwistWithCovariance::IsInitialized() const {
  return true;
}

void HafLocation_HafTwistWithCovariance::InternalSwap(HafLocation_HafTwistWithCovariance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  covariance_.InternalSwap(&other->covariance_);
  swap(twist_vrf_, other->twist_vrf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HafLocation_HafTwistWithCovariance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HafLocation_HafAccel::InitAsDefaultInstance() {
  ::location::_HafLocation_HafAccel_default_instance_._instance.get_mutable()->linear_vrf_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
  ::location::_HafLocation_HafAccel_default_instance_._instance.get_mutable()->angular_vrf_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
  ::location::_HafLocation_HafAccel_default_instance_._instance.get_mutable()->linear_raw_vrf_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
}
class HafLocation_HafAccel::_Internal {
 public:
  static const ::perception::common::Point3f& linear_vrf(const HafLocation_HafAccel* msg);
  static const ::perception::common::Point3f& angular_vrf(const HafLocation_HafAccel* msg);
  static const ::perception::common::Point3f& linear_raw_vrf(const HafLocation_HafAccel* msg);
};

const ::perception::common::Point3f&
HafLocation_HafAccel::_Internal::linear_vrf(const HafLocation_HafAccel* msg) {
  return *msg->linear_vrf_;
}
const ::perception::common::Point3f&
HafLocation_HafAccel::_Internal::angular_vrf(const HafLocation_HafAccel* msg) {
  return *msg->angular_vrf_;
}
const ::perception::common::Point3f&
HafLocation_HafAccel::_Internal::linear_raw_vrf(const HafLocation_HafAccel* msg) {
  return *msg->linear_raw_vrf_;
}
void HafLocation_HafAccel::clear_linear_vrf() {
  if (GetArena() == nullptr && linear_vrf_ != nullptr) {
    delete linear_vrf_;
  }
  linear_vrf_ = nullptr;
}
void HafLocation_HafAccel::clear_angular_vrf() {
  if (GetArena() == nullptr && angular_vrf_ != nullptr) {
    delete angular_vrf_;
  }
  angular_vrf_ = nullptr;
}
void HafLocation_HafAccel::clear_linear_raw_vrf() {
  if (GetArena() == nullptr && linear_raw_vrf_ != nullptr) {
    delete linear_raw_vrf_;
  }
  linear_raw_vrf_ = nullptr;
}
HafLocation_HafAccel::HafLocation_HafAccel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:location.HafLocation.HafAccel)
}
HafLocation_HafAccel::HafLocation_HafAccel(const HafLocation_HafAccel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear_vrf()) {
    linear_vrf_ = new ::perception::common::Point3f(*from.linear_vrf_);
  } else {
    linear_vrf_ = nullptr;
  }
  if (from._internal_has_angular_vrf()) {
    angular_vrf_ = new ::perception::common::Point3f(*from.angular_vrf_);
  } else {
    angular_vrf_ = nullptr;
  }
  if (from._internal_has_linear_raw_vrf()) {
    linear_raw_vrf_ = new ::perception::common::Point3f(*from.linear_raw_vrf_);
  } else {
    linear_raw_vrf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:location.HafLocation.HafAccel)
}

void HafLocation_HafAccel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HafLocation_HafAccel_haf_5flocation_2eproto.base);
  ::memset(&linear_vrf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linear_raw_vrf_) -
      reinterpret_cast<char*>(&linear_vrf_)) + sizeof(linear_raw_vrf_));
}

HafLocation_HafAccel::~HafLocation_HafAccel() {
  // @@protoc_insertion_point(destructor:location.HafLocation.HafAccel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HafLocation_HafAccel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete linear_vrf_;
  if (this != internal_default_instance()) delete angular_vrf_;
  if (this != internal_default_instance()) delete linear_raw_vrf_;
}

void HafLocation_HafAccel::ArenaDtor(void* object) {
  HafLocation_HafAccel* _this = reinterpret_cast< HafLocation_HafAccel* >(object);
  (void)_this;
}
void HafLocation_HafAccel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HafLocation_HafAccel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HafLocation_HafAccel& HafLocation_HafAccel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HafLocation_HafAccel_haf_5flocation_2eproto.base);
  return *internal_default_instance();
}


void HafLocation_HafAccel::Clear() {
// @@protoc_insertion_point(message_clear_start:location.HafLocation.HafAccel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && linear_vrf_ != nullptr) {
    delete linear_vrf_;
  }
  linear_vrf_ = nullptr;
  if (GetArena() == nullptr && angular_vrf_ != nullptr) {
    delete angular_vrf_;
  }
  angular_vrf_ = nullptr;
  if (GetArena() == nullptr && linear_raw_vrf_ != nullptr) {
    delete linear_raw_vrf_;
  }
  linear_raw_vrf_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HafLocation_HafAccel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.Point3f linear_vrf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_vrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f angular_vrf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_vrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f linear_raw_vrf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_raw_vrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HafLocation_HafAccel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.HafLocation.HafAccel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.Point3f linear_vrf = 1;
  if (this->has_linear_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear_vrf(this), target, stream);
  }

  // .perception.common.Point3f angular_vrf = 2;
  if (this->has_angular_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular_vrf(this), target, stream);
  }

  // .perception.common.Point3f linear_raw_vrf = 3;
  if (this->has_linear_raw_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::linear_raw_vrf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.HafLocation.HafAccel)
  return target;
}

size_t HafLocation_HafAccel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.HafLocation.HafAccel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Point3f linear_vrf = 1;
  if (this->has_linear_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_vrf_);
  }

  // .perception.common.Point3f angular_vrf = 2;
  if (this->has_angular_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_vrf_);
  }

  // .perception.common.Point3f linear_raw_vrf = 3;
  if (this->has_linear_raw_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_raw_vrf_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HafLocation_HafAccel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:location.HafLocation.HafAccel)
  GOOGLE_DCHECK_NE(&from, this);
  const HafLocation_HafAccel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HafLocation_HafAccel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:location.HafLocation.HafAccel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:location.HafLocation.HafAccel)
    MergeFrom(*source);
  }
}

void HafLocation_HafAccel::MergeFrom(const HafLocation_HafAccel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:location.HafLocation.HafAccel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear_vrf()) {
    _internal_mutable_linear_vrf()->::perception::common::Point3f::MergeFrom(from._internal_linear_vrf());
  }
  if (from.has_angular_vrf()) {
    _internal_mutable_angular_vrf()->::perception::common::Point3f::MergeFrom(from._internal_angular_vrf());
  }
  if (from.has_linear_raw_vrf()) {
    _internal_mutable_linear_raw_vrf()->::perception::common::Point3f::MergeFrom(from._internal_linear_raw_vrf());
  }
}

void HafLocation_HafAccel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:location.HafLocation.HafAccel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HafLocation_HafAccel::CopyFrom(const HafLocation_HafAccel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.HafLocation.HafAccel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HafLocation_HafAccel::IsInitialized() const {
  return true;
}

void HafLocation_HafAccel::InternalSwap(HafLocation_HafAccel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HafLocation_HafAccel, linear_raw_vrf_)
      + sizeof(HafLocation_HafAccel::linear_raw_vrf_)
      - PROTOBUF_FIELD_OFFSET(HafLocation_HafAccel, linear_vrf_)>(
          reinterpret_cast<char*>(&linear_vrf_),
          reinterpret_cast<char*>(&other->linear_vrf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HafLocation_HafAccel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HafLocation_HafAccelWithCovariance::InitAsDefaultInstance() {
  ::location::_HafLocation_HafAccelWithCovariance_default_instance_._instance.get_mutable()->linear_vrf_ = const_cast< ::location::HafLocation_HafAccel*>(
      ::location::HafLocation_HafAccel::internal_default_instance());
}
class HafLocation_HafAccelWithCovariance::_Internal {
 public:
  static const ::location::HafLocation_HafAccel& linear_vrf(const HafLocation_HafAccelWithCovariance* msg);
};

const ::location::HafLocation_HafAccel&
HafLocation_HafAccelWithCovariance::_Internal::linear_vrf(const HafLocation_HafAccelWithCovariance* msg) {
  return *msg->linear_vrf_;
}
HafLocation_HafAccelWithCovariance::HafLocation_HafAccelWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  covariance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:location.HafLocation.HafAccelWithCovariance)
}
HafLocation_HafAccelWithCovariance::HafLocation_HafAccelWithCovariance(const HafLocation_HafAccelWithCovariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      covariance_(from.covariance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear_vrf()) {
    linear_vrf_ = new ::location::HafLocation_HafAccel(*from.linear_vrf_);
  } else {
    linear_vrf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:location.HafLocation.HafAccelWithCovariance)
}

void HafLocation_HafAccelWithCovariance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HafLocation_HafAccelWithCovariance_haf_5flocation_2eproto.base);
  linear_vrf_ = nullptr;
}

HafLocation_HafAccelWithCovariance::~HafLocation_HafAccelWithCovariance() {
  // @@protoc_insertion_point(destructor:location.HafLocation.HafAccelWithCovariance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HafLocation_HafAccelWithCovariance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete linear_vrf_;
}

void HafLocation_HafAccelWithCovariance::ArenaDtor(void* object) {
  HafLocation_HafAccelWithCovariance* _this = reinterpret_cast< HafLocation_HafAccelWithCovariance* >(object);
  (void)_this;
}
void HafLocation_HafAccelWithCovariance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HafLocation_HafAccelWithCovariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HafLocation_HafAccelWithCovariance& HafLocation_HafAccelWithCovariance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HafLocation_HafAccelWithCovariance_haf_5flocation_2eproto.base);
  return *internal_default_instance();
}


void HafLocation_HafAccelWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:location.HafLocation.HafAccelWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_.Clear();
  if (GetArena() == nullptr && linear_vrf_ != nullptr) {
    delete linear_vrf_;
  }
  linear_vrf_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HafLocation_HafAccelWithCovariance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .location.HafLocation.HafAccel linear_vrf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_vrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float covariance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HafLocation_HafAccelWithCovariance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.HafLocation.HafAccelWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .location.HafLocation.HafAccel linear_vrf = 1;
  if (this->has_linear_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear_vrf(this), target, stream);
  }

  // repeated float covariance = 2;
  if (this->_internal_covariance_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.HafLocation.HafAccelWithCovariance)
  return target;
}

size_t HafLocation_HafAccelWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.HafLocation.HafAccelWithCovariance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float covariance = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .location.HafLocation.HafAccel linear_vrf = 1;
  if (this->has_linear_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_vrf_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HafLocation_HafAccelWithCovariance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:location.HafLocation.HafAccelWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  const HafLocation_HafAccelWithCovariance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HafLocation_HafAccelWithCovariance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:location.HafLocation.HafAccelWithCovariance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:location.HafLocation.HafAccelWithCovariance)
    MergeFrom(*source);
  }
}

void HafLocation_HafAccelWithCovariance::MergeFrom(const HafLocation_HafAccelWithCovariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:location.HafLocation.HafAccelWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_.MergeFrom(from.covariance_);
  if (from.has_linear_vrf()) {
    _internal_mutable_linear_vrf()->::location::HafLocation_HafAccel::MergeFrom(from._internal_linear_vrf());
  }
}

void HafLocation_HafAccelWithCovariance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:location.HafLocation.HafAccelWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HafLocation_HafAccelWithCovariance::CopyFrom(const HafLocation_HafAccelWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.HafLocation.HafAccelWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HafLocation_HafAccelWithCovariance::IsInitialized() const {
  return true;
}

void HafLocation_HafAccelWithCovariance::InternalSwap(HafLocation_HafAccelWithCovariance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  covariance_.InternalSwap(&other->covariance_);
  swap(linear_vrf_, other->linear_vrf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HafLocation_HafAccelWithCovariance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HafLocation::InitAsDefaultInstance() {
  ::location::_HafLocation_default_instance_._instance.get_mutable()->header_ = const_cast< ::minieye::Header*>(
      ::minieye::Header::internal_default_instance());
  ::location::_HafLocation_default_instance_._instance.get_mutable()->pose_ = const_cast< ::location::HafLocation_HafPoseWithCovariance*>(
      ::location::HafLocation_HafPoseWithCovariance::internal_default_instance());
  ::location::_HafLocation_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::location::HafLocation_HafTwistWithCovariance*>(
      ::location::HafLocation_HafTwistWithCovariance::internal_default_instance());
  ::location::_HafLocation_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::location::HafLocation_HafAccelWithCovariance*>(
      ::location::HafLocation_HafAccelWithCovariance::internal_default_instance());
  ::location::_HafLocation_default_instance_._instance.get_mutable()->mounting_error_ = const_cast< ::perception::common::Point3f*>(
      ::perception::common::Point3f::internal_default_instance());
}
class HafLocation::_Internal {
 public:
  static const ::minieye::Header& header(const HafLocation* msg);
  static const ::location::HafLocation_HafPoseWithCovariance& pose(const HafLocation* msg);
  static const ::location::HafLocation_HafTwistWithCovariance& velocity(const HafLocation* msg);
  static const ::location::HafLocation_HafAccelWithCovariance& acceleration(const HafLocation* msg);
  static const ::perception::common::Point3f& mounting_error(const HafLocation* msg);
};

const ::minieye::Header&
HafLocation::_Internal::header(const HafLocation* msg) {
  return *msg->header_;
}
const ::location::HafLocation_HafPoseWithCovariance&
HafLocation::_Internal::pose(const HafLocation* msg) {
  return *msg->pose_;
}
const ::location::HafLocation_HafTwistWithCovariance&
HafLocation::_Internal::velocity(const HafLocation* msg) {
  return *msg->velocity_;
}
const ::location::HafLocation_HafAccelWithCovariance&
HafLocation::_Internal::acceleration(const HafLocation* msg) {
  return *msg->acceleration_;
}
const ::perception::common::Point3f&
HafLocation::_Internal::mounting_error(const HafLocation* msg) {
  return *msg->mounting_error_;
}
void HafLocation::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void HafLocation::clear_mounting_error() {
  if (GetArena() == nullptr && mounting_error_ != nullptr) {
    delete mounting_error_;
  }
  mounting_error_ = nullptr;
}
HafLocation::HafLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:location.HafLocation)
}
HafLocation::HafLocation(const HafLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::minieye::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::location::HafLocation_HafPoseWithCovariance(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::location::HafLocation_HafTwistWithCovariance(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::location::HafLocation_HafAccelWithCovariance(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  if (from._internal_has_mounting_error()) {
    mounting_error_ = new ::perception::common::Point3f(*from.mounting_error_);
  } else {
    mounting_error_ = nullptr;
  }
  ::memcpy(&is_valid_, &from.is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&location_state_) -
    reinterpret_cast<char*>(&is_valid_)) + sizeof(location_state_));
  // @@protoc_insertion_point(copy_constructor:location.HafLocation)
}

void HafLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HafLocation_haf_5flocation_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_state_) -
      reinterpret_cast<char*>(&header_)) + sizeof(location_state_));
}

HafLocation::~HafLocation() {
  // @@protoc_insertion_point(destructor:location.HafLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HafLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete mounting_error_;
}

void HafLocation::ArenaDtor(void* object) {
  HafLocation* _this = reinterpret_cast< HafLocation* >(object);
  (void)_this;
}
void HafLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HafLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HafLocation& HafLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HafLocation_haf_5flocation_2eproto.base);
  return *internal_default_instance();
}


void HafLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:location.HafLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArena() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
  if (GetArena() == nullptr && mounting_error_ != nullptr) {
    delete mounting_error_;
  }
  mounting_error_ = nullptr;
  ::memset(&is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_state_) -
      reinterpret_cast<char*>(&is_valid_)) + sizeof(location_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HafLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gps_week = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gps_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double gps_sec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          gps_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .location.HafLocation.CoordType coordinate_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_coordinate_type(static_cast<::location::HafLocation_CoordType>(val));
        } else goto handle_unusual;
        continue;
      // .location.HafLocation.HafPoseWithCovariance pose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .location.HafLocation.HafTwistWithCovariance velocity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .location.HafLocation.HafAccelWithCovariance acceleration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rtk_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          rtk_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 location_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          location_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3f mounting_error = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HafLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.HafLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bool is_valid = 2;
  if (this->is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_valid(), target);
  }

  // uint32 gps_week = 3;
  if (this->gps_week() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gps_week(), target);
  }

  // double gps_sec = 4;
  if (!(this->gps_sec() <= 0 && this->gps_sec() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_gps_sec(), target);
  }

  // .location.HafLocation.CoordType coordinate_type = 5;
  if (this->coordinate_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_coordinate_type(), target);
  }

  // .location.HafLocation.HafPoseWithCovariance pose = 6;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pose(this), target, stream);
  }

  // .location.HafLocation.HafTwistWithCovariance velocity = 7;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::velocity(this), target, stream);
  }

  // .location.HafLocation.HafAccelWithCovariance acceleration = 8;
  if (this->has_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::acceleration(this), target, stream);
  }

  // uint32 rtk_status = 9;
  if (this->rtk_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_rtk_status(), target);
  }

  // uint32 location_state = 10;
  if (this->location_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_location_state(), target);
  }

  // .perception.common.Point3f mounting_error = 11;
  if (this->has_mounting_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::mounting_error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.HafLocation)
  return target;
}

size_t HafLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.HafLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .location.HafLocation.HafPoseWithCovariance pose = 6;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .location.HafLocation.HafTwistWithCovariance velocity = 7;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .location.HafLocation.HafAccelWithCovariance acceleration = 8;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // .perception.common.Point3f mounting_error = 11;
  if (this->has_mounting_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_error_);
  }

  // bool is_valid = 2;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // uint32 gps_week = 3;
  if (this->gps_week() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gps_week());
  }

  // double gps_sec = 4;
  if (!(this->gps_sec() <= 0 && this->gps_sec() >= 0)) {
    total_size += 1 + 8;
  }

  // .location.HafLocation.CoordType coordinate_type = 5;
  if (this->coordinate_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_coordinate_type());
  }

  // uint32 rtk_status = 9;
  if (this->rtk_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rtk_status());
  }

  // uint32 location_state = 10;
  if (this->location_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_location_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HafLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:location.HafLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const HafLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HafLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:location.HafLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:location.HafLocation)
    MergeFrom(*source);
  }
}

void HafLocation::MergeFrom(const HafLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:location.HafLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::minieye::Header::MergeFrom(from._internal_header());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::location::HafLocation_HafPoseWithCovariance::MergeFrom(from._internal_pose());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::location::HafLocation_HafTwistWithCovariance::MergeFrom(from._internal_velocity());
  }
  if (from.has_acceleration()) {
    _internal_mutable_acceleration()->::location::HafLocation_HafAccelWithCovariance::MergeFrom(from._internal_acceleration());
  }
  if (from.has_mounting_error()) {
    _internal_mutable_mounting_error()->::perception::common::Point3f::MergeFrom(from._internal_mounting_error());
  }
  if (from.is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
  if (from.gps_week() != 0) {
    _internal_set_gps_week(from._internal_gps_week());
  }
  if (!(from.gps_sec() <= 0 && from.gps_sec() >= 0)) {
    _internal_set_gps_sec(from._internal_gps_sec());
  }
  if (from.coordinate_type() != 0) {
    _internal_set_coordinate_type(from._internal_coordinate_type());
  }
  if (from.rtk_status() != 0) {
    _internal_set_rtk_status(from._internal_rtk_status());
  }
  if (from.location_state() != 0) {
    _internal_set_location_state(from._internal_location_state());
  }
}

void HafLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:location.HafLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HafLocation::CopyFrom(const HafLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.HafLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HafLocation::IsInitialized() const {
  return true;
}

void HafLocation::InternalSwap(HafLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HafLocation, location_state_)
      + sizeof(HafLocation::location_state_)
      - PROTOBUF_FIELD_OFFSET(HafLocation, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HafLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace location
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::location::HafLocation_HafPose* Arena::CreateMaybeMessage< ::location::HafLocation_HafPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::HafLocation_HafPose >(arena);
}
template<> PROTOBUF_NOINLINE ::location::HafLocation_HafPoseWithCovariance* Arena::CreateMaybeMessage< ::location::HafLocation_HafPoseWithCovariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::HafLocation_HafPoseWithCovariance >(arena);
}
template<> PROTOBUF_NOINLINE ::location::HafLocation_HafTwist* Arena::CreateMaybeMessage< ::location::HafLocation_HafTwist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::HafLocation_HafTwist >(arena);
}
template<> PROTOBUF_NOINLINE ::location::HafLocation_HafTwistWithCovariance* Arena::CreateMaybeMessage< ::location::HafLocation_HafTwistWithCovariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::HafLocation_HafTwistWithCovariance >(arena);
}
template<> PROTOBUF_NOINLINE ::location::HafLocation_HafAccel* Arena::CreateMaybeMessage< ::location::HafLocation_HafAccel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::HafLocation_HafAccel >(arena);
}
template<> PROTOBUF_NOINLINE ::location::HafLocation_HafAccelWithCovariance* Arena::CreateMaybeMessage< ::location::HafLocation_HafAccelWithCovariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::HafLocation_HafAccelWithCovariance >(arena);
}
template<> PROTOBUF_NOINLINE ::location::HafLocation* Arena::CreateMaybeMessage< ::location::HafLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::HafLocation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
