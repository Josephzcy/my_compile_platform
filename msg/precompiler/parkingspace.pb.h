// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parkingspace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parkingspace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parkingspace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "geometry.pb.h"
#include "data_source.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parkingspace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parkingspace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parkingspace_2eproto;
namespace perception {
class CornerPt;
class CornerPtDefaultTypeInternal;
extern CornerPtDefaultTypeInternal _CornerPt_default_instance_;
class ParkingSlot;
class ParkingSlotDefaultTypeInternal;
extern ParkingSlotDefaultTypeInternal _ParkingSlot_default_instance_;
class ParkingSpace;
class ParkingSpaceDefaultTypeInternal;
extern ParkingSpaceDefaultTypeInternal _ParkingSpace_default_instance_;
class RodPt;
class RodPtDefaultTypeInternal;
extern RodPtDefaultTypeInternal _RodPt_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::CornerPt* Arena::CreateMaybeMessage<::perception::CornerPt>(Arena*);
template<> ::perception::ParkingSlot* Arena::CreateMaybeMessage<::perception::ParkingSlot>(Arena*);
template<> ::perception::ParkingSpace* Arena::CreateMaybeMessage<::perception::ParkingSpace>(Arena*);
template<> ::perception::RodPt* Arena::CreateMaybeMessage<::perception::RodPt>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

enum ParkingSlot_ParkSlotType : int {
  ParkingSlot_ParkSlotType_kUnknown = 0,
  ParkingSlot_ParkSlotType_kVerticalSpot = 1,
  ParkingSlot_ParkSlotType_kHorizontalSpot = 2,
  ParkingSlot_ParkSlotType_kObliqueSpot = 3,
  ParkingSlot_ParkSlotType_ParkingSlot_ParkSlotType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParkingSlot_ParkSlotType_ParkingSlot_ParkSlotType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParkingSlot_ParkSlotType_IsValid(int value);
constexpr ParkingSlot_ParkSlotType ParkingSlot_ParkSlotType_ParkSlotType_MIN = ParkingSlot_ParkSlotType_kUnknown;
constexpr ParkingSlot_ParkSlotType ParkingSlot_ParkSlotType_ParkSlotType_MAX = ParkingSlot_ParkSlotType_kObliqueSpot;
constexpr int ParkingSlot_ParkSlotType_ParkSlotType_ARRAYSIZE = ParkingSlot_ParkSlotType_ParkSlotType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSlot_ParkSlotType_descriptor();
template<typename T>
inline const std::string& ParkingSlot_ParkSlotType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParkingSlot_ParkSlotType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParkingSlot_ParkSlotType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParkingSlot_ParkSlotType_descriptor(), enum_t_value);
}
inline bool ParkingSlot_ParkSlotType_Parse(
    const std::string& name, ParkingSlot_ParkSlotType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParkingSlot_ParkSlotType>(
    ParkingSlot_ParkSlotType_descriptor(), name, value);
}
enum ParkingSlot_SearchStage : int {
  ParkingSlot_SearchStage_kSsDefault = 0,
  ParkingSlot_SearchStage_kSsDiscontent = 1,
  ParkingSlot_SearchStage_kSsFront = 2,
  ParkingSlot_SearchStage_kSsSide = 3,
  ParkingSlot_SearchStage_kSsRear = 4,
  ParkingSlot_SearchStage_ParkingSlot_SearchStage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParkingSlot_SearchStage_ParkingSlot_SearchStage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParkingSlot_SearchStage_IsValid(int value);
constexpr ParkingSlot_SearchStage ParkingSlot_SearchStage_SearchStage_MIN = ParkingSlot_SearchStage_kSsDefault;
constexpr ParkingSlot_SearchStage ParkingSlot_SearchStage_SearchStage_MAX = ParkingSlot_SearchStage_kSsRear;
constexpr int ParkingSlot_SearchStage_SearchStage_ARRAYSIZE = ParkingSlot_SearchStage_SearchStage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSlot_SearchStage_descriptor();
template<typename T>
inline const std::string& ParkingSlot_SearchStage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParkingSlot_SearchStage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParkingSlot_SearchStage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParkingSlot_SearchStage_descriptor(), enum_t_value);
}
inline bool ParkingSlot_SearchStage_Parse(
    const std::string& name, ParkingSlot_SearchStage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParkingSlot_SearchStage>(
    ParkingSlot_SearchStage_descriptor(), name, value);
}
enum ParkingSlot_ParkingStage : int {
  ParkingSlot_ParkingStage_kPsDefault = 0,
  ParkingSlot_ParkingStage_kPsDiscontent = 1,
  ParkingSlot_ParkingStage_kPsOutside = 2,
  ParkingSlot_ParkingStage_kPsInside = 3,
  ParkingSlot_ParkingStage_KInsideContinuously = 4,
  ParkingSlot_ParkingStage_ParkingSlot_ParkingStage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParkingSlot_ParkingStage_ParkingSlot_ParkingStage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParkingSlot_ParkingStage_IsValid(int value);
constexpr ParkingSlot_ParkingStage ParkingSlot_ParkingStage_ParkingStage_MIN = ParkingSlot_ParkingStage_kPsDefault;
constexpr ParkingSlot_ParkingStage ParkingSlot_ParkingStage_ParkingStage_MAX = ParkingSlot_ParkingStage_KInsideContinuously;
constexpr int ParkingSlot_ParkingStage_ParkingStage_ARRAYSIZE = ParkingSlot_ParkingStage_ParkingStage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSlot_ParkingStage_descriptor();
template<typename T>
inline const std::string& ParkingSlot_ParkingStage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParkingSlot_ParkingStage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParkingSlot_ParkingStage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParkingSlot_ParkingStage_descriptor(), enum_t_value);
}
inline bool ParkingSlot_ParkingStage_Parse(
    const std::string& name, ParkingSlot_ParkingStage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParkingSlot_ParkingStage>(
    ParkingSlot_ParkingStage_descriptor(), name, value);
}
enum ParkingSlot_RodStage : int {
  ParkingSlot_RodStage_kRsDefault = 0,
  ParkingSlot_RodStage_kRsDiscontent = 1,
  ParkingSlot_RodStage_kRsFar = 2,
  ParkingSlot_RodStage_kRsNear = 3,
  ParkingSlot_RodStage_kRsClose = 4,
  ParkingSlot_RodStage_ParkingSlot_RodStage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParkingSlot_RodStage_ParkingSlot_RodStage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParkingSlot_RodStage_IsValid(int value);
constexpr ParkingSlot_RodStage ParkingSlot_RodStage_RodStage_MIN = ParkingSlot_RodStage_kRsDefault;
constexpr ParkingSlot_RodStage ParkingSlot_RodStage_RodStage_MAX = ParkingSlot_RodStage_kRsClose;
constexpr int ParkingSlot_RodStage_RodStage_ARRAYSIZE = ParkingSlot_RodStage_RodStage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSlot_RodStage_descriptor();
template<typename T>
inline const std::string& ParkingSlot_RodStage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParkingSlot_RodStage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParkingSlot_RodStage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParkingSlot_RodStage_descriptor(), enum_t_value);
}
inline bool ParkingSlot_RodStage_Parse(
    const std::string& name, ParkingSlot_RodStage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParkingSlot_RodStage>(
    ParkingSlot_RodStage_descriptor(), name, value);
}
// ===================================================================

class CornerPt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.CornerPt) */ {
 public:
  inline CornerPt() : CornerPt(nullptr) {};
  virtual ~CornerPt();

  CornerPt(const CornerPt& from);
  CornerPt(CornerPt&& from) noexcept
    : CornerPt() {
    *this = ::std::move(from);
  }

  inline CornerPt& operator=(const CornerPt& from) {
    CopyFrom(from);
    return *this;
  }
  inline CornerPt& operator=(CornerPt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CornerPt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CornerPt* internal_default_instance() {
    return reinterpret_cast<const CornerPt*>(
               &_CornerPt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CornerPt& a, CornerPt& b) {
    a.Swap(&b);
  }
  inline void Swap(CornerPt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CornerPt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CornerPt* New() const final {
    return CreateMaybeMessage<CornerPt>(nullptr);
  }

  CornerPt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CornerPt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CornerPt& from);
  void MergeFrom(const CornerPt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CornerPt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.CornerPt";
  }
  protected:
  explicit CornerPt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parkingspace_2eproto);
    return ::descriptor_table_parkingspace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagePtFieldNumber = 2,
    kVehiclePtFieldNumber = 3,
    kOdomPtFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // .perception.common.Point2D image_pt = 2;
  bool has_image_pt() const;
  private:
  bool _internal_has_image_pt() const;
  public:
  void clear_image_pt();
  const ::perception::common::Point2D& image_pt() const;
  ::perception::common::Point2D* release_image_pt();
  ::perception::common::Point2D* mutable_image_pt();
  void set_allocated_image_pt(::perception::common::Point2D* image_pt);
  private:
  const ::perception::common::Point2D& _internal_image_pt() const;
  ::perception::common::Point2D* _internal_mutable_image_pt();
  public:
  void unsafe_arena_set_allocated_image_pt(
      ::perception::common::Point2D* image_pt);
  ::perception::common::Point2D* unsafe_arena_release_image_pt();

  // .perception.common.Point2D vehicle_pt = 3;
  bool has_vehicle_pt() const;
  private:
  bool _internal_has_vehicle_pt() const;
  public:
  void clear_vehicle_pt();
  const ::perception::common::Point2D& vehicle_pt() const;
  ::perception::common::Point2D* release_vehicle_pt();
  ::perception::common::Point2D* mutable_vehicle_pt();
  void set_allocated_vehicle_pt(::perception::common::Point2D* vehicle_pt);
  private:
  const ::perception::common::Point2D& _internal_vehicle_pt() const;
  ::perception::common::Point2D* _internal_mutable_vehicle_pt();
  public:
  void unsafe_arena_set_allocated_vehicle_pt(
      ::perception::common::Point2D* vehicle_pt);
  ::perception::common::Point2D* unsafe_arena_release_vehicle_pt();

  // .perception.common.Point2D odom_pt = 4;
  bool has_odom_pt() const;
  private:
  bool _internal_has_odom_pt() const;
  public:
  void clear_odom_pt();
  const ::perception::common::Point2D& odom_pt() const;
  ::perception::common::Point2D* release_odom_pt();
  ::perception::common::Point2D* mutable_odom_pt();
  void set_allocated_odom_pt(::perception::common::Point2D* odom_pt);
  private:
  const ::perception::common::Point2D& _internal_odom_pt() const;
  ::perception::common::Point2D* _internal_mutable_odom_pt();
  public:
  void unsafe_arena_set_allocated_odom_pt(
      ::perception::common::Point2D* odom_pt);
  ::perception::common::Point2D* unsafe_arena_release_odom_pt();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.CornerPt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::Point2D* image_pt_;
  ::perception::common::Point2D* vehicle_pt_;
  ::perception::common::Point2D* odom_pt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parkingspace_2eproto;
};
// -------------------------------------------------------------------

class RodPt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.RodPt) */ {
 public:
  inline RodPt() : RodPt(nullptr) {};
  virtual ~RodPt();

  RodPt(const RodPt& from);
  RodPt(RodPt&& from) noexcept
    : RodPt() {
    *this = ::std::move(from);
  }

  inline RodPt& operator=(const RodPt& from) {
    CopyFrom(from);
    return *this;
  }
  inline RodPt& operator=(RodPt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RodPt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RodPt* internal_default_instance() {
    return reinterpret_cast<const RodPt*>(
               &_RodPt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RodPt& a, RodPt& b) {
    a.Swap(&b);
  }
  inline void Swap(RodPt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RodPt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RodPt* New() const final {
    return CreateMaybeMessage<RodPt>(nullptr);
  }

  RodPt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RodPt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RodPt& from);
  void MergeFrom(const RodPt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RodPt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.RodPt";
  }
  protected:
  explicit RodPt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parkingspace_2eproto);
    return ::descriptor_table_parkingspace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagePtFieldNumber = 2,
    kVehiclePtFieldNumber = 3,
    kOdomPtFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // .perception.common.Point2D image_pt = 2;
  bool has_image_pt() const;
  private:
  bool _internal_has_image_pt() const;
  public:
  void clear_image_pt();
  const ::perception::common::Point2D& image_pt() const;
  ::perception::common::Point2D* release_image_pt();
  ::perception::common::Point2D* mutable_image_pt();
  void set_allocated_image_pt(::perception::common::Point2D* image_pt);
  private:
  const ::perception::common::Point2D& _internal_image_pt() const;
  ::perception::common::Point2D* _internal_mutable_image_pt();
  public:
  void unsafe_arena_set_allocated_image_pt(
      ::perception::common::Point2D* image_pt);
  ::perception::common::Point2D* unsafe_arena_release_image_pt();

  // .perception.common.Point2D vehicle_pt = 3;
  bool has_vehicle_pt() const;
  private:
  bool _internal_has_vehicle_pt() const;
  public:
  void clear_vehicle_pt();
  const ::perception::common::Point2D& vehicle_pt() const;
  ::perception::common::Point2D* release_vehicle_pt();
  ::perception::common::Point2D* mutable_vehicle_pt();
  void set_allocated_vehicle_pt(::perception::common::Point2D* vehicle_pt);
  private:
  const ::perception::common::Point2D& _internal_vehicle_pt() const;
  ::perception::common::Point2D* _internal_mutable_vehicle_pt();
  public:
  void unsafe_arena_set_allocated_vehicle_pt(
      ::perception::common::Point2D* vehicle_pt);
  ::perception::common::Point2D* unsafe_arena_release_vehicle_pt();

  // .perception.common.Point2D odom_pt = 4;
  bool has_odom_pt() const;
  private:
  bool _internal_has_odom_pt() const;
  public:
  void clear_odom_pt();
  const ::perception::common::Point2D& odom_pt() const;
  ::perception::common::Point2D* release_odom_pt();
  ::perception::common::Point2D* mutable_odom_pt();
  void set_allocated_odom_pt(::perception::common::Point2D* odom_pt);
  private:
  const ::perception::common::Point2D& _internal_odom_pt() const;
  ::perception::common::Point2D* _internal_mutable_odom_pt();
  public:
  void unsafe_arena_set_allocated_odom_pt(
      ::perception::common::Point2D* odom_pt);
  ::perception::common::Point2D* unsafe_arena_release_odom_pt();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.RodPt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::Point2D* image_pt_;
  ::perception::common::Point2D* vehicle_pt_;
  ::perception::common::Point2D* odom_pt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parkingspace_2eproto;
};
// -------------------------------------------------------------------

class ParkingSlot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.ParkingSlot) */ {
 public:
  inline ParkingSlot() : ParkingSlot(nullptr) {};
  virtual ~ParkingSlot();

  ParkingSlot(const ParkingSlot& from);
  ParkingSlot(ParkingSlot&& from) noexcept
    : ParkingSlot() {
    *this = ::std::move(from);
  }

  inline ParkingSlot& operator=(const ParkingSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingSlot& operator=(ParkingSlot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkingSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingSlot* internal_default_instance() {
    return reinterpret_cast<const ParkingSlot*>(
               &_ParkingSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ParkingSlot& a, ParkingSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkingSlot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParkingSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParkingSlot* New() const final {
    return CreateMaybeMessage<ParkingSlot>(nullptr);
  }

  ParkingSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkingSlot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkingSlot& from);
  void MergeFrom(const ParkingSlot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingSlot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.ParkingSlot";
  }
  protected:
  explicit ParkingSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parkingspace_2eproto);
    return ::descriptor_table_parkingspace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ParkingSlot_ParkSlotType ParkSlotType;
  static constexpr ParkSlotType kUnknown =
    ParkingSlot_ParkSlotType_kUnknown;
  static constexpr ParkSlotType kVerticalSpot =
    ParkingSlot_ParkSlotType_kVerticalSpot;
  static constexpr ParkSlotType kHorizontalSpot =
    ParkingSlot_ParkSlotType_kHorizontalSpot;
  static constexpr ParkSlotType kObliqueSpot =
    ParkingSlot_ParkSlotType_kObliqueSpot;
  static inline bool ParkSlotType_IsValid(int value) {
    return ParkingSlot_ParkSlotType_IsValid(value);
  }
  static constexpr ParkSlotType ParkSlotType_MIN =
    ParkingSlot_ParkSlotType_ParkSlotType_MIN;
  static constexpr ParkSlotType ParkSlotType_MAX =
    ParkingSlot_ParkSlotType_ParkSlotType_MAX;
  static constexpr int ParkSlotType_ARRAYSIZE =
    ParkingSlot_ParkSlotType_ParkSlotType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ParkSlotType_descriptor() {
    return ParkingSlot_ParkSlotType_descriptor();
  }
  template<typename T>
  static inline const std::string& ParkSlotType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ParkSlotType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ParkSlotType_Name.");
    return ParkingSlot_ParkSlotType_Name(enum_t_value);
  }
  static inline bool ParkSlotType_Parse(const std::string& name,
      ParkSlotType* value) {
    return ParkingSlot_ParkSlotType_Parse(name, value);
  }

  typedef ParkingSlot_SearchStage SearchStage;
  static constexpr SearchStage kSsDefault =
    ParkingSlot_SearchStage_kSsDefault;
  static constexpr SearchStage kSsDiscontent =
    ParkingSlot_SearchStage_kSsDiscontent;
  static constexpr SearchStage kSsFront =
    ParkingSlot_SearchStage_kSsFront;
  static constexpr SearchStage kSsSide =
    ParkingSlot_SearchStage_kSsSide;
  static constexpr SearchStage kSsRear =
    ParkingSlot_SearchStage_kSsRear;
  static inline bool SearchStage_IsValid(int value) {
    return ParkingSlot_SearchStage_IsValid(value);
  }
  static constexpr SearchStage SearchStage_MIN =
    ParkingSlot_SearchStage_SearchStage_MIN;
  static constexpr SearchStage SearchStage_MAX =
    ParkingSlot_SearchStage_SearchStage_MAX;
  static constexpr int SearchStage_ARRAYSIZE =
    ParkingSlot_SearchStage_SearchStage_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SearchStage_descriptor() {
    return ParkingSlot_SearchStage_descriptor();
  }
  template<typename T>
  static inline const std::string& SearchStage_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SearchStage>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SearchStage_Name.");
    return ParkingSlot_SearchStage_Name(enum_t_value);
  }
  static inline bool SearchStage_Parse(const std::string& name,
      SearchStage* value) {
    return ParkingSlot_SearchStage_Parse(name, value);
  }

  typedef ParkingSlot_ParkingStage ParkingStage;
  static constexpr ParkingStage kPsDefault =
    ParkingSlot_ParkingStage_kPsDefault;
  static constexpr ParkingStage kPsDiscontent =
    ParkingSlot_ParkingStage_kPsDiscontent;
  static constexpr ParkingStage kPsOutside =
    ParkingSlot_ParkingStage_kPsOutside;
  static constexpr ParkingStage kPsInside =
    ParkingSlot_ParkingStage_kPsInside;
  static constexpr ParkingStage KInsideContinuously =
    ParkingSlot_ParkingStage_KInsideContinuously;
  static inline bool ParkingStage_IsValid(int value) {
    return ParkingSlot_ParkingStage_IsValid(value);
  }
  static constexpr ParkingStage ParkingStage_MIN =
    ParkingSlot_ParkingStage_ParkingStage_MIN;
  static constexpr ParkingStage ParkingStage_MAX =
    ParkingSlot_ParkingStage_ParkingStage_MAX;
  static constexpr int ParkingStage_ARRAYSIZE =
    ParkingSlot_ParkingStage_ParkingStage_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ParkingStage_descriptor() {
    return ParkingSlot_ParkingStage_descriptor();
  }
  template<typename T>
  static inline const std::string& ParkingStage_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ParkingStage>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ParkingStage_Name.");
    return ParkingSlot_ParkingStage_Name(enum_t_value);
  }
  static inline bool ParkingStage_Parse(const std::string& name,
      ParkingStage* value) {
    return ParkingSlot_ParkingStage_Parse(name, value);
  }

  typedef ParkingSlot_RodStage RodStage;
  static constexpr RodStage kRsDefault =
    ParkingSlot_RodStage_kRsDefault;
  static constexpr RodStage kRsDiscontent =
    ParkingSlot_RodStage_kRsDiscontent;
  static constexpr RodStage kRsFar =
    ParkingSlot_RodStage_kRsFar;
  static constexpr RodStage kRsNear =
    ParkingSlot_RodStage_kRsNear;
  static constexpr RodStage kRsClose =
    ParkingSlot_RodStage_kRsClose;
  static inline bool RodStage_IsValid(int value) {
    return ParkingSlot_RodStage_IsValid(value);
  }
  static constexpr RodStage RodStage_MIN =
    ParkingSlot_RodStage_RodStage_MIN;
  static constexpr RodStage RodStage_MAX =
    ParkingSlot_RodStage_RodStage_MAX;
  static constexpr int RodStage_ARRAYSIZE =
    ParkingSlot_RodStage_RodStage_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RodStage_descriptor() {
    return ParkingSlot_RodStage_descriptor();
  }
  template<typename T>
  static inline const std::string& RodStage_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RodStage>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RodStage_Name.");
    return ParkingSlot_RodStage_Name(enum_t_value);
  }
  static inline bool RodStage_Parse(const std::string& name,
      RodStage* value) {
    return ParkingSlot_RodStage_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCornerPtsFieldNumber = 2,
    kRodPtsFieldNumber = 10,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kWidthFieldNumber = 5,
    kLengthFieldNumber = 6,
    kOccupiedFieldNumber = 4,
    kExistRodFieldNumber = 9,
    kSearchStageFieldNumber = 7,
    kParkingStageFieldNumber = 8,
    kRodStageFieldNumber = 11,
  };
  // repeated .perception.CornerPt corner_pts = 2;
  int corner_pts_size() const;
  private:
  int _internal_corner_pts_size() const;
  public:
  void clear_corner_pts();
  ::perception::CornerPt* mutable_corner_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::CornerPt >*
      mutable_corner_pts();
  private:
  const ::perception::CornerPt& _internal_corner_pts(int index) const;
  ::perception::CornerPt* _internal_add_corner_pts();
  public:
  const ::perception::CornerPt& corner_pts(int index) const;
  ::perception::CornerPt* add_corner_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::CornerPt >&
      corner_pts() const;

  // repeated .perception.RodPt rod_pts = 10;
  int rod_pts_size() const;
  private:
  int _internal_rod_pts_size() const;
  public:
  void clear_rod_pts();
  ::perception::RodPt* mutable_rod_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RodPt >*
      mutable_rod_pts();
  private:
  const ::perception::RodPt& _internal_rod_pts(int index) const;
  ::perception::RodPt* _internal_add_rod_pts();
  public:
  const ::perception::RodPt& rod_pts(int index) const;
  ::perception::RodPt* add_rod_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RodPt >&
      rod_pts() const;

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .perception.ParkingSlot.ParkSlotType type = 3;
  void clear_type();
  ::perception::ParkingSlot_ParkSlotType type() const;
  void set_type(::perception::ParkingSlot_ParkSlotType value);
  private:
  ::perception::ParkingSlot_ParkSlotType _internal_type() const;
  void _internal_set_type(::perception::ParkingSlot_ParkSlotType value);
  public:

  // double width = 5;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double length = 6;
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // bool occupied = 4;
  void clear_occupied();
  bool occupied() const;
  void set_occupied(bool value);
  private:
  bool _internal_occupied() const;
  void _internal_set_occupied(bool value);
  public:

  // bool exist_rod = 9;
  void clear_exist_rod();
  bool exist_rod() const;
  void set_exist_rod(bool value);
  private:
  bool _internal_exist_rod() const;
  void _internal_set_exist_rod(bool value);
  public:

  // .perception.ParkingSlot.SearchStage search_stage = 7;
  void clear_search_stage();
  ::perception::ParkingSlot_SearchStage search_stage() const;
  void set_search_stage(::perception::ParkingSlot_SearchStage value);
  private:
  ::perception::ParkingSlot_SearchStage _internal_search_stage() const;
  void _internal_set_search_stage(::perception::ParkingSlot_SearchStage value);
  public:

  // .perception.ParkingSlot.ParkingStage parking_stage = 8;
  void clear_parking_stage();
  ::perception::ParkingSlot_ParkingStage parking_stage() const;
  void set_parking_stage(::perception::ParkingSlot_ParkingStage value);
  private:
  ::perception::ParkingSlot_ParkingStage _internal_parking_stage() const;
  void _internal_set_parking_stage(::perception::ParkingSlot_ParkingStage value);
  public:

  // .perception.ParkingSlot.RodStage rod_stage = 11;
  void clear_rod_stage();
  ::perception::ParkingSlot_RodStage rod_stage() const;
  void set_rod_stage(::perception::ParkingSlot_RodStage value);
  private:
  ::perception::ParkingSlot_RodStage _internal_rod_stage() const;
  void _internal_set_rod_stage(::perception::ParkingSlot_RodStage value);
  public:

  // @@protoc_insertion_point(class_scope:perception.ParkingSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::CornerPt > corner_pts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RodPt > rod_pts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int type_;
  double width_;
  double length_;
  bool occupied_;
  bool exist_rod_;
  int search_stage_;
  int parking_stage_;
  int rod_stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parkingspace_2eproto;
};
// -------------------------------------------------------------------

class ParkingSpace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.ParkingSpace) */ {
 public:
  inline ParkingSpace() : ParkingSpace(nullptr) {};
  virtual ~ParkingSpace();

  ParkingSpace(const ParkingSpace& from);
  ParkingSpace(ParkingSpace&& from) noexcept
    : ParkingSpace() {
    *this = ::std::move(from);
  }

  inline ParkingSpace& operator=(const ParkingSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingSpace& operator=(ParkingSpace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkingSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingSpace* internal_default_instance() {
    return reinterpret_cast<const ParkingSpace*>(
               &_ParkingSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ParkingSpace& a, ParkingSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkingSpace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParkingSpace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParkingSpace* New() const final {
    return CreateMaybeMessage<ParkingSpace>(nullptr);
  }

  ParkingSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkingSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkingSpace& from);
  void MergeFrom(const ParkingSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.ParkingSpace";
  }
  protected:
  explicit ParkingSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parkingspace_2eproto);
    return ::descriptor_table_parkingspace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParkslotsFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kTickFieldNumber = 4,
    kSourceFieldNumber = 5,
  };
  // repeated .perception.ParkingSlot parkslots = 1;
  int parkslots_size() const;
  private:
  int _internal_parkslots_size() const;
  public:
  void clear_parkslots();
  ::perception::ParkingSlot* mutable_parkslots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ParkingSlot >*
      mutable_parkslots();
  private:
  const ::perception::ParkingSlot& _internal_parkslots(int index) const;
  ::perception::ParkingSlot* _internal_add_parkslots();
  public:
  const ::perception::ParkingSlot& parkslots(int index) const;
  ::perception::ParkingSlot* add_parkslots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ParkingSlot >&
      parkslots() const;

  // uint64 frame_id = 2;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 4;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .minieye.DataSource source = 5;
  void clear_source();
  ::minieye::DataSource source() const;
  void set_source(::minieye::DataSource value);
  private:
  ::minieye::DataSource _internal_source() const;
  void _internal_set_source(::minieye::DataSource value);
  public:

  // @@protoc_insertion_point(class_scope:perception.ParkingSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ParkingSlot > parkslots_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  int source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parkingspace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CornerPt

// uint32 id = 1;
inline void CornerPt::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CornerPt::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CornerPt::id() const {
  // @@protoc_insertion_point(field_get:perception.CornerPt.id)
  return _internal_id();
}
inline void CornerPt::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CornerPt::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perception.CornerPt.id)
}

// .perception.common.Point2D image_pt = 2;
inline bool CornerPt::_internal_has_image_pt() const {
  return this != internal_default_instance() && image_pt_ != nullptr;
}
inline bool CornerPt::has_image_pt() const {
  return _internal_has_image_pt();
}
inline const ::perception::common::Point2D& CornerPt::_internal_image_pt() const {
  const ::perception::common::Point2D* p = image_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point2D*>(
      &::perception::common::_Point2D_default_instance_);
}
inline const ::perception::common::Point2D& CornerPt::image_pt() const {
  // @@protoc_insertion_point(field_get:perception.CornerPt.image_pt)
  return _internal_image_pt();
}
inline void CornerPt::unsafe_arena_set_allocated_image_pt(
    ::perception::common::Point2D* image_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_pt_);
  }
  image_pt_ = image_pt;
  if (image_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.CornerPt.image_pt)
}
inline ::perception::common::Point2D* CornerPt::release_image_pt() {
  auto temp = unsafe_arena_release_image_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point2D* CornerPt::unsafe_arena_release_image_pt() {
  // @@protoc_insertion_point(field_release:perception.CornerPt.image_pt)
  
  ::perception::common::Point2D* temp = image_pt_;
  image_pt_ = nullptr;
  return temp;
}
inline ::perception::common::Point2D* CornerPt::_internal_mutable_image_pt() {
  
  if (image_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point2D>(GetArena());
    image_pt_ = p;
  }
  return image_pt_;
}
inline ::perception::common::Point2D* CornerPt::mutable_image_pt() {
  // @@protoc_insertion_point(field_mutable:perception.CornerPt.image_pt)
  return _internal_mutable_image_pt();
}
inline void CornerPt::set_allocated_image_pt(::perception::common::Point2D* image_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_pt_);
  }
  if (image_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_pt)->GetArena();
    if (message_arena != submessage_arena) {
      image_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_pt, submessage_arena);
    }
    
  } else {
    
  }
  image_pt_ = image_pt;
  // @@protoc_insertion_point(field_set_allocated:perception.CornerPt.image_pt)
}

// .perception.common.Point2D vehicle_pt = 3;
inline bool CornerPt::_internal_has_vehicle_pt() const {
  return this != internal_default_instance() && vehicle_pt_ != nullptr;
}
inline bool CornerPt::has_vehicle_pt() const {
  return _internal_has_vehicle_pt();
}
inline const ::perception::common::Point2D& CornerPt::_internal_vehicle_pt() const {
  const ::perception::common::Point2D* p = vehicle_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point2D*>(
      &::perception::common::_Point2D_default_instance_);
}
inline const ::perception::common::Point2D& CornerPt::vehicle_pt() const {
  // @@protoc_insertion_point(field_get:perception.CornerPt.vehicle_pt)
  return _internal_vehicle_pt();
}
inline void CornerPt::unsafe_arena_set_allocated_vehicle_pt(
    ::perception::common::Point2D* vehicle_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_pt_);
  }
  vehicle_pt_ = vehicle_pt;
  if (vehicle_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.CornerPt.vehicle_pt)
}
inline ::perception::common::Point2D* CornerPt::release_vehicle_pt() {
  auto temp = unsafe_arena_release_vehicle_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point2D* CornerPt::unsafe_arena_release_vehicle_pt() {
  // @@protoc_insertion_point(field_release:perception.CornerPt.vehicle_pt)
  
  ::perception::common::Point2D* temp = vehicle_pt_;
  vehicle_pt_ = nullptr;
  return temp;
}
inline ::perception::common::Point2D* CornerPt::_internal_mutable_vehicle_pt() {
  
  if (vehicle_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point2D>(GetArena());
    vehicle_pt_ = p;
  }
  return vehicle_pt_;
}
inline ::perception::common::Point2D* CornerPt::mutable_vehicle_pt() {
  // @@protoc_insertion_point(field_mutable:perception.CornerPt.vehicle_pt)
  return _internal_mutable_vehicle_pt();
}
inline void CornerPt::set_allocated_vehicle_pt(::perception::common::Point2D* vehicle_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_pt_);
  }
  if (vehicle_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_pt)->GetArena();
    if (message_arena != submessage_arena) {
      vehicle_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_pt, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_pt_ = vehicle_pt;
  // @@protoc_insertion_point(field_set_allocated:perception.CornerPt.vehicle_pt)
}

// .perception.common.Point2D odom_pt = 4;
inline bool CornerPt::_internal_has_odom_pt() const {
  return this != internal_default_instance() && odom_pt_ != nullptr;
}
inline bool CornerPt::has_odom_pt() const {
  return _internal_has_odom_pt();
}
inline const ::perception::common::Point2D& CornerPt::_internal_odom_pt() const {
  const ::perception::common::Point2D* p = odom_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point2D*>(
      &::perception::common::_Point2D_default_instance_);
}
inline const ::perception::common::Point2D& CornerPt::odom_pt() const {
  // @@protoc_insertion_point(field_get:perception.CornerPt.odom_pt)
  return _internal_odom_pt();
}
inline void CornerPt::unsafe_arena_set_allocated_odom_pt(
    ::perception::common::Point2D* odom_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odom_pt_);
  }
  odom_pt_ = odom_pt;
  if (odom_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.CornerPt.odom_pt)
}
inline ::perception::common::Point2D* CornerPt::release_odom_pt() {
  auto temp = unsafe_arena_release_odom_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point2D* CornerPt::unsafe_arena_release_odom_pt() {
  // @@protoc_insertion_point(field_release:perception.CornerPt.odom_pt)
  
  ::perception::common::Point2D* temp = odom_pt_;
  odom_pt_ = nullptr;
  return temp;
}
inline ::perception::common::Point2D* CornerPt::_internal_mutable_odom_pt() {
  
  if (odom_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point2D>(GetArena());
    odom_pt_ = p;
  }
  return odom_pt_;
}
inline ::perception::common::Point2D* CornerPt::mutable_odom_pt() {
  // @@protoc_insertion_point(field_mutable:perception.CornerPt.odom_pt)
  return _internal_mutable_odom_pt();
}
inline void CornerPt::set_allocated_odom_pt(::perception::common::Point2D* odom_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(odom_pt_);
  }
  if (odom_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odom_pt)->GetArena();
    if (message_arena != submessage_arena) {
      odom_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odom_pt, submessage_arena);
    }
    
  } else {
    
  }
  odom_pt_ = odom_pt;
  // @@protoc_insertion_point(field_set_allocated:perception.CornerPt.odom_pt)
}

// -------------------------------------------------------------------

// RodPt

// uint32 id = 1;
inline void RodPt::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RodPt::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RodPt::id() const {
  // @@protoc_insertion_point(field_get:perception.RodPt.id)
  return _internal_id();
}
inline void RodPt::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void RodPt::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perception.RodPt.id)
}

// .perception.common.Point2D image_pt = 2;
inline bool RodPt::_internal_has_image_pt() const {
  return this != internal_default_instance() && image_pt_ != nullptr;
}
inline bool RodPt::has_image_pt() const {
  return _internal_has_image_pt();
}
inline const ::perception::common::Point2D& RodPt::_internal_image_pt() const {
  const ::perception::common::Point2D* p = image_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point2D*>(
      &::perception::common::_Point2D_default_instance_);
}
inline const ::perception::common::Point2D& RodPt::image_pt() const {
  // @@protoc_insertion_point(field_get:perception.RodPt.image_pt)
  return _internal_image_pt();
}
inline void RodPt::unsafe_arena_set_allocated_image_pt(
    ::perception::common::Point2D* image_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_pt_);
  }
  image_pt_ = image_pt;
  if (image_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.RodPt.image_pt)
}
inline ::perception::common::Point2D* RodPt::release_image_pt() {
  auto temp = unsafe_arena_release_image_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point2D* RodPt::unsafe_arena_release_image_pt() {
  // @@protoc_insertion_point(field_release:perception.RodPt.image_pt)
  
  ::perception::common::Point2D* temp = image_pt_;
  image_pt_ = nullptr;
  return temp;
}
inline ::perception::common::Point2D* RodPt::_internal_mutable_image_pt() {
  
  if (image_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point2D>(GetArena());
    image_pt_ = p;
  }
  return image_pt_;
}
inline ::perception::common::Point2D* RodPt::mutable_image_pt() {
  // @@protoc_insertion_point(field_mutable:perception.RodPt.image_pt)
  return _internal_mutable_image_pt();
}
inline void RodPt::set_allocated_image_pt(::perception::common::Point2D* image_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_pt_);
  }
  if (image_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_pt)->GetArena();
    if (message_arena != submessage_arena) {
      image_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_pt, submessage_arena);
    }
    
  } else {
    
  }
  image_pt_ = image_pt;
  // @@protoc_insertion_point(field_set_allocated:perception.RodPt.image_pt)
}

// .perception.common.Point2D vehicle_pt = 3;
inline bool RodPt::_internal_has_vehicle_pt() const {
  return this != internal_default_instance() && vehicle_pt_ != nullptr;
}
inline bool RodPt::has_vehicle_pt() const {
  return _internal_has_vehicle_pt();
}
inline const ::perception::common::Point2D& RodPt::_internal_vehicle_pt() const {
  const ::perception::common::Point2D* p = vehicle_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point2D*>(
      &::perception::common::_Point2D_default_instance_);
}
inline const ::perception::common::Point2D& RodPt::vehicle_pt() const {
  // @@protoc_insertion_point(field_get:perception.RodPt.vehicle_pt)
  return _internal_vehicle_pt();
}
inline void RodPt::unsafe_arena_set_allocated_vehicle_pt(
    ::perception::common::Point2D* vehicle_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_pt_);
  }
  vehicle_pt_ = vehicle_pt;
  if (vehicle_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.RodPt.vehicle_pt)
}
inline ::perception::common::Point2D* RodPt::release_vehicle_pt() {
  auto temp = unsafe_arena_release_vehicle_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point2D* RodPt::unsafe_arena_release_vehicle_pt() {
  // @@protoc_insertion_point(field_release:perception.RodPt.vehicle_pt)
  
  ::perception::common::Point2D* temp = vehicle_pt_;
  vehicle_pt_ = nullptr;
  return temp;
}
inline ::perception::common::Point2D* RodPt::_internal_mutable_vehicle_pt() {
  
  if (vehicle_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point2D>(GetArena());
    vehicle_pt_ = p;
  }
  return vehicle_pt_;
}
inline ::perception::common::Point2D* RodPt::mutable_vehicle_pt() {
  // @@protoc_insertion_point(field_mutable:perception.RodPt.vehicle_pt)
  return _internal_mutable_vehicle_pt();
}
inline void RodPt::set_allocated_vehicle_pt(::perception::common::Point2D* vehicle_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_pt_);
  }
  if (vehicle_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_pt)->GetArena();
    if (message_arena != submessage_arena) {
      vehicle_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_pt, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_pt_ = vehicle_pt;
  // @@protoc_insertion_point(field_set_allocated:perception.RodPt.vehicle_pt)
}

// .perception.common.Point2D odom_pt = 4;
inline bool RodPt::_internal_has_odom_pt() const {
  return this != internal_default_instance() && odom_pt_ != nullptr;
}
inline bool RodPt::has_odom_pt() const {
  return _internal_has_odom_pt();
}
inline const ::perception::common::Point2D& RodPt::_internal_odom_pt() const {
  const ::perception::common::Point2D* p = odom_pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point2D*>(
      &::perception::common::_Point2D_default_instance_);
}
inline const ::perception::common::Point2D& RodPt::odom_pt() const {
  // @@protoc_insertion_point(field_get:perception.RodPt.odom_pt)
  return _internal_odom_pt();
}
inline void RodPt::unsafe_arena_set_allocated_odom_pt(
    ::perception::common::Point2D* odom_pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odom_pt_);
  }
  odom_pt_ = odom_pt;
  if (odom_pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.RodPt.odom_pt)
}
inline ::perception::common::Point2D* RodPt::release_odom_pt() {
  auto temp = unsafe_arena_release_odom_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point2D* RodPt::unsafe_arena_release_odom_pt() {
  // @@protoc_insertion_point(field_release:perception.RodPt.odom_pt)
  
  ::perception::common::Point2D* temp = odom_pt_;
  odom_pt_ = nullptr;
  return temp;
}
inline ::perception::common::Point2D* RodPt::_internal_mutable_odom_pt() {
  
  if (odom_pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point2D>(GetArena());
    odom_pt_ = p;
  }
  return odom_pt_;
}
inline ::perception::common::Point2D* RodPt::mutable_odom_pt() {
  // @@protoc_insertion_point(field_mutable:perception.RodPt.odom_pt)
  return _internal_mutable_odom_pt();
}
inline void RodPt::set_allocated_odom_pt(::perception::common::Point2D* odom_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(odom_pt_);
  }
  if (odom_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odom_pt)->GetArena();
    if (message_arena != submessage_arena) {
      odom_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odom_pt, submessage_arena);
    }
    
  } else {
    
  }
  odom_pt_ = odom_pt;
  // @@protoc_insertion_point(field_set_allocated:perception.RodPt.odom_pt)
}

// -------------------------------------------------------------------

// ParkingSlot

// uint32 id = 1;
inline void ParkingSlot::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingSlot::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingSlot::id() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.id)
  return _internal_id();
}
inline void ParkingSlot::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ParkingSlot::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.id)
}

// repeated .perception.CornerPt corner_pts = 2;
inline int ParkingSlot::_internal_corner_pts_size() const {
  return corner_pts_.size();
}
inline int ParkingSlot::corner_pts_size() const {
  return _internal_corner_pts_size();
}
inline void ParkingSlot::clear_corner_pts() {
  corner_pts_.Clear();
}
inline ::perception::CornerPt* ParkingSlot::mutable_corner_pts(int index) {
  // @@protoc_insertion_point(field_mutable:perception.ParkingSlot.corner_pts)
  return corner_pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::CornerPt >*
ParkingSlot::mutable_corner_pts() {
  // @@protoc_insertion_point(field_mutable_list:perception.ParkingSlot.corner_pts)
  return &corner_pts_;
}
inline const ::perception::CornerPt& ParkingSlot::_internal_corner_pts(int index) const {
  return corner_pts_.Get(index);
}
inline const ::perception::CornerPt& ParkingSlot::corner_pts(int index) const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.corner_pts)
  return _internal_corner_pts(index);
}
inline ::perception::CornerPt* ParkingSlot::_internal_add_corner_pts() {
  return corner_pts_.Add();
}
inline ::perception::CornerPt* ParkingSlot::add_corner_pts() {
  // @@protoc_insertion_point(field_add:perception.ParkingSlot.corner_pts)
  return _internal_add_corner_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::CornerPt >&
ParkingSlot::corner_pts() const {
  // @@protoc_insertion_point(field_list:perception.ParkingSlot.corner_pts)
  return corner_pts_;
}

// .perception.ParkingSlot.ParkSlotType type = 3;
inline void ParkingSlot::clear_type() {
  type_ = 0;
}
inline ::perception::ParkingSlot_ParkSlotType ParkingSlot::_internal_type() const {
  return static_cast< ::perception::ParkingSlot_ParkSlotType >(type_);
}
inline ::perception::ParkingSlot_ParkSlotType ParkingSlot::type() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.type)
  return _internal_type();
}
inline void ParkingSlot::_internal_set_type(::perception::ParkingSlot_ParkSlotType value) {
  
  type_ = value;
}
inline void ParkingSlot::set_type(::perception::ParkingSlot_ParkSlotType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.type)
}

// bool occupied = 4;
inline void ParkingSlot::clear_occupied() {
  occupied_ = false;
}
inline bool ParkingSlot::_internal_occupied() const {
  return occupied_;
}
inline bool ParkingSlot::occupied() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.occupied)
  return _internal_occupied();
}
inline void ParkingSlot::_internal_set_occupied(bool value) {
  
  occupied_ = value;
}
inline void ParkingSlot::set_occupied(bool value) {
  _internal_set_occupied(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.occupied)
}

// double width = 5;
inline void ParkingSlot::clear_width() {
  width_ = 0;
}
inline double ParkingSlot::_internal_width() const {
  return width_;
}
inline double ParkingSlot::width() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.width)
  return _internal_width();
}
inline void ParkingSlot::_internal_set_width(double value) {
  
  width_ = value;
}
inline void ParkingSlot::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.width)
}

// double length = 6;
inline void ParkingSlot::clear_length() {
  length_ = 0;
}
inline double ParkingSlot::_internal_length() const {
  return length_;
}
inline double ParkingSlot::length() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.length)
  return _internal_length();
}
inline void ParkingSlot::_internal_set_length(double value) {
  
  length_ = value;
}
inline void ParkingSlot::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.length)
}

// .perception.ParkingSlot.SearchStage search_stage = 7;
inline void ParkingSlot::clear_search_stage() {
  search_stage_ = 0;
}
inline ::perception::ParkingSlot_SearchStage ParkingSlot::_internal_search_stage() const {
  return static_cast< ::perception::ParkingSlot_SearchStage >(search_stage_);
}
inline ::perception::ParkingSlot_SearchStage ParkingSlot::search_stage() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.search_stage)
  return _internal_search_stage();
}
inline void ParkingSlot::_internal_set_search_stage(::perception::ParkingSlot_SearchStage value) {
  
  search_stage_ = value;
}
inline void ParkingSlot::set_search_stage(::perception::ParkingSlot_SearchStage value) {
  _internal_set_search_stage(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.search_stage)
}

// .perception.ParkingSlot.ParkingStage parking_stage = 8;
inline void ParkingSlot::clear_parking_stage() {
  parking_stage_ = 0;
}
inline ::perception::ParkingSlot_ParkingStage ParkingSlot::_internal_parking_stage() const {
  return static_cast< ::perception::ParkingSlot_ParkingStage >(parking_stage_);
}
inline ::perception::ParkingSlot_ParkingStage ParkingSlot::parking_stage() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.parking_stage)
  return _internal_parking_stage();
}
inline void ParkingSlot::_internal_set_parking_stage(::perception::ParkingSlot_ParkingStage value) {
  
  parking_stage_ = value;
}
inline void ParkingSlot::set_parking_stage(::perception::ParkingSlot_ParkingStage value) {
  _internal_set_parking_stage(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.parking_stage)
}

// bool exist_rod = 9;
inline void ParkingSlot::clear_exist_rod() {
  exist_rod_ = false;
}
inline bool ParkingSlot::_internal_exist_rod() const {
  return exist_rod_;
}
inline bool ParkingSlot::exist_rod() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.exist_rod)
  return _internal_exist_rod();
}
inline void ParkingSlot::_internal_set_exist_rod(bool value) {
  
  exist_rod_ = value;
}
inline void ParkingSlot::set_exist_rod(bool value) {
  _internal_set_exist_rod(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.exist_rod)
}

// repeated .perception.RodPt rod_pts = 10;
inline int ParkingSlot::_internal_rod_pts_size() const {
  return rod_pts_.size();
}
inline int ParkingSlot::rod_pts_size() const {
  return _internal_rod_pts_size();
}
inline void ParkingSlot::clear_rod_pts() {
  rod_pts_.Clear();
}
inline ::perception::RodPt* ParkingSlot::mutable_rod_pts(int index) {
  // @@protoc_insertion_point(field_mutable:perception.ParkingSlot.rod_pts)
  return rod_pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RodPt >*
ParkingSlot::mutable_rod_pts() {
  // @@protoc_insertion_point(field_mutable_list:perception.ParkingSlot.rod_pts)
  return &rod_pts_;
}
inline const ::perception::RodPt& ParkingSlot::_internal_rod_pts(int index) const {
  return rod_pts_.Get(index);
}
inline const ::perception::RodPt& ParkingSlot::rod_pts(int index) const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.rod_pts)
  return _internal_rod_pts(index);
}
inline ::perception::RodPt* ParkingSlot::_internal_add_rod_pts() {
  return rod_pts_.Add();
}
inline ::perception::RodPt* ParkingSlot::add_rod_pts() {
  // @@protoc_insertion_point(field_add:perception.ParkingSlot.rod_pts)
  return _internal_add_rod_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::RodPt >&
ParkingSlot::rod_pts() const {
  // @@protoc_insertion_point(field_list:perception.ParkingSlot.rod_pts)
  return rod_pts_;
}

// .perception.ParkingSlot.RodStage rod_stage = 11;
inline void ParkingSlot::clear_rod_stage() {
  rod_stage_ = 0;
}
inline ::perception::ParkingSlot_RodStage ParkingSlot::_internal_rod_stage() const {
  return static_cast< ::perception::ParkingSlot_RodStage >(rod_stage_);
}
inline ::perception::ParkingSlot_RodStage ParkingSlot::rod_stage() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSlot.rod_stage)
  return _internal_rod_stage();
}
inline void ParkingSlot::_internal_set_rod_stage(::perception::ParkingSlot_RodStage value) {
  
  rod_stage_ = value;
}
inline void ParkingSlot::set_rod_stage(::perception::ParkingSlot_RodStage value) {
  _internal_set_rod_stage(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSlot.rod_stage)
}

// -------------------------------------------------------------------

// ParkingSpace

// repeated .perception.ParkingSlot parkslots = 1;
inline int ParkingSpace::_internal_parkslots_size() const {
  return parkslots_.size();
}
inline int ParkingSpace::parkslots_size() const {
  return _internal_parkslots_size();
}
inline void ParkingSpace::clear_parkslots() {
  parkslots_.Clear();
}
inline ::perception::ParkingSlot* ParkingSpace::mutable_parkslots(int index) {
  // @@protoc_insertion_point(field_mutable:perception.ParkingSpace.parkslots)
  return parkslots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ParkingSlot >*
ParkingSpace::mutable_parkslots() {
  // @@protoc_insertion_point(field_mutable_list:perception.ParkingSpace.parkslots)
  return &parkslots_;
}
inline const ::perception::ParkingSlot& ParkingSpace::_internal_parkslots(int index) const {
  return parkslots_.Get(index);
}
inline const ::perception::ParkingSlot& ParkingSpace::parkslots(int index) const {
  // @@protoc_insertion_point(field_get:perception.ParkingSpace.parkslots)
  return _internal_parkslots(index);
}
inline ::perception::ParkingSlot* ParkingSpace::_internal_add_parkslots() {
  return parkslots_.Add();
}
inline ::perception::ParkingSlot* ParkingSpace::add_parkslots() {
  // @@protoc_insertion_point(field_add:perception.ParkingSpace.parkslots)
  return _internal_add_parkslots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::ParkingSlot >&
ParkingSpace::parkslots() const {
  // @@protoc_insertion_point(field_list:perception.ParkingSpace.parkslots)
  return parkslots_;
}

// uint64 frame_id = 2;
inline void ParkingSpace::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkingSpace::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkingSpace::frame_id() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSpace.frame_id)
  return _internal_frame_id();
}
inline void ParkingSpace::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void ParkingSpace::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSpace.frame_id)
}

// uint64 timestamp = 3;
inline void ParkingSpace::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkingSpace::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkingSpace::timestamp() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSpace.timestamp)
  return _internal_timestamp();
}
inline void ParkingSpace::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ParkingSpace::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSpace.timestamp)
}

// uint64 tick = 4;
inline void ParkingSpace::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkingSpace::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkingSpace::tick() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSpace.tick)
  return _internal_tick();
}
inline void ParkingSpace::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void ParkingSpace::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSpace.tick)
}

// .minieye.DataSource source = 5;
inline void ParkingSpace::clear_source() {
  source_ = 0;
}
inline ::minieye::DataSource ParkingSpace::_internal_source() const {
  return static_cast< ::minieye::DataSource >(source_);
}
inline ::minieye::DataSource ParkingSpace::source() const {
  // @@protoc_insertion_point(field_get:perception.ParkingSpace.source)
  return _internal_source();
}
inline void ParkingSpace::_internal_set_source(::minieye::DataSource value) {
  
  source_ = value;
}
inline void ParkingSpace::set_source(::minieye::DataSource value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:perception.ParkingSpace.source)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perception::ParkingSlot_ParkSlotType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::ParkingSlot_ParkSlotType>() {
  return ::perception::ParkingSlot_ParkSlotType_descriptor();
}
template <> struct is_proto_enum< ::perception::ParkingSlot_SearchStage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::ParkingSlot_SearchStage>() {
  return ::perception::ParkingSlot_SearchStage_descriptor();
}
template <> struct is_proto_enum< ::perception::ParkingSlot_ParkingStage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::ParkingSlot_ParkingStage>() {
  return ::perception::ParkingSlot_ParkingStage_descriptor();
}
template <> struct is_proto_enum< ::perception::ParkingSlot_RodStage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::ParkingSlot_RodStage>() {
  return ::perception::ParkingSlot_RodStage_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parkingspace_2eproto
