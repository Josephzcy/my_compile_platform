// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: haf_location.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_haf_5flocation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_haf_5flocation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "data_header.pb.h"
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_haf_5flocation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_haf_5flocation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_haf_5flocation_2eproto;
namespace location {
class HafLocation;
class HafLocationDefaultTypeInternal;
extern HafLocationDefaultTypeInternal _HafLocation_default_instance_;
class HafLocation_HafAccel;
class HafLocation_HafAccelDefaultTypeInternal;
extern HafLocation_HafAccelDefaultTypeInternal _HafLocation_HafAccel_default_instance_;
class HafLocation_HafAccelWithCovariance;
class HafLocation_HafAccelWithCovarianceDefaultTypeInternal;
extern HafLocation_HafAccelWithCovarianceDefaultTypeInternal _HafLocation_HafAccelWithCovariance_default_instance_;
class HafLocation_HafPose;
class HafLocation_HafPoseDefaultTypeInternal;
extern HafLocation_HafPoseDefaultTypeInternal _HafLocation_HafPose_default_instance_;
class HafLocation_HafPoseWithCovariance;
class HafLocation_HafPoseWithCovarianceDefaultTypeInternal;
extern HafLocation_HafPoseWithCovarianceDefaultTypeInternal _HafLocation_HafPoseWithCovariance_default_instance_;
class HafLocation_HafTwist;
class HafLocation_HafTwistDefaultTypeInternal;
extern HafLocation_HafTwistDefaultTypeInternal _HafLocation_HafTwist_default_instance_;
class HafLocation_HafTwistWithCovariance;
class HafLocation_HafTwistWithCovarianceDefaultTypeInternal;
extern HafLocation_HafTwistWithCovarianceDefaultTypeInternal _HafLocation_HafTwistWithCovariance_default_instance_;
}  // namespace location
PROTOBUF_NAMESPACE_OPEN
template<> ::location::HafLocation* Arena::CreateMaybeMessage<::location::HafLocation>(Arena*);
template<> ::location::HafLocation_HafAccel* Arena::CreateMaybeMessage<::location::HafLocation_HafAccel>(Arena*);
template<> ::location::HafLocation_HafAccelWithCovariance* Arena::CreateMaybeMessage<::location::HafLocation_HafAccelWithCovariance>(Arena*);
template<> ::location::HafLocation_HafPose* Arena::CreateMaybeMessage<::location::HafLocation_HafPose>(Arena*);
template<> ::location::HafLocation_HafPoseWithCovariance* Arena::CreateMaybeMessage<::location::HafLocation_HafPoseWithCovariance>(Arena*);
template<> ::location::HafLocation_HafTwist* Arena::CreateMaybeMessage<::location::HafLocation_HafTwist>(Arena*);
template<> ::location::HafLocation_HafTwistWithCovariance* Arena::CreateMaybeMessage<::location::HafLocation_HafTwistWithCovariance>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace location {

enum HafLocation_CoordType : int {
  HafLocation_CoordType_ENU_COORD = 0,
  HafLocation_CoordType_SLAM_COORD = 1,
  HafLocation_CoordType_HafLocation_CoordType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HafLocation_CoordType_HafLocation_CoordType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HafLocation_CoordType_IsValid(int value);
constexpr HafLocation_CoordType HafLocation_CoordType_CoordType_MIN = HafLocation_CoordType_ENU_COORD;
constexpr HafLocation_CoordType HafLocation_CoordType_CoordType_MAX = HafLocation_CoordType_SLAM_COORD;
constexpr int HafLocation_CoordType_CoordType_ARRAYSIZE = HafLocation_CoordType_CoordType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HafLocation_CoordType_descriptor();
template<typename T>
inline const std::string& HafLocation_CoordType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HafLocation_CoordType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HafLocation_CoordType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HafLocation_CoordType_descriptor(), enum_t_value);
}
inline bool HafLocation_CoordType_Parse(
    const std::string& name, HafLocation_CoordType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HafLocation_CoordType>(
    HafLocation_CoordType_descriptor(), name, value);
}
// ===================================================================

class HafLocation_HafPose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:location.HafLocation.HafPose) */ {
 public:
  inline HafLocation_HafPose() : HafLocation_HafPose(nullptr) {};
  virtual ~HafLocation_HafPose();

  HafLocation_HafPose(const HafLocation_HafPose& from);
  HafLocation_HafPose(HafLocation_HafPose&& from) noexcept
    : HafLocation_HafPose() {
    *this = ::std::move(from);
  }

  inline HafLocation_HafPose& operator=(const HafLocation_HafPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline HafLocation_HafPose& operator=(HafLocation_HafPose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HafLocation_HafPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HafLocation_HafPose* internal_default_instance() {
    return reinterpret_cast<const HafLocation_HafPose*>(
               &_HafLocation_HafPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HafLocation_HafPose& a, HafLocation_HafPose& b) {
    a.Swap(&b);
  }
  inline void Swap(HafLocation_HafPose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HafLocation_HafPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HafLocation_HafPose* New() const final {
    return CreateMaybeMessage<HafLocation_HafPose>(nullptr);
  }

  HafLocation_HafPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HafLocation_HafPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HafLocation_HafPose& from);
  void MergeFrom(const HafLocation_HafPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HafLocation_HafPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "location.HafLocation.HafPose";
  }
  protected:
  explicit HafLocation_HafPose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_haf_5flocation_2eproto);
    return ::descriptor_table_haf_5flocation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionWgs84FieldNumber = 1,
    kQuaternionFieldNumber = 2,
    kEulerAngleFieldNumber = 3,
    kRotationVrfFieldNumber = 4,
    kHeadingFieldNumber = 5,
  };
  // .perception.common.Point3D position_wgs84 = 1;
  bool has_position_wgs84() const;
  private:
  bool _internal_has_position_wgs84() const;
  public:
  void clear_position_wgs84();
  const ::perception::common::Point3D& position_wgs84() const;
  ::perception::common::Point3D* release_position_wgs84();
  ::perception::common::Point3D* mutable_position_wgs84();
  void set_allocated_position_wgs84(::perception::common::Point3D* position_wgs84);
  private:
  const ::perception::common::Point3D& _internal_position_wgs84() const;
  ::perception::common::Point3D* _internal_mutable_position_wgs84();
  public:
  void unsafe_arena_set_allocated_position_wgs84(
      ::perception::common::Point3D* position_wgs84);
  ::perception::common::Point3D* unsafe_arena_release_position_wgs84();

  // .perception.common.HafQuaternion quaternion = 2;
  bool has_quaternion() const;
  private:
  bool _internal_has_quaternion() const;
  public:
  void clear_quaternion();
  const ::perception::common::HafQuaternion& quaternion() const;
  ::perception::common::HafQuaternion* release_quaternion();
  ::perception::common::HafQuaternion* mutable_quaternion();
  void set_allocated_quaternion(::perception::common::HafQuaternion* quaternion);
  private:
  const ::perception::common::HafQuaternion& _internal_quaternion() const;
  ::perception::common::HafQuaternion* _internal_mutable_quaternion();
  public:
  void unsafe_arena_set_allocated_quaternion(
      ::perception::common::HafQuaternion* quaternion);
  ::perception::common::HafQuaternion* unsafe_arena_release_quaternion();

  // .perception.common.Point3f euler_angle = 3;
  bool has_euler_angle() const;
  private:
  bool _internal_has_euler_angle() const;
  public:
  void clear_euler_angle();
  const ::perception::common::Point3f& euler_angle() const;
  ::perception::common::Point3f* release_euler_angle();
  ::perception::common::Point3f* mutable_euler_angle();
  void set_allocated_euler_angle(::perception::common::Point3f* euler_angle);
  private:
  const ::perception::common::Point3f& _internal_euler_angle() const;
  ::perception::common::Point3f* _internal_mutable_euler_angle();
  public:
  void unsafe_arena_set_allocated_euler_angle(
      ::perception::common::Point3f* euler_angle);
  ::perception::common::Point3f* unsafe_arena_release_euler_angle();

  // .perception.common.Point3f rotation_vrf = 4;
  bool has_rotation_vrf() const;
  private:
  bool _internal_has_rotation_vrf() const;
  public:
  void clear_rotation_vrf();
  const ::perception::common::Point3f& rotation_vrf() const;
  ::perception::common::Point3f* release_rotation_vrf();
  ::perception::common::Point3f* mutable_rotation_vrf();
  void set_allocated_rotation_vrf(::perception::common::Point3f* rotation_vrf);
  private:
  const ::perception::common::Point3f& _internal_rotation_vrf() const;
  ::perception::common::Point3f* _internal_mutable_rotation_vrf();
  public:
  void unsafe_arena_set_allocated_rotation_vrf(
      ::perception::common::Point3f* rotation_vrf);
  ::perception::common::Point3f* unsafe_arena_release_rotation_vrf();

  // float heading = 5;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // @@protoc_insertion_point(class_scope:location.HafLocation.HafPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::Point3D* position_wgs84_;
  ::perception::common::HafQuaternion* quaternion_;
  ::perception::common::Point3f* euler_angle_;
  ::perception::common::Point3f* rotation_vrf_;
  float heading_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_haf_5flocation_2eproto;
};
// -------------------------------------------------------------------

class HafLocation_HafPoseWithCovariance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:location.HafLocation.HafPoseWithCovariance) */ {
 public:
  inline HafLocation_HafPoseWithCovariance() : HafLocation_HafPoseWithCovariance(nullptr) {};
  virtual ~HafLocation_HafPoseWithCovariance();

  HafLocation_HafPoseWithCovariance(const HafLocation_HafPoseWithCovariance& from);
  HafLocation_HafPoseWithCovariance(HafLocation_HafPoseWithCovariance&& from) noexcept
    : HafLocation_HafPoseWithCovariance() {
    *this = ::std::move(from);
  }

  inline HafLocation_HafPoseWithCovariance& operator=(const HafLocation_HafPoseWithCovariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline HafLocation_HafPoseWithCovariance& operator=(HafLocation_HafPoseWithCovariance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HafLocation_HafPoseWithCovariance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HafLocation_HafPoseWithCovariance* internal_default_instance() {
    return reinterpret_cast<const HafLocation_HafPoseWithCovariance*>(
               &_HafLocation_HafPoseWithCovariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HafLocation_HafPoseWithCovariance& a, HafLocation_HafPoseWithCovariance& b) {
    a.Swap(&b);
  }
  inline void Swap(HafLocation_HafPoseWithCovariance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HafLocation_HafPoseWithCovariance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HafLocation_HafPoseWithCovariance* New() const final {
    return CreateMaybeMessage<HafLocation_HafPoseWithCovariance>(nullptr);
  }

  HafLocation_HafPoseWithCovariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HafLocation_HafPoseWithCovariance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HafLocation_HafPoseWithCovariance& from);
  void MergeFrom(const HafLocation_HafPoseWithCovariance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HafLocation_HafPoseWithCovariance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "location.HafLocation.HafPoseWithCovariance";
  }
  protected:
  explicit HafLocation_HafPoseWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_haf_5flocation_2eproto);
    return ::descriptor_table_haf_5flocation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 4,
    kPoseWgsFieldNumber = 1,
    kPoseLocalFieldNumber = 2,
    kPoseGcj02FieldNumber = 3,
    kPoseUtm01FieldNumber = 5,
    kPoseUtm02FieldNumber = 6,
    kUtmZoneId01FieldNumber = 7,
    kUtmZoneId02FieldNumber = 8,
  };
  // repeated float covariance = 4;
  int covariance_size() const;
  private:
  int _internal_covariance_size() const;
  public:
  void clear_covariance();
  private:
  float _internal_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_covariance() const;
  void _internal_add_covariance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_covariance();
  public:
  float covariance(int index) const;
  void set_covariance(int index, float value);
  void add_covariance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_covariance();

  // .location.HafLocation.HafPose pose_wgs = 1;
  bool has_pose_wgs() const;
  private:
  bool _internal_has_pose_wgs() const;
  public:
  void clear_pose_wgs();
  const ::location::HafLocation_HafPose& pose_wgs() const;
  ::location::HafLocation_HafPose* release_pose_wgs();
  ::location::HafLocation_HafPose* mutable_pose_wgs();
  void set_allocated_pose_wgs(::location::HafLocation_HafPose* pose_wgs);
  private:
  const ::location::HafLocation_HafPose& _internal_pose_wgs() const;
  ::location::HafLocation_HafPose* _internal_mutable_pose_wgs();
  public:
  void unsafe_arena_set_allocated_pose_wgs(
      ::location::HafLocation_HafPose* pose_wgs);
  ::location::HafLocation_HafPose* unsafe_arena_release_pose_wgs();

  // .location.HafLocation.HafPose pose_local = 2;
  bool has_pose_local() const;
  private:
  bool _internal_has_pose_local() const;
  public:
  void clear_pose_local();
  const ::location::HafLocation_HafPose& pose_local() const;
  ::location::HafLocation_HafPose* release_pose_local();
  ::location::HafLocation_HafPose* mutable_pose_local();
  void set_allocated_pose_local(::location::HafLocation_HafPose* pose_local);
  private:
  const ::location::HafLocation_HafPose& _internal_pose_local() const;
  ::location::HafLocation_HafPose* _internal_mutable_pose_local();
  public:
  void unsafe_arena_set_allocated_pose_local(
      ::location::HafLocation_HafPose* pose_local);
  ::location::HafLocation_HafPose* unsafe_arena_release_pose_local();

  // .location.HafLocation.HafPose pose_gcj02 = 3;
  bool has_pose_gcj02() const;
  private:
  bool _internal_has_pose_gcj02() const;
  public:
  void clear_pose_gcj02();
  const ::location::HafLocation_HafPose& pose_gcj02() const;
  ::location::HafLocation_HafPose* release_pose_gcj02();
  ::location::HafLocation_HafPose* mutable_pose_gcj02();
  void set_allocated_pose_gcj02(::location::HafLocation_HafPose* pose_gcj02);
  private:
  const ::location::HafLocation_HafPose& _internal_pose_gcj02() const;
  ::location::HafLocation_HafPose* _internal_mutable_pose_gcj02();
  public:
  void unsafe_arena_set_allocated_pose_gcj02(
      ::location::HafLocation_HafPose* pose_gcj02);
  ::location::HafLocation_HafPose* unsafe_arena_release_pose_gcj02();

  // .location.HafLocation.HafPose pose_utm_01 = 5;
  bool has_pose_utm_01() const;
  private:
  bool _internal_has_pose_utm_01() const;
  public:
  void clear_pose_utm_01();
  const ::location::HafLocation_HafPose& pose_utm_01() const;
  ::location::HafLocation_HafPose* release_pose_utm_01();
  ::location::HafLocation_HafPose* mutable_pose_utm_01();
  void set_allocated_pose_utm_01(::location::HafLocation_HafPose* pose_utm_01);
  private:
  const ::location::HafLocation_HafPose& _internal_pose_utm_01() const;
  ::location::HafLocation_HafPose* _internal_mutable_pose_utm_01();
  public:
  void unsafe_arena_set_allocated_pose_utm_01(
      ::location::HafLocation_HafPose* pose_utm_01);
  ::location::HafLocation_HafPose* unsafe_arena_release_pose_utm_01();

  // .location.HafLocation.HafPose pose_utm_02 = 6;
  bool has_pose_utm_02() const;
  private:
  bool _internal_has_pose_utm_02() const;
  public:
  void clear_pose_utm_02();
  const ::location::HafLocation_HafPose& pose_utm_02() const;
  ::location::HafLocation_HafPose* release_pose_utm_02();
  ::location::HafLocation_HafPose* mutable_pose_utm_02();
  void set_allocated_pose_utm_02(::location::HafLocation_HafPose* pose_utm_02);
  private:
  const ::location::HafLocation_HafPose& _internal_pose_utm_02() const;
  ::location::HafLocation_HafPose* _internal_mutable_pose_utm_02();
  public:
  void unsafe_arena_set_allocated_pose_utm_02(
      ::location::HafLocation_HafPose* pose_utm_02);
  ::location::HafLocation_HafPose* unsafe_arena_release_pose_utm_02();

  // uint32 utm_zone_id_01 = 7;
  void clear_utm_zone_id_01();
  ::PROTOBUF_NAMESPACE_ID::uint32 utm_zone_id_01() const;
  void set_utm_zone_id_01(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utm_zone_id_01() const;
  void _internal_set_utm_zone_id_01(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 utm_zone_id_02 = 8;
  void clear_utm_zone_id_02();
  ::PROTOBUF_NAMESPACE_ID::uint32 utm_zone_id_02() const;
  void set_utm_zone_id_02(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utm_zone_id_02() const;
  void _internal_set_utm_zone_id_02(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:location.HafLocation.HafPoseWithCovariance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > covariance_;
  mutable std::atomic<int> _covariance_cached_byte_size_;
  ::location::HafLocation_HafPose* pose_wgs_;
  ::location::HafLocation_HafPose* pose_local_;
  ::location::HafLocation_HafPose* pose_gcj02_;
  ::location::HafLocation_HafPose* pose_utm_01_;
  ::location::HafLocation_HafPose* pose_utm_02_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utm_zone_id_01_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utm_zone_id_02_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_haf_5flocation_2eproto;
};
// -------------------------------------------------------------------

class HafLocation_HafTwist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:location.HafLocation.HafTwist) */ {
 public:
  inline HafLocation_HafTwist() : HafLocation_HafTwist(nullptr) {};
  virtual ~HafLocation_HafTwist();

  HafLocation_HafTwist(const HafLocation_HafTwist& from);
  HafLocation_HafTwist(HafLocation_HafTwist&& from) noexcept
    : HafLocation_HafTwist() {
    *this = ::std::move(from);
  }

  inline HafLocation_HafTwist& operator=(const HafLocation_HafTwist& from) {
    CopyFrom(from);
    return *this;
  }
  inline HafLocation_HafTwist& operator=(HafLocation_HafTwist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HafLocation_HafTwist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HafLocation_HafTwist* internal_default_instance() {
    return reinterpret_cast<const HafLocation_HafTwist*>(
               &_HafLocation_HafTwist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HafLocation_HafTwist& a, HafLocation_HafTwist& b) {
    a.Swap(&b);
  }
  inline void Swap(HafLocation_HafTwist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HafLocation_HafTwist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HafLocation_HafTwist* New() const final {
    return CreateMaybeMessage<HafLocation_HafTwist>(nullptr);
  }

  HafLocation_HafTwist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HafLocation_HafTwist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HafLocation_HafTwist& from);
  void MergeFrom(const HafLocation_HafTwist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HafLocation_HafTwist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "location.HafLocation.HafTwist";
  }
  protected:
  explicit HafLocation_HafTwist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_haf_5flocation_2eproto);
    return ::descriptor_table_haf_5flocation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearVrfFieldNumber = 1,
    kAngularVrfFieldNumber = 2,
    kAngularRawVrfFieldNumber = 3,
  };
  // .perception.common.Point3f linear_vrf = 1;
  bool has_linear_vrf() const;
  private:
  bool _internal_has_linear_vrf() const;
  public:
  void clear_linear_vrf();
  const ::perception::common::Point3f& linear_vrf() const;
  ::perception::common::Point3f* release_linear_vrf();
  ::perception::common::Point3f* mutable_linear_vrf();
  void set_allocated_linear_vrf(::perception::common::Point3f* linear_vrf);
  private:
  const ::perception::common::Point3f& _internal_linear_vrf() const;
  ::perception::common::Point3f* _internal_mutable_linear_vrf();
  public:
  void unsafe_arena_set_allocated_linear_vrf(
      ::perception::common::Point3f* linear_vrf);
  ::perception::common::Point3f* unsafe_arena_release_linear_vrf();

  // .perception.common.Point3f angular_vrf = 2;
  bool has_angular_vrf() const;
  private:
  bool _internal_has_angular_vrf() const;
  public:
  void clear_angular_vrf();
  const ::perception::common::Point3f& angular_vrf() const;
  ::perception::common::Point3f* release_angular_vrf();
  ::perception::common::Point3f* mutable_angular_vrf();
  void set_allocated_angular_vrf(::perception::common::Point3f* angular_vrf);
  private:
  const ::perception::common::Point3f& _internal_angular_vrf() const;
  ::perception::common::Point3f* _internal_mutable_angular_vrf();
  public:
  void unsafe_arena_set_allocated_angular_vrf(
      ::perception::common::Point3f* angular_vrf);
  ::perception::common::Point3f* unsafe_arena_release_angular_vrf();

  // .perception.common.Point3f angular_raw_vrf = 3;
  bool has_angular_raw_vrf() const;
  private:
  bool _internal_has_angular_raw_vrf() const;
  public:
  void clear_angular_raw_vrf();
  const ::perception::common::Point3f& angular_raw_vrf() const;
  ::perception::common::Point3f* release_angular_raw_vrf();
  ::perception::common::Point3f* mutable_angular_raw_vrf();
  void set_allocated_angular_raw_vrf(::perception::common::Point3f* angular_raw_vrf);
  private:
  const ::perception::common::Point3f& _internal_angular_raw_vrf() const;
  ::perception::common::Point3f* _internal_mutable_angular_raw_vrf();
  public:
  void unsafe_arena_set_allocated_angular_raw_vrf(
      ::perception::common::Point3f* angular_raw_vrf);
  ::perception::common::Point3f* unsafe_arena_release_angular_raw_vrf();

  // @@protoc_insertion_point(class_scope:location.HafLocation.HafTwist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::Point3f* linear_vrf_;
  ::perception::common::Point3f* angular_vrf_;
  ::perception::common::Point3f* angular_raw_vrf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_haf_5flocation_2eproto;
};
// -------------------------------------------------------------------

class HafLocation_HafTwistWithCovariance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:location.HafLocation.HafTwistWithCovariance) */ {
 public:
  inline HafLocation_HafTwistWithCovariance() : HafLocation_HafTwistWithCovariance(nullptr) {};
  virtual ~HafLocation_HafTwistWithCovariance();

  HafLocation_HafTwistWithCovariance(const HafLocation_HafTwistWithCovariance& from);
  HafLocation_HafTwistWithCovariance(HafLocation_HafTwistWithCovariance&& from) noexcept
    : HafLocation_HafTwistWithCovariance() {
    *this = ::std::move(from);
  }

  inline HafLocation_HafTwistWithCovariance& operator=(const HafLocation_HafTwistWithCovariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline HafLocation_HafTwistWithCovariance& operator=(HafLocation_HafTwistWithCovariance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HafLocation_HafTwistWithCovariance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HafLocation_HafTwistWithCovariance* internal_default_instance() {
    return reinterpret_cast<const HafLocation_HafTwistWithCovariance*>(
               &_HafLocation_HafTwistWithCovariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HafLocation_HafTwistWithCovariance& a, HafLocation_HafTwistWithCovariance& b) {
    a.Swap(&b);
  }
  inline void Swap(HafLocation_HafTwistWithCovariance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HafLocation_HafTwistWithCovariance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HafLocation_HafTwistWithCovariance* New() const final {
    return CreateMaybeMessage<HafLocation_HafTwistWithCovariance>(nullptr);
  }

  HafLocation_HafTwistWithCovariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HafLocation_HafTwistWithCovariance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HafLocation_HafTwistWithCovariance& from);
  void MergeFrom(const HafLocation_HafTwistWithCovariance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HafLocation_HafTwistWithCovariance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "location.HafLocation.HafTwistWithCovariance";
  }
  protected:
  explicit HafLocation_HafTwistWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_haf_5flocation_2eproto);
    return ::descriptor_table_haf_5flocation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 2,
    kTwistVrfFieldNumber = 1,
  };
  // repeated float covariance = 2;
  int covariance_size() const;
  private:
  int _internal_covariance_size() const;
  public:
  void clear_covariance();
  private:
  float _internal_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_covariance() const;
  void _internal_add_covariance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_covariance();
  public:
  float covariance(int index) const;
  void set_covariance(int index, float value);
  void add_covariance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_covariance();

  // .location.HafLocation.HafTwist twist_vrf = 1;
  bool has_twist_vrf() const;
  private:
  bool _internal_has_twist_vrf() const;
  public:
  void clear_twist_vrf();
  const ::location::HafLocation_HafTwist& twist_vrf() const;
  ::location::HafLocation_HafTwist* release_twist_vrf();
  ::location::HafLocation_HafTwist* mutable_twist_vrf();
  void set_allocated_twist_vrf(::location::HafLocation_HafTwist* twist_vrf);
  private:
  const ::location::HafLocation_HafTwist& _internal_twist_vrf() const;
  ::location::HafLocation_HafTwist* _internal_mutable_twist_vrf();
  public:
  void unsafe_arena_set_allocated_twist_vrf(
      ::location::HafLocation_HafTwist* twist_vrf);
  ::location::HafLocation_HafTwist* unsafe_arena_release_twist_vrf();

  // @@protoc_insertion_point(class_scope:location.HafLocation.HafTwistWithCovariance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > covariance_;
  mutable std::atomic<int> _covariance_cached_byte_size_;
  ::location::HafLocation_HafTwist* twist_vrf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_haf_5flocation_2eproto;
};
// -------------------------------------------------------------------

class HafLocation_HafAccel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:location.HafLocation.HafAccel) */ {
 public:
  inline HafLocation_HafAccel() : HafLocation_HafAccel(nullptr) {};
  virtual ~HafLocation_HafAccel();

  HafLocation_HafAccel(const HafLocation_HafAccel& from);
  HafLocation_HafAccel(HafLocation_HafAccel&& from) noexcept
    : HafLocation_HafAccel() {
    *this = ::std::move(from);
  }

  inline HafLocation_HafAccel& operator=(const HafLocation_HafAccel& from) {
    CopyFrom(from);
    return *this;
  }
  inline HafLocation_HafAccel& operator=(HafLocation_HafAccel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HafLocation_HafAccel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HafLocation_HafAccel* internal_default_instance() {
    return reinterpret_cast<const HafLocation_HafAccel*>(
               &_HafLocation_HafAccel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HafLocation_HafAccel& a, HafLocation_HafAccel& b) {
    a.Swap(&b);
  }
  inline void Swap(HafLocation_HafAccel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HafLocation_HafAccel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HafLocation_HafAccel* New() const final {
    return CreateMaybeMessage<HafLocation_HafAccel>(nullptr);
  }

  HafLocation_HafAccel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HafLocation_HafAccel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HafLocation_HafAccel& from);
  void MergeFrom(const HafLocation_HafAccel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HafLocation_HafAccel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "location.HafLocation.HafAccel";
  }
  protected:
  explicit HafLocation_HafAccel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_haf_5flocation_2eproto);
    return ::descriptor_table_haf_5flocation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearVrfFieldNumber = 1,
    kAngularVrfFieldNumber = 2,
    kLinearRawVrfFieldNumber = 3,
  };
  // .perception.common.Point3f linear_vrf = 1;
  bool has_linear_vrf() const;
  private:
  bool _internal_has_linear_vrf() const;
  public:
  void clear_linear_vrf();
  const ::perception::common::Point3f& linear_vrf() const;
  ::perception::common::Point3f* release_linear_vrf();
  ::perception::common::Point3f* mutable_linear_vrf();
  void set_allocated_linear_vrf(::perception::common::Point3f* linear_vrf);
  private:
  const ::perception::common::Point3f& _internal_linear_vrf() const;
  ::perception::common::Point3f* _internal_mutable_linear_vrf();
  public:
  void unsafe_arena_set_allocated_linear_vrf(
      ::perception::common::Point3f* linear_vrf);
  ::perception::common::Point3f* unsafe_arena_release_linear_vrf();

  // .perception.common.Point3f angular_vrf = 2;
  bool has_angular_vrf() const;
  private:
  bool _internal_has_angular_vrf() const;
  public:
  void clear_angular_vrf();
  const ::perception::common::Point3f& angular_vrf() const;
  ::perception::common::Point3f* release_angular_vrf();
  ::perception::common::Point3f* mutable_angular_vrf();
  void set_allocated_angular_vrf(::perception::common::Point3f* angular_vrf);
  private:
  const ::perception::common::Point3f& _internal_angular_vrf() const;
  ::perception::common::Point3f* _internal_mutable_angular_vrf();
  public:
  void unsafe_arena_set_allocated_angular_vrf(
      ::perception::common::Point3f* angular_vrf);
  ::perception::common::Point3f* unsafe_arena_release_angular_vrf();

  // .perception.common.Point3f linear_raw_vrf = 3;
  bool has_linear_raw_vrf() const;
  private:
  bool _internal_has_linear_raw_vrf() const;
  public:
  void clear_linear_raw_vrf();
  const ::perception::common::Point3f& linear_raw_vrf() const;
  ::perception::common::Point3f* release_linear_raw_vrf();
  ::perception::common::Point3f* mutable_linear_raw_vrf();
  void set_allocated_linear_raw_vrf(::perception::common::Point3f* linear_raw_vrf);
  private:
  const ::perception::common::Point3f& _internal_linear_raw_vrf() const;
  ::perception::common::Point3f* _internal_mutable_linear_raw_vrf();
  public:
  void unsafe_arena_set_allocated_linear_raw_vrf(
      ::perception::common::Point3f* linear_raw_vrf);
  ::perception::common::Point3f* unsafe_arena_release_linear_raw_vrf();

  // @@protoc_insertion_point(class_scope:location.HafLocation.HafAccel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::Point3f* linear_vrf_;
  ::perception::common::Point3f* angular_vrf_;
  ::perception::common::Point3f* linear_raw_vrf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_haf_5flocation_2eproto;
};
// -------------------------------------------------------------------

class HafLocation_HafAccelWithCovariance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:location.HafLocation.HafAccelWithCovariance) */ {
 public:
  inline HafLocation_HafAccelWithCovariance() : HafLocation_HafAccelWithCovariance(nullptr) {};
  virtual ~HafLocation_HafAccelWithCovariance();

  HafLocation_HafAccelWithCovariance(const HafLocation_HafAccelWithCovariance& from);
  HafLocation_HafAccelWithCovariance(HafLocation_HafAccelWithCovariance&& from) noexcept
    : HafLocation_HafAccelWithCovariance() {
    *this = ::std::move(from);
  }

  inline HafLocation_HafAccelWithCovariance& operator=(const HafLocation_HafAccelWithCovariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline HafLocation_HafAccelWithCovariance& operator=(HafLocation_HafAccelWithCovariance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HafLocation_HafAccelWithCovariance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HafLocation_HafAccelWithCovariance* internal_default_instance() {
    return reinterpret_cast<const HafLocation_HafAccelWithCovariance*>(
               &_HafLocation_HafAccelWithCovariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HafLocation_HafAccelWithCovariance& a, HafLocation_HafAccelWithCovariance& b) {
    a.Swap(&b);
  }
  inline void Swap(HafLocation_HafAccelWithCovariance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HafLocation_HafAccelWithCovariance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HafLocation_HafAccelWithCovariance* New() const final {
    return CreateMaybeMessage<HafLocation_HafAccelWithCovariance>(nullptr);
  }

  HafLocation_HafAccelWithCovariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HafLocation_HafAccelWithCovariance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HafLocation_HafAccelWithCovariance& from);
  void MergeFrom(const HafLocation_HafAccelWithCovariance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HafLocation_HafAccelWithCovariance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "location.HafLocation.HafAccelWithCovariance";
  }
  protected:
  explicit HafLocation_HafAccelWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_haf_5flocation_2eproto);
    return ::descriptor_table_haf_5flocation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 2,
    kLinearVrfFieldNumber = 1,
  };
  // repeated float covariance = 2;
  int covariance_size() const;
  private:
  int _internal_covariance_size() const;
  public:
  void clear_covariance();
  private:
  float _internal_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_covariance() const;
  void _internal_add_covariance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_covariance();
  public:
  float covariance(int index) const;
  void set_covariance(int index, float value);
  void add_covariance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_covariance();

  // .location.HafLocation.HafAccel linear_vrf = 1;
  bool has_linear_vrf() const;
  private:
  bool _internal_has_linear_vrf() const;
  public:
  void clear_linear_vrf();
  const ::location::HafLocation_HafAccel& linear_vrf() const;
  ::location::HafLocation_HafAccel* release_linear_vrf();
  ::location::HafLocation_HafAccel* mutable_linear_vrf();
  void set_allocated_linear_vrf(::location::HafLocation_HafAccel* linear_vrf);
  private:
  const ::location::HafLocation_HafAccel& _internal_linear_vrf() const;
  ::location::HafLocation_HafAccel* _internal_mutable_linear_vrf();
  public:
  void unsafe_arena_set_allocated_linear_vrf(
      ::location::HafLocation_HafAccel* linear_vrf);
  ::location::HafLocation_HafAccel* unsafe_arena_release_linear_vrf();

  // @@protoc_insertion_point(class_scope:location.HafLocation.HafAccelWithCovariance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > covariance_;
  mutable std::atomic<int> _covariance_cached_byte_size_;
  ::location::HafLocation_HafAccel* linear_vrf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_haf_5flocation_2eproto;
};
// -------------------------------------------------------------------

class HafLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:location.HafLocation) */ {
 public:
  inline HafLocation() : HafLocation(nullptr) {};
  virtual ~HafLocation();

  HafLocation(const HafLocation& from);
  HafLocation(HafLocation&& from) noexcept
    : HafLocation() {
    *this = ::std::move(from);
  }

  inline HafLocation& operator=(const HafLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline HafLocation& operator=(HafLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HafLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HafLocation* internal_default_instance() {
    return reinterpret_cast<const HafLocation*>(
               &_HafLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HafLocation& a, HafLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(HafLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HafLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HafLocation* New() const final {
    return CreateMaybeMessage<HafLocation>(nullptr);
  }

  HafLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HafLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HafLocation& from);
  void MergeFrom(const HafLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HafLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "location.HafLocation";
  }
  protected:
  explicit HafLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_haf_5flocation_2eproto);
    return ::descriptor_table_haf_5flocation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HafLocation_HafPose HafPose;
  typedef HafLocation_HafPoseWithCovariance HafPoseWithCovariance;
  typedef HafLocation_HafTwist HafTwist;
  typedef HafLocation_HafTwistWithCovariance HafTwistWithCovariance;
  typedef HafLocation_HafAccel HafAccel;
  typedef HafLocation_HafAccelWithCovariance HafAccelWithCovariance;

  typedef HafLocation_CoordType CoordType;
  static constexpr CoordType ENU_COORD =
    HafLocation_CoordType_ENU_COORD;
  static constexpr CoordType SLAM_COORD =
    HafLocation_CoordType_SLAM_COORD;
  static inline bool CoordType_IsValid(int value) {
    return HafLocation_CoordType_IsValid(value);
  }
  static constexpr CoordType CoordType_MIN =
    HafLocation_CoordType_CoordType_MIN;
  static constexpr CoordType CoordType_MAX =
    HafLocation_CoordType_CoordType_MAX;
  static constexpr int CoordType_ARRAYSIZE =
    HafLocation_CoordType_CoordType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CoordType_descriptor() {
    return HafLocation_CoordType_descriptor();
  }
  template<typename T>
  static inline const std::string& CoordType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CoordType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CoordType_Name.");
    return HafLocation_CoordType_Name(enum_t_value);
  }
  static inline bool CoordType_Parse(const std::string& name,
      CoordType* value) {
    return HafLocation_CoordType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 6,
    kVelocityFieldNumber = 7,
    kAccelerationFieldNumber = 8,
    kMountingErrorFieldNumber = 11,
    kIsValidFieldNumber = 2,
    kGpsWeekFieldNumber = 3,
    kGpsSecFieldNumber = 4,
    kCoordinateTypeFieldNumber = 5,
    kRtkStatusFieldNumber = 9,
    kLocationStateFieldNumber = 10,
  };
  // .minieye.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::minieye::Header& header() const;
  ::minieye::Header* release_header();
  ::minieye::Header* mutable_header();
  void set_allocated_header(::minieye::Header* header);
  private:
  const ::minieye::Header& _internal_header() const;
  ::minieye::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::minieye::Header* header);
  ::minieye::Header* unsafe_arena_release_header();

  // .location.HafLocation.HafPoseWithCovariance pose = 6;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::location::HafLocation_HafPoseWithCovariance& pose() const;
  ::location::HafLocation_HafPoseWithCovariance* release_pose();
  ::location::HafLocation_HafPoseWithCovariance* mutable_pose();
  void set_allocated_pose(::location::HafLocation_HafPoseWithCovariance* pose);
  private:
  const ::location::HafLocation_HafPoseWithCovariance& _internal_pose() const;
  ::location::HafLocation_HafPoseWithCovariance* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::location::HafLocation_HafPoseWithCovariance* pose);
  ::location::HafLocation_HafPoseWithCovariance* unsafe_arena_release_pose();

  // .location.HafLocation.HafTwistWithCovariance velocity = 7;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::location::HafLocation_HafTwistWithCovariance& velocity() const;
  ::location::HafLocation_HafTwistWithCovariance* release_velocity();
  ::location::HafLocation_HafTwistWithCovariance* mutable_velocity();
  void set_allocated_velocity(::location::HafLocation_HafTwistWithCovariance* velocity);
  private:
  const ::location::HafLocation_HafTwistWithCovariance& _internal_velocity() const;
  ::location::HafLocation_HafTwistWithCovariance* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::location::HafLocation_HafTwistWithCovariance* velocity);
  ::location::HafLocation_HafTwistWithCovariance* unsafe_arena_release_velocity();

  // .location.HafLocation.HafAccelWithCovariance acceleration = 8;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::location::HafLocation_HafAccelWithCovariance& acceleration() const;
  ::location::HafLocation_HafAccelWithCovariance* release_acceleration();
  ::location::HafLocation_HafAccelWithCovariance* mutable_acceleration();
  void set_allocated_acceleration(::location::HafLocation_HafAccelWithCovariance* acceleration);
  private:
  const ::location::HafLocation_HafAccelWithCovariance& _internal_acceleration() const;
  ::location::HafLocation_HafAccelWithCovariance* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::location::HafLocation_HafAccelWithCovariance* acceleration);
  ::location::HafLocation_HafAccelWithCovariance* unsafe_arena_release_acceleration();

  // .perception.common.Point3f mounting_error = 11;
  bool has_mounting_error() const;
  private:
  bool _internal_has_mounting_error() const;
  public:
  void clear_mounting_error();
  const ::perception::common::Point3f& mounting_error() const;
  ::perception::common::Point3f* release_mounting_error();
  ::perception::common::Point3f* mutable_mounting_error();
  void set_allocated_mounting_error(::perception::common::Point3f* mounting_error);
  private:
  const ::perception::common::Point3f& _internal_mounting_error() const;
  ::perception::common::Point3f* _internal_mutable_mounting_error();
  public:
  void unsafe_arena_set_allocated_mounting_error(
      ::perception::common::Point3f* mounting_error);
  ::perception::common::Point3f* unsafe_arena_release_mounting_error();

  // bool is_valid = 2;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // uint32 gps_week = 3;
  void clear_gps_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_week() const;
  void set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gps_week() const;
  void _internal_set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double gps_sec = 4;
  void clear_gps_sec();
  double gps_sec() const;
  void set_gps_sec(double value);
  private:
  double _internal_gps_sec() const;
  void _internal_set_gps_sec(double value);
  public:

  // .location.HafLocation.CoordType coordinate_type = 5;
  void clear_coordinate_type();
  ::location::HafLocation_CoordType coordinate_type() const;
  void set_coordinate_type(::location::HafLocation_CoordType value);
  private:
  ::location::HafLocation_CoordType _internal_coordinate_type() const;
  void _internal_set_coordinate_type(::location::HafLocation_CoordType value);
  public:

  // uint32 rtk_status = 9;
  void clear_rtk_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtk_status() const;
  void set_rtk_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtk_status() const;
  void _internal_set_rtk_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 location_state = 10;
  void clear_location_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 location_state() const;
  void set_location_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_location_state() const;
  void _internal_set_location_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:location.HafLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::Header* header_;
  ::location::HafLocation_HafPoseWithCovariance* pose_;
  ::location::HafLocation_HafTwistWithCovariance* velocity_;
  ::location::HafLocation_HafAccelWithCovariance* acceleration_;
  ::perception::common::Point3f* mounting_error_;
  bool is_valid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_week_;
  double gps_sec_;
  int coordinate_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtk_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 location_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_haf_5flocation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HafLocation_HafPose

// .perception.common.Point3D position_wgs84 = 1;
inline bool HafLocation_HafPose::_internal_has_position_wgs84() const {
  return this != internal_default_instance() && position_wgs84_ != nullptr;
}
inline bool HafLocation_HafPose::has_position_wgs84() const {
  return _internal_has_position_wgs84();
}
inline const ::perception::common::Point3D& HafLocation_HafPose::_internal_position_wgs84() const {
  const ::perception::common::Point3D* p = position_wgs84_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& HafLocation_HafPose::position_wgs84() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafPose.position_wgs84)
  return _internal_position_wgs84();
}
inline void HafLocation_HafPose::unsafe_arena_set_allocated_position_wgs84(
    ::perception::common::Point3D* position_wgs84) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_wgs84_);
  }
  position_wgs84_ = position_wgs84;
  if (position_wgs84) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafPose.position_wgs84)
}
inline ::perception::common::Point3D* HafLocation_HafPose::release_position_wgs84() {
  auto temp = unsafe_arena_release_position_wgs84();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* HafLocation_HafPose::unsafe_arena_release_position_wgs84() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafPose.position_wgs84)
  
  ::perception::common::Point3D* temp = position_wgs84_;
  position_wgs84_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* HafLocation_HafPose::_internal_mutable_position_wgs84() {
  
  if (position_wgs84_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    position_wgs84_ = p;
  }
  return position_wgs84_;
}
inline ::perception::common::Point3D* HafLocation_HafPose::mutable_position_wgs84() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafPose.position_wgs84)
  return _internal_mutable_position_wgs84();
}
inline void HafLocation_HafPose::set_allocated_position_wgs84(::perception::common::Point3D* position_wgs84) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_wgs84_);
  }
  if (position_wgs84) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_wgs84)->GetArena();
    if (message_arena != submessage_arena) {
      position_wgs84 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_wgs84, submessage_arena);
    }
    
  } else {
    
  }
  position_wgs84_ = position_wgs84;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafPose.position_wgs84)
}

// .perception.common.HafQuaternion quaternion = 2;
inline bool HafLocation_HafPose::_internal_has_quaternion() const {
  return this != internal_default_instance() && quaternion_ != nullptr;
}
inline bool HafLocation_HafPose::has_quaternion() const {
  return _internal_has_quaternion();
}
inline const ::perception::common::HafQuaternion& HafLocation_HafPose::_internal_quaternion() const {
  const ::perception::common::HafQuaternion* p = quaternion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::HafQuaternion*>(
      &::perception::common::_HafQuaternion_default_instance_);
}
inline const ::perception::common::HafQuaternion& HafLocation_HafPose::quaternion() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafPose.quaternion)
  return _internal_quaternion();
}
inline void HafLocation_HafPose::unsafe_arena_set_allocated_quaternion(
    ::perception::common::HafQuaternion* quaternion) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quaternion_);
  }
  quaternion_ = quaternion;
  if (quaternion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafPose.quaternion)
}
inline ::perception::common::HafQuaternion* HafLocation_HafPose::release_quaternion() {
  auto temp = unsafe_arena_release_quaternion();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::HafQuaternion* HafLocation_HafPose::unsafe_arena_release_quaternion() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafPose.quaternion)
  
  ::perception::common::HafQuaternion* temp = quaternion_;
  quaternion_ = nullptr;
  return temp;
}
inline ::perception::common::HafQuaternion* HafLocation_HafPose::_internal_mutable_quaternion() {
  
  if (quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::HafQuaternion>(GetArena());
    quaternion_ = p;
  }
  return quaternion_;
}
inline ::perception::common::HafQuaternion* HafLocation_HafPose::mutable_quaternion() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafPose.quaternion)
  return _internal_mutable_quaternion();
}
inline void HafLocation_HafPose::set_allocated_quaternion(::perception::common::HafQuaternion* quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(quaternion_);
  }
  if (quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quaternion)->GetArena();
    if (message_arena != submessage_arena) {
      quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternion, submessage_arena);
    }
    
  } else {
    
  }
  quaternion_ = quaternion;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafPose.quaternion)
}

// .perception.common.Point3f euler_angle = 3;
inline bool HafLocation_HafPose::_internal_has_euler_angle() const {
  return this != internal_default_instance() && euler_angle_ != nullptr;
}
inline bool HafLocation_HafPose::has_euler_angle() const {
  return _internal_has_euler_angle();
}
inline const ::perception::common::Point3f& HafLocation_HafPose::_internal_euler_angle() const {
  const ::perception::common::Point3f* p = euler_angle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& HafLocation_HafPose::euler_angle() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafPose.euler_angle)
  return _internal_euler_angle();
}
inline void HafLocation_HafPose::unsafe_arena_set_allocated_euler_angle(
    ::perception::common::Point3f* euler_angle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(euler_angle_);
  }
  euler_angle_ = euler_angle;
  if (euler_angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafPose.euler_angle)
}
inline ::perception::common::Point3f* HafLocation_HafPose::release_euler_angle() {
  auto temp = unsafe_arena_release_euler_angle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafPose::unsafe_arena_release_euler_angle() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafPose.euler_angle)
  
  ::perception::common::Point3f* temp = euler_angle_;
  euler_angle_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafPose::_internal_mutable_euler_angle() {
  
  if (euler_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    euler_angle_ = p;
  }
  return euler_angle_;
}
inline ::perception::common::Point3f* HafLocation_HafPose::mutable_euler_angle() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafPose.euler_angle)
  return _internal_mutable_euler_angle();
}
inline void HafLocation_HafPose::set_allocated_euler_angle(::perception::common::Point3f* euler_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(euler_angle_);
  }
  if (euler_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(euler_angle)->GetArena();
    if (message_arena != submessage_arena) {
      euler_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euler_angle, submessage_arena);
    }
    
  } else {
    
  }
  euler_angle_ = euler_angle;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafPose.euler_angle)
}

// .perception.common.Point3f rotation_vrf = 4;
inline bool HafLocation_HafPose::_internal_has_rotation_vrf() const {
  return this != internal_default_instance() && rotation_vrf_ != nullptr;
}
inline bool HafLocation_HafPose::has_rotation_vrf() const {
  return _internal_has_rotation_vrf();
}
inline const ::perception::common::Point3f& HafLocation_HafPose::_internal_rotation_vrf() const {
  const ::perception::common::Point3f* p = rotation_vrf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& HafLocation_HafPose::rotation_vrf() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafPose.rotation_vrf)
  return _internal_rotation_vrf();
}
inline void HafLocation_HafPose::unsafe_arena_set_allocated_rotation_vrf(
    ::perception::common::Point3f* rotation_vrf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_vrf_);
  }
  rotation_vrf_ = rotation_vrf;
  if (rotation_vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafPose.rotation_vrf)
}
inline ::perception::common::Point3f* HafLocation_HafPose::release_rotation_vrf() {
  auto temp = unsafe_arena_release_rotation_vrf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafPose::unsafe_arena_release_rotation_vrf() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafPose.rotation_vrf)
  
  ::perception::common::Point3f* temp = rotation_vrf_;
  rotation_vrf_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafPose::_internal_mutable_rotation_vrf() {
  
  if (rotation_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    rotation_vrf_ = p;
  }
  return rotation_vrf_;
}
inline ::perception::common::Point3f* HafLocation_HafPose::mutable_rotation_vrf() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafPose.rotation_vrf)
  return _internal_mutable_rotation_vrf();
}
inline void HafLocation_HafPose::set_allocated_rotation_vrf(::perception::common::Point3f* rotation_vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_vrf_);
  }
  if (rotation_vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_vrf)->GetArena();
    if (message_arena != submessage_arena) {
      rotation_vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation_vrf, submessage_arena);
    }
    
  } else {
    
  }
  rotation_vrf_ = rotation_vrf;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafPose.rotation_vrf)
}

// float heading = 5;
inline void HafLocation_HafPose::clear_heading() {
  heading_ = 0;
}
inline float HafLocation_HafPose::_internal_heading() const {
  return heading_;
}
inline float HafLocation_HafPose::heading() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafPose.heading)
  return _internal_heading();
}
inline void HafLocation_HafPose::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void HafLocation_HafPose::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:location.HafLocation.HafPose.heading)
}

// -------------------------------------------------------------------

// HafLocation_HafPoseWithCovariance

// .location.HafLocation.HafPose pose_wgs = 1;
inline bool HafLocation_HafPoseWithCovariance::_internal_has_pose_wgs() const {
  return this != internal_default_instance() && pose_wgs_ != nullptr;
}
inline bool HafLocation_HafPoseWithCovariance::has_pose_wgs() const {
  return _internal_has_pose_wgs();
}
inline void HafLocation_HafPoseWithCovariance::clear_pose_wgs() {
  if (GetArena() == nullptr && pose_wgs_ != nullptr) {
    delete pose_wgs_;
  }
  pose_wgs_ = nullptr;
}
inline const ::location::HafLocation_HafPose& HafLocation_HafPoseWithCovariance::_internal_pose_wgs() const {
  const ::location::HafLocation_HafPose* p = pose_wgs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::location::HafLocation_HafPose*>(
      &::location::_HafLocation_HafPose_default_instance_);
}
inline const ::location::HafLocation_HafPose& HafLocation_HafPoseWithCovariance::pose_wgs() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafPoseWithCovariance.pose_wgs)
  return _internal_pose_wgs();
}
inline void HafLocation_HafPoseWithCovariance::unsafe_arena_set_allocated_pose_wgs(
    ::location::HafLocation_HafPose* pose_wgs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_wgs_);
  }
  pose_wgs_ = pose_wgs;
  if (pose_wgs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafPoseWithCovariance.pose_wgs)
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::release_pose_wgs() {
  auto temp = unsafe_arena_release_pose_wgs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::unsafe_arena_release_pose_wgs() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafPoseWithCovariance.pose_wgs)
  
  ::location::HafLocation_HafPose* temp = pose_wgs_;
  pose_wgs_ = nullptr;
  return temp;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::_internal_mutable_pose_wgs() {
  
  if (pose_wgs_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::HafLocation_HafPose>(GetArena());
    pose_wgs_ = p;
  }
  return pose_wgs_;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::mutable_pose_wgs() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafPoseWithCovariance.pose_wgs)
  return _internal_mutable_pose_wgs();
}
inline void HafLocation_HafPoseWithCovariance::set_allocated_pose_wgs(::location::HafLocation_HafPose* pose_wgs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_wgs_;
  }
  if (pose_wgs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose_wgs);
    if (message_arena != submessage_arena) {
      pose_wgs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_wgs, submessage_arena);
    }
    
  } else {
    
  }
  pose_wgs_ = pose_wgs;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafPoseWithCovariance.pose_wgs)
}

// .location.HafLocation.HafPose pose_local = 2;
inline bool HafLocation_HafPoseWithCovariance::_internal_has_pose_local() const {
  return this != internal_default_instance() && pose_local_ != nullptr;
}
inline bool HafLocation_HafPoseWithCovariance::has_pose_local() const {
  return _internal_has_pose_local();
}
inline void HafLocation_HafPoseWithCovariance::clear_pose_local() {
  if (GetArena() == nullptr && pose_local_ != nullptr) {
    delete pose_local_;
  }
  pose_local_ = nullptr;
}
inline const ::location::HafLocation_HafPose& HafLocation_HafPoseWithCovariance::_internal_pose_local() const {
  const ::location::HafLocation_HafPose* p = pose_local_;
  return p != nullptr ? *p : *reinterpret_cast<const ::location::HafLocation_HafPose*>(
      &::location::_HafLocation_HafPose_default_instance_);
}
inline const ::location::HafLocation_HafPose& HafLocation_HafPoseWithCovariance::pose_local() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafPoseWithCovariance.pose_local)
  return _internal_pose_local();
}
inline void HafLocation_HafPoseWithCovariance::unsafe_arena_set_allocated_pose_local(
    ::location::HafLocation_HafPose* pose_local) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_local_);
  }
  pose_local_ = pose_local;
  if (pose_local) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafPoseWithCovariance.pose_local)
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::release_pose_local() {
  auto temp = unsafe_arena_release_pose_local();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::unsafe_arena_release_pose_local() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafPoseWithCovariance.pose_local)
  
  ::location::HafLocation_HafPose* temp = pose_local_;
  pose_local_ = nullptr;
  return temp;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::_internal_mutable_pose_local() {
  
  if (pose_local_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::HafLocation_HafPose>(GetArena());
    pose_local_ = p;
  }
  return pose_local_;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::mutable_pose_local() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafPoseWithCovariance.pose_local)
  return _internal_mutable_pose_local();
}
inline void HafLocation_HafPoseWithCovariance::set_allocated_pose_local(::location::HafLocation_HafPose* pose_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_local_;
  }
  if (pose_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose_local);
    if (message_arena != submessage_arena) {
      pose_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_local, submessage_arena);
    }
    
  } else {
    
  }
  pose_local_ = pose_local;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafPoseWithCovariance.pose_local)
}

// .location.HafLocation.HafPose pose_gcj02 = 3;
inline bool HafLocation_HafPoseWithCovariance::_internal_has_pose_gcj02() const {
  return this != internal_default_instance() && pose_gcj02_ != nullptr;
}
inline bool HafLocation_HafPoseWithCovariance::has_pose_gcj02() const {
  return _internal_has_pose_gcj02();
}
inline void HafLocation_HafPoseWithCovariance::clear_pose_gcj02() {
  if (GetArena() == nullptr && pose_gcj02_ != nullptr) {
    delete pose_gcj02_;
  }
  pose_gcj02_ = nullptr;
}
inline const ::location::HafLocation_HafPose& HafLocation_HafPoseWithCovariance::_internal_pose_gcj02() const {
  const ::location::HafLocation_HafPose* p = pose_gcj02_;
  return p != nullptr ? *p : *reinterpret_cast<const ::location::HafLocation_HafPose*>(
      &::location::_HafLocation_HafPose_default_instance_);
}
inline const ::location::HafLocation_HafPose& HafLocation_HafPoseWithCovariance::pose_gcj02() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafPoseWithCovariance.pose_gcj02)
  return _internal_pose_gcj02();
}
inline void HafLocation_HafPoseWithCovariance::unsafe_arena_set_allocated_pose_gcj02(
    ::location::HafLocation_HafPose* pose_gcj02) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_gcj02_);
  }
  pose_gcj02_ = pose_gcj02;
  if (pose_gcj02) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafPoseWithCovariance.pose_gcj02)
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::release_pose_gcj02() {
  auto temp = unsafe_arena_release_pose_gcj02();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::unsafe_arena_release_pose_gcj02() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafPoseWithCovariance.pose_gcj02)
  
  ::location::HafLocation_HafPose* temp = pose_gcj02_;
  pose_gcj02_ = nullptr;
  return temp;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::_internal_mutable_pose_gcj02() {
  
  if (pose_gcj02_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::HafLocation_HafPose>(GetArena());
    pose_gcj02_ = p;
  }
  return pose_gcj02_;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::mutable_pose_gcj02() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafPoseWithCovariance.pose_gcj02)
  return _internal_mutable_pose_gcj02();
}
inline void HafLocation_HafPoseWithCovariance::set_allocated_pose_gcj02(::location::HafLocation_HafPose* pose_gcj02) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_gcj02_;
  }
  if (pose_gcj02) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose_gcj02);
    if (message_arena != submessage_arena) {
      pose_gcj02 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_gcj02, submessage_arena);
    }
    
  } else {
    
  }
  pose_gcj02_ = pose_gcj02;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafPoseWithCovariance.pose_gcj02)
}

// repeated float covariance = 4;
inline int HafLocation_HafPoseWithCovariance::_internal_covariance_size() const {
  return covariance_.size();
}
inline int HafLocation_HafPoseWithCovariance::covariance_size() const {
  return _internal_covariance_size();
}
inline void HafLocation_HafPoseWithCovariance::clear_covariance() {
  covariance_.Clear();
}
inline float HafLocation_HafPoseWithCovariance::_internal_covariance(int index) const {
  return covariance_.Get(index);
}
inline float HafLocation_HafPoseWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafPoseWithCovariance.covariance)
  return _internal_covariance(index);
}
inline void HafLocation_HafPoseWithCovariance::set_covariance(int index, float value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:location.HafLocation.HafPoseWithCovariance.covariance)
}
inline void HafLocation_HafPoseWithCovariance::_internal_add_covariance(float value) {
  covariance_.Add(value);
}
inline void HafLocation_HafPoseWithCovariance::add_covariance(float value) {
  _internal_add_covariance(value);
  // @@protoc_insertion_point(field_add:location.HafLocation.HafPoseWithCovariance.covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
HafLocation_HafPoseWithCovariance::_internal_covariance() const {
  return covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
HafLocation_HafPoseWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:location.HafLocation.HafPoseWithCovariance.covariance)
  return _internal_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
HafLocation_HafPoseWithCovariance::_internal_mutable_covariance() {
  return &covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
HafLocation_HafPoseWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:location.HafLocation.HafPoseWithCovariance.covariance)
  return _internal_mutable_covariance();
}

// .location.HafLocation.HafPose pose_utm_01 = 5;
inline bool HafLocation_HafPoseWithCovariance::_internal_has_pose_utm_01() const {
  return this != internal_default_instance() && pose_utm_01_ != nullptr;
}
inline bool HafLocation_HafPoseWithCovariance::has_pose_utm_01() const {
  return _internal_has_pose_utm_01();
}
inline void HafLocation_HafPoseWithCovariance::clear_pose_utm_01() {
  if (GetArena() == nullptr && pose_utm_01_ != nullptr) {
    delete pose_utm_01_;
  }
  pose_utm_01_ = nullptr;
}
inline const ::location::HafLocation_HafPose& HafLocation_HafPoseWithCovariance::_internal_pose_utm_01() const {
  const ::location::HafLocation_HafPose* p = pose_utm_01_;
  return p != nullptr ? *p : *reinterpret_cast<const ::location::HafLocation_HafPose*>(
      &::location::_HafLocation_HafPose_default_instance_);
}
inline const ::location::HafLocation_HafPose& HafLocation_HafPoseWithCovariance::pose_utm_01() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafPoseWithCovariance.pose_utm_01)
  return _internal_pose_utm_01();
}
inline void HafLocation_HafPoseWithCovariance::unsafe_arena_set_allocated_pose_utm_01(
    ::location::HafLocation_HafPose* pose_utm_01) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_utm_01_);
  }
  pose_utm_01_ = pose_utm_01;
  if (pose_utm_01) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafPoseWithCovariance.pose_utm_01)
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::release_pose_utm_01() {
  auto temp = unsafe_arena_release_pose_utm_01();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::unsafe_arena_release_pose_utm_01() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafPoseWithCovariance.pose_utm_01)
  
  ::location::HafLocation_HafPose* temp = pose_utm_01_;
  pose_utm_01_ = nullptr;
  return temp;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::_internal_mutable_pose_utm_01() {
  
  if (pose_utm_01_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::HafLocation_HafPose>(GetArena());
    pose_utm_01_ = p;
  }
  return pose_utm_01_;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::mutable_pose_utm_01() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafPoseWithCovariance.pose_utm_01)
  return _internal_mutable_pose_utm_01();
}
inline void HafLocation_HafPoseWithCovariance::set_allocated_pose_utm_01(::location::HafLocation_HafPose* pose_utm_01) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_utm_01_;
  }
  if (pose_utm_01) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose_utm_01);
    if (message_arena != submessage_arena) {
      pose_utm_01 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_utm_01, submessage_arena);
    }
    
  } else {
    
  }
  pose_utm_01_ = pose_utm_01;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafPoseWithCovariance.pose_utm_01)
}

// .location.HafLocation.HafPose pose_utm_02 = 6;
inline bool HafLocation_HafPoseWithCovariance::_internal_has_pose_utm_02() const {
  return this != internal_default_instance() && pose_utm_02_ != nullptr;
}
inline bool HafLocation_HafPoseWithCovariance::has_pose_utm_02() const {
  return _internal_has_pose_utm_02();
}
inline void HafLocation_HafPoseWithCovariance::clear_pose_utm_02() {
  if (GetArena() == nullptr && pose_utm_02_ != nullptr) {
    delete pose_utm_02_;
  }
  pose_utm_02_ = nullptr;
}
inline const ::location::HafLocation_HafPose& HafLocation_HafPoseWithCovariance::_internal_pose_utm_02() const {
  const ::location::HafLocation_HafPose* p = pose_utm_02_;
  return p != nullptr ? *p : *reinterpret_cast<const ::location::HafLocation_HafPose*>(
      &::location::_HafLocation_HafPose_default_instance_);
}
inline const ::location::HafLocation_HafPose& HafLocation_HafPoseWithCovariance::pose_utm_02() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafPoseWithCovariance.pose_utm_02)
  return _internal_pose_utm_02();
}
inline void HafLocation_HafPoseWithCovariance::unsafe_arena_set_allocated_pose_utm_02(
    ::location::HafLocation_HafPose* pose_utm_02) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_utm_02_);
  }
  pose_utm_02_ = pose_utm_02;
  if (pose_utm_02) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafPoseWithCovariance.pose_utm_02)
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::release_pose_utm_02() {
  auto temp = unsafe_arena_release_pose_utm_02();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::unsafe_arena_release_pose_utm_02() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafPoseWithCovariance.pose_utm_02)
  
  ::location::HafLocation_HafPose* temp = pose_utm_02_;
  pose_utm_02_ = nullptr;
  return temp;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::_internal_mutable_pose_utm_02() {
  
  if (pose_utm_02_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::HafLocation_HafPose>(GetArena());
    pose_utm_02_ = p;
  }
  return pose_utm_02_;
}
inline ::location::HafLocation_HafPose* HafLocation_HafPoseWithCovariance::mutable_pose_utm_02() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafPoseWithCovariance.pose_utm_02)
  return _internal_mutable_pose_utm_02();
}
inline void HafLocation_HafPoseWithCovariance::set_allocated_pose_utm_02(::location::HafLocation_HafPose* pose_utm_02) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_utm_02_;
  }
  if (pose_utm_02) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose_utm_02);
    if (message_arena != submessage_arena) {
      pose_utm_02 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_utm_02, submessage_arena);
    }
    
  } else {
    
  }
  pose_utm_02_ = pose_utm_02;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafPoseWithCovariance.pose_utm_02)
}

// uint32 utm_zone_id_01 = 7;
inline void HafLocation_HafPoseWithCovariance::clear_utm_zone_id_01() {
  utm_zone_id_01_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafLocation_HafPoseWithCovariance::_internal_utm_zone_id_01() const {
  return utm_zone_id_01_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafLocation_HafPoseWithCovariance::utm_zone_id_01() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafPoseWithCovariance.utm_zone_id_01)
  return _internal_utm_zone_id_01();
}
inline void HafLocation_HafPoseWithCovariance::_internal_set_utm_zone_id_01(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utm_zone_id_01_ = value;
}
inline void HafLocation_HafPoseWithCovariance::set_utm_zone_id_01(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utm_zone_id_01(value);
  // @@protoc_insertion_point(field_set:location.HafLocation.HafPoseWithCovariance.utm_zone_id_01)
}

// uint32 utm_zone_id_02 = 8;
inline void HafLocation_HafPoseWithCovariance::clear_utm_zone_id_02() {
  utm_zone_id_02_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafLocation_HafPoseWithCovariance::_internal_utm_zone_id_02() const {
  return utm_zone_id_02_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafLocation_HafPoseWithCovariance::utm_zone_id_02() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafPoseWithCovariance.utm_zone_id_02)
  return _internal_utm_zone_id_02();
}
inline void HafLocation_HafPoseWithCovariance::_internal_set_utm_zone_id_02(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utm_zone_id_02_ = value;
}
inline void HafLocation_HafPoseWithCovariance::set_utm_zone_id_02(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utm_zone_id_02(value);
  // @@protoc_insertion_point(field_set:location.HafLocation.HafPoseWithCovariance.utm_zone_id_02)
}

// -------------------------------------------------------------------

// HafLocation_HafTwist

// .perception.common.Point3f linear_vrf = 1;
inline bool HafLocation_HafTwist::_internal_has_linear_vrf() const {
  return this != internal_default_instance() && linear_vrf_ != nullptr;
}
inline bool HafLocation_HafTwist::has_linear_vrf() const {
  return _internal_has_linear_vrf();
}
inline const ::perception::common::Point3f& HafLocation_HafTwist::_internal_linear_vrf() const {
  const ::perception::common::Point3f* p = linear_vrf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& HafLocation_HafTwist::linear_vrf() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafTwist.linear_vrf)
  return _internal_linear_vrf();
}
inline void HafLocation_HafTwist::unsafe_arena_set_allocated_linear_vrf(
    ::perception::common::Point3f* linear_vrf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_vrf_);
  }
  linear_vrf_ = linear_vrf;
  if (linear_vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafTwist.linear_vrf)
}
inline ::perception::common::Point3f* HafLocation_HafTwist::release_linear_vrf() {
  auto temp = unsafe_arena_release_linear_vrf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafTwist::unsafe_arena_release_linear_vrf() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafTwist.linear_vrf)
  
  ::perception::common::Point3f* temp = linear_vrf_;
  linear_vrf_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafTwist::_internal_mutable_linear_vrf() {
  
  if (linear_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    linear_vrf_ = p;
  }
  return linear_vrf_;
}
inline ::perception::common::Point3f* HafLocation_HafTwist::mutable_linear_vrf() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafTwist.linear_vrf)
  return _internal_mutable_linear_vrf();
}
inline void HafLocation_HafTwist::set_allocated_linear_vrf(::perception::common::Point3f* linear_vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_vrf_);
  }
  if (linear_vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_vrf)->GetArena();
    if (message_arena != submessage_arena) {
      linear_vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_vrf, submessage_arena);
    }
    
  } else {
    
  }
  linear_vrf_ = linear_vrf;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafTwist.linear_vrf)
}

// .perception.common.Point3f angular_vrf = 2;
inline bool HafLocation_HafTwist::_internal_has_angular_vrf() const {
  return this != internal_default_instance() && angular_vrf_ != nullptr;
}
inline bool HafLocation_HafTwist::has_angular_vrf() const {
  return _internal_has_angular_vrf();
}
inline const ::perception::common::Point3f& HafLocation_HafTwist::_internal_angular_vrf() const {
  const ::perception::common::Point3f* p = angular_vrf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& HafLocation_HafTwist::angular_vrf() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafTwist.angular_vrf)
  return _internal_angular_vrf();
}
inline void HafLocation_HafTwist::unsafe_arena_set_allocated_angular_vrf(
    ::perception::common::Point3f* angular_vrf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_vrf_);
  }
  angular_vrf_ = angular_vrf;
  if (angular_vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafTwist.angular_vrf)
}
inline ::perception::common::Point3f* HafLocation_HafTwist::release_angular_vrf() {
  auto temp = unsafe_arena_release_angular_vrf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafTwist::unsafe_arena_release_angular_vrf() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafTwist.angular_vrf)
  
  ::perception::common::Point3f* temp = angular_vrf_;
  angular_vrf_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafTwist::_internal_mutable_angular_vrf() {
  
  if (angular_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    angular_vrf_ = p;
  }
  return angular_vrf_;
}
inline ::perception::common::Point3f* HafLocation_HafTwist::mutable_angular_vrf() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafTwist.angular_vrf)
  return _internal_mutable_angular_vrf();
}
inline void HafLocation_HafTwist::set_allocated_angular_vrf(::perception::common::Point3f* angular_vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_vrf_);
  }
  if (angular_vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_vrf)->GetArena();
    if (message_arena != submessage_arena) {
      angular_vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_vrf, submessage_arena);
    }
    
  } else {
    
  }
  angular_vrf_ = angular_vrf;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafTwist.angular_vrf)
}

// .perception.common.Point3f angular_raw_vrf = 3;
inline bool HafLocation_HafTwist::_internal_has_angular_raw_vrf() const {
  return this != internal_default_instance() && angular_raw_vrf_ != nullptr;
}
inline bool HafLocation_HafTwist::has_angular_raw_vrf() const {
  return _internal_has_angular_raw_vrf();
}
inline const ::perception::common::Point3f& HafLocation_HafTwist::_internal_angular_raw_vrf() const {
  const ::perception::common::Point3f* p = angular_raw_vrf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& HafLocation_HafTwist::angular_raw_vrf() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafTwist.angular_raw_vrf)
  return _internal_angular_raw_vrf();
}
inline void HafLocation_HafTwist::unsafe_arena_set_allocated_angular_raw_vrf(
    ::perception::common::Point3f* angular_raw_vrf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_raw_vrf_);
  }
  angular_raw_vrf_ = angular_raw_vrf;
  if (angular_raw_vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafTwist.angular_raw_vrf)
}
inline ::perception::common::Point3f* HafLocation_HafTwist::release_angular_raw_vrf() {
  auto temp = unsafe_arena_release_angular_raw_vrf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafTwist::unsafe_arena_release_angular_raw_vrf() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafTwist.angular_raw_vrf)
  
  ::perception::common::Point3f* temp = angular_raw_vrf_;
  angular_raw_vrf_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafTwist::_internal_mutable_angular_raw_vrf() {
  
  if (angular_raw_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    angular_raw_vrf_ = p;
  }
  return angular_raw_vrf_;
}
inline ::perception::common::Point3f* HafLocation_HafTwist::mutable_angular_raw_vrf() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafTwist.angular_raw_vrf)
  return _internal_mutable_angular_raw_vrf();
}
inline void HafLocation_HafTwist::set_allocated_angular_raw_vrf(::perception::common::Point3f* angular_raw_vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_raw_vrf_);
  }
  if (angular_raw_vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_raw_vrf)->GetArena();
    if (message_arena != submessage_arena) {
      angular_raw_vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_raw_vrf, submessage_arena);
    }
    
  } else {
    
  }
  angular_raw_vrf_ = angular_raw_vrf;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafTwist.angular_raw_vrf)
}

// -------------------------------------------------------------------

// HafLocation_HafTwistWithCovariance

// .location.HafLocation.HafTwist twist_vrf = 1;
inline bool HafLocation_HafTwistWithCovariance::_internal_has_twist_vrf() const {
  return this != internal_default_instance() && twist_vrf_ != nullptr;
}
inline bool HafLocation_HafTwistWithCovariance::has_twist_vrf() const {
  return _internal_has_twist_vrf();
}
inline void HafLocation_HafTwistWithCovariance::clear_twist_vrf() {
  if (GetArena() == nullptr && twist_vrf_ != nullptr) {
    delete twist_vrf_;
  }
  twist_vrf_ = nullptr;
}
inline const ::location::HafLocation_HafTwist& HafLocation_HafTwistWithCovariance::_internal_twist_vrf() const {
  const ::location::HafLocation_HafTwist* p = twist_vrf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::location::HafLocation_HafTwist*>(
      &::location::_HafLocation_HafTwist_default_instance_);
}
inline const ::location::HafLocation_HafTwist& HafLocation_HafTwistWithCovariance::twist_vrf() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafTwistWithCovariance.twist_vrf)
  return _internal_twist_vrf();
}
inline void HafLocation_HafTwistWithCovariance::unsafe_arena_set_allocated_twist_vrf(
    ::location::HafLocation_HafTwist* twist_vrf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_vrf_);
  }
  twist_vrf_ = twist_vrf;
  if (twist_vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafTwistWithCovariance.twist_vrf)
}
inline ::location::HafLocation_HafTwist* HafLocation_HafTwistWithCovariance::release_twist_vrf() {
  auto temp = unsafe_arena_release_twist_vrf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::location::HafLocation_HafTwist* HafLocation_HafTwistWithCovariance::unsafe_arena_release_twist_vrf() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafTwistWithCovariance.twist_vrf)
  
  ::location::HafLocation_HafTwist* temp = twist_vrf_;
  twist_vrf_ = nullptr;
  return temp;
}
inline ::location::HafLocation_HafTwist* HafLocation_HafTwistWithCovariance::_internal_mutable_twist_vrf() {
  
  if (twist_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::HafLocation_HafTwist>(GetArena());
    twist_vrf_ = p;
  }
  return twist_vrf_;
}
inline ::location::HafLocation_HafTwist* HafLocation_HafTwistWithCovariance::mutable_twist_vrf() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafTwistWithCovariance.twist_vrf)
  return _internal_mutable_twist_vrf();
}
inline void HafLocation_HafTwistWithCovariance::set_allocated_twist_vrf(::location::HafLocation_HafTwist* twist_vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete twist_vrf_;
  }
  if (twist_vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(twist_vrf);
    if (message_arena != submessage_arena) {
      twist_vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist_vrf, submessage_arena);
    }
    
  } else {
    
  }
  twist_vrf_ = twist_vrf;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafTwistWithCovariance.twist_vrf)
}

// repeated float covariance = 2;
inline int HafLocation_HafTwistWithCovariance::_internal_covariance_size() const {
  return covariance_.size();
}
inline int HafLocation_HafTwistWithCovariance::covariance_size() const {
  return _internal_covariance_size();
}
inline void HafLocation_HafTwistWithCovariance::clear_covariance() {
  covariance_.Clear();
}
inline float HafLocation_HafTwistWithCovariance::_internal_covariance(int index) const {
  return covariance_.Get(index);
}
inline float HafLocation_HafTwistWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafTwistWithCovariance.covariance)
  return _internal_covariance(index);
}
inline void HafLocation_HafTwistWithCovariance::set_covariance(int index, float value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:location.HafLocation.HafTwistWithCovariance.covariance)
}
inline void HafLocation_HafTwistWithCovariance::_internal_add_covariance(float value) {
  covariance_.Add(value);
}
inline void HafLocation_HafTwistWithCovariance::add_covariance(float value) {
  _internal_add_covariance(value);
  // @@protoc_insertion_point(field_add:location.HafLocation.HafTwistWithCovariance.covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
HafLocation_HafTwistWithCovariance::_internal_covariance() const {
  return covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
HafLocation_HafTwistWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:location.HafLocation.HafTwistWithCovariance.covariance)
  return _internal_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
HafLocation_HafTwistWithCovariance::_internal_mutable_covariance() {
  return &covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
HafLocation_HafTwistWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:location.HafLocation.HafTwistWithCovariance.covariance)
  return _internal_mutable_covariance();
}

// -------------------------------------------------------------------

// HafLocation_HafAccel

// .perception.common.Point3f linear_vrf = 1;
inline bool HafLocation_HafAccel::_internal_has_linear_vrf() const {
  return this != internal_default_instance() && linear_vrf_ != nullptr;
}
inline bool HafLocation_HafAccel::has_linear_vrf() const {
  return _internal_has_linear_vrf();
}
inline const ::perception::common::Point3f& HafLocation_HafAccel::_internal_linear_vrf() const {
  const ::perception::common::Point3f* p = linear_vrf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& HafLocation_HafAccel::linear_vrf() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafAccel.linear_vrf)
  return _internal_linear_vrf();
}
inline void HafLocation_HafAccel::unsafe_arena_set_allocated_linear_vrf(
    ::perception::common::Point3f* linear_vrf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_vrf_);
  }
  linear_vrf_ = linear_vrf;
  if (linear_vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafAccel.linear_vrf)
}
inline ::perception::common::Point3f* HafLocation_HafAccel::release_linear_vrf() {
  auto temp = unsafe_arena_release_linear_vrf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafAccel::unsafe_arena_release_linear_vrf() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafAccel.linear_vrf)
  
  ::perception::common::Point3f* temp = linear_vrf_;
  linear_vrf_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafAccel::_internal_mutable_linear_vrf() {
  
  if (linear_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    linear_vrf_ = p;
  }
  return linear_vrf_;
}
inline ::perception::common::Point3f* HafLocation_HafAccel::mutable_linear_vrf() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafAccel.linear_vrf)
  return _internal_mutable_linear_vrf();
}
inline void HafLocation_HafAccel::set_allocated_linear_vrf(::perception::common::Point3f* linear_vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_vrf_);
  }
  if (linear_vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_vrf)->GetArena();
    if (message_arena != submessage_arena) {
      linear_vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_vrf, submessage_arena);
    }
    
  } else {
    
  }
  linear_vrf_ = linear_vrf;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafAccel.linear_vrf)
}

// .perception.common.Point3f angular_vrf = 2;
inline bool HafLocation_HafAccel::_internal_has_angular_vrf() const {
  return this != internal_default_instance() && angular_vrf_ != nullptr;
}
inline bool HafLocation_HafAccel::has_angular_vrf() const {
  return _internal_has_angular_vrf();
}
inline const ::perception::common::Point3f& HafLocation_HafAccel::_internal_angular_vrf() const {
  const ::perception::common::Point3f* p = angular_vrf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& HafLocation_HafAccel::angular_vrf() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafAccel.angular_vrf)
  return _internal_angular_vrf();
}
inline void HafLocation_HafAccel::unsafe_arena_set_allocated_angular_vrf(
    ::perception::common::Point3f* angular_vrf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_vrf_);
  }
  angular_vrf_ = angular_vrf;
  if (angular_vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafAccel.angular_vrf)
}
inline ::perception::common::Point3f* HafLocation_HafAccel::release_angular_vrf() {
  auto temp = unsafe_arena_release_angular_vrf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafAccel::unsafe_arena_release_angular_vrf() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafAccel.angular_vrf)
  
  ::perception::common::Point3f* temp = angular_vrf_;
  angular_vrf_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafAccel::_internal_mutable_angular_vrf() {
  
  if (angular_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    angular_vrf_ = p;
  }
  return angular_vrf_;
}
inline ::perception::common::Point3f* HafLocation_HafAccel::mutable_angular_vrf() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafAccel.angular_vrf)
  return _internal_mutable_angular_vrf();
}
inline void HafLocation_HafAccel::set_allocated_angular_vrf(::perception::common::Point3f* angular_vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_vrf_);
  }
  if (angular_vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_vrf)->GetArena();
    if (message_arena != submessage_arena) {
      angular_vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_vrf, submessage_arena);
    }
    
  } else {
    
  }
  angular_vrf_ = angular_vrf;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafAccel.angular_vrf)
}

// .perception.common.Point3f linear_raw_vrf = 3;
inline bool HafLocation_HafAccel::_internal_has_linear_raw_vrf() const {
  return this != internal_default_instance() && linear_raw_vrf_ != nullptr;
}
inline bool HafLocation_HafAccel::has_linear_raw_vrf() const {
  return _internal_has_linear_raw_vrf();
}
inline const ::perception::common::Point3f& HafLocation_HafAccel::_internal_linear_raw_vrf() const {
  const ::perception::common::Point3f* p = linear_raw_vrf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& HafLocation_HafAccel::linear_raw_vrf() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafAccel.linear_raw_vrf)
  return _internal_linear_raw_vrf();
}
inline void HafLocation_HafAccel::unsafe_arena_set_allocated_linear_raw_vrf(
    ::perception::common::Point3f* linear_raw_vrf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_raw_vrf_);
  }
  linear_raw_vrf_ = linear_raw_vrf;
  if (linear_raw_vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafAccel.linear_raw_vrf)
}
inline ::perception::common::Point3f* HafLocation_HafAccel::release_linear_raw_vrf() {
  auto temp = unsafe_arena_release_linear_raw_vrf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafAccel::unsafe_arena_release_linear_raw_vrf() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafAccel.linear_raw_vrf)
  
  ::perception::common::Point3f* temp = linear_raw_vrf_;
  linear_raw_vrf_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* HafLocation_HafAccel::_internal_mutable_linear_raw_vrf() {
  
  if (linear_raw_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    linear_raw_vrf_ = p;
  }
  return linear_raw_vrf_;
}
inline ::perception::common::Point3f* HafLocation_HafAccel::mutable_linear_raw_vrf() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafAccel.linear_raw_vrf)
  return _internal_mutable_linear_raw_vrf();
}
inline void HafLocation_HafAccel::set_allocated_linear_raw_vrf(::perception::common::Point3f* linear_raw_vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_raw_vrf_);
  }
  if (linear_raw_vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_raw_vrf)->GetArena();
    if (message_arena != submessage_arena) {
      linear_raw_vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_raw_vrf, submessage_arena);
    }
    
  } else {
    
  }
  linear_raw_vrf_ = linear_raw_vrf;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafAccel.linear_raw_vrf)
}

// -------------------------------------------------------------------

// HafLocation_HafAccelWithCovariance

// .location.HafLocation.HafAccel linear_vrf = 1;
inline bool HafLocation_HafAccelWithCovariance::_internal_has_linear_vrf() const {
  return this != internal_default_instance() && linear_vrf_ != nullptr;
}
inline bool HafLocation_HafAccelWithCovariance::has_linear_vrf() const {
  return _internal_has_linear_vrf();
}
inline void HafLocation_HafAccelWithCovariance::clear_linear_vrf() {
  if (GetArena() == nullptr && linear_vrf_ != nullptr) {
    delete linear_vrf_;
  }
  linear_vrf_ = nullptr;
}
inline const ::location::HafLocation_HafAccel& HafLocation_HafAccelWithCovariance::_internal_linear_vrf() const {
  const ::location::HafLocation_HafAccel* p = linear_vrf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::location::HafLocation_HafAccel*>(
      &::location::_HafLocation_HafAccel_default_instance_);
}
inline const ::location::HafLocation_HafAccel& HafLocation_HafAccelWithCovariance::linear_vrf() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafAccelWithCovariance.linear_vrf)
  return _internal_linear_vrf();
}
inline void HafLocation_HafAccelWithCovariance::unsafe_arena_set_allocated_linear_vrf(
    ::location::HafLocation_HafAccel* linear_vrf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_vrf_);
  }
  linear_vrf_ = linear_vrf;
  if (linear_vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.HafAccelWithCovariance.linear_vrf)
}
inline ::location::HafLocation_HafAccel* HafLocation_HafAccelWithCovariance::release_linear_vrf() {
  auto temp = unsafe_arena_release_linear_vrf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::location::HafLocation_HafAccel* HafLocation_HafAccelWithCovariance::unsafe_arena_release_linear_vrf() {
  // @@protoc_insertion_point(field_release:location.HafLocation.HafAccelWithCovariance.linear_vrf)
  
  ::location::HafLocation_HafAccel* temp = linear_vrf_;
  linear_vrf_ = nullptr;
  return temp;
}
inline ::location::HafLocation_HafAccel* HafLocation_HafAccelWithCovariance::_internal_mutable_linear_vrf() {
  
  if (linear_vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::HafLocation_HafAccel>(GetArena());
    linear_vrf_ = p;
  }
  return linear_vrf_;
}
inline ::location::HafLocation_HafAccel* HafLocation_HafAccelWithCovariance::mutable_linear_vrf() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.HafAccelWithCovariance.linear_vrf)
  return _internal_mutable_linear_vrf();
}
inline void HafLocation_HafAccelWithCovariance::set_allocated_linear_vrf(::location::HafLocation_HafAccel* linear_vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete linear_vrf_;
  }
  if (linear_vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linear_vrf);
    if (message_arena != submessage_arena) {
      linear_vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_vrf, submessage_arena);
    }
    
  } else {
    
  }
  linear_vrf_ = linear_vrf;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.HafAccelWithCovariance.linear_vrf)
}

// repeated float covariance = 2;
inline int HafLocation_HafAccelWithCovariance::_internal_covariance_size() const {
  return covariance_.size();
}
inline int HafLocation_HafAccelWithCovariance::covariance_size() const {
  return _internal_covariance_size();
}
inline void HafLocation_HafAccelWithCovariance::clear_covariance() {
  covariance_.Clear();
}
inline float HafLocation_HafAccelWithCovariance::_internal_covariance(int index) const {
  return covariance_.Get(index);
}
inline float HafLocation_HafAccelWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:location.HafLocation.HafAccelWithCovariance.covariance)
  return _internal_covariance(index);
}
inline void HafLocation_HafAccelWithCovariance::set_covariance(int index, float value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:location.HafLocation.HafAccelWithCovariance.covariance)
}
inline void HafLocation_HafAccelWithCovariance::_internal_add_covariance(float value) {
  covariance_.Add(value);
}
inline void HafLocation_HafAccelWithCovariance::add_covariance(float value) {
  _internal_add_covariance(value);
  // @@protoc_insertion_point(field_add:location.HafLocation.HafAccelWithCovariance.covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
HafLocation_HafAccelWithCovariance::_internal_covariance() const {
  return covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
HafLocation_HafAccelWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:location.HafLocation.HafAccelWithCovariance.covariance)
  return _internal_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
HafLocation_HafAccelWithCovariance::_internal_mutable_covariance() {
  return &covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
HafLocation_HafAccelWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:location.HafLocation.HafAccelWithCovariance.covariance)
  return _internal_mutable_covariance();
}

// -------------------------------------------------------------------

// HafLocation

// .minieye.Header header = 1;
inline bool HafLocation::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool HafLocation::has_header() const {
  return _internal_has_header();
}
inline const ::minieye::Header& HafLocation::_internal_header() const {
  const ::minieye::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::Header*>(
      &::minieye::_Header_default_instance_);
}
inline const ::minieye::Header& HafLocation::header() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.header)
  return _internal_header();
}
inline void HafLocation::unsafe_arena_set_allocated_header(
    ::minieye::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.header)
}
inline ::minieye::Header* HafLocation::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::Header* HafLocation::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:location.HafLocation.header)
  
  ::minieye::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::minieye::Header* HafLocation::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::minieye::Header* HafLocation::mutable_header() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.header)
  return _internal_mutable_header();
}
inline void HafLocation::set_allocated_header(::minieye::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.header)
}

// bool is_valid = 2;
inline void HafLocation::clear_is_valid() {
  is_valid_ = false;
}
inline bool HafLocation::_internal_is_valid() const {
  return is_valid_;
}
inline bool HafLocation::is_valid() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.is_valid)
  return _internal_is_valid();
}
inline void HafLocation::_internal_set_is_valid(bool value) {
  
  is_valid_ = value;
}
inline void HafLocation::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:location.HafLocation.is_valid)
}

// uint32 gps_week = 3;
inline void HafLocation::clear_gps_week() {
  gps_week_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafLocation::_internal_gps_week() const {
  return gps_week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafLocation::gps_week() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.gps_week)
  return _internal_gps_week();
}
inline void HafLocation::_internal_set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gps_week_ = value;
}
inline void HafLocation::set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gps_week(value);
  // @@protoc_insertion_point(field_set:location.HafLocation.gps_week)
}

// double gps_sec = 4;
inline void HafLocation::clear_gps_sec() {
  gps_sec_ = 0;
}
inline double HafLocation::_internal_gps_sec() const {
  return gps_sec_;
}
inline double HafLocation::gps_sec() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.gps_sec)
  return _internal_gps_sec();
}
inline void HafLocation::_internal_set_gps_sec(double value) {
  
  gps_sec_ = value;
}
inline void HafLocation::set_gps_sec(double value) {
  _internal_set_gps_sec(value);
  // @@protoc_insertion_point(field_set:location.HafLocation.gps_sec)
}

// .location.HafLocation.CoordType coordinate_type = 5;
inline void HafLocation::clear_coordinate_type() {
  coordinate_type_ = 0;
}
inline ::location::HafLocation_CoordType HafLocation::_internal_coordinate_type() const {
  return static_cast< ::location::HafLocation_CoordType >(coordinate_type_);
}
inline ::location::HafLocation_CoordType HafLocation::coordinate_type() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.coordinate_type)
  return _internal_coordinate_type();
}
inline void HafLocation::_internal_set_coordinate_type(::location::HafLocation_CoordType value) {
  
  coordinate_type_ = value;
}
inline void HafLocation::set_coordinate_type(::location::HafLocation_CoordType value) {
  _internal_set_coordinate_type(value);
  // @@protoc_insertion_point(field_set:location.HafLocation.coordinate_type)
}

// .location.HafLocation.HafPoseWithCovariance pose = 6;
inline bool HafLocation::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool HafLocation::has_pose() const {
  return _internal_has_pose();
}
inline void HafLocation::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::location::HafLocation_HafPoseWithCovariance& HafLocation::_internal_pose() const {
  const ::location::HafLocation_HafPoseWithCovariance* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::location::HafLocation_HafPoseWithCovariance*>(
      &::location::_HafLocation_HafPoseWithCovariance_default_instance_);
}
inline const ::location::HafLocation_HafPoseWithCovariance& HafLocation::pose() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.pose)
  return _internal_pose();
}
inline void HafLocation::unsafe_arena_set_allocated_pose(
    ::location::HafLocation_HafPoseWithCovariance* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.pose)
}
inline ::location::HafLocation_HafPoseWithCovariance* HafLocation::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::location::HafLocation_HafPoseWithCovariance* HafLocation::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:location.HafLocation.pose)
  
  ::location::HafLocation_HafPoseWithCovariance* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::location::HafLocation_HafPoseWithCovariance* HafLocation::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::HafLocation_HafPoseWithCovariance>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::location::HafLocation_HafPoseWithCovariance* HafLocation::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.pose)
  return _internal_mutable_pose();
}
inline void HafLocation::set_allocated_pose(::location::HafLocation_HafPoseWithCovariance* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.pose)
}

// .location.HafLocation.HafTwistWithCovariance velocity = 7;
inline bool HafLocation::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool HafLocation::has_velocity() const {
  return _internal_has_velocity();
}
inline void HafLocation::clear_velocity() {
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::location::HafLocation_HafTwistWithCovariance& HafLocation::_internal_velocity() const {
  const ::location::HafLocation_HafTwistWithCovariance* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::location::HafLocation_HafTwistWithCovariance*>(
      &::location::_HafLocation_HafTwistWithCovariance_default_instance_);
}
inline const ::location::HafLocation_HafTwistWithCovariance& HafLocation::velocity() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.velocity)
  return _internal_velocity();
}
inline void HafLocation::unsafe_arena_set_allocated_velocity(
    ::location::HafLocation_HafTwistWithCovariance* velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.velocity)
}
inline ::location::HafLocation_HafTwistWithCovariance* HafLocation::release_velocity() {
  auto temp = unsafe_arena_release_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::location::HafLocation_HafTwistWithCovariance* HafLocation::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:location.HafLocation.velocity)
  
  ::location::HafLocation_HafTwistWithCovariance* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::location::HafLocation_HafTwistWithCovariance* HafLocation::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::HafLocation_HafTwistWithCovariance>(GetArena());
    velocity_ = p;
  }
  return velocity_;
}
inline ::location::HafLocation_HafTwistWithCovariance* HafLocation::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.velocity)
  return _internal_mutable_velocity();
}
inline void HafLocation::set_allocated_velocity(::location::HafLocation_HafTwistWithCovariance* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.velocity)
}

// .location.HafLocation.HafAccelWithCovariance acceleration = 8;
inline bool HafLocation::_internal_has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != nullptr;
}
inline bool HafLocation::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void HafLocation::clear_acceleration() {
  if (GetArena() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
}
inline const ::location::HafLocation_HafAccelWithCovariance& HafLocation::_internal_acceleration() const {
  const ::location::HafLocation_HafAccelWithCovariance* p = acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::location::HafLocation_HafAccelWithCovariance*>(
      &::location::_HafLocation_HafAccelWithCovariance_default_instance_);
}
inline const ::location::HafLocation_HafAccelWithCovariance& HafLocation::acceleration() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.acceleration)
  return _internal_acceleration();
}
inline void HafLocation::unsafe_arena_set_allocated_acceleration(
    ::location::HafLocation_HafAccelWithCovariance* acceleration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_);
  }
  acceleration_ = acceleration;
  if (acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.acceleration)
}
inline ::location::HafLocation_HafAccelWithCovariance* HafLocation::release_acceleration() {
  auto temp = unsafe_arena_release_acceleration();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::location::HafLocation_HafAccelWithCovariance* HafLocation::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:location.HafLocation.acceleration)
  
  ::location::HafLocation_HafAccelWithCovariance* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::location::HafLocation_HafAccelWithCovariance* HafLocation::_internal_mutable_acceleration() {
  
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::HafLocation_HafAccelWithCovariance>(GetArena());
    acceleration_ = p;
  }
  return acceleration_;
}
inline ::location::HafLocation_HafAccelWithCovariance* HafLocation::mutable_acceleration() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.acceleration)
  return _internal_mutable_acceleration();
}
inline void HafLocation::set_allocated_acceleration(::location::HafLocation_HafAccelWithCovariance* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete acceleration_;
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(acceleration);
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.acceleration)
}

// uint32 rtk_status = 9;
inline void HafLocation::clear_rtk_status() {
  rtk_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafLocation::_internal_rtk_status() const {
  return rtk_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafLocation::rtk_status() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.rtk_status)
  return _internal_rtk_status();
}
inline void HafLocation::_internal_set_rtk_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rtk_status_ = value;
}
inline void HafLocation::set_rtk_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtk_status(value);
  // @@protoc_insertion_point(field_set:location.HafLocation.rtk_status)
}

// uint32 location_state = 10;
inline void HafLocation::clear_location_state() {
  location_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafLocation::_internal_location_state() const {
  return location_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafLocation::location_state() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.location_state)
  return _internal_location_state();
}
inline void HafLocation::_internal_set_location_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  location_state_ = value;
}
inline void HafLocation::set_location_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_location_state(value);
  // @@protoc_insertion_point(field_set:location.HafLocation.location_state)
}

// .perception.common.Point3f mounting_error = 11;
inline bool HafLocation::_internal_has_mounting_error() const {
  return this != internal_default_instance() && mounting_error_ != nullptr;
}
inline bool HafLocation::has_mounting_error() const {
  return _internal_has_mounting_error();
}
inline const ::perception::common::Point3f& HafLocation::_internal_mounting_error() const {
  const ::perception::common::Point3f* p = mounting_error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& HafLocation::mounting_error() const {
  // @@protoc_insertion_point(field_get:location.HafLocation.mounting_error)
  return _internal_mounting_error();
}
inline void HafLocation::unsafe_arena_set_allocated_mounting_error(
    ::perception::common::Point3f* mounting_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mounting_error_);
  }
  mounting_error_ = mounting_error;
  if (mounting_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafLocation.mounting_error)
}
inline ::perception::common::Point3f* HafLocation::release_mounting_error() {
  auto temp = unsafe_arena_release_mounting_error();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* HafLocation::unsafe_arena_release_mounting_error() {
  // @@protoc_insertion_point(field_release:location.HafLocation.mounting_error)
  
  ::perception::common::Point3f* temp = mounting_error_;
  mounting_error_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* HafLocation::_internal_mutable_mounting_error() {
  
  if (mounting_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    mounting_error_ = p;
  }
  return mounting_error_;
}
inline ::perception::common::Point3f* HafLocation::mutable_mounting_error() {
  // @@protoc_insertion_point(field_mutable:location.HafLocation.mounting_error)
  return _internal_mutable_mounting_error();
}
inline void HafLocation::set_allocated_mounting_error(::perception::common::Point3f* mounting_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mounting_error_);
  }
  if (mounting_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mounting_error)->GetArena();
    if (message_arena != submessage_arena) {
      mounting_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mounting_error, submessage_arena);
    }
    
  } else {
    
  }
  mounting_error_ = mounting_error;
  // @@protoc_insertion_point(field_set_allocated:location.HafLocation.mounting_error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace location

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::location::HafLocation_CoordType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::location::HafLocation_CoordType>() {
  return ::location::HafLocation_CoordType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_haf_5flocation_2eproto
