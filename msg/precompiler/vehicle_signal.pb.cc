// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_signal.proto

#include "vehicle_signal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSignal_SignalsEntry_DoNotUse_vehicle_5fsignal_2eproto;
namespace minieye {
class VehicleSignal_SignalsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleSignal_SignalsEntry_DoNotUse> _instance;
} _VehicleSignal_SignalsEntry_DoNotUse_default_instance_;
class VehicleSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleSignal> _instance;
} _VehicleSignal_default_instance_;
class CommandSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandSignal> _instance;
} _CommandSignal_default_instance_;
class OfflineCalibSigDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OfflineCalibSigDetail> _instance;
} _OfflineCalibSigDetail_default_instance_;
class OfflineCalibRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OfflineCalibRsp> _instance;
} _OfflineCalibRsp_default_instance_;
class AutoCalibSigDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoCalibSigDetail> _instance;
} _AutoCalibSigDetail_default_instance_;
class AutoCalibRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoCalibRsp> _instance;
} _AutoCalibRsp_default_instance_;
class SensitivitySigDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensitivitySigDetail> _instance;
} _SensitivitySigDetail_default_instance_;
class SwitchSigDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwitchSigDetail> _instance;
} _SwitchSigDetail_default_instance_;
class ObjectAlgDiagnoseDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectAlgDiagnoseDetail> _instance;
} _ObjectAlgDiagnoseDetail_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_AutoCalibRsp_vehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_AutoCalibRsp_default_instance_;
    new (ptr) ::minieye::AutoCalibRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::AutoCalibRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoCalibRsp_vehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AutoCalibRsp_vehicle_5fsignal_2eproto}, {}};

static void InitDefaultsscc_info_AutoCalibSigDetail_vehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_AutoCalibSigDetail_default_instance_;
    new (ptr) ::minieye::AutoCalibSigDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::AutoCalibSigDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoCalibSigDetail_vehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AutoCalibSigDetail_vehicle_5fsignal_2eproto}, {}};

static void InitDefaultsscc_info_CommandSignal_vehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_CommandSignal_default_instance_;
    new (ptr) ::minieye::CommandSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::CommandSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandSignal_vehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandSignal_vehicle_5fsignal_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ObjectAlgDiagnoseDetail_vehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_ObjectAlgDiagnoseDetail_default_instance_;
    new (ptr) ::minieye::ObjectAlgDiagnoseDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::ObjectAlgDiagnoseDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectAlgDiagnoseDetail_vehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectAlgDiagnoseDetail_vehicle_5fsignal_2eproto}, {}};

static void InitDefaultsscc_info_OfflineCalibRsp_vehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_OfflineCalibRsp_default_instance_;
    new (ptr) ::minieye::OfflineCalibRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::OfflineCalibRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OfflineCalibRsp_vehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OfflineCalibRsp_vehicle_5fsignal_2eproto}, {}};

static void InitDefaultsscc_info_OfflineCalibSigDetail_vehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_OfflineCalibSigDetail_default_instance_;
    new (ptr) ::minieye::OfflineCalibSigDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::OfflineCalibSigDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OfflineCalibSigDetail_vehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OfflineCalibSigDetail_vehicle_5fsignal_2eproto}, {}};

static void InitDefaultsscc_info_SensitivitySigDetail_vehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_SensitivitySigDetail_default_instance_;
    new (ptr) ::minieye::SensitivitySigDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::SensitivitySigDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensitivitySigDetail_vehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensitivitySigDetail_vehicle_5fsignal_2eproto}, {}};

static void InitDefaultsscc_info_SwitchSigDetail_vehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_SwitchSigDetail_default_instance_;
    new (ptr) ::minieye::SwitchSigDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::SwitchSigDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwitchSigDetail_vehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SwitchSigDetail_vehicle_5fsignal_2eproto}, {}};

static void InitDefaultsscc_info_VehicleSignal_vehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_VehicleSignal_default_instance_;
    new (ptr) ::minieye::VehicleSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::VehicleSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleSignal_vehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleSignal_vehicle_5fsignal_2eproto}, {
      &scc_info_VehicleSignal_SignalsEntry_DoNotUse_vehicle_5fsignal_2eproto.base,}};

static void InitDefaultsscc_info_VehicleSignal_SignalsEntry_DoNotUse_vehicle_5fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_VehicleSignal_SignalsEntry_DoNotUse_default_instance_;
    new (ptr) ::minieye::VehicleSignal_SignalsEntry_DoNotUse();
  }
  ::minieye::VehicleSignal_SignalsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSignal_SignalsEntry_DoNotUse_vehicle_5fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleSignal_SignalsEntry_DoNotUse_vehicle_5fsignal_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vehicle_5fsignal_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vehicle_5fsignal_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vehicle_5fsignal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vehicle_5fsignal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal_SignalsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal_SignalsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal_SignalsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal_SignalsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal, signals_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::VehicleSignal, tick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::CommandSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::CommandSignal, signal_),
  PROTOBUF_FIELD_OFFSET(::minieye::CommandSignal, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibSigDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibSigDetail, camera_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibSigDetail, marker_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibSigDetail, camera_pitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibSigDetail, camera_yaw_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibSigDetail, camera_roll_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibSigDetail, camera_height_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibSigDetail, left_dist_to_camera_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibSigDetail, right_dist_to_camera_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibSigDetail, front_wheel_camera_dist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibRsp, camera_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibRsp, state_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibRsp, err_code_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibRsp, camera_pitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibRsp, camera_yaw_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibRsp, camera_roll_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibRsp, camera_height_),
  PROTOBUF_FIELD_OFFSET(::minieye::OfflineCalibRsp, process_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibSigDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibSigDetail, camera_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibSigDetail, camera_height_),
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibSigDetail, left_dist_to_camera_),
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibSigDetail, right_dist_to_camera_),
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibSigDetail, front_wheel_camera_dist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibRsp, camera_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibRsp, state_),
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibRsp, err_code_),
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibRsp, camera_pitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibRsp, camera_yaw_),
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibRsp, camera_roll_),
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibRsp, camera_height_),
  PROTOBUF_FIELD_OFFSET(::minieye::AutoCalibRsp, process_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::SensitivitySigDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::SensitivitySigDetail, warning_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::SwitchSigDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::SwitchSigDetail, switch_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::ObjectAlgDiagnoseDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::ObjectAlgDiagnoseDetail, seq_no_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::minieye::VehicleSignal_SignalsEntry_DoNotUse)},
  { 9, -1, sizeof(::minieye::VehicleSignal)},
  { 17, -1, sizeof(::minieye::CommandSignal)},
  { 24, -1, sizeof(::minieye::OfflineCalibSigDetail)},
  { 38, -1, sizeof(::minieye::OfflineCalibRsp)},
  { 51, -1, sizeof(::minieye::AutoCalibSigDetail)},
  { 61, -1, sizeof(::minieye::AutoCalibRsp)},
  { 74, -1, sizeof(::minieye::SensitivitySigDetail)},
  { 80, -1, sizeof(::minieye::SwitchSigDetail)},
  { 86, -1, sizeof(::minieye::ObjectAlgDiagnoseDetail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_VehicleSignal_SignalsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_VehicleSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_CommandSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_OfflineCalibSigDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_OfflineCalibRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_AutoCalibSigDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_AutoCalibRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_SensitivitySigDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_SwitchSigDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_ObjectAlgDiagnoseDetail_default_instance_),
};

const char descriptor_table_protodef_vehicle_5fsignal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024vehicle_signal.proto\022\007minieye\032\031google/"
  "protobuf/any.proto\"\230\013\n\rVehicleSignal\0224\n\007"
  "signals\030\001 \003(\0132#.minieye.VehicleSignal.Si"
  "gnalsEntry\022\021\n\ttimestamp\030\002 \001(\004\022\014\n\004tick\030\003 "
  "\001(\004\032.\n\014SignalsEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005valu"
  "e\030\002 \001(\002:\0028\001\"\377\t\n\nSignalType\022\r\n\tkCanSpeed\020"
  "\000\022\r\n\tkTurnLamp\020\001\022\026\n\022kHazardWarningLamp\020\002"
  "\022\014\n\010kBraking\020\003\022\020\n\014kAccelerator\020\004\022\027\n\023kSte"
  "eringWheelAngle\020\005\022\033\n\027kSteeringWheelAngle"
  "Rate\020\006\022\017\n\013kFrontWiper\020\007\022\016\n\nkDriveMode\020\010\022"
  "\016\n\nkMovingDir\020\t\022\014\n\010kYawRate\020\n\022\r\n\tkGearMo"
  "de\020\013\022\030\n\024kABSFullyOperational\020\014\022\026\n\022kBrakP"
  "edalPosition\020\r\022\026\n\022kLongiAcceleration\020\016\022\030"
  "\n\024kLateralAcceleration\020\017\022\031\n\025kACUCollisio"
  "nDetected\020\020\022\024\n\020kAutoLightSwitch\020\021\022\022\n\016kLo"
  "wBeanStatus\020\022\022\016\n\nkESCStatus\020\023\022\025\n\021kFrontW"
  "iperHighSt\020\024\022\020\n\014kHBeanStatus\020\025\022\020\n\014kTcsAc"
  "tiveSt\020\026\022\020\n\014kVdcActiveSt\020\027\022\013\n\007kEngSpd\020\030\022"
  "\017\n\013kRLWheelSpd\020\031\022\022\n\016kRLWheelRotate\020\032\022\017\n\013"
  "kRRWheelSpd\020\033\022\022\n\016kRRWheelRotate\020\034\022\017\n\013kFL"
  "WheelSpd\020\035\022\022\n\016kFLWheelRotate\020\036\022\017\n\013kFRWhe"
  "elSpd\020\037\022\022\n\016kFRWheelRotate\020 \022\021\n\rkStrngWhl"
  "Torq\020!\022\023\n\017kSteeringModeSt\020\"\022\022\n\016kHandsOff"
  "detSt\020#\022\021\n\rkEpsLkaCtrlSt\020$\022\016\n\nkAccCtrlSt"
  "\020%\022\021\n\rkAccTargetSpd\020&\022\021\n\rkLkaTorqueReq\020\'"
  "\022\023\n\017kLkaTorqueReqSt\020(\022\017\n\013kEmsEngTorq\020)\022\034"
  "\n\030kFrontLeftFogLightStatus\020*\022\035\n\031kFrontRi"
  "ghtFogLightStatus\020+\022\027\n\023kRearFogLightStat"
  "us\020,\022\030\n\024kRLWheelPulseCounter\020-\022\030\n\024kRRWhe"
  "elPulseCounter\020.\022\030\n\024kFLWheelPulseCounter"
  "\020/\022\030\n\024kFRWheelPulseCounter\0200\022\021\n\rkDriverD"
  "oorSt\0201\022\024\n\020kPassengerDoorSt\0202\022\016\n\nkRHRDoo"
  "rSt\0203\022\016\n\nkLHRDoorSt\0204\022\025\n\021kDriverSeatBelt"
  "Sw\0205\022\026\n\022kAutoParkingActive\0206\022\022\n\016kCarEngi"
  "neHood\0207\022\027\n\023kCarBackCompartment\0208\022\027\n\023kCa"
  "rWindowLeftFront\0209\022\030\n\024kCarWindowRightFro"
  "nt\020:\022\026\n\022kCarWindowLeftRear\020;\022\027\n\023kCarWind"
  "owRightRear\020<\"\316\004\n\rCommandSignal\0221\n\006signa"
  "l\030\001 \001(\0162!.minieye.CommandSignal.SignalTy"
  "pe\022%\n\007details\030\002 \001(\0132\024.google.protobuf.An"
  "y\"\342\003\n\nSignalType\022\014\n\010kUnknown\020\000\022\023\n\017kStart"
  "Autocalib\020\001\022\032\n\026kStartOfflineCalibrate\020\002\022"
  "\026\n\022kModLdwSensitivity\020\003\022\026\n\022kModFcwSensit"
  "ivity\020\004\022\026\n\022kModTsrSensitivity\020\005\022\026\n\022kModP"
  "CWSensitivity\020\006\022\016\n\nkFCWSwitch\020\007\022\017\n\013kFVSA"
  "Switch\020\010\022\016\n\nkHMWSwitch\020\t\022\016\n\nkIHCSwitch\020\n"
  "\022\016\n\nkLDWSwitch\020\013\022\030\n\024kSroverspdwarnSwitch"
  "\020\014\022\016\n\nkTSRSwitch\020\r\022\016\n\nkPCWSwitch\020\016\022\016\n\nkL"
  "KASwitch\020\017\022\016\n\nkESCSwitch\020\020\022\022\n\016kStopAutoc"
  "alib\020\021\022\025\n\021kStopOfflineCalib\020\022\022\016\n\nkSAGSwi"
  "tch\020\023\022\016\n\nkACCSwitch\020\024\022\021\n\rkTJAICASwitch\020\025"
  "\022\016\n\nkHMASwitch\020\026\022\034\n\030kObjectAlgDiagnoseSw"
  "itch\020\027\"\361\001\n\025OfflineCalibSigDetail\022\021\n\tcame"
  "ra_id\030\001 \001(\005\022\023\n\013marker_type\030\002 \001(\005\022\024\n\014came"
  "ra_pitch\030\003 \001(\001\022\022\n\ncamera_yaw\030\004 \001(\001\022\023\n\013ca"
  "mera_roll\030\005 \001(\001\022\025\n\rcamera_height\030\006 \001(\001\022\033"
  "\n\023left_dist_to_camera\030\007 \001(\001\022\034\n\024right_dis"
  "t_to_camera\030\010 \001(\001\022\037\n\027front_wheel_camera_"
  "dist\030\t \001(\001\"\254\001\n\017OfflineCalibRsp\022\021\n\tcamera"
  "_id\030\001 \001(\005\022\r\n\005state\030\002 \001(\005\022\020\n\010err_code\030\003 \001"
  "(\005\022\024\n\014camera_pitch\030\004 \001(\001\022\022\n\ncamera_yaw\030\005"
  " \001(\001\022\023\n\013camera_roll\030\006 \001(\001\022\025\n\rcamera_heig"
  "ht\030\007 \001(\001\022\017\n\007process\030\010 \001(\001\"\232\001\n\022AutoCalibS"
  "igDetail\022\021\n\tcamera_id\030\001 \001(\005\022\025\n\rcamera_he"
  "ight\030\002 \001(\001\022\033\n\023left_dist_to_camera\030\003 \001(\001\022"
  "\034\n\024right_dist_to_camera\030\004 \001(\001\022\037\n\027front_w"
  "heel_camera_dist\030\005 \001(\001\"\251\001\n\014AutoCalibRsp\022"
  "\021\n\tcamera_id\030\001 \001(\005\022\r\n\005state\030\002 \001(\005\022\020\n\010err"
  "_code\030\003 \001(\005\022\024\n\014camera_pitch\030\004 \001(\001\022\022\n\ncam"
  "era_yaw\030\005 \001(\001\022\023\n\013camera_roll\030\006 \001(\001\022\025\n\rca"
  "mera_height\030\007 \001(\001\022\017\n\007process\030\010 \001(\001\"-\n\024Se"
  "nsitivitySigDetail\022\025\n\rwarning_level\030\001 \001("
  "\005\"\'\n\017SwitchSigDetail\022\024\n\014switch_value\030\001 \001"
  "(\005\")\n\027ObjectAlgDiagnoseDetail\022\016\n\006seq_no\030"
  "\001 \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vehicle_5fsignal_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vehicle_5fsignal_2eproto_sccs[10] = {
  &scc_info_AutoCalibRsp_vehicle_5fsignal_2eproto.base,
  &scc_info_AutoCalibSigDetail_vehicle_5fsignal_2eproto.base,
  &scc_info_CommandSignal_vehicle_5fsignal_2eproto.base,
  &scc_info_ObjectAlgDiagnoseDetail_vehicle_5fsignal_2eproto.base,
  &scc_info_OfflineCalibRsp_vehicle_5fsignal_2eproto.base,
  &scc_info_OfflineCalibSigDetail_vehicle_5fsignal_2eproto.base,
  &scc_info_SensitivitySigDetail_vehicle_5fsignal_2eproto.base,
  &scc_info_SwitchSigDetail_vehicle_5fsignal_2eproto.base,
  &scc_info_VehicleSignal_vehicle_5fsignal_2eproto.base,
  &scc_info_VehicleSignal_SignalsEntry_DoNotUse_vehicle_5fsignal_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vehicle_5fsignal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fsignal_2eproto = {
  false, false, descriptor_table_protodef_vehicle_5fsignal_2eproto, "vehicle_signal.proto", 2973,
  &descriptor_table_vehicle_5fsignal_2eproto_once, descriptor_table_vehicle_5fsignal_2eproto_sccs, descriptor_table_vehicle_5fsignal_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_vehicle_5fsignal_2eproto::offsets,
  file_level_metadata_vehicle_5fsignal_2eproto, 10, file_level_enum_descriptors_vehicle_5fsignal_2eproto, file_level_service_descriptors_vehicle_5fsignal_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_5fsignal_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vehicle_5fsignal_2eproto)), true);
namespace minieye {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleSignal_SignalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vehicle_5fsignal_2eproto);
  return file_level_enum_descriptors_vehicle_5fsignal_2eproto[0];
}
bool VehicleSignal_SignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VehicleSignal_SignalType VehicleSignal::kCanSpeed;
constexpr VehicleSignal_SignalType VehicleSignal::kTurnLamp;
constexpr VehicleSignal_SignalType VehicleSignal::kHazardWarningLamp;
constexpr VehicleSignal_SignalType VehicleSignal::kBraking;
constexpr VehicleSignal_SignalType VehicleSignal::kAccelerator;
constexpr VehicleSignal_SignalType VehicleSignal::kSteeringWheelAngle;
constexpr VehicleSignal_SignalType VehicleSignal::kSteeringWheelAngleRate;
constexpr VehicleSignal_SignalType VehicleSignal::kFrontWiper;
constexpr VehicleSignal_SignalType VehicleSignal::kDriveMode;
constexpr VehicleSignal_SignalType VehicleSignal::kMovingDir;
constexpr VehicleSignal_SignalType VehicleSignal::kYawRate;
constexpr VehicleSignal_SignalType VehicleSignal::kGearMode;
constexpr VehicleSignal_SignalType VehicleSignal::kABSFullyOperational;
constexpr VehicleSignal_SignalType VehicleSignal::kBrakPedalPosition;
constexpr VehicleSignal_SignalType VehicleSignal::kLongiAcceleration;
constexpr VehicleSignal_SignalType VehicleSignal::kLateralAcceleration;
constexpr VehicleSignal_SignalType VehicleSignal::kACUCollisionDetected;
constexpr VehicleSignal_SignalType VehicleSignal::kAutoLightSwitch;
constexpr VehicleSignal_SignalType VehicleSignal::kLowBeanStatus;
constexpr VehicleSignal_SignalType VehicleSignal::kESCStatus;
constexpr VehicleSignal_SignalType VehicleSignal::kFrontWiperHighSt;
constexpr VehicleSignal_SignalType VehicleSignal::kHBeanStatus;
constexpr VehicleSignal_SignalType VehicleSignal::kTcsActiveSt;
constexpr VehicleSignal_SignalType VehicleSignal::kVdcActiveSt;
constexpr VehicleSignal_SignalType VehicleSignal::kEngSpd;
constexpr VehicleSignal_SignalType VehicleSignal::kRLWheelSpd;
constexpr VehicleSignal_SignalType VehicleSignal::kRLWheelRotate;
constexpr VehicleSignal_SignalType VehicleSignal::kRRWheelSpd;
constexpr VehicleSignal_SignalType VehicleSignal::kRRWheelRotate;
constexpr VehicleSignal_SignalType VehicleSignal::kFLWheelSpd;
constexpr VehicleSignal_SignalType VehicleSignal::kFLWheelRotate;
constexpr VehicleSignal_SignalType VehicleSignal::kFRWheelSpd;
constexpr VehicleSignal_SignalType VehicleSignal::kFRWheelRotate;
constexpr VehicleSignal_SignalType VehicleSignal::kStrngWhlTorq;
constexpr VehicleSignal_SignalType VehicleSignal::kSteeringModeSt;
constexpr VehicleSignal_SignalType VehicleSignal::kHandsOffdetSt;
constexpr VehicleSignal_SignalType VehicleSignal::kEpsLkaCtrlSt;
constexpr VehicleSignal_SignalType VehicleSignal::kAccCtrlSt;
constexpr VehicleSignal_SignalType VehicleSignal::kAccTargetSpd;
constexpr VehicleSignal_SignalType VehicleSignal::kLkaTorqueReq;
constexpr VehicleSignal_SignalType VehicleSignal::kLkaTorqueReqSt;
constexpr VehicleSignal_SignalType VehicleSignal::kEmsEngTorq;
constexpr VehicleSignal_SignalType VehicleSignal::kFrontLeftFogLightStatus;
constexpr VehicleSignal_SignalType VehicleSignal::kFrontRightFogLightStatus;
constexpr VehicleSignal_SignalType VehicleSignal::kRearFogLightStatus;
constexpr VehicleSignal_SignalType VehicleSignal::kRLWheelPulseCounter;
constexpr VehicleSignal_SignalType VehicleSignal::kRRWheelPulseCounter;
constexpr VehicleSignal_SignalType VehicleSignal::kFLWheelPulseCounter;
constexpr VehicleSignal_SignalType VehicleSignal::kFRWheelPulseCounter;
constexpr VehicleSignal_SignalType VehicleSignal::kDriverDoorSt;
constexpr VehicleSignal_SignalType VehicleSignal::kPassengerDoorSt;
constexpr VehicleSignal_SignalType VehicleSignal::kRHRDoorSt;
constexpr VehicleSignal_SignalType VehicleSignal::kLHRDoorSt;
constexpr VehicleSignal_SignalType VehicleSignal::kDriverSeatBeltSw;
constexpr VehicleSignal_SignalType VehicleSignal::kAutoParkingActive;
constexpr VehicleSignal_SignalType VehicleSignal::kCarEngineHood;
constexpr VehicleSignal_SignalType VehicleSignal::kCarBackCompartment;
constexpr VehicleSignal_SignalType VehicleSignal::kCarWindowLeftFront;
constexpr VehicleSignal_SignalType VehicleSignal::kCarWindowRightFront;
constexpr VehicleSignal_SignalType VehicleSignal::kCarWindowLeftRear;
constexpr VehicleSignal_SignalType VehicleSignal::kCarWindowRightRear;
constexpr VehicleSignal_SignalType VehicleSignal::SignalType_MIN;
constexpr VehicleSignal_SignalType VehicleSignal::SignalType_MAX;
constexpr int VehicleSignal::SignalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandSignal_SignalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vehicle_5fsignal_2eproto);
  return file_level_enum_descriptors_vehicle_5fsignal_2eproto[1];
}
bool CommandSignal_SignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CommandSignal_SignalType CommandSignal::kUnknown;
constexpr CommandSignal_SignalType CommandSignal::kStartAutocalib;
constexpr CommandSignal_SignalType CommandSignal::kStartOfflineCalibrate;
constexpr CommandSignal_SignalType CommandSignal::kModLdwSensitivity;
constexpr CommandSignal_SignalType CommandSignal::kModFcwSensitivity;
constexpr CommandSignal_SignalType CommandSignal::kModTsrSensitivity;
constexpr CommandSignal_SignalType CommandSignal::kModPCWSensitivity;
constexpr CommandSignal_SignalType CommandSignal::kFCWSwitch;
constexpr CommandSignal_SignalType CommandSignal::kFVSASwitch;
constexpr CommandSignal_SignalType CommandSignal::kHMWSwitch;
constexpr CommandSignal_SignalType CommandSignal::kIHCSwitch;
constexpr CommandSignal_SignalType CommandSignal::kLDWSwitch;
constexpr CommandSignal_SignalType CommandSignal::kSroverspdwarnSwitch;
constexpr CommandSignal_SignalType CommandSignal::kTSRSwitch;
constexpr CommandSignal_SignalType CommandSignal::kPCWSwitch;
constexpr CommandSignal_SignalType CommandSignal::kLKASwitch;
constexpr CommandSignal_SignalType CommandSignal::kESCSwitch;
constexpr CommandSignal_SignalType CommandSignal::kStopAutocalib;
constexpr CommandSignal_SignalType CommandSignal::kStopOfflineCalib;
constexpr CommandSignal_SignalType CommandSignal::kSAGSwitch;
constexpr CommandSignal_SignalType CommandSignal::kACCSwitch;
constexpr CommandSignal_SignalType CommandSignal::kTJAICASwitch;
constexpr CommandSignal_SignalType CommandSignal::kHMASwitch;
constexpr CommandSignal_SignalType CommandSignal::kObjectAlgDiagnoseSwitch;
constexpr CommandSignal_SignalType CommandSignal::SignalType_MIN;
constexpr CommandSignal_SignalType CommandSignal::SignalType_MAX;
constexpr int CommandSignal::SignalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

VehicleSignal_SignalsEntry_DoNotUse::VehicleSignal_SignalsEntry_DoNotUse() {}
VehicleSignal_SignalsEntry_DoNotUse::VehicleSignal_SignalsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VehicleSignal_SignalsEntry_DoNotUse::MergeFrom(const VehicleSignal_SignalsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VehicleSignal_SignalsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VehicleSignal_SignalsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void VehicleSignal::InitAsDefaultInstance() {
}
class VehicleSignal::_Internal {
 public:
};

VehicleSignal::VehicleSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.VehicleSignal)
}
VehicleSignal::VehicleSignal(const VehicleSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signals_.MergeFrom(from.signals_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.VehicleSignal)
}

void VehicleSignal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleSignal_vehicle_5fsignal_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
}

VehicleSignal::~VehicleSignal() {
  // @@protoc_insertion_point(destructor:minieye.VehicleSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VehicleSignal::ArenaDtor(void* object) {
  VehicleSignal* _this = reinterpret_cast< VehicleSignal* >(object);
  (void)_this;
}
void VehicleSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleSignal& VehicleSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleSignal_vehicle_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void VehicleSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.VehicleSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, float> signals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&signals_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.VehicleSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, float> signals = 1;
  if (!this->_internal_signals().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_signals().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_signals().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->_internal_signals().begin();
          it != this->_internal_signals().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VehicleSignal_SignalsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->_internal_signals().begin();
          it != this->_internal_signals().end(); ++it) {
        target = VehicleSignal_SignalsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.VehicleSignal)
  return target;
}

size_t VehicleSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.VehicleSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, float> signals = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_signals_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
      it = this->_internal_signals().begin();
      it != this->_internal_signals().end(); ++it) {
    total_size += VehicleSignal_SignalsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.VehicleSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.VehicleSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.VehicleSignal)
    MergeFrom(*source);
  }
}

void VehicleSignal::MergeFrom(const VehicleSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.VehicleSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void VehicleSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.VehicleSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSignal::CopyFrom(const VehicleSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.VehicleSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSignal::IsInitialized() const {
  return true;
}

void VehicleSignal::InternalSwap(VehicleSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signals_.Swap(&other->signals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleSignal, tick_)
      + sizeof(VehicleSignal::tick_)
      - PROTOBUF_FIELD_OFFSET(VehicleSignal, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandSignal::InitAsDefaultInstance() {
  ::minieye::_CommandSignal_default_instance_._instance.get_mutable()->details_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class CommandSignal::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& details(const CommandSignal* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
CommandSignal::_Internal::details(const CommandSignal* msg) {
  return *msg->details_;
}
void CommandSignal::clear_details() {
  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
CommandSignal::CommandSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.CommandSignal)
}
CommandSignal::CommandSignal(const CommandSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_details()) {
    details_ = new PROTOBUF_NAMESPACE_ID::Any(*from.details_);
  } else {
    details_ = nullptr;
  }
  signal_ = from.signal_;
  // @@protoc_insertion_point(copy_constructor:minieye.CommandSignal)
}

void CommandSignal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandSignal_vehicle_5fsignal_2eproto.base);
  ::memset(&details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_) -
      reinterpret_cast<char*>(&details_)) + sizeof(signal_));
}

CommandSignal::~CommandSignal() {
  // @@protoc_insertion_point(destructor:minieye.CommandSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete details_;
}

void CommandSignal::ArenaDtor(void* object) {
  CommandSignal* _this = reinterpret_cast< CommandSignal* >(object);
  (void)_this;
}
void CommandSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandSignal& CommandSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandSignal_vehicle_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void CommandSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.CommandSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
  signal_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.CommandSignal.SignalType signal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_signal(static_cast<::minieye::CommandSignal_SignalType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.CommandSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.CommandSignal.SignalType signal = 1;
  if (this->signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_signal(), target);
  }

  // .google.protobuf.Any details = 2;
  if (this->has_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.CommandSignal)
  return target;
}

size_t CommandSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.CommandSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any details = 2;
  if (this->has_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *details_);
  }

  // .minieye.CommandSignal.SignalType signal = 1;
  if (this->signal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_signal());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.CommandSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.CommandSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.CommandSignal)
    MergeFrom(*source);
  }
}

void CommandSignal::MergeFrom(const CommandSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.CommandSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_details()) {
    _internal_mutable_details()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_details());
  }
  if (from.signal() != 0) {
    _internal_set_signal(from._internal_signal());
  }
}

void CommandSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.CommandSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSignal::CopyFrom(const CommandSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.CommandSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSignal::IsInitialized() const {
  return true;
}

void CommandSignal::InternalSwap(CommandSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSignal, signal_)
      + sizeof(CommandSignal::signal_)
      - PROTOBUF_FIELD_OFFSET(CommandSignal, details_)>(
          reinterpret_cast<char*>(&details_),
          reinterpret_cast<char*>(&other->details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OfflineCalibSigDetail::InitAsDefaultInstance() {
}
class OfflineCalibSigDetail::_Internal {
 public:
};

OfflineCalibSigDetail::OfflineCalibSigDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.OfflineCalibSigDetail)
}
OfflineCalibSigDetail::OfflineCalibSigDetail(const OfflineCalibSigDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&camera_id_, &from.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&front_wheel_camera_dist_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(front_wheel_camera_dist_));
  // @@protoc_insertion_point(copy_constructor:minieye.OfflineCalibSigDetail)
}

void OfflineCalibSigDetail::SharedCtor() {
  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&front_wheel_camera_dist_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(front_wheel_camera_dist_));
}

OfflineCalibSigDetail::~OfflineCalibSigDetail() {
  // @@protoc_insertion_point(destructor:minieye.OfflineCalibSigDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OfflineCalibSigDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OfflineCalibSigDetail::ArenaDtor(void* object) {
  OfflineCalibSigDetail* _this = reinterpret_cast< OfflineCalibSigDetail* >(object);
  (void)_this;
}
void OfflineCalibSigDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OfflineCalibSigDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OfflineCalibSigDetail& OfflineCalibSigDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OfflineCalibSigDetail_vehicle_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void OfflineCalibSigDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.OfflineCalibSigDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&front_wheel_camera_dist_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(front_wheel_camera_dist_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OfflineCalibSigDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 marker_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          marker_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double camera_pitch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          camera_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          camera_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_roll = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          camera_roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double left_dist_to_camera = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          left_dist_to_camera_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double right_dist_to_camera = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          right_dist_to_camera_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double front_wheel_camera_dist = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          front_wheel_camera_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OfflineCalibSigDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.OfflineCalibSigDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_camera_id(), target);
  }

  // int32 marker_type = 2;
  if (this->marker_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_marker_type(), target);
  }

  // double camera_pitch = 3;
  if (!(this->camera_pitch() <= 0 && this->camera_pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_camera_pitch(), target);
  }

  // double camera_yaw = 4;
  if (!(this->camera_yaw() <= 0 && this->camera_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_camera_yaw(), target);
  }

  // double camera_roll = 5;
  if (!(this->camera_roll() <= 0 && this->camera_roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_camera_roll(), target);
  }

  // double camera_height = 6;
  if (!(this->camera_height() <= 0 && this->camera_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_camera_height(), target);
  }

  // double left_dist_to_camera = 7;
  if (!(this->left_dist_to_camera() <= 0 && this->left_dist_to_camera() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_left_dist_to_camera(), target);
  }

  // double right_dist_to_camera = 8;
  if (!(this->right_dist_to_camera() <= 0 && this->right_dist_to_camera() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_right_dist_to_camera(), target);
  }

  // double front_wheel_camera_dist = 9;
  if (!(this->front_wheel_camera_dist() <= 0 && this->front_wheel_camera_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_front_wheel_camera_dist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.OfflineCalibSigDetail)
  return target;
}

size_t OfflineCalibSigDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.OfflineCalibSigDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camera_id());
  }

  // int32 marker_type = 2;
  if (this->marker_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_marker_type());
  }

  // double camera_pitch = 3;
  if (!(this->camera_pitch() <= 0 && this->camera_pitch() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_yaw = 4;
  if (!(this->camera_yaw() <= 0 && this->camera_yaw() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_roll = 5;
  if (!(this->camera_roll() <= 0 && this->camera_roll() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_height = 6;
  if (!(this->camera_height() <= 0 && this->camera_height() >= 0)) {
    total_size += 1 + 8;
  }

  // double left_dist_to_camera = 7;
  if (!(this->left_dist_to_camera() <= 0 && this->left_dist_to_camera() >= 0)) {
    total_size += 1 + 8;
  }

  // double right_dist_to_camera = 8;
  if (!(this->right_dist_to_camera() <= 0 && this->right_dist_to_camera() >= 0)) {
    total_size += 1 + 8;
  }

  // double front_wheel_camera_dist = 9;
  if (!(this->front_wheel_camera_dist() <= 0 && this->front_wheel_camera_dist() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OfflineCalibSigDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.OfflineCalibSigDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const OfflineCalibSigDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OfflineCalibSigDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.OfflineCalibSigDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.OfflineCalibSigDetail)
    MergeFrom(*source);
  }
}

void OfflineCalibSigDetail::MergeFrom(const OfflineCalibSigDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.OfflineCalibSigDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.marker_type() != 0) {
    _internal_set_marker_type(from._internal_marker_type());
  }
  if (!(from.camera_pitch() <= 0 && from.camera_pitch() >= 0)) {
    _internal_set_camera_pitch(from._internal_camera_pitch());
  }
  if (!(from.camera_yaw() <= 0 && from.camera_yaw() >= 0)) {
    _internal_set_camera_yaw(from._internal_camera_yaw());
  }
  if (!(from.camera_roll() <= 0 && from.camera_roll() >= 0)) {
    _internal_set_camera_roll(from._internal_camera_roll());
  }
  if (!(from.camera_height() <= 0 && from.camera_height() >= 0)) {
    _internal_set_camera_height(from._internal_camera_height());
  }
  if (!(from.left_dist_to_camera() <= 0 && from.left_dist_to_camera() >= 0)) {
    _internal_set_left_dist_to_camera(from._internal_left_dist_to_camera());
  }
  if (!(from.right_dist_to_camera() <= 0 && from.right_dist_to_camera() >= 0)) {
    _internal_set_right_dist_to_camera(from._internal_right_dist_to_camera());
  }
  if (!(from.front_wheel_camera_dist() <= 0 && from.front_wheel_camera_dist() >= 0)) {
    _internal_set_front_wheel_camera_dist(from._internal_front_wheel_camera_dist());
  }
}

void OfflineCalibSigDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.OfflineCalibSigDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineCalibSigDetail::CopyFrom(const OfflineCalibSigDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.OfflineCalibSigDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineCalibSigDetail::IsInitialized() const {
  return true;
}

void OfflineCalibSigDetail::InternalSwap(OfflineCalibSigDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OfflineCalibSigDetail, front_wheel_camera_dist_)
      + sizeof(OfflineCalibSigDetail::front_wheel_camera_dist_)
      - PROTOBUF_FIELD_OFFSET(OfflineCalibSigDetail, camera_id_)>(
          reinterpret_cast<char*>(&camera_id_),
          reinterpret_cast<char*>(&other->camera_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OfflineCalibSigDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OfflineCalibRsp::InitAsDefaultInstance() {
}
class OfflineCalibRsp::_Internal {
 public:
};

OfflineCalibRsp::OfflineCalibRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.OfflineCalibRsp)
}
OfflineCalibRsp::OfflineCalibRsp(const OfflineCalibRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&camera_id_, &from.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:minieye.OfflineCalibRsp)
}

void OfflineCalibRsp::SharedCtor() {
  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(err_code_));
}

OfflineCalibRsp::~OfflineCalibRsp() {
  // @@protoc_insertion_point(destructor:minieye.OfflineCalibRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OfflineCalibRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OfflineCalibRsp::ArenaDtor(void* object) {
  OfflineCalibRsp* _this = reinterpret_cast< OfflineCalibRsp* >(object);
  (void)_this;
}
void OfflineCalibRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OfflineCalibRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OfflineCalibRsp& OfflineCalibRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OfflineCalibRsp_vehicle_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void OfflineCalibRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.OfflineCalibRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OfflineCalibRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 err_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double camera_pitch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          camera_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          camera_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_roll = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          camera_roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double process = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          process_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OfflineCalibRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.OfflineCalibRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_camera_id(), target);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // int32 err_code = 3;
  if (this->err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_err_code(), target);
  }

  // double camera_pitch = 4;
  if (!(this->camera_pitch() <= 0 && this->camera_pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_camera_pitch(), target);
  }

  // double camera_yaw = 5;
  if (!(this->camera_yaw() <= 0 && this->camera_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_camera_yaw(), target);
  }

  // double camera_roll = 6;
  if (!(this->camera_roll() <= 0 && this->camera_roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_camera_roll(), target);
  }

  // double camera_height = 7;
  if (!(this->camera_height() <= 0 && this->camera_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_camera_height(), target);
  }

  // double process = 8;
  if (!(this->process() <= 0 && this->process() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_process(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.OfflineCalibRsp)
  return target;
}

size_t OfflineCalibRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.OfflineCalibRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camera_id());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // double camera_pitch = 4;
  if (!(this->camera_pitch() <= 0 && this->camera_pitch() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_yaw = 5;
  if (!(this->camera_yaw() <= 0 && this->camera_yaw() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_roll = 6;
  if (!(this->camera_roll() <= 0 && this->camera_roll() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_height = 7;
  if (!(this->camera_height() <= 0 && this->camera_height() >= 0)) {
    total_size += 1 + 8;
  }

  // double process = 8;
  if (!(this->process() <= 0 && this->process() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 err_code = 3;
  if (this->err_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_err_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OfflineCalibRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.OfflineCalibRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const OfflineCalibRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OfflineCalibRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.OfflineCalibRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.OfflineCalibRsp)
    MergeFrom(*source);
  }
}

void OfflineCalibRsp::MergeFrom(const OfflineCalibRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.OfflineCalibRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from.camera_pitch() <= 0 && from.camera_pitch() >= 0)) {
    _internal_set_camera_pitch(from._internal_camera_pitch());
  }
  if (!(from.camera_yaw() <= 0 && from.camera_yaw() >= 0)) {
    _internal_set_camera_yaw(from._internal_camera_yaw());
  }
  if (!(from.camera_roll() <= 0 && from.camera_roll() >= 0)) {
    _internal_set_camera_roll(from._internal_camera_roll());
  }
  if (!(from.camera_height() <= 0 && from.camera_height() >= 0)) {
    _internal_set_camera_height(from._internal_camera_height());
  }
  if (!(from.process() <= 0 && from.process() >= 0)) {
    _internal_set_process(from._internal_process());
  }
  if (from.err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
}

void OfflineCalibRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.OfflineCalibRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineCalibRsp::CopyFrom(const OfflineCalibRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.OfflineCalibRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineCalibRsp::IsInitialized() const {
  return true;
}

void OfflineCalibRsp::InternalSwap(OfflineCalibRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OfflineCalibRsp, err_code_)
      + sizeof(OfflineCalibRsp::err_code_)
      - PROTOBUF_FIELD_OFFSET(OfflineCalibRsp, camera_id_)>(
          reinterpret_cast<char*>(&camera_id_),
          reinterpret_cast<char*>(&other->camera_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OfflineCalibRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoCalibSigDetail::InitAsDefaultInstance() {
}
class AutoCalibSigDetail::_Internal {
 public:
};

AutoCalibSigDetail::AutoCalibSigDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.AutoCalibSigDetail)
}
AutoCalibSigDetail::AutoCalibSigDetail(const AutoCalibSigDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&camera_height_, &from.camera_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_id_) -
    reinterpret_cast<char*>(&camera_height_)) + sizeof(camera_id_));
  // @@protoc_insertion_point(copy_constructor:minieye.AutoCalibSigDetail)
}

void AutoCalibSigDetail::SharedCtor() {
  ::memset(&camera_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&camera_height_)) + sizeof(camera_id_));
}

AutoCalibSigDetail::~AutoCalibSigDetail() {
  // @@protoc_insertion_point(destructor:minieye.AutoCalibSigDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoCalibSigDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AutoCalibSigDetail::ArenaDtor(void* object) {
  AutoCalibSigDetail* _this = reinterpret_cast< AutoCalibSigDetail* >(object);
  (void)_this;
}
void AutoCalibSigDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoCalibSigDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoCalibSigDetail& AutoCalibSigDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoCalibSigDetail_vehicle_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void AutoCalibSigDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.AutoCalibSigDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camera_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&camera_height_)) + sizeof(camera_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoCalibSigDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double camera_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double left_dist_to_camera = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          left_dist_to_camera_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double right_dist_to_camera = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          right_dist_to_camera_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double front_wheel_camera_dist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          front_wheel_camera_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoCalibSigDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.AutoCalibSigDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_camera_id(), target);
  }

  // double camera_height = 2;
  if (!(this->camera_height() <= 0 && this->camera_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_camera_height(), target);
  }

  // double left_dist_to_camera = 3;
  if (!(this->left_dist_to_camera() <= 0 && this->left_dist_to_camera() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_left_dist_to_camera(), target);
  }

  // double right_dist_to_camera = 4;
  if (!(this->right_dist_to_camera() <= 0 && this->right_dist_to_camera() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_right_dist_to_camera(), target);
  }

  // double front_wheel_camera_dist = 5;
  if (!(this->front_wheel_camera_dist() <= 0 && this->front_wheel_camera_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_front_wheel_camera_dist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.AutoCalibSigDetail)
  return target;
}

size_t AutoCalibSigDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.AutoCalibSigDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double camera_height = 2;
  if (!(this->camera_height() <= 0 && this->camera_height() >= 0)) {
    total_size += 1 + 8;
  }

  // double left_dist_to_camera = 3;
  if (!(this->left_dist_to_camera() <= 0 && this->left_dist_to_camera() >= 0)) {
    total_size += 1 + 8;
  }

  // double right_dist_to_camera = 4;
  if (!(this->right_dist_to_camera() <= 0 && this->right_dist_to_camera() >= 0)) {
    total_size += 1 + 8;
  }

  // double front_wheel_camera_dist = 5;
  if (!(this->front_wheel_camera_dist() <= 0 && this->front_wheel_camera_dist() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camera_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoCalibSigDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.AutoCalibSigDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoCalibSigDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoCalibSigDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.AutoCalibSigDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.AutoCalibSigDetail)
    MergeFrom(*source);
  }
}

void AutoCalibSigDetail::MergeFrom(const AutoCalibSigDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.AutoCalibSigDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.camera_height() <= 0 && from.camera_height() >= 0)) {
    _internal_set_camera_height(from._internal_camera_height());
  }
  if (!(from.left_dist_to_camera() <= 0 && from.left_dist_to_camera() >= 0)) {
    _internal_set_left_dist_to_camera(from._internal_left_dist_to_camera());
  }
  if (!(from.right_dist_to_camera() <= 0 && from.right_dist_to_camera() >= 0)) {
    _internal_set_right_dist_to_camera(from._internal_right_dist_to_camera());
  }
  if (!(from.front_wheel_camera_dist() <= 0 && from.front_wheel_camera_dist() >= 0)) {
    _internal_set_front_wheel_camera_dist(from._internal_front_wheel_camera_dist());
  }
  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
}

void AutoCalibSigDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.AutoCalibSigDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoCalibSigDetail::CopyFrom(const AutoCalibSigDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.AutoCalibSigDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoCalibSigDetail::IsInitialized() const {
  return true;
}

void AutoCalibSigDetail::InternalSwap(AutoCalibSigDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoCalibSigDetail, camera_id_)
      + sizeof(AutoCalibSigDetail::camera_id_)
      - PROTOBUF_FIELD_OFFSET(AutoCalibSigDetail, camera_height_)>(
          reinterpret_cast<char*>(&camera_height_),
          reinterpret_cast<char*>(&other->camera_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoCalibSigDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoCalibRsp::InitAsDefaultInstance() {
}
class AutoCalibRsp::_Internal {
 public:
};

AutoCalibRsp::AutoCalibRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.AutoCalibRsp)
}
AutoCalibRsp::AutoCalibRsp(const AutoCalibRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&camera_id_, &from.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:minieye.AutoCalibRsp)
}

void AutoCalibRsp::SharedCtor() {
  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(err_code_));
}

AutoCalibRsp::~AutoCalibRsp() {
  // @@protoc_insertion_point(destructor:minieye.AutoCalibRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoCalibRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AutoCalibRsp::ArenaDtor(void* object) {
  AutoCalibRsp* _this = reinterpret_cast< AutoCalibRsp* >(object);
  (void)_this;
}
void AutoCalibRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoCalibRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoCalibRsp& AutoCalibRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoCalibRsp_vehicle_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void AutoCalibRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.AutoCalibRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoCalibRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 err_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double camera_pitch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          camera_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          camera_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_roll = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          camera_roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double camera_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double process = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          process_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoCalibRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.AutoCalibRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_camera_id(), target);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // int32 err_code = 3;
  if (this->err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_err_code(), target);
  }

  // double camera_pitch = 4;
  if (!(this->camera_pitch() <= 0 && this->camera_pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_camera_pitch(), target);
  }

  // double camera_yaw = 5;
  if (!(this->camera_yaw() <= 0 && this->camera_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_camera_yaw(), target);
  }

  // double camera_roll = 6;
  if (!(this->camera_roll() <= 0 && this->camera_roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_camera_roll(), target);
  }

  // double camera_height = 7;
  if (!(this->camera_height() <= 0 && this->camera_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_camera_height(), target);
  }

  // double process = 8;
  if (!(this->process() <= 0 && this->process() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_process(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.AutoCalibRsp)
  return target;
}

size_t AutoCalibRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.AutoCalibRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camera_id());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // double camera_pitch = 4;
  if (!(this->camera_pitch() <= 0 && this->camera_pitch() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_yaw = 5;
  if (!(this->camera_yaw() <= 0 && this->camera_yaw() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_roll = 6;
  if (!(this->camera_roll() <= 0 && this->camera_roll() >= 0)) {
    total_size += 1 + 8;
  }

  // double camera_height = 7;
  if (!(this->camera_height() <= 0 && this->camera_height() >= 0)) {
    total_size += 1 + 8;
  }

  // double process = 8;
  if (!(this->process() <= 0 && this->process() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 err_code = 3;
  if (this->err_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_err_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoCalibRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.AutoCalibRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoCalibRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoCalibRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.AutoCalibRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.AutoCalibRsp)
    MergeFrom(*source);
  }
}

void AutoCalibRsp::MergeFrom(const AutoCalibRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.AutoCalibRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from.camera_pitch() <= 0 && from.camera_pitch() >= 0)) {
    _internal_set_camera_pitch(from._internal_camera_pitch());
  }
  if (!(from.camera_yaw() <= 0 && from.camera_yaw() >= 0)) {
    _internal_set_camera_yaw(from._internal_camera_yaw());
  }
  if (!(from.camera_roll() <= 0 && from.camera_roll() >= 0)) {
    _internal_set_camera_roll(from._internal_camera_roll());
  }
  if (!(from.camera_height() <= 0 && from.camera_height() >= 0)) {
    _internal_set_camera_height(from._internal_camera_height());
  }
  if (!(from.process() <= 0 && from.process() >= 0)) {
    _internal_set_process(from._internal_process());
  }
  if (from.err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
}

void AutoCalibRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.AutoCalibRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoCalibRsp::CopyFrom(const AutoCalibRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.AutoCalibRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoCalibRsp::IsInitialized() const {
  return true;
}

void AutoCalibRsp::InternalSwap(AutoCalibRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoCalibRsp, err_code_)
      + sizeof(AutoCalibRsp::err_code_)
      - PROTOBUF_FIELD_OFFSET(AutoCalibRsp, camera_id_)>(
          reinterpret_cast<char*>(&camera_id_),
          reinterpret_cast<char*>(&other->camera_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoCalibRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensitivitySigDetail::InitAsDefaultInstance() {
}
class SensitivitySigDetail::_Internal {
 public:
};

SensitivitySigDetail::SensitivitySigDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.SensitivitySigDetail)
}
SensitivitySigDetail::SensitivitySigDetail(const SensitivitySigDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  warning_level_ = from.warning_level_;
  // @@protoc_insertion_point(copy_constructor:minieye.SensitivitySigDetail)
}

void SensitivitySigDetail::SharedCtor() {
  warning_level_ = 0;
}

SensitivitySigDetail::~SensitivitySigDetail() {
  // @@protoc_insertion_point(destructor:minieye.SensitivitySigDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensitivitySigDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensitivitySigDetail::ArenaDtor(void* object) {
  SensitivitySigDetail* _this = reinterpret_cast< SensitivitySigDetail* >(object);
  (void)_this;
}
void SensitivitySigDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensitivitySigDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensitivitySigDetail& SensitivitySigDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensitivitySigDetail_vehicle_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void SensitivitySigDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.SensitivitySigDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  warning_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensitivitySigDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 warning_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          warning_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensitivitySigDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.SensitivitySigDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 warning_level = 1;
  if (this->warning_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_warning_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.SensitivitySigDetail)
  return target;
}

size_t SensitivitySigDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.SensitivitySigDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 warning_level = 1;
  if (this->warning_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_warning_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensitivitySigDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.SensitivitySigDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const SensitivitySigDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensitivitySigDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.SensitivitySigDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.SensitivitySigDetail)
    MergeFrom(*source);
  }
}

void SensitivitySigDetail::MergeFrom(const SensitivitySigDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.SensitivitySigDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.warning_level() != 0) {
    _internal_set_warning_level(from._internal_warning_level());
  }
}

void SensitivitySigDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.SensitivitySigDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensitivitySigDetail::CopyFrom(const SensitivitySigDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.SensitivitySigDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensitivitySigDetail::IsInitialized() const {
  return true;
}

void SensitivitySigDetail::InternalSwap(SensitivitySigDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(warning_level_, other->warning_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensitivitySigDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwitchSigDetail::InitAsDefaultInstance() {
}
class SwitchSigDetail::_Internal {
 public:
};

SwitchSigDetail::SwitchSigDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.SwitchSigDetail)
}
SwitchSigDetail::SwitchSigDetail(const SwitchSigDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  switch_value_ = from.switch_value_;
  // @@protoc_insertion_point(copy_constructor:minieye.SwitchSigDetail)
}

void SwitchSigDetail::SharedCtor() {
  switch_value_ = 0;
}

SwitchSigDetail::~SwitchSigDetail() {
  // @@protoc_insertion_point(destructor:minieye.SwitchSigDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SwitchSigDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SwitchSigDetail::ArenaDtor(void* object) {
  SwitchSigDetail* _this = reinterpret_cast< SwitchSigDetail* >(object);
  (void)_this;
}
void SwitchSigDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwitchSigDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwitchSigDetail& SwitchSigDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwitchSigDetail_vehicle_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void SwitchSigDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.SwitchSigDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch_value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchSigDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 switch_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          switch_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwitchSigDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.SwitchSigDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 switch_value = 1;
  if (this->switch_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_switch_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.SwitchSigDetail)
  return target;
}

size_t SwitchSigDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.SwitchSigDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 switch_value = 1;
  if (this->switch_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_switch_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchSigDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.SwitchSigDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const SwitchSigDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwitchSigDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.SwitchSigDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.SwitchSigDetail)
    MergeFrom(*source);
  }
}

void SwitchSigDetail::MergeFrom(const SwitchSigDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.SwitchSigDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.switch_value() != 0) {
    _internal_set_switch_value(from._internal_switch_value());
  }
}

void SwitchSigDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.SwitchSigDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchSigDetail::CopyFrom(const SwitchSigDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.SwitchSigDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchSigDetail::IsInitialized() const {
  return true;
}

void SwitchSigDetail::InternalSwap(SwitchSigDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(switch_value_, other->switch_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchSigDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectAlgDiagnoseDetail::InitAsDefaultInstance() {
}
class ObjectAlgDiagnoseDetail::_Internal {
 public:
};

ObjectAlgDiagnoseDetail::ObjectAlgDiagnoseDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.ObjectAlgDiagnoseDetail)
}
ObjectAlgDiagnoseDetail::ObjectAlgDiagnoseDetail(const ObjectAlgDiagnoseDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seq_no_ = from.seq_no_;
  // @@protoc_insertion_point(copy_constructor:minieye.ObjectAlgDiagnoseDetail)
}

void ObjectAlgDiagnoseDetail::SharedCtor() {
  seq_no_ = PROTOBUF_ULONGLONG(0);
}

ObjectAlgDiagnoseDetail::~ObjectAlgDiagnoseDetail() {
  // @@protoc_insertion_point(destructor:minieye.ObjectAlgDiagnoseDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectAlgDiagnoseDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObjectAlgDiagnoseDetail::ArenaDtor(void* object) {
  ObjectAlgDiagnoseDetail* _this = reinterpret_cast< ObjectAlgDiagnoseDetail* >(object);
  (void)_this;
}
void ObjectAlgDiagnoseDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectAlgDiagnoseDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectAlgDiagnoseDetail& ObjectAlgDiagnoseDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectAlgDiagnoseDetail_vehicle_5fsignal_2eproto.base);
  return *internal_default_instance();
}


void ObjectAlgDiagnoseDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.ObjectAlgDiagnoseDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seq_no_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectAlgDiagnoseDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 seq_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectAlgDiagnoseDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.ObjectAlgDiagnoseDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seq_no = 1;
  if (this->seq_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.ObjectAlgDiagnoseDetail)
  return target;
}

size_t ObjectAlgDiagnoseDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.ObjectAlgDiagnoseDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 seq_no = 1;
  if (this->seq_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectAlgDiagnoseDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.ObjectAlgDiagnoseDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectAlgDiagnoseDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectAlgDiagnoseDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.ObjectAlgDiagnoseDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.ObjectAlgDiagnoseDetail)
    MergeFrom(*source);
  }
}

void ObjectAlgDiagnoseDetail::MergeFrom(const ObjectAlgDiagnoseDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.ObjectAlgDiagnoseDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seq_no() != 0) {
    _internal_set_seq_no(from._internal_seq_no());
  }
}

void ObjectAlgDiagnoseDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.ObjectAlgDiagnoseDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAlgDiagnoseDetail::CopyFrom(const ObjectAlgDiagnoseDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.ObjectAlgDiagnoseDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAlgDiagnoseDetail::IsInitialized() const {
  return true;
}

void ObjectAlgDiagnoseDetail::InternalSwap(ObjectAlgDiagnoseDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(seq_no_, other->seq_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectAlgDiagnoseDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::VehicleSignal_SignalsEntry_DoNotUse* Arena::CreateMaybeMessage< ::minieye::VehicleSignal_SignalsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::VehicleSignal_SignalsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::VehicleSignal* Arena::CreateMaybeMessage< ::minieye::VehicleSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::VehicleSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::CommandSignal* Arena::CreateMaybeMessage< ::minieye::CommandSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::CommandSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::OfflineCalibSigDetail* Arena::CreateMaybeMessage< ::minieye::OfflineCalibSigDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::OfflineCalibSigDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::OfflineCalibRsp* Arena::CreateMaybeMessage< ::minieye::OfflineCalibRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::OfflineCalibRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::AutoCalibSigDetail* Arena::CreateMaybeMessage< ::minieye::AutoCalibSigDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::AutoCalibSigDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::AutoCalibRsp* Arena::CreateMaybeMessage< ::minieye::AutoCalibRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::AutoCalibRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::SensitivitySigDetail* Arena::CreateMaybeMessage< ::minieye::SensitivitySigDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::SensitivitySigDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::SwitchSigDetail* Arena::CreateMaybeMessage< ::minieye::SwitchSigDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::SwitchSigDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::ObjectAlgDiagnoseDetail* Arena::CreateMaybeMessage< ::minieye::ObjectAlgDiagnoseDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::ObjectAlgDiagnoseDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
