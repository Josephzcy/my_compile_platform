// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dvr.proto

#include "dvr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dvr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DvrSignal_DoubleKeyValue_dvr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dvr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DvrSignal_FloatKeyValue_dvr_2eproto;
namespace minieye {
class DvrSignal_FloatKeyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DvrSignal_FloatKeyValue> _instance;
} _DvrSignal_FloatKeyValue_default_instance_;
class DvrSignal_DoubleKeyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DvrSignal_DoubleKeyValue> _instance;
} _DvrSignal_DoubleKeyValue_default_instance_;
class DvrSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DvrSignal> _instance;
} _DvrSignal_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_DvrSignal_dvr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_DvrSignal_default_instance_;
    new (ptr) ::minieye::DvrSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::DvrSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DvrSignal_dvr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DvrSignal_dvr_2eproto}, {
      &scc_info_DvrSignal_FloatKeyValue_dvr_2eproto.base,
      &scc_info_DvrSignal_DoubleKeyValue_dvr_2eproto.base,}};

static void InitDefaultsscc_info_DvrSignal_DoubleKeyValue_dvr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_DvrSignal_DoubleKeyValue_default_instance_;
    new (ptr) ::minieye::DvrSignal_DoubleKeyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::DvrSignal_DoubleKeyValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DvrSignal_DoubleKeyValue_dvr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DvrSignal_DoubleKeyValue_dvr_2eproto}, {}};

static void InitDefaultsscc_info_DvrSignal_FloatKeyValue_dvr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_DvrSignal_FloatKeyValue_default_instance_;
    new (ptr) ::minieye::DvrSignal_FloatKeyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::DvrSignal_FloatKeyValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DvrSignal_FloatKeyValue_dvr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DvrSignal_FloatKeyValue_dvr_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dvr_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dvr_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dvr_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dvr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::DvrSignal_FloatKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::DvrSignal_FloatKeyValue, name_),
  PROTOBUF_FIELD_OFFSET(::minieye::DvrSignal_FloatKeyValue, value_),
  PROTOBUF_FIELD_OFFSET(::minieye::DvrSignal_FloatKeyValue, descrip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::DvrSignal_DoubleKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::DvrSignal_DoubleKeyValue, name_),
  PROTOBUF_FIELD_OFFSET(::minieye::DvrSignal_DoubleKeyValue, value_),
  PROTOBUF_FIELD_OFFSET(::minieye::DvrSignal_DoubleKeyValue, descrip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::DvrSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::DvrSignal, float_value_list_),
  PROTOBUF_FIELD_OFFSET(::minieye::DvrSignal, double_value_list_),
  PROTOBUF_FIELD_OFFSET(::minieye::DvrSignal, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::DvrSignal, tick_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::DvrSignal_FloatKeyValue)},
  { 8, -1, sizeof(::minieye::DvrSignal_DoubleKeyValue)},
  { 16, -1, sizeof(::minieye::DvrSignal)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_DvrSignal_FloatKeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_DvrSignal_DoubleKeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_DvrSignal_default_instance_),
};

const char descriptor_table_protodef_dvr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tdvr.proto\022\007minieye\"\245\002\n\tDvrSignal\022:\n\020fl"
  "oat_value_list\030\001 \003(\0132 .minieye.DvrSignal"
  ".FloatKeyValue\022<\n\021double_value_list\030\002 \003("
  "\0132!.minieye.DvrSignal.DoubleKeyValue\022\021\n\t"
  "timestamp\030\003 \001(\004\022\014\n\004tick\030\004 \001(\004\032=\n\rFloatKe"
  "yValue\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\002\022\017\n\007d"
  "escrip\030\003 \001(\t\032>\n\016DoubleKeyValue\022\014\n\004name\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\001\022\017\n\007descrip\030\003 \001(\tb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dvr_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dvr_2eproto_sccs[3] = {
  &scc_info_DvrSignal_dvr_2eproto.base,
  &scc_info_DvrSignal_DoubleKeyValue_dvr_2eproto.base,
  &scc_info_DvrSignal_FloatKeyValue_dvr_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dvr_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dvr_2eproto = {
  false, false, descriptor_table_protodef_dvr_2eproto, "dvr.proto", 324,
  &descriptor_table_dvr_2eproto_once, descriptor_table_dvr_2eproto_sccs, descriptor_table_dvr_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_dvr_2eproto::offsets,
  file_level_metadata_dvr_2eproto, 3, file_level_enum_descriptors_dvr_2eproto, file_level_service_descriptors_dvr_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dvr_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dvr_2eproto)), true);
namespace minieye {

// ===================================================================

void DvrSignal_FloatKeyValue::InitAsDefaultInstance() {
}
class DvrSignal_FloatKeyValue::_Internal {
 public:
};

DvrSignal_FloatKeyValue::DvrSignal_FloatKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.DvrSignal.FloatKeyValue)
}
DvrSignal_FloatKeyValue::DvrSignal_FloatKeyValue(const DvrSignal_FloatKeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  descrip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_descrip().empty()) {
    descrip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_descrip(),
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:minieye.DvrSignal.FloatKeyValue)
}

void DvrSignal_FloatKeyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DvrSignal_FloatKeyValue_dvr_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descrip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

DvrSignal_FloatKeyValue::~DvrSignal_FloatKeyValue() {
  // @@protoc_insertion_point(destructor:minieye.DvrSignal.FloatKeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DvrSignal_FloatKeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descrip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DvrSignal_FloatKeyValue::ArenaDtor(void* object) {
  DvrSignal_FloatKeyValue* _this = reinterpret_cast< DvrSignal_FloatKeyValue* >(object);
  (void)_this;
}
void DvrSignal_FloatKeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DvrSignal_FloatKeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DvrSignal_FloatKeyValue& DvrSignal_FloatKeyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DvrSignal_FloatKeyValue_dvr_2eproto.base);
  return *internal_default_instance();
}


void DvrSignal_FloatKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.DvrSignal.FloatKeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  descrip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DvrSignal_FloatKeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minieye.DvrSignal.FloatKeyValue.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string descrip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_descrip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minieye.DvrSignal.FloatKeyValue.descrip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DvrSignal_FloatKeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.DvrSignal.FloatKeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minieye.DvrSignal.FloatKeyValue.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  // string descrip = 3;
  if (this->descrip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_descrip().data(), static_cast<int>(this->_internal_descrip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minieye.DvrSignal.FloatKeyValue.descrip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_descrip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.DvrSignal.FloatKeyValue)
  return target;
}

size_t DvrSignal_FloatKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.DvrSignal.FloatKeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string descrip = 3;
  if (this->descrip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_descrip());
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DvrSignal_FloatKeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.DvrSignal.FloatKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const DvrSignal_FloatKeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DvrSignal_FloatKeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.DvrSignal.FloatKeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.DvrSignal.FloatKeyValue)
    MergeFrom(*source);
  }
}

void DvrSignal_FloatKeyValue::MergeFrom(const DvrSignal_FloatKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.DvrSignal.FloatKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.descrip().size() > 0) {
    _internal_set_descrip(from._internal_descrip());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void DvrSignal_FloatKeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.DvrSignal.FloatKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DvrSignal_FloatKeyValue::CopyFrom(const DvrSignal_FloatKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.DvrSignal.FloatKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DvrSignal_FloatKeyValue::IsInitialized() const {
  return true;
}

void DvrSignal_FloatKeyValue::InternalSwap(DvrSignal_FloatKeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  descrip_.Swap(&other->descrip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DvrSignal_FloatKeyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DvrSignal_DoubleKeyValue::InitAsDefaultInstance() {
}
class DvrSignal_DoubleKeyValue::_Internal {
 public:
};

DvrSignal_DoubleKeyValue::DvrSignal_DoubleKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.DvrSignal.DoubleKeyValue)
}
DvrSignal_DoubleKeyValue::DvrSignal_DoubleKeyValue(const DvrSignal_DoubleKeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  descrip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_descrip().empty()) {
    descrip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_descrip(),
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:minieye.DvrSignal.DoubleKeyValue)
}

void DvrSignal_DoubleKeyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DvrSignal_DoubleKeyValue_dvr_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descrip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

DvrSignal_DoubleKeyValue::~DvrSignal_DoubleKeyValue() {
  // @@protoc_insertion_point(destructor:minieye.DvrSignal.DoubleKeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DvrSignal_DoubleKeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descrip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DvrSignal_DoubleKeyValue::ArenaDtor(void* object) {
  DvrSignal_DoubleKeyValue* _this = reinterpret_cast< DvrSignal_DoubleKeyValue* >(object);
  (void)_this;
}
void DvrSignal_DoubleKeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DvrSignal_DoubleKeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DvrSignal_DoubleKeyValue& DvrSignal_DoubleKeyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DvrSignal_DoubleKeyValue_dvr_2eproto.base);
  return *internal_default_instance();
}


void DvrSignal_DoubleKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.DvrSignal.DoubleKeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  descrip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DvrSignal_DoubleKeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minieye.DvrSignal.DoubleKeyValue.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string descrip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_descrip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minieye.DvrSignal.DoubleKeyValue.descrip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DvrSignal_DoubleKeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.DvrSignal.DoubleKeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minieye.DvrSignal.DoubleKeyValue.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  // string descrip = 3;
  if (this->descrip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_descrip().data(), static_cast<int>(this->_internal_descrip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minieye.DvrSignal.DoubleKeyValue.descrip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_descrip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.DvrSignal.DoubleKeyValue)
  return target;
}

size_t DvrSignal_DoubleKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.DvrSignal.DoubleKeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string descrip = 3;
  if (this->descrip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_descrip());
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DvrSignal_DoubleKeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.DvrSignal.DoubleKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const DvrSignal_DoubleKeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DvrSignal_DoubleKeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.DvrSignal.DoubleKeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.DvrSignal.DoubleKeyValue)
    MergeFrom(*source);
  }
}

void DvrSignal_DoubleKeyValue::MergeFrom(const DvrSignal_DoubleKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.DvrSignal.DoubleKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.descrip().size() > 0) {
    _internal_set_descrip(from._internal_descrip());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void DvrSignal_DoubleKeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.DvrSignal.DoubleKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DvrSignal_DoubleKeyValue::CopyFrom(const DvrSignal_DoubleKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.DvrSignal.DoubleKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DvrSignal_DoubleKeyValue::IsInitialized() const {
  return true;
}

void DvrSignal_DoubleKeyValue::InternalSwap(DvrSignal_DoubleKeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  descrip_.Swap(&other->descrip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DvrSignal_DoubleKeyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DvrSignal::InitAsDefaultInstance() {
}
class DvrSignal::_Internal {
 public:
};

DvrSignal::DvrSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  float_value_list_(arena),
  double_value_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.DvrSignal)
}
DvrSignal::DvrSignal(const DvrSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      float_value_list_(from.float_value_list_),
      double_value_list_(from.double_value_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:minieye.DvrSignal)
}

void DvrSignal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DvrSignal_dvr_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
}

DvrSignal::~DvrSignal() {
  // @@protoc_insertion_point(destructor:minieye.DvrSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DvrSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DvrSignal::ArenaDtor(void* object) {
  DvrSignal* _this = reinterpret_cast< DvrSignal* >(object);
  (void)_this;
}
void DvrSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DvrSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DvrSignal& DvrSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DvrSignal_dvr_2eproto.base);
  return *internal_default_instance();
}


void DvrSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.DvrSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  float_value_list_.Clear();
  double_value_list_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DvrSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .minieye.DvrSignal.FloatKeyValue float_value_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_float_value_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.DvrSignal.DoubleKeyValue double_value_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_double_value_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DvrSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.DvrSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minieye.DvrSignal.FloatKeyValue float_value_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_float_value_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_float_value_list(i), target, stream);
  }

  // repeated .minieye.DvrSignal.DoubleKeyValue double_value_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_double_value_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_double_value_list(i), target, stream);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // uint64 tick = 4;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.DvrSignal)
  return target;
}

size_t DvrSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.DvrSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.DvrSignal.FloatKeyValue float_value_list = 1;
  total_size += 1UL * this->_internal_float_value_list_size();
  for (const auto& msg : this->float_value_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .minieye.DvrSignal.DoubleKeyValue double_value_list = 2;
  total_size += 1UL * this->_internal_double_value_list_size();
  for (const auto& msg : this->double_value_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 4;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DvrSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.DvrSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const DvrSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DvrSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.DvrSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.DvrSignal)
    MergeFrom(*source);
  }
}

void DvrSignal::MergeFrom(const DvrSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.DvrSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  float_value_list_.MergeFrom(from.float_value_list_);
  double_value_list_.MergeFrom(from.double_value_list_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void DvrSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.DvrSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DvrSignal::CopyFrom(const DvrSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.DvrSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DvrSignal::IsInitialized() const {
  return true;
}

void DvrSignal::InternalSwap(DvrSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  float_value_list_.InternalSwap(&other->float_value_list_);
  double_value_list_.InternalSwap(&other->double_value_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DvrSignal, tick_)
      + sizeof(DvrSignal::tick_)
      - PROTOBUF_FIELD_OFFSET(DvrSignal, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DvrSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::DvrSignal_FloatKeyValue* Arena::CreateMaybeMessage< ::minieye::DvrSignal_FloatKeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::DvrSignal_FloatKeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::DvrSignal_DoubleKeyValue* Arena::CreateMaybeMessage< ::minieye::DvrSignal_DoubleKeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::DvrSignal_DoubleKeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::DvrSignal* Arena::CreateMaybeMessage< ::minieye::DvrSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::DvrSignal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
