// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apa_state.proto

#include "apa_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_apa_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APAStateControl_SettingsEntry_DoNotUse_apa_5fstate_2eproto;
namespace minieye {
class APAStateControl_SettingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APAStateControl_SettingsEntry_DoNotUse> _instance;
} _APAStateControl_SettingsEntry_DoNotUse_default_instance_;
class APAStateControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APAStateControl> _instance;
} _APAStateControl_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_APAStateControl_apa_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_APAStateControl_default_instance_;
    new (ptr) ::minieye::APAStateControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::APAStateControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_APAStateControl_apa_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_APAStateControl_apa_5fstate_2eproto}, {
      &scc_info_APAStateControl_SettingsEntry_DoNotUse_apa_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_APAStateControl_SettingsEntry_DoNotUse_apa_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_APAStateControl_SettingsEntry_DoNotUse_default_instance_;
    new (ptr) ::minieye::APAStateControl_SettingsEntry_DoNotUse();
  }
  ::minieye::APAStateControl_SettingsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APAStateControl_SettingsEntry_DoNotUse_apa_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_APAStateControl_SettingsEntry_DoNotUse_apa_5fstate_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_apa_5fstate_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_apa_5fstate_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_apa_5fstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_apa_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl_SettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl_SettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl_SettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl_SettingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl, settings_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl, state_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl, pilot_apa_mode_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl, ap_map_response_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl, apa_state_to_hmi_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl, ap_map_response_fail_reason_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl, hmi_reminder_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl, hmi_condition_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::APAStateControl, hmivehicleontrack_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::minieye::APAStateControl_SettingsEntry_DoNotUse)},
  { 9, -1, sizeof(::minieye::APAStateControl)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_APAStateControl_SettingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_APAStateControl_default_instance_),
};

const char descriptor_table_protodef_apa_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017apa_state.proto\022\007minieye\"\200\021\n\017APAStateC"
  "ontrol\0228\n\010settings\030\001 \003(\0132&.minieye.APASt"
  "ateControl.SettingsEntry\022\r\n\005state\030\002 \001(\r\022"
  "\021\n\ttimestamp\030\003 \001(\004\022\014\n\004tick\030\004 \001(\004\022\026\n\016pilo"
  "t_apa_mode\030\005 \001(\r\022H\n\024ap_map_response_type"
  "\030\006 \001(\0162*.minieye.APAStateControl.ApMapRe"
  "sponseType\022E\n\020APA_state_to_hmi\030\007 \001(\0162+.m"
  "inieye.APAStateControl.ApStateManagerTyp"
  "e\022H\n\033ap_map_response_fail_reason\030\010 \001(\0162#"
  ".minieye.APAStateControl.FailReason\022@\n\021h"
  "mi_reminder_type\030\t \001(\0162%.minieye.APAStat"
  "eControl.ReminderType\022E\n\022hmi_condition_t"
  "ype\030\n \001(\0162).minieye.APAStateControl.HmiC"
  "onditionType\022\031\n\021HmiVehicleOnTrack\030\013 \001(\r\032"
  "/\n\rSettingsEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002"
  " \001(\005:\0028\001\"\202\004\n\013SettingType\022\023\n\017APA_Slot_Cho"
  "sen\020\000\022\026\n\022APA_PullOut_Option\020\001\022\031\n\025APA_Pul"
  "lOut_Direction\020\002\022\030\n\024APA_ParkIn_Direction"
  "\020\003\022\016\n\nShake_hand\020\004\022\020\n\014APA_HMI_Info\020\005\022\r\n\t"
  "Plan_type\020\006\022\017\n\013Park_Active\020\007\022\017\n\013Park_Sta"
  "tus\020\010\022\031\n\025Park_Button_Available\020\t\022\026\n\022Park"
  "_Out_Available\020\n\022\026\n\022APA_Search_Display\020\013"
  "\022\030\n\024APA_Planning_Display\020\014\022\025\n\021Shakehand_"
  "Display\020\r\022\026\n\022APA_Active_Display\020\016\022\027\n\023APA"
  "_Suspend_Display\020\017\022\031\n\025APA_Terminate_Disp"
  "lay\020\020\022\023\n\017Failure_Display\020\021\022\030\n\024VTR_Planni"
  "ng_Display\020\022\022\026\n\022VTR_Active_Display\020\023\022\031\n\025"
  "VTR_Terminate_Display\020\024\022\024\n\020RPA_phone_act"
  "ive\020\025\"\372\002\n\022ApStateManagerType\022\013\n\007ApaInit\020"
  "\000\022\016\n\nApaStandby\020\001\022\020\n\014ApaSearching\020\002\022\r\n\tA"
  "paActive\020\003\022\016\n\nApaSuspend\020\004\022\n\n\006ApaOff\020\005\022\016"
  "\n\nApaFailure\020\006\022\r\n\tApaFinish\020\007\022\020\n\014ApaShak"
  "ehand\020\022\022\017\n\013ApaPlanning\020\023\022\021\n\rApaTerminate"
  "d\020\024\022\017\n\013HavpStandby\020(\022\020\n\014HavpLearning\020)\022\r"
  "\n\tHavpReady\020*\022\021\n\rHavpShakehand\020+\022\017\n\013Havp"
  "Control\020,\022\017\n\013HavpSuspend\020-\022\016\n\nHavpFinish"
  "\020.\022\014\n\010HavpStop\020/\022\013\n\007HavpOff\0200\022\017\n\013HavpFai"
  "lure\0201\022\022\n\016HavpDecelerate\0202\"\361\002\n\021ApMapResp"
  "onseType\022\016\n\nkChooseMap\020\000\022!\n\035kParkingMapp"
  "ingReadyToMapping\020\001\022\023\n\017kParkingMapping\020\002"
  "\022\027\n\023kParkingMappingDone\020\003\022\031\n\025kParkingMap"
  "pingFailed\020\004\022&\n\"kParkingLocalizationRead"
  "yToMapping\020\005\022+\n\'kParkingLocalizationRead"
  "yToLocalization\020\006\022\030\n\024kParkingLocalizatio"
  "n\020\007\022 \n\034kParkingLocalizationOutOfMap\020\013\022\034\n"
  "\030kParkingLocalizationDone\020\010\022\036\n\032kParkingL"
  "ocalizationFailed\020\t\022\021\n\rkBackToGround\020\n\">"
  "\n\nFailReason\022\014\n\010kNotFail\020\000\022\023\n\017kBackwardT"
  "ooFar\020\001\022\r\n\tkSpeeding\020\002\"c\n\014ReminderType\022\023"
  "\n\017HmiReminderNone\020\000\022\020\n\014HmiOverSpeed\020\001\022\014\n"
  "\010HmiCross\020\002\022\013\n\007HmiTurn\020\003\022\021\n\rHmiPedestria"
  "n\020\004\"\237\001\n\020HmiConditionType\022\024\n\020HmiCondition"
  "None\020\000\022\025\n\021HmiTriggerParking\020\001\022\033\n\027HmiTrig"
  "gerManualParking\020\002\022\032\n\026HmiReadyToReachPat"
  "hEnd\020\003\022\021\n\rHmiReadyToApa\020\004\022\022\n\016HmiVehicleS"
  "top\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_apa_5fstate_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_apa_5fstate_2eproto_sccs[2] = {
  &scc_info_APAStateControl_apa_5fstate_2eproto.base,
  &scc_info_APAStateControl_SettingsEntry_DoNotUse_apa_5fstate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_apa_5fstate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apa_5fstate_2eproto = {
  false, false, descriptor_table_protodef_apa_5fstate_2eproto, "apa_state.proto", 2213,
  &descriptor_table_apa_5fstate_2eproto_once, descriptor_table_apa_5fstate_2eproto_sccs, descriptor_table_apa_5fstate_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_apa_5fstate_2eproto::offsets,
  file_level_metadata_apa_5fstate_2eproto, 2, file_level_enum_descriptors_apa_5fstate_2eproto, file_level_service_descriptors_apa_5fstate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_apa_5fstate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_apa_5fstate_2eproto)), true);
namespace minieye {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAStateControl_SettingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apa_5fstate_2eproto);
  return file_level_enum_descriptors_apa_5fstate_2eproto[0];
}
bool APAStateControl_SettingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr APAStateControl_SettingType APAStateControl::APA_Slot_Chosen;
constexpr APAStateControl_SettingType APAStateControl::APA_PullOut_Option;
constexpr APAStateControl_SettingType APAStateControl::APA_PullOut_Direction;
constexpr APAStateControl_SettingType APAStateControl::APA_ParkIn_Direction;
constexpr APAStateControl_SettingType APAStateControl::Shake_hand;
constexpr APAStateControl_SettingType APAStateControl::APA_HMI_Info;
constexpr APAStateControl_SettingType APAStateControl::Plan_type;
constexpr APAStateControl_SettingType APAStateControl::Park_Active;
constexpr APAStateControl_SettingType APAStateControl::Park_Status;
constexpr APAStateControl_SettingType APAStateControl::Park_Button_Available;
constexpr APAStateControl_SettingType APAStateControl::Park_Out_Available;
constexpr APAStateControl_SettingType APAStateControl::APA_Search_Display;
constexpr APAStateControl_SettingType APAStateControl::APA_Planning_Display;
constexpr APAStateControl_SettingType APAStateControl::Shakehand_Display;
constexpr APAStateControl_SettingType APAStateControl::APA_Active_Display;
constexpr APAStateControl_SettingType APAStateControl::APA_Suspend_Display;
constexpr APAStateControl_SettingType APAStateControl::APA_Terminate_Display;
constexpr APAStateControl_SettingType APAStateControl::Failure_Display;
constexpr APAStateControl_SettingType APAStateControl::VTR_Planning_Display;
constexpr APAStateControl_SettingType APAStateControl::VTR_Active_Display;
constexpr APAStateControl_SettingType APAStateControl::VTR_Terminate_Display;
constexpr APAStateControl_SettingType APAStateControl::RPA_phone_active;
constexpr APAStateControl_SettingType APAStateControl::SettingType_MIN;
constexpr APAStateControl_SettingType APAStateControl::SettingType_MAX;
constexpr int APAStateControl::SettingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAStateControl_ApStateManagerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apa_5fstate_2eproto);
  return file_level_enum_descriptors_apa_5fstate_2eproto[1];
}
bool APAStateControl_ApStateManagerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 18:
    case 19:
    case 20:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr APAStateControl_ApStateManagerType APAStateControl::ApaInit;
constexpr APAStateControl_ApStateManagerType APAStateControl::ApaStandby;
constexpr APAStateControl_ApStateManagerType APAStateControl::ApaSearching;
constexpr APAStateControl_ApStateManagerType APAStateControl::ApaActive;
constexpr APAStateControl_ApStateManagerType APAStateControl::ApaSuspend;
constexpr APAStateControl_ApStateManagerType APAStateControl::ApaOff;
constexpr APAStateControl_ApStateManagerType APAStateControl::ApaFailure;
constexpr APAStateControl_ApStateManagerType APAStateControl::ApaFinish;
constexpr APAStateControl_ApStateManagerType APAStateControl::ApaShakehand;
constexpr APAStateControl_ApStateManagerType APAStateControl::ApaPlanning;
constexpr APAStateControl_ApStateManagerType APAStateControl::ApaTerminated;
constexpr APAStateControl_ApStateManagerType APAStateControl::HavpStandby;
constexpr APAStateControl_ApStateManagerType APAStateControl::HavpLearning;
constexpr APAStateControl_ApStateManagerType APAStateControl::HavpReady;
constexpr APAStateControl_ApStateManagerType APAStateControl::HavpShakehand;
constexpr APAStateControl_ApStateManagerType APAStateControl::HavpControl;
constexpr APAStateControl_ApStateManagerType APAStateControl::HavpSuspend;
constexpr APAStateControl_ApStateManagerType APAStateControl::HavpFinish;
constexpr APAStateControl_ApStateManagerType APAStateControl::HavpStop;
constexpr APAStateControl_ApStateManagerType APAStateControl::HavpOff;
constexpr APAStateControl_ApStateManagerType APAStateControl::HavpFailure;
constexpr APAStateControl_ApStateManagerType APAStateControl::HavpDecelerate;
constexpr APAStateControl_ApStateManagerType APAStateControl::ApStateManagerType_MIN;
constexpr APAStateControl_ApStateManagerType APAStateControl::ApStateManagerType_MAX;
constexpr int APAStateControl::ApStateManagerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAStateControl_ApMapResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apa_5fstate_2eproto);
  return file_level_enum_descriptors_apa_5fstate_2eproto[2];
}
bool APAStateControl_ApMapResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr APAStateControl_ApMapResponseType APAStateControl::kChooseMap;
constexpr APAStateControl_ApMapResponseType APAStateControl::kParkingMappingReadyToMapping;
constexpr APAStateControl_ApMapResponseType APAStateControl::kParkingMapping;
constexpr APAStateControl_ApMapResponseType APAStateControl::kParkingMappingDone;
constexpr APAStateControl_ApMapResponseType APAStateControl::kParkingMappingFailed;
constexpr APAStateControl_ApMapResponseType APAStateControl::kParkingLocalizationReadyToMapping;
constexpr APAStateControl_ApMapResponseType APAStateControl::kParkingLocalizationReadyToLocalization;
constexpr APAStateControl_ApMapResponseType APAStateControl::kParkingLocalization;
constexpr APAStateControl_ApMapResponseType APAStateControl::kParkingLocalizationOutOfMap;
constexpr APAStateControl_ApMapResponseType APAStateControl::kParkingLocalizationDone;
constexpr APAStateControl_ApMapResponseType APAStateControl::kParkingLocalizationFailed;
constexpr APAStateControl_ApMapResponseType APAStateControl::kBackToGround;
constexpr APAStateControl_ApMapResponseType APAStateControl::ApMapResponseType_MIN;
constexpr APAStateControl_ApMapResponseType APAStateControl::ApMapResponseType_MAX;
constexpr int APAStateControl::ApMapResponseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAStateControl_FailReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apa_5fstate_2eproto);
  return file_level_enum_descriptors_apa_5fstate_2eproto[3];
}
bool APAStateControl_FailReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr APAStateControl_FailReason APAStateControl::kNotFail;
constexpr APAStateControl_FailReason APAStateControl::kBackwardTooFar;
constexpr APAStateControl_FailReason APAStateControl::kSpeeding;
constexpr APAStateControl_FailReason APAStateControl::FailReason_MIN;
constexpr APAStateControl_FailReason APAStateControl::FailReason_MAX;
constexpr int APAStateControl::FailReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAStateControl_ReminderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apa_5fstate_2eproto);
  return file_level_enum_descriptors_apa_5fstate_2eproto[4];
}
bool APAStateControl_ReminderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr APAStateControl_ReminderType APAStateControl::HmiReminderNone;
constexpr APAStateControl_ReminderType APAStateControl::HmiOverSpeed;
constexpr APAStateControl_ReminderType APAStateControl::HmiCross;
constexpr APAStateControl_ReminderType APAStateControl::HmiTurn;
constexpr APAStateControl_ReminderType APAStateControl::HmiPedestrian;
constexpr APAStateControl_ReminderType APAStateControl::ReminderType_MIN;
constexpr APAStateControl_ReminderType APAStateControl::ReminderType_MAX;
constexpr int APAStateControl::ReminderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APAStateControl_HmiConditionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apa_5fstate_2eproto);
  return file_level_enum_descriptors_apa_5fstate_2eproto[5];
}
bool APAStateControl_HmiConditionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr APAStateControl_HmiConditionType APAStateControl::HmiConditionNone;
constexpr APAStateControl_HmiConditionType APAStateControl::HmiTriggerParking;
constexpr APAStateControl_HmiConditionType APAStateControl::HmiTriggerManualParking;
constexpr APAStateControl_HmiConditionType APAStateControl::HmiReadyToReachPathEnd;
constexpr APAStateControl_HmiConditionType APAStateControl::HmiReadyToApa;
constexpr APAStateControl_HmiConditionType APAStateControl::HmiVehicleStop;
constexpr APAStateControl_HmiConditionType APAStateControl::HmiConditionType_MIN;
constexpr APAStateControl_HmiConditionType APAStateControl::HmiConditionType_MAX;
constexpr int APAStateControl::HmiConditionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

APAStateControl_SettingsEntry_DoNotUse::APAStateControl_SettingsEntry_DoNotUse() {}
APAStateControl_SettingsEntry_DoNotUse::APAStateControl_SettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void APAStateControl_SettingsEntry_DoNotUse::MergeFrom(const APAStateControl_SettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata APAStateControl_SettingsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void APAStateControl_SettingsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void APAStateControl::InitAsDefaultInstance() {
}
class APAStateControl::_Internal {
 public:
};

APAStateControl::APAStateControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  settings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.APAStateControl)
}
APAStateControl::APAStateControl(const APAStateControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  settings_.MergeFrom(from.settings_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&hmivehicleontrack_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(hmivehicleontrack_));
  // @@protoc_insertion_point(copy_constructor:minieye.APAStateControl)
}

void APAStateControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_APAStateControl_apa_5fstate_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hmivehicleontrack_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(hmivehicleontrack_));
}

APAStateControl::~APAStateControl() {
  // @@protoc_insertion_point(destructor:minieye.APAStateControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void APAStateControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void APAStateControl::ArenaDtor(void* object) {
  APAStateControl* _this = reinterpret_cast< APAStateControl* >(object);
  (void)_this;
}
void APAStateControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void APAStateControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APAStateControl& APAStateControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APAStateControl_apa_5fstate_2eproto.base);
  return *internal_default_instance();
}


void APAStateControl::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.APAStateControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hmivehicleontrack_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(hmivehicleontrack_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APAStateControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, int32> settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&settings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pilot_apa_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pilot_apa_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.APAStateControl.ApMapResponseType ap_map_response_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ap_map_response_type(static_cast<::minieye::APAStateControl_ApMapResponseType>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.APAStateControl.ApStateManagerType APA_state_to_hmi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_apa_state_to_hmi(static_cast<::minieye::APAStateControl_ApStateManagerType>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.APAStateControl.FailReason ap_map_response_fail_reason = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ap_map_response_fail_reason(static_cast<::minieye::APAStateControl_FailReason>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.APAStateControl.ReminderType hmi_reminder_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hmi_reminder_type(static_cast<::minieye::APAStateControl_ReminderType>(val));
        } else goto handle_unusual;
        continue;
      // .minieye.APAStateControl.HmiConditionType hmi_condition_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hmi_condition_type(static_cast<::minieye::APAStateControl_HmiConditionType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 HmiVehicleOnTrack = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          hmivehicleontrack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APAStateControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.APAStateControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> settings = 1;
  if (!this->_internal_settings().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_settings().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_settings().begin();
          it != this->_internal_settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = APAStateControl_SettingsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_settings().begin();
          it != this->_internal_settings().end(); ++it) {
        target = APAStateControl_SettingsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // uint32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // uint64 tick = 4;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_tick(), target);
  }

  // uint32 pilot_apa_mode = 5;
  if (this->pilot_apa_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pilot_apa_mode(), target);
  }

  // .minieye.APAStateControl.ApMapResponseType ap_map_response_type = 6;
  if (this->ap_map_response_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_ap_map_response_type(), target);
  }

  // .minieye.APAStateControl.ApStateManagerType APA_state_to_hmi = 7;
  if (this->apa_state_to_hmi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_apa_state_to_hmi(), target);
  }

  // .minieye.APAStateControl.FailReason ap_map_response_fail_reason = 8;
  if (this->ap_map_response_fail_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_ap_map_response_fail_reason(), target);
  }

  // .minieye.APAStateControl.ReminderType hmi_reminder_type = 9;
  if (this->hmi_reminder_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_hmi_reminder_type(), target);
  }

  // .minieye.APAStateControl.HmiConditionType hmi_condition_type = 10;
  if (this->hmi_condition_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_hmi_condition_type(), target);
  }

  // uint32 HmiVehicleOnTrack = 11;
  if (this->hmivehicleontrack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_hmivehicleontrack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.APAStateControl)
  return target;
}

size_t APAStateControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.APAStateControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> settings = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_settings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_settings().begin();
      it != this->_internal_settings().end(); ++it) {
    total_size += APAStateControl_SettingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  // uint32 pilot_apa_mode = 5;
  if (this->pilot_apa_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pilot_apa_mode());
  }

  // uint64 tick = 4;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // .minieye.APAStateControl.ApMapResponseType ap_map_response_type = 6;
  if (this->ap_map_response_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ap_map_response_type());
  }

  // .minieye.APAStateControl.ApStateManagerType APA_state_to_hmi = 7;
  if (this->apa_state_to_hmi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_apa_state_to_hmi());
  }

  // .minieye.APAStateControl.FailReason ap_map_response_fail_reason = 8;
  if (this->ap_map_response_fail_reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ap_map_response_fail_reason());
  }

  // .minieye.APAStateControl.ReminderType hmi_reminder_type = 9;
  if (this->hmi_reminder_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hmi_reminder_type());
  }

  // .minieye.APAStateControl.HmiConditionType hmi_condition_type = 10;
  if (this->hmi_condition_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hmi_condition_type());
  }

  // uint32 HmiVehicleOnTrack = 11;
  if (this->hmivehicleontrack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hmivehicleontrack());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APAStateControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.APAStateControl)
  GOOGLE_DCHECK_NE(&from, this);
  const APAStateControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APAStateControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.APAStateControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.APAStateControl)
    MergeFrom(*source);
  }
}

void APAStateControl::MergeFrom(const APAStateControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.APAStateControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.pilot_apa_mode() != 0) {
    _internal_set_pilot_apa_mode(from._internal_pilot_apa_mode());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.ap_map_response_type() != 0) {
    _internal_set_ap_map_response_type(from._internal_ap_map_response_type());
  }
  if (from.apa_state_to_hmi() != 0) {
    _internal_set_apa_state_to_hmi(from._internal_apa_state_to_hmi());
  }
  if (from.ap_map_response_fail_reason() != 0) {
    _internal_set_ap_map_response_fail_reason(from._internal_ap_map_response_fail_reason());
  }
  if (from.hmi_reminder_type() != 0) {
    _internal_set_hmi_reminder_type(from._internal_hmi_reminder_type());
  }
  if (from.hmi_condition_type() != 0) {
    _internal_set_hmi_condition_type(from._internal_hmi_condition_type());
  }
  if (from.hmivehicleontrack() != 0) {
    _internal_set_hmivehicleontrack(from._internal_hmivehicleontrack());
  }
}

void APAStateControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.APAStateControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APAStateControl::CopyFrom(const APAStateControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.APAStateControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APAStateControl::IsInitialized() const {
  return true;
}

void APAStateControl::InternalSwap(APAStateControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  settings_.Swap(&other->settings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APAStateControl, hmivehicleontrack_)
      + sizeof(APAStateControl::hmivehicleontrack_)
      - PROTOBUF_FIELD_OFFSET(APAStateControl, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APAStateControl::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::APAStateControl_SettingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::minieye::APAStateControl_SettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::APAStateControl_SettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::APAStateControl* Arena::CreateMaybeMessage< ::minieye::APAStateControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::APAStateControl >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
