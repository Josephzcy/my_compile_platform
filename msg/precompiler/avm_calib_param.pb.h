// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avm_calib_param.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_avm_5fcalib_5fparam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_avm_5fcalib_5fparam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "camera.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_avm_5fcalib_5fparam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_avm_5fcalib_5fparam_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_avm_5fcalib_5fparam_2eproto;
namespace minieye {
namespace avm {
class AvmCalibInfo;
class AvmCalibInfoDefaultTypeInternal;
extern AvmCalibInfoDefaultTypeInternal _AvmCalibInfo_default_instance_;
class AvmExtrinsInfo;
class AvmExtrinsInfoDefaultTypeInternal;
extern AvmExtrinsInfoDefaultTypeInternal _AvmExtrinsInfo_default_instance_;
class CarInfo;
class CarInfoDefaultTypeInternal;
extern CarInfoDefaultTypeInternal _CarInfo_default_instance_;
}  // namespace avm
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::avm::AvmCalibInfo* Arena::CreateMaybeMessage<::minieye::avm::AvmCalibInfo>(Arena*);
template<> ::minieye::avm::AvmExtrinsInfo* Arena::CreateMaybeMessage<::minieye::avm::AvmExtrinsInfo>(Arena*);
template<> ::minieye::avm::CarInfo* Arena::CreateMaybeMessage<::minieye::avm::CarInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {
namespace avm {

enum AvmCalibMethod : int {
  CALIB_METHOD_UNKNOWN = 0,
  AVM_STATIC_RT = 1,
  AVM_STATIC_HOMO = 2,
  AVM_DYNAMIC_CALIB = 3,
  AVM_MANUAL_CALIB = 4,
  AvmCalibMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AvmCalibMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AvmCalibMethod_IsValid(int value);
constexpr AvmCalibMethod AvmCalibMethod_MIN = CALIB_METHOD_UNKNOWN;
constexpr AvmCalibMethod AvmCalibMethod_MAX = AVM_MANUAL_CALIB;
constexpr int AvmCalibMethod_ARRAYSIZE = AvmCalibMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AvmCalibMethod_descriptor();
template<typename T>
inline const std::string& AvmCalibMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AvmCalibMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AvmCalibMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AvmCalibMethod_descriptor(), enum_t_value);
}
inline bool AvmCalibMethod_Parse(
    const std::string& name, AvmCalibMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AvmCalibMethod>(
    AvmCalibMethod_descriptor(), name, value);
}
enum AvmErrorCode : int {
  AVM_NORMAL_STATE = 0,
  AVM_ERROR_ENPTY_IMAGE = 1,
  AVM_ERROR_CONNER_NOT_DETECTED = 2,
  AVM_ERROR_ABNORMAL_EXTRINS = 3,
  AVM_ERROR_ABNORMAL_INTRINS = 4,
  AVM_ERROR_INVALID_CAMERA_NUM = 5,
  AVM_ERROR_OPENFILE = 6,
  AVM_ERROR_SAVEFILE = 7,
  AvmErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AvmErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AvmErrorCode_IsValid(int value);
constexpr AvmErrorCode AvmErrorCode_MIN = AVM_NORMAL_STATE;
constexpr AvmErrorCode AvmErrorCode_MAX = AVM_ERROR_SAVEFILE;
constexpr int AvmErrorCode_ARRAYSIZE = AvmErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AvmErrorCode_descriptor();
template<typename T>
inline const std::string& AvmErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AvmErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AvmErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AvmErrorCode_descriptor(), enum_t_value);
}
inline bool AvmErrorCode_Parse(
    const std::string& name, AvmErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AvmErrorCode>(
    AvmErrorCode_descriptor(), name, value);
}
// ===================================================================

class CarInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.avm.CarInfo) */ {
 public:
  inline CarInfo() : CarInfo(nullptr) {};
  virtual ~CarInfo();

  CarInfo(const CarInfo& from);
  CarInfo(CarInfo&& from) noexcept
    : CarInfo() {
    *this = ::std::move(from);
  }

  inline CarInfo& operator=(const CarInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarInfo& operator=(CarInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarInfo* internal_default_instance() {
    return reinterpret_cast<const CarInfo*>(
               &_CarInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CarInfo& a, CarInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CarInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CarInfo* New() const final {
    return CreateMaybeMessage<CarInfo>(nullptr);
  }

  CarInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarInfo& from);
  void MergeFrom(const CarInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.avm.CarInfo";
  }
  protected:
  explicit CarInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm_5fcalib_5fparam_2eproto);
    return ::descriptor_table_avm_5fcalib_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarLengthFieldNumber = 1,
    kCarWidthFieldNumber = 2,
    kCarFrontWheelspanFieldNumber = 3,
    kCarRearWheelspanFieldNumber = 4,
    kCarWheelbaseFieldNumber = 5,
    kCarWheelWidthFieldNumber = 6,
    kCarFrontOverhangFieldNumber = 7,
    kCarFrontBlendFieldNumber = 8,
    kCarRearBlendFieldNumber = 9,
    kCarLeftBlendFieldNumber = 10,
    kCarRightBlendFieldNumber = 11,
    kFrontCameraHeightFieldNumber = 12,
    kRearCameraHeightFieldNumber = 13,
    kLeftCameraHeightFieldNumber = 14,
    kRightCameraHeightFieldNumber = 15,
    kBlendAngleFieldNumber = 16,
    kBlendHvOffsetFieldNumber = 17,
  };
  // float car_length = 1;
  void clear_car_length();
  float car_length() const;
  void set_car_length(float value);
  private:
  float _internal_car_length() const;
  void _internal_set_car_length(float value);
  public:

  // float car_width = 2;
  void clear_car_width();
  float car_width() const;
  void set_car_width(float value);
  private:
  float _internal_car_width() const;
  void _internal_set_car_width(float value);
  public:

  // float car_front_wheelspan = 3;
  void clear_car_front_wheelspan();
  float car_front_wheelspan() const;
  void set_car_front_wheelspan(float value);
  private:
  float _internal_car_front_wheelspan() const;
  void _internal_set_car_front_wheelspan(float value);
  public:

  // float car_rear_wheelspan = 4;
  void clear_car_rear_wheelspan();
  float car_rear_wheelspan() const;
  void set_car_rear_wheelspan(float value);
  private:
  float _internal_car_rear_wheelspan() const;
  void _internal_set_car_rear_wheelspan(float value);
  public:

  // float car_wheelbase = 5;
  void clear_car_wheelbase();
  float car_wheelbase() const;
  void set_car_wheelbase(float value);
  private:
  float _internal_car_wheelbase() const;
  void _internal_set_car_wheelbase(float value);
  public:

  // float car_wheelWidth = 6;
  void clear_car_wheelwidth();
  float car_wheelwidth() const;
  void set_car_wheelwidth(float value);
  private:
  float _internal_car_wheelwidth() const;
  void _internal_set_car_wheelwidth(float value);
  public:

  // float car_front_overhang = 7;
  void clear_car_front_overhang();
  float car_front_overhang() const;
  void set_car_front_overhang(float value);
  private:
  float _internal_car_front_overhang() const;
  void _internal_set_car_front_overhang(float value);
  public:

  // float car_front_blend = 8;
  void clear_car_front_blend();
  float car_front_blend() const;
  void set_car_front_blend(float value);
  private:
  float _internal_car_front_blend() const;
  void _internal_set_car_front_blend(float value);
  public:

  // float car_rear_blend = 9;
  void clear_car_rear_blend();
  float car_rear_blend() const;
  void set_car_rear_blend(float value);
  private:
  float _internal_car_rear_blend() const;
  void _internal_set_car_rear_blend(float value);
  public:

  // float car_left_blend = 10;
  void clear_car_left_blend();
  float car_left_blend() const;
  void set_car_left_blend(float value);
  private:
  float _internal_car_left_blend() const;
  void _internal_set_car_left_blend(float value);
  public:

  // float car_right_blend = 11;
  void clear_car_right_blend();
  float car_right_blend() const;
  void set_car_right_blend(float value);
  private:
  float _internal_car_right_blend() const;
  void _internal_set_car_right_blend(float value);
  public:

  // float front_camera_height = 12;
  void clear_front_camera_height();
  float front_camera_height() const;
  void set_front_camera_height(float value);
  private:
  float _internal_front_camera_height() const;
  void _internal_set_front_camera_height(float value);
  public:

  // float rear_camera_height = 13;
  void clear_rear_camera_height();
  float rear_camera_height() const;
  void set_rear_camera_height(float value);
  private:
  float _internal_rear_camera_height() const;
  void _internal_set_rear_camera_height(float value);
  public:

  // float left_camera_height = 14;
  void clear_left_camera_height();
  float left_camera_height() const;
  void set_left_camera_height(float value);
  private:
  float _internal_left_camera_height() const;
  void _internal_set_left_camera_height(float value);
  public:

  // float right_camera_height = 15;
  void clear_right_camera_height();
  float right_camera_height() const;
  void set_right_camera_height(float value);
  private:
  float _internal_right_camera_height() const;
  void _internal_set_right_camera_height(float value);
  public:

  // float blend_angle = 16;
  void clear_blend_angle();
  float blend_angle() const;
  void set_blend_angle(float value);
  private:
  float _internal_blend_angle() const;
  void _internal_set_blend_angle(float value);
  public:

  // float blend_hvOffset = 17;
  void clear_blend_hvoffset();
  float blend_hvoffset() const;
  void set_blend_hvoffset(float value);
  private:
  float _internal_blend_hvoffset() const;
  void _internal_set_blend_hvoffset(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.avm.CarInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float car_length_;
  float car_width_;
  float car_front_wheelspan_;
  float car_rear_wheelspan_;
  float car_wheelbase_;
  float car_wheelwidth_;
  float car_front_overhang_;
  float car_front_blend_;
  float car_rear_blend_;
  float car_left_blend_;
  float car_right_blend_;
  float front_camera_height_;
  float rear_camera_height_;
  float left_camera_height_;
  float right_camera_height_;
  float blend_angle_;
  float blend_hvoffset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avm_5fcalib_5fparam_2eproto;
};
// -------------------------------------------------------------------

class AvmExtrinsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.avm.AvmExtrinsInfo) */ {
 public:
  inline AvmExtrinsInfo() : AvmExtrinsInfo(nullptr) {};
  virtual ~AvmExtrinsInfo();

  AvmExtrinsInfo(const AvmExtrinsInfo& from);
  AvmExtrinsInfo(AvmExtrinsInfo&& from) noexcept
    : AvmExtrinsInfo() {
    *this = ::std::move(from);
  }

  inline AvmExtrinsInfo& operator=(const AvmExtrinsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvmExtrinsInfo& operator=(AvmExtrinsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AvmExtrinsInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvmExtrinsInfo* internal_default_instance() {
    return reinterpret_cast<const AvmExtrinsInfo*>(
               &_AvmExtrinsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AvmExtrinsInfo& a, AvmExtrinsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AvmExtrinsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvmExtrinsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AvmExtrinsInfo* New() const final {
    return CreateMaybeMessage<AvmExtrinsInfo>(nullptr);
  }

  AvmExtrinsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AvmExtrinsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AvmExtrinsInfo& from);
  void MergeFrom(const AvmExtrinsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvmExtrinsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.avm.AvmExtrinsInfo";
  }
  protected:
  explicit AvmExtrinsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm_5fcalib_5fparam_2eproto);
    return ::descriptor_table_avm_5fcalib_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckerDwFieldNumber = 1,
    kCheckerDhFieldNumber = 2,
    kVertNumFieldNumber = 3,
    kHorizeNumFieldNumber = 4,
    kWFieldNumber = 5,
    kHFieldNumber = 6,
    kDFieldNumber = 7,
    kVFieldNumber = 8,
  };
  // float checker_dw = 1;
  void clear_checker_dw();
  float checker_dw() const;
  void set_checker_dw(float value);
  private:
  float _internal_checker_dw() const;
  void _internal_set_checker_dw(float value);
  public:

  // float checker_dh = 2;
  void clear_checker_dh();
  float checker_dh() const;
  void set_checker_dh(float value);
  private:
  float _internal_checker_dh() const;
  void _internal_set_checker_dh(float value);
  public:

  // float vert_num = 3;
  void clear_vert_num();
  float vert_num() const;
  void set_vert_num(float value);
  private:
  float _internal_vert_num() const;
  void _internal_set_vert_num(float value);
  public:

  // float horize_num = 4;
  void clear_horize_num();
  float horize_num() const;
  void set_horize_num(float value);
  private:
  float _internal_horize_num() const;
  void _internal_set_horize_num(float value);
  public:

  // float w = 5;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float h = 6;
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // float d = 7;
  void clear_d();
  float d() const;
  void set_d(float value);
  private:
  float _internal_d() const;
  void _internal_set_d(float value);
  public:

  // float v = 8;
  void clear_v();
  float v() const;
  void set_v(float value);
  private:
  float _internal_v() const;
  void _internal_set_v(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.avm.AvmExtrinsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float checker_dw_;
  float checker_dh_;
  float vert_num_;
  float horize_num_;
  float w_;
  float h_;
  float d_;
  float v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avm_5fcalib_5fparam_2eproto;
};
// -------------------------------------------------------------------

class AvmCalibInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.avm.AvmCalibInfo) */ {
 public:
  inline AvmCalibInfo() : AvmCalibInfo(nullptr) {};
  virtual ~AvmCalibInfo();

  AvmCalibInfo(const AvmCalibInfo& from);
  AvmCalibInfo(AvmCalibInfo&& from) noexcept
    : AvmCalibInfo() {
    *this = ::std::move(from);
  }

  inline AvmCalibInfo& operator=(const AvmCalibInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvmCalibInfo& operator=(AvmCalibInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AvmCalibInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvmCalibInfo* internal_default_instance() {
    return reinterpret_cast<const AvmCalibInfo*>(
               &_AvmCalibInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AvmCalibInfo& a, AvmCalibInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AvmCalibInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvmCalibInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AvmCalibInfo* New() const final {
    return CreateMaybeMessage<AvmCalibInfo>(nullptr);
  }

  AvmCalibInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AvmCalibInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AvmCalibInfo& from);
  void MergeFrom(const AvmCalibInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvmCalibInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.avm.AvmCalibInfo";
  }
  protected:
  explicit AvmCalibInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm_5fcalib_5fparam_2eproto);
    return ::descriptor_table_avm_5fcalib_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParamFieldNumber = 2,
    kCarInfoFieldNumber = 3,
    kExtrinsInfoFieldNumber = 4,
    kCalibMethodFieldNumber = 1,
  };
  // repeated .minieye.CameraParam camera_param = 2;
  int camera_param_size() const;
  private:
  int _internal_camera_param_size() const;
  public:
  void clear_camera_param();
  ::minieye::CameraParam* mutable_camera_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CameraParam >*
      mutable_camera_param();
  private:
  const ::minieye::CameraParam& _internal_camera_param(int index) const;
  ::minieye::CameraParam* _internal_add_camera_param();
  public:
  const ::minieye::CameraParam& camera_param(int index) const;
  ::minieye::CameraParam* add_camera_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CameraParam >&
      camera_param() const;

  // .minieye.avm.CarInfo car_info = 3;
  bool has_car_info() const;
  private:
  bool _internal_has_car_info() const;
  public:
  void clear_car_info();
  const ::minieye::avm::CarInfo& car_info() const;
  ::minieye::avm::CarInfo* release_car_info();
  ::minieye::avm::CarInfo* mutable_car_info();
  void set_allocated_car_info(::minieye::avm::CarInfo* car_info);
  private:
  const ::minieye::avm::CarInfo& _internal_car_info() const;
  ::minieye::avm::CarInfo* _internal_mutable_car_info();
  public:
  void unsafe_arena_set_allocated_car_info(
      ::minieye::avm::CarInfo* car_info);
  ::minieye::avm::CarInfo* unsafe_arena_release_car_info();

  // .minieye.avm.AvmExtrinsInfo extrins_info = 4;
  bool has_extrins_info() const;
  private:
  bool _internal_has_extrins_info() const;
  public:
  void clear_extrins_info();
  const ::minieye::avm::AvmExtrinsInfo& extrins_info() const;
  ::minieye::avm::AvmExtrinsInfo* release_extrins_info();
  ::minieye::avm::AvmExtrinsInfo* mutable_extrins_info();
  void set_allocated_extrins_info(::minieye::avm::AvmExtrinsInfo* extrins_info);
  private:
  const ::minieye::avm::AvmExtrinsInfo& _internal_extrins_info() const;
  ::minieye::avm::AvmExtrinsInfo* _internal_mutable_extrins_info();
  public:
  void unsafe_arena_set_allocated_extrins_info(
      ::minieye::avm::AvmExtrinsInfo* extrins_info);
  ::minieye::avm::AvmExtrinsInfo* unsafe_arena_release_extrins_info();

  // .minieye.avm.AvmCalibMethod calib_method = 1;
  void clear_calib_method();
  ::minieye::avm::AvmCalibMethod calib_method() const;
  void set_calib_method(::minieye::avm::AvmCalibMethod value);
  private:
  ::minieye::avm::AvmCalibMethod _internal_calib_method() const;
  void _internal_set_calib_method(::minieye::avm::AvmCalibMethod value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.avm.AvmCalibInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CameraParam > camera_param_;
  ::minieye::avm::CarInfo* car_info_;
  ::minieye::avm::AvmExtrinsInfo* extrins_info_;
  int calib_method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avm_5fcalib_5fparam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CarInfo

// float car_length = 1;
inline void CarInfo::clear_car_length() {
  car_length_ = 0;
}
inline float CarInfo::_internal_car_length() const {
  return car_length_;
}
inline float CarInfo::car_length() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.car_length)
  return _internal_car_length();
}
inline void CarInfo::_internal_set_car_length(float value) {
  
  car_length_ = value;
}
inline void CarInfo::set_car_length(float value) {
  _internal_set_car_length(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.car_length)
}

// float car_width = 2;
inline void CarInfo::clear_car_width() {
  car_width_ = 0;
}
inline float CarInfo::_internal_car_width() const {
  return car_width_;
}
inline float CarInfo::car_width() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.car_width)
  return _internal_car_width();
}
inline void CarInfo::_internal_set_car_width(float value) {
  
  car_width_ = value;
}
inline void CarInfo::set_car_width(float value) {
  _internal_set_car_width(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.car_width)
}

// float car_front_wheelspan = 3;
inline void CarInfo::clear_car_front_wheelspan() {
  car_front_wheelspan_ = 0;
}
inline float CarInfo::_internal_car_front_wheelspan() const {
  return car_front_wheelspan_;
}
inline float CarInfo::car_front_wheelspan() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.car_front_wheelspan)
  return _internal_car_front_wheelspan();
}
inline void CarInfo::_internal_set_car_front_wheelspan(float value) {
  
  car_front_wheelspan_ = value;
}
inline void CarInfo::set_car_front_wheelspan(float value) {
  _internal_set_car_front_wheelspan(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.car_front_wheelspan)
}

// float car_rear_wheelspan = 4;
inline void CarInfo::clear_car_rear_wheelspan() {
  car_rear_wheelspan_ = 0;
}
inline float CarInfo::_internal_car_rear_wheelspan() const {
  return car_rear_wheelspan_;
}
inline float CarInfo::car_rear_wheelspan() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.car_rear_wheelspan)
  return _internal_car_rear_wheelspan();
}
inline void CarInfo::_internal_set_car_rear_wheelspan(float value) {
  
  car_rear_wheelspan_ = value;
}
inline void CarInfo::set_car_rear_wheelspan(float value) {
  _internal_set_car_rear_wheelspan(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.car_rear_wheelspan)
}

// float car_wheelbase = 5;
inline void CarInfo::clear_car_wheelbase() {
  car_wheelbase_ = 0;
}
inline float CarInfo::_internal_car_wheelbase() const {
  return car_wheelbase_;
}
inline float CarInfo::car_wheelbase() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.car_wheelbase)
  return _internal_car_wheelbase();
}
inline void CarInfo::_internal_set_car_wheelbase(float value) {
  
  car_wheelbase_ = value;
}
inline void CarInfo::set_car_wheelbase(float value) {
  _internal_set_car_wheelbase(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.car_wheelbase)
}

// float car_wheelWidth = 6;
inline void CarInfo::clear_car_wheelwidth() {
  car_wheelwidth_ = 0;
}
inline float CarInfo::_internal_car_wheelwidth() const {
  return car_wheelwidth_;
}
inline float CarInfo::car_wheelwidth() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.car_wheelWidth)
  return _internal_car_wheelwidth();
}
inline void CarInfo::_internal_set_car_wheelwidth(float value) {
  
  car_wheelwidth_ = value;
}
inline void CarInfo::set_car_wheelwidth(float value) {
  _internal_set_car_wheelwidth(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.car_wheelWidth)
}

// float car_front_overhang = 7;
inline void CarInfo::clear_car_front_overhang() {
  car_front_overhang_ = 0;
}
inline float CarInfo::_internal_car_front_overhang() const {
  return car_front_overhang_;
}
inline float CarInfo::car_front_overhang() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.car_front_overhang)
  return _internal_car_front_overhang();
}
inline void CarInfo::_internal_set_car_front_overhang(float value) {
  
  car_front_overhang_ = value;
}
inline void CarInfo::set_car_front_overhang(float value) {
  _internal_set_car_front_overhang(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.car_front_overhang)
}

// float car_front_blend = 8;
inline void CarInfo::clear_car_front_blend() {
  car_front_blend_ = 0;
}
inline float CarInfo::_internal_car_front_blend() const {
  return car_front_blend_;
}
inline float CarInfo::car_front_blend() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.car_front_blend)
  return _internal_car_front_blend();
}
inline void CarInfo::_internal_set_car_front_blend(float value) {
  
  car_front_blend_ = value;
}
inline void CarInfo::set_car_front_blend(float value) {
  _internal_set_car_front_blend(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.car_front_blend)
}

// float car_rear_blend = 9;
inline void CarInfo::clear_car_rear_blend() {
  car_rear_blend_ = 0;
}
inline float CarInfo::_internal_car_rear_blend() const {
  return car_rear_blend_;
}
inline float CarInfo::car_rear_blend() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.car_rear_blend)
  return _internal_car_rear_blend();
}
inline void CarInfo::_internal_set_car_rear_blend(float value) {
  
  car_rear_blend_ = value;
}
inline void CarInfo::set_car_rear_blend(float value) {
  _internal_set_car_rear_blend(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.car_rear_blend)
}

// float car_left_blend = 10;
inline void CarInfo::clear_car_left_blend() {
  car_left_blend_ = 0;
}
inline float CarInfo::_internal_car_left_blend() const {
  return car_left_blend_;
}
inline float CarInfo::car_left_blend() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.car_left_blend)
  return _internal_car_left_blend();
}
inline void CarInfo::_internal_set_car_left_blend(float value) {
  
  car_left_blend_ = value;
}
inline void CarInfo::set_car_left_blend(float value) {
  _internal_set_car_left_blend(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.car_left_blend)
}

// float car_right_blend = 11;
inline void CarInfo::clear_car_right_blend() {
  car_right_blend_ = 0;
}
inline float CarInfo::_internal_car_right_blend() const {
  return car_right_blend_;
}
inline float CarInfo::car_right_blend() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.car_right_blend)
  return _internal_car_right_blend();
}
inline void CarInfo::_internal_set_car_right_blend(float value) {
  
  car_right_blend_ = value;
}
inline void CarInfo::set_car_right_blend(float value) {
  _internal_set_car_right_blend(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.car_right_blend)
}

// float front_camera_height = 12;
inline void CarInfo::clear_front_camera_height() {
  front_camera_height_ = 0;
}
inline float CarInfo::_internal_front_camera_height() const {
  return front_camera_height_;
}
inline float CarInfo::front_camera_height() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.front_camera_height)
  return _internal_front_camera_height();
}
inline void CarInfo::_internal_set_front_camera_height(float value) {
  
  front_camera_height_ = value;
}
inline void CarInfo::set_front_camera_height(float value) {
  _internal_set_front_camera_height(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.front_camera_height)
}

// float rear_camera_height = 13;
inline void CarInfo::clear_rear_camera_height() {
  rear_camera_height_ = 0;
}
inline float CarInfo::_internal_rear_camera_height() const {
  return rear_camera_height_;
}
inline float CarInfo::rear_camera_height() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.rear_camera_height)
  return _internal_rear_camera_height();
}
inline void CarInfo::_internal_set_rear_camera_height(float value) {
  
  rear_camera_height_ = value;
}
inline void CarInfo::set_rear_camera_height(float value) {
  _internal_set_rear_camera_height(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.rear_camera_height)
}

// float left_camera_height = 14;
inline void CarInfo::clear_left_camera_height() {
  left_camera_height_ = 0;
}
inline float CarInfo::_internal_left_camera_height() const {
  return left_camera_height_;
}
inline float CarInfo::left_camera_height() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.left_camera_height)
  return _internal_left_camera_height();
}
inline void CarInfo::_internal_set_left_camera_height(float value) {
  
  left_camera_height_ = value;
}
inline void CarInfo::set_left_camera_height(float value) {
  _internal_set_left_camera_height(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.left_camera_height)
}

// float right_camera_height = 15;
inline void CarInfo::clear_right_camera_height() {
  right_camera_height_ = 0;
}
inline float CarInfo::_internal_right_camera_height() const {
  return right_camera_height_;
}
inline float CarInfo::right_camera_height() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.right_camera_height)
  return _internal_right_camera_height();
}
inline void CarInfo::_internal_set_right_camera_height(float value) {
  
  right_camera_height_ = value;
}
inline void CarInfo::set_right_camera_height(float value) {
  _internal_set_right_camera_height(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.right_camera_height)
}

// float blend_angle = 16;
inline void CarInfo::clear_blend_angle() {
  blend_angle_ = 0;
}
inline float CarInfo::_internal_blend_angle() const {
  return blend_angle_;
}
inline float CarInfo::blend_angle() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.blend_angle)
  return _internal_blend_angle();
}
inline void CarInfo::_internal_set_blend_angle(float value) {
  
  blend_angle_ = value;
}
inline void CarInfo::set_blend_angle(float value) {
  _internal_set_blend_angle(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.blend_angle)
}

// float blend_hvOffset = 17;
inline void CarInfo::clear_blend_hvoffset() {
  blend_hvoffset_ = 0;
}
inline float CarInfo::_internal_blend_hvoffset() const {
  return blend_hvoffset_;
}
inline float CarInfo::blend_hvoffset() const {
  // @@protoc_insertion_point(field_get:minieye.avm.CarInfo.blend_hvOffset)
  return _internal_blend_hvoffset();
}
inline void CarInfo::_internal_set_blend_hvoffset(float value) {
  
  blend_hvoffset_ = value;
}
inline void CarInfo::set_blend_hvoffset(float value) {
  _internal_set_blend_hvoffset(value);
  // @@protoc_insertion_point(field_set:minieye.avm.CarInfo.blend_hvOffset)
}

// -------------------------------------------------------------------

// AvmExtrinsInfo

// float checker_dw = 1;
inline void AvmExtrinsInfo::clear_checker_dw() {
  checker_dw_ = 0;
}
inline float AvmExtrinsInfo::_internal_checker_dw() const {
  return checker_dw_;
}
inline float AvmExtrinsInfo::checker_dw() const {
  // @@protoc_insertion_point(field_get:minieye.avm.AvmExtrinsInfo.checker_dw)
  return _internal_checker_dw();
}
inline void AvmExtrinsInfo::_internal_set_checker_dw(float value) {
  
  checker_dw_ = value;
}
inline void AvmExtrinsInfo::set_checker_dw(float value) {
  _internal_set_checker_dw(value);
  // @@protoc_insertion_point(field_set:minieye.avm.AvmExtrinsInfo.checker_dw)
}

// float checker_dh = 2;
inline void AvmExtrinsInfo::clear_checker_dh() {
  checker_dh_ = 0;
}
inline float AvmExtrinsInfo::_internal_checker_dh() const {
  return checker_dh_;
}
inline float AvmExtrinsInfo::checker_dh() const {
  // @@protoc_insertion_point(field_get:minieye.avm.AvmExtrinsInfo.checker_dh)
  return _internal_checker_dh();
}
inline void AvmExtrinsInfo::_internal_set_checker_dh(float value) {
  
  checker_dh_ = value;
}
inline void AvmExtrinsInfo::set_checker_dh(float value) {
  _internal_set_checker_dh(value);
  // @@protoc_insertion_point(field_set:minieye.avm.AvmExtrinsInfo.checker_dh)
}

// float vert_num = 3;
inline void AvmExtrinsInfo::clear_vert_num() {
  vert_num_ = 0;
}
inline float AvmExtrinsInfo::_internal_vert_num() const {
  return vert_num_;
}
inline float AvmExtrinsInfo::vert_num() const {
  // @@protoc_insertion_point(field_get:minieye.avm.AvmExtrinsInfo.vert_num)
  return _internal_vert_num();
}
inline void AvmExtrinsInfo::_internal_set_vert_num(float value) {
  
  vert_num_ = value;
}
inline void AvmExtrinsInfo::set_vert_num(float value) {
  _internal_set_vert_num(value);
  // @@protoc_insertion_point(field_set:minieye.avm.AvmExtrinsInfo.vert_num)
}

// float horize_num = 4;
inline void AvmExtrinsInfo::clear_horize_num() {
  horize_num_ = 0;
}
inline float AvmExtrinsInfo::_internal_horize_num() const {
  return horize_num_;
}
inline float AvmExtrinsInfo::horize_num() const {
  // @@protoc_insertion_point(field_get:minieye.avm.AvmExtrinsInfo.horize_num)
  return _internal_horize_num();
}
inline void AvmExtrinsInfo::_internal_set_horize_num(float value) {
  
  horize_num_ = value;
}
inline void AvmExtrinsInfo::set_horize_num(float value) {
  _internal_set_horize_num(value);
  // @@protoc_insertion_point(field_set:minieye.avm.AvmExtrinsInfo.horize_num)
}

// float w = 5;
inline void AvmExtrinsInfo::clear_w() {
  w_ = 0;
}
inline float AvmExtrinsInfo::_internal_w() const {
  return w_;
}
inline float AvmExtrinsInfo::w() const {
  // @@protoc_insertion_point(field_get:minieye.avm.AvmExtrinsInfo.w)
  return _internal_w();
}
inline void AvmExtrinsInfo::_internal_set_w(float value) {
  
  w_ = value;
}
inline void AvmExtrinsInfo::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:minieye.avm.AvmExtrinsInfo.w)
}

// float h = 6;
inline void AvmExtrinsInfo::clear_h() {
  h_ = 0;
}
inline float AvmExtrinsInfo::_internal_h() const {
  return h_;
}
inline float AvmExtrinsInfo::h() const {
  // @@protoc_insertion_point(field_get:minieye.avm.AvmExtrinsInfo.h)
  return _internal_h();
}
inline void AvmExtrinsInfo::_internal_set_h(float value) {
  
  h_ = value;
}
inline void AvmExtrinsInfo::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:minieye.avm.AvmExtrinsInfo.h)
}

// float d = 7;
inline void AvmExtrinsInfo::clear_d() {
  d_ = 0;
}
inline float AvmExtrinsInfo::_internal_d() const {
  return d_;
}
inline float AvmExtrinsInfo::d() const {
  // @@protoc_insertion_point(field_get:minieye.avm.AvmExtrinsInfo.d)
  return _internal_d();
}
inline void AvmExtrinsInfo::_internal_set_d(float value) {
  
  d_ = value;
}
inline void AvmExtrinsInfo::set_d(float value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:minieye.avm.AvmExtrinsInfo.d)
}

// float v = 8;
inline void AvmExtrinsInfo::clear_v() {
  v_ = 0;
}
inline float AvmExtrinsInfo::_internal_v() const {
  return v_;
}
inline float AvmExtrinsInfo::v() const {
  // @@protoc_insertion_point(field_get:minieye.avm.AvmExtrinsInfo.v)
  return _internal_v();
}
inline void AvmExtrinsInfo::_internal_set_v(float value) {
  
  v_ = value;
}
inline void AvmExtrinsInfo::set_v(float value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:minieye.avm.AvmExtrinsInfo.v)
}

// -------------------------------------------------------------------

// AvmCalibInfo

// .minieye.avm.AvmCalibMethod calib_method = 1;
inline void AvmCalibInfo::clear_calib_method() {
  calib_method_ = 0;
}
inline ::minieye::avm::AvmCalibMethod AvmCalibInfo::_internal_calib_method() const {
  return static_cast< ::minieye::avm::AvmCalibMethod >(calib_method_);
}
inline ::minieye::avm::AvmCalibMethod AvmCalibInfo::calib_method() const {
  // @@protoc_insertion_point(field_get:minieye.avm.AvmCalibInfo.calib_method)
  return _internal_calib_method();
}
inline void AvmCalibInfo::_internal_set_calib_method(::minieye::avm::AvmCalibMethod value) {
  
  calib_method_ = value;
}
inline void AvmCalibInfo::set_calib_method(::minieye::avm::AvmCalibMethod value) {
  _internal_set_calib_method(value);
  // @@protoc_insertion_point(field_set:minieye.avm.AvmCalibInfo.calib_method)
}

// repeated .minieye.CameraParam camera_param = 2;
inline int AvmCalibInfo::_internal_camera_param_size() const {
  return camera_param_.size();
}
inline int AvmCalibInfo::camera_param_size() const {
  return _internal_camera_param_size();
}
inline ::minieye::CameraParam* AvmCalibInfo::mutable_camera_param(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.avm.AvmCalibInfo.camera_param)
  return camera_param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CameraParam >*
AvmCalibInfo::mutable_camera_param() {
  // @@protoc_insertion_point(field_mutable_list:minieye.avm.AvmCalibInfo.camera_param)
  return &camera_param_;
}
inline const ::minieye::CameraParam& AvmCalibInfo::_internal_camera_param(int index) const {
  return camera_param_.Get(index);
}
inline const ::minieye::CameraParam& AvmCalibInfo::camera_param(int index) const {
  // @@protoc_insertion_point(field_get:minieye.avm.AvmCalibInfo.camera_param)
  return _internal_camera_param(index);
}
inline ::minieye::CameraParam* AvmCalibInfo::_internal_add_camera_param() {
  return camera_param_.Add();
}
inline ::minieye::CameraParam* AvmCalibInfo::add_camera_param() {
  // @@protoc_insertion_point(field_add:minieye.avm.AvmCalibInfo.camera_param)
  return _internal_add_camera_param();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CameraParam >&
AvmCalibInfo::camera_param() const {
  // @@protoc_insertion_point(field_list:minieye.avm.AvmCalibInfo.camera_param)
  return camera_param_;
}

// .minieye.avm.CarInfo car_info = 3;
inline bool AvmCalibInfo::_internal_has_car_info() const {
  return this != internal_default_instance() && car_info_ != nullptr;
}
inline bool AvmCalibInfo::has_car_info() const {
  return _internal_has_car_info();
}
inline void AvmCalibInfo::clear_car_info() {
  if (GetArena() == nullptr && car_info_ != nullptr) {
    delete car_info_;
  }
  car_info_ = nullptr;
}
inline const ::minieye::avm::CarInfo& AvmCalibInfo::_internal_car_info() const {
  const ::minieye::avm::CarInfo* p = car_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::avm::CarInfo*>(
      &::minieye::avm::_CarInfo_default_instance_);
}
inline const ::minieye::avm::CarInfo& AvmCalibInfo::car_info() const {
  // @@protoc_insertion_point(field_get:minieye.avm.AvmCalibInfo.car_info)
  return _internal_car_info();
}
inline void AvmCalibInfo::unsafe_arena_set_allocated_car_info(
    ::minieye::avm::CarInfo* car_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(car_info_);
  }
  car_info_ = car_info;
  if (car_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.avm.AvmCalibInfo.car_info)
}
inline ::minieye::avm::CarInfo* AvmCalibInfo::release_car_info() {
  auto temp = unsafe_arena_release_car_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::avm::CarInfo* AvmCalibInfo::unsafe_arena_release_car_info() {
  // @@protoc_insertion_point(field_release:minieye.avm.AvmCalibInfo.car_info)
  
  ::minieye::avm::CarInfo* temp = car_info_;
  car_info_ = nullptr;
  return temp;
}
inline ::minieye::avm::CarInfo* AvmCalibInfo::_internal_mutable_car_info() {
  
  if (car_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::avm::CarInfo>(GetArena());
    car_info_ = p;
  }
  return car_info_;
}
inline ::minieye::avm::CarInfo* AvmCalibInfo::mutable_car_info() {
  // @@protoc_insertion_point(field_mutable:minieye.avm.AvmCalibInfo.car_info)
  return _internal_mutable_car_info();
}
inline void AvmCalibInfo::set_allocated_car_info(::minieye::avm::CarInfo* car_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete car_info_;
  }
  if (car_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(car_info);
    if (message_arena != submessage_arena) {
      car_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, car_info, submessage_arena);
    }
    
  } else {
    
  }
  car_info_ = car_info;
  // @@protoc_insertion_point(field_set_allocated:minieye.avm.AvmCalibInfo.car_info)
}

// .minieye.avm.AvmExtrinsInfo extrins_info = 4;
inline bool AvmCalibInfo::_internal_has_extrins_info() const {
  return this != internal_default_instance() && extrins_info_ != nullptr;
}
inline bool AvmCalibInfo::has_extrins_info() const {
  return _internal_has_extrins_info();
}
inline void AvmCalibInfo::clear_extrins_info() {
  if (GetArena() == nullptr && extrins_info_ != nullptr) {
    delete extrins_info_;
  }
  extrins_info_ = nullptr;
}
inline const ::minieye::avm::AvmExtrinsInfo& AvmCalibInfo::_internal_extrins_info() const {
  const ::minieye::avm::AvmExtrinsInfo* p = extrins_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::avm::AvmExtrinsInfo*>(
      &::minieye::avm::_AvmExtrinsInfo_default_instance_);
}
inline const ::minieye::avm::AvmExtrinsInfo& AvmCalibInfo::extrins_info() const {
  // @@protoc_insertion_point(field_get:minieye.avm.AvmCalibInfo.extrins_info)
  return _internal_extrins_info();
}
inline void AvmCalibInfo::unsafe_arena_set_allocated_extrins_info(
    ::minieye::avm::AvmExtrinsInfo* extrins_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extrins_info_);
  }
  extrins_info_ = extrins_info;
  if (extrins_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.avm.AvmCalibInfo.extrins_info)
}
inline ::minieye::avm::AvmExtrinsInfo* AvmCalibInfo::release_extrins_info() {
  auto temp = unsafe_arena_release_extrins_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::avm::AvmExtrinsInfo* AvmCalibInfo::unsafe_arena_release_extrins_info() {
  // @@protoc_insertion_point(field_release:minieye.avm.AvmCalibInfo.extrins_info)
  
  ::minieye::avm::AvmExtrinsInfo* temp = extrins_info_;
  extrins_info_ = nullptr;
  return temp;
}
inline ::minieye::avm::AvmExtrinsInfo* AvmCalibInfo::_internal_mutable_extrins_info() {
  
  if (extrins_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::avm::AvmExtrinsInfo>(GetArena());
    extrins_info_ = p;
  }
  return extrins_info_;
}
inline ::minieye::avm::AvmExtrinsInfo* AvmCalibInfo::mutable_extrins_info() {
  // @@protoc_insertion_point(field_mutable:minieye.avm.AvmCalibInfo.extrins_info)
  return _internal_mutable_extrins_info();
}
inline void AvmCalibInfo::set_allocated_extrins_info(::minieye::avm::AvmExtrinsInfo* extrins_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extrins_info_;
  }
  if (extrins_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extrins_info);
    if (message_arena != submessage_arena) {
      extrins_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extrins_info, submessage_arena);
    }
    
  } else {
    
  }
  extrins_info_ = extrins_info;
  // @@protoc_insertion_point(field_set_allocated:minieye.avm.AvmCalibInfo.extrins_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace avm
}  // namespace minieye

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minieye::avm::AvmCalibMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::avm::AvmCalibMethod>() {
  return ::minieye::avm::AvmCalibMethod_descriptor();
}
template <> struct is_proto_enum< ::minieye::avm::AvmErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::avm::AvmErrorCode>() {
  return ::minieye::avm::AvmErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_avm_5fcalib_5fparam_2eproto
