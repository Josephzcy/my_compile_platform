// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cipv.proto

#include "cipv.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perception {
class CIPVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CIPV> _instance;
} _CIPV_default_instance_;
}  // namespace perception
static void InitDefaultsscc_info_CIPV_cipv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_CIPV_default_instance_;
    new (ptr) ::perception::CIPV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::CIPV::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CIPV_cipv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CIPV_cipv_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cipv_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cipv_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cipv_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cipv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::CIPV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::CIPV, frame_id_),
  PROTOBUF_FIELD_OFFSET(::perception::CIPV, tick_),
  PROTOBUF_FIELD_OFFSET(::perception::CIPV, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::CIPV, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::perception::CIPV, longitude_dist_),
  PROTOBUF_FIELD_OFFSET(::perception::CIPV, lateral_dist_),
  PROTOBUF_FIELD_OFFSET(::perception::CIPV, rel_longitude_speed_),
  PROTOBUF_FIELD_OFFSET(::perception::CIPV, rel_lateral_speed_),
  PROTOBUF_FIELD_OFFSET(::perception::CIPV, ttc_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perception::CIPV)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_CIPV_default_instance_),
};

const char descriptor_table_protodef_cipv_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ncipv.proto\022\nperception\"\300\001\n\004CIPV\022\020\n\010fra"
  "me_id\030\001 \001(\004\022\014\n\004tick\030\002 \001(\004\022\021\n\ttimestamp\030\003"
  " \001(\004\022\022\n\nvehicle_id\030\004 \001(\005\022\026\n\016longitude_di"
  "st\030\005 \001(\002\022\024\n\014lateral_dist\030\006 \001(\002\022\033\n\023rel_lo"
  "ngitude_speed\030\007 \001(\002\022\031\n\021rel_lateral_speed"
  "\030\010 \001(\002\022\013\n\003ttc\030\t \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cipv_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cipv_2eproto_sccs[1] = {
  &scc_info_CIPV_cipv_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cipv_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cipv_2eproto = {
  false, false, descriptor_table_protodef_cipv_2eproto, "cipv.proto", 227,
  &descriptor_table_cipv_2eproto_once, descriptor_table_cipv_2eproto_sccs, descriptor_table_cipv_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_cipv_2eproto::offsets,
  file_level_metadata_cipv_2eproto, 1, file_level_enum_descriptors_cipv_2eproto, file_level_service_descriptors_cipv_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cipv_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cipv_2eproto)), true);
namespace perception {

// ===================================================================

void CIPV::InitAsDefaultInstance() {
}
class CIPV::_Internal {
 public:
};

CIPV::CIPV(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.CIPV)
}
CIPV::CIPV(const CIPV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttc_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(ttc_));
  // @@protoc_insertion_point(copy_constructor:perception.CIPV)
}

void CIPV::SharedCtor() {
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttc_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(ttc_));
}

CIPV::~CIPV() {
  // @@protoc_insertion_point(destructor:perception.CIPV)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CIPV::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CIPV::ArenaDtor(void* object) {
  CIPV* _this = reinterpret_cast< CIPV* >(object);
  (void)_this;
}
void CIPV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIPV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CIPV& CIPV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CIPV_cipv_2eproto.base);
  return *internal_default_instance();
}


void CIPV::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.CIPV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttc_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(ttc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CIPV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vehicle_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vehicle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float longitude_dist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          longitude_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lateral_dist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          lateral_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rel_longitude_speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          rel_longitude_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rel_lateral_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          rel_lateral_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ttc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ttc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CIPV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.CIPV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tick(), target);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // int32 vehicle_id = 4;
  if (this->vehicle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vehicle_id(), target);
  }

  // float longitude_dist = 5;
  if (!(this->longitude_dist() <= 0 && this->longitude_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_longitude_dist(), target);
  }

  // float lateral_dist = 6;
  if (!(this->lateral_dist() <= 0 && this->lateral_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_lateral_dist(), target);
  }

  // float rel_longitude_speed = 7;
  if (!(this->rel_longitude_speed() <= 0 && this->rel_longitude_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rel_longitude_speed(), target);
  }

  // float rel_lateral_speed = 8;
  if (!(this->rel_lateral_speed() <= 0 && this->rel_lateral_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_rel_lateral_speed(), target);
  }

  // float ttc = 9;
  if (!(this->ttc() <= 0 && this->ttc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_ttc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.CIPV)
  return target;
}

size_t CIPV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.CIPV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // int32 vehicle_id = 4;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicle_id());
  }

  // float longitude_dist = 5;
  if (!(this->longitude_dist() <= 0 && this->longitude_dist() >= 0)) {
    total_size += 1 + 4;
  }

  // float lateral_dist = 6;
  if (!(this->lateral_dist() <= 0 && this->lateral_dist() >= 0)) {
    total_size += 1 + 4;
  }

  // float rel_longitude_speed = 7;
  if (!(this->rel_longitude_speed() <= 0 && this->rel_longitude_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float rel_lateral_speed = 8;
  if (!(this->rel_lateral_speed() <= 0 && this->rel_lateral_speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float ttc = 9;
  if (!(this->ttc() <= 0 && this->ttc() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIPV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.CIPV)
  GOOGLE_DCHECK_NE(&from, this);
  const CIPV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CIPV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.CIPV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.CIPV)
    MergeFrom(*source);
  }
}

void CIPV::MergeFrom(const CIPV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.CIPV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.vehicle_id() != 0) {
    _internal_set_vehicle_id(from._internal_vehicle_id());
  }
  if (!(from.longitude_dist() <= 0 && from.longitude_dist() >= 0)) {
    _internal_set_longitude_dist(from._internal_longitude_dist());
  }
  if (!(from.lateral_dist() <= 0 && from.lateral_dist() >= 0)) {
    _internal_set_lateral_dist(from._internal_lateral_dist());
  }
  if (!(from.rel_longitude_speed() <= 0 && from.rel_longitude_speed() >= 0)) {
    _internal_set_rel_longitude_speed(from._internal_rel_longitude_speed());
  }
  if (!(from.rel_lateral_speed() <= 0 && from.rel_lateral_speed() >= 0)) {
    _internal_set_rel_lateral_speed(from._internal_rel_lateral_speed());
  }
  if (!(from.ttc() <= 0 && from.ttc() >= 0)) {
    _internal_set_ttc(from._internal_ttc());
  }
}

void CIPV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.CIPV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CIPV::CopyFrom(const CIPV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.CIPV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPV::IsInitialized() const {
  return true;
}

void CIPV::InternalSwap(CIPV* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIPV, ttc_)
      + sizeof(CIPV::ttc_)
      - PROTOBUF_FIELD_OFFSET(CIPV, frame_id_)>(
          reinterpret_cast<char*>(&frame_id_),
          reinterpret_cast<char*>(&other->frame_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CIPV::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perception::CIPV* Arena::CreateMaybeMessage< ::perception::CIPV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::CIPV >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
