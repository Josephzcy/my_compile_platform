// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle.proto

#include "vehicle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vehicle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vehicle_VehicleMeasureRes_vehicle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle_VehicleState_vehicle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle_VehicleWarning_vehicle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rect2f_geometry_2eproto;
namespace perception {
class Vehicle_VehicleMeasureResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle_VehicleMeasureRes> _instance;
} _Vehicle_VehicleMeasureRes_default_instance_;
class Vehicle_VehicleWarningDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle_VehicleWarning> _instance;
} _Vehicle_VehicleWarning_default_instance_;
class Vehicle_VehicleStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle_VehicleState> _instance;
} _Vehicle_VehicleState_default_instance_;
class VehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle> _instance;
} _Vehicle_default_instance_;
}  // namespace perception
static void InitDefaultsscc_info_Vehicle_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Vehicle_default_instance_;
    new (ptr) ::perception::Vehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Vehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Vehicle_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Vehicle_vehicle_2eproto}, {
      &scc_info_Vehicle_VehicleMeasureRes_vehicle_2eproto.base,
      &scc_info_Vehicle_VehicleWarning_vehicle_2eproto.base,
      &scc_info_Vehicle_VehicleState_vehicle_2eproto.base,}};

static void InitDefaultsscc_info_Vehicle_VehicleMeasureRes_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Vehicle_VehicleMeasureRes_default_instance_;
    new (ptr) ::perception::Vehicle_VehicleMeasureRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Vehicle_VehicleMeasureRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vehicle_VehicleMeasureRes_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Vehicle_VehicleMeasureRes_vehicle_2eproto}, {
      &scc_info_Rect2f_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Vehicle_VehicleState_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Vehicle_VehicleState_default_instance_;
    new (ptr) ::perception::Vehicle_VehicleState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Vehicle_VehicleState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle_VehicleState_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vehicle_VehicleState_vehicle_2eproto}, {}};

static void InitDefaultsscc_info_Vehicle_VehicleWarning_vehicle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Vehicle_VehicleWarning_default_instance_;
    new (ptr) ::perception::Vehicle_VehicleWarning();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Vehicle_VehicleWarning::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle_VehicleWarning_vehicle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vehicle_VehicleWarning_vehicle_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vehicle_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vehicle_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vehicle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vehicle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, det_rect_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, reg_rect_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, track_rect_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, smooth_rect_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, hit_type_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, vehicle_class_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, track_cnt_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, track_status_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, track_confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, vehicle_width_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, vehicle_height_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, longitude_dist_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, lateral_dist_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, rel_lateral_speed_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, rel_speed_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, speed_acc_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, headway_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, ttc_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, on_route_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, is_still_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, rel_slowdown_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, is_crucial_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, is_second_crucial_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, pose_class_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleMeasureRes, trace_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleWarning, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleWarning, headway_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleWarning, warning_level_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleWarning, fcw_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleWarning, ufcw_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleWarning, headway_warning_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleWarning, vb_warning_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleWarning, sag_warning_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleState, fcw_state_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle_VehicleState, hmw_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle, frame_id_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle, vehicle_list_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle, vehicle_warning_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle, state_),
  PROTOBUF_FIELD_OFFSET(::perception::Vehicle, data_source_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perception::Vehicle_VehicleMeasureRes)},
  { 32, -1, sizeof(::perception::Vehicle_VehicleWarning)},
  { 45, -1, sizeof(::perception::Vehicle_VehicleState)},
  { 52, -1, sizeof(::perception::Vehicle)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Vehicle_VehicleMeasureRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Vehicle_VehicleWarning_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Vehicle_VehicleState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Vehicle_default_instance_),
};

const char descriptor_table_protodef_vehicle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rvehicle.proto\022\nperception\032\016geometry.pr"
  "oto\032\021data_source.proto\"\227\t\n\007Vehicle\022\020\n\010fr"
  "ame_id\030\001 \001(\004\022\021\n\ttimestamp\030\002 \001(\004\022;\n\014vehic"
  "le_list\030\003 \003(\0132%.perception.Vehicle.Vehic"
  "leMeasureRes\022;\n\017vehicle_warning\030\004 \001(\0132\"."
  "perception.Vehicle.VehicleWarning\022/\n\005sta"
  "te\030\005 \001(\0132 .perception.Vehicle.VehicleSta"
  "te\022(\n\013data_source\030\n \001(\0162\023.minieye.DataSo"
  "urce\032\257\005\n\021VehicleMeasureRes\022+\n\010det_rect\030\001"
  " \001(\0132\031.perception.common.Rect2f\022+\n\010reg_r"
  "ect\030\002 \001(\0132\031.perception.common.Rect2f\022-\n\n"
  "track_rect\030\003 \001(\0132\031.perception.common.Rec"
  "t2f\022.\n\013smooth_rect\030\004 \001(\0132\031.perception.co"
  "mmon.Rect2f\022\022\n\nconfidence\030\005 \001(\002\022\020\n\010hit_t"
  "ype\030\006 \001(\005\022\025\n\rvehicle_class\030\007 \001(\005\022\022\n\nvehi"
  "cle_id\030\010 \001(\005\022\021\n\ttrack_cnt\030\t \001(\005\022\024\n\014track"
  "_status\030\n \001(\005\022\030\n\020track_confidence\030\013 \001(\002\022"
  "\025\n\rvehicle_width\030\014 \001(\002\022\026\n\016vehicle_height"
  "\030\r \001(\002\022\026\n\016longitude_dist\030\016 \001(\002\022\024\n\014latera"
  "l_dist\030\017 \001(\002\022\031\n\021rel_lateral_speed\030\020 \001(\002\022"
  "\021\n\trel_speed\030\021 \001(\002\022\021\n\tspeed_acc\030\022 \001(\002\022\017\n"
  "\007headway\030\023 \001(\002\022\013\n\003ttc\030\024 \001(\002\022\020\n\010on_route\030"
  "\025 \001(\010\022\020\n\010is_still\030\026 \001(\010\022\024\n\014rel_slowdown\030"
  "\027 \001(\010\022\022\n\nis_crucial\030\030 \001(\010\022\031\n\021is_second_c"
  "rucial\030\031 \001(\010\022\022\n\npose_class\030\032 \001(\005\022\024\n\014trac"
  "e_status\030\033 \001(\005\032\251\001\n\016VehicleWarning\022\022\n\nveh"
  "icle_id\030\001 \001(\005\022\017\n\007headway\030\002 \001(\002\022\025\n\rwarnin"
  "g_level\030\003 \001(\005\022\013\n\003fcw\030\004 \001(\005\022\014\n\004ufcw\030\005 \001(\005"
  "\022\027\n\017headway_warning\030\006 \001(\005\022\022\n\nvb_warning\030"
  "\007 \001(\005\022\023\n\013sag_warning\030\010 \001(\005\0324\n\014VehicleSta"
  "te\022\021\n\tfcw_state\030\001 \001(\005\022\021\n\thmw_state\030\002 \001(\005"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vehicle_2eproto_deps[2] = {
  &::descriptor_table_data_5fsource_2eproto,
  &::descriptor_table_geometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vehicle_2eproto_sccs[4] = {
  &scc_info_Vehicle_vehicle_2eproto.base,
  &scc_info_Vehicle_VehicleMeasureRes_vehicle_2eproto.base,
  &scc_info_Vehicle_VehicleState_vehicle_2eproto.base,
  &scc_info_Vehicle_VehicleWarning_vehicle_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vehicle_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_2eproto = {
  false, false, descriptor_table_protodef_vehicle_2eproto, "vehicle.proto", 1248,
  &descriptor_table_vehicle_2eproto_once, descriptor_table_vehicle_2eproto_sccs, descriptor_table_vehicle_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_vehicle_2eproto::offsets,
  file_level_metadata_vehicle_2eproto, 4, file_level_enum_descriptors_vehicle_2eproto, file_level_service_descriptors_vehicle_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vehicle_2eproto)), true);
namespace perception {

// ===================================================================

void Vehicle_VehicleMeasureRes::InitAsDefaultInstance() {
  ::perception::_Vehicle_VehicleMeasureRes_default_instance_._instance.get_mutable()->det_rect_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
  ::perception::_Vehicle_VehicleMeasureRes_default_instance_._instance.get_mutable()->reg_rect_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
  ::perception::_Vehicle_VehicleMeasureRes_default_instance_._instance.get_mutable()->track_rect_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
  ::perception::_Vehicle_VehicleMeasureRes_default_instance_._instance.get_mutable()->smooth_rect_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
}
class Vehicle_VehicleMeasureRes::_Internal {
 public:
  static const ::perception::common::Rect2f& det_rect(const Vehicle_VehicleMeasureRes* msg);
  static const ::perception::common::Rect2f& reg_rect(const Vehicle_VehicleMeasureRes* msg);
  static const ::perception::common::Rect2f& track_rect(const Vehicle_VehicleMeasureRes* msg);
  static const ::perception::common::Rect2f& smooth_rect(const Vehicle_VehicleMeasureRes* msg);
};

const ::perception::common::Rect2f&
Vehicle_VehicleMeasureRes::_Internal::det_rect(const Vehicle_VehicleMeasureRes* msg) {
  return *msg->det_rect_;
}
const ::perception::common::Rect2f&
Vehicle_VehicleMeasureRes::_Internal::reg_rect(const Vehicle_VehicleMeasureRes* msg) {
  return *msg->reg_rect_;
}
const ::perception::common::Rect2f&
Vehicle_VehicleMeasureRes::_Internal::track_rect(const Vehicle_VehicleMeasureRes* msg) {
  return *msg->track_rect_;
}
const ::perception::common::Rect2f&
Vehicle_VehicleMeasureRes::_Internal::smooth_rect(const Vehicle_VehicleMeasureRes* msg) {
  return *msg->smooth_rect_;
}
void Vehicle_VehicleMeasureRes::clear_det_rect() {
  if (GetArena() == nullptr && det_rect_ != nullptr) {
    delete det_rect_;
  }
  det_rect_ = nullptr;
}
void Vehicle_VehicleMeasureRes::clear_reg_rect() {
  if (GetArena() == nullptr && reg_rect_ != nullptr) {
    delete reg_rect_;
  }
  reg_rect_ = nullptr;
}
void Vehicle_VehicleMeasureRes::clear_track_rect() {
  if (GetArena() == nullptr && track_rect_ != nullptr) {
    delete track_rect_;
  }
  track_rect_ = nullptr;
}
void Vehicle_VehicleMeasureRes::clear_smooth_rect() {
  if (GetArena() == nullptr && smooth_rect_ != nullptr) {
    delete smooth_rect_;
  }
  smooth_rect_ = nullptr;
}
Vehicle_VehicleMeasureRes::Vehicle_VehicleMeasureRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Vehicle.VehicleMeasureRes)
}
Vehicle_VehicleMeasureRes::Vehicle_VehicleMeasureRes(const Vehicle_VehicleMeasureRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_det_rect()) {
    det_rect_ = new ::perception::common::Rect2f(*from.det_rect_);
  } else {
    det_rect_ = nullptr;
  }
  if (from._internal_has_reg_rect()) {
    reg_rect_ = new ::perception::common::Rect2f(*from.reg_rect_);
  } else {
    reg_rect_ = nullptr;
  }
  if (from._internal_has_track_rect()) {
    track_rect_ = new ::perception::common::Rect2f(*from.track_rect_);
  } else {
    track_rect_ = nullptr;
  }
  if (from._internal_has_smooth_rect()) {
    smooth_rect_ = new ::perception::common::Rect2f(*from.smooth_rect_);
  } else {
    smooth_rect_ = nullptr;
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&trace_status_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(trace_status_));
  // @@protoc_insertion_point(copy_constructor:perception.Vehicle.VehicleMeasureRes)
}

void Vehicle_VehicleMeasureRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vehicle_VehicleMeasureRes_vehicle_2eproto.base);
  ::memset(&det_rect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_status_) -
      reinterpret_cast<char*>(&det_rect_)) + sizeof(trace_status_));
}

Vehicle_VehicleMeasureRes::~Vehicle_VehicleMeasureRes() {
  // @@protoc_insertion_point(destructor:perception.Vehicle.VehicleMeasureRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vehicle_VehicleMeasureRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete det_rect_;
  if (this != internal_default_instance()) delete reg_rect_;
  if (this != internal_default_instance()) delete track_rect_;
  if (this != internal_default_instance()) delete smooth_rect_;
}

void Vehicle_VehicleMeasureRes::ArenaDtor(void* object) {
  Vehicle_VehicleMeasureRes* _this = reinterpret_cast< Vehicle_VehicleMeasureRes* >(object);
  (void)_this;
}
void Vehicle_VehicleMeasureRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vehicle_VehicleMeasureRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle_VehicleMeasureRes& Vehicle_VehicleMeasureRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle_VehicleMeasureRes_vehicle_2eproto.base);
  return *internal_default_instance();
}


void Vehicle_VehicleMeasureRes::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Vehicle.VehicleMeasureRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && det_rect_ != nullptr) {
    delete det_rect_;
  }
  det_rect_ = nullptr;
  if (GetArena() == nullptr && reg_rect_ != nullptr) {
    delete reg_rect_;
  }
  reg_rect_ = nullptr;
  if (GetArena() == nullptr && track_rect_ != nullptr) {
    delete track_rect_;
  }
  track_rect_ = nullptr;
  if (GetArena() == nullptr && smooth_rect_ != nullptr) {
    delete smooth_rect_;
  }
  smooth_rect_ = nullptr;
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_status_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(trace_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vehicle_VehicleMeasureRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.Rect2f det_rect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_det_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Rect2f reg_rect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reg_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Rect2f track_rect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Rect2f smooth_rect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_smooth_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 hit_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hit_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vehicle_class = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          vehicle_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vehicle_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          vehicle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 track_cnt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          track_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 track_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          track_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float track_confidence = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          track_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vehicle_width = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          vehicle_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vehicle_height = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          vehicle_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float longitude_dist = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          longitude_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lateral_dist = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          lateral_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rel_lateral_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          rel_lateral_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rel_speed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          rel_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speed_acc = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          speed_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float headway = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          headway_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ttc = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          ttc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool on_route = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          on_route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_still = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          is_still_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rel_slowdown = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          rel_slowdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_crucial = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          is_crucial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_second_crucial = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          is_second_crucial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pose_class = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          pose_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trace_status = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          trace_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle_VehicleMeasureRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Vehicle.VehicleMeasureRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.Rect2f det_rect = 1;
  if (this->has_det_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::det_rect(this), target, stream);
  }

  // .perception.common.Rect2f reg_rect = 2;
  if (this->has_reg_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reg_rect(this), target, stream);
  }

  // .perception.common.Rect2f track_rect = 3;
  if (this->has_track_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::track_rect(this), target, stream);
  }

  // .perception.common.Rect2f smooth_rect = 4;
  if (this->has_smooth_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::smooth_rect(this), target, stream);
  }

  // float confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_confidence(), target);
  }

  // int32 hit_type = 6;
  if (this->hit_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_hit_type(), target);
  }

  // int32 vehicle_class = 7;
  if (this->vehicle_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_vehicle_class(), target);
  }

  // int32 vehicle_id = 8;
  if (this->vehicle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_vehicle_id(), target);
  }

  // int32 track_cnt = 9;
  if (this->track_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_track_cnt(), target);
  }

  // int32 track_status = 10;
  if (this->track_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_track_status(), target);
  }

  // float track_confidence = 11;
  if (!(this->track_confidence() <= 0 && this->track_confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_track_confidence(), target);
  }

  // float vehicle_width = 12;
  if (!(this->vehicle_width() <= 0 && this->vehicle_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_vehicle_width(), target);
  }

  // float vehicle_height = 13;
  if (!(this->vehicle_height() <= 0 && this->vehicle_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_vehicle_height(), target);
  }

  // float longitude_dist = 14;
  if (!(this->longitude_dist() <= 0 && this->longitude_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_longitude_dist(), target);
  }

  // float lateral_dist = 15;
  if (!(this->lateral_dist() <= 0 && this->lateral_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_lateral_dist(), target);
  }

  // float rel_lateral_speed = 16;
  if (!(this->rel_lateral_speed() <= 0 && this->rel_lateral_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_rel_lateral_speed(), target);
  }

  // float rel_speed = 17;
  if (!(this->rel_speed() <= 0 && this->rel_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_rel_speed(), target);
  }

  // float speed_acc = 18;
  if (!(this->speed_acc() <= 0 && this->speed_acc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_speed_acc(), target);
  }

  // float headway = 19;
  if (!(this->headway() <= 0 && this->headway() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_headway(), target);
  }

  // float ttc = 20;
  if (!(this->ttc() <= 0 && this->ttc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_ttc(), target);
  }

  // bool on_route = 21;
  if (this->on_route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_on_route(), target);
  }

  // bool is_still = 22;
  if (this->is_still() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_is_still(), target);
  }

  // bool rel_slowdown = 23;
  if (this->rel_slowdown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_rel_slowdown(), target);
  }

  // bool is_crucial = 24;
  if (this->is_crucial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_is_crucial(), target);
  }

  // bool is_second_crucial = 25;
  if (this->is_second_crucial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_is_second_crucial(), target);
  }

  // int32 pose_class = 26;
  if (this->pose_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_pose_class(), target);
  }

  // int32 trace_status = 27;
  if (this->trace_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_trace_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Vehicle.VehicleMeasureRes)
  return target;
}

size_t Vehicle_VehicleMeasureRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Vehicle.VehicleMeasureRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Rect2f det_rect = 1;
  if (this->has_det_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *det_rect_);
  }

  // .perception.common.Rect2f reg_rect = 2;
  if (this->has_reg_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reg_rect_);
  }

  // .perception.common.Rect2f track_rect = 3;
  if (this->has_track_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *track_rect_);
  }

  // .perception.common.Rect2f smooth_rect = 4;
  if (this->has_smooth_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *smooth_rect_);
  }

  // float confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 hit_type = 6;
  if (this->hit_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hit_type());
  }

  // int32 vehicle_class = 7;
  if (this->vehicle_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicle_class());
  }

  // int32 vehicle_id = 8;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicle_id());
  }

  // int32 track_cnt = 9;
  if (this->track_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_track_cnt());
  }

  // int32 track_status = 10;
  if (this->track_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_track_status());
  }

  // float track_confidence = 11;
  if (!(this->track_confidence() <= 0 && this->track_confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float vehicle_width = 12;
  if (!(this->vehicle_width() <= 0 && this->vehicle_width() >= 0)) {
    total_size += 1 + 4;
  }

  // float vehicle_height = 13;
  if (!(this->vehicle_height() <= 0 && this->vehicle_height() >= 0)) {
    total_size += 1 + 4;
  }

  // float longitude_dist = 14;
  if (!(this->longitude_dist() <= 0 && this->longitude_dist() >= 0)) {
    total_size += 1 + 4;
  }

  // float lateral_dist = 15;
  if (!(this->lateral_dist() <= 0 && this->lateral_dist() >= 0)) {
    total_size += 1 + 4;
  }

  // float rel_lateral_speed = 16;
  if (!(this->rel_lateral_speed() <= 0 && this->rel_lateral_speed() >= 0)) {
    total_size += 2 + 4;
  }

  // float rel_speed = 17;
  if (!(this->rel_speed() <= 0 && this->rel_speed() >= 0)) {
    total_size += 2 + 4;
  }

  // float speed_acc = 18;
  if (!(this->speed_acc() <= 0 && this->speed_acc() >= 0)) {
    total_size += 2 + 4;
  }

  // float headway = 19;
  if (!(this->headway() <= 0 && this->headway() >= 0)) {
    total_size += 2 + 4;
  }

  // float ttc = 20;
  if (!(this->ttc() <= 0 && this->ttc() >= 0)) {
    total_size += 2 + 4;
  }

  // bool on_route = 21;
  if (this->on_route() != 0) {
    total_size += 2 + 1;
  }

  // bool is_still = 22;
  if (this->is_still() != 0) {
    total_size += 2 + 1;
  }

  // bool rel_slowdown = 23;
  if (this->rel_slowdown() != 0) {
    total_size += 2 + 1;
  }

  // bool is_crucial = 24;
  if (this->is_crucial() != 0) {
    total_size += 2 + 1;
  }

  // bool is_second_crucial = 25;
  if (this->is_second_crucial() != 0) {
    total_size += 2 + 1;
  }

  // int32 pose_class = 26;
  if (this->pose_class() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pose_class());
  }

  // int32 trace_status = 27;
  if (this->trace_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trace_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle_VehicleMeasureRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Vehicle.VehicleMeasureRes)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle_VehicleMeasureRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle_VehicleMeasureRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Vehicle.VehicleMeasureRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Vehicle.VehicleMeasureRes)
    MergeFrom(*source);
  }
}

void Vehicle_VehicleMeasureRes::MergeFrom(const Vehicle_VehicleMeasureRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Vehicle.VehicleMeasureRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_det_rect()) {
    _internal_mutable_det_rect()->::perception::common::Rect2f::MergeFrom(from._internal_det_rect());
  }
  if (from.has_reg_rect()) {
    _internal_mutable_reg_rect()->::perception::common::Rect2f::MergeFrom(from._internal_reg_rect());
  }
  if (from.has_track_rect()) {
    _internal_mutable_track_rect()->::perception::common::Rect2f::MergeFrom(from._internal_track_rect());
  }
  if (from.has_smooth_rect()) {
    _internal_mutable_smooth_rect()->::perception::common::Rect2f::MergeFrom(from._internal_smooth_rect());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from.hit_type() != 0) {
    _internal_set_hit_type(from._internal_hit_type());
  }
  if (from.vehicle_class() != 0) {
    _internal_set_vehicle_class(from._internal_vehicle_class());
  }
  if (from.vehicle_id() != 0) {
    _internal_set_vehicle_id(from._internal_vehicle_id());
  }
  if (from.track_cnt() != 0) {
    _internal_set_track_cnt(from._internal_track_cnt());
  }
  if (from.track_status() != 0) {
    _internal_set_track_status(from._internal_track_status());
  }
  if (!(from.track_confidence() <= 0 && from.track_confidence() >= 0)) {
    _internal_set_track_confidence(from._internal_track_confidence());
  }
  if (!(from.vehicle_width() <= 0 && from.vehicle_width() >= 0)) {
    _internal_set_vehicle_width(from._internal_vehicle_width());
  }
  if (!(from.vehicle_height() <= 0 && from.vehicle_height() >= 0)) {
    _internal_set_vehicle_height(from._internal_vehicle_height());
  }
  if (!(from.longitude_dist() <= 0 && from.longitude_dist() >= 0)) {
    _internal_set_longitude_dist(from._internal_longitude_dist());
  }
  if (!(from.lateral_dist() <= 0 && from.lateral_dist() >= 0)) {
    _internal_set_lateral_dist(from._internal_lateral_dist());
  }
  if (!(from.rel_lateral_speed() <= 0 && from.rel_lateral_speed() >= 0)) {
    _internal_set_rel_lateral_speed(from._internal_rel_lateral_speed());
  }
  if (!(from.rel_speed() <= 0 && from.rel_speed() >= 0)) {
    _internal_set_rel_speed(from._internal_rel_speed());
  }
  if (!(from.speed_acc() <= 0 && from.speed_acc() >= 0)) {
    _internal_set_speed_acc(from._internal_speed_acc());
  }
  if (!(from.headway() <= 0 && from.headway() >= 0)) {
    _internal_set_headway(from._internal_headway());
  }
  if (!(from.ttc() <= 0 && from.ttc() >= 0)) {
    _internal_set_ttc(from._internal_ttc());
  }
  if (from.on_route() != 0) {
    _internal_set_on_route(from._internal_on_route());
  }
  if (from.is_still() != 0) {
    _internal_set_is_still(from._internal_is_still());
  }
  if (from.rel_slowdown() != 0) {
    _internal_set_rel_slowdown(from._internal_rel_slowdown());
  }
  if (from.is_crucial() != 0) {
    _internal_set_is_crucial(from._internal_is_crucial());
  }
  if (from.is_second_crucial() != 0) {
    _internal_set_is_second_crucial(from._internal_is_second_crucial());
  }
  if (from.pose_class() != 0) {
    _internal_set_pose_class(from._internal_pose_class());
  }
  if (from.trace_status() != 0) {
    _internal_set_trace_status(from._internal_trace_status());
  }
}

void Vehicle_VehicleMeasureRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Vehicle.VehicleMeasureRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_VehicleMeasureRes::CopyFrom(const Vehicle_VehicleMeasureRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Vehicle.VehicleMeasureRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_VehicleMeasureRes::IsInitialized() const {
  return true;
}

void Vehicle_VehicleMeasureRes::InternalSwap(Vehicle_VehicleMeasureRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vehicle_VehicleMeasureRes, trace_status_)
      + sizeof(Vehicle_VehicleMeasureRes::trace_status_)
      - PROTOBUF_FIELD_OFFSET(Vehicle_VehicleMeasureRes, det_rect_)>(
          reinterpret_cast<char*>(&det_rect_),
          reinterpret_cast<char*>(&other->det_rect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle_VehicleMeasureRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle_VehicleWarning::InitAsDefaultInstance() {
}
class Vehicle_VehicleWarning::_Internal {
 public:
};

Vehicle_VehicleWarning::Vehicle_VehicleWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Vehicle.VehicleWarning)
}
Vehicle_VehicleWarning::Vehicle_VehicleWarning(const Vehicle_VehicleWarning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sag_warning_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(sag_warning_));
  // @@protoc_insertion_point(copy_constructor:perception.Vehicle.VehicleWarning)
}

void Vehicle_VehicleWarning::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sag_warning_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(sag_warning_));
}

Vehicle_VehicleWarning::~Vehicle_VehicleWarning() {
  // @@protoc_insertion_point(destructor:perception.Vehicle.VehicleWarning)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vehicle_VehicleWarning::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vehicle_VehicleWarning::ArenaDtor(void* object) {
  Vehicle_VehicleWarning* _this = reinterpret_cast< Vehicle_VehicleWarning* >(object);
  (void)_this;
}
void Vehicle_VehicleWarning::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vehicle_VehicleWarning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle_VehicleWarning& Vehicle_VehicleWarning::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle_VehicleWarning_vehicle_2eproto.base);
  return *internal_default_instance();
}


void Vehicle_VehicleWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Vehicle.VehicleWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sag_warning_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(sag_warning_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vehicle_VehicleWarning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vehicle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vehicle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float headway = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          headway_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 warning_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          warning_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fcw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fcw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ufcw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ufcw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 headway_warning = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          headway_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vb_warning = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          vb_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sag_warning = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          sag_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle_VehicleWarning::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Vehicle.VehicleWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vehicle_id(), target);
  }

  // float headway = 2;
  if (!(this->headway() <= 0 && this->headway() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_headway(), target);
  }

  // int32 warning_level = 3;
  if (this->warning_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_warning_level(), target);
  }

  // int32 fcw = 4;
  if (this->fcw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fcw(), target);
  }

  // int32 ufcw = 5;
  if (this->ufcw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ufcw(), target);
  }

  // int32 headway_warning = 6;
  if (this->headway_warning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_headway_warning(), target);
  }

  // int32 vb_warning = 7;
  if (this->vb_warning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_vb_warning(), target);
  }

  // int32 sag_warning = 8;
  if (this->sag_warning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_sag_warning(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Vehicle.VehicleWarning)
  return target;
}

size_t Vehicle_VehicleWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Vehicle.VehicleWarning)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vehicle_id = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicle_id());
  }

  // float headway = 2;
  if (!(this->headway() <= 0 && this->headway() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 warning_level = 3;
  if (this->warning_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_warning_level());
  }

  // int32 fcw = 4;
  if (this->fcw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fcw());
  }

  // int32 ufcw = 5;
  if (this->ufcw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ufcw());
  }

  // int32 headway_warning = 6;
  if (this->headway_warning() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_headway_warning());
  }

  // int32 vb_warning = 7;
  if (this->vb_warning() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vb_warning());
  }

  // int32 sag_warning = 8;
  if (this->sag_warning() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sag_warning());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle_VehicleWarning::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Vehicle.VehicleWarning)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle_VehicleWarning* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle_VehicleWarning>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Vehicle.VehicleWarning)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Vehicle.VehicleWarning)
    MergeFrom(*source);
  }
}

void Vehicle_VehicleWarning::MergeFrom(const Vehicle_VehicleWarning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Vehicle.VehicleWarning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    _internal_set_vehicle_id(from._internal_vehicle_id());
  }
  if (!(from.headway() <= 0 && from.headway() >= 0)) {
    _internal_set_headway(from._internal_headway());
  }
  if (from.warning_level() != 0) {
    _internal_set_warning_level(from._internal_warning_level());
  }
  if (from.fcw() != 0) {
    _internal_set_fcw(from._internal_fcw());
  }
  if (from.ufcw() != 0) {
    _internal_set_ufcw(from._internal_ufcw());
  }
  if (from.headway_warning() != 0) {
    _internal_set_headway_warning(from._internal_headway_warning());
  }
  if (from.vb_warning() != 0) {
    _internal_set_vb_warning(from._internal_vb_warning());
  }
  if (from.sag_warning() != 0) {
    _internal_set_sag_warning(from._internal_sag_warning());
  }
}

void Vehicle_VehicleWarning::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Vehicle.VehicleWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_VehicleWarning::CopyFrom(const Vehicle_VehicleWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Vehicle.VehicleWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_VehicleWarning::IsInitialized() const {
  return true;
}

void Vehicle_VehicleWarning::InternalSwap(Vehicle_VehicleWarning* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vehicle_VehicleWarning, sag_warning_)
      + sizeof(Vehicle_VehicleWarning::sag_warning_)
      - PROTOBUF_FIELD_OFFSET(Vehicle_VehicleWarning, vehicle_id_)>(
          reinterpret_cast<char*>(&vehicle_id_),
          reinterpret_cast<char*>(&other->vehicle_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle_VehicleWarning::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle_VehicleState::InitAsDefaultInstance() {
}
class Vehicle_VehicleState::_Internal {
 public:
};

Vehicle_VehicleState::Vehicle_VehicleState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Vehicle.VehicleState)
}
Vehicle_VehicleState::Vehicle_VehicleState(const Vehicle_VehicleState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fcw_state_, &from.fcw_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&hmw_state_) -
    reinterpret_cast<char*>(&fcw_state_)) + sizeof(hmw_state_));
  // @@protoc_insertion_point(copy_constructor:perception.Vehicle.VehicleState)
}

void Vehicle_VehicleState::SharedCtor() {
  ::memset(&fcw_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hmw_state_) -
      reinterpret_cast<char*>(&fcw_state_)) + sizeof(hmw_state_));
}

Vehicle_VehicleState::~Vehicle_VehicleState() {
  // @@protoc_insertion_point(destructor:perception.Vehicle.VehicleState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vehicle_VehicleState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vehicle_VehicleState::ArenaDtor(void* object) {
  Vehicle_VehicleState* _this = reinterpret_cast< Vehicle_VehicleState* >(object);
  (void)_this;
}
void Vehicle_VehicleState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vehicle_VehicleState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle_VehicleState& Vehicle_VehicleState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle_VehicleState_vehicle_2eproto.base);
  return *internal_default_instance();
}


void Vehicle_VehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Vehicle.VehicleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fcw_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hmw_state_) -
      reinterpret_cast<char*>(&fcw_state_)) + sizeof(hmw_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vehicle_VehicleState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fcw_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fcw_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hmw_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hmw_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle_VehicleState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Vehicle.VehicleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fcw_state = 1;
  if (this->fcw_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fcw_state(), target);
  }

  // int32 hmw_state = 2;
  if (this->hmw_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hmw_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Vehicle.VehicleState)
  return target;
}

size_t Vehicle_VehicleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Vehicle.VehicleState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fcw_state = 1;
  if (this->fcw_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fcw_state());
  }

  // int32 hmw_state = 2;
  if (this->hmw_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hmw_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle_VehicleState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Vehicle.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle_VehicleState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle_VehicleState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Vehicle.VehicleState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Vehicle.VehicleState)
    MergeFrom(*source);
  }
}

void Vehicle_VehicleState::MergeFrom(const Vehicle_VehicleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Vehicle.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fcw_state() != 0) {
    _internal_set_fcw_state(from._internal_fcw_state());
  }
  if (from.hmw_state() != 0) {
    _internal_set_hmw_state(from._internal_hmw_state());
  }
}

void Vehicle_VehicleState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Vehicle.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_VehicleState::CopyFrom(const Vehicle_VehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Vehicle.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_VehicleState::IsInitialized() const {
  return true;
}

void Vehicle_VehicleState::InternalSwap(Vehicle_VehicleState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vehicle_VehicleState, hmw_state_)
      + sizeof(Vehicle_VehicleState::hmw_state_)
      - PROTOBUF_FIELD_OFFSET(Vehicle_VehicleState, fcw_state_)>(
          reinterpret_cast<char*>(&fcw_state_),
          reinterpret_cast<char*>(&other->fcw_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle_VehicleState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle::InitAsDefaultInstance() {
  ::perception::_Vehicle_default_instance_._instance.get_mutable()->vehicle_warning_ = const_cast< ::perception::Vehicle_VehicleWarning*>(
      ::perception::Vehicle_VehicleWarning::internal_default_instance());
  ::perception::_Vehicle_default_instance_._instance.get_mutable()->state_ = const_cast< ::perception::Vehicle_VehicleState*>(
      ::perception::Vehicle_VehicleState::internal_default_instance());
}
class Vehicle::_Internal {
 public:
  static const ::perception::Vehicle_VehicleWarning& vehicle_warning(const Vehicle* msg);
  static const ::perception::Vehicle_VehicleState& state(const Vehicle* msg);
};

const ::perception::Vehicle_VehicleWarning&
Vehicle::_Internal::vehicle_warning(const Vehicle* msg) {
  return *msg->vehicle_warning_;
}
const ::perception::Vehicle_VehicleState&
Vehicle::_Internal::state(const Vehicle* msg) {
  return *msg->state_;
}
Vehicle::Vehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vehicle_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Vehicle)
}
Vehicle::Vehicle(const Vehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vehicle_list_(from.vehicle_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehicle_warning()) {
    vehicle_warning_ = new ::perception::Vehicle_VehicleWarning(*from.vehicle_warning_);
  } else {
    vehicle_warning_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::perception::Vehicle_VehicleState(*from.state_);
  } else {
    state_ = nullptr;
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_source_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(data_source_));
  // @@protoc_insertion_point(copy_constructor:perception.Vehicle)
}

void Vehicle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vehicle_vehicle_2eproto.base);
  ::memset(&vehicle_warning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_source_) -
      reinterpret_cast<char*>(&vehicle_warning_)) + sizeof(data_source_));
}

Vehicle::~Vehicle() {
  // @@protoc_insertion_point(destructor:perception.Vehicle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vehicle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vehicle_warning_;
  if (this != internal_default_instance()) delete state_;
}

void Vehicle::ArenaDtor(void* object) {
  Vehicle* _this = reinterpret_cast< Vehicle* >(object);
  (void)_this;
}
void Vehicle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle& Vehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle_vehicle_2eproto.base);
  return *internal_default_instance();
}


void Vehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Vehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicle_list_.Clear();
  if (GetArena() == nullptr && vehicle_warning_ != nullptr) {
    delete vehicle_warning_;
  }
  vehicle_warning_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_source_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(data_source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.Vehicle.VehicleMeasureRes vehicle_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vehicle_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.Vehicle.VehicleWarning vehicle_warning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_warning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.Vehicle.VehicleState state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.DataSource data_source = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_source(static_cast<::minieye::DataSource>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Vehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // repeated .perception.Vehicle.VehicleMeasureRes vehicle_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vehicle_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_vehicle_list(i), target, stream);
  }

  // .perception.Vehicle.VehicleWarning vehicle_warning = 4;
  if (this->has_vehicle_warning()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vehicle_warning(this), target, stream);
  }

  // .perception.Vehicle.VehicleState state = 5;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::state(this), target, stream);
  }

  // .minieye.DataSource data_source = 10;
  if (this->data_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_data_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Vehicle)
  return target;
}

size_t Vehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Vehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.Vehicle.VehicleMeasureRes vehicle_list = 3;
  total_size += 1UL * this->_internal_vehicle_list_size();
  for (const auto& msg : this->vehicle_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.Vehicle.VehicleWarning vehicle_warning = 4;
  if (this->has_vehicle_warning()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_warning_);
  }

  // .perception.Vehicle.VehicleState state = 5;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // .minieye.DataSource data_source = 10;
  if (this->data_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Vehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Vehicle)
    MergeFrom(*source);
  }
}

void Vehicle::MergeFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicle_list_.MergeFrom(from.vehicle_list_);
  if (from.has_vehicle_warning()) {
    _internal_mutable_vehicle_warning()->::perception::Vehicle_VehicleWarning::MergeFrom(from._internal_vehicle_warning());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::perception::Vehicle_VehicleState::MergeFrom(from._internal_state());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.data_source() != 0) {
    _internal_set_data_source(from._internal_data_source());
  }
}

void Vehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle::CopyFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle::IsInitialized() const {
  return true;
}

void Vehicle::InternalSwap(Vehicle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vehicle_list_.InternalSwap(&other->vehicle_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vehicle, data_source_)
      + sizeof(Vehicle::data_source_)
      - PROTOBUF_FIELD_OFFSET(Vehicle, vehicle_warning_)>(
          reinterpret_cast<char*>(&vehicle_warning_),
          reinterpret_cast<char*>(&other->vehicle_warning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perception::Vehicle_VehicleMeasureRes* Arena::CreateMaybeMessage< ::perception::Vehicle_VehicleMeasureRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Vehicle_VehicleMeasureRes >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::Vehicle_VehicleWarning* Arena::CreateMaybeMessage< ::perception::Vehicle_VehicleWarning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Vehicle_VehicleWarning >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::Vehicle_VehicleState* Arena::CreateMaybeMessage< ::perception::Vehicle_VehicleState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Vehicle_VehicleState >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::Vehicle* Arena::CreateMaybeMessage< ::perception::Vehicle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Vehicle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
