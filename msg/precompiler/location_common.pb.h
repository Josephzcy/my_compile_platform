// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_location_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_location_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_location_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_location_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_location_5fcommon_2eproto;
namespace location {
class HafHeader;
class HafHeaderDefaultTypeInternal;
extern HafHeaderDefaultTypeInternal _HafHeader_default_instance_;
class HafQuaternion;
class HafQuaternionDefaultTypeInternal;
extern HafQuaternionDefaultTypeInternal _HafQuaternion_default_instance_;
class HafTime;
class HafTimeDefaultTypeInternal;
extern HafTimeDefaultTypeInternal _HafTime_default_instance_;
class Point3d;
class Point3dDefaultTypeInternal;
extern Point3dDefaultTypeInternal _Point3d_default_instance_;
class Point3f;
class Point3fDefaultTypeInternal;
extern Point3fDefaultTypeInternal _Point3f_default_instance_;
}  // namespace location
PROTOBUF_NAMESPACE_OPEN
template<> ::location::HafHeader* Arena::CreateMaybeMessage<::location::HafHeader>(Arena*);
template<> ::location::HafQuaternion* Arena::CreateMaybeMessage<::location::HafQuaternion>(Arena*);
template<> ::location::HafTime* Arena::CreateMaybeMessage<::location::HafTime>(Arena*);
template<> ::location::Point3d* Arena::CreateMaybeMessage<::location::Point3d>(Arena*);
template<> ::location::Point3f* Arena::CreateMaybeMessage<::location::Point3f>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace location {

// ===================================================================

class HafTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:location.HafTime) */ {
 public:
  inline HafTime() : HafTime(nullptr) {};
  virtual ~HafTime();

  HafTime(const HafTime& from);
  HafTime(HafTime&& from) noexcept
    : HafTime() {
    *this = ::std::move(from);
  }

  inline HafTime& operator=(const HafTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline HafTime& operator=(HafTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HafTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HafTime* internal_default_instance() {
    return reinterpret_cast<const HafTime*>(
               &_HafTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HafTime& a, HafTime& b) {
    a.Swap(&b);
  }
  inline void Swap(HafTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HafTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HafTime* New() const final {
    return CreateMaybeMessage<HafTime>(nullptr);
  }

  HafTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HafTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HafTime& from);
  void MergeFrom(const HafTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HafTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "location.HafTime";
  }
  protected:
  explicit HafTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_location_5fcommon_2eproto);
    return ::descriptor_table_location_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecFieldNumber = 1,
    kNsecFieldNumber = 2,
  };
  // uint32 sec = 1;
  void clear_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 sec() const;
  void set_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sec() const;
  void _internal_set_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nsec = 2;
  void clear_nsec();
  ::PROTOBUF_NAMESPACE_ID::uint32 nsec() const;
  void set_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nsec() const;
  void _internal_set_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:location.HafTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nsec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_location_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class HafHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:location.HafHeader) */ {
 public:
  inline HafHeader() : HafHeader(nullptr) {};
  virtual ~HafHeader();

  HafHeader(const HafHeader& from);
  HafHeader(HafHeader&& from) noexcept
    : HafHeader() {
    *this = ::std::move(from);
  }

  inline HafHeader& operator=(const HafHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline HafHeader& operator=(HafHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HafHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HafHeader* internal_default_instance() {
    return reinterpret_cast<const HafHeader*>(
               &_HafHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HafHeader& a, HafHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(HafHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HafHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HafHeader* New() const final {
    return CreateMaybeMessage<HafHeader>(nullptr);
  }

  HafHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HafHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HafHeader& from);
  void MergeFrom(const HafHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HafHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "location.HafHeader";
  }
  protected:
  explicit HafHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_location_5fcommon_2eproto);
    return ::descriptor_table_location_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kGnssStampFieldNumber = 4,
    kSeqFieldNumber = 1,
  };
  // string frame_id = 2;
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_frame_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_frame_id(
      std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .location.HafTime timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::location::HafTime& timestamp() const;
  ::location::HafTime* release_timestamp();
  ::location::HafTime* mutable_timestamp();
  void set_allocated_timestamp(::location::HafTime* timestamp);
  private:
  const ::location::HafTime& _internal_timestamp() const;
  ::location::HafTime* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::location::HafTime* timestamp);
  ::location::HafTime* unsafe_arena_release_timestamp();

  // .location.HafTime gnss_stamp = 4;
  bool has_gnss_stamp() const;
  private:
  bool _internal_has_gnss_stamp() const;
  public:
  void clear_gnss_stamp();
  const ::location::HafTime& gnss_stamp() const;
  ::location::HafTime* release_gnss_stamp();
  ::location::HafTime* mutable_gnss_stamp();
  void set_allocated_gnss_stamp(::location::HafTime* gnss_stamp);
  private:
  const ::location::HafTime& _internal_gnss_stamp() const;
  ::location::HafTime* _internal_mutable_gnss_stamp();
  public:
  void unsafe_arena_set_allocated_gnss_stamp(
      ::location::HafTime* gnss_stamp);
  ::location::HafTime* unsafe_arena_release_gnss_stamp();

  // uint32 seq = 1;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:location.HafHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::location::HafTime* timestamp_;
  ::location::HafTime* gnss_stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_location_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Point3d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:location.Point3d) */ {
 public:
  inline Point3d() : Point3d(nullptr) {};
  virtual ~Point3d();

  Point3d(const Point3d& from);
  Point3d(Point3d&& from) noexcept
    : Point3d() {
    *this = ::std::move(from);
  }

  inline Point3d& operator=(const Point3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3d& operator=(Point3d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3d* internal_default_instance() {
    return reinterpret_cast<const Point3d*>(
               &_Point3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Point3d& a, Point3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3d* New() const final {
    return CreateMaybeMessage<Point3d>(nullptr);
  }

  Point3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3d& from);
  void MergeFrom(const Point3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "location.Point3d";
  }
  protected:
  explicit Point3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_location_5fcommon_2eproto);
    return ::descriptor_table_location_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:location.Point3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_location_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Point3f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:location.Point3f) */ {
 public:
  inline Point3f() : Point3f(nullptr) {};
  virtual ~Point3f();

  Point3f(const Point3f& from);
  Point3f(Point3f&& from) noexcept
    : Point3f() {
    *this = ::std::move(from);
  }

  inline Point3f& operator=(const Point3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3f& operator=(Point3f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3f* internal_default_instance() {
    return reinterpret_cast<const Point3f*>(
               &_Point3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Point3f& a, Point3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3f* New() const final {
    return CreateMaybeMessage<Point3f>(nullptr);
  }

  Point3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3f& from);
  void MergeFrom(const Point3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "location.Point3f";
  }
  protected:
  explicit Point3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_location_5fcommon_2eproto);
    return ::descriptor_table_location_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:location.Point3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_location_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class HafQuaternion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:location.HafQuaternion) */ {
 public:
  inline HafQuaternion() : HafQuaternion(nullptr) {};
  virtual ~HafQuaternion();

  HafQuaternion(const HafQuaternion& from);
  HafQuaternion(HafQuaternion&& from) noexcept
    : HafQuaternion() {
    *this = ::std::move(from);
  }

  inline HafQuaternion& operator=(const HafQuaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline HafQuaternion& operator=(HafQuaternion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HafQuaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HafQuaternion* internal_default_instance() {
    return reinterpret_cast<const HafQuaternion*>(
               &_HafQuaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HafQuaternion& a, HafQuaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(HafQuaternion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HafQuaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HafQuaternion* New() const final {
    return CreateMaybeMessage<HafQuaternion>(nullptr);
  }

  HafQuaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HafQuaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HafQuaternion& from);
  void MergeFrom(const HafQuaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HafQuaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "location.HafQuaternion";
  }
  protected:
  explicit HafQuaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_location_5fcommon_2eproto);
    return ::descriptor_table_location_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double w = 4;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:location.HafQuaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_location_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HafTime

// uint32 sec = 1;
inline void HafTime::clear_sec() {
  sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafTime::_internal_sec() const {
  return sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafTime::sec() const {
  // @@protoc_insertion_point(field_get:location.HafTime.sec)
  return _internal_sec();
}
inline void HafTime::_internal_set_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sec_ = value;
}
inline void HafTime::set_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:location.HafTime.sec)
}

// uint32 nsec = 2;
inline void HafTime::clear_nsec() {
  nsec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafTime::_internal_nsec() const {
  return nsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafTime::nsec() const {
  // @@protoc_insertion_point(field_get:location.HafTime.nsec)
  return _internal_nsec();
}
inline void HafTime::_internal_set_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nsec_ = value;
}
inline void HafTime::set_nsec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nsec(value);
  // @@protoc_insertion_point(field_set:location.HafTime.nsec)
}

// -------------------------------------------------------------------

// HafHeader

// uint32 seq = 1;
inline void HafHeader::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafHeader::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HafHeader::seq() const {
  // @@protoc_insertion_point(field_get:location.HafHeader.seq)
  return _internal_seq();
}
inline void HafHeader::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
}
inline void HafHeader::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:location.HafHeader.seq)
}

// string frame_id = 2;
inline void HafHeader::clear_frame_id() {
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HafHeader::frame_id() const {
  // @@protoc_insertion_point(field_get:location.HafHeader.frame_id)
  return _internal_frame_id();
}
inline void HafHeader::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:location.HafHeader.frame_id)
}
inline std::string* HafHeader::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:location.HafHeader.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& HafHeader::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void HafHeader::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HafHeader::set_frame_id(std::string&& value) {
  
  frame_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:location.HafHeader.frame_id)
}
inline void HafHeader::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:location.HafHeader.frame_id)
}
inline void HafHeader::set_frame_id(const char* value,
    size_t size) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:location.HafHeader.frame_id)
}
inline std::string* HafHeader::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HafHeader::release_frame_id() {
  // @@protoc_insertion_point(field_release:location.HafHeader.frame_id)
  return frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HafHeader::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:location.HafHeader.frame_id)
}
inline std::string* HafHeader::unsafe_arena_release_frame_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:location.HafHeader.frame_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return frame_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HafHeader::unsafe_arena_set_allocated_frame_id(
    std::string* frame_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      frame_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafHeader.frame_id)
}

// .location.HafTime timestamp = 3;
inline bool HafHeader::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool HafHeader::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void HafHeader::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
inline const ::location::HafTime& HafHeader::_internal_timestamp() const {
  const ::location::HafTime* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::location::HafTime*>(
      &::location::_HafTime_default_instance_);
}
inline const ::location::HafTime& HafHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:location.HafHeader.timestamp)
  return _internal_timestamp();
}
inline void HafHeader::unsafe_arena_set_allocated_timestamp(
    ::location::HafTime* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafHeader.timestamp)
}
inline ::location::HafTime* HafHeader::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::location::HafTime* HafHeader::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:location.HafHeader.timestamp)
  
  ::location::HafTime* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::location::HafTime* HafHeader::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::HafTime>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::location::HafTime* HafHeader::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:location.HafHeader.timestamp)
  return _internal_mutable_timestamp();
}
inline void HafHeader::set_allocated_timestamp(::location::HafTime* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete timestamp_;
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timestamp);
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:location.HafHeader.timestamp)
}

// .location.HafTime gnss_stamp = 4;
inline bool HafHeader::_internal_has_gnss_stamp() const {
  return this != internal_default_instance() && gnss_stamp_ != nullptr;
}
inline bool HafHeader::has_gnss_stamp() const {
  return _internal_has_gnss_stamp();
}
inline void HafHeader::clear_gnss_stamp() {
  if (GetArena() == nullptr && gnss_stamp_ != nullptr) {
    delete gnss_stamp_;
  }
  gnss_stamp_ = nullptr;
}
inline const ::location::HafTime& HafHeader::_internal_gnss_stamp() const {
  const ::location::HafTime* p = gnss_stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::location::HafTime*>(
      &::location::_HafTime_default_instance_);
}
inline const ::location::HafTime& HafHeader::gnss_stamp() const {
  // @@protoc_insertion_point(field_get:location.HafHeader.gnss_stamp)
  return _internal_gnss_stamp();
}
inline void HafHeader::unsafe_arena_set_allocated_gnss_stamp(
    ::location::HafTime* gnss_stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gnss_stamp_);
  }
  gnss_stamp_ = gnss_stamp;
  if (gnss_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.HafHeader.gnss_stamp)
}
inline ::location::HafTime* HafHeader::release_gnss_stamp() {
  auto temp = unsafe_arena_release_gnss_stamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::location::HafTime* HafHeader::unsafe_arena_release_gnss_stamp() {
  // @@protoc_insertion_point(field_release:location.HafHeader.gnss_stamp)
  
  ::location::HafTime* temp = gnss_stamp_;
  gnss_stamp_ = nullptr;
  return temp;
}
inline ::location::HafTime* HafHeader::_internal_mutable_gnss_stamp() {
  
  if (gnss_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::HafTime>(GetArena());
    gnss_stamp_ = p;
  }
  return gnss_stamp_;
}
inline ::location::HafTime* HafHeader::mutable_gnss_stamp() {
  // @@protoc_insertion_point(field_mutable:location.HafHeader.gnss_stamp)
  return _internal_mutable_gnss_stamp();
}
inline void HafHeader::set_allocated_gnss_stamp(::location::HafTime* gnss_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gnss_stamp_;
  }
  if (gnss_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gnss_stamp);
    if (message_arena != submessage_arena) {
      gnss_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss_stamp, submessage_arena);
    }
    
  } else {
    
  }
  gnss_stamp_ = gnss_stamp;
  // @@protoc_insertion_point(field_set_allocated:location.HafHeader.gnss_stamp)
}

// -------------------------------------------------------------------

// Point3d

// double x = 1;
inline void Point3d::clear_x() {
  x_ = 0;
}
inline double Point3d::_internal_x() const {
  return x_;
}
inline double Point3d::x() const {
  // @@protoc_insertion_point(field_get:location.Point3d.x)
  return _internal_x();
}
inline void Point3d::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point3d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:location.Point3d.x)
}

// double y = 2;
inline void Point3d::clear_y() {
  y_ = 0;
}
inline double Point3d::_internal_y() const {
  return y_;
}
inline double Point3d::y() const {
  // @@protoc_insertion_point(field_get:location.Point3d.y)
  return _internal_y();
}
inline void Point3d::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point3d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:location.Point3d.y)
}

// double z = 3;
inline void Point3d::clear_z() {
  z_ = 0;
}
inline double Point3d::_internal_z() const {
  return z_;
}
inline double Point3d::z() const {
  // @@protoc_insertion_point(field_get:location.Point3d.z)
  return _internal_z();
}
inline void Point3d::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Point3d::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:location.Point3d.z)
}

// -------------------------------------------------------------------

// Point3f

// float x = 1;
inline void Point3f::clear_x() {
  x_ = 0;
}
inline float Point3f::_internal_x() const {
  return x_;
}
inline float Point3f::x() const {
  // @@protoc_insertion_point(field_get:location.Point3f.x)
  return _internal_x();
}
inline void Point3f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:location.Point3f.x)
}

// float y = 2;
inline void Point3f::clear_y() {
  y_ = 0;
}
inline float Point3f::_internal_y() const {
  return y_;
}
inline float Point3f::y() const {
  // @@protoc_insertion_point(field_get:location.Point3f.y)
  return _internal_y();
}
inline void Point3f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:location.Point3f.y)
}

// float z = 3;
inline void Point3f::clear_z() {
  z_ = 0;
}
inline float Point3f::_internal_z() const {
  return z_;
}
inline float Point3f::z() const {
  // @@protoc_insertion_point(field_get:location.Point3f.z)
  return _internal_z();
}
inline void Point3f::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Point3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:location.Point3f.z)
}

// -------------------------------------------------------------------

// HafQuaternion

// double x = 1;
inline void HafQuaternion::clear_x() {
  x_ = 0;
}
inline double HafQuaternion::_internal_x() const {
  return x_;
}
inline double HafQuaternion::x() const {
  // @@protoc_insertion_point(field_get:location.HafQuaternion.x)
  return _internal_x();
}
inline void HafQuaternion::_internal_set_x(double value) {
  
  x_ = value;
}
inline void HafQuaternion::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:location.HafQuaternion.x)
}

// double y = 2;
inline void HafQuaternion::clear_y() {
  y_ = 0;
}
inline double HafQuaternion::_internal_y() const {
  return y_;
}
inline double HafQuaternion::y() const {
  // @@protoc_insertion_point(field_get:location.HafQuaternion.y)
  return _internal_y();
}
inline void HafQuaternion::_internal_set_y(double value) {
  
  y_ = value;
}
inline void HafQuaternion::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:location.HafQuaternion.y)
}

// double z = 3;
inline void HafQuaternion::clear_z() {
  z_ = 0;
}
inline double HafQuaternion::_internal_z() const {
  return z_;
}
inline double HafQuaternion::z() const {
  // @@protoc_insertion_point(field_get:location.HafQuaternion.z)
  return _internal_z();
}
inline void HafQuaternion::_internal_set_z(double value) {
  
  z_ = value;
}
inline void HafQuaternion::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:location.HafQuaternion.z)
}

// double w = 4;
inline void HafQuaternion::clear_w() {
  w_ = 0;
}
inline double HafQuaternion::_internal_w() const {
  return w_;
}
inline double HafQuaternion::w() const {
  // @@protoc_insertion_point(field_get:location.HafQuaternion.w)
  return _internal_w();
}
inline void HafQuaternion::_internal_set_w(double value) {
  
  w_ = value;
}
inline void HafQuaternion::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:location.HafQuaternion.w)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace location

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_location_5fcommon_2eproto
