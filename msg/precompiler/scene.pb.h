// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scene_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scene_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scene_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scene_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_2eproto;
namespace perception {
namespace common {
class Scene;
class SceneDefaultTypeInternal;
extern SceneDefaultTypeInternal _Scene_default_instance_;
}  // namespace common
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::common::Scene* Arena::CreateMaybeMessage<::perception::common::Scene>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {
namespace common {

enum WeatherType : int {
  WEATHER_NORMAL = 0,
  WEATHER_NORMAL2 = 1,
  WEATHER_RAINY = 2,
  WEATHER_SNOWY = 3,
  WEATHER_HEAVYRAIN = 4,
  WEATHER_OTHER = 5,
  WeatherType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WeatherType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WeatherType_IsValid(int value);
constexpr WeatherType WeatherType_MIN = WEATHER_NORMAL;
constexpr WeatherType WeatherType_MAX = WEATHER_OTHER;
constexpr int WeatherType_ARRAYSIZE = WeatherType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeatherType_descriptor();
template<typename T>
inline const std::string& WeatherType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WeatherType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WeatherType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WeatherType_descriptor(), enum_t_value);
}
inline bool WeatherType_Parse(
    const std::string& name, WeatherType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WeatherType>(
    WeatherType_descriptor(), name, value);
}
enum SceneType : int {
  SCENE_HIGHWAY = 0,
  SCENE_URBAN = 1,
  SCENE_RURAL = 2,
  SCENE_TUNNEL = 3,
  SCENE_OTHER = 5,
  SCENE_CHARGESTATION = 4,
  SceneType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SceneType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SceneType_IsValid(int value);
constexpr SceneType SceneType_MIN = SCENE_HIGHWAY;
constexpr SceneType SceneType_MAX = SCENE_OTHER;
constexpr int SceneType_ARRAYSIZE = SceneType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SceneType_descriptor();
template<typename T>
inline const std::string& SceneType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SceneType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SceneType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SceneType_descriptor(), enum_t_value);
}
inline bool SceneType_Parse(
    const std::string& name, SceneType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SceneType>(
    SceneType_descriptor(), name, value);
}
enum TimeType : int {
  TIME_DAY = 0,
  TIME_NIGHT = 1,
  TIME_OTHER = 2,
  TimeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TimeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TimeType_IsValid(int value);
constexpr TimeType TimeType_MIN = TIME_DAY;
constexpr TimeType TimeType_MAX = TIME_OTHER;
constexpr int TimeType_ARRAYSIZE = TimeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeType_descriptor();
template<typename T>
inline const std::string& TimeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimeType_descriptor(), enum_t_value);
}
inline bool TimeType_Parse(
    const std::string& name, TimeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimeType>(
    TimeType_descriptor(), name, value);
}
enum LightType : int {
  LIGHT_NATRUALLIGHT = 0,
  LIGHT_LAMPLIGHT = 1,
  LIGHT_HARDLIGHT = 2,
  LIGHT_LOWSUN = 3,
  LIGHT_DARK = 4,
  LIGHT_OTHER = 5,
  LightType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LightType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LightType_IsValid(int value);
constexpr LightType LightType_MIN = LIGHT_NATRUALLIGHT;
constexpr LightType LightType_MAX = LIGHT_OTHER;
constexpr int LightType_ARRAYSIZE = LightType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightType_descriptor();
template<typename T>
inline const std::string& LightType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LightType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LightType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LightType_descriptor(), enum_t_value);
}
inline bool LightType_Parse(
    const std::string& name, LightType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LightType>(
    LightType_descriptor(), name, value);
}
enum WorkConditionType : int {
  WORK_CONDITION_WEATHER = 0,
  WORK_CONDITION_LIGHT = 1,
  WORK_CONDITION_SCENE = 2,
  WORK_CONDITION_TIME = 3,
  WorkConditionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WorkConditionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WorkConditionType_IsValid(int value);
constexpr WorkConditionType WorkConditionType_MIN = WORK_CONDITION_WEATHER;
constexpr WorkConditionType WorkConditionType_MAX = WORK_CONDITION_TIME;
constexpr int WorkConditionType_ARRAYSIZE = WorkConditionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkConditionType_descriptor();
template<typename T>
inline const std::string& WorkConditionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkConditionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkConditionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WorkConditionType_descriptor(), enum_t_value);
}
inline bool WorkConditionType_Parse(
    const std::string& name, WorkConditionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WorkConditionType>(
    WorkConditionType_descriptor(), name, value);
}
// ===================================================================

class Scene PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.common.Scene) */ {
 public:
  inline Scene() : Scene(nullptr) {};
  virtual ~Scene();

  Scene(const Scene& from);
  Scene(Scene&& from) noexcept
    : Scene() {
    *this = ::std::move(from);
  }

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene& operator=(Scene&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
               &_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scene& a, Scene& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scene* New() const final {
    return CreateMaybeMessage<Scene>(nullptr);
  }

  Scene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.common.Scene";
  }
  protected:
  explicit Scene(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_2eproto);
    return ::descriptor_table_scene_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perception.common.Scene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Scene

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace perception

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perception::common::WeatherType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::common::WeatherType>() {
  return ::perception::common::WeatherType_descriptor();
}
template <> struct is_proto_enum< ::perception::common::SceneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::common::SceneType>() {
  return ::perception::common::SceneType_descriptor();
}
template <> struct is_proto_enum< ::perception::common::TimeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::common::TimeType>() {
  return ::perception::common::TimeType_descriptor();
}
template <> struct is_proto_enum< ::perception::common::LightType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::common::LightType>() {
  return ::perception::common::LightType_descriptor();
}
template <> struct is_proto_enum< ::perception::common::WorkConditionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::common::WorkConditionType>() {
  return ::perception::common::WorkConditionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scene_2eproto
