// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apa_odometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_apa_5fodometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_apa_5fodometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_apa_5fodometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_apa_5fodometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apa_5fodometry_2eproto;
namespace apa {
class ApaOdometry;
class ApaOdometryDefaultTypeInternal;
extern ApaOdometryDefaultTypeInternal _ApaOdometry_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class PoseList;
class PoseListDefaultTypeInternal;
extern PoseListDefaultTypeInternal _PoseList_default_instance_;
}  // namespace apa
PROTOBUF_NAMESPACE_OPEN
template<> ::apa::ApaOdometry* Arena::CreateMaybeMessage<::apa::ApaOdometry>(Arena*);
template<> ::apa::Pose* Arena::CreateMaybeMessage<::apa::Pose>(Arena*);
template<> ::apa::PoseList* Arena::CreateMaybeMessage<::apa::PoseList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apa {

// ===================================================================

class Pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apa.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {};
  virtual ~Pose();

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apa.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apa_5fodometry_2eproto);
    return ::descriptor_table_apa_5fodometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 2,
    kTimestampUsFieldNumber = 1,
  };
  // .perception.common.Point3f pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::perception::common::Point3f& pose() const;
  ::perception::common::Point3f* release_pose();
  ::perception::common::Point3f* mutable_pose();
  void set_allocated_pose(::perception::common::Point3f* pose);
  private:
  const ::perception::common::Point3f& _internal_pose() const;
  ::perception::common::Point3f* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::perception::common::Point3f* pose);
  ::perception::common::Point3f* unsafe_arena_release_pose();

  // uint64 timestamp_us = 1;
  void clear_timestamp_us();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_us() const;
  void set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_us() const;
  void _internal_set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:apa.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::Point3f* pose_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_us_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apa_5fodometry_2eproto;
};
// -------------------------------------------------------------------

class PoseList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apa.PoseList) */ {
 public:
  inline PoseList() : PoseList(nullptr) {};
  virtual ~PoseList();

  PoseList(const PoseList& from);
  PoseList(PoseList&& from) noexcept
    : PoseList() {
    *this = ::std::move(from);
  }

  inline PoseList& operator=(const PoseList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseList& operator=(PoseList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseList* internal_default_instance() {
    return reinterpret_cast<const PoseList*>(
               &_PoseList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PoseList& a, PoseList& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseList* New() const final {
    return CreateMaybeMessage<PoseList>(nullptr);
  }

  PoseList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseList& from);
  void MergeFrom(const PoseList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apa.PoseList";
  }
  protected:
  explicit PoseList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apa_5fodometry_2eproto);
    return ::descriptor_table_apa_5fodometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseListFieldNumber = 1,
  };
  // repeated .apa.Pose pose_list = 1;
  int pose_list_size() const;
  private:
  int _internal_pose_list_size() const;
  public:
  void clear_pose_list();
  ::apa::Pose* mutable_pose_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apa::Pose >*
      mutable_pose_list();
  private:
  const ::apa::Pose& _internal_pose_list(int index) const;
  ::apa::Pose* _internal_add_pose_list();
  public:
  const ::apa::Pose& pose_list(int index) const;
  ::apa::Pose* add_pose_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apa::Pose >&
      pose_list() const;

  // @@protoc_insertion_point(class_scope:apa.PoseList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apa::Pose > pose_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apa_5fodometry_2eproto;
};
// -------------------------------------------------------------------

class ApaOdometry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apa.ApaOdometry) */ {
 public:
  inline ApaOdometry() : ApaOdometry(nullptr) {};
  virtual ~ApaOdometry();

  ApaOdometry(const ApaOdometry& from);
  ApaOdometry(ApaOdometry&& from) noexcept
    : ApaOdometry() {
    *this = ::std::move(from);
  }

  inline ApaOdometry& operator=(const ApaOdometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApaOdometry& operator=(ApaOdometry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApaOdometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApaOdometry* internal_default_instance() {
    return reinterpret_cast<const ApaOdometry*>(
               &_ApaOdometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ApaOdometry& a, ApaOdometry& b) {
    a.Swap(&b);
  }
  inline void Swap(ApaOdometry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApaOdometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApaOdometry* New() const final {
    return CreateMaybeMessage<ApaOdometry>(nullptr);
  }

  ApaOdometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApaOdometry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApaOdometry& from);
  void MergeFrom(const ApaOdometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApaOdometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apa.ApaOdometry";
  }
  protected:
  explicit ApaOdometry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apa_5fodometry_2eproto);
    return ::descriptor_table_apa_5fodometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentPoseFieldNumber = 3,
    kHistoryPoseFieldNumber = 4,
    kTimestampUsFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kVelocityFieldNumber = 5,
    kDistanceFieldNumber = 6,
  };
  // .apa.Pose current_pose = 3;
  bool has_current_pose() const;
  private:
  bool _internal_has_current_pose() const;
  public:
  void clear_current_pose();
  const ::apa::Pose& current_pose() const;
  ::apa::Pose* release_current_pose();
  ::apa::Pose* mutable_current_pose();
  void set_allocated_current_pose(::apa::Pose* current_pose);
  private:
  const ::apa::Pose& _internal_current_pose() const;
  ::apa::Pose* _internal_mutable_current_pose();
  public:
  void unsafe_arena_set_allocated_current_pose(
      ::apa::Pose* current_pose);
  ::apa::Pose* unsafe_arena_release_current_pose();

  // .apa.PoseList history_pose = 4;
  bool has_history_pose() const;
  private:
  bool _internal_has_history_pose() const;
  public:
  void clear_history_pose();
  const ::apa::PoseList& history_pose() const;
  ::apa::PoseList* release_history_pose();
  ::apa::PoseList* mutable_history_pose();
  void set_allocated_history_pose(::apa::PoseList* history_pose);
  private:
  const ::apa::PoseList& _internal_history_pose() const;
  ::apa::PoseList* _internal_mutable_history_pose();
  public:
  void unsafe_arena_set_allocated_history_pose(
      ::apa::PoseList* history_pose);
  ::apa::PoseList* unsafe_arena_release_history_pose();

  // uint64 timestamp_us = 1;
  void clear_timestamp_us();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_us() const;
  void set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_us() const;
  void _internal_set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 frame_id = 2;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float velocity = 5;
  void clear_velocity();
  float velocity() const;
  void set_velocity(float value);
  private:
  float _internal_velocity() const;
  void _internal_set_velocity(float value);
  public:

  // float distance = 6;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:apa.ApaOdometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::apa::Pose* current_pose_;
  ::apa::PoseList* history_pose_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_us_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  float velocity_;
  float distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apa_5fodometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pose

// uint64 timestamp_us = 1;
inline void Pose::clear_timestamp_us() {
  timestamp_us_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pose::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pose::timestamp_us() const {
  // @@protoc_insertion_point(field_get:apa.Pose.timestamp_us)
  return _internal_timestamp_us();
}
inline void Pose::_internal_set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_us_ = value;
}
inline void Pose::set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:apa.Pose.timestamp_us)
}

// .perception.common.Point3f pose = 2;
inline bool Pose::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Pose::has_pose() const {
  return _internal_has_pose();
}
inline const ::perception::common::Point3f& Pose::_internal_pose() const {
  const ::perception::common::Point3f* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3f*>(
      &::perception::common::_Point3f_default_instance_);
}
inline const ::perception::common::Point3f& Pose::pose() const {
  // @@protoc_insertion_point(field_get:apa.Pose.pose)
  return _internal_pose();
}
inline void Pose::unsafe_arena_set_allocated_pose(
    ::perception::common::Point3f* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apa.Pose.pose)
}
inline ::perception::common::Point3f* Pose::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3f* Pose::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:apa.Pose.pose)
  
  ::perception::common::Point3f* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::perception::common::Point3f* Pose::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3f>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::perception::common::Point3f* Pose::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:apa.Pose.pose)
  return _internal_mutable_pose();
}
inline void Pose::set_allocated_pose(::perception::common::Point3f* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose)->GetArena();
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:apa.Pose.pose)
}

// -------------------------------------------------------------------

// PoseList

// repeated .apa.Pose pose_list = 1;
inline int PoseList::_internal_pose_list_size() const {
  return pose_list_.size();
}
inline int PoseList::pose_list_size() const {
  return _internal_pose_list_size();
}
inline void PoseList::clear_pose_list() {
  pose_list_.Clear();
}
inline ::apa::Pose* PoseList::mutable_pose_list(int index) {
  // @@protoc_insertion_point(field_mutable:apa.PoseList.pose_list)
  return pose_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apa::Pose >*
PoseList::mutable_pose_list() {
  // @@protoc_insertion_point(field_mutable_list:apa.PoseList.pose_list)
  return &pose_list_;
}
inline const ::apa::Pose& PoseList::_internal_pose_list(int index) const {
  return pose_list_.Get(index);
}
inline const ::apa::Pose& PoseList::pose_list(int index) const {
  // @@protoc_insertion_point(field_get:apa.PoseList.pose_list)
  return _internal_pose_list(index);
}
inline ::apa::Pose* PoseList::_internal_add_pose_list() {
  return pose_list_.Add();
}
inline ::apa::Pose* PoseList::add_pose_list() {
  // @@protoc_insertion_point(field_add:apa.PoseList.pose_list)
  return _internal_add_pose_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apa::Pose >&
PoseList::pose_list() const {
  // @@protoc_insertion_point(field_list:apa.PoseList.pose_list)
  return pose_list_;
}

// -------------------------------------------------------------------

// ApaOdometry

// uint64 timestamp_us = 1;
inline void ApaOdometry::clear_timestamp_us() {
  timestamp_us_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApaOdometry::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApaOdometry::timestamp_us() const {
  // @@protoc_insertion_point(field_get:apa.ApaOdometry.timestamp_us)
  return _internal_timestamp_us();
}
inline void ApaOdometry::_internal_set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_us_ = value;
}
inline void ApaOdometry::set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:apa.ApaOdometry.timestamp_us)
}

// uint64 frame_id = 2;
inline void ApaOdometry::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApaOdometry::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApaOdometry::frame_id() const {
  // @@protoc_insertion_point(field_get:apa.ApaOdometry.frame_id)
  return _internal_frame_id();
}
inline void ApaOdometry::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void ApaOdometry::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:apa.ApaOdometry.frame_id)
}

// .apa.Pose current_pose = 3;
inline bool ApaOdometry::_internal_has_current_pose() const {
  return this != internal_default_instance() && current_pose_ != nullptr;
}
inline bool ApaOdometry::has_current_pose() const {
  return _internal_has_current_pose();
}
inline void ApaOdometry::clear_current_pose() {
  if (GetArena() == nullptr && current_pose_ != nullptr) {
    delete current_pose_;
  }
  current_pose_ = nullptr;
}
inline const ::apa::Pose& ApaOdometry::_internal_current_pose() const {
  const ::apa::Pose* p = current_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apa::Pose*>(
      &::apa::_Pose_default_instance_);
}
inline const ::apa::Pose& ApaOdometry::current_pose() const {
  // @@protoc_insertion_point(field_get:apa.ApaOdometry.current_pose)
  return _internal_current_pose();
}
inline void ApaOdometry::unsafe_arena_set_allocated_current_pose(
    ::apa::Pose* current_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_pose_);
  }
  current_pose_ = current_pose;
  if (current_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apa.ApaOdometry.current_pose)
}
inline ::apa::Pose* ApaOdometry::release_current_pose() {
  auto temp = unsafe_arena_release_current_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apa::Pose* ApaOdometry::unsafe_arena_release_current_pose() {
  // @@protoc_insertion_point(field_release:apa.ApaOdometry.current_pose)
  
  ::apa::Pose* temp = current_pose_;
  current_pose_ = nullptr;
  return temp;
}
inline ::apa::Pose* ApaOdometry::_internal_mutable_current_pose() {
  
  if (current_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::apa::Pose>(GetArena());
    current_pose_ = p;
  }
  return current_pose_;
}
inline ::apa::Pose* ApaOdometry::mutable_current_pose() {
  // @@protoc_insertion_point(field_mutable:apa.ApaOdometry.current_pose)
  return _internal_mutable_current_pose();
}
inline void ApaOdometry::set_allocated_current_pose(::apa::Pose* current_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete current_pose_;
  }
  if (current_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_pose);
    if (message_arena != submessage_arena) {
      current_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_pose, submessage_arena);
    }
    
  } else {
    
  }
  current_pose_ = current_pose;
  // @@protoc_insertion_point(field_set_allocated:apa.ApaOdometry.current_pose)
}

// .apa.PoseList history_pose = 4;
inline bool ApaOdometry::_internal_has_history_pose() const {
  return this != internal_default_instance() && history_pose_ != nullptr;
}
inline bool ApaOdometry::has_history_pose() const {
  return _internal_has_history_pose();
}
inline void ApaOdometry::clear_history_pose() {
  if (GetArena() == nullptr && history_pose_ != nullptr) {
    delete history_pose_;
  }
  history_pose_ = nullptr;
}
inline const ::apa::PoseList& ApaOdometry::_internal_history_pose() const {
  const ::apa::PoseList* p = history_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apa::PoseList*>(
      &::apa::_PoseList_default_instance_);
}
inline const ::apa::PoseList& ApaOdometry::history_pose() const {
  // @@protoc_insertion_point(field_get:apa.ApaOdometry.history_pose)
  return _internal_history_pose();
}
inline void ApaOdometry::unsafe_arena_set_allocated_history_pose(
    ::apa::PoseList* history_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(history_pose_);
  }
  history_pose_ = history_pose;
  if (history_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apa.ApaOdometry.history_pose)
}
inline ::apa::PoseList* ApaOdometry::release_history_pose() {
  auto temp = unsafe_arena_release_history_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apa::PoseList* ApaOdometry::unsafe_arena_release_history_pose() {
  // @@protoc_insertion_point(field_release:apa.ApaOdometry.history_pose)
  
  ::apa::PoseList* temp = history_pose_;
  history_pose_ = nullptr;
  return temp;
}
inline ::apa::PoseList* ApaOdometry::_internal_mutable_history_pose() {
  
  if (history_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::apa::PoseList>(GetArena());
    history_pose_ = p;
  }
  return history_pose_;
}
inline ::apa::PoseList* ApaOdometry::mutable_history_pose() {
  // @@protoc_insertion_point(field_mutable:apa.ApaOdometry.history_pose)
  return _internal_mutable_history_pose();
}
inline void ApaOdometry::set_allocated_history_pose(::apa::PoseList* history_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete history_pose_;
  }
  if (history_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(history_pose);
    if (message_arena != submessage_arena) {
      history_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, history_pose, submessage_arena);
    }
    
  } else {
    
  }
  history_pose_ = history_pose;
  // @@protoc_insertion_point(field_set_allocated:apa.ApaOdometry.history_pose)
}

// float velocity = 5;
inline void ApaOdometry::clear_velocity() {
  velocity_ = 0;
}
inline float ApaOdometry::_internal_velocity() const {
  return velocity_;
}
inline float ApaOdometry::velocity() const {
  // @@protoc_insertion_point(field_get:apa.ApaOdometry.velocity)
  return _internal_velocity();
}
inline void ApaOdometry::_internal_set_velocity(float value) {
  
  velocity_ = value;
}
inline void ApaOdometry::set_velocity(float value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:apa.ApaOdometry.velocity)
}

// float distance = 6;
inline void ApaOdometry::clear_distance() {
  distance_ = 0;
}
inline float ApaOdometry::_internal_distance() const {
  return distance_;
}
inline float ApaOdometry::distance() const {
  // @@protoc_insertion_point(field_get:apa.ApaOdometry.distance)
  return _internal_distance();
}
inline void ApaOdometry::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void ApaOdometry::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:apa.ApaOdometry.distance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace apa

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_apa_5fodometry_2eproto
