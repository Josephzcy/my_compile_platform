// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parking_gnss.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parking_5fgnss_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parking_5fgnss_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parking_5fgnss_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parking_5fgnss_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parking_5fgnss_2eproto;
namespace minieye {
namespace parking {
class AsensingGNSSData;
class AsensingGNSSDataDefaultTypeInternal;
extern AsensingGNSSDataDefaultTypeInternal _AsensingGNSSData_default_instance_;
class AsensingGNSSDatas;
class AsensingGNSSDatasDefaultTypeInternal;
extern AsensingGNSSDatasDefaultTypeInternal _AsensingGNSSDatas_default_instance_;
}  // namespace parking
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::parking::AsensingGNSSData* Arena::CreateMaybeMessage<::minieye::parking::AsensingGNSSData>(Arena*);
template<> ::minieye::parking::AsensingGNSSDatas* Arena::CreateMaybeMessage<::minieye::parking::AsensingGNSSDatas>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {
namespace parking {

// ===================================================================

class AsensingGNSSData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.AsensingGNSSData) */ {
 public:
  inline AsensingGNSSData() : AsensingGNSSData(nullptr) {};
  virtual ~AsensingGNSSData();

  AsensingGNSSData(const AsensingGNSSData& from);
  AsensingGNSSData(AsensingGNSSData&& from) noexcept
    : AsensingGNSSData() {
    *this = ::std::move(from);
  }

  inline AsensingGNSSData& operator=(const AsensingGNSSData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsensingGNSSData& operator=(AsensingGNSSData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsensingGNSSData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsensingGNSSData* internal_default_instance() {
    return reinterpret_cast<const AsensingGNSSData*>(
               &_AsensingGNSSData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AsensingGNSSData& a, AsensingGNSSData& b) {
    a.Swap(&b);
  }
  inline void Swap(AsensingGNSSData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AsensingGNSSData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsensingGNSSData* New() const final {
    return CreateMaybeMessage<AsensingGNSSData>(nullptr);
  }

  AsensingGNSSData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsensingGNSSData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsensingGNSSData& from);
  void MergeFrom(const AsensingGNSSData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsensingGNSSData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.AsensingGNSSData";
  }
  protected:
  explicit AsensingGNSSData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fgnss_2eproto);
    return ::descriptor_table_parking_5fgnss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kTickFieldNumber = 2,
    kFrameIdFieldNumber = 3,
    kPosMeasurementTimeFieldNumber = 4,
    kVelMeasurementTimeFieldNumber = 5,
    kHeadingMeasurementTimeFieldNumber = 6,
    kLatitudeFieldNumber = 7,
    kLongitudeFieldNumber = 8,
    kHeightFieldNumber = 9,
    kLatitudeStdDevFieldNumber = 10,
    kLongitudeStdDevFieldNumber = 11,
    kHeightStdDevFieldNumber = 12,
    kPositionTypeFieldNumber = 13,
    kVelocityTypeFieldNumber = 14,
    kHeadingTypeFieldNumber = 15,
    kHorizontalSpeedFieldNumber = 16,
    kTrackOverGroundFieldNumber = 17,
    kVerticalSpeedFieldNumber = 18,
    kHeadingFieldNumber = 19,
    kHeadingStdDevFieldNumber = 20,
    kNumSatsFieldNumber = 21,
  };
  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 2;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 frame_id = 3;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pos_measurement_time = 4;
  void clear_pos_measurement_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 pos_measurement_time() const;
  void set_pos_measurement_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pos_measurement_time() const;
  void _internal_set_pos_measurement_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 vel_measurement_time = 5;
  void clear_vel_measurement_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 vel_measurement_time() const;
  void set_vel_measurement_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_vel_measurement_time() const;
  void _internal_set_vel_measurement_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 heading_measurement_time = 6;
  void clear_heading_measurement_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 heading_measurement_time() const;
  void set_heading_measurement_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_heading_measurement_time() const;
  void _internal_set_heading_measurement_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double latitude = 7;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 8;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double height = 9;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // float latitude_std_dev = 10;
  void clear_latitude_std_dev();
  float latitude_std_dev() const;
  void set_latitude_std_dev(float value);
  private:
  float _internal_latitude_std_dev() const;
  void _internal_set_latitude_std_dev(float value);
  public:

  // float longitude_std_dev = 11;
  void clear_longitude_std_dev();
  float longitude_std_dev() const;
  void set_longitude_std_dev(float value);
  private:
  float _internal_longitude_std_dev() const;
  void _internal_set_longitude_std_dev(float value);
  public:

  // float height_std_dev = 12;
  void clear_height_std_dev();
  float height_std_dev() const;
  void set_height_std_dev(float value);
  private:
  float _internal_height_std_dev() const;
  void _internal_set_height_std_dev(float value);
  public:

  // uint32 position_type = 13;
  void clear_position_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 position_type() const;
  void set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position_type() const;
  void _internal_set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 velocity_type = 14;
  void clear_velocity_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 velocity_type() const;
  void set_velocity_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_velocity_type() const;
  void _internal_set_velocity_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 heading_type = 15;
  void clear_heading_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 heading_type() const;
  void set_heading_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heading_type() const;
  void _internal_set_heading_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float horizontal_speed = 16;
  void clear_horizontal_speed();
  float horizontal_speed() const;
  void set_horizontal_speed(float value);
  private:
  float _internal_horizontal_speed() const;
  void _internal_set_horizontal_speed(float value);
  public:

  // float track_over_ground = 17;
  void clear_track_over_ground();
  float track_over_ground() const;
  void set_track_over_ground(float value);
  private:
  float _internal_track_over_ground() const;
  void _internal_set_track_over_ground(float value);
  public:

  // float vertical_speed = 18;
  void clear_vertical_speed();
  float vertical_speed() const;
  void set_vertical_speed(float value);
  private:
  float _internal_vertical_speed() const;
  void _internal_set_vertical_speed(float value);
  public:

  // float heading = 19;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // float heading_std_dev = 20;
  void clear_heading_std_dev();
  float heading_std_dev() const;
  void set_heading_std_dev(float value);
  private:
  float _internal_heading_std_dev() const;
  void _internal_set_heading_std_dev(float value);
  public:

  // uint32 num_sats = 21;
  void clear_num_sats();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sats() const;
  void set_num_sats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_sats() const;
  void _internal_set_num_sats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.AsensingGNSSData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pos_measurement_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vel_measurement_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 heading_measurement_time_;
  double latitude_;
  double longitude_;
  double height_;
  float latitude_std_dev_;
  float longitude_std_dev_;
  float height_std_dev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 velocity_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heading_type_;
  float horizontal_speed_;
  float track_over_ground_;
  float vertical_speed_;
  float heading_;
  float heading_std_dev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fgnss_2eproto;
};
// -------------------------------------------------------------------

class AsensingGNSSDatas PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.AsensingGNSSDatas) */ {
 public:
  inline AsensingGNSSDatas() : AsensingGNSSDatas(nullptr) {};
  virtual ~AsensingGNSSDatas();

  AsensingGNSSDatas(const AsensingGNSSDatas& from);
  AsensingGNSSDatas(AsensingGNSSDatas&& from) noexcept
    : AsensingGNSSDatas() {
    *this = ::std::move(from);
  }

  inline AsensingGNSSDatas& operator=(const AsensingGNSSDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsensingGNSSDatas& operator=(AsensingGNSSDatas&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsensingGNSSDatas& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsensingGNSSDatas* internal_default_instance() {
    return reinterpret_cast<const AsensingGNSSDatas*>(
               &_AsensingGNSSDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AsensingGNSSDatas& a, AsensingGNSSDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(AsensingGNSSDatas* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AsensingGNSSDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsensingGNSSDatas* New() const final {
    return CreateMaybeMessage<AsensingGNSSDatas>(nullptr);
  }

  AsensingGNSSDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsensingGNSSDatas>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsensingGNSSDatas& from);
  void MergeFrom(const AsensingGNSSDatas& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsensingGNSSDatas* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.AsensingGNSSDatas";
  }
  protected:
  explicit AsensingGNSSDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fgnss_2eproto);
    return ::descriptor_table_parking_5fgnss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsensingGnssDatasFieldNumber = 1,
  };
  // repeated .minieye.parking.AsensingGNSSData asensing_gnss_datas = 1;
  int asensing_gnss_datas_size() const;
  private:
  int _internal_asensing_gnss_datas_size() const;
  public:
  void clear_asensing_gnss_datas();
  ::minieye::parking::AsensingGNSSData* mutable_asensing_gnss_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::AsensingGNSSData >*
      mutable_asensing_gnss_datas();
  private:
  const ::minieye::parking::AsensingGNSSData& _internal_asensing_gnss_datas(int index) const;
  ::minieye::parking::AsensingGNSSData* _internal_add_asensing_gnss_datas();
  public:
  const ::minieye::parking::AsensingGNSSData& asensing_gnss_datas(int index) const;
  ::minieye::parking::AsensingGNSSData* add_asensing_gnss_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::AsensingGNSSData >&
      asensing_gnss_datas() const;

  // @@protoc_insertion_point(class_scope:minieye.parking.AsensingGNSSDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::AsensingGNSSData > asensing_gnss_datas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fgnss_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AsensingGNSSData

// uint64 timestamp = 1;
inline void AsensingGNSSData::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingGNSSData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingGNSSData::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.timestamp)
  return _internal_timestamp();
}
inline void AsensingGNSSData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void AsensingGNSSData::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.timestamp)
}

// uint64 tick = 2;
inline void AsensingGNSSData::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingGNSSData::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingGNSSData::tick() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.tick)
  return _internal_tick();
}
inline void AsensingGNSSData::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void AsensingGNSSData::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.tick)
}

// uint64 frame_id = 3;
inline void AsensingGNSSData::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingGNSSData::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingGNSSData::frame_id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.frame_id)
  return _internal_frame_id();
}
inline void AsensingGNSSData::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void AsensingGNSSData::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.frame_id)
}

// uint64 pos_measurement_time = 4;
inline void AsensingGNSSData::clear_pos_measurement_time() {
  pos_measurement_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingGNSSData::_internal_pos_measurement_time() const {
  return pos_measurement_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingGNSSData::pos_measurement_time() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.pos_measurement_time)
  return _internal_pos_measurement_time();
}
inline void AsensingGNSSData::_internal_set_pos_measurement_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pos_measurement_time_ = value;
}
inline void AsensingGNSSData::set_pos_measurement_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pos_measurement_time(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.pos_measurement_time)
}

// uint64 vel_measurement_time = 5;
inline void AsensingGNSSData::clear_vel_measurement_time() {
  vel_measurement_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingGNSSData::_internal_vel_measurement_time() const {
  return vel_measurement_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingGNSSData::vel_measurement_time() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.vel_measurement_time)
  return _internal_vel_measurement_time();
}
inline void AsensingGNSSData::_internal_set_vel_measurement_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  vel_measurement_time_ = value;
}
inline void AsensingGNSSData::set_vel_measurement_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_vel_measurement_time(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.vel_measurement_time)
}

// uint64 heading_measurement_time = 6;
inline void AsensingGNSSData::clear_heading_measurement_time() {
  heading_measurement_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingGNSSData::_internal_heading_measurement_time() const {
  return heading_measurement_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AsensingGNSSData::heading_measurement_time() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.heading_measurement_time)
  return _internal_heading_measurement_time();
}
inline void AsensingGNSSData::_internal_set_heading_measurement_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  heading_measurement_time_ = value;
}
inline void AsensingGNSSData::set_heading_measurement_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_heading_measurement_time(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.heading_measurement_time)
}

// double latitude = 7;
inline void AsensingGNSSData::clear_latitude() {
  latitude_ = 0;
}
inline double AsensingGNSSData::_internal_latitude() const {
  return latitude_;
}
inline double AsensingGNSSData::latitude() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.latitude)
  return _internal_latitude();
}
inline void AsensingGNSSData::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void AsensingGNSSData::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.latitude)
}

// double longitude = 8;
inline void AsensingGNSSData::clear_longitude() {
  longitude_ = 0;
}
inline double AsensingGNSSData::_internal_longitude() const {
  return longitude_;
}
inline double AsensingGNSSData::longitude() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.longitude)
  return _internal_longitude();
}
inline void AsensingGNSSData::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void AsensingGNSSData::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.longitude)
}

// double height = 9;
inline void AsensingGNSSData::clear_height() {
  height_ = 0;
}
inline double AsensingGNSSData::_internal_height() const {
  return height_;
}
inline double AsensingGNSSData::height() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.height)
  return _internal_height();
}
inline void AsensingGNSSData::_internal_set_height(double value) {
  
  height_ = value;
}
inline void AsensingGNSSData::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.height)
}

// float latitude_std_dev = 10;
inline void AsensingGNSSData::clear_latitude_std_dev() {
  latitude_std_dev_ = 0;
}
inline float AsensingGNSSData::_internal_latitude_std_dev() const {
  return latitude_std_dev_;
}
inline float AsensingGNSSData::latitude_std_dev() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.latitude_std_dev)
  return _internal_latitude_std_dev();
}
inline void AsensingGNSSData::_internal_set_latitude_std_dev(float value) {
  
  latitude_std_dev_ = value;
}
inline void AsensingGNSSData::set_latitude_std_dev(float value) {
  _internal_set_latitude_std_dev(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.latitude_std_dev)
}

// float longitude_std_dev = 11;
inline void AsensingGNSSData::clear_longitude_std_dev() {
  longitude_std_dev_ = 0;
}
inline float AsensingGNSSData::_internal_longitude_std_dev() const {
  return longitude_std_dev_;
}
inline float AsensingGNSSData::longitude_std_dev() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.longitude_std_dev)
  return _internal_longitude_std_dev();
}
inline void AsensingGNSSData::_internal_set_longitude_std_dev(float value) {
  
  longitude_std_dev_ = value;
}
inline void AsensingGNSSData::set_longitude_std_dev(float value) {
  _internal_set_longitude_std_dev(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.longitude_std_dev)
}

// float height_std_dev = 12;
inline void AsensingGNSSData::clear_height_std_dev() {
  height_std_dev_ = 0;
}
inline float AsensingGNSSData::_internal_height_std_dev() const {
  return height_std_dev_;
}
inline float AsensingGNSSData::height_std_dev() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.height_std_dev)
  return _internal_height_std_dev();
}
inline void AsensingGNSSData::_internal_set_height_std_dev(float value) {
  
  height_std_dev_ = value;
}
inline void AsensingGNSSData::set_height_std_dev(float value) {
  _internal_set_height_std_dev(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.height_std_dev)
}

// uint32 position_type = 13;
inline void AsensingGNSSData::clear_position_type() {
  position_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingGNSSData::_internal_position_type() const {
  return position_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingGNSSData::position_type() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.position_type)
  return _internal_position_type();
}
inline void AsensingGNSSData::_internal_set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  position_type_ = value;
}
inline void AsensingGNSSData::set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position_type(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.position_type)
}

// uint32 velocity_type = 14;
inline void AsensingGNSSData::clear_velocity_type() {
  velocity_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingGNSSData::_internal_velocity_type() const {
  return velocity_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingGNSSData::velocity_type() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.velocity_type)
  return _internal_velocity_type();
}
inline void AsensingGNSSData::_internal_set_velocity_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  velocity_type_ = value;
}
inline void AsensingGNSSData::set_velocity_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_velocity_type(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.velocity_type)
}

// uint32 heading_type = 15;
inline void AsensingGNSSData::clear_heading_type() {
  heading_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingGNSSData::_internal_heading_type() const {
  return heading_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingGNSSData::heading_type() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.heading_type)
  return _internal_heading_type();
}
inline void AsensingGNSSData::_internal_set_heading_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  heading_type_ = value;
}
inline void AsensingGNSSData::set_heading_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heading_type(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.heading_type)
}

// float horizontal_speed = 16;
inline void AsensingGNSSData::clear_horizontal_speed() {
  horizontal_speed_ = 0;
}
inline float AsensingGNSSData::_internal_horizontal_speed() const {
  return horizontal_speed_;
}
inline float AsensingGNSSData::horizontal_speed() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.horizontal_speed)
  return _internal_horizontal_speed();
}
inline void AsensingGNSSData::_internal_set_horizontal_speed(float value) {
  
  horizontal_speed_ = value;
}
inline void AsensingGNSSData::set_horizontal_speed(float value) {
  _internal_set_horizontal_speed(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.horizontal_speed)
}

// float track_over_ground = 17;
inline void AsensingGNSSData::clear_track_over_ground() {
  track_over_ground_ = 0;
}
inline float AsensingGNSSData::_internal_track_over_ground() const {
  return track_over_ground_;
}
inline float AsensingGNSSData::track_over_ground() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.track_over_ground)
  return _internal_track_over_ground();
}
inline void AsensingGNSSData::_internal_set_track_over_ground(float value) {
  
  track_over_ground_ = value;
}
inline void AsensingGNSSData::set_track_over_ground(float value) {
  _internal_set_track_over_ground(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.track_over_ground)
}

// float vertical_speed = 18;
inline void AsensingGNSSData::clear_vertical_speed() {
  vertical_speed_ = 0;
}
inline float AsensingGNSSData::_internal_vertical_speed() const {
  return vertical_speed_;
}
inline float AsensingGNSSData::vertical_speed() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.vertical_speed)
  return _internal_vertical_speed();
}
inline void AsensingGNSSData::_internal_set_vertical_speed(float value) {
  
  vertical_speed_ = value;
}
inline void AsensingGNSSData::set_vertical_speed(float value) {
  _internal_set_vertical_speed(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.vertical_speed)
}

// float heading = 19;
inline void AsensingGNSSData::clear_heading() {
  heading_ = 0;
}
inline float AsensingGNSSData::_internal_heading() const {
  return heading_;
}
inline float AsensingGNSSData::heading() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.heading)
  return _internal_heading();
}
inline void AsensingGNSSData::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void AsensingGNSSData::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.heading)
}

// float heading_std_dev = 20;
inline void AsensingGNSSData::clear_heading_std_dev() {
  heading_std_dev_ = 0;
}
inline float AsensingGNSSData::_internal_heading_std_dev() const {
  return heading_std_dev_;
}
inline float AsensingGNSSData::heading_std_dev() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.heading_std_dev)
  return _internal_heading_std_dev();
}
inline void AsensingGNSSData::_internal_set_heading_std_dev(float value) {
  
  heading_std_dev_ = value;
}
inline void AsensingGNSSData::set_heading_std_dev(float value) {
  _internal_set_heading_std_dev(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.heading_std_dev)
}

// uint32 num_sats = 21;
inline void AsensingGNSSData::clear_num_sats() {
  num_sats_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingGNSSData::_internal_num_sats() const {
  return num_sats_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsensingGNSSData::num_sats() const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSData.num_sats)
  return _internal_num_sats();
}
inline void AsensingGNSSData::_internal_set_num_sats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_sats_ = value;
}
inline void AsensingGNSSData::set_num_sats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_sats(value);
  // @@protoc_insertion_point(field_set:minieye.parking.AsensingGNSSData.num_sats)
}

// -------------------------------------------------------------------

// AsensingGNSSDatas

// repeated .minieye.parking.AsensingGNSSData asensing_gnss_datas = 1;
inline int AsensingGNSSDatas::_internal_asensing_gnss_datas_size() const {
  return asensing_gnss_datas_.size();
}
inline int AsensingGNSSDatas::asensing_gnss_datas_size() const {
  return _internal_asensing_gnss_datas_size();
}
inline void AsensingGNSSDatas::clear_asensing_gnss_datas() {
  asensing_gnss_datas_.Clear();
}
inline ::minieye::parking::AsensingGNSSData* AsensingGNSSDatas::mutable_asensing_gnss_datas(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.AsensingGNSSDatas.asensing_gnss_datas)
  return asensing_gnss_datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::AsensingGNSSData >*
AsensingGNSSDatas::mutable_asensing_gnss_datas() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.AsensingGNSSDatas.asensing_gnss_datas)
  return &asensing_gnss_datas_;
}
inline const ::minieye::parking::AsensingGNSSData& AsensingGNSSDatas::_internal_asensing_gnss_datas(int index) const {
  return asensing_gnss_datas_.Get(index);
}
inline const ::minieye::parking::AsensingGNSSData& AsensingGNSSDatas::asensing_gnss_datas(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.AsensingGNSSDatas.asensing_gnss_datas)
  return _internal_asensing_gnss_datas(index);
}
inline ::minieye::parking::AsensingGNSSData* AsensingGNSSDatas::_internal_add_asensing_gnss_datas() {
  return asensing_gnss_datas_.Add();
}
inline ::minieye::parking::AsensingGNSSData* AsensingGNSSDatas::add_asensing_gnss_datas() {
  // @@protoc_insertion_point(field_add:minieye.parking.AsensingGNSSDatas.asensing_gnss_datas)
  return _internal_add_asensing_gnss_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::AsensingGNSSData >&
AsensingGNSSDatas::asensing_gnss_datas() const {
  // @@protoc_insertion_point(field_list:minieye.parking.AsensingGNSSDatas.asensing_gnss_datas)
  return asensing_gnss_datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace parking
}  // namespace minieye

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parking_5fgnss_2eproto
