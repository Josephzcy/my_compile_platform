// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calib_param.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_calib_5fparam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_calib_5fparam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "camera.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_calib_5fparam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_calib_5fparam_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_calib_5fparam_2eproto;
namespace minieye {
class CalibParam;
class CalibParamDefaultTypeInternal;
extern CalibParamDefaultTypeInternal _CalibParam_default_instance_;
class CalibReq;
class CalibReqDefaultTypeInternal;
extern CalibReqDefaultTypeInternal _CalibReq_default_instance_;
class CalibReqDetail;
class CalibReqDetailDefaultTypeInternal;
extern CalibReqDetailDefaultTypeInternal _CalibReqDetail_default_instance_;
class CalibRsp;
class CalibRspDefaultTypeInternal;
extern CalibRspDefaultTypeInternal _CalibRsp_default_instance_;
class CalibRspDetail;
class CalibRspDetailDefaultTypeInternal;
extern CalibRspDetailDefaultTypeInternal _CalibRspDetail_default_instance_;
class HomographyMatrix;
class HomographyMatrixDefaultTypeInternal;
extern HomographyMatrixDefaultTypeInternal _HomographyMatrix_default_instance_;
class PreCheckReq;
class PreCheckReqDefaultTypeInternal;
extern PreCheckReqDefaultTypeInternal _PreCheckReq_default_instance_;
class PreCheckRsp;
class PreCheckRspDefaultTypeInternal;
extern PreCheckRspDefaultTypeInternal _PreCheckRsp_default_instance_;
class VehicleParam;
class VehicleParamDefaultTypeInternal;
extern VehicleParamDefaultTypeInternal _VehicleParam_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::CalibParam* Arena::CreateMaybeMessage<::minieye::CalibParam>(Arena*);
template<> ::minieye::CalibReq* Arena::CreateMaybeMessage<::minieye::CalibReq>(Arena*);
template<> ::minieye::CalibReqDetail* Arena::CreateMaybeMessage<::minieye::CalibReqDetail>(Arena*);
template<> ::minieye::CalibRsp* Arena::CreateMaybeMessage<::minieye::CalibRsp>(Arena*);
template<> ::minieye::CalibRspDetail* Arena::CreateMaybeMessage<::minieye::CalibRspDetail>(Arena*);
template<> ::minieye::HomographyMatrix* Arena::CreateMaybeMessage<::minieye::HomographyMatrix>(Arena*);
template<> ::minieye::PreCheckReq* Arena::CreateMaybeMessage<::minieye::PreCheckReq>(Arena*);
template<> ::minieye::PreCheckRsp* Arena::CreateMaybeMessage<::minieye::PreCheckRsp>(Arena*);
template<> ::minieye::VehicleParam* Arena::CreateMaybeMessage<::minieye::VehicleParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

enum PreCheckState : int {
  kPreCheckAbnormal = 0,
  kPreCheckPass = 1,
  kPreCheckInProcess = 2,
  kPreCheckNotStart = 3,
  PreCheckState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PreCheckState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PreCheckState_IsValid(int value);
constexpr PreCheckState PreCheckState_MIN = kPreCheckAbnormal;
constexpr PreCheckState PreCheckState_MAX = kPreCheckNotStart;
constexpr int PreCheckState_ARRAYSIZE = PreCheckState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PreCheckState_descriptor();
template<typename T>
inline const std::string& PreCheckState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PreCheckState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PreCheckState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PreCheckState_descriptor(), enum_t_value);
}
inline bool PreCheckState_Parse(
    const std::string& name, PreCheckState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PreCheckState>(
    PreCheckState_descriptor(), name, value);
}
enum PrecheckErrCode : int {
  kFLDoorAjar = 0,
  kRLDoorAjar = 1,
  kFRDoorAjar = 2,
  kRRDoorAjar = 3,
  kTurnLightOn = 4,
  kHighBeamOn = 5,
  kLowBeamOn = 6,
  kTGOpen = 7,
  kHoodOpen = 8,
  kMirrorFold = 9,
  kWiperMoving = 10,
  PrecheckErrCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PrecheckErrCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PrecheckErrCode_IsValid(int value);
constexpr PrecheckErrCode PrecheckErrCode_MIN = kFLDoorAjar;
constexpr PrecheckErrCode PrecheckErrCode_MAX = kWiperMoving;
constexpr int PrecheckErrCode_ARRAYSIZE = PrecheckErrCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrecheckErrCode_descriptor();
template<typename T>
inline const std::string& PrecheckErrCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrecheckErrCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrecheckErrCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PrecheckErrCode_descriptor(), enum_t_value);
}
inline bool PrecheckErrCode_Parse(
    const std::string& name, PrecheckErrCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PrecheckErrCode>(
    PrecheckErrCode_descriptor(), name, value);
}
enum CalibResState : int {
  kCalibStart = 0,
  kNotCalib = 1,
  kCalibrated = 2,
  kCalibInProcess = 3,
  kCalibPause = 4,
  kCalibPass = 5,
  kCalibFailed = 6,
  CalibResState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CalibResState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CalibResState_IsValid(int value);
constexpr CalibResState CalibResState_MIN = kCalibStart;
constexpr CalibResState CalibResState_MAX = kCalibFailed;
constexpr int CalibResState_ARRAYSIZE = CalibResState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalibResState_descriptor();
template<typename T>
inline const std::string& CalibResState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CalibResState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CalibResState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CalibResState_descriptor(), enum_t_value);
}
inline bool CalibResState_Parse(
    const std::string& name, CalibResState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CalibResState>(
    CalibResState_descriptor(), name, value);
}
enum CalibErrCode : int {
  kCECSuccess = 0,
  kCECInProcess = 1,
  kCECImageNull = 2,
  kCECNoTargetInfo = 3,
  kCECTargetInfoErr = 4,
  kCECDetTargetFail = 5,
  kCECInterLogicErr = 6,
  kCECInvalidPitch = 7,
  kCECInvalidYaw = 8,
  kCECInvalidRoll = 9,
  kCECInvalidX = 10,
  kCECInvalidY = 11,
  kCECInvalidZ = 12,
  kCECOvertime = 13,
  kCECPersistFailed = 14,
  kCECNoDynCalibConf = 15,
  kCECDynCalibConfErr = 16,
  kCECTooManyCar = 17,
  kCECEmptyRoad = 18,
  kCECCalibStop = 19,
  kCECImuCheckFail = 20,
  kCECHighSpeed = 21,
  kCECLowSpeed = 22,
  kCECYawRateCheckFail = 23,
  kCECHighOcclusion = 24,
  kCECHighBrightness = 25,
  kCECLowBrightness = 26,
  kCECAlgo = 27,
  CalibErrCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CalibErrCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CalibErrCode_IsValid(int value);
constexpr CalibErrCode CalibErrCode_MIN = kCECSuccess;
constexpr CalibErrCode CalibErrCode_MAX = kCECAlgo;
constexpr int CalibErrCode_ARRAYSIZE = CalibErrCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalibErrCode_descriptor();
template<typename T>
inline const std::string& CalibErrCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CalibErrCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CalibErrCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CalibErrCode_descriptor(), enum_t_value);
}
inline bool CalibErrCode_Parse(
    const std::string& name, CalibErrCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CalibErrCode>(
    CalibErrCode_descriptor(), name, value);
}
enum CalibMethod : int {
  UNKNOWN = 0,
  EOL = 1,
  STATIC_LANE = 2,
  DYNAMIC_LANE = 3,
  PARAM_TO_CALIB = 4,
  CALIB_RESULT_REQ = 5,
  STOP_CALIB = 6,
  PAUSE_CALIB = 7,
  CONTINUE_CALIB = 8,
  TARGET1 = 10,
  TARGET2 = 11,
  TARGET3 = 12,
  TARGET4 = 13,
  TARGET5 = 14,
  SNA = 15,
  ONLINE_AFTERSALE = 16,
  ONLINE_AUTO = 17,
  CalibMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CalibMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CalibMethod_IsValid(int value);
constexpr CalibMethod CalibMethod_MIN = UNKNOWN;
constexpr CalibMethod CalibMethod_MAX = ONLINE_AUTO;
constexpr int CalibMethod_ARRAYSIZE = CalibMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalibMethod_descriptor();
template<typename T>
inline const std::string& CalibMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CalibMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CalibMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CalibMethod_descriptor(), enum_t_value);
}
inline bool CalibMethod_Parse(
    const std::string& name, CalibMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CalibMethod>(
    CalibMethod_descriptor(), name, value);
}
// ===================================================================

class CalibParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.CalibParam) */ {
 public:
  inline CalibParam() : CalibParam(nullptr) {};
  virtual ~CalibParam();

  CalibParam(const CalibParam& from);
  CalibParam(CalibParam&& from) noexcept
    : CalibParam() {
    *this = ::std::move(from);
  }

  inline CalibParam& operator=(const CalibParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibParam& operator=(CalibParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalibParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalibParam* internal_default_instance() {
    return reinterpret_cast<const CalibParam*>(
               &_CalibParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CalibParam& a, CalibParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalibParam* New() const final {
    return CreateMaybeMessage<CalibParam>(nullptr);
  }

  CalibParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalibParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalibParam& from);
  void MergeFrom(const CalibParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.CalibParam";
  }
  protected:
  explicit CalibParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calib_5fparam_2eproto);
    return ::descriptor_table_calib_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraPitchFieldNumber = 1,
    kCameraYawFieldNumber = 2,
    kCameraRollFieldNumber = 3,
    kCameraCuFieldNumber = 4,
    kCameraCvFieldNumber = 5,
    kCameraFovHFieldNumber = 6,
    kCameraFovWFieldNumber = 7,
    kCameraHeightFieldNumber = 8,
    kLeftDistToCameraFieldNumber = 9,
    kRightDistToCameraFieldNumber = 10,
    kFrontDistToCameraFieldNumber = 11,
    kFrontWheelCameraDistFieldNumber = 12,
    kCameraIdFieldNumber = 13,
  };
  // double camera_pitch = 1;
  void clear_camera_pitch();
  double camera_pitch() const;
  void set_camera_pitch(double value);
  private:
  double _internal_camera_pitch() const;
  void _internal_set_camera_pitch(double value);
  public:

  // double camera_yaw = 2;
  void clear_camera_yaw();
  double camera_yaw() const;
  void set_camera_yaw(double value);
  private:
  double _internal_camera_yaw() const;
  void _internal_set_camera_yaw(double value);
  public:

  // double camera_roll = 3;
  void clear_camera_roll();
  double camera_roll() const;
  void set_camera_roll(double value);
  private:
  double _internal_camera_roll() const;
  void _internal_set_camera_roll(double value);
  public:

  // double camera_cu = 4;
  void clear_camera_cu();
  double camera_cu() const;
  void set_camera_cu(double value);
  private:
  double _internal_camera_cu() const;
  void _internal_set_camera_cu(double value);
  public:

  // double camera_cv = 5;
  void clear_camera_cv();
  double camera_cv() const;
  void set_camera_cv(double value);
  private:
  double _internal_camera_cv() const;
  void _internal_set_camera_cv(double value);
  public:

  // double camera_fov_h = 6;
  void clear_camera_fov_h();
  double camera_fov_h() const;
  void set_camera_fov_h(double value);
  private:
  double _internal_camera_fov_h() const;
  void _internal_set_camera_fov_h(double value);
  public:

  // double camera_fov_w = 7;
  void clear_camera_fov_w();
  double camera_fov_w() const;
  void set_camera_fov_w(double value);
  private:
  double _internal_camera_fov_w() const;
  void _internal_set_camera_fov_w(double value);
  public:

  // double camera_height = 8;
  void clear_camera_height();
  double camera_height() const;
  void set_camera_height(double value);
  private:
  double _internal_camera_height() const;
  void _internal_set_camera_height(double value);
  public:

  // double left_dist_to_camera = 9;
  void clear_left_dist_to_camera();
  double left_dist_to_camera() const;
  void set_left_dist_to_camera(double value);
  private:
  double _internal_left_dist_to_camera() const;
  void _internal_set_left_dist_to_camera(double value);
  public:

  // double right_dist_to_camera = 10;
  void clear_right_dist_to_camera();
  double right_dist_to_camera() const;
  void set_right_dist_to_camera(double value);
  private:
  double _internal_right_dist_to_camera() const;
  void _internal_set_right_dist_to_camera(double value);
  public:

  // double front_dist_to_camera = 11;
  void clear_front_dist_to_camera();
  double front_dist_to_camera() const;
  void set_front_dist_to_camera(double value);
  private:
  double _internal_front_dist_to_camera() const;
  void _internal_set_front_dist_to_camera(double value);
  public:

  // double front_wheel_camera_dist = 12;
  void clear_front_wheel_camera_dist();
  double front_wheel_camera_dist() const;
  void set_front_wheel_camera_dist(double value);
  private:
  double _internal_front_wheel_camera_dist() const;
  void _internal_set_front_wheel_camera_dist(double value);
  public:

  // uint32 camera_id = 13;
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_camera_id() const;
  void _internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.CalibParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double camera_pitch_;
  double camera_yaw_;
  double camera_roll_;
  double camera_cu_;
  double camera_cv_;
  double camera_fov_h_;
  double camera_fov_w_;
  double camera_height_;
  double left_dist_to_camera_;
  double right_dist_to_camera_;
  double front_dist_to_camera_;
  double front_wheel_camera_dist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calib_5fparam_2eproto;
};
// -------------------------------------------------------------------

class HomographyMatrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.HomographyMatrix) */ {
 public:
  inline HomographyMatrix() : HomographyMatrix(nullptr) {};
  virtual ~HomographyMatrix();

  HomographyMatrix(const HomographyMatrix& from);
  HomographyMatrix(HomographyMatrix&& from) noexcept
    : HomographyMatrix() {
    *this = ::std::move(from);
  }

  inline HomographyMatrix& operator=(const HomographyMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline HomographyMatrix& operator=(HomographyMatrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HomographyMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HomographyMatrix* internal_default_instance() {
    return reinterpret_cast<const HomographyMatrix*>(
               &_HomographyMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HomographyMatrix& a, HomographyMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(HomographyMatrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HomographyMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HomographyMatrix* New() const final {
    return CreateMaybeMessage<HomographyMatrix>(nullptr);
  }

  HomographyMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HomographyMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HomographyMatrix& from);
  void MergeFrom(const HomographyMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HomographyMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.HomographyMatrix";
  }
  protected:
  explicit HomographyMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calib_5fparam_2eproto);
    return ::descriptor_table_calib_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrc2DstHMatrixFieldNumber = 3,
    kSrcCameraIdFieldNumber = 1,
    kDstCameraIdFieldNumber = 2,
  };
  // repeated float src2dst_h_matrix = 3;
  int src2dst_h_matrix_size() const;
  private:
  int _internal_src2dst_h_matrix_size() const;
  public:
  void clear_src2dst_h_matrix();
  private:
  float _internal_src2dst_h_matrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_src2dst_h_matrix() const;
  void _internal_add_src2dst_h_matrix(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_src2dst_h_matrix();
  public:
  float src2dst_h_matrix(int index) const;
  void set_src2dst_h_matrix(int index, float value);
  void add_src2dst_h_matrix(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      src2dst_h_matrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_src2dst_h_matrix();

  // uint32 src_camera_id = 1;
  void clear_src_camera_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_camera_id() const;
  void set_src_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_camera_id() const;
  void _internal_set_src_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dst_camera_id = 2;
  void clear_dst_camera_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_camera_id() const;
  void set_dst_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_camera_id() const;
  void _internal_set_dst_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.HomographyMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > src2dst_h_matrix_;
  mutable std::atomic<int> _src2dst_h_matrix_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_camera_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_camera_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calib_5fparam_2eproto;
};
// -------------------------------------------------------------------

class PreCheckReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.PreCheckReq) */ {
 public:
  inline PreCheckReq() : PreCheckReq(nullptr) {};
  virtual ~PreCheckReq();

  PreCheckReq(const PreCheckReq& from);
  PreCheckReq(PreCheckReq&& from) noexcept
    : PreCheckReq() {
    *this = ::std::move(from);
  }

  inline PreCheckReq& operator=(const PreCheckReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreCheckReq& operator=(PreCheckReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreCheckReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreCheckReq* internal_default_instance() {
    return reinterpret_cast<const PreCheckReq*>(
               &_PreCheckReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PreCheckReq& a, PreCheckReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PreCheckReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreCheckReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreCheckReq* New() const final {
    return CreateMaybeMessage<PreCheckReq>(nullptr);
  }

  PreCheckReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreCheckReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreCheckReq& from);
  void MergeFrom(const PreCheckReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreCheckReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.PreCheckReq";
  }
  protected:
  explicit PreCheckReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calib_5fparam_2eproto);
    return ::descriptor_table_calib_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeedCheckFieldNumber = 1,
  };
  // bool need_check = 1;
  void clear_need_check();
  bool need_check() const;
  void set_need_check(bool value);
  private:
  bool _internal_need_check() const;
  void _internal_set_need_check(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.PreCheckReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool need_check_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calib_5fparam_2eproto;
};
// -------------------------------------------------------------------

class PreCheckRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.PreCheckRsp) */ {
 public:
  inline PreCheckRsp() : PreCheckRsp(nullptr) {};
  virtual ~PreCheckRsp();

  PreCheckRsp(const PreCheckRsp& from);
  PreCheckRsp(PreCheckRsp&& from) noexcept
    : PreCheckRsp() {
    *this = ::std::move(from);
  }

  inline PreCheckRsp& operator=(const PreCheckRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreCheckRsp& operator=(PreCheckRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreCheckRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreCheckRsp* internal_default_instance() {
    return reinterpret_cast<const PreCheckRsp*>(
               &_PreCheckRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PreCheckRsp& a, PreCheckRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PreCheckRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreCheckRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreCheckRsp* New() const final {
    return CreateMaybeMessage<PreCheckRsp>(nullptr);
  }

  PreCheckRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreCheckRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreCheckRsp& from);
  void MergeFrom(const PreCheckRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreCheckRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.PreCheckRsp";
  }
  protected:
  explicit PreCheckRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calib_5fparam_2eproto);
    return ::descriptor_table_calib_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kErrCodeFieldNumber = 2,
  };
  // .minieye.PreCheckState state = 1;
  void clear_state();
  ::minieye::PreCheckState state() const;
  void set_state(::minieye::PreCheckState value);
  private:
  ::minieye::PreCheckState _internal_state() const;
  void _internal_set_state(::minieye::PreCheckState value);
  public:

  // .minieye.PrecheckErrCode err_code = 2;
  void clear_err_code();
  ::minieye::PrecheckErrCode err_code() const;
  void set_err_code(::minieye::PrecheckErrCode value);
  private:
  ::minieye::PrecheckErrCode _internal_err_code() const;
  void _internal_set_err_code(::minieye::PrecheckErrCode value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.PreCheckRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  int err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calib_5fparam_2eproto;
};
// -------------------------------------------------------------------

class VehicleParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.VehicleParam) */ {
 public:
  inline VehicleParam() : VehicleParam(nullptr) {};
  virtual ~VehicleParam();

  VehicleParam(const VehicleParam& from);
  VehicleParam(VehicleParam&& from) noexcept
    : VehicleParam() {
    *this = ::std::move(from);
  }

  inline VehicleParam& operator=(const VehicleParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleParam& operator=(VehicleParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleParam* internal_default_instance() {
    return reinterpret_cast<const VehicleParam*>(
               &_VehicleParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VehicleParam& a, VehicleParam& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleParam* New() const final {
    return CreateMaybeMessage<VehicleParam>(nullptr);
  }

  VehicleParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleParam& from);
  void MergeFrom(const VehicleParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.VehicleParam";
  }
  protected:
  explicit VehicleParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calib_5fparam_2eproto);
    return ::descriptor_table_calib_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarWidthFieldNumber = 1,
    kWheelBaseFieldNumber = 2,
    kFrontOverhangFieldNumber = 3,
    kRearOverhangFieldNumber = 4,
  };
  // double car_width = 1;
  void clear_car_width();
  double car_width() const;
  void set_car_width(double value);
  private:
  double _internal_car_width() const;
  void _internal_set_car_width(double value);
  public:

  // double wheel_base = 2;
  void clear_wheel_base();
  double wheel_base() const;
  void set_wheel_base(double value);
  private:
  double _internal_wheel_base() const;
  void _internal_set_wheel_base(double value);
  public:

  // double front_overhang = 3;
  void clear_front_overhang();
  double front_overhang() const;
  void set_front_overhang(double value);
  private:
  double _internal_front_overhang() const;
  void _internal_set_front_overhang(double value);
  public:

  // double rear_overhang = 4;
  void clear_rear_overhang();
  double rear_overhang() const;
  void set_rear_overhang(double value);
  private:
  double _internal_rear_overhang() const;
  void _internal_set_rear_overhang(double value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.VehicleParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double car_width_;
  double wheel_base_;
  double front_overhang_;
  double rear_overhang_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calib_5fparam_2eproto;
};
// -------------------------------------------------------------------

class CalibReqDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.CalibReqDetail) */ {
 public:
  inline CalibReqDetail() : CalibReqDetail(nullptr) {};
  virtual ~CalibReqDetail();

  CalibReqDetail(const CalibReqDetail& from);
  CalibReqDetail(CalibReqDetail&& from) noexcept
    : CalibReqDetail() {
    *this = ::std::move(from);
  }

  inline CalibReqDetail& operator=(const CalibReqDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibReqDetail& operator=(CalibReqDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalibReqDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalibReqDetail* internal_default_instance() {
    return reinterpret_cast<const CalibReqDetail*>(
               &_CalibReqDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CalibReqDetail& a, CalibReqDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibReqDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibReqDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalibReqDetail* New() const final {
    return CreateMaybeMessage<CalibReqDetail>(nullptr);
  }

  CalibReqDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalibReqDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalibReqDetail& from);
  void MergeFrom(const CalibReqDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibReqDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.CalibReqDetail";
  }
  protected:
  explicit CalibReqDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calib_5fparam_2eproto);
    return ::descriptor_table_calib_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDesignatedCamParamFieldNumber = 3,
    kCameraIdFieldNumber = 1,
    kCalibMethodFieldNumber = 2,
  };
  // .minieye.CameraParam designated_cam_param = 3;
  bool has_designated_cam_param() const;
  private:
  bool _internal_has_designated_cam_param() const;
  public:
  void clear_designated_cam_param();
  const ::minieye::CameraParam& designated_cam_param() const;
  ::minieye::CameraParam* release_designated_cam_param();
  ::minieye::CameraParam* mutable_designated_cam_param();
  void set_allocated_designated_cam_param(::minieye::CameraParam* designated_cam_param);
  private:
  const ::minieye::CameraParam& _internal_designated_cam_param() const;
  ::minieye::CameraParam* _internal_mutable_designated_cam_param();
  public:
  void unsafe_arena_set_allocated_designated_cam_param(
      ::minieye::CameraParam* designated_cam_param);
  ::minieye::CameraParam* unsafe_arena_release_designated_cam_param();

  // int32 camera_id = 1;
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_camera_id() const;
  void _internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 calib_method = 2;
  void clear_calib_method();
  ::PROTOBUF_NAMESPACE_ID::int32 calib_method() const;
  void set_calib_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_calib_method() const;
  void _internal_set_calib_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.CalibReqDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::CameraParam* designated_cam_param_;
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 calib_method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calib_5fparam_2eproto;
};
// -------------------------------------------------------------------

class CalibReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.CalibReq) */ {
 public:
  inline CalibReq() : CalibReq(nullptr) {};
  virtual ~CalibReq();

  CalibReq(const CalibReq& from);
  CalibReq(CalibReq&& from) noexcept
    : CalibReq() {
    *this = ::std::move(from);
  }

  inline CalibReq& operator=(const CalibReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibReq& operator=(CalibReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalibReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalibReq* internal_default_instance() {
    return reinterpret_cast<const CalibReq*>(
               &_CalibReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CalibReq& a, CalibReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalibReq* New() const final {
    return CreateMaybeMessage<CalibReq>(nullptr);
  }

  CalibReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalibReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalibReq& from);
  void MergeFrom(const CalibReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.CalibReq";
  }
  protected:
  explicit CalibReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calib_5fparam_2eproto);
    return ::descriptor_table_calib_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 1,
    kVhsParamFieldNumber = 2,
  };
  // repeated .minieye.CalibReqDetail details = 1;
  int details_size() const;
  private:
  int _internal_details_size() const;
  public:
  void clear_details();
  ::minieye::CalibReqDetail* mutable_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CalibReqDetail >*
      mutable_details();
  private:
  const ::minieye::CalibReqDetail& _internal_details(int index) const;
  ::minieye::CalibReqDetail* _internal_add_details();
  public:
  const ::minieye::CalibReqDetail& details(int index) const;
  ::minieye::CalibReqDetail* add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CalibReqDetail >&
      details() const;

  // .minieye.VehicleParam vhs_param = 2;
  bool has_vhs_param() const;
  private:
  bool _internal_has_vhs_param() const;
  public:
  void clear_vhs_param();
  const ::minieye::VehicleParam& vhs_param() const;
  ::minieye::VehicleParam* release_vhs_param();
  ::minieye::VehicleParam* mutable_vhs_param();
  void set_allocated_vhs_param(::minieye::VehicleParam* vhs_param);
  private:
  const ::minieye::VehicleParam& _internal_vhs_param() const;
  ::minieye::VehicleParam* _internal_mutable_vhs_param();
  public:
  void unsafe_arena_set_allocated_vhs_param(
      ::minieye::VehicleParam* vhs_param);
  ::minieye::VehicleParam* unsafe_arena_release_vhs_param();

  // @@protoc_insertion_point(class_scope:minieye.CalibReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CalibReqDetail > details_;
  ::minieye::VehicleParam* vhs_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calib_5fparam_2eproto;
};
// -------------------------------------------------------------------

class CalibRspDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.CalibRspDetail) */ {
 public:
  inline CalibRspDetail() : CalibRspDetail(nullptr) {};
  virtual ~CalibRspDetail();

  CalibRspDetail(const CalibRspDetail& from);
  CalibRspDetail(CalibRspDetail&& from) noexcept
    : CalibRspDetail() {
    *this = ::std::move(from);
  }

  inline CalibRspDetail& operator=(const CalibRspDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibRspDetail& operator=(CalibRspDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalibRspDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalibRspDetail* internal_default_instance() {
    return reinterpret_cast<const CalibRspDetail*>(
               &_CalibRspDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CalibRspDetail& a, CalibRspDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibRspDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibRspDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalibRspDetail* New() const final {
    return CreateMaybeMessage<CalibRspDetail>(nullptr);
  }

  CalibRspDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalibRspDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalibRspDetail& from);
  void MergeFrom(const CalibRspDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibRspDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.CalibRspDetail";
  }
  protected:
  explicit CalibRspDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calib_5fparam_2eproto);
    return ::descriptor_table_calib_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibResFieldNumber = 6,
    kCameraIdFieldNumber = 1,
    kCalibMethodFieldNumber = 2,
    kStateFieldNumber = 3,
    kErrCodeFieldNumber = 4,
    kProcessFieldNumber = 5,
  };
  // .minieye.CameraParam calib_res = 6;
  bool has_calib_res() const;
  private:
  bool _internal_has_calib_res() const;
  public:
  void clear_calib_res();
  const ::minieye::CameraParam& calib_res() const;
  ::minieye::CameraParam* release_calib_res();
  ::minieye::CameraParam* mutable_calib_res();
  void set_allocated_calib_res(::minieye::CameraParam* calib_res);
  private:
  const ::minieye::CameraParam& _internal_calib_res() const;
  ::minieye::CameraParam* _internal_mutable_calib_res();
  public:
  void unsafe_arena_set_allocated_calib_res(
      ::minieye::CameraParam* calib_res);
  ::minieye::CameraParam* unsafe_arena_release_calib_res();

  // int32 camera_id = 1;
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_camera_id() const;
  void _internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 calib_method = 2;
  void clear_calib_method();
  ::PROTOBUF_NAMESPACE_ID::int32 calib_method() const;
  void set_calib_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_calib_method() const;
  void _internal_set_calib_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .minieye.CalibResState state = 3;
  void clear_state();
  ::minieye::CalibResState state() const;
  void set_state(::minieye::CalibResState value);
  private:
  ::minieye::CalibResState _internal_state() const;
  void _internal_set_state(::minieye::CalibResState value);
  public:

  // .minieye.CalibErrCode err_code = 4;
  void clear_err_code();
  ::minieye::CalibErrCode err_code() const;
  void set_err_code(::minieye::CalibErrCode value);
  private:
  ::minieye::CalibErrCode _internal_err_code() const;
  void _internal_set_err_code(::minieye::CalibErrCode value);
  public:

  // double process = 5;
  void clear_process();
  double process() const;
  void set_process(double value);
  private:
  double _internal_process() const;
  void _internal_set_process(double value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.CalibRspDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::CameraParam* calib_res_;
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 calib_method_;
  int state_;
  int err_code_;
  double process_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calib_5fparam_2eproto;
};
// -------------------------------------------------------------------

class CalibRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.CalibRsp) */ {
 public:
  inline CalibRsp() : CalibRsp(nullptr) {};
  virtual ~CalibRsp();

  CalibRsp(const CalibRsp& from);
  CalibRsp(CalibRsp&& from) noexcept
    : CalibRsp() {
    *this = ::std::move(from);
  }

  inline CalibRsp& operator=(const CalibRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibRsp& operator=(CalibRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalibRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalibRsp* internal_default_instance() {
    return reinterpret_cast<const CalibRsp*>(
               &_CalibRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CalibRsp& a, CalibRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalibRsp* New() const final {
    return CreateMaybeMessage<CalibRsp>(nullptr);
  }

  CalibRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalibRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalibRsp& from);
  void MergeFrom(const CalibRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.CalibRsp";
  }
  protected:
  explicit CalibRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calib_5fparam_2eproto);
    return ::descriptor_table_calib_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 1,
  };
  // repeated .minieye.CalibRspDetail details = 1;
  int details_size() const;
  private:
  int _internal_details_size() const;
  public:
  void clear_details();
  ::minieye::CalibRspDetail* mutable_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CalibRspDetail >*
      mutable_details();
  private:
  const ::minieye::CalibRspDetail& _internal_details(int index) const;
  ::minieye::CalibRspDetail* _internal_add_details();
  public:
  const ::minieye::CalibRspDetail& details(int index) const;
  ::minieye::CalibRspDetail* add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CalibRspDetail >&
      details() const;

  // @@protoc_insertion_point(class_scope:minieye.CalibRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CalibRspDetail > details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calib_5fparam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CalibParam

// double camera_pitch = 1;
inline void CalibParam::clear_camera_pitch() {
  camera_pitch_ = 0;
}
inline double CalibParam::_internal_camera_pitch() const {
  return camera_pitch_;
}
inline double CalibParam::camera_pitch() const {
  // @@protoc_insertion_point(field_get:minieye.CalibParam.camera_pitch)
  return _internal_camera_pitch();
}
inline void CalibParam::_internal_set_camera_pitch(double value) {
  
  camera_pitch_ = value;
}
inline void CalibParam::set_camera_pitch(double value) {
  _internal_set_camera_pitch(value);
  // @@protoc_insertion_point(field_set:minieye.CalibParam.camera_pitch)
}

// double camera_yaw = 2;
inline void CalibParam::clear_camera_yaw() {
  camera_yaw_ = 0;
}
inline double CalibParam::_internal_camera_yaw() const {
  return camera_yaw_;
}
inline double CalibParam::camera_yaw() const {
  // @@protoc_insertion_point(field_get:minieye.CalibParam.camera_yaw)
  return _internal_camera_yaw();
}
inline void CalibParam::_internal_set_camera_yaw(double value) {
  
  camera_yaw_ = value;
}
inline void CalibParam::set_camera_yaw(double value) {
  _internal_set_camera_yaw(value);
  // @@protoc_insertion_point(field_set:minieye.CalibParam.camera_yaw)
}

// double camera_roll = 3;
inline void CalibParam::clear_camera_roll() {
  camera_roll_ = 0;
}
inline double CalibParam::_internal_camera_roll() const {
  return camera_roll_;
}
inline double CalibParam::camera_roll() const {
  // @@protoc_insertion_point(field_get:minieye.CalibParam.camera_roll)
  return _internal_camera_roll();
}
inline void CalibParam::_internal_set_camera_roll(double value) {
  
  camera_roll_ = value;
}
inline void CalibParam::set_camera_roll(double value) {
  _internal_set_camera_roll(value);
  // @@protoc_insertion_point(field_set:minieye.CalibParam.camera_roll)
}

// double camera_cu = 4;
inline void CalibParam::clear_camera_cu() {
  camera_cu_ = 0;
}
inline double CalibParam::_internal_camera_cu() const {
  return camera_cu_;
}
inline double CalibParam::camera_cu() const {
  // @@protoc_insertion_point(field_get:minieye.CalibParam.camera_cu)
  return _internal_camera_cu();
}
inline void CalibParam::_internal_set_camera_cu(double value) {
  
  camera_cu_ = value;
}
inline void CalibParam::set_camera_cu(double value) {
  _internal_set_camera_cu(value);
  // @@protoc_insertion_point(field_set:minieye.CalibParam.camera_cu)
}

// double camera_cv = 5;
inline void CalibParam::clear_camera_cv() {
  camera_cv_ = 0;
}
inline double CalibParam::_internal_camera_cv() const {
  return camera_cv_;
}
inline double CalibParam::camera_cv() const {
  // @@protoc_insertion_point(field_get:minieye.CalibParam.camera_cv)
  return _internal_camera_cv();
}
inline void CalibParam::_internal_set_camera_cv(double value) {
  
  camera_cv_ = value;
}
inline void CalibParam::set_camera_cv(double value) {
  _internal_set_camera_cv(value);
  // @@protoc_insertion_point(field_set:minieye.CalibParam.camera_cv)
}

// double camera_fov_h = 6;
inline void CalibParam::clear_camera_fov_h() {
  camera_fov_h_ = 0;
}
inline double CalibParam::_internal_camera_fov_h() const {
  return camera_fov_h_;
}
inline double CalibParam::camera_fov_h() const {
  // @@protoc_insertion_point(field_get:minieye.CalibParam.camera_fov_h)
  return _internal_camera_fov_h();
}
inline void CalibParam::_internal_set_camera_fov_h(double value) {
  
  camera_fov_h_ = value;
}
inline void CalibParam::set_camera_fov_h(double value) {
  _internal_set_camera_fov_h(value);
  // @@protoc_insertion_point(field_set:minieye.CalibParam.camera_fov_h)
}

// double camera_fov_w = 7;
inline void CalibParam::clear_camera_fov_w() {
  camera_fov_w_ = 0;
}
inline double CalibParam::_internal_camera_fov_w() const {
  return camera_fov_w_;
}
inline double CalibParam::camera_fov_w() const {
  // @@protoc_insertion_point(field_get:minieye.CalibParam.camera_fov_w)
  return _internal_camera_fov_w();
}
inline void CalibParam::_internal_set_camera_fov_w(double value) {
  
  camera_fov_w_ = value;
}
inline void CalibParam::set_camera_fov_w(double value) {
  _internal_set_camera_fov_w(value);
  // @@protoc_insertion_point(field_set:minieye.CalibParam.camera_fov_w)
}

// double camera_height = 8;
inline void CalibParam::clear_camera_height() {
  camera_height_ = 0;
}
inline double CalibParam::_internal_camera_height() const {
  return camera_height_;
}
inline double CalibParam::camera_height() const {
  // @@protoc_insertion_point(field_get:minieye.CalibParam.camera_height)
  return _internal_camera_height();
}
inline void CalibParam::_internal_set_camera_height(double value) {
  
  camera_height_ = value;
}
inline void CalibParam::set_camera_height(double value) {
  _internal_set_camera_height(value);
  // @@protoc_insertion_point(field_set:minieye.CalibParam.camera_height)
}

// double left_dist_to_camera = 9;
inline void CalibParam::clear_left_dist_to_camera() {
  left_dist_to_camera_ = 0;
}
inline double CalibParam::_internal_left_dist_to_camera() const {
  return left_dist_to_camera_;
}
inline double CalibParam::left_dist_to_camera() const {
  // @@protoc_insertion_point(field_get:minieye.CalibParam.left_dist_to_camera)
  return _internal_left_dist_to_camera();
}
inline void CalibParam::_internal_set_left_dist_to_camera(double value) {
  
  left_dist_to_camera_ = value;
}
inline void CalibParam::set_left_dist_to_camera(double value) {
  _internal_set_left_dist_to_camera(value);
  // @@protoc_insertion_point(field_set:minieye.CalibParam.left_dist_to_camera)
}

// double right_dist_to_camera = 10;
inline void CalibParam::clear_right_dist_to_camera() {
  right_dist_to_camera_ = 0;
}
inline double CalibParam::_internal_right_dist_to_camera() const {
  return right_dist_to_camera_;
}
inline double CalibParam::right_dist_to_camera() const {
  // @@protoc_insertion_point(field_get:minieye.CalibParam.right_dist_to_camera)
  return _internal_right_dist_to_camera();
}
inline void CalibParam::_internal_set_right_dist_to_camera(double value) {
  
  right_dist_to_camera_ = value;
}
inline void CalibParam::set_right_dist_to_camera(double value) {
  _internal_set_right_dist_to_camera(value);
  // @@protoc_insertion_point(field_set:minieye.CalibParam.right_dist_to_camera)
}

// double front_dist_to_camera = 11;
inline void CalibParam::clear_front_dist_to_camera() {
  front_dist_to_camera_ = 0;
}
inline double CalibParam::_internal_front_dist_to_camera() const {
  return front_dist_to_camera_;
}
inline double CalibParam::front_dist_to_camera() const {
  // @@protoc_insertion_point(field_get:minieye.CalibParam.front_dist_to_camera)
  return _internal_front_dist_to_camera();
}
inline void CalibParam::_internal_set_front_dist_to_camera(double value) {
  
  front_dist_to_camera_ = value;
}
inline void CalibParam::set_front_dist_to_camera(double value) {
  _internal_set_front_dist_to_camera(value);
  // @@protoc_insertion_point(field_set:minieye.CalibParam.front_dist_to_camera)
}

// double front_wheel_camera_dist = 12;
inline void CalibParam::clear_front_wheel_camera_dist() {
  front_wheel_camera_dist_ = 0;
}
inline double CalibParam::_internal_front_wheel_camera_dist() const {
  return front_wheel_camera_dist_;
}
inline double CalibParam::front_wheel_camera_dist() const {
  // @@protoc_insertion_point(field_get:minieye.CalibParam.front_wheel_camera_dist)
  return _internal_front_wheel_camera_dist();
}
inline void CalibParam::_internal_set_front_wheel_camera_dist(double value) {
  
  front_wheel_camera_dist_ = value;
}
inline void CalibParam::set_front_wheel_camera_dist(double value) {
  _internal_set_front_wheel_camera_dist(value);
  // @@protoc_insertion_point(field_set:minieye.CalibParam.front_wheel_camera_dist)
}

// uint32 camera_id = 13;
inline void CalibParam::clear_camera_id() {
  camera_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CalibParam::_internal_camera_id() const {
  return camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CalibParam::camera_id() const {
  // @@protoc_insertion_point(field_get:minieye.CalibParam.camera_id)
  return _internal_camera_id();
}
inline void CalibParam::_internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  camera_id_ = value;
}
inline void CalibParam::set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:minieye.CalibParam.camera_id)
}

// -------------------------------------------------------------------

// HomographyMatrix

// uint32 src_camera_id = 1;
inline void HomographyMatrix::clear_src_camera_id() {
  src_camera_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HomographyMatrix::_internal_src_camera_id() const {
  return src_camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HomographyMatrix::src_camera_id() const {
  // @@protoc_insertion_point(field_get:minieye.HomographyMatrix.src_camera_id)
  return _internal_src_camera_id();
}
inline void HomographyMatrix::_internal_set_src_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  src_camera_id_ = value;
}
inline void HomographyMatrix::set_src_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_camera_id(value);
  // @@protoc_insertion_point(field_set:minieye.HomographyMatrix.src_camera_id)
}

// uint32 dst_camera_id = 2;
inline void HomographyMatrix::clear_dst_camera_id() {
  dst_camera_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HomographyMatrix::_internal_dst_camera_id() const {
  return dst_camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HomographyMatrix::dst_camera_id() const {
  // @@protoc_insertion_point(field_get:minieye.HomographyMatrix.dst_camera_id)
  return _internal_dst_camera_id();
}
inline void HomographyMatrix::_internal_set_dst_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dst_camera_id_ = value;
}
inline void HomographyMatrix::set_dst_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dst_camera_id(value);
  // @@protoc_insertion_point(field_set:minieye.HomographyMatrix.dst_camera_id)
}

// repeated float src2dst_h_matrix = 3;
inline int HomographyMatrix::_internal_src2dst_h_matrix_size() const {
  return src2dst_h_matrix_.size();
}
inline int HomographyMatrix::src2dst_h_matrix_size() const {
  return _internal_src2dst_h_matrix_size();
}
inline void HomographyMatrix::clear_src2dst_h_matrix() {
  src2dst_h_matrix_.Clear();
}
inline float HomographyMatrix::_internal_src2dst_h_matrix(int index) const {
  return src2dst_h_matrix_.Get(index);
}
inline float HomographyMatrix::src2dst_h_matrix(int index) const {
  // @@protoc_insertion_point(field_get:minieye.HomographyMatrix.src2dst_h_matrix)
  return _internal_src2dst_h_matrix(index);
}
inline void HomographyMatrix::set_src2dst_h_matrix(int index, float value) {
  src2dst_h_matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.HomographyMatrix.src2dst_h_matrix)
}
inline void HomographyMatrix::_internal_add_src2dst_h_matrix(float value) {
  src2dst_h_matrix_.Add(value);
}
inline void HomographyMatrix::add_src2dst_h_matrix(float value) {
  _internal_add_src2dst_h_matrix(value);
  // @@protoc_insertion_point(field_add:minieye.HomographyMatrix.src2dst_h_matrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
HomographyMatrix::_internal_src2dst_h_matrix() const {
  return src2dst_h_matrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
HomographyMatrix::src2dst_h_matrix() const {
  // @@protoc_insertion_point(field_list:minieye.HomographyMatrix.src2dst_h_matrix)
  return _internal_src2dst_h_matrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
HomographyMatrix::_internal_mutable_src2dst_h_matrix() {
  return &src2dst_h_matrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
HomographyMatrix::mutable_src2dst_h_matrix() {
  // @@protoc_insertion_point(field_mutable_list:minieye.HomographyMatrix.src2dst_h_matrix)
  return _internal_mutable_src2dst_h_matrix();
}

// -------------------------------------------------------------------

// PreCheckReq

// bool need_check = 1;
inline void PreCheckReq::clear_need_check() {
  need_check_ = false;
}
inline bool PreCheckReq::_internal_need_check() const {
  return need_check_;
}
inline bool PreCheckReq::need_check() const {
  // @@protoc_insertion_point(field_get:minieye.PreCheckReq.need_check)
  return _internal_need_check();
}
inline void PreCheckReq::_internal_set_need_check(bool value) {
  
  need_check_ = value;
}
inline void PreCheckReq::set_need_check(bool value) {
  _internal_set_need_check(value);
  // @@protoc_insertion_point(field_set:minieye.PreCheckReq.need_check)
}

// -------------------------------------------------------------------

// PreCheckRsp

// .minieye.PreCheckState state = 1;
inline void PreCheckRsp::clear_state() {
  state_ = 0;
}
inline ::minieye::PreCheckState PreCheckRsp::_internal_state() const {
  return static_cast< ::minieye::PreCheckState >(state_);
}
inline ::minieye::PreCheckState PreCheckRsp::state() const {
  // @@protoc_insertion_point(field_get:minieye.PreCheckRsp.state)
  return _internal_state();
}
inline void PreCheckRsp::_internal_set_state(::minieye::PreCheckState value) {
  
  state_ = value;
}
inline void PreCheckRsp::set_state(::minieye::PreCheckState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:minieye.PreCheckRsp.state)
}

// .minieye.PrecheckErrCode err_code = 2;
inline void PreCheckRsp::clear_err_code() {
  err_code_ = 0;
}
inline ::minieye::PrecheckErrCode PreCheckRsp::_internal_err_code() const {
  return static_cast< ::minieye::PrecheckErrCode >(err_code_);
}
inline ::minieye::PrecheckErrCode PreCheckRsp::err_code() const {
  // @@protoc_insertion_point(field_get:minieye.PreCheckRsp.err_code)
  return _internal_err_code();
}
inline void PreCheckRsp::_internal_set_err_code(::minieye::PrecheckErrCode value) {
  
  err_code_ = value;
}
inline void PreCheckRsp::set_err_code(::minieye::PrecheckErrCode value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:minieye.PreCheckRsp.err_code)
}

// -------------------------------------------------------------------

// VehicleParam

// double car_width = 1;
inline void VehicleParam::clear_car_width() {
  car_width_ = 0;
}
inline double VehicleParam::_internal_car_width() const {
  return car_width_;
}
inline double VehicleParam::car_width() const {
  // @@protoc_insertion_point(field_get:minieye.VehicleParam.car_width)
  return _internal_car_width();
}
inline void VehicleParam::_internal_set_car_width(double value) {
  
  car_width_ = value;
}
inline void VehicleParam::set_car_width(double value) {
  _internal_set_car_width(value);
  // @@protoc_insertion_point(field_set:minieye.VehicleParam.car_width)
}

// double wheel_base = 2;
inline void VehicleParam::clear_wheel_base() {
  wheel_base_ = 0;
}
inline double VehicleParam::_internal_wheel_base() const {
  return wheel_base_;
}
inline double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:minieye.VehicleParam.wheel_base)
  return _internal_wheel_base();
}
inline void VehicleParam::_internal_set_wheel_base(double value) {
  
  wheel_base_ = value;
}
inline void VehicleParam::set_wheel_base(double value) {
  _internal_set_wheel_base(value);
  // @@protoc_insertion_point(field_set:minieye.VehicleParam.wheel_base)
}

// double front_overhang = 3;
inline void VehicleParam::clear_front_overhang() {
  front_overhang_ = 0;
}
inline double VehicleParam::_internal_front_overhang() const {
  return front_overhang_;
}
inline double VehicleParam::front_overhang() const {
  // @@protoc_insertion_point(field_get:minieye.VehicleParam.front_overhang)
  return _internal_front_overhang();
}
inline void VehicleParam::_internal_set_front_overhang(double value) {
  
  front_overhang_ = value;
}
inline void VehicleParam::set_front_overhang(double value) {
  _internal_set_front_overhang(value);
  // @@protoc_insertion_point(field_set:minieye.VehicleParam.front_overhang)
}

// double rear_overhang = 4;
inline void VehicleParam::clear_rear_overhang() {
  rear_overhang_ = 0;
}
inline double VehicleParam::_internal_rear_overhang() const {
  return rear_overhang_;
}
inline double VehicleParam::rear_overhang() const {
  // @@protoc_insertion_point(field_get:minieye.VehicleParam.rear_overhang)
  return _internal_rear_overhang();
}
inline void VehicleParam::_internal_set_rear_overhang(double value) {
  
  rear_overhang_ = value;
}
inline void VehicleParam::set_rear_overhang(double value) {
  _internal_set_rear_overhang(value);
  // @@protoc_insertion_point(field_set:minieye.VehicleParam.rear_overhang)
}

// -------------------------------------------------------------------

// CalibReqDetail

// int32 camera_id = 1;
inline void CalibReqDetail::clear_camera_id() {
  camera_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibReqDetail::_internal_camera_id() const {
  return camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibReqDetail::camera_id() const {
  // @@protoc_insertion_point(field_get:minieye.CalibReqDetail.camera_id)
  return _internal_camera_id();
}
inline void CalibReqDetail::_internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  camera_id_ = value;
}
inline void CalibReqDetail::set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:minieye.CalibReqDetail.camera_id)
}

// int32 calib_method = 2;
inline void CalibReqDetail::clear_calib_method() {
  calib_method_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibReqDetail::_internal_calib_method() const {
  return calib_method_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibReqDetail::calib_method() const {
  // @@protoc_insertion_point(field_get:minieye.CalibReqDetail.calib_method)
  return _internal_calib_method();
}
inline void CalibReqDetail::_internal_set_calib_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  calib_method_ = value;
}
inline void CalibReqDetail::set_calib_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_calib_method(value);
  // @@protoc_insertion_point(field_set:minieye.CalibReqDetail.calib_method)
}

// .minieye.CameraParam designated_cam_param = 3;
inline bool CalibReqDetail::_internal_has_designated_cam_param() const {
  return this != internal_default_instance() && designated_cam_param_ != nullptr;
}
inline bool CalibReqDetail::has_designated_cam_param() const {
  return _internal_has_designated_cam_param();
}
inline const ::minieye::CameraParam& CalibReqDetail::_internal_designated_cam_param() const {
  const ::minieye::CameraParam* p = designated_cam_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::CameraParam*>(
      &::minieye::_CameraParam_default_instance_);
}
inline const ::minieye::CameraParam& CalibReqDetail::designated_cam_param() const {
  // @@protoc_insertion_point(field_get:minieye.CalibReqDetail.designated_cam_param)
  return _internal_designated_cam_param();
}
inline void CalibReqDetail::unsafe_arena_set_allocated_designated_cam_param(
    ::minieye::CameraParam* designated_cam_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(designated_cam_param_);
  }
  designated_cam_param_ = designated_cam_param;
  if (designated_cam_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.CalibReqDetail.designated_cam_param)
}
inline ::minieye::CameraParam* CalibReqDetail::release_designated_cam_param() {
  auto temp = unsafe_arena_release_designated_cam_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::CameraParam* CalibReqDetail::unsafe_arena_release_designated_cam_param() {
  // @@protoc_insertion_point(field_release:minieye.CalibReqDetail.designated_cam_param)
  
  ::minieye::CameraParam* temp = designated_cam_param_;
  designated_cam_param_ = nullptr;
  return temp;
}
inline ::minieye::CameraParam* CalibReqDetail::_internal_mutable_designated_cam_param() {
  
  if (designated_cam_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::CameraParam>(GetArena());
    designated_cam_param_ = p;
  }
  return designated_cam_param_;
}
inline ::minieye::CameraParam* CalibReqDetail::mutable_designated_cam_param() {
  // @@protoc_insertion_point(field_mutable:minieye.CalibReqDetail.designated_cam_param)
  return _internal_mutable_designated_cam_param();
}
inline void CalibReqDetail::set_allocated_designated_cam_param(::minieye::CameraParam* designated_cam_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(designated_cam_param_);
  }
  if (designated_cam_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(designated_cam_param)->GetArena();
    if (message_arena != submessage_arena) {
      designated_cam_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, designated_cam_param, submessage_arena);
    }
    
  } else {
    
  }
  designated_cam_param_ = designated_cam_param;
  // @@protoc_insertion_point(field_set_allocated:minieye.CalibReqDetail.designated_cam_param)
}

// -------------------------------------------------------------------

// CalibReq

// repeated .minieye.CalibReqDetail details = 1;
inline int CalibReq::_internal_details_size() const {
  return details_.size();
}
inline int CalibReq::details_size() const {
  return _internal_details_size();
}
inline void CalibReq::clear_details() {
  details_.Clear();
}
inline ::minieye::CalibReqDetail* CalibReq::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.CalibReq.details)
  return details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CalibReqDetail >*
CalibReq::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CalibReq.details)
  return &details_;
}
inline const ::minieye::CalibReqDetail& CalibReq::_internal_details(int index) const {
  return details_.Get(index);
}
inline const ::minieye::CalibReqDetail& CalibReq::details(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CalibReq.details)
  return _internal_details(index);
}
inline ::minieye::CalibReqDetail* CalibReq::_internal_add_details() {
  return details_.Add();
}
inline ::minieye::CalibReqDetail* CalibReq::add_details() {
  // @@protoc_insertion_point(field_add:minieye.CalibReq.details)
  return _internal_add_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CalibReqDetail >&
CalibReq::details() const {
  // @@protoc_insertion_point(field_list:minieye.CalibReq.details)
  return details_;
}

// .minieye.VehicleParam vhs_param = 2;
inline bool CalibReq::_internal_has_vhs_param() const {
  return this != internal_default_instance() && vhs_param_ != nullptr;
}
inline bool CalibReq::has_vhs_param() const {
  return _internal_has_vhs_param();
}
inline void CalibReq::clear_vhs_param() {
  if (GetArena() == nullptr && vhs_param_ != nullptr) {
    delete vhs_param_;
  }
  vhs_param_ = nullptr;
}
inline const ::minieye::VehicleParam& CalibReq::_internal_vhs_param() const {
  const ::minieye::VehicleParam* p = vhs_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::VehicleParam*>(
      &::minieye::_VehicleParam_default_instance_);
}
inline const ::minieye::VehicleParam& CalibReq::vhs_param() const {
  // @@protoc_insertion_point(field_get:minieye.CalibReq.vhs_param)
  return _internal_vhs_param();
}
inline void CalibReq::unsafe_arena_set_allocated_vhs_param(
    ::minieye::VehicleParam* vhs_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vhs_param_);
  }
  vhs_param_ = vhs_param;
  if (vhs_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.CalibReq.vhs_param)
}
inline ::minieye::VehicleParam* CalibReq::release_vhs_param() {
  auto temp = unsafe_arena_release_vhs_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::VehicleParam* CalibReq::unsafe_arena_release_vhs_param() {
  // @@protoc_insertion_point(field_release:minieye.CalibReq.vhs_param)
  
  ::minieye::VehicleParam* temp = vhs_param_;
  vhs_param_ = nullptr;
  return temp;
}
inline ::minieye::VehicleParam* CalibReq::_internal_mutable_vhs_param() {
  
  if (vhs_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::VehicleParam>(GetArena());
    vhs_param_ = p;
  }
  return vhs_param_;
}
inline ::minieye::VehicleParam* CalibReq::mutable_vhs_param() {
  // @@protoc_insertion_point(field_mutable:minieye.CalibReq.vhs_param)
  return _internal_mutable_vhs_param();
}
inline void CalibReq::set_allocated_vhs_param(::minieye::VehicleParam* vhs_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vhs_param_;
  }
  if (vhs_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vhs_param);
    if (message_arena != submessage_arena) {
      vhs_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vhs_param, submessage_arena);
    }
    
  } else {
    
  }
  vhs_param_ = vhs_param;
  // @@protoc_insertion_point(field_set_allocated:minieye.CalibReq.vhs_param)
}

// -------------------------------------------------------------------

// CalibRspDetail

// int32 camera_id = 1;
inline void CalibRspDetail::clear_camera_id() {
  camera_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibRspDetail::_internal_camera_id() const {
  return camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibRspDetail::camera_id() const {
  // @@protoc_insertion_point(field_get:minieye.CalibRspDetail.camera_id)
  return _internal_camera_id();
}
inline void CalibRspDetail::_internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  camera_id_ = value;
}
inline void CalibRspDetail::set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:minieye.CalibRspDetail.camera_id)
}

// int32 calib_method = 2;
inline void CalibRspDetail::clear_calib_method() {
  calib_method_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibRspDetail::_internal_calib_method() const {
  return calib_method_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibRspDetail::calib_method() const {
  // @@protoc_insertion_point(field_get:minieye.CalibRspDetail.calib_method)
  return _internal_calib_method();
}
inline void CalibRspDetail::_internal_set_calib_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  calib_method_ = value;
}
inline void CalibRspDetail::set_calib_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_calib_method(value);
  // @@protoc_insertion_point(field_set:minieye.CalibRspDetail.calib_method)
}

// .minieye.CalibResState state = 3;
inline void CalibRspDetail::clear_state() {
  state_ = 0;
}
inline ::minieye::CalibResState CalibRspDetail::_internal_state() const {
  return static_cast< ::minieye::CalibResState >(state_);
}
inline ::minieye::CalibResState CalibRspDetail::state() const {
  // @@protoc_insertion_point(field_get:minieye.CalibRspDetail.state)
  return _internal_state();
}
inline void CalibRspDetail::_internal_set_state(::minieye::CalibResState value) {
  
  state_ = value;
}
inline void CalibRspDetail::set_state(::minieye::CalibResState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:minieye.CalibRspDetail.state)
}

// .minieye.CalibErrCode err_code = 4;
inline void CalibRspDetail::clear_err_code() {
  err_code_ = 0;
}
inline ::minieye::CalibErrCode CalibRspDetail::_internal_err_code() const {
  return static_cast< ::minieye::CalibErrCode >(err_code_);
}
inline ::minieye::CalibErrCode CalibRspDetail::err_code() const {
  // @@protoc_insertion_point(field_get:minieye.CalibRspDetail.err_code)
  return _internal_err_code();
}
inline void CalibRspDetail::_internal_set_err_code(::minieye::CalibErrCode value) {
  
  err_code_ = value;
}
inline void CalibRspDetail::set_err_code(::minieye::CalibErrCode value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:minieye.CalibRspDetail.err_code)
}

// double process = 5;
inline void CalibRspDetail::clear_process() {
  process_ = 0;
}
inline double CalibRspDetail::_internal_process() const {
  return process_;
}
inline double CalibRspDetail::process() const {
  // @@protoc_insertion_point(field_get:minieye.CalibRspDetail.process)
  return _internal_process();
}
inline void CalibRspDetail::_internal_set_process(double value) {
  
  process_ = value;
}
inline void CalibRspDetail::set_process(double value) {
  _internal_set_process(value);
  // @@protoc_insertion_point(field_set:minieye.CalibRspDetail.process)
}

// .minieye.CameraParam calib_res = 6;
inline bool CalibRspDetail::_internal_has_calib_res() const {
  return this != internal_default_instance() && calib_res_ != nullptr;
}
inline bool CalibRspDetail::has_calib_res() const {
  return _internal_has_calib_res();
}
inline const ::minieye::CameraParam& CalibRspDetail::_internal_calib_res() const {
  const ::minieye::CameraParam* p = calib_res_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::CameraParam*>(
      &::minieye::_CameraParam_default_instance_);
}
inline const ::minieye::CameraParam& CalibRspDetail::calib_res() const {
  // @@protoc_insertion_point(field_get:minieye.CalibRspDetail.calib_res)
  return _internal_calib_res();
}
inline void CalibRspDetail::unsafe_arena_set_allocated_calib_res(
    ::minieye::CameraParam* calib_res) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calib_res_);
  }
  calib_res_ = calib_res;
  if (calib_res) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.CalibRspDetail.calib_res)
}
inline ::minieye::CameraParam* CalibRspDetail::release_calib_res() {
  auto temp = unsafe_arena_release_calib_res();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::CameraParam* CalibRspDetail::unsafe_arena_release_calib_res() {
  // @@protoc_insertion_point(field_release:minieye.CalibRspDetail.calib_res)
  
  ::minieye::CameraParam* temp = calib_res_;
  calib_res_ = nullptr;
  return temp;
}
inline ::minieye::CameraParam* CalibRspDetail::_internal_mutable_calib_res() {
  
  if (calib_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::CameraParam>(GetArena());
    calib_res_ = p;
  }
  return calib_res_;
}
inline ::minieye::CameraParam* CalibRspDetail::mutable_calib_res() {
  // @@protoc_insertion_point(field_mutable:minieye.CalibRspDetail.calib_res)
  return _internal_mutable_calib_res();
}
inline void CalibRspDetail::set_allocated_calib_res(::minieye::CameraParam* calib_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(calib_res_);
  }
  if (calib_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calib_res)->GetArena();
    if (message_arena != submessage_arena) {
      calib_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calib_res, submessage_arena);
    }
    
  } else {
    
  }
  calib_res_ = calib_res;
  // @@protoc_insertion_point(field_set_allocated:minieye.CalibRspDetail.calib_res)
}

// -------------------------------------------------------------------

// CalibRsp

// repeated .minieye.CalibRspDetail details = 1;
inline int CalibRsp::_internal_details_size() const {
  return details_.size();
}
inline int CalibRsp::details_size() const {
  return _internal_details_size();
}
inline void CalibRsp::clear_details() {
  details_.Clear();
}
inline ::minieye::CalibRspDetail* CalibRsp::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.CalibRsp.details)
  return details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CalibRspDetail >*
CalibRsp::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:minieye.CalibRsp.details)
  return &details_;
}
inline const ::minieye::CalibRspDetail& CalibRsp::_internal_details(int index) const {
  return details_.Get(index);
}
inline const ::minieye::CalibRspDetail& CalibRsp::details(int index) const {
  // @@protoc_insertion_point(field_get:minieye.CalibRsp.details)
  return _internal_details(index);
}
inline ::minieye::CalibRspDetail* CalibRsp::_internal_add_details() {
  return details_.Add();
}
inline ::minieye::CalibRspDetail* CalibRsp::add_details() {
  // @@protoc_insertion_point(field_add:minieye.CalibRsp.details)
  return _internal_add_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::CalibRspDetail >&
CalibRsp::details() const {
  // @@protoc_insertion_point(field_list:minieye.CalibRsp.details)
  return details_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minieye::PreCheckState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::PreCheckState>() {
  return ::minieye::PreCheckState_descriptor();
}
template <> struct is_proto_enum< ::minieye::PrecheckErrCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::PrecheckErrCode>() {
  return ::minieye::PrecheckErrCode_descriptor();
}
template <> struct is_proto_enum< ::minieye::CalibResState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::CalibResState>() {
  return ::minieye::CalibResState_descriptor();
}
template <> struct is_proto_enum< ::minieye::CalibErrCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::CalibErrCode>() {
  return ::minieye::CalibErrCode_descriptor();
}
template <> struct is_proto_enum< ::minieye::CalibMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::CalibMethod>() {
  return ::minieye::CalibMethod_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_calib_5fparam_2eproto
