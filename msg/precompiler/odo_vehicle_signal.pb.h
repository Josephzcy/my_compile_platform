// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: odo_vehicle_signal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_odo_5fvehicle_5fsignal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_odo_5fvehicle_5fsignal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_odo_5fvehicle_5fsignal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_odo_5fvehicle_5fsignal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_odo_5fvehicle_5fsignal_2eproto;
namespace minieye {
class ApaVehicleSignal;
class ApaVehicleSignalDefaultTypeInternal;
extern ApaVehicleSignalDefaultTypeInternal _ApaVehicleSignal_default_instance_;
class ApaVehicleSignal_SignalsEntry_DoNotUse;
class ApaVehicleSignal_SignalsEntry_DoNotUseDefaultTypeInternal;
extern ApaVehicleSignal_SignalsEntry_DoNotUseDefaultTypeInternal _ApaVehicleSignal_SignalsEntry_DoNotUse_default_instance_;
class OdoVehicleSignal;
class OdoVehicleSignalDefaultTypeInternal;
extern OdoVehicleSignalDefaultTypeInternal _OdoVehicleSignal_default_instance_;
class OdoVehicleSignal_SignalsEntry_DoNotUse;
class OdoVehicleSignal_SignalsEntry_DoNotUseDefaultTypeInternal;
extern OdoVehicleSignal_SignalsEntry_DoNotUseDefaultTypeInternal _OdoVehicleSignal_SignalsEntry_DoNotUse_default_instance_;
class SignalTimestamp;
class SignalTimestampDefaultTypeInternal;
extern SignalTimestampDefaultTypeInternal _SignalTimestamp_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::ApaVehicleSignal* Arena::CreateMaybeMessage<::minieye::ApaVehicleSignal>(Arena*);
template<> ::minieye::ApaVehicleSignal_SignalsEntry_DoNotUse* Arena::CreateMaybeMessage<::minieye::ApaVehicleSignal_SignalsEntry_DoNotUse>(Arena*);
template<> ::minieye::OdoVehicleSignal* Arena::CreateMaybeMessage<::minieye::OdoVehicleSignal>(Arena*);
template<> ::minieye::OdoVehicleSignal_SignalsEntry_DoNotUse* Arena::CreateMaybeMessage<::minieye::OdoVehicleSignal_SignalsEntry_DoNotUse>(Arena*);
template<> ::minieye::SignalTimestamp* Arena::CreateMaybeMessage<::minieye::SignalTimestamp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

enum OdoVehicleSignal_SignalType : int {
  OdoVehicleSignal_SignalType_kCanSpeed = 0,
  OdoVehicleSignal_SignalType_kSteeringWheelAngle = 1,
  OdoVehicleSignal_SignalType_kYawRate = 2,
  OdoVehicleSignal_SignalType_kGearMode = 3,
  OdoVehicleSignal_SignalType_kLongiAcceleration = 4,
  OdoVehicleSignal_SignalType_kRLWheelPulseCounter = 5,
  OdoVehicleSignal_SignalType_kRRWheelPulseCounter = 6,
  OdoVehicleSignal_SignalType_kRLWheelRotate = 7,
  OdoVehicleSignal_SignalType_kRRWheelRotate = 8,
  OdoVehicleSignal_SignalType_OdoVehicleSignal_SignalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OdoVehicleSignal_SignalType_OdoVehicleSignal_SignalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OdoVehicleSignal_SignalType_IsValid(int value);
constexpr OdoVehicleSignal_SignalType OdoVehicleSignal_SignalType_SignalType_MIN = OdoVehicleSignal_SignalType_kCanSpeed;
constexpr OdoVehicleSignal_SignalType OdoVehicleSignal_SignalType_SignalType_MAX = OdoVehicleSignal_SignalType_kRRWheelRotate;
constexpr int OdoVehicleSignal_SignalType_SignalType_ARRAYSIZE = OdoVehicleSignal_SignalType_SignalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OdoVehicleSignal_SignalType_descriptor();
template<typename T>
inline const std::string& OdoVehicleSignal_SignalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OdoVehicleSignal_SignalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OdoVehicleSignal_SignalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OdoVehicleSignal_SignalType_descriptor(), enum_t_value);
}
inline bool OdoVehicleSignal_SignalType_Parse(
    const std::string& name, OdoVehicleSignal_SignalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OdoVehicleSignal_SignalType>(
    OdoVehicleSignal_SignalType_descriptor(), name, value);
}
enum ApaVehicleSignal_SignalType : int {
  ApaVehicleSignal_SignalType_kFLTirePressure = 0,
  ApaVehicleSignal_SignalType_kFRTirePressure = 1,
  ApaVehicleSignal_SignalType_kRLTirePressure = 2,
  ApaVehicleSignal_SignalType_kRRTirePressure = 3,
  ApaVehicleSignal_SignalType_kMotorSpeed = 4,
  ApaVehicleSignal_SignalType_kLngCtrlMode = 5,
  ApaVehicleSignal_SignalType_kLatCtrlMode = 6,
  ApaVehicleSignal_SignalType_kLngCtrlSt = 7,
  ApaVehicleSignal_SignalType_kLatCtrlSt = 8,
  ApaVehicleSignal_SignalType_kLngQuitReport = 9,
  ApaVehicleSignal_SignalType_kLatQuitReport = 10,
  ApaVehicleSignal_SignalType_kVehicleReadySt = 11,
  ApaVehicleSignal_SignalType_kEpbSystemSt = 12,
  ApaVehicleSignal_SignalType_kChargingGunSt = 13,
  ApaVehicleSignal_SignalType_kDriveMode = 14,
  ApaVehicleSignal_SignalType_kFoldMirrorsSt = 15,
  ApaVehicleSignal_SignalType_ApaVehicleSignal_SignalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ApaVehicleSignal_SignalType_ApaVehicleSignal_SignalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ApaVehicleSignal_SignalType_IsValid(int value);
constexpr ApaVehicleSignal_SignalType ApaVehicleSignal_SignalType_SignalType_MIN = ApaVehicleSignal_SignalType_kFLTirePressure;
constexpr ApaVehicleSignal_SignalType ApaVehicleSignal_SignalType_SignalType_MAX = ApaVehicleSignal_SignalType_kFoldMirrorsSt;
constexpr int ApaVehicleSignal_SignalType_SignalType_ARRAYSIZE = ApaVehicleSignal_SignalType_SignalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApaVehicleSignal_SignalType_descriptor();
template<typename T>
inline const std::string& ApaVehicleSignal_SignalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApaVehicleSignal_SignalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApaVehicleSignal_SignalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApaVehicleSignal_SignalType_descriptor(), enum_t_value);
}
inline bool ApaVehicleSignal_SignalType_Parse(
    const std::string& name, ApaVehicleSignal_SignalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApaVehicleSignal_SignalType>(
    ApaVehicleSignal_SignalType_descriptor(), name, value);
}
// ===================================================================

class SignalTimestamp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.SignalTimestamp) */ {
 public:
  inline SignalTimestamp() : SignalTimestamp(nullptr) {};
  virtual ~SignalTimestamp();

  SignalTimestamp(const SignalTimestamp& from);
  SignalTimestamp(SignalTimestamp&& from) noexcept
    : SignalTimestamp() {
    *this = ::std::move(from);
  }

  inline SignalTimestamp& operator=(const SignalTimestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalTimestamp& operator=(SignalTimestamp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignalTimestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalTimestamp* internal_default_instance() {
    return reinterpret_cast<const SignalTimestamp*>(
               &_SignalTimestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignalTimestamp& a, SignalTimestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalTimestamp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalTimestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignalTimestamp* New() const final {
    return CreateMaybeMessage<SignalTimestamp>(nullptr);
  }

  SignalTimestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalTimestamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalTimestamp& from);
  void MergeFrom(const SignalTimestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalTimestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.SignalTimestamp";
  }
  protected:
  explicit SignalTimestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_odo_5fvehicle_5fsignal_2eproto);
    return ::descriptor_table_odo_5fvehicle_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // uint64 tick = 2;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float value = 1;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.SignalTimestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_odo_5fvehicle_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class OdoVehicleSignal_SignalsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OdoVehicleSignal_SignalsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::minieye::SignalTimestamp,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OdoVehicleSignal_SignalsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::minieye::SignalTimestamp,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  OdoVehicleSignal_SignalsEntry_DoNotUse();
  OdoVehicleSignal_SignalsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OdoVehicleSignal_SignalsEntry_DoNotUse& other);
  static const OdoVehicleSignal_SignalsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OdoVehicleSignal_SignalsEntry_DoNotUse*>(&_OdoVehicleSignal_SignalsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_odo_5fvehicle_5fsignal_2eproto);
    return ::descriptor_table_odo_5fvehicle_5fsignal_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class OdoVehicleSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.OdoVehicleSignal) */ {
 public:
  inline OdoVehicleSignal() : OdoVehicleSignal(nullptr) {};
  virtual ~OdoVehicleSignal();

  OdoVehicleSignal(const OdoVehicleSignal& from);
  OdoVehicleSignal(OdoVehicleSignal&& from) noexcept
    : OdoVehicleSignal() {
    *this = ::std::move(from);
  }

  inline OdoVehicleSignal& operator=(const OdoVehicleSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdoVehicleSignal& operator=(OdoVehicleSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OdoVehicleSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OdoVehicleSignal* internal_default_instance() {
    return reinterpret_cast<const OdoVehicleSignal*>(
               &_OdoVehicleSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OdoVehicleSignal& a, OdoVehicleSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(OdoVehicleSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OdoVehicleSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OdoVehicleSignal* New() const final {
    return CreateMaybeMessage<OdoVehicleSignal>(nullptr);
  }

  OdoVehicleSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OdoVehicleSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OdoVehicleSignal& from);
  void MergeFrom(const OdoVehicleSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdoVehicleSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.OdoVehicleSignal";
  }
  protected:
  explicit OdoVehicleSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_odo_5fvehicle_5fsignal_2eproto);
    return ::descriptor_table_odo_5fvehicle_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef OdoVehicleSignal_SignalType SignalType;
  static constexpr SignalType kCanSpeed =
    OdoVehicleSignal_SignalType_kCanSpeed;
  static constexpr SignalType kSteeringWheelAngle =
    OdoVehicleSignal_SignalType_kSteeringWheelAngle;
  static constexpr SignalType kYawRate =
    OdoVehicleSignal_SignalType_kYawRate;
  static constexpr SignalType kGearMode =
    OdoVehicleSignal_SignalType_kGearMode;
  static constexpr SignalType kLongiAcceleration =
    OdoVehicleSignal_SignalType_kLongiAcceleration;
  static constexpr SignalType kRLWheelPulseCounter =
    OdoVehicleSignal_SignalType_kRLWheelPulseCounter;
  static constexpr SignalType kRRWheelPulseCounter =
    OdoVehicleSignal_SignalType_kRRWheelPulseCounter;
  static constexpr SignalType kRLWheelRotate =
    OdoVehicleSignal_SignalType_kRLWheelRotate;
  static constexpr SignalType kRRWheelRotate =
    OdoVehicleSignal_SignalType_kRRWheelRotate;
  static inline bool SignalType_IsValid(int value) {
    return OdoVehicleSignal_SignalType_IsValid(value);
  }
  static constexpr SignalType SignalType_MIN =
    OdoVehicleSignal_SignalType_SignalType_MIN;
  static constexpr SignalType SignalType_MAX =
    OdoVehicleSignal_SignalType_SignalType_MAX;
  static constexpr int SignalType_ARRAYSIZE =
    OdoVehicleSignal_SignalType_SignalType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalType_descriptor() {
    return OdoVehicleSignal_SignalType_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalType_Name.");
    return OdoVehicleSignal_SignalType_Name(enum_t_value);
  }
  static inline bool SignalType_Parse(const std::string& name,
      SignalType* value) {
    return OdoVehicleSignal_SignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignalsFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // map<int32, .minieye.SignalTimestamp> signals = 1;
  int signals_size() const;
  private:
  int _internal_signals_size() const;
  public:
  void clear_signals();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::minieye::SignalTimestamp >&
      _internal_signals() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::minieye::SignalTimestamp >*
      _internal_mutable_signals();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::minieye::SignalTimestamp >&
      signals() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::minieye::SignalTimestamp >*
      mutable_signals();

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.OdoVehicleSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      OdoVehicleSignal_SignalsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::minieye::SignalTimestamp,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > signals_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_odo_5fvehicle_5fsignal_2eproto;
};
// -------------------------------------------------------------------

class ApaVehicleSignal_SignalsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ApaVehicleSignal_SignalsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ApaVehicleSignal_SignalsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  ApaVehicleSignal_SignalsEntry_DoNotUse();
  ApaVehicleSignal_SignalsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ApaVehicleSignal_SignalsEntry_DoNotUse& other);
  static const ApaVehicleSignal_SignalsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ApaVehicleSignal_SignalsEntry_DoNotUse*>(&_ApaVehicleSignal_SignalsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_odo_5fvehicle_5fsignal_2eproto);
    return ::descriptor_table_odo_5fvehicle_5fsignal_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class ApaVehicleSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.ApaVehicleSignal) */ {
 public:
  inline ApaVehicleSignal() : ApaVehicleSignal(nullptr) {};
  virtual ~ApaVehicleSignal();

  ApaVehicleSignal(const ApaVehicleSignal& from);
  ApaVehicleSignal(ApaVehicleSignal&& from) noexcept
    : ApaVehicleSignal() {
    *this = ::std::move(from);
  }

  inline ApaVehicleSignal& operator=(const ApaVehicleSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApaVehicleSignal& operator=(ApaVehicleSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApaVehicleSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApaVehicleSignal* internal_default_instance() {
    return reinterpret_cast<const ApaVehicleSignal*>(
               &_ApaVehicleSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ApaVehicleSignal& a, ApaVehicleSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(ApaVehicleSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApaVehicleSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApaVehicleSignal* New() const final {
    return CreateMaybeMessage<ApaVehicleSignal>(nullptr);
  }

  ApaVehicleSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApaVehicleSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApaVehicleSignal& from);
  void MergeFrom(const ApaVehicleSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApaVehicleSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.ApaVehicleSignal";
  }
  protected:
  explicit ApaVehicleSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_odo_5fvehicle_5fsignal_2eproto);
    return ::descriptor_table_odo_5fvehicle_5fsignal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef ApaVehicleSignal_SignalType SignalType;
  static constexpr SignalType kFLTirePressure =
    ApaVehicleSignal_SignalType_kFLTirePressure;
  static constexpr SignalType kFRTirePressure =
    ApaVehicleSignal_SignalType_kFRTirePressure;
  static constexpr SignalType kRLTirePressure =
    ApaVehicleSignal_SignalType_kRLTirePressure;
  static constexpr SignalType kRRTirePressure =
    ApaVehicleSignal_SignalType_kRRTirePressure;
  static constexpr SignalType kMotorSpeed =
    ApaVehicleSignal_SignalType_kMotorSpeed;
  static constexpr SignalType kLngCtrlMode =
    ApaVehicleSignal_SignalType_kLngCtrlMode;
  static constexpr SignalType kLatCtrlMode =
    ApaVehicleSignal_SignalType_kLatCtrlMode;
  static constexpr SignalType kLngCtrlSt =
    ApaVehicleSignal_SignalType_kLngCtrlSt;
  static constexpr SignalType kLatCtrlSt =
    ApaVehicleSignal_SignalType_kLatCtrlSt;
  static constexpr SignalType kLngQuitReport =
    ApaVehicleSignal_SignalType_kLngQuitReport;
  static constexpr SignalType kLatQuitReport =
    ApaVehicleSignal_SignalType_kLatQuitReport;
  static constexpr SignalType kVehicleReadySt =
    ApaVehicleSignal_SignalType_kVehicleReadySt;
  static constexpr SignalType kEpbSystemSt =
    ApaVehicleSignal_SignalType_kEpbSystemSt;
  static constexpr SignalType kChargingGunSt =
    ApaVehicleSignal_SignalType_kChargingGunSt;
  static constexpr SignalType kDriveMode =
    ApaVehicleSignal_SignalType_kDriveMode;
  static constexpr SignalType kFoldMirrorsSt =
    ApaVehicleSignal_SignalType_kFoldMirrorsSt;
  static inline bool SignalType_IsValid(int value) {
    return ApaVehicleSignal_SignalType_IsValid(value);
  }
  static constexpr SignalType SignalType_MIN =
    ApaVehicleSignal_SignalType_SignalType_MIN;
  static constexpr SignalType SignalType_MAX =
    ApaVehicleSignal_SignalType_SignalType_MAX;
  static constexpr int SignalType_ARRAYSIZE =
    ApaVehicleSignal_SignalType_SignalType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalType_descriptor() {
    return ApaVehicleSignal_SignalType_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalType_Name.");
    return ApaVehicleSignal_SignalType_Name(enum_t_value);
  }
  static inline bool SignalType_Parse(const std::string& name,
      SignalType* value) {
    return ApaVehicleSignal_SignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignalsFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // map<int32, float> signals = 1;
  int signals_size() const;
  private:
  int _internal_signals_size() const;
  public:
  void clear_signals();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
      _internal_signals() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
      _internal_mutable_signals();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
      signals() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
      mutable_signals();

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.ApaVehicleSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ApaVehicleSignal_SignalsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > signals_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_odo_5fvehicle_5fsignal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignalTimestamp

// float value = 1;
inline void SignalTimestamp::clear_value() {
  value_ = 0;
}
inline float SignalTimestamp::_internal_value() const {
  return value_;
}
inline float SignalTimestamp::value() const {
  // @@protoc_insertion_point(field_get:minieye.SignalTimestamp.value)
  return _internal_value();
}
inline void SignalTimestamp::_internal_set_value(float value) {
  
  value_ = value;
}
inline void SignalTimestamp::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:minieye.SignalTimestamp.value)
}

// uint64 tick = 2;
inline void SignalTimestamp::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignalTimestamp::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignalTimestamp::tick() const {
  // @@protoc_insertion_point(field_get:minieye.SignalTimestamp.tick)
  return _internal_tick();
}
inline void SignalTimestamp::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void SignalTimestamp::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.SignalTimestamp.tick)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OdoVehicleSignal

// map<int32, .minieye.SignalTimestamp> signals = 1;
inline int OdoVehicleSignal::_internal_signals_size() const {
  return signals_.size();
}
inline int OdoVehicleSignal::signals_size() const {
  return _internal_signals_size();
}
inline void OdoVehicleSignal::clear_signals() {
  signals_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::minieye::SignalTimestamp >&
OdoVehicleSignal::_internal_signals() const {
  return signals_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::minieye::SignalTimestamp >&
OdoVehicleSignal::signals() const {
  // @@protoc_insertion_point(field_map:minieye.OdoVehicleSignal.signals)
  return _internal_signals();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::minieye::SignalTimestamp >*
OdoVehicleSignal::_internal_mutable_signals() {
  return signals_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::minieye::SignalTimestamp >*
OdoVehicleSignal::mutable_signals() {
  // @@protoc_insertion_point(field_mutable_map:minieye.OdoVehicleSignal.signals)
  return _internal_mutable_signals();
}

// uint64 timestamp = 2;
inline void OdoVehicleSignal::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OdoVehicleSignal::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OdoVehicleSignal::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.OdoVehicleSignal.timestamp)
  return _internal_timestamp();
}
inline void OdoVehicleSignal::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void OdoVehicleSignal::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.OdoVehicleSignal.timestamp)
}

// uint64 tick = 3;
inline void OdoVehicleSignal::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OdoVehicleSignal::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OdoVehicleSignal::tick() const {
  // @@protoc_insertion_point(field_get:minieye.OdoVehicleSignal.tick)
  return _internal_tick();
}
inline void OdoVehicleSignal::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void OdoVehicleSignal::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.OdoVehicleSignal.tick)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ApaVehicleSignal

// map<int32, float> signals = 1;
inline int ApaVehicleSignal::_internal_signals_size() const {
  return signals_.size();
}
inline int ApaVehicleSignal::signals_size() const {
  return _internal_signals_size();
}
inline void ApaVehicleSignal::clear_signals() {
  signals_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
ApaVehicleSignal::_internal_signals() const {
  return signals_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
ApaVehicleSignal::signals() const {
  // @@protoc_insertion_point(field_map:minieye.ApaVehicleSignal.signals)
  return _internal_signals();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
ApaVehicleSignal::_internal_mutable_signals() {
  return signals_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
ApaVehicleSignal::mutable_signals() {
  // @@protoc_insertion_point(field_mutable_map:minieye.ApaVehicleSignal.signals)
  return _internal_mutable_signals();
}

// uint64 timestamp = 2;
inline void ApaVehicleSignal::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApaVehicleSignal::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApaVehicleSignal::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.ApaVehicleSignal.timestamp)
  return _internal_timestamp();
}
inline void ApaVehicleSignal::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ApaVehicleSignal::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.ApaVehicleSignal.timestamp)
}

// uint64 tick = 3;
inline void ApaVehicleSignal::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApaVehicleSignal::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApaVehicleSignal::tick() const {
  // @@protoc_insertion_point(field_get:minieye.ApaVehicleSignal.tick)
  return _internal_tick();
}
inline void ApaVehicleSignal::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void ApaVehicleSignal::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.ApaVehicleSignal.tick)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minieye::OdoVehicleSignal_SignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::OdoVehicleSignal_SignalType>() {
  return ::minieye::OdoVehicleSignal_SignalType_descriptor();
}
template <> struct is_proto_enum< ::minieye::ApaVehicleSignal_SignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::ApaVehicleSignal_SignalType>() {
  return ::minieye::ApaVehicleSignal_SignalType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_odo_5fvehicle_5fsignal_2eproto
