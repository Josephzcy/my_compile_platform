// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_map_status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ap_5fmap_5fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ap_5fmap_5fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ap_5fmap_5fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ap_5fmap_5fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fmap_5fstatus_2eproto;
namespace minieye {
namespace parking {
class ApMapStatus;
class ApMapStatusDefaultTypeInternal;
extern ApMapStatusDefaultTypeInternal _ApMapStatus_default_instance_;
class ApMapStatus_JointMatch;
class ApMapStatus_JointMatchDefaultTypeInternal;
extern ApMapStatus_JointMatchDefaultTypeInternal _ApMapStatus_JointMatch_default_instance_;
class ApMapStatus_Map;
class ApMapStatus_MapDefaultTypeInternal;
extern ApMapStatus_MapDefaultTypeInternal _ApMapStatus_Map_default_instance_;
class ApMapStatus_Map_JointsEntry_DoNotUse;
class ApMapStatus_Map_JointsEntry_DoNotUseDefaultTypeInternal;
extern ApMapStatus_Map_JointsEntry_DoNotUseDefaultTypeInternal _ApMapStatus_Map_JointsEntry_DoNotUse_default_instance_;
class ApMapStatus_Pose;
class ApMapStatus_PoseDefaultTypeInternal;
extern ApMapStatus_PoseDefaultTypeInternal _ApMapStatus_Pose_default_instance_;
class ApMapStatus_SemanticMatch;
class ApMapStatus_SemanticMatchDefaultTypeInternal;
extern ApMapStatus_SemanticMatchDefaultTypeInternal _ApMapStatus_SemanticMatch_default_instance_;
}  // namespace parking
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::parking::ApMapStatus* Arena::CreateMaybeMessage<::minieye::parking::ApMapStatus>(Arena*);
template<> ::minieye::parking::ApMapStatus_JointMatch* Arena::CreateMaybeMessage<::minieye::parking::ApMapStatus_JointMatch>(Arena*);
template<> ::minieye::parking::ApMapStatus_Map* Arena::CreateMaybeMessage<::minieye::parking::ApMapStatus_Map>(Arena*);
template<> ::minieye::parking::ApMapStatus_Map_JointsEntry_DoNotUse* Arena::CreateMaybeMessage<::minieye::parking::ApMapStatus_Map_JointsEntry_DoNotUse>(Arena*);
template<> ::minieye::parking::ApMapStatus_Pose* Arena::CreateMaybeMessage<::minieye::parking::ApMapStatus_Pose>(Arena*);
template<> ::minieye::parking::ApMapStatus_SemanticMatch* Arena::CreateMaybeMessage<::minieye::parking::ApMapStatus_SemanticMatch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {
namespace parking {

// ===================================================================

class ApMapStatus_Pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ApMapStatus.Pose) */ {
 public:
  inline ApMapStatus_Pose() : ApMapStatus_Pose(nullptr) {};
  virtual ~ApMapStatus_Pose();

  ApMapStatus_Pose(const ApMapStatus_Pose& from);
  ApMapStatus_Pose(ApMapStatus_Pose&& from) noexcept
    : ApMapStatus_Pose() {
    *this = ::std::move(from);
  }

  inline ApMapStatus_Pose& operator=(const ApMapStatus_Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApMapStatus_Pose& operator=(ApMapStatus_Pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApMapStatus_Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApMapStatus_Pose* internal_default_instance() {
    return reinterpret_cast<const ApMapStatus_Pose*>(
               &_ApMapStatus_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApMapStatus_Pose& a, ApMapStatus_Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(ApMapStatus_Pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApMapStatus_Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApMapStatus_Pose* New() const final {
    return CreateMaybeMessage<ApMapStatus_Pose>(nullptr);
  }

  ApMapStatus_Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApMapStatus_Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApMapStatus_Pose& from);
  void MergeFrom(const ApMapStatus_Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApMapStatus_Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ApMapStatus.Pose";
  }
  protected:
  explicit ApMapStatus_Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fmap_5fstatus_2eproto);
    return ::descriptor_table_ap_5fmap_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kQwFieldNumber = 4,
    kQxFieldNumber = 5,
    kQyFieldNumber = 6,
    kQzFieldNumber = 7,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double qw = 4;
  void clear_qw();
  double qw() const;
  void set_qw(double value);
  private:
  double _internal_qw() const;
  void _internal_set_qw(double value);
  public:

  // double qx = 5;
  void clear_qx();
  double qx() const;
  void set_qx(double value);
  private:
  double _internal_qx() const;
  void _internal_set_qx(double value);
  public:

  // double qy = 6;
  void clear_qy();
  double qy() const;
  void set_qy(double value);
  private:
  double _internal_qy() const;
  void _internal_set_qy(double value);
  public:

  // double qz = 7;
  void clear_qz();
  double qz() const;
  void set_qz(double value);
  private:
  double _internal_qz() const;
  void _internal_set_qz(double value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ApMapStatus.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double qw_;
  double qx_;
  double qy_;
  double qz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ap_5fmap_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class ApMapStatus_Map_JointsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ApMapStatus_Map_JointsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ApMapStatus_Map_JointsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ApMapStatus_Map_JointsEntry_DoNotUse();
  ApMapStatus_Map_JointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ApMapStatus_Map_JointsEntry_DoNotUse& other);
  static const ApMapStatus_Map_JointsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ApMapStatus_Map_JointsEntry_DoNotUse*>(&_ApMapStatus_Map_JointsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fmap_5fstatus_2eproto);
    return ::descriptor_table_ap_5fmap_5fstatus_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class ApMapStatus_Map PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ApMapStatus.Map) */ {
 public:
  inline ApMapStatus_Map() : ApMapStatus_Map(nullptr) {};
  virtual ~ApMapStatus_Map();

  ApMapStatus_Map(const ApMapStatus_Map& from);
  ApMapStatus_Map(ApMapStatus_Map&& from) noexcept
    : ApMapStatus_Map() {
    *this = ::std::move(from);
  }

  inline ApMapStatus_Map& operator=(const ApMapStatus_Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApMapStatus_Map& operator=(ApMapStatus_Map&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApMapStatus_Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApMapStatus_Map* internal_default_instance() {
    return reinterpret_cast<const ApMapStatus_Map*>(
               &_ApMapStatus_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ApMapStatus_Map& a, ApMapStatus_Map& b) {
    a.Swap(&b);
  }
  inline void Swap(ApMapStatus_Map* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApMapStatus_Map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApMapStatus_Map* New() const final {
    return CreateMaybeMessage<ApMapStatus_Map>(nullptr);
  }

  ApMapStatus_Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApMapStatus_Map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApMapStatus_Map& from);
  void MergeFrom(const ApMapStatus_Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApMapStatus_Map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ApMapStatus.Map";
  }
  protected:
  explicit ApMapStatus_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fmap_5fstatus_2eproto);
    return ::descriptor_table_ap_5fmap_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kJointsFieldNumber = 1,
  };
  // map<int64, .minieye.parking.ApMapStatus.Pose> joints = 1;
  int joints_size() const;
  private:
  int _internal_joints_size() const;
  public:
  void clear_joints();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose >&
      _internal_joints() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose >*
      _internal_mutable_joints();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose >&
      joints() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose >*
      mutable_joints();

  // @@protoc_insertion_point(class_scope:minieye.parking.ApMapStatus.Map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ApMapStatus_Map_JointsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > joints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ap_5fmap_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class ApMapStatus_JointMatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ApMapStatus.JointMatch) */ {
 public:
  inline ApMapStatus_JointMatch() : ApMapStatus_JointMatch(nullptr) {};
  virtual ~ApMapStatus_JointMatch();

  ApMapStatus_JointMatch(const ApMapStatus_JointMatch& from);
  ApMapStatus_JointMatch(ApMapStatus_JointMatch&& from) noexcept
    : ApMapStatus_JointMatch() {
    *this = ::std::move(from);
  }

  inline ApMapStatus_JointMatch& operator=(const ApMapStatus_JointMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApMapStatus_JointMatch& operator=(ApMapStatus_JointMatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApMapStatus_JointMatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApMapStatus_JointMatch* internal_default_instance() {
    return reinterpret_cast<const ApMapStatus_JointMatch*>(
               &_ApMapStatus_JointMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ApMapStatus_JointMatch& a, ApMapStatus_JointMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(ApMapStatus_JointMatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApMapStatus_JointMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApMapStatus_JointMatch* New() const final {
    return CreateMaybeMessage<ApMapStatus_JointMatch>(nullptr);
  }

  ApMapStatus_JointMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApMapStatus_JointMatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApMapStatus_JointMatch& from);
  void MergeFrom(const ApMapStatus_JointMatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApMapStatus_JointMatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ApMapStatus.JointMatch";
  }
  protected:
  explicit ApMapStatus_JointMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fmap_5fstatus_2eproto);
    return ::descriptor_table_ap_5fmap_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtJointIdFieldNumber = 1,
    kApJointIdFieldNumber = 2,
  };
  // int64 rt_joint_id = 1;
  void clear_rt_joint_id();
  ::PROTOBUF_NAMESPACE_ID::int64 rt_joint_id() const;
  void set_rt_joint_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rt_joint_id() const;
  void _internal_set_rt_joint_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 ap_joint_id = 2;
  void clear_ap_joint_id();
  ::PROTOBUF_NAMESPACE_ID::int64 ap_joint_id() const;
  void set_ap_joint_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ap_joint_id() const;
  void _internal_set_ap_joint_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ApMapStatus.JointMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 rt_joint_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 ap_joint_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ap_5fmap_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class ApMapStatus_SemanticMatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ApMapStatus.SemanticMatch) */ {
 public:
  inline ApMapStatus_SemanticMatch() : ApMapStatus_SemanticMatch(nullptr) {};
  virtual ~ApMapStatus_SemanticMatch();

  ApMapStatus_SemanticMatch(const ApMapStatus_SemanticMatch& from);
  ApMapStatus_SemanticMatch(ApMapStatus_SemanticMatch&& from) noexcept
    : ApMapStatus_SemanticMatch() {
    *this = ::std::move(from);
  }

  inline ApMapStatus_SemanticMatch& operator=(const ApMapStatus_SemanticMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApMapStatus_SemanticMatch& operator=(ApMapStatus_SemanticMatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApMapStatus_SemanticMatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApMapStatus_SemanticMatch* internal_default_instance() {
    return reinterpret_cast<const ApMapStatus_SemanticMatch*>(
               &_ApMapStatus_SemanticMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ApMapStatus_SemanticMatch& a, ApMapStatus_SemanticMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(ApMapStatus_SemanticMatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApMapStatus_SemanticMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApMapStatus_SemanticMatch* New() const final {
    return CreateMaybeMessage<ApMapStatus_SemanticMatch>(nullptr);
  }

  ApMapStatus_SemanticMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApMapStatus_SemanticMatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApMapStatus_SemanticMatch& from);
  void MergeFrom(const ApMapStatus_SemanticMatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApMapStatus_SemanticMatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ApMapStatus.SemanticMatch";
  }
  protected:
  explicit ApMapStatus_SemanticMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fmap_5fstatus_2eproto);
    return ::descriptor_table_ap_5fmap_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApPointFieldNumber = 1,
    kRtPointFieldNumber = 2,
  };
  // .minieye.parking.ApMapStatus.Pose ap_point = 1;
  bool has_ap_point() const;
  private:
  bool _internal_has_ap_point() const;
  public:
  void clear_ap_point();
  const ::minieye::parking::ApMapStatus_Pose& ap_point() const;
  ::minieye::parking::ApMapStatus_Pose* release_ap_point();
  ::minieye::parking::ApMapStatus_Pose* mutable_ap_point();
  void set_allocated_ap_point(::minieye::parking::ApMapStatus_Pose* ap_point);
  private:
  const ::minieye::parking::ApMapStatus_Pose& _internal_ap_point() const;
  ::minieye::parking::ApMapStatus_Pose* _internal_mutable_ap_point();
  public:
  void unsafe_arena_set_allocated_ap_point(
      ::minieye::parking::ApMapStatus_Pose* ap_point);
  ::minieye::parking::ApMapStatus_Pose* unsafe_arena_release_ap_point();

  // .minieye.parking.ApMapStatus.Pose rt_point = 2;
  bool has_rt_point() const;
  private:
  bool _internal_has_rt_point() const;
  public:
  void clear_rt_point();
  const ::minieye::parking::ApMapStatus_Pose& rt_point() const;
  ::minieye::parking::ApMapStatus_Pose* release_rt_point();
  ::minieye::parking::ApMapStatus_Pose* mutable_rt_point();
  void set_allocated_rt_point(::minieye::parking::ApMapStatus_Pose* rt_point);
  private:
  const ::minieye::parking::ApMapStatus_Pose& _internal_rt_point() const;
  ::minieye::parking::ApMapStatus_Pose* _internal_mutable_rt_point();
  public:
  void unsafe_arena_set_allocated_rt_point(
      ::minieye::parking::ApMapStatus_Pose* rt_point);
  ::minieye::parking::ApMapStatus_Pose* unsafe_arena_release_rt_point();

  // @@protoc_insertion_point(class_scope:minieye.parking.ApMapStatus.SemanticMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::parking::ApMapStatus_Pose* ap_point_;
  ::minieye::parking::ApMapStatus_Pose* rt_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ap_5fmap_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class ApMapStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.parking.ApMapStatus) */ {
 public:
  inline ApMapStatus() : ApMapStatus(nullptr) {};
  virtual ~ApMapStatus();

  ApMapStatus(const ApMapStatus& from);
  ApMapStatus(ApMapStatus&& from) noexcept
    : ApMapStatus() {
    *this = ::std::move(from);
  }

  inline ApMapStatus& operator=(const ApMapStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApMapStatus& operator=(ApMapStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApMapStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApMapStatus* internal_default_instance() {
    return reinterpret_cast<const ApMapStatus*>(
               &_ApMapStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ApMapStatus& a, ApMapStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ApMapStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApMapStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApMapStatus* New() const final {
    return CreateMaybeMessage<ApMapStatus>(nullptr);
  }

  ApMapStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApMapStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApMapStatus& from);
  void MergeFrom(const ApMapStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApMapStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.parking.ApMapStatus";
  }
  protected:
  explicit ApMapStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fmap_5fstatus_2eproto);
    return ::descriptor_table_ap_5fmap_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ApMapStatus_Pose Pose;
  typedef ApMapStatus_Map Map;
  typedef ApMapStatus_JointMatch JointMatch;
  typedef ApMapStatus_SemanticMatch SemanticMatch;

  // accessors -------------------------------------------------------

  enum : int {
    kJointMatchFieldNumber = 6,
    kSemanticMatchFieldNumber = 7,
    kOdomPointsFieldNumber = 8,
    kRtMapFieldNumber = 4,
    kApMapFieldNumber = 5,
    kTimestampFieldNumber = 1,
    kTickFieldNumber = 2,
    kFrameIdFieldNumber = 3,
  };
  // repeated .minieye.parking.ApMapStatus.JointMatch joint_match = 6;
  int joint_match_size() const;
  private:
  int _internal_joint_match_size() const;
  public:
  void clear_joint_match();
  ::minieye::parking::ApMapStatus_JointMatch* mutable_joint_match(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_JointMatch >*
      mutable_joint_match();
  private:
  const ::minieye::parking::ApMapStatus_JointMatch& _internal_joint_match(int index) const;
  ::minieye::parking::ApMapStatus_JointMatch* _internal_add_joint_match();
  public:
  const ::minieye::parking::ApMapStatus_JointMatch& joint_match(int index) const;
  ::minieye::parking::ApMapStatus_JointMatch* add_joint_match();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_JointMatch >&
      joint_match() const;

  // repeated .minieye.parking.ApMapStatus.SemanticMatch semantic_match = 7;
  int semantic_match_size() const;
  private:
  int _internal_semantic_match_size() const;
  public:
  void clear_semantic_match();
  ::minieye::parking::ApMapStatus_SemanticMatch* mutable_semantic_match(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_SemanticMatch >*
      mutable_semantic_match();
  private:
  const ::minieye::parking::ApMapStatus_SemanticMatch& _internal_semantic_match(int index) const;
  ::minieye::parking::ApMapStatus_SemanticMatch* _internal_add_semantic_match();
  public:
  const ::minieye::parking::ApMapStatus_SemanticMatch& semantic_match(int index) const;
  ::minieye::parking::ApMapStatus_SemanticMatch* add_semantic_match();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_SemanticMatch >&
      semantic_match() const;

  // repeated .minieye.parking.ApMapStatus.Pose odom_points = 8;
  int odom_points_size() const;
  private:
  int _internal_odom_points_size() const;
  public:
  void clear_odom_points();
  ::minieye::parking::ApMapStatus_Pose* mutable_odom_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_Pose >*
      mutable_odom_points();
  private:
  const ::minieye::parking::ApMapStatus_Pose& _internal_odom_points(int index) const;
  ::minieye::parking::ApMapStatus_Pose* _internal_add_odom_points();
  public:
  const ::minieye::parking::ApMapStatus_Pose& odom_points(int index) const;
  ::minieye::parking::ApMapStatus_Pose* add_odom_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_Pose >&
      odom_points() const;

  // .minieye.parking.ApMapStatus.Map rt_map = 4;
  bool has_rt_map() const;
  private:
  bool _internal_has_rt_map() const;
  public:
  void clear_rt_map();
  const ::minieye::parking::ApMapStatus_Map& rt_map() const;
  ::minieye::parking::ApMapStatus_Map* release_rt_map();
  ::minieye::parking::ApMapStatus_Map* mutable_rt_map();
  void set_allocated_rt_map(::minieye::parking::ApMapStatus_Map* rt_map);
  private:
  const ::minieye::parking::ApMapStatus_Map& _internal_rt_map() const;
  ::minieye::parking::ApMapStatus_Map* _internal_mutable_rt_map();
  public:
  void unsafe_arena_set_allocated_rt_map(
      ::minieye::parking::ApMapStatus_Map* rt_map);
  ::minieye::parking::ApMapStatus_Map* unsafe_arena_release_rt_map();

  // .minieye.parking.ApMapStatus.Map ap_map = 5;
  bool has_ap_map() const;
  private:
  bool _internal_has_ap_map() const;
  public:
  void clear_ap_map();
  const ::minieye::parking::ApMapStatus_Map& ap_map() const;
  ::minieye::parking::ApMapStatus_Map* release_ap_map();
  ::minieye::parking::ApMapStatus_Map* mutable_ap_map();
  void set_allocated_ap_map(::minieye::parking::ApMapStatus_Map* ap_map);
  private:
  const ::minieye::parking::ApMapStatus_Map& _internal_ap_map() const;
  ::minieye::parking::ApMapStatus_Map* _internal_mutable_ap_map();
  public:
  void unsafe_arena_set_allocated_ap_map(
      ::minieye::parking::ApMapStatus_Map* ap_map);
  ::minieye::parking::ApMapStatus_Map* unsafe_arena_release_ap_map();

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 2;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 frame_id = 3;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.parking.ApMapStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_JointMatch > joint_match_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_SemanticMatch > semantic_match_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_Pose > odom_points_;
  ::minieye::parking::ApMapStatus_Map* rt_map_;
  ::minieye::parking::ApMapStatus_Map* ap_map_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ap_5fmap_5fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ApMapStatus_Pose

// double x = 1;
inline void ApMapStatus_Pose::clear_x() {
  x_ = 0;
}
inline double ApMapStatus_Pose::_internal_x() const {
  return x_;
}
inline double ApMapStatus_Pose::x() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.Pose.x)
  return _internal_x();
}
inline void ApMapStatus_Pose::_internal_set_x(double value) {
  
  x_ = value;
}
inline void ApMapStatus_Pose::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapStatus.Pose.x)
}

// double y = 2;
inline void ApMapStatus_Pose::clear_y() {
  y_ = 0;
}
inline double ApMapStatus_Pose::_internal_y() const {
  return y_;
}
inline double ApMapStatus_Pose::y() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.Pose.y)
  return _internal_y();
}
inline void ApMapStatus_Pose::_internal_set_y(double value) {
  
  y_ = value;
}
inline void ApMapStatus_Pose::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapStatus.Pose.y)
}

// double z = 3;
inline void ApMapStatus_Pose::clear_z() {
  z_ = 0;
}
inline double ApMapStatus_Pose::_internal_z() const {
  return z_;
}
inline double ApMapStatus_Pose::z() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.Pose.z)
  return _internal_z();
}
inline void ApMapStatus_Pose::_internal_set_z(double value) {
  
  z_ = value;
}
inline void ApMapStatus_Pose::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapStatus.Pose.z)
}

// double qw = 4;
inline void ApMapStatus_Pose::clear_qw() {
  qw_ = 0;
}
inline double ApMapStatus_Pose::_internal_qw() const {
  return qw_;
}
inline double ApMapStatus_Pose::qw() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.Pose.qw)
  return _internal_qw();
}
inline void ApMapStatus_Pose::_internal_set_qw(double value) {
  
  qw_ = value;
}
inline void ApMapStatus_Pose::set_qw(double value) {
  _internal_set_qw(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapStatus.Pose.qw)
}

// double qx = 5;
inline void ApMapStatus_Pose::clear_qx() {
  qx_ = 0;
}
inline double ApMapStatus_Pose::_internal_qx() const {
  return qx_;
}
inline double ApMapStatus_Pose::qx() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.Pose.qx)
  return _internal_qx();
}
inline void ApMapStatus_Pose::_internal_set_qx(double value) {
  
  qx_ = value;
}
inline void ApMapStatus_Pose::set_qx(double value) {
  _internal_set_qx(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapStatus.Pose.qx)
}

// double qy = 6;
inline void ApMapStatus_Pose::clear_qy() {
  qy_ = 0;
}
inline double ApMapStatus_Pose::_internal_qy() const {
  return qy_;
}
inline double ApMapStatus_Pose::qy() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.Pose.qy)
  return _internal_qy();
}
inline void ApMapStatus_Pose::_internal_set_qy(double value) {
  
  qy_ = value;
}
inline void ApMapStatus_Pose::set_qy(double value) {
  _internal_set_qy(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapStatus.Pose.qy)
}

// double qz = 7;
inline void ApMapStatus_Pose::clear_qz() {
  qz_ = 0;
}
inline double ApMapStatus_Pose::_internal_qz() const {
  return qz_;
}
inline double ApMapStatus_Pose::qz() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.Pose.qz)
  return _internal_qz();
}
inline void ApMapStatus_Pose::_internal_set_qz(double value) {
  
  qz_ = value;
}
inline void ApMapStatus_Pose::set_qz(double value) {
  _internal_set_qz(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapStatus.Pose.qz)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ApMapStatus_Map

// map<int64, .minieye.parking.ApMapStatus.Pose> joints = 1;
inline int ApMapStatus_Map::_internal_joints_size() const {
  return joints_.size();
}
inline int ApMapStatus_Map::joints_size() const {
  return _internal_joints_size();
}
inline void ApMapStatus_Map::clear_joints() {
  joints_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose >&
ApMapStatus_Map::_internal_joints() const {
  return joints_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose >&
ApMapStatus_Map::joints() const {
  // @@protoc_insertion_point(field_map:minieye.parking.ApMapStatus.Map.joints)
  return _internal_joints();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose >*
ApMapStatus_Map::_internal_mutable_joints() {
  return joints_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::minieye::parking::ApMapStatus_Pose >*
ApMapStatus_Map::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_map:minieye.parking.ApMapStatus.Map.joints)
  return _internal_mutable_joints();
}

// -------------------------------------------------------------------

// ApMapStatus_JointMatch

// int64 rt_joint_id = 1;
inline void ApMapStatus_JointMatch::clear_rt_joint_id() {
  rt_joint_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApMapStatus_JointMatch::_internal_rt_joint_id() const {
  return rt_joint_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApMapStatus_JointMatch::rt_joint_id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.JointMatch.rt_joint_id)
  return _internal_rt_joint_id();
}
inline void ApMapStatus_JointMatch::_internal_set_rt_joint_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rt_joint_id_ = value;
}
inline void ApMapStatus_JointMatch::set_rt_joint_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rt_joint_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapStatus.JointMatch.rt_joint_id)
}

// int64 ap_joint_id = 2;
inline void ApMapStatus_JointMatch::clear_ap_joint_id() {
  ap_joint_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApMapStatus_JointMatch::_internal_ap_joint_id() const {
  return ap_joint_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApMapStatus_JointMatch::ap_joint_id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.JointMatch.ap_joint_id)
  return _internal_ap_joint_id();
}
inline void ApMapStatus_JointMatch::_internal_set_ap_joint_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ap_joint_id_ = value;
}
inline void ApMapStatus_JointMatch::set_ap_joint_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ap_joint_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapStatus.JointMatch.ap_joint_id)
}

// -------------------------------------------------------------------

// ApMapStatus_SemanticMatch

// .minieye.parking.ApMapStatus.Pose ap_point = 1;
inline bool ApMapStatus_SemanticMatch::_internal_has_ap_point() const {
  return this != internal_default_instance() && ap_point_ != nullptr;
}
inline bool ApMapStatus_SemanticMatch::has_ap_point() const {
  return _internal_has_ap_point();
}
inline void ApMapStatus_SemanticMatch::clear_ap_point() {
  if (GetArena() == nullptr && ap_point_ != nullptr) {
    delete ap_point_;
  }
  ap_point_ = nullptr;
}
inline const ::minieye::parking::ApMapStatus_Pose& ApMapStatus_SemanticMatch::_internal_ap_point() const {
  const ::minieye::parking::ApMapStatus_Pose* p = ap_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::ApMapStatus_Pose*>(
      &::minieye::parking::_ApMapStatus_Pose_default_instance_);
}
inline const ::minieye::parking::ApMapStatus_Pose& ApMapStatus_SemanticMatch::ap_point() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.SemanticMatch.ap_point)
  return _internal_ap_point();
}
inline void ApMapStatus_SemanticMatch::unsafe_arena_set_allocated_ap_point(
    ::minieye::parking::ApMapStatus_Pose* ap_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ap_point_);
  }
  ap_point_ = ap_point;
  if (ap_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ApMapStatus.SemanticMatch.ap_point)
}
inline ::minieye::parking::ApMapStatus_Pose* ApMapStatus_SemanticMatch::release_ap_point() {
  auto temp = unsafe_arena_release_ap_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::ApMapStatus_Pose* ApMapStatus_SemanticMatch::unsafe_arena_release_ap_point() {
  // @@protoc_insertion_point(field_release:minieye.parking.ApMapStatus.SemanticMatch.ap_point)
  
  ::minieye::parking::ApMapStatus_Pose* temp = ap_point_;
  ap_point_ = nullptr;
  return temp;
}
inline ::minieye::parking::ApMapStatus_Pose* ApMapStatus_SemanticMatch::_internal_mutable_ap_point() {
  
  if (ap_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::ApMapStatus_Pose>(GetArena());
    ap_point_ = p;
  }
  return ap_point_;
}
inline ::minieye::parking::ApMapStatus_Pose* ApMapStatus_SemanticMatch::mutable_ap_point() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ApMapStatus.SemanticMatch.ap_point)
  return _internal_mutable_ap_point();
}
inline void ApMapStatus_SemanticMatch::set_allocated_ap_point(::minieye::parking::ApMapStatus_Pose* ap_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ap_point_;
  }
  if (ap_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ap_point);
    if (message_arena != submessage_arena) {
      ap_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ap_point, submessage_arena);
    }
    
  } else {
    
  }
  ap_point_ = ap_point;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ApMapStatus.SemanticMatch.ap_point)
}

// .minieye.parking.ApMapStatus.Pose rt_point = 2;
inline bool ApMapStatus_SemanticMatch::_internal_has_rt_point() const {
  return this != internal_default_instance() && rt_point_ != nullptr;
}
inline bool ApMapStatus_SemanticMatch::has_rt_point() const {
  return _internal_has_rt_point();
}
inline void ApMapStatus_SemanticMatch::clear_rt_point() {
  if (GetArena() == nullptr && rt_point_ != nullptr) {
    delete rt_point_;
  }
  rt_point_ = nullptr;
}
inline const ::minieye::parking::ApMapStatus_Pose& ApMapStatus_SemanticMatch::_internal_rt_point() const {
  const ::minieye::parking::ApMapStatus_Pose* p = rt_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::ApMapStatus_Pose*>(
      &::minieye::parking::_ApMapStatus_Pose_default_instance_);
}
inline const ::minieye::parking::ApMapStatus_Pose& ApMapStatus_SemanticMatch::rt_point() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.SemanticMatch.rt_point)
  return _internal_rt_point();
}
inline void ApMapStatus_SemanticMatch::unsafe_arena_set_allocated_rt_point(
    ::minieye::parking::ApMapStatus_Pose* rt_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rt_point_);
  }
  rt_point_ = rt_point;
  if (rt_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ApMapStatus.SemanticMatch.rt_point)
}
inline ::minieye::parking::ApMapStatus_Pose* ApMapStatus_SemanticMatch::release_rt_point() {
  auto temp = unsafe_arena_release_rt_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::ApMapStatus_Pose* ApMapStatus_SemanticMatch::unsafe_arena_release_rt_point() {
  // @@protoc_insertion_point(field_release:minieye.parking.ApMapStatus.SemanticMatch.rt_point)
  
  ::minieye::parking::ApMapStatus_Pose* temp = rt_point_;
  rt_point_ = nullptr;
  return temp;
}
inline ::minieye::parking::ApMapStatus_Pose* ApMapStatus_SemanticMatch::_internal_mutable_rt_point() {
  
  if (rt_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::ApMapStatus_Pose>(GetArena());
    rt_point_ = p;
  }
  return rt_point_;
}
inline ::minieye::parking::ApMapStatus_Pose* ApMapStatus_SemanticMatch::mutable_rt_point() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ApMapStatus.SemanticMatch.rt_point)
  return _internal_mutable_rt_point();
}
inline void ApMapStatus_SemanticMatch::set_allocated_rt_point(::minieye::parking::ApMapStatus_Pose* rt_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rt_point_;
  }
  if (rt_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rt_point);
    if (message_arena != submessage_arena) {
      rt_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rt_point, submessage_arena);
    }
    
  } else {
    
  }
  rt_point_ = rt_point;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ApMapStatus.SemanticMatch.rt_point)
}

// -------------------------------------------------------------------

// ApMapStatus

// uint64 timestamp = 1;
inline void ApMapStatus::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApMapStatus::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApMapStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.timestamp)
  return _internal_timestamp();
}
inline void ApMapStatus::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ApMapStatus::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapStatus.timestamp)
}

// uint64 tick = 2;
inline void ApMapStatus::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApMapStatus::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApMapStatus::tick() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.tick)
  return _internal_tick();
}
inline void ApMapStatus::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void ApMapStatus::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapStatus.tick)
}

// uint64 frame_id = 3;
inline void ApMapStatus::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApMapStatus::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ApMapStatus::frame_id() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.frame_id)
  return _internal_frame_id();
}
inline void ApMapStatus::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void ApMapStatus::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:minieye.parking.ApMapStatus.frame_id)
}

// .minieye.parking.ApMapStatus.Map rt_map = 4;
inline bool ApMapStatus::_internal_has_rt_map() const {
  return this != internal_default_instance() && rt_map_ != nullptr;
}
inline bool ApMapStatus::has_rt_map() const {
  return _internal_has_rt_map();
}
inline void ApMapStatus::clear_rt_map() {
  if (GetArena() == nullptr && rt_map_ != nullptr) {
    delete rt_map_;
  }
  rt_map_ = nullptr;
}
inline const ::minieye::parking::ApMapStatus_Map& ApMapStatus::_internal_rt_map() const {
  const ::minieye::parking::ApMapStatus_Map* p = rt_map_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::ApMapStatus_Map*>(
      &::minieye::parking::_ApMapStatus_Map_default_instance_);
}
inline const ::minieye::parking::ApMapStatus_Map& ApMapStatus::rt_map() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.rt_map)
  return _internal_rt_map();
}
inline void ApMapStatus::unsafe_arena_set_allocated_rt_map(
    ::minieye::parking::ApMapStatus_Map* rt_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rt_map_);
  }
  rt_map_ = rt_map;
  if (rt_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ApMapStatus.rt_map)
}
inline ::minieye::parking::ApMapStatus_Map* ApMapStatus::release_rt_map() {
  auto temp = unsafe_arena_release_rt_map();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::ApMapStatus_Map* ApMapStatus::unsafe_arena_release_rt_map() {
  // @@protoc_insertion_point(field_release:minieye.parking.ApMapStatus.rt_map)
  
  ::minieye::parking::ApMapStatus_Map* temp = rt_map_;
  rt_map_ = nullptr;
  return temp;
}
inline ::minieye::parking::ApMapStatus_Map* ApMapStatus::_internal_mutable_rt_map() {
  
  if (rt_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::ApMapStatus_Map>(GetArena());
    rt_map_ = p;
  }
  return rt_map_;
}
inline ::minieye::parking::ApMapStatus_Map* ApMapStatus::mutable_rt_map() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ApMapStatus.rt_map)
  return _internal_mutable_rt_map();
}
inline void ApMapStatus::set_allocated_rt_map(::minieye::parking::ApMapStatus_Map* rt_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rt_map_;
  }
  if (rt_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rt_map);
    if (message_arena != submessage_arena) {
      rt_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rt_map, submessage_arena);
    }
    
  } else {
    
  }
  rt_map_ = rt_map;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ApMapStatus.rt_map)
}

// .minieye.parking.ApMapStatus.Map ap_map = 5;
inline bool ApMapStatus::_internal_has_ap_map() const {
  return this != internal_default_instance() && ap_map_ != nullptr;
}
inline bool ApMapStatus::has_ap_map() const {
  return _internal_has_ap_map();
}
inline void ApMapStatus::clear_ap_map() {
  if (GetArena() == nullptr && ap_map_ != nullptr) {
    delete ap_map_;
  }
  ap_map_ = nullptr;
}
inline const ::minieye::parking::ApMapStatus_Map& ApMapStatus::_internal_ap_map() const {
  const ::minieye::parking::ApMapStatus_Map* p = ap_map_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::parking::ApMapStatus_Map*>(
      &::minieye::parking::_ApMapStatus_Map_default_instance_);
}
inline const ::minieye::parking::ApMapStatus_Map& ApMapStatus::ap_map() const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.ap_map)
  return _internal_ap_map();
}
inline void ApMapStatus::unsafe_arena_set_allocated_ap_map(
    ::minieye::parking::ApMapStatus_Map* ap_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ap_map_);
  }
  ap_map_ = ap_map;
  if (ap_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.parking.ApMapStatus.ap_map)
}
inline ::minieye::parking::ApMapStatus_Map* ApMapStatus::release_ap_map() {
  auto temp = unsafe_arena_release_ap_map();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::parking::ApMapStatus_Map* ApMapStatus::unsafe_arena_release_ap_map() {
  // @@protoc_insertion_point(field_release:minieye.parking.ApMapStatus.ap_map)
  
  ::minieye::parking::ApMapStatus_Map* temp = ap_map_;
  ap_map_ = nullptr;
  return temp;
}
inline ::minieye::parking::ApMapStatus_Map* ApMapStatus::_internal_mutable_ap_map() {
  
  if (ap_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::parking::ApMapStatus_Map>(GetArena());
    ap_map_ = p;
  }
  return ap_map_;
}
inline ::minieye::parking::ApMapStatus_Map* ApMapStatus::mutable_ap_map() {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ApMapStatus.ap_map)
  return _internal_mutable_ap_map();
}
inline void ApMapStatus::set_allocated_ap_map(::minieye::parking::ApMapStatus_Map* ap_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ap_map_;
  }
  if (ap_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ap_map);
    if (message_arena != submessage_arena) {
      ap_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ap_map, submessage_arena);
    }
    
  } else {
    
  }
  ap_map_ = ap_map;
  // @@protoc_insertion_point(field_set_allocated:minieye.parking.ApMapStatus.ap_map)
}

// repeated .minieye.parking.ApMapStatus.JointMatch joint_match = 6;
inline int ApMapStatus::_internal_joint_match_size() const {
  return joint_match_.size();
}
inline int ApMapStatus::joint_match_size() const {
  return _internal_joint_match_size();
}
inline void ApMapStatus::clear_joint_match() {
  joint_match_.Clear();
}
inline ::minieye::parking::ApMapStatus_JointMatch* ApMapStatus::mutable_joint_match(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ApMapStatus.joint_match)
  return joint_match_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_JointMatch >*
ApMapStatus::mutable_joint_match() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.ApMapStatus.joint_match)
  return &joint_match_;
}
inline const ::minieye::parking::ApMapStatus_JointMatch& ApMapStatus::_internal_joint_match(int index) const {
  return joint_match_.Get(index);
}
inline const ::minieye::parking::ApMapStatus_JointMatch& ApMapStatus::joint_match(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.joint_match)
  return _internal_joint_match(index);
}
inline ::minieye::parking::ApMapStatus_JointMatch* ApMapStatus::_internal_add_joint_match() {
  return joint_match_.Add();
}
inline ::minieye::parking::ApMapStatus_JointMatch* ApMapStatus::add_joint_match() {
  // @@protoc_insertion_point(field_add:minieye.parking.ApMapStatus.joint_match)
  return _internal_add_joint_match();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_JointMatch >&
ApMapStatus::joint_match() const {
  // @@protoc_insertion_point(field_list:minieye.parking.ApMapStatus.joint_match)
  return joint_match_;
}

// repeated .minieye.parking.ApMapStatus.SemanticMatch semantic_match = 7;
inline int ApMapStatus::_internal_semantic_match_size() const {
  return semantic_match_.size();
}
inline int ApMapStatus::semantic_match_size() const {
  return _internal_semantic_match_size();
}
inline void ApMapStatus::clear_semantic_match() {
  semantic_match_.Clear();
}
inline ::minieye::parking::ApMapStatus_SemanticMatch* ApMapStatus::mutable_semantic_match(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ApMapStatus.semantic_match)
  return semantic_match_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_SemanticMatch >*
ApMapStatus::mutable_semantic_match() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.ApMapStatus.semantic_match)
  return &semantic_match_;
}
inline const ::minieye::parking::ApMapStatus_SemanticMatch& ApMapStatus::_internal_semantic_match(int index) const {
  return semantic_match_.Get(index);
}
inline const ::minieye::parking::ApMapStatus_SemanticMatch& ApMapStatus::semantic_match(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.semantic_match)
  return _internal_semantic_match(index);
}
inline ::minieye::parking::ApMapStatus_SemanticMatch* ApMapStatus::_internal_add_semantic_match() {
  return semantic_match_.Add();
}
inline ::minieye::parking::ApMapStatus_SemanticMatch* ApMapStatus::add_semantic_match() {
  // @@protoc_insertion_point(field_add:minieye.parking.ApMapStatus.semantic_match)
  return _internal_add_semantic_match();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_SemanticMatch >&
ApMapStatus::semantic_match() const {
  // @@protoc_insertion_point(field_list:minieye.parking.ApMapStatus.semantic_match)
  return semantic_match_;
}

// repeated .minieye.parking.ApMapStatus.Pose odom_points = 8;
inline int ApMapStatus::_internal_odom_points_size() const {
  return odom_points_.size();
}
inline int ApMapStatus::odom_points_size() const {
  return _internal_odom_points_size();
}
inline void ApMapStatus::clear_odom_points() {
  odom_points_.Clear();
}
inline ::minieye::parking::ApMapStatus_Pose* ApMapStatus::mutable_odom_points(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.parking.ApMapStatus.odom_points)
  return odom_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_Pose >*
ApMapStatus::mutable_odom_points() {
  // @@protoc_insertion_point(field_mutable_list:minieye.parking.ApMapStatus.odom_points)
  return &odom_points_;
}
inline const ::minieye::parking::ApMapStatus_Pose& ApMapStatus::_internal_odom_points(int index) const {
  return odom_points_.Get(index);
}
inline const ::minieye::parking::ApMapStatus_Pose& ApMapStatus::odom_points(int index) const {
  // @@protoc_insertion_point(field_get:minieye.parking.ApMapStatus.odom_points)
  return _internal_odom_points(index);
}
inline ::minieye::parking::ApMapStatus_Pose* ApMapStatus::_internal_add_odom_points() {
  return odom_points_.Add();
}
inline ::minieye::parking::ApMapStatus_Pose* ApMapStatus::add_odom_points() {
  // @@protoc_insertion_point(field_add:minieye.parking.ApMapStatus.odom_points)
  return _internal_add_odom_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::parking::ApMapStatus_Pose >&
ApMapStatus::odom_points() const {
  // @@protoc_insertion_point(field_list:minieye.parking.ApMapStatus.odom_points)
  return odom_points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace parking
}  // namespace minieye

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ap_5fmap_5fstatus_2eproto
