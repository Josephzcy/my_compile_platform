// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ihc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ihc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ihc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "geometry.pb.h"
#include "data_source.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ihc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ihc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ihc_2eproto;
namespace perception {
class Ihc;
class IhcDefaultTypeInternal;
extern IhcDefaultTypeInternal _Ihc_default_instance_;
class Ihc_IhcDetectObject;
class Ihc_IhcDetectObjectDefaultTypeInternal;
extern Ihc_IhcDetectObjectDefaultTypeInternal _Ihc_IhcDetectObject_default_instance_;
class Ihc_IhcSignal;
class Ihc_IhcSignalDefaultTypeInternal;
extern Ihc_IhcSignalDefaultTypeInternal _Ihc_IhcSignal_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::Ihc* Arena::CreateMaybeMessage<::perception::Ihc>(Arena*);
template<> ::perception::Ihc_IhcDetectObject* Arena::CreateMaybeMessage<::perception::Ihc_IhcDetectObject>(Arena*);
template<> ::perception::Ihc_IhcSignal* Arena::CreateMaybeMessage<::perception::Ihc_IhcSignal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

enum Ihc_IhcSignalType : int {
  Ihc_IhcSignalType_kLightInvalid = 0,
  Ihc_IhcSignalType_kLightOff = 1,
  Ihc_IhcSignalType_kHighBeamOn = 2,
  Ihc_IhcSignalType_kDippedBeamOn = 3,
  Ihc_IhcSignalType_Ihc_IhcSignalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Ihc_IhcSignalType_Ihc_IhcSignalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Ihc_IhcSignalType_IsValid(int value);
constexpr Ihc_IhcSignalType Ihc_IhcSignalType_IhcSignalType_MIN = Ihc_IhcSignalType_kLightInvalid;
constexpr Ihc_IhcSignalType Ihc_IhcSignalType_IhcSignalType_MAX = Ihc_IhcSignalType_kDippedBeamOn;
constexpr int Ihc_IhcSignalType_IhcSignalType_ARRAYSIZE = Ihc_IhcSignalType_IhcSignalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ihc_IhcSignalType_descriptor();
template<typename T>
inline const std::string& Ihc_IhcSignalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ihc_IhcSignalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ihc_IhcSignalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ihc_IhcSignalType_descriptor(), enum_t_value);
}
inline bool Ihc_IhcSignalType_Parse(
    const std::string& name, Ihc_IhcSignalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ihc_IhcSignalType>(
    Ihc_IhcSignalType_descriptor(), name, value);
}
// ===================================================================

class Ihc_IhcDetectObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Ihc.IhcDetectObject) */ {
 public:
  inline Ihc_IhcDetectObject() : Ihc_IhcDetectObject(nullptr) {};
  virtual ~Ihc_IhcDetectObject();

  Ihc_IhcDetectObject(const Ihc_IhcDetectObject& from);
  Ihc_IhcDetectObject(Ihc_IhcDetectObject&& from) noexcept
    : Ihc_IhcDetectObject() {
    *this = ::std::move(from);
  }

  inline Ihc_IhcDetectObject& operator=(const Ihc_IhcDetectObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ihc_IhcDetectObject& operator=(Ihc_IhcDetectObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ihc_IhcDetectObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ihc_IhcDetectObject* internal_default_instance() {
    return reinterpret_cast<const Ihc_IhcDetectObject*>(
               &_Ihc_IhcDetectObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ihc_IhcDetectObject& a, Ihc_IhcDetectObject& b) {
    a.Swap(&b);
  }
  inline void Swap(Ihc_IhcDetectObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ihc_IhcDetectObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ihc_IhcDetectObject* New() const final {
    return CreateMaybeMessage<Ihc_IhcDetectObject>(nullptr);
  }

  Ihc_IhcDetectObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ihc_IhcDetectObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ihc_IhcDetectObject& from);
  void MergeFrom(const Ihc_IhcDetectObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ihc_IhcDetectObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Ihc.IhcDetectObject";
  }
  protected:
  explicit Ihc_IhcDetectObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ihc_2eproto);
    return ::descriptor_table_ihc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetRectFieldNumber = 1,
    kConfidenceFieldNumber = 2,
    kHitTypeFieldNumber = 3,
  };
  // .perception.common.Rect2f det_rect = 1;
  bool has_det_rect() const;
  private:
  bool _internal_has_det_rect() const;
  public:
  void clear_det_rect();
  const ::perception::common::Rect2f& det_rect() const;
  ::perception::common::Rect2f* release_det_rect();
  ::perception::common::Rect2f* mutable_det_rect();
  void set_allocated_det_rect(::perception::common::Rect2f* det_rect);
  private:
  const ::perception::common::Rect2f& _internal_det_rect() const;
  ::perception::common::Rect2f* _internal_mutable_det_rect();
  public:
  void unsafe_arena_set_allocated_det_rect(
      ::perception::common::Rect2f* det_rect);
  ::perception::common::Rect2f* unsafe_arena_release_det_rect();

  // float confidence = 2;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // int32 hit_type = 3;
  void clear_hit_type();
  ::PROTOBUF_NAMESPACE_ID::int32 hit_type() const;
  void set_hit_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hit_type() const;
  void _internal_set_hit_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Ihc.IhcDetectObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::Rect2f* det_rect_;
  float confidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 hit_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ihc_2eproto;
};
// -------------------------------------------------------------------

class Ihc_IhcSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Ihc.IhcSignal) */ {
 public:
  inline Ihc_IhcSignal() : Ihc_IhcSignal(nullptr) {};
  virtual ~Ihc_IhcSignal();

  Ihc_IhcSignal(const Ihc_IhcSignal& from);
  Ihc_IhcSignal(Ihc_IhcSignal&& from) noexcept
    : Ihc_IhcSignal() {
    *this = ::std::move(from);
  }

  inline Ihc_IhcSignal& operator=(const Ihc_IhcSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ihc_IhcSignal& operator=(Ihc_IhcSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ihc_IhcSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ihc_IhcSignal* internal_default_instance() {
    return reinterpret_cast<const Ihc_IhcSignal*>(
               &_Ihc_IhcSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ihc_IhcSignal& a, Ihc_IhcSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(Ihc_IhcSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ihc_IhcSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ihc_IhcSignal* New() const final {
    return CreateMaybeMessage<Ihc_IhcSignal>(nullptr);
  }

  Ihc_IhcSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ihc_IhcSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ihc_IhcSignal& from);
  void MergeFrom(const Ihc_IhcSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ihc_IhcSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Ihc.IhcSignal";
  }
  protected:
  explicit Ihc_IhcSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ihc_2eproto);
    return ::descriptor_table_ihc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlSignalFieldNumber = 1,
  };
  // .perception.Ihc.IhcSignalType control_signal = 1;
  void clear_control_signal();
  ::perception::Ihc_IhcSignalType control_signal() const;
  void set_control_signal(::perception::Ihc_IhcSignalType value);
  private:
  ::perception::Ihc_IhcSignalType _internal_control_signal() const;
  void _internal_set_control_signal(::perception::Ihc_IhcSignalType value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Ihc.IhcSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int control_signal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ihc_2eproto;
};
// -------------------------------------------------------------------

class Ihc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Ihc) */ {
 public:
  inline Ihc() : Ihc(nullptr) {};
  virtual ~Ihc();

  Ihc(const Ihc& from);
  Ihc(Ihc&& from) noexcept
    : Ihc() {
    *this = ::std::move(from);
  }

  inline Ihc& operator=(const Ihc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ihc& operator=(Ihc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ihc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ihc* internal_default_instance() {
    return reinterpret_cast<const Ihc*>(
               &_Ihc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Ihc& a, Ihc& b) {
    a.Swap(&b);
  }
  inline void Swap(Ihc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ihc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ihc* New() const final {
    return CreateMaybeMessage<Ihc>(nullptr);
  }

  Ihc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ihc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ihc& from);
  void MergeFrom(const Ihc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ihc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Ihc";
  }
  protected:
  explicit Ihc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ihc_2eproto);
    return ::descriptor_table_ihc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Ihc_IhcDetectObject IhcDetectObject;
  typedef Ihc_IhcSignal IhcSignal;

  typedef Ihc_IhcSignalType IhcSignalType;
  static constexpr IhcSignalType kLightInvalid =
    Ihc_IhcSignalType_kLightInvalid;
  static constexpr IhcSignalType kLightOff =
    Ihc_IhcSignalType_kLightOff;
  static constexpr IhcSignalType kHighBeamOn =
    Ihc_IhcSignalType_kHighBeamOn;
  static constexpr IhcSignalType kDippedBeamOn =
    Ihc_IhcSignalType_kDippedBeamOn;
  static inline bool IhcSignalType_IsValid(int value) {
    return Ihc_IhcSignalType_IsValid(value);
  }
  static constexpr IhcSignalType IhcSignalType_MIN =
    Ihc_IhcSignalType_IhcSignalType_MIN;
  static constexpr IhcSignalType IhcSignalType_MAX =
    Ihc_IhcSignalType_IhcSignalType_MAX;
  static constexpr int IhcSignalType_ARRAYSIZE =
    Ihc_IhcSignalType_IhcSignalType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  IhcSignalType_descriptor() {
    return Ihc_IhcSignalType_descriptor();
  }
  template<typename T>
  static inline const std::string& IhcSignalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IhcSignalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IhcSignalType_Name.");
    return Ihc_IhcSignalType_Name(enum_t_value);
  }
  static inline bool IhcSignalType_Parse(const std::string& name,
      IhcSignalType* value) {
    return Ihc_IhcSignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLightListFieldNumber = 3,
    kIhcSignalFieldNumber = 4,
    kFrameIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kDataSourceFieldNumber = 5,
  };
  // repeated .perception.Ihc.IhcDetectObject light_list = 3;
  int light_list_size() const;
  private:
  int _internal_light_list_size() const;
  public:
  void clear_light_list();
  ::perception::Ihc_IhcDetectObject* mutable_light_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Ihc_IhcDetectObject >*
      mutable_light_list();
  private:
  const ::perception::Ihc_IhcDetectObject& _internal_light_list(int index) const;
  ::perception::Ihc_IhcDetectObject* _internal_add_light_list();
  public:
  const ::perception::Ihc_IhcDetectObject& light_list(int index) const;
  ::perception::Ihc_IhcDetectObject* add_light_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Ihc_IhcDetectObject >&
      light_list() const;

  // .perception.Ihc.IhcSignal ihc_signal = 4;
  bool has_ihc_signal() const;
  private:
  bool _internal_has_ihc_signal() const;
  public:
  void clear_ihc_signal();
  const ::perception::Ihc_IhcSignal& ihc_signal() const;
  ::perception::Ihc_IhcSignal* release_ihc_signal();
  ::perception::Ihc_IhcSignal* mutable_ihc_signal();
  void set_allocated_ihc_signal(::perception::Ihc_IhcSignal* ihc_signal);
  private:
  const ::perception::Ihc_IhcSignal& _internal_ihc_signal() const;
  ::perception::Ihc_IhcSignal* _internal_mutable_ihc_signal();
  public:
  void unsafe_arena_set_allocated_ihc_signal(
      ::perception::Ihc_IhcSignal* ihc_signal);
  ::perception::Ihc_IhcSignal* unsafe_arena_release_ihc_signal();

  // uint64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .minieye.DataSource data_source = 5;
  void clear_data_source();
  ::minieye::DataSource data_source() const;
  void set_data_source(::minieye::DataSource value);
  private:
  ::minieye::DataSource _internal_data_source() const;
  void _internal_set_data_source(::minieye::DataSource value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Ihc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Ihc_IhcDetectObject > light_list_;
  ::perception::Ihc_IhcSignal* ihc_signal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  int data_source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ihc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ihc_IhcDetectObject

// .perception.common.Rect2f det_rect = 1;
inline bool Ihc_IhcDetectObject::_internal_has_det_rect() const {
  return this != internal_default_instance() && det_rect_ != nullptr;
}
inline bool Ihc_IhcDetectObject::has_det_rect() const {
  return _internal_has_det_rect();
}
inline const ::perception::common::Rect2f& Ihc_IhcDetectObject::_internal_det_rect() const {
  const ::perception::common::Rect2f* p = det_rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Rect2f*>(
      &::perception::common::_Rect2f_default_instance_);
}
inline const ::perception::common::Rect2f& Ihc_IhcDetectObject::det_rect() const {
  // @@protoc_insertion_point(field_get:perception.Ihc.IhcDetectObject.det_rect)
  return _internal_det_rect();
}
inline void Ihc_IhcDetectObject::unsafe_arena_set_allocated_det_rect(
    ::perception::common::Rect2f* det_rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(det_rect_);
  }
  det_rect_ = det_rect;
  if (det_rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.Ihc.IhcDetectObject.det_rect)
}
inline ::perception::common::Rect2f* Ihc_IhcDetectObject::release_det_rect() {
  auto temp = unsafe_arena_release_det_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Rect2f* Ihc_IhcDetectObject::unsafe_arena_release_det_rect() {
  // @@protoc_insertion_point(field_release:perception.Ihc.IhcDetectObject.det_rect)
  
  ::perception::common::Rect2f* temp = det_rect_;
  det_rect_ = nullptr;
  return temp;
}
inline ::perception::common::Rect2f* Ihc_IhcDetectObject::_internal_mutable_det_rect() {
  
  if (det_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Rect2f>(GetArena());
    det_rect_ = p;
  }
  return det_rect_;
}
inline ::perception::common::Rect2f* Ihc_IhcDetectObject::mutable_det_rect() {
  // @@protoc_insertion_point(field_mutable:perception.Ihc.IhcDetectObject.det_rect)
  return _internal_mutable_det_rect();
}
inline void Ihc_IhcDetectObject::set_allocated_det_rect(::perception::common::Rect2f* det_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(det_rect_);
  }
  if (det_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(det_rect)->GetArena();
    if (message_arena != submessage_arena) {
      det_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, det_rect, submessage_arena);
    }
    
  } else {
    
  }
  det_rect_ = det_rect;
  // @@protoc_insertion_point(field_set_allocated:perception.Ihc.IhcDetectObject.det_rect)
}

// float confidence = 2;
inline void Ihc_IhcDetectObject::clear_confidence() {
  confidence_ = 0;
}
inline float Ihc_IhcDetectObject::_internal_confidence() const {
  return confidence_;
}
inline float Ihc_IhcDetectObject::confidence() const {
  // @@protoc_insertion_point(field_get:perception.Ihc.IhcDetectObject.confidence)
  return _internal_confidence();
}
inline void Ihc_IhcDetectObject::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void Ihc_IhcDetectObject::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:perception.Ihc.IhcDetectObject.confidence)
}

// int32 hit_type = 3;
inline void Ihc_IhcDetectObject::clear_hit_type() {
  hit_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ihc_IhcDetectObject::_internal_hit_type() const {
  return hit_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ihc_IhcDetectObject::hit_type() const {
  // @@protoc_insertion_point(field_get:perception.Ihc.IhcDetectObject.hit_type)
  return _internal_hit_type();
}
inline void Ihc_IhcDetectObject::_internal_set_hit_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hit_type_ = value;
}
inline void Ihc_IhcDetectObject::set_hit_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hit_type(value);
  // @@protoc_insertion_point(field_set:perception.Ihc.IhcDetectObject.hit_type)
}

// -------------------------------------------------------------------

// Ihc_IhcSignal

// .perception.Ihc.IhcSignalType control_signal = 1;
inline void Ihc_IhcSignal::clear_control_signal() {
  control_signal_ = 0;
}
inline ::perception::Ihc_IhcSignalType Ihc_IhcSignal::_internal_control_signal() const {
  return static_cast< ::perception::Ihc_IhcSignalType >(control_signal_);
}
inline ::perception::Ihc_IhcSignalType Ihc_IhcSignal::control_signal() const {
  // @@protoc_insertion_point(field_get:perception.Ihc.IhcSignal.control_signal)
  return _internal_control_signal();
}
inline void Ihc_IhcSignal::_internal_set_control_signal(::perception::Ihc_IhcSignalType value) {
  
  control_signal_ = value;
}
inline void Ihc_IhcSignal::set_control_signal(::perception::Ihc_IhcSignalType value) {
  _internal_set_control_signal(value);
  // @@protoc_insertion_point(field_set:perception.Ihc.IhcSignal.control_signal)
}

// -------------------------------------------------------------------

// Ihc

// uint64 frame_id = 1;
inline void Ihc::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ihc::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ihc::frame_id() const {
  // @@protoc_insertion_point(field_get:perception.Ihc.frame_id)
  return _internal_frame_id();
}
inline void Ihc::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void Ihc::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:perception.Ihc.frame_id)
}

// uint64 timestamp = 2;
inline void Ihc::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ihc::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ihc::timestamp() const {
  // @@protoc_insertion_point(field_get:perception.Ihc.timestamp)
  return _internal_timestamp();
}
inline void Ihc::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Ihc::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perception.Ihc.timestamp)
}

// repeated .perception.Ihc.IhcDetectObject light_list = 3;
inline int Ihc::_internal_light_list_size() const {
  return light_list_.size();
}
inline int Ihc::light_list_size() const {
  return _internal_light_list_size();
}
inline void Ihc::clear_light_list() {
  light_list_.Clear();
}
inline ::perception::Ihc_IhcDetectObject* Ihc::mutable_light_list(int index) {
  // @@protoc_insertion_point(field_mutable:perception.Ihc.light_list)
  return light_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Ihc_IhcDetectObject >*
Ihc::mutable_light_list() {
  // @@protoc_insertion_point(field_mutable_list:perception.Ihc.light_list)
  return &light_list_;
}
inline const ::perception::Ihc_IhcDetectObject& Ihc::_internal_light_list(int index) const {
  return light_list_.Get(index);
}
inline const ::perception::Ihc_IhcDetectObject& Ihc::light_list(int index) const {
  // @@protoc_insertion_point(field_get:perception.Ihc.light_list)
  return _internal_light_list(index);
}
inline ::perception::Ihc_IhcDetectObject* Ihc::_internal_add_light_list() {
  return light_list_.Add();
}
inline ::perception::Ihc_IhcDetectObject* Ihc::add_light_list() {
  // @@protoc_insertion_point(field_add:perception.Ihc.light_list)
  return _internal_add_light_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Ihc_IhcDetectObject >&
Ihc::light_list() const {
  // @@protoc_insertion_point(field_list:perception.Ihc.light_list)
  return light_list_;
}

// .perception.Ihc.IhcSignal ihc_signal = 4;
inline bool Ihc::_internal_has_ihc_signal() const {
  return this != internal_default_instance() && ihc_signal_ != nullptr;
}
inline bool Ihc::has_ihc_signal() const {
  return _internal_has_ihc_signal();
}
inline void Ihc::clear_ihc_signal() {
  if (GetArena() == nullptr && ihc_signal_ != nullptr) {
    delete ihc_signal_;
  }
  ihc_signal_ = nullptr;
}
inline const ::perception::Ihc_IhcSignal& Ihc::_internal_ihc_signal() const {
  const ::perception::Ihc_IhcSignal* p = ihc_signal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::Ihc_IhcSignal*>(
      &::perception::_Ihc_IhcSignal_default_instance_);
}
inline const ::perception::Ihc_IhcSignal& Ihc::ihc_signal() const {
  // @@protoc_insertion_point(field_get:perception.Ihc.ihc_signal)
  return _internal_ihc_signal();
}
inline void Ihc::unsafe_arena_set_allocated_ihc_signal(
    ::perception::Ihc_IhcSignal* ihc_signal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ihc_signal_);
  }
  ihc_signal_ = ihc_signal;
  if (ihc_signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.Ihc.ihc_signal)
}
inline ::perception::Ihc_IhcSignal* Ihc::release_ihc_signal() {
  auto temp = unsafe_arena_release_ihc_signal();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::Ihc_IhcSignal* Ihc::unsafe_arena_release_ihc_signal() {
  // @@protoc_insertion_point(field_release:perception.Ihc.ihc_signal)
  
  ::perception::Ihc_IhcSignal* temp = ihc_signal_;
  ihc_signal_ = nullptr;
  return temp;
}
inline ::perception::Ihc_IhcSignal* Ihc::_internal_mutable_ihc_signal() {
  
  if (ihc_signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::Ihc_IhcSignal>(GetArena());
    ihc_signal_ = p;
  }
  return ihc_signal_;
}
inline ::perception::Ihc_IhcSignal* Ihc::mutable_ihc_signal() {
  // @@protoc_insertion_point(field_mutable:perception.Ihc.ihc_signal)
  return _internal_mutable_ihc_signal();
}
inline void Ihc::set_allocated_ihc_signal(::perception::Ihc_IhcSignal* ihc_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ihc_signal_;
  }
  if (ihc_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ihc_signal);
    if (message_arena != submessage_arena) {
      ihc_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ihc_signal, submessage_arena);
    }
    
  } else {
    
  }
  ihc_signal_ = ihc_signal;
  // @@protoc_insertion_point(field_set_allocated:perception.Ihc.ihc_signal)
}

// .minieye.DataSource data_source = 5;
inline void Ihc::clear_data_source() {
  data_source_ = 0;
}
inline ::minieye::DataSource Ihc::_internal_data_source() const {
  return static_cast< ::minieye::DataSource >(data_source_);
}
inline ::minieye::DataSource Ihc::data_source() const {
  // @@protoc_insertion_point(field_get:perception.Ihc.data_source)
  return _internal_data_source();
}
inline void Ihc::_internal_set_data_source(::minieye::DataSource value) {
  
  data_source_ = value;
}
inline void Ihc::set_data_source(::minieye::DataSource value) {
  _internal_set_data_source(value);
  // @@protoc_insertion_point(field_set:perception.Ihc.data_source)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perception::Ihc_IhcSignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::Ihc_IhcSignalType>() {
  return ::perception::Ihc_IhcSignalType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ihc_2eproto
