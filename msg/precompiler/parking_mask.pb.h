// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parking_mask.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parking_5fmask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parking_5fmask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parking_5fmask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parking_5fmask_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parking_5fmask_2eproto;
namespace perception {
class Detection;
class DetectionDefaultTypeInternal;
extern DetectionDefaultTypeInternal _Detection_default_instance_;
class Line;
class LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Lines;
class LinesDefaultTypeInternal;
extern LinesDefaultTypeInternal _Lines_default_instance_;
class LinesAddress;
class LinesAddressDefaultTypeInternal;
extern LinesAddressDefaultTypeInternal _LinesAddress_default_instance_;
class Point2i;
class Point2iDefaultTypeInternal;
extern Point2iDefaultTypeInternal _Point2i_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::Detection* Arena::CreateMaybeMessage<::perception::Detection>(Arena*);
template<> ::perception::Line* Arena::CreateMaybeMessage<::perception::Line>(Arena*);
template<> ::perception::Lines* Arena::CreateMaybeMessage<::perception::Lines>(Arena*);
template<> ::perception::LinesAddress* Arena::CreateMaybeMessage<::perception::LinesAddress>(Arena*);
template<> ::perception::Point2i* Arena::CreateMaybeMessage<::perception::Point2i>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

enum LineType : int {
  kParkingLine = 0,
  kLane = 1,
  kBump = 2,
  kArrow = 3,
  kGroundLine = 4,
  LineType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LineType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LineType_IsValid(int value);
constexpr LineType LineType_MIN = kParkingLine;
constexpr LineType LineType_MAX = kGroundLine;
constexpr int LineType_ARRAYSIZE = LineType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineType_descriptor();
template<typename T>
inline const std::string& LineType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LineType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LineType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LineType_descriptor(), enum_t_value);
}
inline bool LineType_Parse(
    const std::string& name, LineType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LineType>(
    LineType_descriptor(), name, value);
}
enum DetectType : int {
  kArrowStraight = 0,
  kArrowLeft = 1,
  kArrowRight = 2,
  kArrowUTurn = 3,
  kArrowStraightLeft = 4,
  kArrowStraightRight = 5,
  kArrowLeftRight = 6,
  kArrowStraightLeftRight = 7,
  kArrowStraightUTurn = 8,
  kArrowLeftTurn = 9,
  kArrowLeftMerge = 10,
  kArrowRightMerge = 11,
  kSpeedbumpOccupied = 12,
  kSpeedbumpUnoccupied = 13,
  DetectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DetectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DetectType_IsValid(int value);
constexpr DetectType DetectType_MIN = kArrowStraight;
constexpr DetectType DetectType_MAX = kSpeedbumpUnoccupied;
constexpr int DetectType_ARRAYSIZE = DetectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectType_descriptor();
template<typename T>
inline const std::string& DetectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DetectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DetectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DetectType_descriptor(), enum_t_value);
}
inline bool DetectType_Parse(
    const std::string& name, DetectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DetectType>(
    DetectType_descriptor(), name, value);
}
// ===================================================================

class Point2i PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Point2i) */ {
 public:
  inline Point2i() : Point2i(nullptr) {};
  virtual ~Point2i();

  Point2i(const Point2i& from);
  Point2i(Point2i&& from) noexcept
    : Point2i() {
    *this = ::std::move(from);
  }

  inline Point2i& operator=(const Point2i& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2i& operator=(Point2i&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2i& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2i* internal_default_instance() {
    return reinterpret_cast<const Point2i*>(
               &_Point2i_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point2i& a, Point2i& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2i* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2i* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2i* New() const final {
    return CreateMaybeMessage<Point2i>(nullptr);
  }

  Point2i* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2i>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2i& from);
  void MergeFrom(const Point2i& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2i* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Point2i";
  }
  protected:
  explicit Point2i(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fmask_2eproto);
    return ::descriptor_table_parking_5fmask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Point2i)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fmask_2eproto;
};
// -------------------------------------------------------------------

class Line PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Line) */ {
 public:
  inline Line() : Line(nullptr) {};
  virtual ~Line();

  Line(const Line& from);
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Line& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Line* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Line* New() const final {
    return CreateMaybeMessage<Line>(nullptr);
  }

  Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Line";
  }
  protected:
  explicit Line(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fmask_2eproto);
    return ::descriptor_table_parking_5fmask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssociatedCamidsFieldNumber = 5,
    kPtsListFieldNumber = 6,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kConfidenceFieldNumber = 3,
    kOccupiedFieldNumber = 4,
  };
  // repeated int32 associated_camids = 5;
  int associated_camids_size() const;
  private:
  int _internal_associated_camids_size() const;
  public:
  void clear_associated_camids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_associated_camids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_associated_camids() const;
  void _internal_add_associated_camids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_associated_camids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 associated_camids(int index) const;
  void set_associated_camids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_associated_camids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      associated_camids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_associated_camids();

  // repeated .perception.Point2i pts_list = 6;
  int pts_list_size() const;
  private:
  int _internal_pts_list_size() const;
  public:
  void clear_pts_list();
  ::perception::Point2i* mutable_pts_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2i >*
      mutable_pts_list();
  private:
  const ::perception::Point2i& _internal_pts_list(int index) const;
  ::perception::Point2i* _internal_add_pts_list();
  public:
  const ::perception::Point2i& pts_list(int index) const;
  ::perception::Point2i* add_pts_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2i >&
      pts_list() const;

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .perception.LineType type = 2;
  void clear_type();
  ::perception::LineType type() const;
  void set_type(::perception::LineType value);
  private:
  ::perception::LineType _internal_type() const;
  void _internal_set_type(::perception::LineType value);
  public:

  // float confidence = 3;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // bool occupied = 4;
  void clear_occupied();
  bool occupied() const;
  void set_occupied(bool value);
  private:
  bool _internal_occupied() const;
  void _internal_set_occupied(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Line)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > associated_camids_;
  mutable std::atomic<int> _associated_camids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2i > pts_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  float confidence_;
  bool occupied_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fmask_2eproto;
};
// -------------------------------------------------------------------

class Detection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Detection) */ {
 public:
  inline Detection() : Detection(nullptr) {};
  virtual ~Detection();

  Detection(const Detection& from);
  Detection(Detection&& from) noexcept
    : Detection() {
    *this = ::std::move(from);
  }

  inline Detection& operator=(const Detection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection& operator=(Detection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detection* internal_default_instance() {
    return reinterpret_cast<const Detection*>(
               &_Detection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Detection& a, Detection& b) {
    a.Swap(&b);
  }
  inline void Swap(Detection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detection* New() const final {
    return CreateMaybeMessage<Detection>(nullptr);
  }

  Detection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detection& from);
  void MergeFrom(const Detection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Detection";
  }
  protected:
  explicit Detection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fmask_2eproto);
    return ::descriptor_table_parking_5fmask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
    kAngleRadFieldNumber = 5,
    kScoreFieldNumber = 6,
    kTypeFieldNumber = 7,
    kOccupiedFieldNumber = 8,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float w = 3;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float h = 4;
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // float angle_rad = 5;
  void clear_angle_rad();
  float angle_rad() const;
  void set_angle_rad(float value);
  private:
  float _internal_angle_rad() const;
  void _internal_set_angle_rad(float value);
  public:

  // float score = 6;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // .perception.DetectType type = 7;
  void clear_type();
  ::perception::DetectType type() const;
  void set_type(::perception::DetectType value);
  private:
  ::perception::DetectType _internal_type() const;
  void _internal_set_type(::perception::DetectType value);
  public:

  // bool occupied = 8;
  void clear_occupied();
  bool occupied() const;
  void set_occupied(bool value);
  private:
  bool _internal_occupied() const;
  void _internal_set_occupied(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Detection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float w_;
  float h_;
  float angle_rad_;
  float score_;
  int type_;
  bool occupied_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fmask_2eproto;
};
// -------------------------------------------------------------------

class Lines PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Lines) */ {
 public:
  inline Lines() : Lines(nullptr) {};
  virtual ~Lines();

  Lines(const Lines& from);
  Lines(Lines&& from) noexcept
    : Lines() {
    *this = ::std::move(from);
  }

  inline Lines& operator=(const Lines& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lines& operator=(Lines&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lines& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lines* internal_default_instance() {
    return reinterpret_cast<const Lines*>(
               &_Lines_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Lines& a, Lines& b) {
    a.Swap(&b);
  }
  inline void Swap(Lines* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lines* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lines* New() const final {
    return CreateMaybeMessage<Lines>(nullptr);
  }

  Lines* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lines>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lines& from);
  void MergeFrom(const Lines& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lines* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Lines";
  }
  protected:
  explicit Lines(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fmask_2eproto);
    return ::descriptor_table_parking_5fmask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 4,
    kDetsFieldNumber = 5,
    kFrameIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // repeated .perception.Line lines = 4;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  ::perception::Line* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Line >*
      mutable_lines();
  private:
  const ::perception::Line& _internal_lines(int index) const;
  ::perception::Line* _internal_add_lines();
  public:
  const ::perception::Line& lines(int index) const;
  ::perception::Line* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Line >&
      lines() const;

  // repeated .perception.Detection dets = 5;
  int dets_size() const;
  private:
  int _internal_dets_size() const;
  public:
  void clear_dets();
  ::perception::Detection* mutable_dets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Detection >*
      mutable_dets();
  private:
  const ::perception::Detection& _internal_dets(int index) const;
  ::perception::Detection* _internal_add_dets();
  public:
  const ::perception::Detection& dets(int index) const;
  ::perception::Detection* add_dets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Detection >&
      dets() const;

  // uint64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Lines)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Line > lines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Detection > dets_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fmask_2eproto;
};
// -------------------------------------------------------------------

class LinesAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.LinesAddress) */ {
 public:
  inline LinesAddress() : LinesAddress(nullptr) {};
  virtual ~LinesAddress();

  LinesAddress(const LinesAddress& from);
  LinesAddress(LinesAddress&& from) noexcept
    : LinesAddress() {
    *this = ::std::move(from);
  }

  inline LinesAddress& operator=(const LinesAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinesAddress& operator=(LinesAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinesAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinesAddress* internal_default_instance() {
    return reinterpret_cast<const LinesAddress*>(
               &_LinesAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LinesAddress& a, LinesAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(LinesAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinesAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinesAddress* New() const final {
    return CreateMaybeMessage<LinesAddress>(nullptr);
  }

  LinesAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinesAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinesAddress& from);
  void MergeFrom(const LinesAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinesAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.LinesAddress";
  }
  protected:
  explicit LinesAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parking_5fmask_2eproto);
    return ::descriptor_table_parking_5fmask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // uint64 address = 2;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.LinesAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parking_5fmask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point2i

// int32 x = 1;
inline void Point2i::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point2i::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point2i::x() const {
  // @@protoc_insertion_point(field_get:perception.Point2i.x)
  return _internal_x();
}
inline void Point2i::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Point2i::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.Point2i.x)
}

// int32 y = 2;
inline void Point2i::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point2i::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point2i::y() const {
  // @@protoc_insertion_point(field_get:perception.Point2i.y)
  return _internal_y();
}
inline void Point2i::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Point2i::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.Point2i.y)
}

// -------------------------------------------------------------------

// Line

// int32 id = 1;
inline void Line::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::id() const {
  // @@protoc_insertion_point(field_get:perception.Line.id)
  return _internal_id();
}
inline void Line::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Line::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perception.Line.id)
}

// .perception.LineType type = 2;
inline void Line::clear_type() {
  type_ = 0;
}
inline ::perception::LineType Line::_internal_type() const {
  return static_cast< ::perception::LineType >(type_);
}
inline ::perception::LineType Line::type() const {
  // @@protoc_insertion_point(field_get:perception.Line.type)
  return _internal_type();
}
inline void Line::_internal_set_type(::perception::LineType value) {
  
  type_ = value;
}
inline void Line::set_type(::perception::LineType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perception.Line.type)
}

// float confidence = 3;
inline void Line::clear_confidence() {
  confidence_ = 0;
}
inline float Line::_internal_confidence() const {
  return confidence_;
}
inline float Line::confidence() const {
  // @@protoc_insertion_point(field_get:perception.Line.confidence)
  return _internal_confidence();
}
inline void Line::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void Line::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:perception.Line.confidence)
}

// bool occupied = 4;
inline void Line::clear_occupied() {
  occupied_ = false;
}
inline bool Line::_internal_occupied() const {
  return occupied_;
}
inline bool Line::occupied() const {
  // @@protoc_insertion_point(field_get:perception.Line.occupied)
  return _internal_occupied();
}
inline void Line::_internal_set_occupied(bool value) {
  
  occupied_ = value;
}
inline void Line::set_occupied(bool value) {
  _internal_set_occupied(value);
  // @@protoc_insertion_point(field_set:perception.Line.occupied)
}

// repeated int32 associated_camids = 5;
inline int Line::_internal_associated_camids_size() const {
  return associated_camids_.size();
}
inline int Line::associated_camids_size() const {
  return _internal_associated_camids_size();
}
inline void Line::clear_associated_camids() {
  associated_camids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::_internal_associated_camids(int index) const {
  return associated_camids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::associated_camids(int index) const {
  // @@protoc_insertion_point(field_get:perception.Line.associated_camids)
  return _internal_associated_camids(index);
}
inline void Line::set_associated_camids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  associated_camids_.Set(index, value);
  // @@protoc_insertion_point(field_set:perception.Line.associated_camids)
}
inline void Line::_internal_add_associated_camids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  associated_camids_.Add(value);
}
inline void Line::add_associated_camids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_associated_camids(value);
  // @@protoc_insertion_point(field_add:perception.Line.associated_camids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Line::_internal_associated_camids() const {
  return associated_camids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Line::associated_camids() const {
  // @@protoc_insertion_point(field_list:perception.Line.associated_camids)
  return _internal_associated_camids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Line::_internal_mutable_associated_camids() {
  return &associated_camids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Line::mutable_associated_camids() {
  // @@protoc_insertion_point(field_mutable_list:perception.Line.associated_camids)
  return _internal_mutable_associated_camids();
}

// repeated .perception.Point2i pts_list = 6;
inline int Line::_internal_pts_list_size() const {
  return pts_list_.size();
}
inline int Line::pts_list_size() const {
  return _internal_pts_list_size();
}
inline void Line::clear_pts_list() {
  pts_list_.Clear();
}
inline ::perception::Point2i* Line::mutable_pts_list(int index) {
  // @@protoc_insertion_point(field_mutable:perception.Line.pts_list)
  return pts_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2i >*
Line::mutable_pts_list() {
  // @@protoc_insertion_point(field_mutable_list:perception.Line.pts_list)
  return &pts_list_;
}
inline const ::perception::Point2i& Line::_internal_pts_list(int index) const {
  return pts_list_.Get(index);
}
inline const ::perception::Point2i& Line::pts_list(int index) const {
  // @@protoc_insertion_point(field_get:perception.Line.pts_list)
  return _internal_pts_list(index);
}
inline ::perception::Point2i* Line::_internal_add_pts_list() {
  return pts_list_.Add();
}
inline ::perception::Point2i* Line::add_pts_list() {
  // @@protoc_insertion_point(field_add:perception.Line.pts_list)
  return _internal_add_pts_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Point2i >&
Line::pts_list() const {
  // @@protoc_insertion_point(field_list:perception.Line.pts_list)
  return pts_list_;
}

// -------------------------------------------------------------------

// Detection

// float x = 1;
inline void Detection::clear_x() {
  x_ = 0;
}
inline float Detection::_internal_x() const {
  return x_;
}
inline float Detection::x() const {
  // @@protoc_insertion_point(field_get:perception.Detection.x)
  return _internal_x();
}
inline void Detection::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Detection::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:perception.Detection.x)
}

// float y = 2;
inline void Detection::clear_y() {
  y_ = 0;
}
inline float Detection::_internal_y() const {
  return y_;
}
inline float Detection::y() const {
  // @@protoc_insertion_point(field_get:perception.Detection.y)
  return _internal_y();
}
inline void Detection::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Detection::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:perception.Detection.y)
}

// float w = 3;
inline void Detection::clear_w() {
  w_ = 0;
}
inline float Detection::_internal_w() const {
  return w_;
}
inline float Detection::w() const {
  // @@protoc_insertion_point(field_get:perception.Detection.w)
  return _internal_w();
}
inline void Detection::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Detection::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:perception.Detection.w)
}

// float h = 4;
inline void Detection::clear_h() {
  h_ = 0;
}
inline float Detection::_internal_h() const {
  return h_;
}
inline float Detection::h() const {
  // @@protoc_insertion_point(field_get:perception.Detection.h)
  return _internal_h();
}
inline void Detection::_internal_set_h(float value) {
  
  h_ = value;
}
inline void Detection::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:perception.Detection.h)
}

// float angle_rad = 5;
inline void Detection::clear_angle_rad() {
  angle_rad_ = 0;
}
inline float Detection::_internal_angle_rad() const {
  return angle_rad_;
}
inline float Detection::angle_rad() const {
  // @@protoc_insertion_point(field_get:perception.Detection.angle_rad)
  return _internal_angle_rad();
}
inline void Detection::_internal_set_angle_rad(float value) {
  
  angle_rad_ = value;
}
inline void Detection::set_angle_rad(float value) {
  _internal_set_angle_rad(value);
  // @@protoc_insertion_point(field_set:perception.Detection.angle_rad)
}

// float score = 6;
inline void Detection::clear_score() {
  score_ = 0;
}
inline float Detection::_internal_score() const {
  return score_;
}
inline float Detection::score() const {
  // @@protoc_insertion_point(field_get:perception.Detection.score)
  return _internal_score();
}
inline void Detection::_internal_set_score(float value) {
  
  score_ = value;
}
inline void Detection::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:perception.Detection.score)
}

// .perception.DetectType type = 7;
inline void Detection::clear_type() {
  type_ = 0;
}
inline ::perception::DetectType Detection::_internal_type() const {
  return static_cast< ::perception::DetectType >(type_);
}
inline ::perception::DetectType Detection::type() const {
  // @@protoc_insertion_point(field_get:perception.Detection.type)
  return _internal_type();
}
inline void Detection::_internal_set_type(::perception::DetectType value) {
  
  type_ = value;
}
inline void Detection::set_type(::perception::DetectType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perception.Detection.type)
}

// bool occupied = 8;
inline void Detection::clear_occupied() {
  occupied_ = false;
}
inline bool Detection::_internal_occupied() const {
  return occupied_;
}
inline bool Detection::occupied() const {
  // @@protoc_insertion_point(field_get:perception.Detection.occupied)
  return _internal_occupied();
}
inline void Detection::_internal_set_occupied(bool value) {
  
  occupied_ = value;
}
inline void Detection::set_occupied(bool value) {
  _internal_set_occupied(value);
  // @@protoc_insertion_point(field_set:perception.Detection.occupied)
}

// -------------------------------------------------------------------

// Lines

// uint64 frame_id = 1;
inline void Lines::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Lines::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Lines::frame_id() const {
  // @@protoc_insertion_point(field_get:perception.Lines.frame_id)
  return _internal_frame_id();
}
inline void Lines::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void Lines::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:perception.Lines.frame_id)
}

// uint64 timestamp = 2;
inline void Lines::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Lines::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Lines::timestamp() const {
  // @@protoc_insertion_point(field_get:perception.Lines.timestamp)
  return _internal_timestamp();
}
inline void Lines::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Lines::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perception.Lines.timestamp)
}

// uint64 tick = 3;
inline void Lines::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Lines::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Lines::tick() const {
  // @@protoc_insertion_point(field_get:perception.Lines.tick)
  return _internal_tick();
}
inline void Lines::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void Lines::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:perception.Lines.tick)
}

// repeated .perception.Line lines = 4;
inline int Lines::_internal_lines_size() const {
  return lines_.size();
}
inline int Lines::lines_size() const {
  return _internal_lines_size();
}
inline void Lines::clear_lines() {
  lines_.Clear();
}
inline ::perception::Line* Lines::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:perception.Lines.lines)
  return lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Line >*
Lines::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:perception.Lines.lines)
  return &lines_;
}
inline const ::perception::Line& Lines::_internal_lines(int index) const {
  return lines_.Get(index);
}
inline const ::perception::Line& Lines::lines(int index) const {
  // @@protoc_insertion_point(field_get:perception.Lines.lines)
  return _internal_lines(index);
}
inline ::perception::Line* Lines::_internal_add_lines() {
  return lines_.Add();
}
inline ::perception::Line* Lines::add_lines() {
  // @@protoc_insertion_point(field_add:perception.Lines.lines)
  return _internal_add_lines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Line >&
Lines::lines() const {
  // @@protoc_insertion_point(field_list:perception.Lines.lines)
  return lines_;
}

// repeated .perception.Detection dets = 5;
inline int Lines::_internal_dets_size() const {
  return dets_.size();
}
inline int Lines::dets_size() const {
  return _internal_dets_size();
}
inline void Lines::clear_dets() {
  dets_.Clear();
}
inline ::perception::Detection* Lines::mutable_dets(int index) {
  // @@protoc_insertion_point(field_mutable:perception.Lines.dets)
  return dets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Detection >*
Lines::mutable_dets() {
  // @@protoc_insertion_point(field_mutable_list:perception.Lines.dets)
  return &dets_;
}
inline const ::perception::Detection& Lines::_internal_dets(int index) const {
  return dets_.Get(index);
}
inline const ::perception::Detection& Lines::dets(int index) const {
  // @@protoc_insertion_point(field_get:perception.Lines.dets)
  return _internal_dets(index);
}
inline ::perception::Detection* Lines::_internal_add_dets() {
  return dets_.Add();
}
inline ::perception::Detection* Lines::add_dets() {
  // @@protoc_insertion_point(field_add:perception.Lines.dets)
  return _internal_add_dets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Detection >&
Lines::dets() const {
  // @@protoc_insertion_point(field_list:perception.Lines.dets)
  return dets_;
}

// -------------------------------------------------------------------

// LinesAddress

// int32 size = 1;
inline void LinesAddress::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinesAddress::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinesAddress::size() const {
  // @@protoc_insertion_point(field_get:perception.LinesAddress.size)
  return _internal_size();
}
inline void LinesAddress::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void LinesAddress::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:perception.LinesAddress.size)
}

// uint64 address = 2;
inline void LinesAddress::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LinesAddress::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LinesAddress::address() const {
  // @@protoc_insertion_point(field_get:perception.LinesAddress.address)
  return _internal_address();
}
inline void LinesAddress::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void LinesAddress::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:perception.LinesAddress.address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perception::LineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::LineType>() {
  return ::perception::LineType_descriptor();
}
template <> struct is_proto_enum< ::perception::DetectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::DetectType>() {
  return ::perception::DetectType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parking_5fmask_2eproto
