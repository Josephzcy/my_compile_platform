// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roadmarks.proto

#include "roadmarks.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_roadmarks_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KeyPt_roadmarks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_roadmarks_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjContourPoints_roadmarks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point2D_geometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point3D_geometry_2eproto;
namespace perception {
class KeyPtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyPt> _instance;
} _KeyPt_default_instance_;
class ObjContourPointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjContourPoints> _instance;
} _ObjContourPoints_default_instance_;
class RoadmarksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roadmarks> _instance;
} _Roadmarks_default_instance_;
}  // namespace perception
static void InitDefaultsscc_info_KeyPt_roadmarks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_KeyPt_default_instance_;
    new (ptr) ::perception::KeyPt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::KeyPt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KeyPt_roadmarks_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_KeyPt_roadmarks_2eproto}, {
      &scc_info_Point2D_geometry_2eproto.base,
      &scc_info_Point3D_geometry_2eproto.base,}};

static void InitDefaultsscc_info_ObjContourPoints_roadmarks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_ObjContourPoints_default_instance_;
    new (ptr) ::perception::ObjContourPoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::ObjContourPoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjContourPoints_roadmarks_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjContourPoints_roadmarks_2eproto}, {
      &scc_info_KeyPt_roadmarks_2eproto.base,}};

static void InitDefaultsscc_info_Roadmarks_roadmarks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Roadmarks_default_instance_;
    new (ptr) ::perception::Roadmarks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Roadmarks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roadmarks_roadmarks_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Roadmarks_roadmarks_2eproto}, {
      &scc_info_ObjContourPoints_roadmarks_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_roadmarks_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_roadmarks_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_roadmarks_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_roadmarks_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::KeyPt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::KeyPt, img_pt_),
  PROTOBUF_FIELD_OFFSET(::perception::KeyPt, veh_pt_),
  PROTOBUF_FIELD_OFFSET(::perception::KeyPt, odom_pt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::ObjContourPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::ObjContourPoints, id_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjContourPoints, contour_type_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjContourPoints, obj_cam_num_),
  PROTOBUF_FIELD_OFFSET(::perception::ObjContourPoints, key_pts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Roadmarks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Roadmarks, frame_id_),
  PROTOBUF_FIELD_OFFSET(::perception::Roadmarks, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::Roadmarks, tick_),
  PROTOBUF_FIELD_OFFSET(::perception::Roadmarks, contours_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perception::KeyPt)},
  { 8, -1, sizeof(::perception::ObjContourPoints)},
  { 17, -1, sizeof(::perception::Roadmarks)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_KeyPt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_ObjContourPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Roadmarks_default_instance_),
};

const char descriptor_table_protodef_roadmarks_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017roadmarks.proto\022\nperception\032\016geometry."
  "proto\"\214\001\n\005KeyPt\022*\n\006img_pt\030\001 \001(\0132\032.percep"
  "tion.common.Point2D\022*\n\006veh_pt\030\002 \001(\0132\032.pe"
  "rception.common.Point3D\022+\n\007odom_pt\030\003 \001(\013"
  "2\032.perception.common.Point3D\"\237\001\n\020ObjCont"
  "ourPoints\022\n\n\002id\030\001 \001(\r\022.\n\014contour_type\030\002 "
  "\001(\0162\030.perception.PContourType\022+\n\013obj_cam"
  "_num\030\003 \001(\0162\026.perception.PObjCamNum\022\"\n\007ke"
  "y_pts\030\004 \003(\0132\021.perception.KeyPt\"n\n\tRoadma"
  "rks\022\020\n\010frame_id\030\001 \001(\004\022\021\n\ttimestamp\030\002 \001(\004"
  "\022\014\n\004tick\030\003 \001(\004\022.\n\010contours\030\004 \003(\0132\034.perce"
  "ption.ObjContourPoints*>\n\014PContourType\022\t"
  "\n\005PLANE\020\000\022\t\n\005PBUMP\020\001\022\n\n\006PARROW\020\002\022\014\n\010PUNK"
  "NOWN\020\003*:\n\nPObjCamNum\022\t\n\005PLEFT\020\000\022\n\n\006PRIGH"
  "T\020\001\022\n\n\006PFRONT\020\002\022\t\n\005PREAR\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_roadmarks_2eproto_deps[1] = {
  &::descriptor_table_geometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_roadmarks_2eproto_sccs[3] = {
  &scc_info_KeyPt_roadmarks_2eproto.base,
  &scc_info_ObjContourPoints_roadmarks_2eproto.base,
  &scc_info_Roadmarks_roadmarks_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_roadmarks_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_roadmarks_2eproto = {
  false, false, descriptor_table_protodef_roadmarks_2eproto, "roadmarks.proto", 594,
  &descriptor_table_roadmarks_2eproto_once, descriptor_table_roadmarks_2eproto_sccs, descriptor_table_roadmarks_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_roadmarks_2eproto::offsets,
  file_level_metadata_roadmarks_2eproto, 3, file_level_enum_descriptors_roadmarks_2eproto, file_level_service_descriptors_roadmarks_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_roadmarks_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_roadmarks_2eproto)), true);
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PContourType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarks_2eproto);
  return file_level_enum_descriptors_roadmarks_2eproto[0];
}
bool PContourType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PObjCamNum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_roadmarks_2eproto);
  return file_level_enum_descriptors_roadmarks_2eproto[1];
}
bool PObjCamNum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void KeyPt::InitAsDefaultInstance() {
  ::perception::_KeyPt_default_instance_._instance.get_mutable()->img_pt_ = const_cast< ::perception::common::Point2D*>(
      ::perception::common::Point2D::internal_default_instance());
  ::perception::_KeyPt_default_instance_._instance.get_mutable()->veh_pt_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
  ::perception::_KeyPt_default_instance_._instance.get_mutable()->odom_pt_ = const_cast< ::perception::common::Point3D*>(
      ::perception::common::Point3D::internal_default_instance());
}
class KeyPt::_Internal {
 public:
  static const ::perception::common::Point2D& img_pt(const KeyPt* msg);
  static const ::perception::common::Point3D& veh_pt(const KeyPt* msg);
  static const ::perception::common::Point3D& odom_pt(const KeyPt* msg);
};

const ::perception::common::Point2D&
KeyPt::_Internal::img_pt(const KeyPt* msg) {
  return *msg->img_pt_;
}
const ::perception::common::Point3D&
KeyPt::_Internal::veh_pt(const KeyPt* msg) {
  return *msg->veh_pt_;
}
const ::perception::common::Point3D&
KeyPt::_Internal::odom_pt(const KeyPt* msg) {
  return *msg->odom_pt_;
}
void KeyPt::clear_img_pt() {
  if (GetArena() == nullptr && img_pt_ != nullptr) {
    delete img_pt_;
  }
  img_pt_ = nullptr;
}
void KeyPt::clear_veh_pt() {
  if (GetArena() == nullptr && veh_pt_ != nullptr) {
    delete veh_pt_;
  }
  veh_pt_ = nullptr;
}
void KeyPt::clear_odom_pt() {
  if (GetArena() == nullptr && odom_pt_ != nullptr) {
    delete odom_pt_;
  }
  odom_pt_ = nullptr;
}
KeyPt::KeyPt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.KeyPt)
}
KeyPt::KeyPt(const KeyPt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_img_pt()) {
    img_pt_ = new ::perception::common::Point2D(*from.img_pt_);
  } else {
    img_pt_ = nullptr;
  }
  if (from._internal_has_veh_pt()) {
    veh_pt_ = new ::perception::common::Point3D(*from.veh_pt_);
  } else {
    veh_pt_ = nullptr;
  }
  if (from._internal_has_odom_pt()) {
    odom_pt_ = new ::perception::common::Point3D(*from.odom_pt_);
  } else {
    odom_pt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perception.KeyPt)
}

void KeyPt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyPt_roadmarks_2eproto.base);
  ::memset(&img_pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odom_pt_) -
      reinterpret_cast<char*>(&img_pt_)) + sizeof(odom_pt_));
}

KeyPt::~KeyPt() {
  // @@protoc_insertion_point(destructor:perception.KeyPt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyPt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete img_pt_;
  if (this != internal_default_instance()) delete veh_pt_;
  if (this != internal_default_instance()) delete odom_pt_;
}

void KeyPt::ArenaDtor(void* object) {
  KeyPt* _this = reinterpret_cast< KeyPt* >(object);
  (void)_this;
}
void KeyPt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyPt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyPt& KeyPt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyPt_roadmarks_2eproto.base);
  return *internal_default_instance();
}


void KeyPt::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.KeyPt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && img_pt_ != nullptr) {
    delete img_pt_;
  }
  img_pt_ = nullptr;
  if (GetArena() == nullptr && veh_pt_ != nullptr) {
    delete veh_pt_;
  }
  veh_pt_ = nullptr;
  if (GetArena() == nullptr && odom_pt_ != nullptr) {
    delete odom_pt_;
  }
  odom_pt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyPt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.Point2D img_pt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_img_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D veh_pt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_veh_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.common.Point3D odom_pt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_odom_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyPt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.KeyPt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.Point2D img_pt = 1;
  if (this->has_img_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::img_pt(this), target, stream);
  }

  // .perception.common.Point3D veh_pt = 2;
  if (this->has_veh_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::veh_pt(this), target, stream);
  }

  // .perception.common.Point3D odom_pt = 3;
  if (this->has_odom_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::odom_pt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.KeyPt)
  return target;
}

size_t KeyPt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.KeyPt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Point2D img_pt = 1;
  if (this->has_img_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *img_pt_);
  }

  // .perception.common.Point3D veh_pt = 2;
  if (this->has_veh_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *veh_pt_);
  }

  // .perception.common.Point3D odom_pt = 3;
  if (this->has_odom_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odom_pt_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyPt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.KeyPt)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyPt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyPt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.KeyPt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.KeyPt)
    MergeFrom(*source);
  }
}

void KeyPt::MergeFrom(const KeyPt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.KeyPt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_img_pt()) {
    _internal_mutable_img_pt()->::perception::common::Point2D::MergeFrom(from._internal_img_pt());
  }
  if (from.has_veh_pt()) {
    _internal_mutable_veh_pt()->::perception::common::Point3D::MergeFrom(from._internal_veh_pt());
  }
  if (from.has_odom_pt()) {
    _internal_mutable_odom_pt()->::perception::common::Point3D::MergeFrom(from._internal_odom_pt());
  }
}

void KeyPt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.KeyPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPt::CopyFrom(const KeyPt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.KeyPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPt::IsInitialized() const {
  return true;
}

void KeyPt::InternalSwap(KeyPt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyPt, odom_pt_)
      + sizeof(KeyPt::odom_pt_)
      - PROTOBUF_FIELD_OFFSET(KeyPt, img_pt_)>(
          reinterpret_cast<char*>(&img_pt_),
          reinterpret_cast<char*>(&other->img_pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyPt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjContourPoints::InitAsDefaultInstance() {
}
class ObjContourPoints::_Internal {
 public:
};

ObjContourPoints::ObjContourPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  key_pts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.ObjContourPoints)
}
ObjContourPoints::ObjContourPoints(const ObjContourPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      key_pts_(from.key_pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&obj_cam_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(obj_cam_num_));
  // @@protoc_insertion_point(copy_constructor:perception.ObjContourPoints)
}

void ObjContourPoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjContourPoints_roadmarks_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_cam_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(obj_cam_num_));
}

ObjContourPoints::~ObjContourPoints() {
  // @@protoc_insertion_point(destructor:perception.ObjContourPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjContourPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObjContourPoints::ArenaDtor(void* object) {
  ObjContourPoints* _this = reinterpret_cast< ObjContourPoints* >(object);
  (void)_this;
}
void ObjContourPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjContourPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjContourPoints& ObjContourPoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjContourPoints_roadmarks_2eproto.base);
  return *internal_default_instance();
}


void ObjContourPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.ObjContourPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_pts_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_cam_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(obj_cam_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjContourPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perception.PContourType contour_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_contour_type(static_cast<::perception::PContourType>(val));
        } else goto handle_unusual;
        continue;
      // .perception.PObjCamNum obj_cam_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_obj_cam_num(static_cast<::perception::PObjCamNum>(val));
        } else goto handle_unusual;
        continue;
      // repeated .perception.KeyPt key_pts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjContourPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.ObjContourPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .perception.PContourType contour_type = 2;
  if (this->contour_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_contour_type(), target);
  }

  // .perception.PObjCamNum obj_cam_num = 3;
  if (this->obj_cam_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_obj_cam_num(), target);
  }

  // repeated .perception.KeyPt key_pts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_key_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_key_pts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.ObjContourPoints)
  return target;
}

size_t ObjContourPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.ObjContourPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.KeyPt key_pts = 4;
  total_size += 1UL * this->_internal_key_pts_size();
  for (const auto& msg : this->key_pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .perception.PContourType contour_type = 2;
  if (this->contour_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contour_type());
  }

  // .perception.PObjCamNum obj_cam_num = 3;
  if (this->obj_cam_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_obj_cam_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjContourPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.ObjContourPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjContourPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjContourPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.ObjContourPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.ObjContourPoints)
    MergeFrom(*source);
  }
}

void ObjContourPoints::MergeFrom(const ObjContourPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.ObjContourPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_pts_.MergeFrom(from.key_pts_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.contour_type() != 0) {
    _internal_set_contour_type(from._internal_contour_type());
  }
  if (from.obj_cam_num() != 0) {
    _internal_set_obj_cam_num(from._internal_obj_cam_num());
  }
}

void ObjContourPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.ObjContourPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjContourPoints::CopyFrom(const ObjContourPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.ObjContourPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjContourPoints::IsInitialized() const {
  return true;
}

void ObjContourPoints::InternalSwap(ObjContourPoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_pts_.InternalSwap(&other->key_pts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjContourPoints, obj_cam_num_)
      + sizeof(ObjContourPoints::obj_cam_num_)
      - PROTOBUF_FIELD_OFFSET(ObjContourPoints, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjContourPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roadmarks::InitAsDefaultInstance() {
}
class Roadmarks::_Internal {
 public:
};

Roadmarks::Roadmarks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contours_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Roadmarks)
}
Roadmarks::Roadmarks(const Roadmarks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contours_(from.contours_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:perception.Roadmarks)
}

void Roadmarks::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roadmarks_roadmarks_2eproto.base);
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
}

Roadmarks::~Roadmarks() {
  // @@protoc_insertion_point(destructor:perception.Roadmarks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Roadmarks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Roadmarks::ArenaDtor(void* object) {
  Roadmarks* _this = reinterpret_cast< Roadmarks* >(object);
  (void)_this;
}
void Roadmarks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Roadmarks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roadmarks& Roadmarks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roadmarks_roadmarks_2eproto.base);
  return *internal_default_instance();
}


void Roadmarks::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Roadmarks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contours_.Clear();
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Roadmarks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.ObjContourPoints contours = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contours(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roadmarks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Roadmarks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  // repeated .perception.ObjContourPoints contours = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contours_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_contours(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Roadmarks)
  return target;
}

size_t Roadmarks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Roadmarks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.ObjContourPoints contours = 4;
  total_size += 1UL * this->_internal_contours_size();
  for (const auto& msg : this->contours_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roadmarks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Roadmarks)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadmarks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roadmarks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Roadmarks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Roadmarks)
    MergeFrom(*source);
  }
}

void Roadmarks::MergeFrom(const Roadmarks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Roadmarks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contours_.MergeFrom(from.contours_);
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void Roadmarks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Roadmarks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadmarks::CopyFrom(const Roadmarks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Roadmarks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadmarks::IsInitialized() const {
  return true;
}

void Roadmarks::InternalSwap(Roadmarks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contours_.InternalSwap(&other->contours_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Roadmarks, tick_)
      + sizeof(Roadmarks::tick_)
      - PROTOBUF_FIELD_OFFSET(Roadmarks, frame_id_)>(
          reinterpret_cast<char*>(&frame_id_),
          reinterpret_cast<char*>(&other->frame_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Roadmarks::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perception::KeyPt* Arena::CreateMaybeMessage< ::perception::KeyPt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::KeyPt >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::ObjContourPoints* Arena::CreateMaybeMessage< ::perception::ObjContourPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::ObjContourPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::Roadmarks* Arena::CreateMaybeMessage< ::perception::Roadmarks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Roadmarks >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
