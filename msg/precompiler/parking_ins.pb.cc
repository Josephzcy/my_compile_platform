// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parking_ins.proto

#include "parking_ins.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_parking_5fins_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsensingINSData_parking_5fins_2eproto;
namespace minieye {
namespace parking {
class AsensingINSDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsensingINSData> _instance;
} _AsensingINSData_default_instance_;
class AsensingINSDatasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsensingINSDatas> _instance;
} _AsensingINSDatas_default_instance_;
}  // namespace parking
}  // namespace minieye
static void InitDefaultsscc_info_AsensingINSData_parking_5fins_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_AsensingINSData_default_instance_;
    new (ptr) ::minieye::parking::AsensingINSData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::AsensingINSData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsensingINSData_parking_5fins_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AsensingINSData_parking_5fins_2eproto}, {}};

static void InitDefaultsscc_info_AsensingINSDatas_parking_5fins_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_AsensingINSDatas_default_instance_;
    new (ptr) ::minieye::parking::AsensingINSDatas();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::AsensingINSDatas::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AsensingINSDatas_parking_5fins_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AsensingINSDatas_parking_5fins_2eproto}, {
      &scc_info_AsensingINSData_parking_5fins_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_parking_5fins_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_parking_5fins_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_parking_5fins_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_parking_5fins_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, roll_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, pitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, yaw_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, gyro_x_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, gyro_y_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, gyro_z_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, acc_x_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, acc_y_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, acc_z_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, latitude_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, longitude_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, height_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, east_velocity_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, north_velocity_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, up_velocity_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, status_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, pos_alignment_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, vel_alignment_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, att_alignment_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, yaw_alignment_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, data1_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, data2_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, data3_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, latitude_std_dev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, longitude_std_dev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, height_std_dev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, vn_std_dev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, ve_std_dev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, vd_std_dev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, roll_std_dev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, pitch_std_dev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, yaw_std_dev_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, temperature_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, position_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, num_sats_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, heading_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSData, odometry_exist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::AsensingINSDatas, asensing_ins_datas_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::parking::AsensingINSData)},
  { 45, -1, sizeof(::minieye::parking::AsensingINSDatas)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_AsensingINSData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_AsensingINSDatas_default_instance_),
};

const char descriptor_table_protodef_parking_5fins_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021parking_ins.proto\022\017minieye.parking\"\220\006\n"
  "\017AsensingINSData\022\021\n\ttimestamp\030\001 \001(\004\022\014\n\004t"
  "ick\030\002 \001(\004\022\014\n\004roll\030\004 \001(\001\022\r\n\005pitch\030\005 \001(\001\022\013"
  "\n\003yaw\030\006 \001(\001\022\016\n\006gyro_x\030\007 \001(\001\022\016\n\006gyro_y\030\010 "
  "\001(\001\022\016\n\006gyro_z\030\t \001(\001\022\r\n\005acc_x\030\n \001(\001\022\r\n\005ac"
  "c_y\030\013 \001(\001\022\r\n\005acc_z\030\014 \001(\001\022\020\n\010latitude\030\r \001"
  "(\001\022\021\n\tlongitude\030\016 \001(\001\022\016\n\006height\030\017 \001(\001\022\025\n"
  "\reast_velocity\030\020 \001(\001\022\026\n\016north_velocity\030\021"
  " \001(\001\022\023\n\013up_velocity\030\022 \001(\001\022\016\n\006status\030\023 \001("
  "\r\022\025\n\rpos_alignment\030\024 \001(\010\022\025\n\rvel_alignmen"
  "t\030\025 \001(\010\022\025\n\ratt_alignment\030\026 \001(\010\022\025\n\ryaw_al"
  "ignment\030\027 \001(\010\022\014\n\004type\030\030 \001(\r\022\r\n\005data1\030\031 \001"
  "(\005\022\r\n\005data2\030\032 \001(\005\022\r\n\005data3\030\033 \001(\005\022\030\n\020lati"
  "tude_std_dev\030\034 \001(\002\022\031\n\021longitude_std_dev\030"
  "\035 \001(\002\022\026\n\016height_std_dev\030\036 \001(\002\022\022\n\nvn_std_"
  "dev\030\037 \001(\002\022\022\n\nve_std_dev\030  \001(\002\022\022\n\nvd_std_"
  "dev\030! \001(\002\022\024\n\014roll_std_dev\030\" \001(\002\022\025\n\rpitch"
  "_std_dev\030# \001(\002\022\023\n\013yaw_std_dev\030$ \001(\002\022\023\n\013t"
  "emperature\030% \001(\001\022\025\n\rposition_type\030& \001(\r\022"
  "\020\n\010num_sats\030\' \001(\r\022\024\n\014heading_type\030( \001(\r\022"
  "\026\n\016odometry_exist\030) \001(\010\"P\n\020AsensingINSDa"
  "tas\022<\n\022asensing_ins_datas\030\001 \003(\0132 .miniey"
  "e.parking.AsensingINSData*\237\004\n\014SolutionTy"
  "pe\022\010\n\004NONE\020\000\022\014\n\010FIXEDPOS\020\001\022\017\n\013FIXEDHEIGH"
  "T\020\002\022\r\n\tFLOATCONV\020\004\022\014\n\010WIDELANE\020\005\022\016\n\nNARR"
  "OWLANE\020\006\022\024\n\020DOPPLER_VELOCITY\020\010\022\n\n\006SINGLE"
  "\020\020\022\013\n\007PSRDIFF\020\021\022\010\n\004WAAS\020\022\022\016\n\nPROPOGATED\020"
  "\023\022\014\n\010OMNISTAR\020\024\022\014\n\010L1_FLOAT\020 \022\022\n\016IONOFRE"
  "E_FLOAT\020!\022\020\n\014NARROW_FLOAT\020\"\022\n\n\006L1_INT\0200\022"
  "\014\n\010WIDE_INT\0201\022\016\n\nNARROW_INT\0202\022\022\n\016RTK_DIR"
  "ECT_INS\0203\022\014\n\010INS_SBAS\0204\022\r\n\tINS_PSRSP\0205\022\017"
  "\n\013INS_PSRDIFF\0206\022\020\n\014INS_RTKFLOAT\0207\022\020\n\014INS"
  "_RTKFIXED\0208\022\020\n\014INS_OMNISTAR\0209\022\023\n\017INS_OMN"
  "ISTAR_HP\020:\022\023\n\017INS_OMNISTAR_XP\020;\022\017\n\013OMNIS"
  "TAR_HP\020@\022\017\n\013OMNISTAR_XP\020A\022\022\n\016PPP_CONVERG"
  "ING\020D\022\007\n\003PPP\020E\022\026\n\022INS_PPP_CONVERGING\020I\022\013"
  "\n\007INS_PPP\020Jb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_parking_5fins_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_parking_5fins_2eproto_sccs[2] = {
  &scc_info_AsensingINSData_parking_5fins_2eproto.base,
  &scc_info_AsensingINSDatas_parking_5fins_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_parking_5fins_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parking_5fins_2eproto = {
  false, false, descriptor_table_protodef_parking_5fins_2eproto, "parking_ins.proto", 1459,
  &descriptor_table_parking_5fins_2eproto_once, descriptor_table_parking_5fins_2eproto_sccs, descriptor_table_parking_5fins_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_parking_5fins_2eproto::offsets,
  file_level_metadata_parking_5fins_2eproto, 2, file_level_enum_descriptors_parking_5fins_2eproto, file_level_service_descriptors_parking_5fins_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_parking_5fins_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_parking_5fins_2eproto)), true);
namespace minieye {
namespace parking {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolutionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_parking_5fins_2eproto);
  return file_level_enum_descriptors_parking_5fins_2eproto[0];
}
bool SolutionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 8:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 32:
    case 33:
    case 34:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 64:
    case 65:
    case 68:
    case 69:
    case 73:
    case 74:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AsensingINSData::InitAsDefaultInstance() {
}
class AsensingINSData::_Internal {
 public:
};

AsensingINSData::AsensingINSData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.AsensingINSData)
}
AsensingINSData::AsensingINSData(const AsensingINSData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&odometry_exist_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(odometry_exist_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.AsensingINSData)
}

void AsensingINSData::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odometry_exist_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(odometry_exist_));
}

AsensingINSData::~AsensingINSData() {
  // @@protoc_insertion_point(destructor:minieye.parking.AsensingINSData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AsensingINSData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AsensingINSData::ArenaDtor(void* object) {
  AsensingINSData* _this = reinterpret_cast< AsensingINSData* >(object);
  (void)_this;
}
void AsensingINSData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AsensingINSData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsensingINSData& AsensingINSData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsensingINSData_parking_5fins_2eproto.base);
  return *internal_default_instance();
}


void AsensingINSData::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.AsensingINSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odometry_exist_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(odometry_exist_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsensingINSData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double roll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gyro_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          gyro_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gyro_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          gyro_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gyro_z = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          gyro_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acc_x = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          acc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acc_y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          acc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acc_z = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          acc_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double east_velocity = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          east_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double north_velocity = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          north_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double up_velocity = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          up_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 status = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pos_alignment = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          pos_alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool vel_alignment = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          vel_alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool att_alignment = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          att_alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool yaw_alignment = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          yaw_alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 data1 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          data1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 data2 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          data2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 data3 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          data3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float latitude_std_dev = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          latitude_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float longitude_std_dev = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          longitude_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height_std_dev = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          height_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vn_std_dev = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          vn_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ve_std_dev = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          ve_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vd_std_dev = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          vd_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll_std_dev = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          roll_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_std_dev = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pitch_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_std_dev = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          yaw_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double temperature = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 position_type = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          position_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_sats = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_sats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 heading_type = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          heading_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool odometry_exist = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          odometry_exist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsensingINSData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.AsensingINSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tick(), target);
  }

  // double roll = 4;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_roll(), target);
  }

  // double pitch = 5;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_pitch(), target);
  }

  // double yaw = 6;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_yaw(), target);
  }

  // double gyro_x = 7;
  if (!(this->gyro_x() <= 0 && this->gyro_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_gyro_x(), target);
  }

  // double gyro_y = 8;
  if (!(this->gyro_y() <= 0 && this->gyro_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_gyro_y(), target);
  }

  // double gyro_z = 9;
  if (!(this->gyro_z() <= 0 && this->gyro_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_gyro_z(), target);
  }

  // double acc_x = 10;
  if (!(this->acc_x() <= 0 && this->acc_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_acc_x(), target);
  }

  // double acc_y = 11;
  if (!(this->acc_y() <= 0 && this->acc_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_acc_y(), target);
  }

  // double acc_z = 12;
  if (!(this->acc_z() <= 0 && this->acc_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_acc_z(), target);
  }

  // double latitude = 13;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_latitude(), target);
  }

  // double longitude = 14;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_longitude(), target);
  }

  // double height = 15;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_height(), target);
  }

  // double east_velocity = 16;
  if (!(this->east_velocity() <= 0 && this->east_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_east_velocity(), target);
  }

  // double north_velocity = 17;
  if (!(this->north_velocity() <= 0 && this->north_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_north_velocity(), target);
  }

  // double up_velocity = 18;
  if (!(this->up_velocity() <= 0 && this->up_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_up_velocity(), target);
  }

  // uint32 status = 19;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_status(), target);
  }

  // bool pos_alignment = 20;
  if (this->pos_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_pos_alignment(), target);
  }

  // bool vel_alignment = 21;
  if (this->vel_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_vel_alignment(), target);
  }

  // bool att_alignment = 22;
  if (this->att_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_att_alignment(), target);
  }

  // bool yaw_alignment = 23;
  if (this->yaw_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_yaw_alignment(), target);
  }

  // uint32 type = 24;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_type(), target);
  }

  // int32 data1 = 25;
  if (this->data1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_data1(), target);
  }

  // int32 data2 = 26;
  if (this->data2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_data2(), target);
  }

  // int32 data3 = 27;
  if (this->data3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_data3(), target);
  }

  // float latitude_std_dev = 28;
  if (!(this->latitude_std_dev() <= 0 && this->latitude_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->_internal_latitude_std_dev(), target);
  }

  // float longitude_std_dev = 29;
  if (!(this->longitude_std_dev() <= 0 && this->longitude_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->_internal_longitude_std_dev(), target);
  }

  // float height_std_dev = 30;
  if (!(this->height_std_dev() <= 0 && this->height_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_height_std_dev(), target);
  }

  // float vn_std_dev = 31;
  if (!(this->vn_std_dev() <= 0 && this->vn_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_vn_std_dev(), target);
  }

  // float ve_std_dev = 32;
  if (!(this->ve_std_dev() <= 0 && this->ve_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_ve_std_dev(), target);
  }

  // float vd_std_dev = 33;
  if (!(this->vd_std_dev() <= 0 && this->vd_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_vd_std_dev(), target);
  }

  // float roll_std_dev = 34;
  if (!(this->roll_std_dev() <= 0 && this->roll_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->_internal_roll_std_dev(), target);
  }

  // float pitch_std_dev = 35;
  if (!(this->pitch_std_dev() <= 0 && this->pitch_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_pitch_std_dev(), target);
  }

  // float yaw_std_dev = 36;
  if (!(this->yaw_std_dev() <= 0 && this->yaw_std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_yaw_std_dev(), target);
  }

  // double temperature = 37;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_temperature(), target);
  }

  // uint32 position_type = 38;
  if (this->position_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_position_type(), target);
  }

  // uint32 num_sats = 39;
  if (this->num_sats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_num_sats(), target);
  }

  // uint32 heading_type = 40;
  if (this->heading_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_heading_type(), target);
  }

  // bool odometry_exist = 41;
  if (this->odometry_exist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_odometry_exist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.AsensingINSData)
  return target;
}

size_t AsensingINSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.AsensingINSData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // double roll = 4;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 8;
  }

  // double pitch = 5;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 8;
  }

  // double yaw = 6;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 8;
  }

  // double gyro_x = 7;
  if (!(this->gyro_x() <= 0 && this->gyro_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double gyro_y = 8;
  if (!(this->gyro_y() <= 0 && this->gyro_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double gyro_z = 9;
  if (!(this->gyro_z() <= 0 && this->gyro_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double acc_x = 10;
  if (!(this->acc_x() <= 0 && this->acc_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double acc_y = 11;
  if (!(this->acc_y() <= 0 && this->acc_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double acc_z = 12;
  if (!(this->acc_z() <= 0 && this->acc_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 13;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 14;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 15;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // double east_velocity = 16;
  if (!(this->east_velocity() <= 0 && this->east_velocity() >= 0)) {
    total_size += 2 + 8;
  }

  // double north_velocity = 17;
  if (!(this->north_velocity() <= 0 && this->north_velocity() >= 0)) {
    total_size += 2 + 8;
  }

  // double up_velocity = 18;
  if (!(this->up_velocity() <= 0 && this->up_velocity() >= 0)) {
    total_size += 2 + 8;
  }

  // uint32 status = 19;
  if (this->status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  // bool pos_alignment = 20;
  if (this->pos_alignment() != 0) {
    total_size += 2 + 1;
  }

  // bool vel_alignment = 21;
  if (this->vel_alignment() != 0) {
    total_size += 2 + 1;
  }

  // bool att_alignment = 22;
  if (this->att_alignment() != 0) {
    total_size += 2 + 1;
  }

  // bool yaw_alignment = 23;
  if (this->yaw_alignment() != 0) {
    total_size += 2 + 1;
  }

  // uint32 type = 24;
  if (this->type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // int32 data1 = 25;
  if (this->data1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data1());
  }

  // int32 data2 = 26;
  if (this->data2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data2());
  }

  // int32 data3 = 27;
  if (this->data3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data3());
  }

  // float latitude_std_dev = 28;
  if (!(this->latitude_std_dev() <= 0 && this->latitude_std_dev() >= 0)) {
    total_size += 2 + 4;
  }

  // float longitude_std_dev = 29;
  if (!(this->longitude_std_dev() <= 0 && this->longitude_std_dev() >= 0)) {
    total_size += 2 + 4;
  }

  // float height_std_dev = 30;
  if (!(this->height_std_dev() <= 0 && this->height_std_dev() >= 0)) {
    total_size += 2 + 4;
  }

  // float vn_std_dev = 31;
  if (!(this->vn_std_dev() <= 0 && this->vn_std_dev() >= 0)) {
    total_size += 2 + 4;
  }

  // float ve_std_dev = 32;
  if (!(this->ve_std_dev() <= 0 && this->ve_std_dev() >= 0)) {
    total_size += 2 + 4;
  }

  // float vd_std_dev = 33;
  if (!(this->vd_std_dev() <= 0 && this->vd_std_dev() >= 0)) {
    total_size += 2 + 4;
  }

  // float roll_std_dev = 34;
  if (!(this->roll_std_dev() <= 0 && this->roll_std_dev() >= 0)) {
    total_size += 2 + 4;
  }

  // float pitch_std_dev = 35;
  if (!(this->pitch_std_dev() <= 0 && this->pitch_std_dev() >= 0)) {
    total_size += 2 + 4;
  }

  // double temperature = 37;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    total_size += 2 + 8;
  }

  // float yaw_std_dev = 36;
  if (!(this->yaw_std_dev() <= 0 && this->yaw_std_dev() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 position_type = 38;
  if (this->position_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position_type());
  }

  // uint32 num_sats = 39;
  if (this->num_sats() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_sats());
  }

  // uint32 heading_type = 40;
  if (this->heading_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_heading_type());
  }

  // bool odometry_exist = 41;
  if (this->odometry_exist() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsensingINSData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.AsensingINSData)
  GOOGLE_DCHECK_NE(&from, this);
  const AsensingINSData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsensingINSData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.AsensingINSData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.AsensingINSData)
    MergeFrom(*source);
  }
}

void AsensingINSData::MergeFrom(const AsensingINSData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.AsensingINSData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (!(from.gyro_x() <= 0 && from.gyro_x() >= 0)) {
    _internal_set_gyro_x(from._internal_gyro_x());
  }
  if (!(from.gyro_y() <= 0 && from.gyro_y() >= 0)) {
    _internal_set_gyro_y(from._internal_gyro_y());
  }
  if (!(from.gyro_z() <= 0 && from.gyro_z() >= 0)) {
    _internal_set_gyro_z(from._internal_gyro_z());
  }
  if (!(from.acc_x() <= 0 && from.acc_x() >= 0)) {
    _internal_set_acc_x(from._internal_acc_x());
  }
  if (!(from.acc_y() <= 0 && from.acc_y() >= 0)) {
    _internal_set_acc_y(from._internal_acc_y());
  }
  if (!(from.acc_z() <= 0 && from.acc_z() >= 0)) {
    _internal_set_acc_z(from._internal_acc_z());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.east_velocity() <= 0 && from.east_velocity() >= 0)) {
    _internal_set_east_velocity(from._internal_east_velocity());
  }
  if (!(from.north_velocity() <= 0 && from.north_velocity() >= 0)) {
    _internal_set_north_velocity(from._internal_north_velocity());
  }
  if (!(from.up_velocity() <= 0 && from.up_velocity() >= 0)) {
    _internal_set_up_velocity(from._internal_up_velocity());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.pos_alignment() != 0) {
    _internal_set_pos_alignment(from._internal_pos_alignment());
  }
  if (from.vel_alignment() != 0) {
    _internal_set_vel_alignment(from._internal_vel_alignment());
  }
  if (from.att_alignment() != 0) {
    _internal_set_att_alignment(from._internal_att_alignment());
  }
  if (from.yaw_alignment() != 0) {
    _internal_set_yaw_alignment(from._internal_yaw_alignment());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.data1() != 0) {
    _internal_set_data1(from._internal_data1());
  }
  if (from.data2() != 0) {
    _internal_set_data2(from._internal_data2());
  }
  if (from.data3() != 0) {
    _internal_set_data3(from._internal_data3());
  }
  if (!(from.latitude_std_dev() <= 0 && from.latitude_std_dev() >= 0)) {
    _internal_set_latitude_std_dev(from._internal_latitude_std_dev());
  }
  if (!(from.longitude_std_dev() <= 0 && from.longitude_std_dev() >= 0)) {
    _internal_set_longitude_std_dev(from._internal_longitude_std_dev());
  }
  if (!(from.height_std_dev() <= 0 && from.height_std_dev() >= 0)) {
    _internal_set_height_std_dev(from._internal_height_std_dev());
  }
  if (!(from.vn_std_dev() <= 0 && from.vn_std_dev() >= 0)) {
    _internal_set_vn_std_dev(from._internal_vn_std_dev());
  }
  if (!(from.ve_std_dev() <= 0 && from.ve_std_dev() >= 0)) {
    _internal_set_ve_std_dev(from._internal_ve_std_dev());
  }
  if (!(from.vd_std_dev() <= 0 && from.vd_std_dev() >= 0)) {
    _internal_set_vd_std_dev(from._internal_vd_std_dev());
  }
  if (!(from.roll_std_dev() <= 0 && from.roll_std_dev() >= 0)) {
    _internal_set_roll_std_dev(from._internal_roll_std_dev());
  }
  if (!(from.pitch_std_dev() <= 0 && from.pitch_std_dev() >= 0)) {
    _internal_set_pitch_std_dev(from._internal_pitch_std_dev());
  }
  if (!(from.temperature() <= 0 && from.temperature() >= 0)) {
    _internal_set_temperature(from._internal_temperature());
  }
  if (!(from.yaw_std_dev() <= 0 && from.yaw_std_dev() >= 0)) {
    _internal_set_yaw_std_dev(from._internal_yaw_std_dev());
  }
  if (from.position_type() != 0) {
    _internal_set_position_type(from._internal_position_type());
  }
  if (from.num_sats() != 0) {
    _internal_set_num_sats(from._internal_num_sats());
  }
  if (from.heading_type() != 0) {
    _internal_set_heading_type(from._internal_heading_type());
  }
  if (from.odometry_exist() != 0) {
    _internal_set_odometry_exist(from._internal_odometry_exist());
  }
}

void AsensingINSData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.AsensingINSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsensingINSData::CopyFrom(const AsensingINSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.AsensingINSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsensingINSData::IsInitialized() const {
  return true;
}

void AsensingINSData::InternalSwap(AsensingINSData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AsensingINSData, odometry_exist_)
      + sizeof(AsensingINSData::odometry_exist_)
      - PROTOBUF_FIELD_OFFSET(AsensingINSData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AsensingINSData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsensingINSDatas::InitAsDefaultInstance() {
}
class AsensingINSDatas::_Internal {
 public:
};

AsensingINSDatas::AsensingINSDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  asensing_ins_datas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.AsensingINSDatas)
}
AsensingINSDatas::AsensingINSDatas(const AsensingINSDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      asensing_ins_datas_(from.asensing_ins_datas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minieye.parking.AsensingINSDatas)
}

void AsensingINSDatas::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AsensingINSDatas_parking_5fins_2eproto.base);
}

AsensingINSDatas::~AsensingINSDatas() {
  // @@protoc_insertion_point(destructor:minieye.parking.AsensingINSDatas)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AsensingINSDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AsensingINSDatas::ArenaDtor(void* object) {
  AsensingINSDatas* _this = reinterpret_cast< AsensingINSDatas* >(object);
  (void)_this;
}
void AsensingINSDatas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AsensingINSDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsensingINSDatas& AsensingINSDatas::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsensingINSDatas_parking_5fins_2eproto.base);
  return *internal_default_instance();
}


void AsensingINSDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.AsensingINSDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asensing_ins_datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsensingINSDatas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .minieye.parking.AsensingINSData asensing_ins_datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asensing_ins_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsensingINSDatas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.AsensingINSDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minieye.parking.AsensingINSData asensing_ins_datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_asensing_ins_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_asensing_ins_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.AsensingINSDatas)
  return target;
}

size_t AsensingINSDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.AsensingINSDatas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.parking.AsensingINSData asensing_ins_datas = 1;
  total_size += 1UL * this->_internal_asensing_ins_datas_size();
  for (const auto& msg : this->asensing_ins_datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsensingINSDatas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.AsensingINSDatas)
  GOOGLE_DCHECK_NE(&from, this);
  const AsensingINSDatas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsensingINSDatas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.AsensingINSDatas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.AsensingINSDatas)
    MergeFrom(*source);
  }
}

void AsensingINSDatas::MergeFrom(const AsensingINSDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.AsensingINSDatas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  asensing_ins_datas_.MergeFrom(from.asensing_ins_datas_);
}

void AsensingINSDatas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.AsensingINSDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsensingINSDatas::CopyFrom(const AsensingINSDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.AsensingINSDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsensingINSDatas::IsInitialized() const {
  return true;
}

void AsensingINSDatas::InternalSwap(AsensingINSDatas* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asensing_ins_datas_.InternalSwap(&other->asensing_ins_datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsensingINSDatas::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace parking
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::parking::AsensingINSData* Arena::CreateMaybeMessage< ::minieye::parking::AsensingINSData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::AsensingINSData >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::AsensingINSDatas* Arena::CreateMaybeMessage< ::minieye::parking::AsensingINSDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::AsensingINSDatas >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
