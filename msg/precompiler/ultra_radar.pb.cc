// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ultra_radar.proto

#include "ultra_radar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace minieye {
class UltrasonicRadarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UltrasonicRadar> _instance;
} _UltrasonicRadar_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_UltrasonicRadar_ultra_5fradar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_UltrasonicRadar_default_instance_;
    new (ptr) ::minieye::UltrasonicRadar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::UltrasonicRadar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UltrasonicRadar_ultra_5fradar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UltrasonicRadar_ultra_5fradar_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ultra_5fradar_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ultra_5fradar_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ultra_5fradar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ultra_5fradar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, short_radar_fl_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, short_radar_flm_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, short_radar_frm_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, short_radar_fr_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, short_radar_bl_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, short_radar_blm_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, short_radar_brm_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, short_radar_br_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, long_radar_fl_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, long_radar_fr_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, long_radar_bl_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, long_radar_br_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::UltrasonicRadar, frame_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::UltrasonicRadar)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_UltrasonicRadar_default_instance_),
};

const char descriptor_table_protodef_ultra_5fradar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ultra_radar.proto\022\007minieye\"\344\002\n\017Ultraso"
  "nicRadar\022\026\n\016short_radar_fl\030\001 \001(\002\022\027\n\017shor"
  "t_radar_flm\030\002 \001(\002\022\027\n\017short_radar_frm\030\003 \001"
  "(\002\022\026\n\016short_radar_fr\030\004 \001(\002\022\026\n\016short_rada"
  "r_bl\030\005 \001(\002\022\027\n\017short_radar_blm\030\006 \001(\002\022\027\n\017s"
  "hort_radar_brm\030\007 \001(\002\022\026\n\016short_radar_br\030\010"
  " \001(\002\022\025\n\rlong_radar_fl\030\t \001(\002\022\025\n\rlong_rada"
  "r_fr\030\n \001(\002\022\025\n\rlong_radar_bl\030\013 \001(\002\022\025\n\rlon"
  "g_radar_br\030\014 \001(\002\022\021\n\ttimestamp\030\r \001(\004\022\014\n\004t"
  "ick\030\016 \001(\004\022\020\n\010frame_id\030\017 \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ultra_5fradar_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ultra_5fradar_2eproto_sccs[1] = {
  &scc_info_UltrasonicRadar_ultra_5fradar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ultra_5fradar_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ultra_5fradar_2eproto = {
  false, false, descriptor_table_protodef_ultra_5fradar_2eproto, "ultra_radar.proto", 395,
  &descriptor_table_ultra_5fradar_2eproto_once, descriptor_table_ultra_5fradar_2eproto_sccs, descriptor_table_ultra_5fradar_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_ultra_5fradar_2eproto::offsets,
  file_level_metadata_ultra_5fradar_2eproto, 1, file_level_enum_descriptors_ultra_5fradar_2eproto, file_level_service_descriptors_ultra_5fradar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ultra_5fradar_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ultra_5fradar_2eproto)), true);
namespace minieye {

// ===================================================================

void UltrasonicRadar::InitAsDefaultInstance() {
}
class UltrasonicRadar::_Internal {
 public:
};

UltrasonicRadar::UltrasonicRadar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.UltrasonicRadar)
}
UltrasonicRadar::UltrasonicRadar(const UltrasonicRadar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&short_radar_fl_, &from.short_radar_fl_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
    reinterpret_cast<char*>(&short_radar_fl_)) + sizeof(frame_id_));
  // @@protoc_insertion_point(copy_constructor:minieye.UltrasonicRadar)
}

void UltrasonicRadar::SharedCtor() {
  ::memset(&short_radar_fl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&short_radar_fl_)) + sizeof(frame_id_));
}

UltrasonicRadar::~UltrasonicRadar() {
  // @@protoc_insertion_point(destructor:minieye.UltrasonicRadar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UltrasonicRadar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UltrasonicRadar::ArenaDtor(void* object) {
  UltrasonicRadar* _this = reinterpret_cast< UltrasonicRadar* >(object);
  (void)_this;
}
void UltrasonicRadar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UltrasonicRadar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UltrasonicRadar& UltrasonicRadar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UltrasonicRadar_ultra_5fradar_2eproto.base);
  return *internal_default_instance();
}


void UltrasonicRadar::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.UltrasonicRadar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&short_radar_fl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&short_radar_fl_)) + sizeof(frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UltrasonicRadar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float short_radar_fl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          short_radar_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float short_radar_flm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          short_radar_flm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float short_radar_frm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          short_radar_frm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float short_radar_fr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          short_radar_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float short_radar_bl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          short_radar_bl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float short_radar_blm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          short_radar_blm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float short_radar_brm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          short_radar_brm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float short_radar_br = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          short_radar_br_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float long_radar_fl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          long_radar_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float long_radar_fr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          long_radar_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float long_radar_bl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          long_radar_bl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float long_radar_br = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          long_radar_br_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicRadar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.UltrasonicRadar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float short_radar_fl = 1;
  if (!(this->short_radar_fl() <= 0 && this->short_radar_fl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_short_radar_fl(), target);
  }

  // float short_radar_flm = 2;
  if (!(this->short_radar_flm() <= 0 && this->short_radar_flm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_short_radar_flm(), target);
  }

  // float short_radar_frm = 3;
  if (!(this->short_radar_frm() <= 0 && this->short_radar_frm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_short_radar_frm(), target);
  }

  // float short_radar_fr = 4;
  if (!(this->short_radar_fr() <= 0 && this->short_radar_fr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_short_radar_fr(), target);
  }

  // float short_radar_bl = 5;
  if (!(this->short_radar_bl() <= 0 && this->short_radar_bl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_short_radar_bl(), target);
  }

  // float short_radar_blm = 6;
  if (!(this->short_radar_blm() <= 0 && this->short_radar_blm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_short_radar_blm(), target);
  }

  // float short_radar_brm = 7;
  if (!(this->short_radar_brm() <= 0 && this->short_radar_brm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_short_radar_brm(), target);
  }

  // float short_radar_br = 8;
  if (!(this->short_radar_br() <= 0 && this->short_radar_br() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_short_radar_br(), target);
  }

  // float long_radar_fl = 9;
  if (!(this->long_radar_fl() <= 0 && this->long_radar_fl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_long_radar_fl(), target);
  }

  // float long_radar_fr = 10;
  if (!(this->long_radar_fr() <= 0 && this->long_radar_fr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_long_radar_fr(), target);
  }

  // float long_radar_bl = 11;
  if (!(this->long_radar_bl() <= 0 && this->long_radar_bl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_long_radar_bl(), target);
  }

  // float long_radar_br = 12;
  if (!(this->long_radar_br() <= 0 && this->long_radar_br() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_long_radar_br(), target);
  }

  // uint64 timestamp = 13;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_timestamp(), target);
  }

  // uint64 tick = 14;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_tick(), target);
  }

  // uint64 frame_id = 15;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.UltrasonicRadar)
  return target;
}

size_t UltrasonicRadar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.UltrasonicRadar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float short_radar_fl = 1;
  if (!(this->short_radar_fl() <= 0 && this->short_radar_fl() >= 0)) {
    total_size += 1 + 4;
  }

  // float short_radar_flm = 2;
  if (!(this->short_radar_flm() <= 0 && this->short_radar_flm() >= 0)) {
    total_size += 1 + 4;
  }

  // float short_radar_frm = 3;
  if (!(this->short_radar_frm() <= 0 && this->short_radar_frm() >= 0)) {
    total_size += 1 + 4;
  }

  // float short_radar_fr = 4;
  if (!(this->short_radar_fr() <= 0 && this->short_radar_fr() >= 0)) {
    total_size += 1 + 4;
  }

  // float short_radar_bl = 5;
  if (!(this->short_radar_bl() <= 0 && this->short_radar_bl() >= 0)) {
    total_size += 1 + 4;
  }

  // float short_radar_blm = 6;
  if (!(this->short_radar_blm() <= 0 && this->short_radar_blm() >= 0)) {
    total_size += 1 + 4;
  }

  // float short_radar_brm = 7;
  if (!(this->short_radar_brm() <= 0 && this->short_radar_brm() >= 0)) {
    total_size += 1 + 4;
  }

  // float short_radar_br = 8;
  if (!(this->short_radar_br() <= 0 && this->short_radar_br() >= 0)) {
    total_size += 1 + 4;
  }

  // float long_radar_fl = 9;
  if (!(this->long_radar_fl() <= 0 && this->long_radar_fl() >= 0)) {
    total_size += 1 + 4;
  }

  // float long_radar_fr = 10;
  if (!(this->long_radar_fr() <= 0 && this->long_radar_fr() >= 0)) {
    total_size += 1 + 4;
  }

  // float long_radar_bl = 11;
  if (!(this->long_radar_bl() <= 0 && this->long_radar_bl() >= 0)) {
    total_size += 1 + 4;
  }

  // float long_radar_br = 12;
  if (!(this->long_radar_br() <= 0 && this->long_radar_br() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 timestamp = 13;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 14;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 frame_id = 15;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltrasonicRadar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.UltrasonicRadar)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicRadar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltrasonicRadar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.UltrasonicRadar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.UltrasonicRadar)
    MergeFrom(*source);
  }
}

void UltrasonicRadar::MergeFrom(const UltrasonicRadar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.UltrasonicRadar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.short_radar_fl() <= 0 && from.short_radar_fl() >= 0)) {
    _internal_set_short_radar_fl(from._internal_short_radar_fl());
  }
  if (!(from.short_radar_flm() <= 0 && from.short_radar_flm() >= 0)) {
    _internal_set_short_radar_flm(from._internal_short_radar_flm());
  }
  if (!(from.short_radar_frm() <= 0 && from.short_radar_frm() >= 0)) {
    _internal_set_short_radar_frm(from._internal_short_radar_frm());
  }
  if (!(from.short_radar_fr() <= 0 && from.short_radar_fr() >= 0)) {
    _internal_set_short_radar_fr(from._internal_short_radar_fr());
  }
  if (!(from.short_radar_bl() <= 0 && from.short_radar_bl() >= 0)) {
    _internal_set_short_radar_bl(from._internal_short_radar_bl());
  }
  if (!(from.short_radar_blm() <= 0 && from.short_radar_blm() >= 0)) {
    _internal_set_short_radar_blm(from._internal_short_radar_blm());
  }
  if (!(from.short_radar_brm() <= 0 && from.short_radar_brm() >= 0)) {
    _internal_set_short_radar_brm(from._internal_short_radar_brm());
  }
  if (!(from.short_radar_br() <= 0 && from.short_radar_br() >= 0)) {
    _internal_set_short_radar_br(from._internal_short_radar_br());
  }
  if (!(from.long_radar_fl() <= 0 && from.long_radar_fl() >= 0)) {
    _internal_set_long_radar_fl(from._internal_long_radar_fl());
  }
  if (!(from.long_radar_fr() <= 0 && from.long_radar_fr() >= 0)) {
    _internal_set_long_radar_fr(from._internal_long_radar_fr());
  }
  if (!(from.long_radar_bl() <= 0 && from.long_radar_bl() >= 0)) {
    _internal_set_long_radar_bl(from._internal_long_radar_bl());
  }
  if (!(from.long_radar_br() <= 0 && from.long_radar_br() >= 0)) {
    _internal_set_long_radar_br(from._internal_long_radar_br());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void UltrasonicRadar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.UltrasonicRadar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicRadar::CopyFrom(const UltrasonicRadar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.UltrasonicRadar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicRadar::IsInitialized() const {
  return true;
}

void UltrasonicRadar::InternalSwap(UltrasonicRadar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UltrasonicRadar, frame_id_)
      + sizeof(UltrasonicRadar::frame_id_)
      - PROTOBUF_FIELD_OFFSET(UltrasonicRadar, short_radar_fl_)>(
          reinterpret_cast<char*>(&short_radar_fl_),
          reinterpret_cast<char*>(&other->short_radar_fl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicRadar::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::UltrasonicRadar* Arena::CreateMaybeMessage< ::minieye::UltrasonicRadar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::UltrasonicRadar >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
