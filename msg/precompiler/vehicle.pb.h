// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "geometry.pb.h"
#include "data_source.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_2eproto;
namespace perception {
class Vehicle;
class VehicleDefaultTypeInternal;
extern VehicleDefaultTypeInternal _Vehicle_default_instance_;
class Vehicle_VehicleMeasureRes;
class Vehicle_VehicleMeasureResDefaultTypeInternal;
extern Vehicle_VehicleMeasureResDefaultTypeInternal _Vehicle_VehicleMeasureRes_default_instance_;
class Vehicle_VehicleState;
class Vehicle_VehicleStateDefaultTypeInternal;
extern Vehicle_VehicleStateDefaultTypeInternal _Vehicle_VehicleState_default_instance_;
class Vehicle_VehicleWarning;
class Vehicle_VehicleWarningDefaultTypeInternal;
extern Vehicle_VehicleWarningDefaultTypeInternal _Vehicle_VehicleWarning_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::Vehicle* Arena::CreateMaybeMessage<::perception::Vehicle>(Arena*);
template<> ::perception::Vehicle_VehicleMeasureRes* Arena::CreateMaybeMessage<::perception::Vehicle_VehicleMeasureRes>(Arena*);
template<> ::perception::Vehicle_VehicleState* Arena::CreateMaybeMessage<::perception::Vehicle_VehicleState>(Arena*);
template<> ::perception::Vehicle_VehicleWarning* Arena::CreateMaybeMessage<::perception::Vehicle_VehicleWarning>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

// ===================================================================

class Vehicle_VehicleMeasureRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Vehicle.VehicleMeasureRes) */ {
 public:
  inline Vehicle_VehicleMeasureRes() : Vehicle_VehicleMeasureRes(nullptr) {};
  virtual ~Vehicle_VehicleMeasureRes();

  Vehicle_VehicleMeasureRes(const Vehicle_VehicleMeasureRes& from);
  Vehicle_VehicleMeasureRes(Vehicle_VehicleMeasureRes&& from) noexcept
    : Vehicle_VehicleMeasureRes() {
    *this = ::std::move(from);
  }

  inline Vehicle_VehicleMeasureRes& operator=(const Vehicle_VehicleMeasureRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle_VehicleMeasureRes& operator=(Vehicle_VehicleMeasureRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle_VehicleMeasureRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle_VehicleMeasureRes* internal_default_instance() {
    return reinterpret_cast<const Vehicle_VehicleMeasureRes*>(
               &_Vehicle_VehicleMeasureRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vehicle_VehicleMeasureRes& a, Vehicle_VehicleMeasureRes& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehicle_VehicleMeasureRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vehicle_VehicleMeasureRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehicle_VehicleMeasureRes* New() const final {
    return CreateMaybeMessage<Vehicle_VehicleMeasureRes>(nullptr);
  }

  Vehicle_VehicleMeasureRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle_VehicleMeasureRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle_VehicleMeasureRes& from);
  void MergeFrom(const Vehicle_VehicleMeasureRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle_VehicleMeasureRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Vehicle.VehicleMeasureRes";
  }
  protected:
  explicit Vehicle_VehicleMeasureRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetRectFieldNumber = 1,
    kRegRectFieldNumber = 2,
    kTrackRectFieldNumber = 3,
    kSmoothRectFieldNumber = 4,
    kConfidenceFieldNumber = 5,
    kHitTypeFieldNumber = 6,
    kVehicleClassFieldNumber = 7,
    kVehicleIdFieldNumber = 8,
    kTrackCntFieldNumber = 9,
    kTrackStatusFieldNumber = 10,
    kTrackConfidenceFieldNumber = 11,
    kVehicleWidthFieldNumber = 12,
    kVehicleHeightFieldNumber = 13,
    kLongitudeDistFieldNumber = 14,
    kLateralDistFieldNumber = 15,
    kRelLateralSpeedFieldNumber = 16,
    kRelSpeedFieldNumber = 17,
    kSpeedAccFieldNumber = 18,
    kHeadwayFieldNumber = 19,
    kTtcFieldNumber = 20,
    kOnRouteFieldNumber = 21,
    kIsStillFieldNumber = 22,
    kRelSlowdownFieldNumber = 23,
    kIsCrucialFieldNumber = 24,
    kIsSecondCrucialFieldNumber = 25,
    kPoseClassFieldNumber = 26,
    kTraceStatusFieldNumber = 27,
  };
  // .perception.common.Rect2f det_rect = 1;
  bool has_det_rect() const;
  private:
  bool _internal_has_det_rect() const;
  public:
  void clear_det_rect();
  const ::perception::common::Rect2f& det_rect() const;
  ::perception::common::Rect2f* release_det_rect();
  ::perception::common::Rect2f* mutable_det_rect();
  void set_allocated_det_rect(::perception::common::Rect2f* det_rect);
  private:
  const ::perception::common::Rect2f& _internal_det_rect() const;
  ::perception::common::Rect2f* _internal_mutable_det_rect();
  public:
  void unsafe_arena_set_allocated_det_rect(
      ::perception::common::Rect2f* det_rect);
  ::perception::common::Rect2f* unsafe_arena_release_det_rect();

  // .perception.common.Rect2f reg_rect = 2;
  bool has_reg_rect() const;
  private:
  bool _internal_has_reg_rect() const;
  public:
  void clear_reg_rect();
  const ::perception::common::Rect2f& reg_rect() const;
  ::perception::common::Rect2f* release_reg_rect();
  ::perception::common::Rect2f* mutable_reg_rect();
  void set_allocated_reg_rect(::perception::common::Rect2f* reg_rect);
  private:
  const ::perception::common::Rect2f& _internal_reg_rect() const;
  ::perception::common::Rect2f* _internal_mutable_reg_rect();
  public:
  void unsafe_arena_set_allocated_reg_rect(
      ::perception::common::Rect2f* reg_rect);
  ::perception::common::Rect2f* unsafe_arena_release_reg_rect();

  // .perception.common.Rect2f track_rect = 3;
  bool has_track_rect() const;
  private:
  bool _internal_has_track_rect() const;
  public:
  void clear_track_rect();
  const ::perception::common::Rect2f& track_rect() const;
  ::perception::common::Rect2f* release_track_rect();
  ::perception::common::Rect2f* mutable_track_rect();
  void set_allocated_track_rect(::perception::common::Rect2f* track_rect);
  private:
  const ::perception::common::Rect2f& _internal_track_rect() const;
  ::perception::common::Rect2f* _internal_mutable_track_rect();
  public:
  void unsafe_arena_set_allocated_track_rect(
      ::perception::common::Rect2f* track_rect);
  ::perception::common::Rect2f* unsafe_arena_release_track_rect();

  // .perception.common.Rect2f smooth_rect = 4;
  bool has_smooth_rect() const;
  private:
  bool _internal_has_smooth_rect() const;
  public:
  void clear_smooth_rect();
  const ::perception::common::Rect2f& smooth_rect() const;
  ::perception::common::Rect2f* release_smooth_rect();
  ::perception::common::Rect2f* mutable_smooth_rect();
  void set_allocated_smooth_rect(::perception::common::Rect2f* smooth_rect);
  private:
  const ::perception::common::Rect2f& _internal_smooth_rect() const;
  ::perception::common::Rect2f* _internal_mutable_smooth_rect();
  public:
  void unsafe_arena_set_allocated_smooth_rect(
      ::perception::common::Rect2f* smooth_rect);
  ::perception::common::Rect2f* unsafe_arena_release_smooth_rect();

  // float confidence = 5;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // int32 hit_type = 6;
  void clear_hit_type();
  ::PROTOBUF_NAMESPACE_ID::int32 hit_type() const;
  void set_hit_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hit_type() const;
  void _internal_set_hit_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vehicle_class = 7;
  void clear_vehicle_class();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_class() const;
  void set_vehicle_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_class() const;
  void _internal_set_vehicle_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vehicle_id = 8;
  void clear_vehicle_id();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_id() const;
  void set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_id() const;
  void _internal_set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 track_cnt = 9;
  void clear_track_cnt();
  ::PROTOBUF_NAMESPACE_ID::int32 track_cnt() const;
  void set_track_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_track_cnt() const;
  void _internal_set_track_cnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 track_status = 10;
  void clear_track_status();
  ::PROTOBUF_NAMESPACE_ID::int32 track_status() const;
  void set_track_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_track_status() const;
  void _internal_set_track_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float track_confidence = 11;
  void clear_track_confidence();
  float track_confidence() const;
  void set_track_confidence(float value);
  private:
  float _internal_track_confidence() const;
  void _internal_set_track_confidence(float value);
  public:

  // float vehicle_width = 12;
  void clear_vehicle_width();
  float vehicle_width() const;
  void set_vehicle_width(float value);
  private:
  float _internal_vehicle_width() const;
  void _internal_set_vehicle_width(float value);
  public:

  // float vehicle_height = 13;
  void clear_vehicle_height();
  float vehicle_height() const;
  void set_vehicle_height(float value);
  private:
  float _internal_vehicle_height() const;
  void _internal_set_vehicle_height(float value);
  public:

  // float longitude_dist = 14;
  void clear_longitude_dist();
  float longitude_dist() const;
  void set_longitude_dist(float value);
  private:
  float _internal_longitude_dist() const;
  void _internal_set_longitude_dist(float value);
  public:

  // float lateral_dist = 15;
  void clear_lateral_dist();
  float lateral_dist() const;
  void set_lateral_dist(float value);
  private:
  float _internal_lateral_dist() const;
  void _internal_set_lateral_dist(float value);
  public:

  // float rel_lateral_speed = 16;
  void clear_rel_lateral_speed();
  float rel_lateral_speed() const;
  void set_rel_lateral_speed(float value);
  private:
  float _internal_rel_lateral_speed() const;
  void _internal_set_rel_lateral_speed(float value);
  public:

  // float rel_speed = 17;
  void clear_rel_speed();
  float rel_speed() const;
  void set_rel_speed(float value);
  private:
  float _internal_rel_speed() const;
  void _internal_set_rel_speed(float value);
  public:

  // float speed_acc = 18;
  void clear_speed_acc();
  float speed_acc() const;
  void set_speed_acc(float value);
  private:
  float _internal_speed_acc() const;
  void _internal_set_speed_acc(float value);
  public:

  // float headway = 19;
  void clear_headway();
  float headway() const;
  void set_headway(float value);
  private:
  float _internal_headway() const;
  void _internal_set_headway(float value);
  public:

  // float ttc = 20;
  void clear_ttc();
  float ttc() const;
  void set_ttc(float value);
  private:
  float _internal_ttc() const;
  void _internal_set_ttc(float value);
  public:

  // bool on_route = 21;
  void clear_on_route();
  bool on_route() const;
  void set_on_route(bool value);
  private:
  bool _internal_on_route() const;
  void _internal_set_on_route(bool value);
  public:

  // bool is_still = 22;
  void clear_is_still();
  bool is_still() const;
  void set_is_still(bool value);
  private:
  bool _internal_is_still() const;
  void _internal_set_is_still(bool value);
  public:

  // bool rel_slowdown = 23;
  void clear_rel_slowdown();
  bool rel_slowdown() const;
  void set_rel_slowdown(bool value);
  private:
  bool _internal_rel_slowdown() const;
  void _internal_set_rel_slowdown(bool value);
  public:

  // bool is_crucial = 24;
  void clear_is_crucial();
  bool is_crucial() const;
  void set_is_crucial(bool value);
  private:
  bool _internal_is_crucial() const;
  void _internal_set_is_crucial(bool value);
  public:

  // bool is_second_crucial = 25;
  void clear_is_second_crucial();
  bool is_second_crucial() const;
  void set_is_second_crucial(bool value);
  private:
  bool _internal_is_second_crucial() const;
  void _internal_set_is_second_crucial(bool value);
  public:

  // int32 pose_class = 26;
  void clear_pose_class();
  ::PROTOBUF_NAMESPACE_ID::int32 pose_class() const;
  void set_pose_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pose_class() const;
  void _internal_set_pose_class(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trace_status = 27;
  void clear_trace_status();
  ::PROTOBUF_NAMESPACE_ID::int32 trace_status() const;
  void set_trace_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trace_status() const;
  void _internal_set_trace_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Vehicle.VehicleMeasureRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::common::Rect2f* det_rect_;
  ::perception::common::Rect2f* reg_rect_;
  ::perception::common::Rect2f* track_rect_;
  ::perception::common::Rect2f* smooth_rect_;
  float confidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 hit_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_class_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_cnt_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_status_;
  float track_confidence_;
  float vehicle_width_;
  float vehicle_height_;
  float longitude_dist_;
  float lateral_dist_;
  float rel_lateral_speed_;
  float rel_speed_;
  float speed_acc_;
  float headway_;
  float ttc_;
  bool on_route_;
  bool is_still_;
  bool rel_slowdown_;
  bool is_crucial_;
  bool is_second_crucial_;
  ::PROTOBUF_NAMESPACE_ID::int32 pose_class_;
  ::PROTOBUF_NAMESPACE_ID::int32 trace_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class Vehicle_VehicleWarning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Vehicle.VehicleWarning) */ {
 public:
  inline Vehicle_VehicleWarning() : Vehicle_VehicleWarning(nullptr) {};
  virtual ~Vehicle_VehicleWarning();

  Vehicle_VehicleWarning(const Vehicle_VehicleWarning& from);
  Vehicle_VehicleWarning(Vehicle_VehicleWarning&& from) noexcept
    : Vehicle_VehicleWarning() {
    *this = ::std::move(from);
  }

  inline Vehicle_VehicleWarning& operator=(const Vehicle_VehicleWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle_VehicleWarning& operator=(Vehicle_VehicleWarning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle_VehicleWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle_VehicleWarning* internal_default_instance() {
    return reinterpret_cast<const Vehicle_VehicleWarning*>(
               &_Vehicle_VehicleWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vehicle_VehicleWarning& a, Vehicle_VehicleWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehicle_VehicleWarning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vehicle_VehicleWarning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehicle_VehicleWarning* New() const final {
    return CreateMaybeMessage<Vehicle_VehicleWarning>(nullptr);
  }

  Vehicle_VehicleWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle_VehicleWarning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle_VehicleWarning& from);
  void MergeFrom(const Vehicle_VehicleWarning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle_VehicleWarning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Vehicle.VehicleWarning";
  }
  protected:
  explicit Vehicle_VehicleWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleIdFieldNumber = 1,
    kHeadwayFieldNumber = 2,
    kWarningLevelFieldNumber = 3,
    kFcwFieldNumber = 4,
    kUfcwFieldNumber = 5,
    kHeadwayWarningFieldNumber = 6,
    kVbWarningFieldNumber = 7,
    kSagWarningFieldNumber = 8,
  };
  // int32 vehicle_id = 1;
  void clear_vehicle_id();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_id() const;
  void set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_id() const;
  void _internal_set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float headway = 2;
  void clear_headway();
  float headway() const;
  void set_headway(float value);
  private:
  float _internal_headway() const;
  void _internal_set_headway(float value);
  public:

  // int32 warning_level = 3;
  void clear_warning_level();
  ::PROTOBUF_NAMESPACE_ID::int32 warning_level() const;
  void set_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_warning_level() const;
  void _internal_set_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fcw = 4;
  void clear_fcw();
  ::PROTOBUF_NAMESPACE_ID::int32 fcw() const;
  void set_fcw(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fcw() const;
  void _internal_set_fcw(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ufcw = 5;
  void clear_ufcw();
  ::PROTOBUF_NAMESPACE_ID::int32 ufcw() const;
  void set_ufcw(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ufcw() const;
  void _internal_set_ufcw(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 headway_warning = 6;
  void clear_headway_warning();
  ::PROTOBUF_NAMESPACE_ID::int32 headway_warning() const;
  void set_headway_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_headway_warning() const;
  void _internal_set_headway_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vb_warning = 7;
  void clear_vb_warning();
  ::PROTOBUF_NAMESPACE_ID::int32 vb_warning() const;
  void set_vb_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vb_warning() const;
  void _internal_set_vb_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sag_warning = 8;
  void clear_sag_warning();
  ::PROTOBUF_NAMESPACE_ID::int32 sag_warning() const;
  void set_sag_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sag_warning() const;
  void _internal_set_sag_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Vehicle.VehicleWarning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_id_;
  float headway_;
  ::PROTOBUF_NAMESPACE_ID::int32 warning_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 fcw_;
  ::PROTOBUF_NAMESPACE_ID::int32 ufcw_;
  ::PROTOBUF_NAMESPACE_ID::int32 headway_warning_;
  ::PROTOBUF_NAMESPACE_ID::int32 vb_warning_;
  ::PROTOBUF_NAMESPACE_ID::int32 sag_warning_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class Vehicle_VehicleState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Vehicle.VehicleState) */ {
 public:
  inline Vehicle_VehicleState() : Vehicle_VehicleState(nullptr) {};
  virtual ~Vehicle_VehicleState();

  Vehicle_VehicleState(const Vehicle_VehicleState& from);
  Vehicle_VehicleState(Vehicle_VehicleState&& from) noexcept
    : Vehicle_VehicleState() {
    *this = ::std::move(from);
  }

  inline Vehicle_VehicleState& operator=(const Vehicle_VehicleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle_VehicleState& operator=(Vehicle_VehicleState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle_VehicleState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle_VehicleState* internal_default_instance() {
    return reinterpret_cast<const Vehicle_VehicleState*>(
               &_Vehicle_VehicleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vehicle_VehicleState& a, Vehicle_VehicleState& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehicle_VehicleState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vehicle_VehicleState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehicle_VehicleState* New() const final {
    return CreateMaybeMessage<Vehicle_VehicleState>(nullptr);
  }

  Vehicle_VehicleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle_VehicleState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle_VehicleState& from);
  void MergeFrom(const Vehicle_VehicleState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle_VehicleState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Vehicle.VehicleState";
  }
  protected:
  explicit Vehicle_VehicleState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFcwStateFieldNumber = 1,
    kHmwStateFieldNumber = 2,
  };
  // int32 fcw_state = 1;
  void clear_fcw_state();
  ::PROTOBUF_NAMESPACE_ID::int32 fcw_state() const;
  void set_fcw_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fcw_state() const;
  void _internal_set_fcw_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hmw_state = 2;
  void clear_hmw_state();
  ::PROTOBUF_NAMESPACE_ID::int32 hmw_state() const;
  void set_hmw_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hmw_state() const;
  void _internal_set_hmw_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Vehicle.VehicleState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fcw_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 hmw_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// -------------------------------------------------------------------

class Vehicle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.Vehicle) */ {
 public:
  inline Vehicle() : Vehicle(nullptr) {};
  virtual ~Vehicle();

  Vehicle(const Vehicle& from);
  Vehicle(Vehicle&& from) noexcept
    : Vehicle() {
    *this = ::std::move(from);
  }

  inline Vehicle& operator=(const Vehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle& operator=(Vehicle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle* internal_default_instance() {
    return reinterpret_cast<const Vehicle*>(
               &_Vehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Vehicle& a, Vehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehicle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vehicle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehicle* New() const final {
    return CreateMaybeMessage<Vehicle>(nullptr);
  }

  Vehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle& from);
  void MergeFrom(const Vehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.Vehicle";
  }
  protected:
  explicit Vehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_2eproto);
    return ::descriptor_table_vehicle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Vehicle_VehicleMeasureRes VehicleMeasureRes;
  typedef Vehicle_VehicleWarning VehicleWarning;
  typedef Vehicle_VehicleState VehicleState;

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleListFieldNumber = 3,
    kVehicleWarningFieldNumber = 4,
    kStateFieldNumber = 5,
    kFrameIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kDataSourceFieldNumber = 10,
  };
  // repeated .perception.Vehicle.VehicleMeasureRes vehicle_list = 3;
  int vehicle_list_size() const;
  private:
  int _internal_vehicle_list_size() const;
  public:
  void clear_vehicle_list();
  ::perception::Vehicle_VehicleMeasureRes* mutable_vehicle_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Vehicle_VehicleMeasureRes >*
      mutable_vehicle_list();
  private:
  const ::perception::Vehicle_VehicleMeasureRes& _internal_vehicle_list(int index) const;
  ::perception::Vehicle_VehicleMeasureRes* _internal_add_vehicle_list();
  public:
  const ::perception::Vehicle_VehicleMeasureRes& vehicle_list(int index) const;
  ::perception::Vehicle_VehicleMeasureRes* add_vehicle_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Vehicle_VehicleMeasureRes >&
      vehicle_list() const;

  // .perception.Vehicle.VehicleWarning vehicle_warning = 4;
  bool has_vehicle_warning() const;
  private:
  bool _internal_has_vehicle_warning() const;
  public:
  void clear_vehicle_warning();
  const ::perception::Vehicle_VehicleWarning& vehicle_warning() const;
  ::perception::Vehicle_VehicleWarning* release_vehicle_warning();
  ::perception::Vehicle_VehicleWarning* mutable_vehicle_warning();
  void set_allocated_vehicle_warning(::perception::Vehicle_VehicleWarning* vehicle_warning);
  private:
  const ::perception::Vehicle_VehicleWarning& _internal_vehicle_warning() const;
  ::perception::Vehicle_VehicleWarning* _internal_mutable_vehicle_warning();
  public:
  void unsafe_arena_set_allocated_vehicle_warning(
      ::perception::Vehicle_VehicleWarning* vehicle_warning);
  ::perception::Vehicle_VehicleWarning* unsafe_arena_release_vehicle_warning();

  // .perception.Vehicle.VehicleState state = 5;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::perception::Vehicle_VehicleState& state() const;
  ::perception::Vehicle_VehicleState* release_state();
  ::perception::Vehicle_VehicleState* mutable_state();
  void set_allocated_state(::perception::Vehicle_VehicleState* state);
  private:
  const ::perception::Vehicle_VehicleState& _internal_state() const;
  ::perception::Vehicle_VehicleState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::perception::Vehicle_VehicleState* state);
  ::perception::Vehicle_VehicleState* unsafe_arena_release_state();

  // uint64 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .minieye.DataSource data_source = 10;
  void clear_data_source();
  ::minieye::DataSource data_source() const;
  void set_data_source(::minieye::DataSource value);
  private:
  ::minieye::DataSource _internal_data_source() const;
  void _internal_set_data_source(::minieye::DataSource value);
  public:

  // @@protoc_insertion_point(class_scope:perception.Vehicle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Vehicle_VehicleMeasureRes > vehicle_list_;
  ::perception::Vehicle_VehicleWarning* vehicle_warning_;
  ::perception::Vehicle_VehicleState* state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  int data_source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vehicle_VehicleMeasureRes

// .perception.common.Rect2f det_rect = 1;
inline bool Vehicle_VehicleMeasureRes::_internal_has_det_rect() const {
  return this != internal_default_instance() && det_rect_ != nullptr;
}
inline bool Vehicle_VehicleMeasureRes::has_det_rect() const {
  return _internal_has_det_rect();
}
inline const ::perception::common::Rect2f& Vehicle_VehicleMeasureRes::_internal_det_rect() const {
  const ::perception::common::Rect2f* p = det_rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Rect2f*>(
      &::perception::common::_Rect2f_default_instance_);
}
inline const ::perception::common::Rect2f& Vehicle_VehicleMeasureRes::det_rect() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.det_rect)
  return _internal_det_rect();
}
inline void Vehicle_VehicleMeasureRes::unsafe_arena_set_allocated_det_rect(
    ::perception::common::Rect2f* det_rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(det_rect_);
  }
  det_rect_ = det_rect;
  if (det_rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.Vehicle.VehicleMeasureRes.det_rect)
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::release_det_rect() {
  auto temp = unsafe_arena_release_det_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::unsafe_arena_release_det_rect() {
  // @@protoc_insertion_point(field_release:perception.Vehicle.VehicleMeasureRes.det_rect)
  
  ::perception::common::Rect2f* temp = det_rect_;
  det_rect_ = nullptr;
  return temp;
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::_internal_mutable_det_rect() {
  
  if (det_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Rect2f>(GetArena());
    det_rect_ = p;
  }
  return det_rect_;
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::mutable_det_rect() {
  // @@protoc_insertion_point(field_mutable:perception.Vehicle.VehicleMeasureRes.det_rect)
  return _internal_mutable_det_rect();
}
inline void Vehicle_VehicleMeasureRes::set_allocated_det_rect(::perception::common::Rect2f* det_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(det_rect_);
  }
  if (det_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(det_rect)->GetArena();
    if (message_arena != submessage_arena) {
      det_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, det_rect, submessage_arena);
    }
    
  } else {
    
  }
  det_rect_ = det_rect;
  // @@protoc_insertion_point(field_set_allocated:perception.Vehicle.VehicleMeasureRes.det_rect)
}

// .perception.common.Rect2f reg_rect = 2;
inline bool Vehicle_VehicleMeasureRes::_internal_has_reg_rect() const {
  return this != internal_default_instance() && reg_rect_ != nullptr;
}
inline bool Vehicle_VehicleMeasureRes::has_reg_rect() const {
  return _internal_has_reg_rect();
}
inline const ::perception::common::Rect2f& Vehicle_VehicleMeasureRes::_internal_reg_rect() const {
  const ::perception::common::Rect2f* p = reg_rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Rect2f*>(
      &::perception::common::_Rect2f_default_instance_);
}
inline const ::perception::common::Rect2f& Vehicle_VehicleMeasureRes::reg_rect() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.reg_rect)
  return _internal_reg_rect();
}
inline void Vehicle_VehicleMeasureRes::unsafe_arena_set_allocated_reg_rect(
    ::perception::common::Rect2f* reg_rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reg_rect_);
  }
  reg_rect_ = reg_rect;
  if (reg_rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.Vehicle.VehicleMeasureRes.reg_rect)
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::release_reg_rect() {
  auto temp = unsafe_arena_release_reg_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::unsafe_arena_release_reg_rect() {
  // @@protoc_insertion_point(field_release:perception.Vehicle.VehicleMeasureRes.reg_rect)
  
  ::perception::common::Rect2f* temp = reg_rect_;
  reg_rect_ = nullptr;
  return temp;
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::_internal_mutable_reg_rect() {
  
  if (reg_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Rect2f>(GetArena());
    reg_rect_ = p;
  }
  return reg_rect_;
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::mutable_reg_rect() {
  // @@protoc_insertion_point(field_mutable:perception.Vehicle.VehicleMeasureRes.reg_rect)
  return _internal_mutable_reg_rect();
}
inline void Vehicle_VehicleMeasureRes::set_allocated_reg_rect(::perception::common::Rect2f* reg_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reg_rect_);
  }
  if (reg_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reg_rect)->GetArena();
    if (message_arena != submessage_arena) {
      reg_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reg_rect, submessage_arena);
    }
    
  } else {
    
  }
  reg_rect_ = reg_rect;
  // @@protoc_insertion_point(field_set_allocated:perception.Vehicle.VehicleMeasureRes.reg_rect)
}

// .perception.common.Rect2f track_rect = 3;
inline bool Vehicle_VehicleMeasureRes::_internal_has_track_rect() const {
  return this != internal_default_instance() && track_rect_ != nullptr;
}
inline bool Vehicle_VehicleMeasureRes::has_track_rect() const {
  return _internal_has_track_rect();
}
inline const ::perception::common::Rect2f& Vehicle_VehicleMeasureRes::_internal_track_rect() const {
  const ::perception::common::Rect2f* p = track_rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Rect2f*>(
      &::perception::common::_Rect2f_default_instance_);
}
inline const ::perception::common::Rect2f& Vehicle_VehicleMeasureRes::track_rect() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.track_rect)
  return _internal_track_rect();
}
inline void Vehicle_VehicleMeasureRes::unsafe_arena_set_allocated_track_rect(
    ::perception::common::Rect2f* track_rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_rect_);
  }
  track_rect_ = track_rect;
  if (track_rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.Vehicle.VehicleMeasureRes.track_rect)
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::release_track_rect() {
  auto temp = unsafe_arena_release_track_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::unsafe_arena_release_track_rect() {
  // @@protoc_insertion_point(field_release:perception.Vehicle.VehicleMeasureRes.track_rect)
  
  ::perception::common::Rect2f* temp = track_rect_;
  track_rect_ = nullptr;
  return temp;
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::_internal_mutable_track_rect() {
  
  if (track_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Rect2f>(GetArena());
    track_rect_ = p;
  }
  return track_rect_;
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::mutable_track_rect() {
  // @@protoc_insertion_point(field_mutable:perception.Vehicle.VehicleMeasureRes.track_rect)
  return _internal_mutable_track_rect();
}
inline void Vehicle_VehicleMeasureRes::set_allocated_track_rect(::perception::common::Rect2f* track_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_rect_);
  }
  if (track_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_rect)->GetArena();
    if (message_arena != submessage_arena) {
      track_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_rect, submessage_arena);
    }
    
  } else {
    
  }
  track_rect_ = track_rect;
  // @@protoc_insertion_point(field_set_allocated:perception.Vehicle.VehicleMeasureRes.track_rect)
}

// .perception.common.Rect2f smooth_rect = 4;
inline bool Vehicle_VehicleMeasureRes::_internal_has_smooth_rect() const {
  return this != internal_default_instance() && smooth_rect_ != nullptr;
}
inline bool Vehicle_VehicleMeasureRes::has_smooth_rect() const {
  return _internal_has_smooth_rect();
}
inline const ::perception::common::Rect2f& Vehicle_VehicleMeasureRes::_internal_smooth_rect() const {
  const ::perception::common::Rect2f* p = smooth_rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Rect2f*>(
      &::perception::common::_Rect2f_default_instance_);
}
inline const ::perception::common::Rect2f& Vehicle_VehicleMeasureRes::smooth_rect() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.smooth_rect)
  return _internal_smooth_rect();
}
inline void Vehicle_VehicleMeasureRes::unsafe_arena_set_allocated_smooth_rect(
    ::perception::common::Rect2f* smooth_rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smooth_rect_);
  }
  smooth_rect_ = smooth_rect;
  if (smooth_rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.Vehicle.VehicleMeasureRes.smooth_rect)
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::release_smooth_rect() {
  auto temp = unsafe_arena_release_smooth_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::unsafe_arena_release_smooth_rect() {
  // @@protoc_insertion_point(field_release:perception.Vehicle.VehicleMeasureRes.smooth_rect)
  
  ::perception::common::Rect2f* temp = smooth_rect_;
  smooth_rect_ = nullptr;
  return temp;
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::_internal_mutable_smooth_rect() {
  
  if (smooth_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Rect2f>(GetArena());
    smooth_rect_ = p;
  }
  return smooth_rect_;
}
inline ::perception::common::Rect2f* Vehicle_VehicleMeasureRes::mutable_smooth_rect() {
  // @@protoc_insertion_point(field_mutable:perception.Vehicle.VehicleMeasureRes.smooth_rect)
  return _internal_mutable_smooth_rect();
}
inline void Vehicle_VehicleMeasureRes::set_allocated_smooth_rect(::perception::common::Rect2f* smooth_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(smooth_rect_);
  }
  if (smooth_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smooth_rect)->GetArena();
    if (message_arena != submessage_arena) {
      smooth_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smooth_rect, submessage_arena);
    }
    
  } else {
    
  }
  smooth_rect_ = smooth_rect;
  // @@protoc_insertion_point(field_set_allocated:perception.Vehicle.VehicleMeasureRes.smooth_rect)
}

// float confidence = 5;
inline void Vehicle_VehicleMeasureRes::clear_confidence() {
  confidence_ = 0;
}
inline float Vehicle_VehicleMeasureRes::_internal_confidence() const {
  return confidence_;
}
inline float Vehicle_VehicleMeasureRes::confidence() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.confidence)
  return _internal_confidence();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.confidence)
}

// int32 hit_type = 6;
inline void Vehicle_VehicleMeasureRes::clear_hit_type() {
  hit_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::_internal_hit_type() const {
  return hit_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::hit_type() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.hit_type)
  return _internal_hit_type();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_hit_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hit_type_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_hit_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hit_type(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.hit_type)
}

// int32 vehicle_class = 7;
inline void Vehicle_VehicleMeasureRes::clear_vehicle_class() {
  vehicle_class_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::_internal_vehicle_class() const {
  return vehicle_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::vehicle_class() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.vehicle_class)
  return _internal_vehicle_class();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_vehicle_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_class_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_vehicle_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_class(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.vehicle_class)
}

// int32 vehicle_id = 8;
inline void Vehicle_VehicleMeasureRes::clear_vehicle_id() {
  vehicle_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::_internal_vehicle_id() const {
  return vehicle_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::vehicle_id() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.vehicle_id)
  return _internal_vehicle_id();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_id_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.vehicle_id)
}

// int32 track_cnt = 9;
inline void Vehicle_VehicleMeasureRes::clear_track_cnt() {
  track_cnt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::_internal_track_cnt() const {
  return track_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::track_cnt() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.track_cnt)
  return _internal_track_cnt();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_track_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  track_cnt_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_track_cnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_track_cnt(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.track_cnt)
}

// int32 track_status = 10;
inline void Vehicle_VehicleMeasureRes::clear_track_status() {
  track_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::_internal_track_status() const {
  return track_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::track_status() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.track_status)
  return _internal_track_status();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_track_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  track_status_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_track_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_track_status(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.track_status)
}

// float track_confidence = 11;
inline void Vehicle_VehicleMeasureRes::clear_track_confidence() {
  track_confidence_ = 0;
}
inline float Vehicle_VehicleMeasureRes::_internal_track_confidence() const {
  return track_confidence_;
}
inline float Vehicle_VehicleMeasureRes::track_confidence() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.track_confidence)
  return _internal_track_confidence();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_track_confidence(float value) {
  
  track_confidence_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_track_confidence(float value) {
  _internal_set_track_confidence(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.track_confidence)
}

// float vehicle_width = 12;
inline void Vehicle_VehicleMeasureRes::clear_vehicle_width() {
  vehicle_width_ = 0;
}
inline float Vehicle_VehicleMeasureRes::_internal_vehicle_width() const {
  return vehicle_width_;
}
inline float Vehicle_VehicleMeasureRes::vehicle_width() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.vehicle_width)
  return _internal_vehicle_width();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_vehicle_width(float value) {
  
  vehicle_width_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_vehicle_width(float value) {
  _internal_set_vehicle_width(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.vehicle_width)
}

// float vehicle_height = 13;
inline void Vehicle_VehicleMeasureRes::clear_vehicle_height() {
  vehicle_height_ = 0;
}
inline float Vehicle_VehicleMeasureRes::_internal_vehicle_height() const {
  return vehicle_height_;
}
inline float Vehicle_VehicleMeasureRes::vehicle_height() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.vehicle_height)
  return _internal_vehicle_height();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_vehicle_height(float value) {
  
  vehicle_height_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_vehicle_height(float value) {
  _internal_set_vehicle_height(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.vehicle_height)
}

// float longitude_dist = 14;
inline void Vehicle_VehicleMeasureRes::clear_longitude_dist() {
  longitude_dist_ = 0;
}
inline float Vehicle_VehicleMeasureRes::_internal_longitude_dist() const {
  return longitude_dist_;
}
inline float Vehicle_VehicleMeasureRes::longitude_dist() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.longitude_dist)
  return _internal_longitude_dist();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_longitude_dist(float value) {
  
  longitude_dist_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_longitude_dist(float value) {
  _internal_set_longitude_dist(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.longitude_dist)
}

// float lateral_dist = 15;
inline void Vehicle_VehicleMeasureRes::clear_lateral_dist() {
  lateral_dist_ = 0;
}
inline float Vehicle_VehicleMeasureRes::_internal_lateral_dist() const {
  return lateral_dist_;
}
inline float Vehicle_VehicleMeasureRes::lateral_dist() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.lateral_dist)
  return _internal_lateral_dist();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_lateral_dist(float value) {
  
  lateral_dist_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_lateral_dist(float value) {
  _internal_set_lateral_dist(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.lateral_dist)
}

// float rel_lateral_speed = 16;
inline void Vehicle_VehicleMeasureRes::clear_rel_lateral_speed() {
  rel_lateral_speed_ = 0;
}
inline float Vehicle_VehicleMeasureRes::_internal_rel_lateral_speed() const {
  return rel_lateral_speed_;
}
inline float Vehicle_VehicleMeasureRes::rel_lateral_speed() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.rel_lateral_speed)
  return _internal_rel_lateral_speed();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_rel_lateral_speed(float value) {
  
  rel_lateral_speed_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_rel_lateral_speed(float value) {
  _internal_set_rel_lateral_speed(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.rel_lateral_speed)
}

// float rel_speed = 17;
inline void Vehicle_VehicleMeasureRes::clear_rel_speed() {
  rel_speed_ = 0;
}
inline float Vehicle_VehicleMeasureRes::_internal_rel_speed() const {
  return rel_speed_;
}
inline float Vehicle_VehicleMeasureRes::rel_speed() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.rel_speed)
  return _internal_rel_speed();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_rel_speed(float value) {
  
  rel_speed_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_rel_speed(float value) {
  _internal_set_rel_speed(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.rel_speed)
}

// float speed_acc = 18;
inline void Vehicle_VehicleMeasureRes::clear_speed_acc() {
  speed_acc_ = 0;
}
inline float Vehicle_VehicleMeasureRes::_internal_speed_acc() const {
  return speed_acc_;
}
inline float Vehicle_VehicleMeasureRes::speed_acc() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.speed_acc)
  return _internal_speed_acc();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_speed_acc(float value) {
  
  speed_acc_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_speed_acc(float value) {
  _internal_set_speed_acc(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.speed_acc)
}

// float headway = 19;
inline void Vehicle_VehicleMeasureRes::clear_headway() {
  headway_ = 0;
}
inline float Vehicle_VehicleMeasureRes::_internal_headway() const {
  return headway_;
}
inline float Vehicle_VehicleMeasureRes::headway() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.headway)
  return _internal_headway();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_headway(float value) {
  
  headway_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_headway(float value) {
  _internal_set_headway(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.headway)
}

// float ttc = 20;
inline void Vehicle_VehicleMeasureRes::clear_ttc() {
  ttc_ = 0;
}
inline float Vehicle_VehicleMeasureRes::_internal_ttc() const {
  return ttc_;
}
inline float Vehicle_VehicleMeasureRes::ttc() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.ttc)
  return _internal_ttc();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_ttc(float value) {
  
  ttc_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_ttc(float value) {
  _internal_set_ttc(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.ttc)
}

// bool on_route = 21;
inline void Vehicle_VehicleMeasureRes::clear_on_route() {
  on_route_ = false;
}
inline bool Vehicle_VehicleMeasureRes::_internal_on_route() const {
  return on_route_;
}
inline bool Vehicle_VehicleMeasureRes::on_route() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.on_route)
  return _internal_on_route();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_on_route(bool value) {
  
  on_route_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_on_route(bool value) {
  _internal_set_on_route(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.on_route)
}

// bool is_still = 22;
inline void Vehicle_VehicleMeasureRes::clear_is_still() {
  is_still_ = false;
}
inline bool Vehicle_VehicleMeasureRes::_internal_is_still() const {
  return is_still_;
}
inline bool Vehicle_VehicleMeasureRes::is_still() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.is_still)
  return _internal_is_still();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_is_still(bool value) {
  
  is_still_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_is_still(bool value) {
  _internal_set_is_still(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.is_still)
}

// bool rel_slowdown = 23;
inline void Vehicle_VehicleMeasureRes::clear_rel_slowdown() {
  rel_slowdown_ = false;
}
inline bool Vehicle_VehicleMeasureRes::_internal_rel_slowdown() const {
  return rel_slowdown_;
}
inline bool Vehicle_VehicleMeasureRes::rel_slowdown() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.rel_slowdown)
  return _internal_rel_slowdown();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_rel_slowdown(bool value) {
  
  rel_slowdown_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_rel_slowdown(bool value) {
  _internal_set_rel_slowdown(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.rel_slowdown)
}

// bool is_crucial = 24;
inline void Vehicle_VehicleMeasureRes::clear_is_crucial() {
  is_crucial_ = false;
}
inline bool Vehicle_VehicleMeasureRes::_internal_is_crucial() const {
  return is_crucial_;
}
inline bool Vehicle_VehicleMeasureRes::is_crucial() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.is_crucial)
  return _internal_is_crucial();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_is_crucial(bool value) {
  
  is_crucial_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_is_crucial(bool value) {
  _internal_set_is_crucial(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.is_crucial)
}

// bool is_second_crucial = 25;
inline void Vehicle_VehicleMeasureRes::clear_is_second_crucial() {
  is_second_crucial_ = false;
}
inline bool Vehicle_VehicleMeasureRes::_internal_is_second_crucial() const {
  return is_second_crucial_;
}
inline bool Vehicle_VehicleMeasureRes::is_second_crucial() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.is_second_crucial)
  return _internal_is_second_crucial();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_is_second_crucial(bool value) {
  
  is_second_crucial_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_is_second_crucial(bool value) {
  _internal_set_is_second_crucial(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.is_second_crucial)
}

// int32 pose_class = 26;
inline void Vehicle_VehicleMeasureRes::clear_pose_class() {
  pose_class_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::_internal_pose_class() const {
  return pose_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::pose_class() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.pose_class)
  return _internal_pose_class();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_pose_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pose_class_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_pose_class(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pose_class(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.pose_class)
}

// int32 trace_status = 27;
inline void Vehicle_VehicleMeasureRes::clear_trace_status() {
  trace_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::_internal_trace_status() const {
  return trace_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleMeasureRes::trace_status() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleMeasureRes.trace_status)
  return _internal_trace_status();
}
inline void Vehicle_VehicleMeasureRes::_internal_set_trace_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trace_status_ = value;
}
inline void Vehicle_VehicleMeasureRes::set_trace_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trace_status(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleMeasureRes.trace_status)
}

// -------------------------------------------------------------------

// Vehicle_VehicleWarning

// int32 vehicle_id = 1;
inline void Vehicle_VehicleWarning::clear_vehicle_id() {
  vehicle_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::_internal_vehicle_id() const {
  return vehicle_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::vehicle_id() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleWarning.vehicle_id)
  return _internal_vehicle_id();
}
inline void Vehicle_VehicleWarning::_internal_set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_id_ = value;
}
inline void Vehicle_VehicleWarning::set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleWarning.vehicle_id)
}

// float headway = 2;
inline void Vehicle_VehicleWarning::clear_headway() {
  headway_ = 0;
}
inline float Vehicle_VehicleWarning::_internal_headway() const {
  return headway_;
}
inline float Vehicle_VehicleWarning::headway() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleWarning.headway)
  return _internal_headway();
}
inline void Vehicle_VehicleWarning::_internal_set_headway(float value) {
  
  headway_ = value;
}
inline void Vehicle_VehicleWarning::set_headway(float value) {
  _internal_set_headway(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleWarning.headway)
}

// int32 warning_level = 3;
inline void Vehicle_VehicleWarning::clear_warning_level() {
  warning_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::_internal_warning_level() const {
  return warning_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::warning_level() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleWarning.warning_level)
  return _internal_warning_level();
}
inline void Vehicle_VehicleWarning::_internal_set_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  warning_level_ = value;
}
inline void Vehicle_VehicleWarning::set_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_warning_level(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleWarning.warning_level)
}

// int32 fcw = 4;
inline void Vehicle_VehicleWarning::clear_fcw() {
  fcw_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::_internal_fcw() const {
  return fcw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::fcw() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleWarning.fcw)
  return _internal_fcw();
}
inline void Vehicle_VehicleWarning::_internal_set_fcw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fcw_ = value;
}
inline void Vehicle_VehicleWarning::set_fcw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fcw(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleWarning.fcw)
}

// int32 ufcw = 5;
inline void Vehicle_VehicleWarning::clear_ufcw() {
  ufcw_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::_internal_ufcw() const {
  return ufcw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::ufcw() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleWarning.ufcw)
  return _internal_ufcw();
}
inline void Vehicle_VehicleWarning::_internal_set_ufcw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ufcw_ = value;
}
inline void Vehicle_VehicleWarning::set_ufcw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ufcw(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleWarning.ufcw)
}

// int32 headway_warning = 6;
inline void Vehicle_VehicleWarning::clear_headway_warning() {
  headway_warning_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::_internal_headway_warning() const {
  return headway_warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::headway_warning() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleWarning.headway_warning)
  return _internal_headway_warning();
}
inline void Vehicle_VehicleWarning::_internal_set_headway_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  headway_warning_ = value;
}
inline void Vehicle_VehicleWarning::set_headway_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_headway_warning(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleWarning.headway_warning)
}

// int32 vb_warning = 7;
inline void Vehicle_VehicleWarning::clear_vb_warning() {
  vb_warning_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::_internal_vb_warning() const {
  return vb_warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::vb_warning() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleWarning.vb_warning)
  return _internal_vb_warning();
}
inline void Vehicle_VehicleWarning::_internal_set_vb_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vb_warning_ = value;
}
inline void Vehicle_VehicleWarning::set_vb_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vb_warning(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleWarning.vb_warning)
}

// int32 sag_warning = 8;
inline void Vehicle_VehicleWarning::clear_sag_warning() {
  sag_warning_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::_internal_sag_warning() const {
  return sag_warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleWarning::sag_warning() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleWarning.sag_warning)
  return _internal_sag_warning();
}
inline void Vehicle_VehicleWarning::_internal_set_sag_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sag_warning_ = value;
}
inline void Vehicle_VehicleWarning::set_sag_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sag_warning(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleWarning.sag_warning)
}

// -------------------------------------------------------------------

// Vehicle_VehicleState

// int32 fcw_state = 1;
inline void Vehicle_VehicleState::clear_fcw_state() {
  fcw_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleState::_internal_fcw_state() const {
  return fcw_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleState::fcw_state() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleState.fcw_state)
  return _internal_fcw_state();
}
inline void Vehicle_VehicleState::_internal_set_fcw_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fcw_state_ = value;
}
inline void Vehicle_VehicleState::set_fcw_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fcw_state(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleState.fcw_state)
}

// int32 hmw_state = 2;
inline void Vehicle_VehicleState::clear_hmw_state() {
  hmw_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleState::_internal_hmw_state() const {
  return hmw_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle_VehicleState::hmw_state() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.VehicleState.hmw_state)
  return _internal_hmw_state();
}
inline void Vehicle_VehicleState::_internal_set_hmw_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hmw_state_ = value;
}
inline void Vehicle_VehicleState::set_hmw_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hmw_state(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.VehicleState.hmw_state)
}

// -------------------------------------------------------------------

// Vehicle

// uint64 frame_id = 1;
inline void Vehicle::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vehicle::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vehicle::frame_id() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.frame_id)
  return _internal_frame_id();
}
inline void Vehicle::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_id_ = value;
}
inline void Vehicle::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.frame_id)
}

// uint64 timestamp = 2;
inline void Vehicle::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vehicle::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vehicle::timestamp() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.timestamp)
  return _internal_timestamp();
}
inline void Vehicle::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Vehicle::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.timestamp)
}

// repeated .perception.Vehicle.VehicleMeasureRes vehicle_list = 3;
inline int Vehicle::_internal_vehicle_list_size() const {
  return vehicle_list_.size();
}
inline int Vehicle::vehicle_list_size() const {
  return _internal_vehicle_list_size();
}
inline void Vehicle::clear_vehicle_list() {
  vehicle_list_.Clear();
}
inline ::perception::Vehicle_VehicleMeasureRes* Vehicle::mutable_vehicle_list(int index) {
  // @@protoc_insertion_point(field_mutable:perception.Vehicle.vehicle_list)
  return vehicle_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Vehicle_VehicleMeasureRes >*
Vehicle::mutable_vehicle_list() {
  // @@protoc_insertion_point(field_mutable_list:perception.Vehicle.vehicle_list)
  return &vehicle_list_;
}
inline const ::perception::Vehicle_VehicleMeasureRes& Vehicle::_internal_vehicle_list(int index) const {
  return vehicle_list_.Get(index);
}
inline const ::perception::Vehicle_VehicleMeasureRes& Vehicle::vehicle_list(int index) const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.vehicle_list)
  return _internal_vehicle_list(index);
}
inline ::perception::Vehicle_VehicleMeasureRes* Vehicle::_internal_add_vehicle_list() {
  return vehicle_list_.Add();
}
inline ::perception::Vehicle_VehicleMeasureRes* Vehicle::add_vehicle_list() {
  // @@protoc_insertion_point(field_add:perception.Vehicle.vehicle_list)
  return _internal_add_vehicle_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::Vehicle_VehicleMeasureRes >&
Vehicle::vehicle_list() const {
  // @@protoc_insertion_point(field_list:perception.Vehicle.vehicle_list)
  return vehicle_list_;
}

// .perception.Vehicle.VehicleWarning vehicle_warning = 4;
inline bool Vehicle::_internal_has_vehicle_warning() const {
  return this != internal_default_instance() && vehicle_warning_ != nullptr;
}
inline bool Vehicle::has_vehicle_warning() const {
  return _internal_has_vehicle_warning();
}
inline void Vehicle::clear_vehicle_warning() {
  if (GetArena() == nullptr && vehicle_warning_ != nullptr) {
    delete vehicle_warning_;
  }
  vehicle_warning_ = nullptr;
}
inline const ::perception::Vehicle_VehicleWarning& Vehicle::_internal_vehicle_warning() const {
  const ::perception::Vehicle_VehicleWarning* p = vehicle_warning_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::Vehicle_VehicleWarning*>(
      &::perception::_Vehicle_VehicleWarning_default_instance_);
}
inline const ::perception::Vehicle_VehicleWarning& Vehicle::vehicle_warning() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.vehicle_warning)
  return _internal_vehicle_warning();
}
inline void Vehicle::unsafe_arena_set_allocated_vehicle_warning(
    ::perception::Vehicle_VehicleWarning* vehicle_warning) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_warning_);
  }
  vehicle_warning_ = vehicle_warning;
  if (vehicle_warning) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.Vehicle.vehicle_warning)
}
inline ::perception::Vehicle_VehicleWarning* Vehicle::release_vehicle_warning() {
  auto temp = unsafe_arena_release_vehicle_warning();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::Vehicle_VehicleWarning* Vehicle::unsafe_arena_release_vehicle_warning() {
  // @@protoc_insertion_point(field_release:perception.Vehicle.vehicle_warning)
  
  ::perception::Vehicle_VehicleWarning* temp = vehicle_warning_;
  vehicle_warning_ = nullptr;
  return temp;
}
inline ::perception::Vehicle_VehicleWarning* Vehicle::_internal_mutable_vehicle_warning() {
  
  if (vehicle_warning_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::Vehicle_VehicleWarning>(GetArena());
    vehicle_warning_ = p;
  }
  return vehicle_warning_;
}
inline ::perception::Vehicle_VehicleWarning* Vehicle::mutable_vehicle_warning() {
  // @@protoc_insertion_point(field_mutable:perception.Vehicle.vehicle_warning)
  return _internal_mutable_vehicle_warning();
}
inline void Vehicle::set_allocated_vehicle_warning(::perception::Vehicle_VehicleWarning* vehicle_warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vehicle_warning_;
  }
  if (vehicle_warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vehicle_warning);
    if (message_arena != submessage_arena) {
      vehicle_warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_warning, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_warning_ = vehicle_warning;
  // @@protoc_insertion_point(field_set_allocated:perception.Vehicle.vehicle_warning)
}

// .perception.Vehicle.VehicleState state = 5;
inline bool Vehicle::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Vehicle::has_state() const {
  return _internal_has_state();
}
inline void Vehicle::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::perception::Vehicle_VehicleState& Vehicle::_internal_state() const {
  const ::perception::Vehicle_VehicleState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::Vehicle_VehicleState*>(
      &::perception::_Vehicle_VehicleState_default_instance_);
}
inline const ::perception::Vehicle_VehicleState& Vehicle::state() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.state)
  return _internal_state();
}
inline void Vehicle::unsafe_arena_set_allocated_state(
    ::perception::Vehicle_VehicleState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.Vehicle.state)
}
inline ::perception::Vehicle_VehicleState* Vehicle::release_state() {
  auto temp = unsafe_arena_release_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::Vehicle_VehicleState* Vehicle::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:perception.Vehicle.state)
  
  ::perception::Vehicle_VehicleState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::perception::Vehicle_VehicleState* Vehicle::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::Vehicle_VehicleState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::perception::Vehicle_VehicleState* Vehicle::mutable_state() {
  // @@protoc_insertion_point(field_mutable:perception.Vehicle.state)
  return _internal_mutable_state();
}
inline void Vehicle::set_allocated_state(::perception::Vehicle_VehicleState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:perception.Vehicle.state)
}

// .minieye.DataSource data_source = 10;
inline void Vehicle::clear_data_source() {
  data_source_ = 0;
}
inline ::minieye::DataSource Vehicle::_internal_data_source() const {
  return static_cast< ::minieye::DataSource >(data_source_);
}
inline ::minieye::DataSource Vehicle::data_source() const {
  // @@protoc_insertion_point(field_get:perception.Vehicle.data_source)
  return _internal_data_source();
}
inline void Vehicle::_internal_set_data_source(::minieye::DataSource value) {
  
  data_source_ = value;
}
inline void Vehicle::set_data_source(::minieye::DataSource value) {
  _internal_set_data_source(value);
  // @@protoc_insertion_point(field_set:perception.Vehicle.data_source)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicle_2eproto
