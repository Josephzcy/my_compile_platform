// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RawInsParkingSpace.proto

#include "RawInsParkingSpace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_RawInsParkingSpace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawCornerPt_RawInsParkingSpace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RawInsParkingSpace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RawInsParkingSlot_RawInsParkingSpace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RawInsParkingSpace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawRodPt_RawInsParkingSpace_2eproto;
namespace perception {
class RawCornerPtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawCornerPt> _instance;
} _RawCornerPt_default_instance_;
class RawRodPtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawRodPt> _instance;
} _RawRodPt_default_instance_;
class RawInsParkingSlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawInsParkingSlot> _instance;
} _RawInsParkingSlot_default_instance_;
class RawInsParkingSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawInsParkingSpace> _instance;
} _RawInsParkingSpace_default_instance_;
}  // namespace perception
static void InitDefaultsscc_info_RawCornerPt_RawInsParkingSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_RawCornerPt_default_instance_;
    new (ptr) ::perception::RawCornerPt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::RawCornerPt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawCornerPt_RawInsParkingSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RawCornerPt_RawInsParkingSpace_2eproto}, {}};

static void InitDefaultsscc_info_RawInsParkingSlot_RawInsParkingSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_RawInsParkingSlot_default_instance_;
    new (ptr) ::perception::RawInsParkingSlot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::RawInsParkingSlot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RawInsParkingSlot_RawInsParkingSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RawInsParkingSlot_RawInsParkingSpace_2eproto}, {
      &scc_info_RawCornerPt_RawInsParkingSpace_2eproto.base,
      &scc_info_RawRodPt_RawInsParkingSpace_2eproto.base,}};

static void InitDefaultsscc_info_RawInsParkingSpace_RawInsParkingSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_RawInsParkingSpace_default_instance_;
    new (ptr) ::perception::RawInsParkingSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::RawInsParkingSpace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RawInsParkingSpace_RawInsParkingSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RawInsParkingSpace_RawInsParkingSpace_2eproto}, {
      &scc_info_RawInsParkingSlot_RawInsParkingSpace_2eproto.base,
      &scc_info_RawRodPt_RawInsParkingSpace_2eproto.base,}};

static void InitDefaultsscc_info_RawRodPt_RawInsParkingSpace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_RawRodPt_default_instance_;
    new (ptr) ::perception::RawRodPt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::RawRodPt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawRodPt_RawInsParkingSpace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RawRodPt_RawInsParkingSpace_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RawInsParkingSpace_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_RawInsParkingSpace_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RawInsParkingSpace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RawInsParkingSpace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::RawCornerPt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::RawCornerPt, is_entry_),
  PROTOBUF_FIELD_OFFSET(::perception::RawCornerPt, is_good_),
  PROTOBUF_FIELD_OFFSET(::perception::RawCornerPt, x_),
  PROTOBUF_FIELD_OFFSET(::perception::RawCornerPt, y_),
  PROTOBUF_FIELD_OFFSET(::perception::RawCornerPt, mask_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::RawRodPt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::RawRodPt, x_),
  PROTOBUF_FIELD_OFFSET(::perception::RawRodPt, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::RawInsParkingSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::RawInsParkingSlot, confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::RawInsParkingSlot, center_pt_),
  PROTOBUF_FIELD_OFFSET(::perception::RawInsParkingSlot, occupied_),
  PROTOBUF_FIELD_OFFSET(::perception::RawInsParkingSlot, corner_pts_),
  PROTOBUF_FIELD_OFFSET(::perception::RawInsParkingSlot, exist_rod_),
  PROTOBUF_FIELD_OFFSET(::perception::RawInsParkingSlot, rod_pts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::RawInsParkingSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::RawInsParkingSpace, frame_id_),
  PROTOBUF_FIELD_OFFSET(::perception::RawInsParkingSpace, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::RawInsParkingSpace, tick_),
  PROTOBUF_FIELD_OFFSET(::perception::RawInsParkingSpace, ins_ps_),
  PROTOBUF_FIELD_OFFSET(::perception::RawInsParkingSpace, hm_rod_pts_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perception::RawCornerPt)},
  { 10, -1, sizeof(::perception::RawRodPt)},
  { 17, -1, sizeof(::perception::RawInsParkingSlot)},
  { 28, -1, sizeof(::perception::RawInsParkingSpace)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_RawCornerPt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_RawRodPt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_RawInsParkingSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_RawInsParkingSpace_default_instance_),
};

const char descriptor_table_protodef_RawInsParkingSpace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030RawInsParkingSpace.proto\022\nperception\"W"
  "\n\013RawCornerPt\022\020\n\010is_entry\030\001 \001(\010\022\017\n\007is_go"
  "od\030\002 \001(\010\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\017\n\007mask_i"
  "d\030\005 \001(\005\" \n\010RawRodPt\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001("
  "\001\"\314\001\n\021RawInsParkingSlot\022\022\n\nconfidence\030\001 "
  "\001(\001\022*\n\tcenter_pt\030\002 \001(\0132\027.perception.RawC"
  "ornerPt\022\020\n\010occupied\030\003 \001(\010\022+\n\ncorner_pts\030"
  "\004 \003(\0132\027.perception.RawCornerPt\022\021\n\texist_"
  "rod\030\005 \001(\010\022%\n\007rod_pts\030\006 \003(\0132\024.perception."
  "RawRodPt\"\240\001\n\022RawInsParkingSpace\022\020\n\010frame"
  "_id\030\001 \001(\004\022\021\n\ttimestamp\030\002 \001(\004\022\014\n\004tick\030\003 \001"
  "(\004\022-\n\006ins_ps\030\004 \003(\0132\035.perception.RawInsPa"
  "rkingSlot\022(\n\nhm_rod_pts\030\005 \003(\0132\024.percepti"
  "on.RawRodPtb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_RawInsParkingSpace_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_RawInsParkingSpace_2eproto_sccs[4] = {
  &scc_info_RawCornerPt_RawInsParkingSpace_2eproto.base,
  &scc_info_RawInsParkingSlot_RawInsParkingSpace_2eproto.base,
  &scc_info_RawInsParkingSpace_RawInsParkingSpace_2eproto.base,
  &scc_info_RawRodPt_RawInsParkingSpace_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RawInsParkingSpace_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RawInsParkingSpace_2eproto = {
  false, false, descriptor_table_protodef_RawInsParkingSpace_2eproto, "RawInsParkingSpace.proto", 539,
  &descriptor_table_RawInsParkingSpace_2eproto_once, descriptor_table_RawInsParkingSpace_2eproto_sccs, descriptor_table_RawInsParkingSpace_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_RawInsParkingSpace_2eproto::offsets,
  file_level_metadata_RawInsParkingSpace_2eproto, 4, file_level_enum_descriptors_RawInsParkingSpace_2eproto, file_level_service_descriptors_RawInsParkingSpace_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_RawInsParkingSpace_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_RawInsParkingSpace_2eproto)), true);
namespace perception {

// ===================================================================

void RawCornerPt::InitAsDefaultInstance() {
}
class RawCornerPt::_Internal {
 public:
};

RawCornerPt::RawCornerPt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.RawCornerPt)
}
RawCornerPt::RawCornerPt(const RawCornerPt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_entry_, &from.is_entry_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&is_entry_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:perception.RawCornerPt)
}

void RawCornerPt::SharedCtor() {
  ::memset(&is_entry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&is_entry_)) + sizeof(y_));
}

RawCornerPt::~RawCornerPt() {
  // @@protoc_insertion_point(destructor:perception.RawCornerPt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawCornerPt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RawCornerPt::ArenaDtor(void* object) {
  RawCornerPt* _this = reinterpret_cast< RawCornerPt* >(object);
  (void)_this;
}
void RawCornerPt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawCornerPt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawCornerPt& RawCornerPt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawCornerPt_RawInsParkingSpace_2eproto.base);
  return *internal_default_instance();
}


void RawCornerPt::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.RawCornerPt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_entry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&is_entry_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawCornerPt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_entry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_good = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_good_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 mask_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mask_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawCornerPt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.RawCornerPt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_entry = 1;
  if (this->is_entry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_entry(), target);
  }

  // bool is_good = 2;
  if (this->is_good() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_good(), target);
  }

  // double x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_x(), target);
  }

  // double y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_y(), target);
  }

  // int32 mask_id = 5;
  if (this->mask_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mask_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.RawCornerPt)
  return target;
}

size_t RawCornerPt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.RawCornerPt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_entry = 1;
  if (this->is_entry() != 0) {
    total_size += 1 + 1;
  }

  // bool is_good = 2;
  if (this->is_good() != 0) {
    total_size += 1 + 1;
  }

  // int32 mask_id = 5;
  if (this->mask_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mask_id());
  }

  // double x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawCornerPt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.RawCornerPt)
  GOOGLE_DCHECK_NE(&from, this);
  const RawCornerPt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawCornerPt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.RawCornerPt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.RawCornerPt)
    MergeFrom(*source);
  }
}

void RawCornerPt::MergeFrom(const RawCornerPt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.RawCornerPt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_entry() != 0) {
    _internal_set_is_entry(from._internal_is_entry());
  }
  if (from.is_good() != 0) {
    _internal_set_is_good(from._internal_is_good());
  }
  if (from.mask_id() != 0) {
    _internal_set_mask_id(from._internal_mask_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void RawCornerPt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.RawCornerPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawCornerPt::CopyFrom(const RawCornerPt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.RawCornerPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawCornerPt::IsInitialized() const {
  return true;
}

void RawCornerPt::InternalSwap(RawCornerPt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawCornerPt, y_)
      + sizeof(RawCornerPt::y_)
      - PROTOBUF_FIELD_OFFSET(RawCornerPt, is_entry_)>(
          reinterpret_cast<char*>(&is_entry_),
          reinterpret_cast<char*>(&other->is_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawCornerPt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawRodPt::InitAsDefaultInstance() {
}
class RawRodPt::_Internal {
 public:
};

RawRodPt::RawRodPt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.RawRodPt)
}
RawRodPt::RawRodPt(const RawRodPt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:perception.RawRodPt)
}

void RawRodPt::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

RawRodPt::~RawRodPt() {
  // @@protoc_insertion_point(destructor:perception.RawRodPt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawRodPt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RawRodPt::ArenaDtor(void* object) {
  RawRodPt* _this = reinterpret_cast< RawRodPt* >(object);
  (void)_this;
}
void RawRodPt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawRodPt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawRodPt& RawRodPt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawRodPt_RawInsParkingSpace_2eproto.base);
  return *internal_default_instance();
}


void RawRodPt::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.RawRodPt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawRodPt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawRodPt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.RawRodPt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.RawRodPt)
  return target;
}

size_t RawRodPt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.RawRodPt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawRodPt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.RawRodPt)
  GOOGLE_DCHECK_NE(&from, this);
  const RawRodPt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawRodPt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.RawRodPt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.RawRodPt)
    MergeFrom(*source);
  }
}

void RawRodPt::MergeFrom(const RawRodPt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.RawRodPt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void RawRodPt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.RawRodPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawRodPt::CopyFrom(const RawRodPt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.RawRodPt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawRodPt::IsInitialized() const {
  return true;
}

void RawRodPt::InternalSwap(RawRodPt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawRodPt, y_)
      + sizeof(RawRodPt::y_)
      - PROTOBUF_FIELD_OFFSET(RawRodPt, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawRodPt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawInsParkingSlot::InitAsDefaultInstance() {
  ::perception::_RawInsParkingSlot_default_instance_._instance.get_mutable()->center_pt_ = const_cast< ::perception::RawCornerPt*>(
      ::perception::RawCornerPt::internal_default_instance());
}
class RawInsParkingSlot::_Internal {
 public:
  static const ::perception::RawCornerPt& center_pt(const RawInsParkingSlot* msg);
};

const ::perception::RawCornerPt&
RawInsParkingSlot::_Internal::center_pt(const RawInsParkingSlot* msg) {
  return *msg->center_pt_;
}
RawInsParkingSlot::RawInsParkingSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  corner_pts_(arena),
  rod_pts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.RawInsParkingSlot)
}
RawInsParkingSlot::RawInsParkingSlot(const RawInsParkingSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      corner_pts_(from.corner_pts_),
      rod_pts_(from.rod_pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center_pt()) {
    center_pt_ = new ::perception::RawCornerPt(*from.center_pt_);
  } else {
    center_pt_ = nullptr;
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&exist_rod_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(exist_rod_));
  // @@protoc_insertion_point(copy_constructor:perception.RawInsParkingSlot)
}

void RawInsParkingSlot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawInsParkingSlot_RawInsParkingSpace_2eproto.base);
  ::memset(&center_pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exist_rod_) -
      reinterpret_cast<char*>(&center_pt_)) + sizeof(exist_rod_));
}

RawInsParkingSlot::~RawInsParkingSlot() {
  // @@protoc_insertion_point(destructor:perception.RawInsParkingSlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawInsParkingSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_pt_;
}

void RawInsParkingSlot::ArenaDtor(void* object) {
  RawInsParkingSlot* _this = reinterpret_cast< RawInsParkingSlot* >(object);
  (void)_this;
}
void RawInsParkingSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawInsParkingSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawInsParkingSlot& RawInsParkingSlot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawInsParkingSlot_RawInsParkingSpace_2eproto.base);
  return *internal_default_instance();
}


void RawInsParkingSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.RawInsParkingSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  corner_pts_.Clear();
  rod_pts_.Clear();
  if (GetArena() == nullptr && center_pt_ != nullptr) {
    delete center_pt_;
  }
  center_pt_ = nullptr;
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exist_rod_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(exist_rod_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawInsParkingSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .perception.RawCornerPt center_pt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool occupied = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          occupied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.RawCornerPt corner_pts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_corner_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool exist_rod = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          exist_rod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.RawRodPt rod_pts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rod_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawInsParkingSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.RawInsParkingSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double confidence = 1;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_confidence(), target);
  }

  // .perception.RawCornerPt center_pt = 2;
  if (this->has_center_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::center_pt(this), target, stream);
  }

  // bool occupied = 3;
  if (this->occupied() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_occupied(), target);
  }

  // repeated .perception.RawCornerPt corner_pts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_corner_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_corner_pts(i), target, stream);
  }

  // bool exist_rod = 5;
  if (this->exist_rod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_exist_rod(), target);
  }

  // repeated .perception.RawRodPt rod_pts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rod_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_rod_pts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.RawInsParkingSlot)
  return target;
}

size_t RawInsParkingSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.RawInsParkingSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.RawCornerPt corner_pts = 4;
  total_size += 1UL * this->_internal_corner_pts_size();
  for (const auto& msg : this->corner_pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perception.RawRodPt rod_pts = 6;
  total_size += 1UL * this->_internal_rod_pts_size();
  for (const auto& msg : this->rod_pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.RawCornerPt center_pt = 2;
  if (this->has_center_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_pt_);
  }

  // double confidence = 1;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 8;
  }

  // bool occupied = 3;
  if (this->occupied() != 0) {
    total_size += 1 + 1;
  }

  // bool exist_rod = 5;
  if (this->exist_rod() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawInsParkingSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.RawInsParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const RawInsParkingSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawInsParkingSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.RawInsParkingSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.RawInsParkingSlot)
    MergeFrom(*source);
  }
}

void RawInsParkingSlot::MergeFrom(const RawInsParkingSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.RawInsParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  corner_pts_.MergeFrom(from.corner_pts_);
  rod_pts_.MergeFrom(from.rod_pts_);
  if (from.has_center_pt()) {
    _internal_mutable_center_pt()->::perception::RawCornerPt::MergeFrom(from._internal_center_pt());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from.occupied() != 0) {
    _internal_set_occupied(from._internal_occupied());
  }
  if (from.exist_rod() != 0) {
    _internal_set_exist_rod(from._internal_exist_rod());
  }
}

void RawInsParkingSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.RawInsParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawInsParkingSlot::CopyFrom(const RawInsParkingSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.RawInsParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawInsParkingSlot::IsInitialized() const {
  return true;
}

void RawInsParkingSlot::InternalSwap(RawInsParkingSlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  corner_pts_.InternalSwap(&other->corner_pts_);
  rod_pts_.InternalSwap(&other->rod_pts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawInsParkingSlot, exist_rod_)
      + sizeof(RawInsParkingSlot::exist_rod_)
      - PROTOBUF_FIELD_OFFSET(RawInsParkingSlot, center_pt_)>(
          reinterpret_cast<char*>(&center_pt_),
          reinterpret_cast<char*>(&other->center_pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawInsParkingSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawInsParkingSpace::InitAsDefaultInstance() {
}
class RawInsParkingSpace::_Internal {
 public:
};

RawInsParkingSpace::RawInsParkingSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ins_ps_(arena),
  hm_rod_pts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.RawInsParkingSpace)
}
RawInsParkingSpace::RawInsParkingSpace(const RawInsParkingSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ins_ps_(from.ins_ps_),
      hm_rod_pts_(from.hm_rod_pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:perception.RawInsParkingSpace)
}

void RawInsParkingSpace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawInsParkingSpace_RawInsParkingSpace_2eproto.base);
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
}

RawInsParkingSpace::~RawInsParkingSpace() {
  // @@protoc_insertion_point(destructor:perception.RawInsParkingSpace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawInsParkingSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RawInsParkingSpace::ArenaDtor(void* object) {
  RawInsParkingSpace* _this = reinterpret_cast< RawInsParkingSpace* >(object);
  (void)_this;
}
void RawInsParkingSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawInsParkingSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawInsParkingSpace& RawInsParkingSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawInsParkingSpace_RawInsParkingSpace_2eproto.base);
  return *internal_default_instance();
}


void RawInsParkingSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.RawInsParkingSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ins_ps_.Clear();
  hm_rod_pts_.Clear();
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawInsParkingSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.RawInsParkingSlot ins_ps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ins_ps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .perception.RawRodPt hm_rod_pts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hm_rod_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawInsParkingSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.RawInsParkingSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  // repeated .perception.RawInsParkingSlot ins_ps = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ins_ps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ins_ps(i), target, stream);
  }

  // repeated .perception.RawRodPt hm_rod_pts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hm_rod_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_hm_rod_pts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.RawInsParkingSpace)
  return target;
}

size_t RawInsParkingSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.RawInsParkingSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.RawInsParkingSlot ins_ps = 4;
  total_size += 1UL * this->_internal_ins_ps_size();
  for (const auto& msg : this->ins_ps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perception.RawRodPt hm_rod_pts = 5;
  total_size += 1UL * this->_internal_hm_rod_pts_size();
  for (const auto& msg : this->hm_rod_pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawInsParkingSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.RawInsParkingSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const RawInsParkingSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawInsParkingSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.RawInsParkingSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.RawInsParkingSpace)
    MergeFrom(*source);
  }
}

void RawInsParkingSpace::MergeFrom(const RawInsParkingSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.RawInsParkingSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ins_ps_.MergeFrom(from.ins_ps_);
  hm_rod_pts_.MergeFrom(from.hm_rod_pts_);
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void RawInsParkingSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.RawInsParkingSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawInsParkingSpace::CopyFrom(const RawInsParkingSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.RawInsParkingSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawInsParkingSpace::IsInitialized() const {
  return true;
}

void RawInsParkingSpace::InternalSwap(RawInsParkingSpace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ins_ps_.InternalSwap(&other->ins_ps_);
  hm_rod_pts_.InternalSwap(&other->hm_rod_pts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawInsParkingSpace, tick_)
      + sizeof(RawInsParkingSpace::tick_)
      - PROTOBUF_FIELD_OFFSET(RawInsParkingSpace, frame_id_)>(
          reinterpret_cast<char*>(&frame_id_),
          reinterpret_cast<char*>(&other->frame_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawInsParkingSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perception::RawCornerPt* Arena::CreateMaybeMessage< ::perception::RawCornerPt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::RawCornerPt >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::RawRodPt* Arena::CreateMaybeMessage< ::perception::RawRodPt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::RawRodPt >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::RawInsParkingSlot* Arena::CreateMaybeMessage< ::perception::RawInsParkingSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::RawInsParkingSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::RawInsParkingSpace* Arena::CreateMaybeMessage< ::perception::RawInsParkingSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::RawInsParkingSpace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
