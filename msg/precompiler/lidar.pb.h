// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lidar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lidar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lidar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lidar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lidar_2eproto;
namespace perception {
class lidarFrame;
class lidarFrameDefaultTypeInternal;
extern lidarFrameDefaultTypeInternal _lidarFrame_default_instance_;
class lidarFrame_Rect3D;
class lidarFrame_Rect3DDefaultTypeInternal;
extern lidarFrame_Rect3DDefaultTypeInternal _lidarFrame_Rect3D_default_instance_;
class lidarFrame_SingleLidarTarget;
class lidarFrame_SingleLidarTargetDefaultTypeInternal;
extern lidarFrame_SingleLidarTargetDefaultTypeInternal _lidarFrame_SingleLidarTarget_default_instance_;
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::lidarFrame* Arena::CreateMaybeMessage<::perception::lidarFrame>(Arena*);
template<> ::perception::lidarFrame_Rect3D* Arena::CreateMaybeMessage<::perception::lidarFrame_Rect3D>(Arena*);
template<> ::perception::lidarFrame_SingleLidarTarget* Arena::CreateMaybeMessage<::perception::lidarFrame_SingleLidarTarget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {

// ===================================================================

class lidarFrame_Rect3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.lidarFrame.Rect3D) */ {
 public:
  inline lidarFrame_Rect3D() : lidarFrame_Rect3D(nullptr) {};
  virtual ~lidarFrame_Rect3D();

  lidarFrame_Rect3D(const lidarFrame_Rect3D& from);
  lidarFrame_Rect3D(lidarFrame_Rect3D&& from) noexcept
    : lidarFrame_Rect3D() {
    *this = ::std::move(from);
  }

  inline lidarFrame_Rect3D& operator=(const lidarFrame_Rect3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline lidarFrame_Rect3D& operator=(lidarFrame_Rect3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const lidarFrame_Rect3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lidarFrame_Rect3D* internal_default_instance() {
    return reinterpret_cast<const lidarFrame_Rect3D*>(
               &_lidarFrame_Rect3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(lidarFrame_Rect3D& a, lidarFrame_Rect3D& b) {
    a.Swap(&b);
  }
  inline void Swap(lidarFrame_Rect3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(lidarFrame_Rect3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline lidarFrame_Rect3D* New() const final {
    return CreateMaybeMessage<lidarFrame_Rect3D>(nullptr);
  }

  lidarFrame_Rect3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<lidarFrame_Rect3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const lidarFrame_Rect3D& from);
  void MergeFrom(const lidarFrame_Rect3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lidarFrame_Rect3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.lidarFrame.Rect3D";
  }
  protected:
  explicit lidarFrame_Rect3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_2eproto);
    return ::descriptor_table_lidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCornersFieldNumber = 5,
    kCenterFieldNumber = 1,
    kCenterStdDevFieldNumber = 2,
    kSizeLwhFieldNumber = 3,
    kSizeStdDevFieldNumber = 4,
    kOrientationFieldNumber = 6,
    kOrientationStdDevFieldNumber = 7,
  };
  // repeated .perception.common.Point3D corners = 5;
  int corners_size() const;
  private:
  int _internal_corners_size() const;
  public:
  void clear_corners();
  ::perception::common::Point3D* mutable_corners(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >*
      mutable_corners();
  private:
  const ::perception::common::Point3D& _internal_corners(int index) const;
  ::perception::common::Point3D* _internal_add_corners();
  public:
  const ::perception::common::Point3D& corners(int index) const;
  ::perception::common::Point3D* add_corners();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >&
      corners() const;

  // .perception.common.Point3D center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::perception::common::Point3D& center() const;
  ::perception::common::Point3D* release_center();
  ::perception::common::Point3D* mutable_center();
  void set_allocated_center(::perception::common::Point3D* center);
  private:
  const ::perception::common::Point3D& _internal_center() const;
  ::perception::common::Point3D* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::perception::common::Point3D* center);
  ::perception::common::Point3D* unsafe_arena_release_center();

  // .perception.common.Point3D center_std_dev = 2;
  bool has_center_std_dev() const;
  private:
  bool _internal_has_center_std_dev() const;
  public:
  void clear_center_std_dev();
  const ::perception::common::Point3D& center_std_dev() const;
  ::perception::common::Point3D* release_center_std_dev();
  ::perception::common::Point3D* mutable_center_std_dev();
  void set_allocated_center_std_dev(::perception::common::Point3D* center_std_dev);
  private:
  const ::perception::common::Point3D& _internal_center_std_dev() const;
  ::perception::common::Point3D* _internal_mutable_center_std_dev();
  public:
  void unsafe_arena_set_allocated_center_std_dev(
      ::perception::common::Point3D* center_std_dev);
  ::perception::common::Point3D* unsafe_arena_release_center_std_dev();

  // .perception.common.Point3D size_lwh = 3;
  bool has_size_lwh() const;
  private:
  bool _internal_has_size_lwh() const;
  public:
  void clear_size_lwh();
  const ::perception::common::Point3D& size_lwh() const;
  ::perception::common::Point3D* release_size_lwh();
  ::perception::common::Point3D* mutable_size_lwh();
  void set_allocated_size_lwh(::perception::common::Point3D* size_lwh);
  private:
  const ::perception::common::Point3D& _internal_size_lwh() const;
  ::perception::common::Point3D* _internal_mutable_size_lwh();
  public:
  void unsafe_arena_set_allocated_size_lwh(
      ::perception::common::Point3D* size_lwh);
  ::perception::common::Point3D* unsafe_arena_release_size_lwh();

  // .perception.common.Point3D size_std_dev = 4;
  bool has_size_std_dev() const;
  private:
  bool _internal_has_size_std_dev() const;
  public:
  void clear_size_std_dev();
  const ::perception::common::Point3D& size_std_dev() const;
  ::perception::common::Point3D* release_size_std_dev();
  ::perception::common::Point3D* mutable_size_std_dev();
  void set_allocated_size_std_dev(::perception::common::Point3D* size_std_dev);
  private:
  const ::perception::common::Point3D& _internal_size_std_dev() const;
  ::perception::common::Point3D* _internal_mutable_size_std_dev();
  public:
  void unsafe_arena_set_allocated_size_std_dev(
      ::perception::common::Point3D* size_std_dev);
  ::perception::common::Point3D* unsafe_arena_release_size_std_dev();

  // float orientation = 6;
  void clear_orientation();
  float orientation() const;
  void set_orientation(float value);
  private:
  float _internal_orientation() const;
  void _internal_set_orientation(float value);
  public:

  // float orientation_std_dev = 7;
  void clear_orientation_std_dev();
  float orientation_std_dev() const;
  void set_orientation_std_dev(float value);
  private:
  float _internal_orientation_std_dev() const;
  void _internal_set_orientation_std_dev(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.lidarFrame.Rect3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D > corners_;
  ::perception::common::Point3D* center_;
  ::perception::common::Point3D* center_std_dev_;
  ::perception::common::Point3D* size_lwh_;
  ::perception::common::Point3D* size_std_dev_;
  float orientation_;
  float orientation_std_dev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lidar_2eproto;
};
// -------------------------------------------------------------------

class lidarFrame_SingleLidarTarget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.lidarFrame.SingleLidarTarget) */ {
 public:
  inline lidarFrame_SingleLidarTarget() : lidarFrame_SingleLidarTarget(nullptr) {};
  virtual ~lidarFrame_SingleLidarTarget();

  lidarFrame_SingleLidarTarget(const lidarFrame_SingleLidarTarget& from);
  lidarFrame_SingleLidarTarget(lidarFrame_SingleLidarTarget&& from) noexcept
    : lidarFrame_SingleLidarTarget() {
    *this = ::std::move(from);
  }

  inline lidarFrame_SingleLidarTarget& operator=(const lidarFrame_SingleLidarTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline lidarFrame_SingleLidarTarget& operator=(lidarFrame_SingleLidarTarget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const lidarFrame_SingleLidarTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lidarFrame_SingleLidarTarget* internal_default_instance() {
    return reinterpret_cast<const lidarFrame_SingleLidarTarget*>(
               &_lidarFrame_SingleLidarTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(lidarFrame_SingleLidarTarget& a, lidarFrame_SingleLidarTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(lidarFrame_SingleLidarTarget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(lidarFrame_SingleLidarTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline lidarFrame_SingleLidarTarget* New() const final {
    return CreateMaybeMessage<lidarFrame_SingleLidarTarget>(nullptr);
  }

  lidarFrame_SingleLidarTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<lidarFrame_SingleLidarTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const lidarFrame_SingleLidarTarget& from);
  void MergeFrom(const lidarFrame_SingleLidarTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lidarFrame_SingleLidarTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.lidarFrame.SingleLidarTarget";
  }
  protected:
  explicit lidarFrame_SingleLidarTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_2eproto);
    return ::descriptor_table_lidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContourPointsFieldNumber = 9,
    kRectFieldNumber = 7,
    kVelocityFieldNumber = 8,
    kIdFieldNumber = 1,
    kClsFieldNumber = 2,
    kMovingStateFieldNumber = 3,
    kTrackStateFieldNumber = 4,
    kConfidenceFieldNumber = 5,
    kExistenceProbabilityFieldNumber = 6,
    kTimeCreationFieldNumber = 10,
  };
  // repeated .perception.common.Point3D contour_points = 9;
  int contour_points_size() const;
  private:
  int _internal_contour_points_size() const;
  public:
  void clear_contour_points();
  ::perception::common::Point3D* mutable_contour_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >*
      mutable_contour_points();
  private:
  const ::perception::common::Point3D& _internal_contour_points(int index) const;
  ::perception::common::Point3D* _internal_add_contour_points();
  public:
  const ::perception::common::Point3D& contour_points(int index) const;
  ::perception::common::Point3D* add_contour_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >&
      contour_points() const;

  // .perception.lidarFrame.Rect3D rect = 7;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::perception::lidarFrame_Rect3D& rect() const;
  ::perception::lidarFrame_Rect3D* release_rect();
  ::perception::lidarFrame_Rect3D* mutable_rect();
  void set_allocated_rect(::perception::lidarFrame_Rect3D* rect);
  private:
  const ::perception::lidarFrame_Rect3D& _internal_rect() const;
  ::perception::lidarFrame_Rect3D* _internal_mutable_rect();
  public:
  void unsafe_arena_set_allocated_rect(
      ::perception::lidarFrame_Rect3D* rect);
  ::perception::lidarFrame_Rect3D* unsafe_arena_release_rect();

  // .perception.common.Point3D velocity = 8;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::perception::common::Point3D& velocity() const;
  ::perception::common::Point3D* release_velocity();
  ::perception::common::Point3D* mutable_velocity();
  void set_allocated_velocity(::perception::common::Point3D* velocity);
  private:
  const ::perception::common::Point3D& _internal_velocity() const;
  ::perception::common::Point3D* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::perception::common::Point3D* velocity);
  ::perception::common::Point3D* unsafe_arena_release_velocity();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cls = 2;
  void clear_cls();
  ::PROTOBUF_NAMESPACE_ID::uint32 cls() const;
  void set_cls(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cls() const;
  void _internal_set_cls(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 moving_state = 3;
  void clear_moving_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 moving_state() const;
  void set_moving_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_moving_state() const;
  void _internal_set_moving_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 track_state = 4;
  void clear_track_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 track_state() const;
  void set_track_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_track_state() const;
  void _internal_set_track_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float confidence = 5;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // float existence_probability = 6;
  void clear_existence_probability();
  float existence_probability() const;
  void set_existence_probability(float value);
  private:
  float _internal_existence_probability() const;
  void _internal_set_existence_probability(float value);
  public:

  // uint64 time_creation = 10;
  void clear_time_creation();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_creation() const;
  void set_time_creation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_creation() const;
  void _internal_set_time_creation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.lidarFrame.SingleLidarTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D > contour_points_;
  ::perception::lidarFrame_Rect3D* rect_;
  ::perception::common::Point3D* velocity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cls_;
  ::PROTOBUF_NAMESPACE_ID::uint32 moving_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 track_state_;
  float confidence_;
  float existence_probability_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_creation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lidar_2eproto;
};
// -------------------------------------------------------------------

class lidarFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.lidarFrame) */ {
 public:
  inline lidarFrame() : lidarFrame(nullptr) {};
  virtual ~lidarFrame();

  lidarFrame(const lidarFrame& from);
  lidarFrame(lidarFrame&& from) noexcept
    : lidarFrame() {
    *this = ::std::move(from);
  }

  inline lidarFrame& operator=(const lidarFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline lidarFrame& operator=(lidarFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const lidarFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lidarFrame* internal_default_instance() {
    return reinterpret_cast<const lidarFrame*>(
               &_lidarFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(lidarFrame& a, lidarFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(lidarFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(lidarFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline lidarFrame* New() const final {
    return CreateMaybeMessage<lidarFrame>(nullptr);
  }

  lidarFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<lidarFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const lidarFrame& from);
  void MergeFrom(const lidarFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lidarFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.lidarFrame";
  }
  protected:
  explicit lidarFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_2eproto);
    return ::descriptor_table_lidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef lidarFrame_Rect3D Rect3D;
  typedef lidarFrame_SingleLidarTarget SingleLidarTarget;

  // accessors -------------------------------------------------------

  enum : int {
    kLidarMeasFieldNumber = 4,
    kTickFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kSeqFieldNumber = 1,
    kIsValidFieldNumber = 5,
    kLidarStateFieldNumber = 6,
  };
  // repeated .perception.lidarFrame.SingleLidarTarget lidar_meas = 4;
  int lidar_meas_size() const;
  private:
  int _internal_lidar_meas_size() const;
  public:
  void clear_lidar_meas();
  ::perception::lidarFrame_SingleLidarTarget* mutable_lidar_meas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::lidarFrame_SingleLidarTarget >*
      mutable_lidar_meas();
  private:
  const ::perception::lidarFrame_SingleLidarTarget& _internal_lidar_meas(int index) const;
  ::perception::lidarFrame_SingleLidarTarget* _internal_add_lidar_meas();
  public:
  const ::perception::lidarFrame_SingleLidarTarget& lidar_meas(int index) const;
  ::perception::lidarFrame_SingleLidarTarget* add_lidar_meas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::lidarFrame_SingleLidarTarget >&
      lidar_meas() const;

  // uint64 tick = 2;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 seq = 1;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_valid = 5;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // uint32 lidar_state = 6;
  void clear_lidar_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 lidar_state() const;
  void set_lidar_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lidar_state() const;
  void _internal_set_lidar_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.lidarFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::lidarFrame_SingleLidarTarget > lidar_meas_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  bool is_valid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lidar_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lidar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// lidarFrame_Rect3D

// .perception.common.Point3D center = 1;
inline bool lidarFrame_Rect3D::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool lidarFrame_Rect3D::has_center() const {
  return _internal_has_center();
}
inline const ::perception::common::Point3D& lidarFrame_Rect3D::_internal_center() const {
  const ::perception::common::Point3D* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& lidarFrame_Rect3D::center() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.Rect3D.center)
  return _internal_center();
}
inline void lidarFrame_Rect3D::unsafe_arena_set_allocated_center(
    ::perception::common::Point3D* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.lidarFrame.Rect3D.center)
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::release_center() {
  auto temp = unsafe_arena_release_center();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:perception.lidarFrame.Rect3D.center)
  
  ::perception::common::Point3D* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::mutable_center() {
  // @@protoc_insertion_point(field_mutable:perception.lidarFrame.Rect3D.center)
  return _internal_mutable_center();
}
inline void lidarFrame_Rect3D::set_allocated_center(::perception::common::Point3D* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center)->GetArena();
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:perception.lidarFrame.Rect3D.center)
}

// .perception.common.Point3D center_std_dev = 2;
inline bool lidarFrame_Rect3D::_internal_has_center_std_dev() const {
  return this != internal_default_instance() && center_std_dev_ != nullptr;
}
inline bool lidarFrame_Rect3D::has_center_std_dev() const {
  return _internal_has_center_std_dev();
}
inline const ::perception::common::Point3D& lidarFrame_Rect3D::_internal_center_std_dev() const {
  const ::perception::common::Point3D* p = center_std_dev_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& lidarFrame_Rect3D::center_std_dev() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.Rect3D.center_std_dev)
  return _internal_center_std_dev();
}
inline void lidarFrame_Rect3D::unsafe_arena_set_allocated_center_std_dev(
    ::perception::common::Point3D* center_std_dev) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_std_dev_);
  }
  center_std_dev_ = center_std_dev;
  if (center_std_dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.lidarFrame.Rect3D.center_std_dev)
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::release_center_std_dev() {
  auto temp = unsafe_arena_release_center_std_dev();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::unsafe_arena_release_center_std_dev() {
  // @@protoc_insertion_point(field_release:perception.lidarFrame.Rect3D.center_std_dev)
  
  ::perception::common::Point3D* temp = center_std_dev_;
  center_std_dev_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::_internal_mutable_center_std_dev() {
  
  if (center_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    center_std_dev_ = p;
  }
  return center_std_dev_;
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::mutable_center_std_dev() {
  // @@protoc_insertion_point(field_mutable:perception.lidarFrame.Rect3D.center_std_dev)
  return _internal_mutable_center_std_dev();
}
inline void lidarFrame_Rect3D::set_allocated_center_std_dev(::perception::common::Point3D* center_std_dev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_std_dev_);
  }
  if (center_std_dev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_std_dev)->GetArena();
    if (message_arena != submessage_arena) {
      center_std_dev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_std_dev, submessage_arena);
    }
    
  } else {
    
  }
  center_std_dev_ = center_std_dev;
  // @@protoc_insertion_point(field_set_allocated:perception.lidarFrame.Rect3D.center_std_dev)
}

// .perception.common.Point3D size_lwh = 3;
inline bool lidarFrame_Rect3D::_internal_has_size_lwh() const {
  return this != internal_default_instance() && size_lwh_ != nullptr;
}
inline bool lidarFrame_Rect3D::has_size_lwh() const {
  return _internal_has_size_lwh();
}
inline const ::perception::common::Point3D& lidarFrame_Rect3D::_internal_size_lwh() const {
  const ::perception::common::Point3D* p = size_lwh_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& lidarFrame_Rect3D::size_lwh() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.Rect3D.size_lwh)
  return _internal_size_lwh();
}
inline void lidarFrame_Rect3D::unsafe_arena_set_allocated_size_lwh(
    ::perception::common::Point3D* size_lwh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_lwh_);
  }
  size_lwh_ = size_lwh;
  if (size_lwh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.lidarFrame.Rect3D.size_lwh)
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::release_size_lwh() {
  auto temp = unsafe_arena_release_size_lwh();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::unsafe_arena_release_size_lwh() {
  // @@protoc_insertion_point(field_release:perception.lidarFrame.Rect3D.size_lwh)
  
  ::perception::common::Point3D* temp = size_lwh_;
  size_lwh_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::_internal_mutable_size_lwh() {
  
  if (size_lwh_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    size_lwh_ = p;
  }
  return size_lwh_;
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::mutable_size_lwh() {
  // @@protoc_insertion_point(field_mutable:perception.lidarFrame.Rect3D.size_lwh)
  return _internal_mutable_size_lwh();
}
inline void lidarFrame_Rect3D::set_allocated_size_lwh(::perception::common::Point3D* size_lwh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_lwh_);
  }
  if (size_lwh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_lwh)->GetArena();
    if (message_arena != submessage_arena) {
      size_lwh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size_lwh, submessage_arena);
    }
    
  } else {
    
  }
  size_lwh_ = size_lwh;
  // @@protoc_insertion_point(field_set_allocated:perception.lidarFrame.Rect3D.size_lwh)
}

// .perception.common.Point3D size_std_dev = 4;
inline bool lidarFrame_Rect3D::_internal_has_size_std_dev() const {
  return this != internal_default_instance() && size_std_dev_ != nullptr;
}
inline bool lidarFrame_Rect3D::has_size_std_dev() const {
  return _internal_has_size_std_dev();
}
inline const ::perception::common::Point3D& lidarFrame_Rect3D::_internal_size_std_dev() const {
  const ::perception::common::Point3D* p = size_std_dev_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& lidarFrame_Rect3D::size_std_dev() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.Rect3D.size_std_dev)
  return _internal_size_std_dev();
}
inline void lidarFrame_Rect3D::unsafe_arena_set_allocated_size_std_dev(
    ::perception::common::Point3D* size_std_dev) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_std_dev_);
  }
  size_std_dev_ = size_std_dev;
  if (size_std_dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.lidarFrame.Rect3D.size_std_dev)
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::release_size_std_dev() {
  auto temp = unsafe_arena_release_size_std_dev();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::unsafe_arena_release_size_std_dev() {
  // @@protoc_insertion_point(field_release:perception.lidarFrame.Rect3D.size_std_dev)
  
  ::perception::common::Point3D* temp = size_std_dev_;
  size_std_dev_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::_internal_mutable_size_std_dev() {
  
  if (size_std_dev_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    size_std_dev_ = p;
  }
  return size_std_dev_;
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::mutable_size_std_dev() {
  // @@protoc_insertion_point(field_mutable:perception.lidarFrame.Rect3D.size_std_dev)
  return _internal_mutable_size_std_dev();
}
inline void lidarFrame_Rect3D::set_allocated_size_std_dev(::perception::common::Point3D* size_std_dev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_std_dev_);
  }
  if (size_std_dev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_std_dev)->GetArena();
    if (message_arena != submessage_arena) {
      size_std_dev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size_std_dev, submessage_arena);
    }
    
  } else {
    
  }
  size_std_dev_ = size_std_dev;
  // @@protoc_insertion_point(field_set_allocated:perception.lidarFrame.Rect3D.size_std_dev)
}

// repeated .perception.common.Point3D corners = 5;
inline int lidarFrame_Rect3D::_internal_corners_size() const {
  return corners_.size();
}
inline int lidarFrame_Rect3D::corners_size() const {
  return _internal_corners_size();
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::mutable_corners(int index) {
  // @@protoc_insertion_point(field_mutable:perception.lidarFrame.Rect3D.corners)
  return corners_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >*
lidarFrame_Rect3D::mutable_corners() {
  // @@protoc_insertion_point(field_mutable_list:perception.lidarFrame.Rect3D.corners)
  return &corners_;
}
inline const ::perception::common::Point3D& lidarFrame_Rect3D::_internal_corners(int index) const {
  return corners_.Get(index);
}
inline const ::perception::common::Point3D& lidarFrame_Rect3D::corners(int index) const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.Rect3D.corners)
  return _internal_corners(index);
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::_internal_add_corners() {
  return corners_.Add();
}
inline ::perception::common::Point3D* lidarFrame_Rect3D::add_corners() {
  // @@protoc_insertion_point(field_add:perception.lidarFrame.Rect3D.corners)
  return _internal_add_corners();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >&
lidarFrame_Rect3D::corners() const {
  // @@protoc_insertion_point(field_list:perception.lidarFrame.Rect3D.corners)
  return corners_;
}

// float orientation = 6;
inline void lidarFrame_Rect3D::clear_orientation() {
  orientation_ = 0;
}
inline float lidarFrame_Rect3D::_internal_orientation() const {
  return orientation_;
}
inline float lidarFrame_Rect3D::orientation() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.Rect3D.orientation)
  return _internal_orientation();
}
inline void lidarFrame_Rect3D::_internal_set_orientation(float value) {
  
  orientation_ = value;
}
inline void lidarFrame_Rect3D::set_orientation(float value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.Rect3D.orientation)
}

// float orientation_std_dev = 7;
inline void lidarFrame_Rect3D::clear_orientation_std_dev() {
  orientation_std_dev_ = 0;
}
inline float lidarFrame_Rect3D::_internal_orientation_std_dev() const {
  return orientation_std_dev_;
}
inline float lidarFrame_Rect3D::orientation_std_dev() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.Rect3D.orientation_std_dev)
  return _internal_orientation_std_dev();
}
inline void lidarFrame_Rect3D::_internal_set_orientation_std_dev(float value) {
  
  orientation_std_dev_ = value;
}
inline void lidarFrame_Rect3D::set_orientation_std_dev(float value) {
  _internal_set_orientation_std_dev(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.Rect3D.orientation_std_dev)
}

// -------------------------------------------------------------------

// lidarFrame_SingleLidarTarget

// uint32 id = 1;
inline void lidarFrame_SingleLidarTarget::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 lidarFrame_SingleLidarTarget::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 lidarFrame_SingleLidarTarget::id() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.SingleLidarTarget.id)
  return _internal_id();
}
inline void lidarFrame_SingleLidarTarget::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void lidarFrame_SingleLidarTarget::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.SingleLidarTarget.id)
}

// uint32 cls = 2;
inline void lidarFrame_SingleLidarTarget::clear_cls() {
  cls_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 lidarFrame_SingleLidarTarget::_internal_cls() const {
  return cls_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 lidarFrame_SingleLidarTarget::cls() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.SingleLidarTarget.cls)
  return _internal_cls();
}
inline void lidarFrame_SingleLidarTarget::_internal_set_cls(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cls_ = value;
}
inline void lidarFrame_SingleLidarTarget::set_cls(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cls(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.SingleLidarTarget.cls)
}

// uint32 moving_state = 3;
inline void lidarFrame_SingleLidarTarget::clear_moving_state() {
  moving_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 lidarFrame_SingleLidarTarget::_internal_moving_state() const {
  return moving_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 lidarFrame_SingleLidarTarget::moving_state() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.SingleLidarTarget.moving_state)
  return _internal_moving_state();
}
inline void lidarFrame_SingleLidarTarget::_internal_set_moving_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  moving_state_ = value;
}
inline void lidarFrame_SingleLidarTarget::set_moving_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_moving_state(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.SingleLidarTarget.moving_state)
}

// uint32 track_state = 4;
inline void lidarFrame_SingleLidarTarget::clear_track_state() {
  track_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 lidarFrame_SingleLidarTarget::_internal_track_state() const {
  return track_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 lidarFrame_SingleLidarTarget::track_state() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.SingleLidarTarget.track_state)
  return _internal_track_state();
}
inline void lidarFrame_SingleLidarTarget::_internal_set_track_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  track_state_ = value;
}
inline void lidarFrame_SingleLidarTarget::set_track_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_track_state(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.SingleLidarTarget.track_state)
}

// float confidence = 5;
inline void lidarFrame_SingleLidarTarget::clear_confidence() {
  confidence_ = 0;
}
inline float lidarFrame_SingleLidarTarget::_internal_confidence() const {
  return confidence_;
}
inline float lidarFrame_SingleLidarTarget::confidence() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.SingleLidarTarget.confidence)
  return _internal_confidence();
}
inline void lidarFrame_SingleLidarTarget::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void lidarFrame_SingleLidarTarget::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.SingleLidarTarget.confidence)
}

// float existence_probability = 6;
inline void lidarFrame_SingleLidarTarget::clear_existence_probability() {
  existence_probability_ = 0;
}
inline float lidarFrame_SingleLidarTarget::_internal_existence_probability() const {
  return existence_probability_;
}
inline float lidarFrame_SingleLidarTarget::existence_probability() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.SingleLidarTarget.existence_probability)
  return _internal_existence_probability();
}
inline void lidarFrame_SingleLidarTarget::_internal_set_existence_probability(float value) {
  
  existence_probability_ = value;
}
inline void lidarFrame_SingleLidarTarget::set_existence_probability(float value) {
  _internal_set_existence_probability(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.SingleLidarTarget.existence_probability)
}

// .perception.lidarFrame.Rect3D rect = 7;
inline bool lidarFrame_SingleLidarTarget::_internal_has_rect() const {
  return this != internal_default_instance() && rect_ != nullptr;
}
inline bool lidarFrame_SingleLidarTarget::has_rect() const {
  return _internal_has_rect();
}
inline void lidarFrame_SingleLidarTarget::clear_rect() {
  if (GetArena() == nullptr && rect_ != nullptr) {
    delete rect_;
  }
  rect_ = nullptr;
}
inline const ::perception::lidarFrame_Rect3D& lidarFrame_SingleLidarTarget::_internal_rect() const {
  const ::perception::lidarFrame_Rect3D* p = rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::lidarFrame_Rect3D*>(
      &::perception::_lidarFrame_Rect3D_default_instance_);
}
inline const ::perception::lidarFrame_Rect3D& lidarFrame_SingleLidarTarget::rect() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.SingleLidarTarget.rect)
  return _internal_rect();
}
inline void lidarFrame_SingleLidarTarget::unsafe_arena_set_allocated_rect(
    ::perception::lidarFrame_Rect3D* rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_);
  }
  rect_ = rect;
  if (rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.lidarFrame.SingleLidarTarget.rect)
}
inline ::perception::lidarFrame_Rect3D* lidarFrame_SingleLidarTarget::release_rect() {
  auto temp = unsafe_arena_release_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::lidarFrame_Rect3D* lidarFrame_SingleLidarTarget::unsafe_arena_release_rect() {
  // @@protoc_insertion_point(field_release:perception.lidarFrame.SingleLidarTarget.rect)
  
  ::perception::lidarFrame_Rect3D* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::perception::lidarFrame_Rect3D* lidarFrame_SingleLidarTarget::_internal_mutable_rect() {
  
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::lidarFrame_Rect3D>(GetArena());
    rect_ = p;
  }
  return rect_;
}
inline ::perception::lidarFrame_Rect3D* lidarFrame_SingleLidarTarget::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:perception.lidarFrame.SingleLidarTarget.rect)
  return _internal_mutable_rect();
}
inline void lidarFrame_SingleLidarTarget::set_allocated_rect(::perception::lidarFrame_Rect3D* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    
  } else {
    
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:perception.lidarFrame.SingleLidarTarget.rect)
}

// .perception.common.Point3D velocity = 8;
inline bool lidarFrame_SingleLidarTarget::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool lidarFrame_SingleLidarTarget::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::perception::common::Point3D& lidarFrame_SingleLidarTarget::_internal_velocity() const {
  const ::perception::common::Point3D* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point3D*>(
      &::perception::common::_Point3D_default_instance_);
}
inline const ::perception::common::Point3D& lidarFrame_SingleLidarTarget::velocity() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.SingleLidarTarget.velocity)
  return _internal_velocity();
}
inline void lidarFrame_SingleLidarTarget::unsafe_arena_set_allocated_velocity(
    ::perception::common::Point3D* velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.lidarFrame.SingleLidarTarget.velocity)
}
inline ::perception::common::Point3D* lidarFrame_SingleLidarTarget::release_velocity() {
  auto temp = unsafe_arena_release_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point3D* lidarFrame_SingleLidarTarget::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:perception.lidarFrame.SingleLidarTarget.velocity)
  
  ::perception::common::Point3D* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::perception::common::Point3D* lidarFrame_SingleLidarTarget::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point3D>(GetArena());
    velocity_ = p;
  }
  return velocity_;
}
inline ::perception::common::Point3D* lidarFrame_SingleLidarTarget::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:perception.lidarFrame.SingleLidarTarget.velocity)
  return _internal_mutable_velocity();
}
inline void lidarFrame_SingleLidarTarget::set_allocated_velocity(::perception::common::Point3D* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity)->GetArena();
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:perception.lidarFrame.SingleLidarTarget.velocity)
}

// repeated .perception.common.Point3D contour_points = 9;
inline int lidarFrame_SingleLidarTarget::_internal_contour_points_size() const {
  return contour_points_.size();
}
inline int lidarFrame_SingleLidarTarget::contour_points_size() const {
  return _internal_contour_points_size();
}
inline ::perception::common::Point3D* lidarFrame_SingleLidarTarget::mutable_contour_points(int index) {
  // @@protoc_insertion_point(field_mutable:perception.lidarFrame.SingleLidarTarget.contour_points)
  return contour_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >*
lidarFrame_SingleLidarTarget::mutable_contour_points() {
  // @@protoc_insertion_point(field_mutable_list:perception.lidarFrame.SingleLidarTarget.contour_points)
  return &contour_points_;
}
inline const ::perception::common::Point3D& lidarFrame_SingleLidarTarget::_internal_contour_points(int index) const {
  return contour_points_.Get(index);
}
inline const ::perception::common::Point3D& lidarFrame_SingleLidarTarget::contour_points(int index) const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.SingleLidarTarget.contour_points)
  return _internal_contour_points(index);
}
inline ::perception::common::Point3D* lidarFrame_SingleLidarTarget::_internal_add_contour_points() {
  return contour_points_.Add();
}
inline ::perception::common::Point3D* lidarFrame_SingleLidarTarget::add_contour_points() {
  // @@protoc_insertion_point(field_add:perception.lidarFrame.SingleLidarTarget.contour_points)
  return _internal_add_contour_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::common::Point3D >&
lidarFrame_SingleLidarTarget::contour_points() const {
  // @@protoc_insertion_point(field_list:perception.lidarFrame.SingleLidarTarget.contour_points)
  return contour_points_;
}

// uint64 time_creation = 10;
inline void lidarFrame_SingleLidarTarget::clear_time_creation() {
  time_creation_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 lidarFrame_SingleLidarTarget::_internal_time_creation() const {
  return time_creation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 lidarFrame_SingleLidarTarget::time_creation() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.SingleLidarTarget.time_creation)
  return _internal_time_creation();
}
inline void lidarFrame_SingleLidarTarget::_internal_set_time_creation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_creation_ = value;
}
inline void lidarFrame_SingleLidarTarget::set_time_creation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_creation(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.SingleLidarTarget.time_creation)
}

// -------------------------------------------------------------------

// lidarFrame

// uint32 seq = 1;
inline void lidarFrame::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 lidarFrame::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 lidarFrame::seq() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.seq)
  return _internal_seq();
}
inline void lidarFrame::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
}
inline void lidarFrame::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.seq)
}

// uint64 tick = 2;
inline void lidarFrame::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 lidarFrame::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 lidarFrame::tick() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.tick)
  return _internal_tick();
}
inline void lidarFrame::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void lidarFrame::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.tick)
}

// uint64 timestamp = 3;
inline void lidarFrame::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 lidarFrame::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 lidarFrame::timestamp() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.timestamp)
  return _internal_timestamp();
}
inline void lidarFrame::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void lidarFrame::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.timestamp)
}

// repeated .perception.lidarFrame.SingleLidarTarget lidar_meas = 4;
inline int lidarFrame::_internal_lidar_meas_size() const {
  return lidar_meas_.size();
}
inline int lidarFrame::lidar_meas_size() const {
  return _internal_lidar_meas_size();
}
inline void lidarFrame::clear_lidar_meas() {
  lidar_meas_.Clear();
}
inline ::perception::lidarFrame_SingleLidarTarget* lidarFrame::mutable_lidar_meas(int index) {
  // @@protoc_insertion_point(field_mutable:perception.lidarFrame.lidar_meas)
  return lidar_meas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::lidarFrame_SingleLidarTarget >*
lidarFrame::mutable_lidar_meas() {
  // @@protoc_insertion_point(field_mutable_list:perception.lidarFrame.lidar_meas)
  return &lidar_meas_;
}
inline const ::perception::lidarFrame_SingleLidarTarget& lidarFrame::_internal_lidar_meas(int index) const {
  return lidar_meas_.Get(index);
}
inline const ::perception::lidarFrame_SingleLidarTarget& lidarFrame::lidar_meas(int index) const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.lidar_meas)
  return _internal_lidar_meas(index);
}
inline ::perception::lidarFrame_SingleLidarTarget* lidarFrame::_internal_add_lidar_meas() {
  return lidar_meas_.Add();
}
inline ::perception::lidarFrame_SingleLidarTarget* lidarFrame::add_lidar_meas() {
  // @@protoc_insertion_point(field_add:perception.lidarFrame.lidar_meas)
  return _internal_add_lidar_meas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perception::lidarFrame_SingleLidarTarget >&
lidarFrame::lidar_meas() const {
  // @@protoc_insertion_point(field_list:perception.lidarFrame.lidar_meas)
  return lidar_meas_;
}

// bool is_valid = 5;
inline void lidarFrame::clear_is_valid() {
  is_valid_ = false;
}
inline bool lidarFrame::_internal_is_valid() const {
  return is_valid_;
}
inline bool lidarFrame::is_valid() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.is_valid)
  return _internal_is_valid();
}
inline void lidarFrame::_internal_set_is_valid(bool value) {
  
  is_valid_ = value;
}
inline void lidarFrame::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.is_valid)
}

// uint32 lidar_state = 6;
inline void lidarFrame::clear_lidar_state() {
  lidar_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 lidarFrame::_internal_lidar_state() const {
  return lidar_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 lidarFrame::lidar_state() const {
  // @@protoc_insertion_point(field_get:perception.lidarFrame.lidar_state)
  return _internal_lidar_state();
}
inline void lidarFrame::_internal_set_lidar_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lidar_state_ = value;
}
inline void lidarFrame::set_lidar_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lidar_state(value);
  // @@protoc_insertion_point(field_set:perception.lidarFrame.lidar_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lidar_2eproto
