// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: segmentation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_segmentation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_segmentation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "camera.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_segmentation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_segmentation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_segmentation_2eproto;
namespace minieye {
namespace seg {
class ParkSlotSegReq;
class ParkSlotSegReqDefaultTypeInternal;
extern ParkSlotSegReqDefaultTypeInternal _ParkSlotSegReq_default_instance_;
class ParkSpotSegResMeta;
class ParkSpotSegResMetaDefaultTypeInternal;
extern ParkSpotSegResMetaDefaultTypeInternal _ParkSpotSegResMeta_default_instance_;
class ScaleWindow;
class ScaleWindowDefaultTypeInternal;
extern ScaleWindowDefaultTypeInternal _ScaleWindow_default_instance_;
class SegMask;
class SegMaskDefaultTypeInternal;
extern SegMaskDefaultTypeInternal _SegMask_default_instance_;
}  // namespace seg
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::seg::ParkSlotSegReq* Arena::CreateMaybeMessage<::minieye::seg::ParkSlotSegReq>(Arena*);
template<> ::minieye::seg::ParkSpotSegResMeta* Arena::CreateMaybeMessage<::minieye::seg::ParkSpotSegResMeta>(Arena*);
template<> ::minieye::seg::ScaleWindow* Arena::CreateMaybeMessage<::minieye::seg::ScaleWindow>(Arena*);
template<> ::minieye::seg::SegMask* Arena::CreateMaybeMessage<::minieye::seg::SegMask>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {
namespace seg {

// ===================================================================

class ParkSlotSegReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.seg.ParkSlotSegReq) */ {
 public:
  inline ParkSlotSegReq() : ParkSlotSegReq(nullptr) {};
  virtual ~ParkSlotSegReq();

  ParkSlotSegReq(const ParkSlotSegReq& from);
  ParkSlotSegReq(ParkSlotSegReq&& from) noexcept
    : ParkSlotSegReq() {
    *this = ::std::move(from);
  }

  inline ParkSlotSegReq& operator=(const ParkSlotSegReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkSlotSegReq& operator=(ParkSlotSegReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkSlotSegReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkSlotSegReq* internal_default_instance() {
    return reinterpret_cast<const ParkSlotSegReq*>(
               &_ParkSlotSegReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParkSlotSegReq& a, ParkSlotSegReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkSlotSegReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParkSlotSegReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParkSlotSegReq* New() const final {
    return CreateMaybeMessage<ParkSlotSegReq>(nullptr);
  }

  ParkSlotSegReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkSlotSegReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkSlotSegReq& from);
  void MergeFrom(const ParkSlotSegReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkSlotSegReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.seg.ParkSlotSegReq";
  }
  protected:
  explicit ParkSlotSegReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_segmentation_2eproto);
    return ::descriptor_table_segmentation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraFrameFieldNumber = 1,
  };
  // .minieye.CameraFrame camera_frame = 1;
  bool has_camera_frame() const;
  private:
  bool _internal_has_camera_frame() const;
  public:
  void clear_camera_frame();
  const ::minieye::CameraFrame& camera_frame() const;
  ::minieye::CameraFrame* release_camera_frame();
  ::minieye::CameraFrame* mutable_camera_frame();
  void set_allocated_camera_frame(::minieye::CameraFrame* camera_frame);
  private:
  const ::minieye::CameraFrame& _internal_camera_frame() const;
  ::minieye::CameraFrame* _internal_mutable_camera_frame();
  public:
  void unsafe_arena_set_allocated_camera_frame(
      ::minieye::CameraFrame* camera_frame);
  ::minieye::CameraFrame* unsafe_arena_release_camera_frame();

  // @@protoc_insertion_point(class_scope:minieye.seg.ParkSlotSegReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::minieye::CameraFrame* camera_frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_segmentation_2eproto;
};
// -------------------------------------------------------------------

class ScaleWindow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.seg.ScaleWindow) */ {
 public:
  inline ScaleWindow() : ScaleWindow(nullptr) {};
  virtual ~ScaleWindow();

  ScaleWindow(const ScaleWindow& from);
  ScaleWindow(ScaleWindow&& from) noexcept
    : ScaleWindow() {
    *this = ::std::move(from);
  }

  inline ScaleWindow& operator=(const ScaleWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScaleWindow& operator=(ScaleWindow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScaleWindow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScaleWindow* internal_default_instance() {
    return reinterpret_cast<const ScaleWindow*>(
               &_ScaleWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScaleWindow& a, ScaleWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(ScaleWindow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScaleWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScaleWindow* New() const final {
    return CreateMaybeMessage<ScaleWindow>(nullptr);
  }

  ScaleWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScaleWindow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScaleWindow& from);
  void MergeFrom(const ScaleWindow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScaleWindow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.seg.ScaleWindow";
  }
  protected:
  explicit ScaleWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_segmentation_2eproto);
    return ::descriptor_table_segmentation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleXFieldNumber = 1,
    kScaleYFieldNumber = 2,
    kOffsetXFieldNumber = 3,
    kOffsetYFieldNumber = 4,
    kWidthFieldNumber = 5,
    kHeightFieldNumber = 6,
  };
  // float scale_x = 1;
  void clear_scale_x();
  float scale_x() const;
  void set_scale_x(float value);
  private:
  float _internal_scale_x() const;
  void _internal_set_scale_x(float value);
  public:

  // float scale_y = 2;
  void clear_scale_y();
  float scale_y() const;
  void set_scale_y(float value);
  private:
  float _internal_scale_y() const;
  void _internal_set_scale_y(float value);
  public:

  // float offset_x = 3;
  void clear_offset_x();
  float offset_x() const;
  void set_offset_x(float value);
  private:
  float _internal_offset_x() const;
  void _internal_set_offset_x(float value);
  public:

  // float offset_y = 4;
  void clear_offset_y();
  float offset_y() const;
  void set_offset_y(float value);
  private:
  float _internal_offset_y() const;
  void _internal_set_offset_y(float value);
  public:

  // int32 width = 5;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 6;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.seg.ScaleWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float scale_x_;
  float scale_y_;
  float offset_x_;
  float offset_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_segmentation_2eproto;
};
// -------------------------------------------------------------------

class SegMask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.seg.SegMask) */ {
 public:
  inline SegMask() : SegMask(nullptr) {};
  virtual ~SegMask();

  SegMask(const SegMask& from);
  SegMask(SegMask&& from) noexcept
    : SegMask() {
    *this = ::std::move(from);
  }

  inline SegMask& operator=(const SegMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegMask& operator=(SegMask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegMask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegMask* internal_default_instance() {
    return reinterpret_cast<const SegMask*>(
               &_SegMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SegMask& a, SegMask& b) {
    a.Swap(&b);
  }
  inline void Swap(SegMask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegMask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegMask* New() const final {
    return CreateMaybeMessage<SegMask>(nullptr);
  }

  SegMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegMask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegMask& from);
  void MergeFrom(const SegMask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegMask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.seg.SegMask";
  }
  protected:
  explicit SegMask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_segmentation_2eproto);
    return ::descriptor_table_segmentation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegSupplementFieldNumber = 3,
    kLabelFieldNumber = 4,
    kSegInfoFieldNumber = 2,
    kMaskFieldNumber = 1,
    kOffsetFieldNumber = 5,
    kDataTypeFieldNumber = 6,
  };
  // bytes seg_supplement = 3;
  void clear_seg_supplement();
  const std::string& seg_supplement() const;
  void set_seg_supplement(const std::string& value);
  void set_seg_supplement(std::string&& value);
  void set_seg_supplement(const char* value);
  void set_seg_supplement(const void* value, size_t size);
  std::string* mutable_seg_supplement();
  std::string* release_seg_supplement();
  void set_allocated_seg_supplement(std::string* seg_supplement);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_seg_supplement();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_seg_supplement(
      std::string* seg_supplement);
  private:
  const std::string& _internal_seg_supplement() const;
  void _internal_set_seg_supplement(const std::string& value);
  std::string* _internal_mutable_seg_supplement();
  public:

  // string label = 4;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_label(
      std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .minieye.seg.ScaleWindow seg_info = 2;
  bool has_seg_info() const;
  private:
  bool _internal_has_seg_info() const;
  public:
  void clear_seg_info();
  const ::minieye::seg::ScaleWindow& seg_info() const;
  ::minieye::seg::ScaleWindow* release_seg_info();
  ::minieye::seg::ScaleWindow* mutable_seg_info();
  void set_allocated_seg_info(::minieye::seg::ScaleWindow* seg_info);
  private:
  const ::minieye::seg::ScaleWindow& _internal_seg_info() const;
  ::minieye::seg::ScaleWindow* _internal_mutable_seg_info();
  public:
  void unsafe_arena_set_allocated_seg_info(
      ::minieye::seg::ScaleWindow* seg_info);
  ::minieye::seg::ScaleWindow* unsafe_arena_release_seg_info();

  // uint64 mask = 1;
  void clear_mask();
  ::PROTOBUF_NAMESPACE_ID::uint64 mask() const;
  void set_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mask() const;
  void _internal_set_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 offset = 5;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 data_type = 6;
  void clear_data_type();
  ::PROTOBUF_NAMESPACE_ID::int32 data_type() const;
  void set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_type() const;
  void _internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.seg.SegMask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seg_supplement_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::minieye::seg::ScaleWindow* seg_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mask_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_segmentation_2eproto;
};
// -------------------------------------------------------------------

class ParkSpotSegResMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.seg.ParkSpotSegResMeta) */ {
 public:
  inline ParkSpotSegResMeta() : ParkSpotSegResMeta(nullptr) {};
  virtual ~ParkSpotSegResMeta();

  ParkSpotSegResMeta(const ParkSpotSegResMeta& from);
  ParkSpotSegResMeta(ParkSpotSegResMeta&& from) noexcept
    : ParkSpotSegResMeta() {
    *this = ::std::move(from);
  }

  inline ParkSpotSegResMeta& operator=(const ParkSpotSegResMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkSpotSegResMeta& operator=(ParkSpotSegResMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkSpotSegResMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkSpotSegResMeta* internal_default_instance() {
    return reinterpret_cast<const ParkSpotSegResMeta*>(
               &_ParkSpotSegResMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ParkSpotSegResMeta& a, ParkSpotSegResMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkSpotSegResMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParkSpotSegResMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParkSpotSegResMeta* New() const final {
    return CreateMaybeMessage<ParkSpotSegResMeta>(nullptr);
  }

  ParkSpotSegResMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkSpotSegResMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkSpotSegResMeta& from);
  void MergeFrom(const ParkSpotSegResMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkSpotSegResMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.seg.ParkSpotSegResMeta";
  }
  protected:
  explicit ParkSpotSegResMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_segmentation_2eproto);
    return ::descriptor_table_segmentation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegMaskFieldNumber = 1,
    kSegContextFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kFinishTimeFieldNumber = 4,
    kShmIndexFieldNumber = 5,
  };
  // repeated .minieye.seg.SegMask seg_mask = 1;
  int seg_mask_size() const;
  private:
  int _internal_seg_mask_size() const;
  public:
  void clear_seg_mask();
  ::minieye::seg::SegMask* mutable_seg_mask(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::seg::SegMask >*
      mutable_seg_mask();
  private:
  const ::minieye::seg::SegMask& _internal_seg_mask(int index) const;
  ::minieye::seg::SegMask* _internal_add_seg_mask();
  public:
  const ::minieye::seg::SegMask& seg_mask(int index) const;
  ::minieye::seg::SegMask* add_seg_mask();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::seg::SegMask >&
      seg_mask() const;

  // .minieye.seg.ParkSlotSegReq seg_context = 2;
  bool has_seg_context() const;
  private:
  bool _internal_has_seg_context() const;
  public:
  void clear_seg_context();
  const ::minieye::seg::ParkSlotSegReq& seg_context() const;
  ::minieye::seg::ParkSlotSegReq* release_seg_context();
  ::minieye::seg::ParkSlotSegReq* mutable_seg_context();
  void set_allocated_seg_context(::minieye::seg::ParkSlotSegReq* seg_context);
  private:
  const ::minieye::seg::ParkSlotSegReq& _internal_seg_context() const;
  ::minieye::seg::ParkSlotSegReq* _internal_mutable_seg_context();
  public:
  void unsafe_arena_set_allocated_seg_context(
      ::minieye::seg::ParkSlotSegReq* seg_context);
  ::minieye::seg::ParkSlotSegReq* unsafe_arena_release_seg_context();

  // uint64 start_time = 3;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 finish_time = 4;
  void clear_finish_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 finish_time() const;
  void set_finish_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_finish_time() const;
  void _internal_set_finish_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 shm_index = 5;
  void clear_shm_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 shm_index() const;
  void set_shm_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shm_index() const;
  void _internal_set_shm_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.seg.ParkSpotSegResMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::seg::SegMask > seg_mask_;
  ::minieye::seg::ParkSlotSegReq* seg_context_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 finish_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shm_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_segmentation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParkSlotSegReq

// .minieye.CameraFrame camera_frame = 1;
inline bool ParkSlotSegReq::_internal_has_camera_frame() const {
  return this != internal_default_instance() && camera_frame_ != nullptr;
}
inline bool ParkSlotSegReq::has_camera_frame() const {
  return _internal_has_camera_frame();
}
inline const ::minieye::CameraFrame& ParkSlotSegReq::_internal_camera_frame() const {
  const ::minieye::CameraFrame* p = camera_frame_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::CameraFrame*>(
      &::minieye::_CameraFrame_default_instance_);
}
inline const ::minieye::CameraFrame& ParkSlotSegReq::camera_frame() const {
  // @@protoc_insertion_point(field_get:minieye.seg.ParkSlotSegReq.camera_frame)
  return _internal_camera_frame();
}
inline void ParkSlotSegReq::unsafe_arena_set_allocated_camera_frame(
    ::minieye::CameraFrame* camera_frame) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_frame_);
  }
  camera_frame_ = camera_frame;
  if (camera_frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.seg.ParkSlotSegReq.camera_frame)
}
inline ::minieye::CameraFrame* ParkSlotSegReq::release_camera_frame() {
  auto temp = unsafe_arena_release_camera_frame();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::CameraFrame* ParkSlotSegReq::unsafe_arena_release_camera_frame() {
  // @@protoc_insertion_point(field_release:minieye.seg.ParkSlotSegReq.camera_frame)
  
  ::minieye::CameraFrame* temp = camera_frame_;
  camera_frame_ = nullptr;
  return temp;
}
inline ::minieye::CameraFrame* ParkSlotSegReq::_internal_mutable_camera_frame() {
  
  if (camera_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::CameraFrame>(GetArena());
    camera_frame_ = p;
  }
  return camera_frame_;
}
inline ::minieye::CameraFrame* ParkSlotSegReq::mutable_camera_frame() {
  // @@protoc_insertion_point(field_mutable:minieye.seg.ParkSlotSegReq.camera_frame)
  return _internal_mutable_camera_frame();
}
inline void ParkSlotSegReq::set_allocated_camera_frame(::minieye::CameraFrame* camera_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_frame_);
  }
  if (camera_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_frame)->GetArena();
    if (message_arena != submessage_arena) {
      camera_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_frame, submessage_arena);
    }
    
  } else {
    
  }
  camera_frame_ = camera_frame;
  // @@protoc_insertion_point(field_set_allocated:minieye.seg.ParkSlotSegReq.camera_frame)
}

// -------------------------------------------------------------------

// ScaleWindow

// float scale_x = 1;
inline void ScaleWindow::clear_scale_x() {
  scale_x_ = 0;
}
inline float ScaleWindow::_internal_scale_x() const {
  return scale_x_;
}
inline float ScaleWindow::scale_x() const {
  // @@protoc_insertion_point(field_get:minieye.seg.ScaleWindow.scale_x)
  return _internal_scale_x();
}
inline void ScaleWindow::_internal_set_scale_x(float value) {
  
  scale_x_ = value;
}
inline void ScaleWindow::set_scale_x(float value) {
  _internal_set_scale_x(value);
  // @@protoc_insertion_point(field_set:minieye.seg.ScaleWindow.scale_x)
}

// float scale_y = 2;
inline void ScaleWindow::clear_scale_y() {
  scale_y_ = 0;
}
inline float ScaleWindow::_internal_scale_y() const {
  return scale_y_;
}
inline float ScaleWindow::scale_y() const {
  // @@protoc_insertion_point(field_get:minieye.seg.ScaleWindow.scale_y)
  return _internal_scale_y();
}
inline void ScaleWindow::_internal_set_scale_y(float value) {
  
  scale_y_ = value;
}
inline void ScaleWindow::set_scale_y(float value) {
  _internal_set_scale_y(value);
  // @@protoc_insertion_point(field_set:minieye.seg.ScaleWindow.scale_y)
}

// float offset_x = 3;
inline void ScaleWindow::clear_offset_x() {
  offset_x_ = 0;
}
inline float ScaleWindow::_internal_offset_x() const {
  return offset_x_;
}
inline float ScaleWindow::offset_x() const {
  // @@protoc_insertion_point(field_get:minieye.seg.ScaleWindow.offset_x)
  return _internal_offset_x();
}
inline void ScaleWindow::_internal_set_offset_x(float value) {
  
  offset_x_ = value;
}
inline void ScaleWindow::set_offset_x(float value) {
  _internal_set_offset_x(value);
  // @@protoc_insertion_point(field_set:minieye.seg.ScaleWindow.offset_x)
}

// float offset_y = 4;
inline void ScaleWindow::clear_offset_y() {
  offset_y_ = 0;
}
inline float ScaleWindow::_internal_offset_y() const {
  return offset_y_;
}
inline float ScaleWindow::offset_y() const {
  // @@protoc_insertion_point(field_get:minieye.seg.ScaleWindow.offset_y)
  return _internal_offset_y();
}
inline void ScaleWindow::_internal_set_offset_y(float value) {
  
  offset_y_ = value;
}
inline void ScaleWindow::set_offset_y(float value) {
  _internal_set_offset_y(value);
  // @@protoc_insertion_point(field_set:minieye.seg.ScaleWindow.offset_y)
}

// int32 width = 5;
inline void ScaleWindow::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScaleWindow::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScaleWindow::width() const {
  // @@protoc_insertion_point(field_get:minieye.seg.ScaleWindow.width)
  return _internal_width();
}
inline void ScaleWindow::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void ScaleWindow::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:minieye.seg.ScaleWindow.width)
}

// int32 height = 6;
inline void ScaleWindow::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScaleWindow::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScaleWindow::height() const {
  // @@protoc_insertion_point(field_get:minieye.seg.ScaleWindow.height)
  return _internal_height();
}
inline void ScaleWindow::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void ScaleWindow::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:minieye.seg.ScaleWindow.height)
}

// -------------------------------------------------------------------

// SegMask

// uint64 mask = 1;
inline void SegMask::clear_mask() {
  mask_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SegMask::_internal_mask() const {
  return mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SegMask::mask() const {
  // @@protoc_insertion_point(field_get:minieye.seg.SegMask.mask)
  return _internal_mask();
}
inline void SegMask::_internal_set_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mask_ = value;
}
inline void SegMask::set_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mask(value);
  // @@protoc_insertion_point(field_set:minieye.seg.SegMask.mask)
}

// .minieye.seg.ScaleWindow seg_info = 2;
inline bool SegMask::_internal_has_seg_info() const {
  return this != internal_default_instance() && seg_info_ != nullptr;
}
inline bool SegMask::has_seg_info() const {
  return _internal_has_seg_info();
}
inline void SegMask::clear_seg_info() {
  if (GetArena() == nullptr && seg_info_ != nullptr) {
    delete seg_info_;
  }
  seg_info_ = nullptr;
}
inline const ::minieye::seg::ScaleWindow& SegMask::_internal_seg_info() const {
  const ::minieye::seg::ScaleWindow* p = seg_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::seg::ScaleWindow*>(
      &::minieye::seg::_ScaleWindow_default_instance_);
}
inline const ::minieye::seg::ScaleWindow& SegMask::seg_info() const {
  // @@protoc_insertion_point(field_get:minieye.seg.SegMask.seg_info)
  return _internal_seg_info();
}
inline void SegMask::unsafe_arena_set_allocated_seg_info(
    ::minieye::seg::ScaleWindow* seg_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seg_info_);
  }
  seg_info_ = seg_info;
  if (seg_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.seg.SegMask.seg_info)
}
inline ::minieye::seg::ScaleWindow* SegMask::release_seg_info() {
  auto temp = unsafe_arena_release_seg_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::seg::ScaleWindow* SegMask::unsafe_arena_release_seg_info() {
  // @@protoc_insertion_point(field_release:minieye.seg.SegMask.seg_info)
  
  ::minieye::seg::ScaleWindow* temp = seg_info_;
  seg_info_ = nullptr;
  return temp;
}
inline ::minieye::seg::ScaleWindow* SegMask::_internal_mutable_seg_info() {
  
  if (seg_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::seg::ScaleWindow>(GetArena());
    seg_info_ = p;
  }
  return seg_info_;
}
inline ::minieye::seg::ScaleWindow* SegMask::mutable_seg_info() {
  // @@protoc_insertion_point(field_mutable:minieye.seg.SegMask.seg_info)
  return _internal_mutable_seg_info();
}
inline void SegMask::set_allocated_seg_info(::minieye::seg::ScaleWindow* seg_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete seg_info_;
  }
  if (seg_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(seg_info);
    if (message_arena != submessage_arena) {
      seg_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seg_info, submessage_arena);
    }
    
  } else {
    
  }
  seg_info_ = seg_info;
  // @@protoc_insertion_point(field_set_allocated:minieye.seg.SegMask.seg_info)
}

// bytes seg_supplement = 3;
inline void SegMask::clear_seg_supplement() {
  seg_supplement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SegMask::seg_supplement() const {
  // @@protoc_insertion_point(field_get:minieye.seg.SegMask.seg_supplement)
  return _internal_seg_supplement();
}
inline void SegMask::set_seg_supplement(const std::string& value) {
  _internal_set_seg_supplement(value);
  // @@protoc_insertion_point(field_set:minieye.seg.SegMask.seg_supplement)
}
inline std::string* SegMask::mutable_seg_supplement() {
  // @@protoc_insertion_point(field_mutable:minieye.seg.SegMask.seg_supplement)
  return _internal_mutable_seg_supplement();
}
inline const std::string& SegMask::_internal_seg_supplement() const {
  return seg_supplement_.Get();
}
inline void SegMask::_internal_set_seg_supplement(const std::string& value) {
  
  seg_supplement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SegMask::set_seg_supplement(std::string&& value) {
  
  seg_supplement_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minieye.seg.SegMask.seg_supplement)
}
inline void SegMask::set_seg_supplement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seg_supplement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minieye.seg.SegMask.seg_supplement)
}
inline void SegMask::set_seg_supplement(const void* value,
    size_t size) {
  
  seg_supplement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minieye.seg.SegMask.seg_supplement)
}
inline std::string* SegMask::_internal_mutable_seg_supplement() {
  
  return seg_supplement_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SegMask::release_seg_supplement() {
  // @@protoc_insertion_point(field_release:minieye.seg.SegMask.seg_supplement)
  return seg_supplement_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SegMask::set_allocated_seg_supplement(std::string* seg_supplement) {
  if (seg_supplement != nullptr) {
    
  } else {
    
  }
  seg_supplement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seg_supplement,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minieye.seg.SegMask.seg_supplement)
}
inline std::string* SegMask::unsafe_arena_release_seg_supplement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minieye.seg.SegMask.seg_supplement)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return seg_supplement_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SegMask::unsafe_arena_set_allocated_seg_supplement(
    std::string* seg_supplement) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (seg_supplement != nullptr) {
    
  } else {
    
  }
  seg_supplement_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      seg_supplement, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.seg.SegMask.seg_supplement)
}

// string label = 4;
inline void SegMask::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SegMask::label() const {
  // @@protoc_insertion_point(field_get:minieye.seg.SegMask.label)
  return _internal_label();
}
inline void SegMask::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:minieye.seg.SegMask.label)
}
inline std::string* SegMask::mutable_label() {
  // @@protoc_insertion_point(field_mutable:minieye.seg.SegMask.label)
  return _internal_mutable_label();
}
inline const std::string& SegMask::_internal_label() const {
  return label_.Get();
}
inline void SegMask::_internal_set_label(const std::string& value) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SegMask::set_label(std::string&& value) {
  
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minieye.seg.SegMask.label)
}
inline void SegMask::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minieye.seg.SegMask.label)
}
inline void SegMask::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minieye.seg.SegMask.label)
}
inline std::string* SegMask::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SegMask::release_label() {
  // @@protoc_insertion_point(field_release:minieye.seg.SegMask.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SegMask::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minieye.seg.SegMask.label)
}
inline std::string* SegMask::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minieye.seg.SegMask.label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return label_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SegMask::unsafe_arena_set_allocated_label(
    std::string* label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (label != nullptr) {
    
  } else {
    
  }
  label_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      label, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.seg.SegMask.label)
}

// uint64 offset = 5;
inline void SegMask::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SegMask::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SegMask::offset() const {
  // @@protoc_insertion_point(field_get:minieye.seg.SegMask.offset)
  return _internal_offset();
}
inline void SegMask::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void SegMask::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:minieye.seg.SegMask.offset)
}

// int32 data_type = 6;
inline void SegMask::clear_data_type() {
  data_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegMask::_internal_data_type() const {
  return data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegMask::data_type() const {
  // @@protoc_insertion_point(field_get:minieye.seg.SegMask.data_type)
  return _internal_data_type();
}
inline void SegMask::_internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_type_ = value;
}
inline void SegMask::set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:minieye.seg.SegMask.data_type)
}

// -------------------------------------------------------------------

// ParkSpotSegResMeta

// repeated .minieye.seg.SegMask seg_mask = 1;
inline int ParkSpotSegResMeta::_internal_seg_mask_size() const {
  return seg_mask_.size();
}
inline int ParkSpotSegResMeta::seg_mask_size() const {
  return _internal_seg_mask_size();
}
inline void ParkSpotSegResMeta::clear_seg_mask() {
  seg_mask_.Clear();
}
inline ::minieye::seg::SegMask* ParkSpotSegResMeta::mutable_seg_mask(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.seg.ParkSpotSegResMeta.seg_mask)
  return seg_mask_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::seg::SegMask >*
ParkSpotSegResMeta::mutable_seg_mask() {
  // @@protoc_insertion_point(field_mutable_list:minieye.seg.ParkSpotSegResMeta.seg_mask)
  return &seg_mask_;
}
inline const ::minieye::seg::SegMask& ParkSpotSegResMeta::_internal_seg_mask(int index) const {
  return seg_mask_.Get(index);
}
inline const ::minieye::seg::SegMask& ParkSpotSegResMeta::seg_mask(int index) const {
  // @@protoc_insertion_point(field_get:minieye.seg.ParkSpotSegResMeta.seg_mask)
  return _internal_seg_mask(index);
}
inline ::minieye::seg::SegMask* ParkSpotSegResMeta::_internal_add_seg_mask() {
  return seg_mask_.Add();
}
inline ::minieye::seg::SegMask* ParkSpotSegResMeta::add_seg_mask() {
  // @@protoc_insertion_point(field_add:minieye.seg.ParkSpotSegResMeta.seg_mask)
  return _internal_add_seg_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::seg::SegMask >&
ParkSpotSegResMeta::seg_mask() const {
  // @@protoc_insertion_point(field_list:minieye.seg.ParkSpotSegResMeta.seg_mask)
  return seg_mask_;
}

// .minieye.seg.ParkSlotSegReq seg_context = 2;
inline bool ParkSpotSegResMeta::_internal_has_seg_context() const {
  return this != internal_default_instance() && seg_context_ != nullptr;
}
inline bool ParkSpotSegResMeta::has_seg_context() const {
  return _internal_has_seg_context();
}
inline void ParkSpotSegResMeta::clear_seg_context() {
  if (GetArena() == nullptr && seg_context_ != nullptr) {
    delete seg_context_;
  }
  seg_context_ = nullptr;
}
inline const ::minieye::seg::ParkSlotSegReq& ParkSpotSegResMeta::_internal_seg_context() const {
  const ::minieye::seg::ParkSlotSegReq* p = seg_context_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::seg::ParkSlotSegReq*>(
      &::minieye::seg::_ParkSlotSegReq_default_instance_);
}
inline const ::minieye::seg::ParkSlotSegReq& ParkSpotSegResMeta::seg_context() const {
  // @@protoc_insertion_point(field_get:minieye.seg.ParkSpotSegResMeta.seg_context)
  return _internal_seg_context();
}
inline void ParkSpotSegResMeta::unsafe_arena_set_allocated_seg_context(
    ::minieye::seg::ParkSlotSegReq* seg_context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seg_context_);
  }
  seg_context_ = seg_context;
  if (seg_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.seg.ParkSpotSegResMeta.seg_context)
}
inline ::minieye::seg::ParkSlotSegReq* ParkSpotSegResMeta::release_seg_context() {
  auto temp = unsafe_arena_release_seg_context();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::seg::ParkSlotSegReq* ParkSpotSegResMeta::unsafe_arena_release_seg_context() {
  // @@protoc_insertion_point(field_release:minieye.seg.ParkSpotSegResMeta.seg_context)
  
  ::minieye::seg::ParkSlotSegReq* temp = seg_context_;
  seg_context_ = nullptr;
  return temp;
}
inline ::minieye::seg::ParkSlotSegReq* ParkSpotSegResMeta::_internal_mutable_seg_context() {
  
  if (seg_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::seg::ParkSlotSegReq>(GetArena());
    seg_context_ = p;
  }
  return seg_context_;
}
inline ::minieye::seg::ParkSlotSegReq* ParkSpotSegResMeta::mutable_seg_context() {
  // @@protoc_insertion_point(field_mutable:minieye.seg.ParkSpotSegResMeta.seg_context)
  return _internal_mutable_seg_context();
}
inline void ParkSpotSegResMeta::set_allocated_seg_context(::minieye::seg::ParkSlotSegReq* seg_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete seg_context_;
  }
  if (seg_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(seg_context);
    if (message_arena != submessage_arena) {
      seg_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seg_context, submessage_arena);
    }
    
  } else {
    
  }
  seg_context_ = seg_context;
  // @@protoc_insertion_point(field_set_allocated:minieye.seg.ParkSpotSegResMeta.seg_context)
}

// uint64 start_time = 3;
inline void ParkSpotSegResMeta::clear_start_time() {
  start_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkSpotSegResMeta::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkSpotSegResMeta::start_time() const {
  // @@protoc_insertion_point(field_get:minieye.seg.ParkSpotSegResMeta.start_time)
  return _internal_start_time();
}
inline void ParkSpotSegResMeta::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_ = value;
}
inline void ParkSpotSegResMeta::set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:minieye.seg.ParkSpotSegResMeta.start_time)
}

// uint64 finish_time = 4;
inline void ParkSpotSegResMeta::clear_finish_time() {
  finish_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkSpotSegResMeta::_internal_finish_time() const {
  return finish_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkSpotSegResMeta::finish_time() const {
  // @@protoc_insertion_point(field_get:minieye.seg.ParkSpotSegResMeta.finish_time)
  return _internal_finish_time();
}
inline void ParkSpotSegResMeta::_internal_set_finish_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  finish_time_ = value;
}
inline void ParkSpotSegResMeta::set_finish_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_finish_time(value);
  // @@protoc_insertion_point(field_set:minieye.seg.ParkSpotSegResMeta.finish_time)
}

// uint64 shm_index = 5;
inline void ParkSpotSegResMeta::clear_shm_index() {
  shm_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkSpotSegResMeta::_internal_shm_index() const {
  return shm_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParkSpotSegResMeta::shm_index() const {
  // @@protoc_insertion_point(field_get:minieye.seg.ParkSpotSegResMeta.shm_index)
  return _internal_shm_index();
}
inline void ParkSpotSegResMeta::_internal_set_shm_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shm_index_ = value;
}
inline void ParkSpotSegResMeta::set_shm_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shm_index(value);
  // @@protoc_insertion_point(field_set:minieye.seg.ParkSpotSegResMeta.shm_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace seg
}  // namespace minieye

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_segmentation_2eproto
