// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_warning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_object_5fwarning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_object_5fwarning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_object_5fwarning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_object_5fwarning_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fwarning_2eproto;
namespace perception {
namespace object {
class BsdState;
class BsdStateDefaultTypeInternal;
extern BsdStateDefaultTypeInternal _BsdState_default_instance_;
class BsdWarning;
class BsdWarningDefaultTypeInternal;
extern BsdWarningDefaultTypeInternal _BsdWarning_default_instance_;
class IhcSignal;
class IhcSignalDefaultTypeInternal;
extern IhcSignalDefaultTypeInternal _IhcSignal_default_instance_;
class IhcState;
class IhcStateDefaultTypeInternal;
extern IhcStateDefaultTypeInternal _IhcState_default_instance_;
class LcaState;
class LcaStateDefaultTypeInternal;
extern LcaStateDefaultTypeInternal _LcaState_default_instance_;
class LcaWarning;
class LcaWarningDefaultTypeInternal;
extern LcaWarningDefaultTypeInternal _LcaWarning_default_instance_;
class PedState;
class PedStateDefaultTypeInternal;
extern PedStateDefaultTypeInternal _PedState_default_instance_;
class PedWarning;
class PedWarningDefaultTypeInternal;
extern PedWarningDefaultTypeInternal _PedWarning_default_instance_;
class TsrState;
class TsrStateDefaultTypeInternal;
extern TsrStateDefaultTypeInternal _TsrState_default_instance_;
class TsrWarning;
class TsrWarningDefaultTypeInternal;
extern TsrWarningDefaultTypeInternal _TsrWarning_default_instance_;
class TsrWarning_TrafficLightSignal;
class TsrWarning_TrafficLightSignalDefaultTypeInternal;
extern TsrWarning_TrafficLightSignalDefaultTypeInternal _TsrWarning_TrafficLightSignal_default_instance_;
class VehicleState;
class VehicleStateDefaultTypeInternal;
extern VehicleStateDefaultTypeInternal _VehicleState_default_instance_;
class VehicleWarning;
class VehicleWarningDefaultTypeInternal;
extern VehicleWarningDefaultTypeInternal _VehicleWarning_default_instance_;
class Warning;
class WarningDefaultTypeInternal;
extern WarningDefaultTypeInternal _Warning_default_instance_;
}  // namespace object
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> ::perception::object::BsdState* Arena::CreateMaybeMessage<::perception::object::BsdState>(Arena*);
template<> ::perception::object::BsdWarning* Arena::CreateMaybeMessage<::perception::object::BsdWarning>(Arena*);
template<> ::perception::object::IhcSignal* Arena::CreateMaybeMessage<::perception::object::IhcSignal>(Arena*);
template<> ::perception::object::IhcState* Arena::CreateMaybeMessage<::perception::object::IhcState>(Arena*);
template<> ::perception::object::LcaState* Arena::CreateMaybeMessage<::perception::object::LcaState>(Arena*);
template<> ::perception::object::LcaWarning* Arena::CreateMaybeMessage<::perception::object::LcaWarning>(Arena*);
template<> ::perception::object::PedState* Arena::CreateMaybeMessage<::perception::object::PedState>(Arena*);
template<> ::perception::object::PedWarning* Arena::CreateMaybeMessage<::perception::object::PedWarning>(Arena*);
template<> ::perception::object::TsrState* Arena::CreateMaybeMessage<::perception::object::TsrState>(Arena*);
template<> ::perception::object::TsrWarning* Arena::CreateMaybeMessage<::perception::object::TsrWarning>(Arena*);
template<> ::perception::object::TsrWarning_TrafficLightSignal* Arena::CreateMaybeMessage<::perception::object::TsrWarning_TrafficLightSignal>(Arena*);
template<> ::perception::object::VehicleState* Arena::CreateMaybeMessage<::perception::object::VehicleState>(Arena*);
template<> ::perception::object::VehicleWarning* Arena::CreateMaybeMessage<::perception::object::VehicleWarning>(Arena*);
template<> ::perception::object::Warning* Arena::CreateMaybeMessage<::perception::object::Warning>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perception {
namespace object {

enum IhcSignal_IhcSignalType : int {
  IhcSignal_IhcSignalType_kLightInvalid = 0,
  IhcSignal_IhcSignalType_kLightOff = 1,
  IhcSignal_IhcSignalType_kDippedBeamOn = 2,
  IhcSignal_IhcSignalType_kHighBeamOn = 3,
  IhcSignal_IhcSignalType_IhcSignal_IhcSignalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IhcSignal_IhcSignalType_IhcSignal_IhcSignalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IhcSignal_IhcSignalType_IsValid(int value);
constexpr IhcSignal_IhcSignalType IhcSignal_IhcSignalType_IhcSignalType_MIN = IhcSignal_IhcSignalType_kLightInvalid;
constexpr IhcSignal_IhcSignalType IhcSignal_IhcSignalType_IhcSignalType_MAX = IhcSignal_IhcSignalType_kHighBeamOn;
constexpr int IhcSignal_IhcSignalType_IhcSignalType_ARRAYSIZE = IhcSignal_IhcSignalType_IhcSignalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IhcSignal_IhcSignalType_descriptor();
template<typename T>
inline const std::string& IhcSignal_IhcSignalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IhcSignal_IhcSignalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IhcSignal_IhcSignalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IhcSignal_IhcSignalType_descriptor(), enum_t_value);
}
inline bool IhcSignal_IhcSignalType_Parse(
    const std::string& name, IhcSignal_IhcSignalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IhcSignal_IhcSignalType>(
    IhcSignal_IhcSignalType_descriptor(), name, value);
}
// ===================================================================

class VehicleWarning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.VehicleWarning) */ {
 public:
  inline VehicleWarning() : VehicleWarning(nullptr) {};
  virtual ~VehicleWarning();

  VehicleWarning(const VehicleWarning& from);
  VehicleWarning(VehicleWarning&& from) noexcept
    : VehicleWarning() {
    *this = ::std::move(from);
  }

  inline VehicleWarning& operator=(const VehicleWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleWarning& operator=(VehicleWarning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleWarning* internal_default_instance() {
    return reinterpret_cast<const VehicleWarning*>(
               &_VehicleWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleWarning& a, VehicleWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleWarning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleWarning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleWarning* New() const final {
    return CreateMaybeMessage<VehicleWarning>(nullptr);
  }

  VehicleWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleWarning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleWarning& from);
  void MergeFrom(const VehicleWarning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleWarning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.VehicleWarning";
  }
  protected:
  explicit VehicleWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleIdFieldNumber = 1,
    kHeadwayFieldNumber = 2,
    kWarningLevelFieldNumber = 3,
    kFcwFieldNumber = 4,
    kUfcwFieldNumber = 5,
    kHeadwayWarningFieldNumber = 6,
    kVbWarningFieldNumber = 7,
    kSagWarningFieldNumber = 8,
  };
  // int32 vehicle_id = 1;
  void clear_vehicle_id();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_id() const;
  void set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_id() const;
  void _internal_set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float headway = 2;
  void clear_headway();
  float headway() const;
  void set_headway(float value);
  private:
  float _internal_headway() const;
  void _internal_set_headway(float value);
  public:

  // int32 warning_level = 3;
  void clear_warning_level();
  ::PROTOBUF_NAMESPACE_ID::int32 warning_level() const;
  void set_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_warning_level() const;
  void _internal_set_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fcw = 4;
  void clear_fcw();
  ::PROTOBUF_NAMESPACE_ID::int32 fcw() const;
  void set_fcw(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fcw() const;
  void _internal_set_fcw(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ufcw = 5;
  void clear_ufcw();
  ::PROTOBUF_NAMESPACE_ID::int32 ufcw() const;
  void set_ufcw(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ufcw() const;
  void _internal_set_ufcw(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 headway_warning = 6;
  void clear_headway_warning();
  ::PROTOBUF_NAMESPACE_ID::int32 headway_warning() const;
  void set_headway_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_headway_warning() const;
  void _internal_set_headway_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vb_warning = 7;
  void clear_vb_warning();
  ::PROTOBUF_NAMESPACE_ID::int32 vb_warning() const;
  void set_vb_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vb_warning() const;
  void _internal_set_vb_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sag_warning = 8;
  void clear_sag_warning();
  ::PROTOBUF_NAMESPACE_ID::int32 sag_warning() const;
  void set_sag_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sag_warning() const;
  void _internal_set_sag_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.VehicleWarning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_id_;
  float headway_;
  ::PROTOBUF_NAMESPACE_ID::int32 warning_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 fcw_;
  ::PROTOBUF_NAMESPACE_ID::int32 ufcw_;
  ::PROTOBUF_NAMESPACE_ID::int32 headway_warning_;
  ::PROTOBUF_NAMESPACE_ID::int32 vb_warning_;
  ::PROTOBUF_NAMESPACE_ID::int32 sag_warning_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class VehicleState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.VehicleState) */ {
 public:
  inline VehicleState() : VehicleState(nullptr) {};
  virtual ~VehicleState();

  VehicleState(const VehicleState& from);
  VehicleState(VehicleState&& from) noexcept
    : VehicleState() {
    *this = ::std::move(from);
  }

  inline VehicleState& operator=(const VehicleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleState& operator=(VehicleState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleState* internal_default_instance() {
    return reinterpret_cast<const VehicleState*>(
               &_VehicleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VehicleState& a, VehicleState& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleState* New() const final {
    return CreateMaybeMessage<VehicleState>(nullptr);
  }

  VehicleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleState& from);
  void MergeFrom(const VehicleState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.VehicleState";
  }
  protected:
  explicit VehicleState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFcwStateFieldNumber = 1,
    kHmwStateFieldNumber = 2,
    kSagLevelFieldNumber = 14,
    kFcwLevelFieldNumber = 10,
    kUfcwLevelFieldNumber = 11,
    kHmwLevelFieldNumber = 12,
    kVbLevelFieldNumber = 13,
  };
  // int32 fcw_state = 1;
  void clear_fcw_state();
  ::PROTOBUF_NAMESPACE_ID::int32 fcw_state() const;
  void set_fcw_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fcw_state() const;
  void _internal_set_fcw_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hmw_state = 2;
  void clear_hmw_state();
  ::PROTOBUF_NAMESPACE_ID::int32 hmw_state() const;
  void set_hmw_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hmw_state() const;
  void _internal_set_hmw_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sag_level = 14;
  void clear_sag_level();
  ::PROTOBUF_NAMESPACE_ID::int32 sag_level() const;
  void set_sag_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sag_level() const;
  void _internal_set_sag_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fcw_level = 10;
  void clear_fcw_level();
  ::PROTOBUF_NAMESPACE_ID::int32 fcw_level() const;
  void set_fcw_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fcw_level() const;
  void _internal_set_fcw_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ufcw_level = 11;
  void clear_ufcw_level();
  ::PROTOBUF_NAMESPACE_ID::int32 ufcw_level() const;
  void set_ufcw_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ufcw_level() const;
  void _internal_set_ufcw_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hmw_level = 12;
  void clear_hmw_level();
  ::PROTOBUF_NAMESPACE_ID::int32 hmw_level() const;
  void set_hmw_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hmw_level() const;
  void _internal_set_hmw_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vb_level = 13;
  void clear_vb_level();
  ::PROTOBUF_NAMESPACE_ID::int32 vb_level() const;
  void set_vb_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vb_level() const;
  void _internal_set_vb_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.VehicleState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fcw_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 hmw_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 sag_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 fcw_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 ufcw_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 hmw_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 vb_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class PedWarning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.PedWarning) */ {
 public:
  inline PedWarning() : PedWarning(nullptr) {};
  virtual ~PedWarning();

  PedWarning(const PedWarning& from);
  PedWarning(PedWarning&& from) noexcept
    : PedWarning() {
    *this = ::std::move(from);
  }

  inline PedWarning& operator=(const PedWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline PedWarning& operator=(PedWarning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PedWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PedWarning* internal_default_instance() {
    return reinterpret_cast<const PedWarning*>(
               &_PedWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PedWarning& a, PedWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(PedWarning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PedWarning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PedWarning* New() const final {
    return CreateMaybeMessage<PedWarning>(nullptr);
  }

  PedWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PedWarning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PedWarning& from);
  void MergeFrom(const PedWarning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PedWarning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.PedWarning";
  }
  protected:
  explicit PedWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPedOnFieldNumber = 1,
    kPcwOnFieldNumber = 2,
    kPcwWarningLevelFieldNumber = 3,
  };
  // bool ped_on = 1;
  void clear_ped_on();
  bool ped_on() const;
  void set_ped_on(bool value);
  private:
  bool _internal_ped_on() const;
  void _internal_set_ped_on(bool value);
  public:

  // bool pcw_on = 2;
  void clear_pcw_on();
  bool pcw_on() const;
  void set_pcw_on(bool value);
  private:
  bool _internal_pcw_on() const;
  void _internal_set_pcw_on(bool value);
  public:

  // int32 pcw_warning_level = 3;
  void clear_pcw_warning_level();
  ::PROTOBUF_NAMESPACE_ID::int32 pcw_warning_level() const;
  void set_pcw_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pcw_warning_level() const;
  void _internal_set_pcw_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.PedWarning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ped_on_;
  bool pcw_on_;
  ::PROTOBUF_NAMESPACE_ID::int32 pcw_warning_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class PedState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.PedState) */ {
 public:
  inline PedState() : PedState(nullptr) {};
  virtual ~PedState();

  PedState(const PedState& from);
  PedState(PedState&& from) noexcept
    : PedState() {
    *this = ::std::move(from);
  }

  inline PedState& operator=(const PedState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PedState& operator=(PedState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PedState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PedState* internal_default_instance() {
    return reinterpret_cast<const PedState*>(
               &_PedState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PedState& a, PedState& b) {
    a.Swap(&b);
  }
  inline void Swap(PedState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PedState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PedState* New() const final {
    return CreateMaybeMessage<PedState>(nullptr);
  }

  PedState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PedState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PedState& from);
  void MergeFrom(const PedState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PedState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.PedState";
  }
  protected:
  explicit PedState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcwStateFieldNumber = 1,
    kPcwLevelFieldNumber = 10,
  };
  // int32 pcw_state = 1;
  void clear_pcw_state();
  ::PROTOBUF_NAMESPACE_ID::int32 pcw_state() const;
  void set_pcw_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pcw_state() const;
  void _internal_set_pcw_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pcw_level = 10;
  void clear_pcw_level();
  ::PROTOBUF_NAMESPACE_ID::int32 pcw_level() const;
  void set_pcw_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pcw_level() const;
  void _internal_set_pcw_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.PedState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 pcw_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 pcw_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class TsrWarning_TrafficLightSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.TsrWarning.TrafficLightSignal) */ {
 public:
  inline TsrWarning_TrafficLightSignal() : TsrWarning_TrafficLightSignal(nullptr) {};
  virtual ~TsrWarning_TrafficLightSignal();

  TsrWarning_TrafficLightSignal(const TsrWarning_TrafficLightSignal& from);
  TsrWarning_TrafficLightSignal(TsrWarning_TrafficLightSignal&& from) noexcept
    : TsrWarning_TrafficLightSignal() {
    *this = ::std::move(from);
  }

  inline TsrWarning_TrafficLightSignal& operator=(const TsrWarning_TrafficLightSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TsrWarning_TrafficLightSignal& operator=(TsrWarning_TrafficLightSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TsrWarning_TrafficLightSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TsrWarning_TrafficLightSignal* internal_default_instance() {
    return reinterpret_cast<const TsrWarning_TrafficLightSignal*>(
               &_TsrWarning_TrafficLightSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TsrWarning_TrafficLightSignal& a, TsrWarning_TrafficLightSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(TsrWarning_TrafficLightSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TsrWarning_TrafficLightSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TsrWarning_TrafficLightSignal* New() const final {
    return CreateMaybeMessage<TsrWarning_TrafficLightSignal>(nullptr);
  }

  TsrWarning_TrafficLightSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TsrWarning_TrafficLightSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TsrWarning_TrafficLightSignal& from);
  void MergeFrom(const TsrWarning_TrafficLightSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TsrWarning_TrafficLightSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.TsrWarning.TrafficLightSignal";
  }
  protected:
  explicit TsrWarning_TrafficLightSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRightTurnOnRedFieldNumber = 1,
  };
  // bool right_turn_on_red = 1;
  void clear_right_turn_on_red();
  bool right_turn_on_red() const;
  void set_right_turn_on_red(bool value);
  private:
  bool _internal_right_turn_on_red() const;
  void _internal_set_right_turn_on_red(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.TsrWarning.TrafficLightSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool right_turn_on_red_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class TsrWarning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.TsrWarning) */ {
 public:
  inline TsrWarning() : TsrWarning(nullptr) {};
  virtual ~TsrWarning();

  TsrWarning(const TsrWarning& from);
  TsrWarning(TsrWarning&& from) noexcept
    : TsrWarning() {
    *this = ::std::move(from);
  }

  inline TsrWarning& operator=(const TsrWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline TsrWarning& operator=(TsrWarning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TsrWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TsrWarning* internal_default_instance() {
    return reinterpret_cast<const TsrWarning*>(
               &_TsrWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TsrWarning& a, TsrWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(TsrWarning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TsrWarning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TsrWarning* New() const final {
    return CreateMaybeMessage<TsrWarning>(nullptr);
  }

  TsrWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TsrWarning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TsrWarning& from);
  void MergeFrom(const TsrWarning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TsrWarning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.TsrWarning";
  }
  protected:
  explicit TsrWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TsrWarning_TrafficLightSignal TrafficLightSignal;

  // accessors -------------------------------------------------------

  enum : int {
    kLightSignalFieldNumber = 6,
    kHeightLimitFieldNumber = 1,
    kWeightLimitFieldNumber = 2,
    kSpeedLimitFieldNumber = 3,
    kTsrWarningLevelFieldNumber = 4,
    kNoOvertakingStatusFieldNumber = 5,
    kRemovalSpeedLimitFieldNumber = 7,
    kSpeedLimitDistanceFieldNumber = 8,
  };
  // .perception.object.TsrWarning.TrafficLightSignal light_signal = 6;
  bool has_light_signal() const;
  private:
  bool _internal_has_light_signal() const;
  public:
  void clear_light_signal();
  const ::perception::object::TsrWarning_TrafficLightSignal& light_signal() const;
  ::perception::object::TsrWarning_TrafficLightSignal* release_light_signal();
  ::perception::object::TsrWarning_TrafficLightSignal* mutable_light_signal();
  void set_allocated_light_signal(::perception::object::TsrWarning_TrafficLightSignal* light_signal);
  private:
  const ::perception::object::TsrWarning_TrafficLightSignal& _internal_light_signal() const;
  ::perception::object::TsrWarning_TrafficLightSignal* _internal_mutable_light_signal();
  public:
  void unsafe_arena_set_allocated_light_signal(
      ::perception::object::TsrWarning_TrafficLightSignal* light_signal);
  ::perception::object::TsrWarning_TrafficLightSignal* unsafe_arena_release_light_signal();

  // float height_limit = 1;
  void clear_height_limit();
  float height_limit() const;
  void set_height_limit(float value);
  private:
  float _internal_height_limit() const;
  void _internal_set_height_limit(float value);
  public:

  // float weight_limit = 2;
  void clear_weight_limit();
  float weight_limit() const;
  void set_weight_limit(float value);
  private:
  float _internal_weight_limit() const;
  void _internal_set_weight_limit(float value);
  public:

  // int32 speed_limit = 3;
  void clear_speed_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 speed_limit() const;
  void set_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed_limit() const;
  void _internal_set_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tsr_warning_level = 4;
  void clear_tsr_warning_level();
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_warning_level() const;
  void set_tsr_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tsr_warning_level() const;
  void _internal_set_tsr_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 no_overtaking_status = 5;
  void clear_no_overtaking_status();
  ::PROTOBUF_NAMESPACE_ID::int32 no_overtaking_status() const;
  void set_no_overtaking_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_no_overtaking_status() const;
  void _internal_set_no_overtaking_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 removal_speed_limit = 7;
  void clear_removal_speed_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 removal_speed_limit() const;
  void set_removal_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_removal_speed_limit() const;
  void _internal_set_removal_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed_limit_distance = 8;
  void clear_speed_limit_distance();
  float speed_limit_distance() const;
  void set_speed_limit_distance(float value);
  private:
  float _internal_speed_limit_distance() const;
  void _internal_set_speed_limit_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.TsrWarning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::object::TsrWarning_TrafficLightSignal* light_signal_;
  float height_limit_;
  float weight_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_warning_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 no_overtaking_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 removal_speed_limit_;
  float speed_limit_distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class TsrState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.TsrState) */ {
 public:
  inline TsrState() : TsrState(nullptr) {};
  virtual ~TsrState();

  TsrState(const TsrState& from);
  TsrState(TsrState&& from) noexcept
    : TsrState() {
    *this = ::std::move(from);
  }

  inline TsrState& operator=(const TsrState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TsrState& operator=(TsrState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TsrState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TsrState* internal_default_instance() {
    return reinterpret_cast<const TsrState*>(
               &_TsrState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TsrState& a, TsrState& b) {
    a.Swap(&b);
  }
  inline void Swap(TsrState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TsrState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TsrState* New() const final {
    return CreateMaybeMessage<TsrState>(nullptr);
  }

  TsrState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TsrState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TsrState& from);
  void MergeFrom(const TsrState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TsrState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.TsrState";
  }
  protected:
  explicit TsrState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTsrStateFieldNumber = 1,
    kTsrLevelFieldNumber = 10,
  };
  // int32 tsr_state = 1;
  void clear_tsr_state();
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_state() const;
  void set_tsr_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tsr_state() const;
  void _internal_set_tsr_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tsr_level = 10;
  void clear_tsr_level();
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_level() const;
  void set_tsr_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tsr_level() const;
  void _internal_set_tsr_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.TsrState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 tsr_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class IhcSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.IhcSignal) */ {
 public:
  inline IhcSignal() : IhcSignal(nullptr) {};
  virtual ~IhcSignal();

  IhcSignal(const IhcSignal& from);
  IhcSignal(IhcSignal&& from) noexcept
    : IhcSignal() {
    *this = ::std::move(from);
  }

  inline IhcSignal& operator=(const IhcSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline IhcSignal& operator=(IhcSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IhcSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IhcSignal* internal_default_instance() {
    return reinterpret_cast<const IhcSignal*>(
               &_IhcSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IhcSignal& a, IhcSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(IhcSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IhcSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IhcSignal* New() const final {
    return CreateMaybeMessage<IhcSignal>(nullptr);
  }

  IhcSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IhcSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IhcSignal& from);
  void MergeFrom(const IhcSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IhcSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.IhcSignal";
  }
  protected:
  explicit IhcSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef IhcSignal_IhcSignalType IhcSignalType;
  static constexpr IhcSignalType kLightInvalid =
    IhcSignal_IhcSignalType_kLightInvalid;
  static constexpr IhcSignalType kLightOff =
    IhcSignal_IhcSignalType_kLightOff;
  static constexpr IhcSignalType kDippedBeamOn =
    IhcSignal_IhcSignalType_kDippedBeamOn;
  static constexpr IhcSignalType kHighBeamOn =
    IhcSignal_IhcSignalType_kHighBeamOn;
  static inline bool IhcSignalType_IsValid(int value) {
    return IhcSignal_IhcSignalType_IsValid(value);
  }
  static constexpr IhcSignalType IhcSignalType_MIN =
    IhcSignal_IhcSignalType_IhcSignalType_MIN;
  static constexpr IhcSignalType IhcSignalType_MAX =
    IhcSignal_IhcSignalType_IhcSignalType_MAX;
  static constexpr int IhcSignalType_ARRAYSIZE =
    IhcSignal_IhcSignalType_IhcSignalType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  IhcSignalType_descriptor() {
    return IhcSignal_IhcSignalType_descriptor();
  }
  template<typename T>
  static inline const std::string& IhcSignalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IhcSignalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IhcSignalType_Name.");
    return IhcSignal_IhcSignalType_Name(enum_t_value);
  }
  static inline bool IhcSignalType_Parse(const std::string& name,
      IhcSignalType* value) {
    return IhcSignal_IhcSignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kControlSignalFieldNumber = 1,
  };
  // .perception.object.IhcSignal.IhcSignalType control_signal = 1;
  void clear_control_signal();
  ::perception::object::IhcSignal_IhcSignalType control_signal() const;
  void set_control_signal(::perception::object::IhcSignal_IhcSignalType value);
  private:
  ::perception::object::IhcSignal_IhcSignalType _internal_control_signal() const;
  void _internal_set_control_signal(::perception::object::IhcSignal_IhcSignalType value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.IhcSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int control_signal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class IhcState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.IhcState) */ {
 public:
  inline IhcState() : IhcState(nullptr) {};
  virtual ~IhcState();

  IhcState(const IhcState& from);
  IhcState(IhcState&& from) noexcept
    : IhcState() {
    *this = ::std::move(from);
  }

  inline IhcState& operator=(const IhcState& from) {
    CopyFrom(from);
    return *this;
  }
  inline IhcState& operator=(IhcState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IhcState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IhcState* internal_default_instance() {
    return reinterpret_cast<const IhcState*>(
               &_IhcState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IhcState& a, IhcState& b) {
    a.Swap(&b);
  }
  inline void Swap(IhcState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IhcState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IhcState* New() const final {
    return CreateMaybeMessage<IhcState>(nullptr);
  }

  IhcState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IhcState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IhcState& from);
  void MergeFrom(const IhcState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IhcState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.IhcState";
  }
  protected:
  explicit IhcState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIhcStateFieldNumber = 1,
  };
  // int32 ihc_state = 1;
  void clear_ihc_state();
  ::PROTOBUF_NAMESPACE_ID::int32 ihc_state() const;
  void set_ihc_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ihc_state() const;
  void _internal_set_ihc_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.IhcState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ihc_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class BsdWarning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.BsdWarning) */ {
 public:
  inline BsdWarning() : BsdWarning(nullptr) {};
  virtual ~BsdWarning();

  BsdWarning(const BsdWarning& from);
  BsdWarning(BsdWarning&& from) noexcept
    : BsdWarning() {
    *this = ::std::move(from);
  }

  inline BsdWarning& operator=(const BsdWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline BsdWarning& operator=(BsdWarning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BsdWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BsdWarning* internal_default_instance() {
    return reinterpret_cast<const BsdWarning*>(
               &_BsdWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BsdWarning& a, BsdWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(BsdWarning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BsdWarning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BsdWarning* New() const final {
    return CreateMaybeMessage<BsdWarning>(nullptr);
  }

  BsdWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BsdWarning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BsdWarning& from);
  void MergeFrom(const BsdWarning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BsdWarning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.BsdWarning";
  }
  protected:
  explicit BsdWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftWarningFieldNumber = 1,
    kRightWarningFieldNumber = 2,
    kFrontWarningFieldNumber = 3,
  };
  // int32 left_warning = 1;
  void clear_left_warning();
  ::PROTOBUF_NAMESPACE_ID::int32 left_warning() const;
  void set_left_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left_warning() const;
  void _internal_set_left_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 right_warning = 2;
  void clear_right_warning();
  ::PROTOBUF_NAMESPACE_ID::int32 right_warning() const;
  void set_right_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right_warning() const;
  void _internal_set_right_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 front_warning = 3;
  void clear_front_warning();
  ::PROTOBUF_NAMESPACE_ID::int32 front_warning() const;
  void set_front_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_front_warning() const;
  void _internal_set_front_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.BsdWarning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_warning_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_warning_;
  ::PROTOBUF_NAMESPACE_ID::int32 front_warning_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class BsdState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.BsdState) */ {
 public:
  inline BsdState() : BsdState(nullptr) {};
  virtual ~BsdState();

  BsdState(const BsdState& from);
  BsdState(BsdState&& from) noexcept
    : BsdState() {
    *this = ::std::move(from);
  }

  inline BsdState& operator=(const BsdState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BsdState& operator=(BsdState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BsdState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BsdState* internal_default_instance() {
    return reinterpret_cast<const BsdState*>(
               &_BsdState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BsdState& a, BsdState& b) {
    a.Swap(&b);
  }
  inline void Swap(BsdState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BsdState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BsdState* New() const final {
    return CreateMaybeMessage<BsdState>(nullptr);
  }

  BsdState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BsdState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BsdState& from);
  void MergeFrom(const BsdState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BsdState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.BsdState";
  }
  protected:
  explicit BsdState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsdStateFieldNumber = 1,
  };
  // int32 bsd_state = 1;
  void clear_bsd_state();
  ::PROTOBUF_NAMESPACE_ID::int32 bsd_state() const;
  void set_bsd_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bsd_state() const;
  void _internal_set_bsd_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.BsdState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bsd_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class LcaWarning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.LcaWarning) */ {
 public:
  inline LcaWarning() : LcaWarning(nullptr) {};
  virtual ~LcaWarning();

  LcaWarning(const LcaWarning& from);
  LcaWarning(LcaWarning&& from) noexcept
    : LcaWarning() {
    *this = ::std::move(from);
  }

  inline LcaWarning& operator=(const LcaWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline LcaWarning& operator=(LcaWarning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LcaWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LcaWarning* internal_default_instance() {
    return reinterpret_cast<const LcaWarning*>(
               &_LcaWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LcaWarning& a, LcaWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(LcaWarning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LcaWarning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LcaWarning* New() const final {
    return CreateMaybeMessage<LcaWarning>(nullptr);
  }

  LcaWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LcaWarning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LcaWarning& from);
  void MergeFrom(const LcaWarning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LcaWarning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.LcaWarning";
  }
  protected:
  explicit LcaWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftWarningFieldNumber = 1,
    kRightWarningFieldNumber = 2,
  };
  // int32 left_warning = 1;
  void clear_left_warning();
  ::PROTOBUF_NAMESPACE_ID::int32 left_warning() const;
  void set_left_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left_warning() const;
  void _internal_set_left_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 right_warning = 2;
  void clear_right_warning();
  ::PROTOBUF_NAMESPACE_ID::int32 right_warning() const;
  void set_right_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right_warning() const;
  void _internal_set_right_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.LcaWarning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_warning_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_warning_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class LcaState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.LcaState) */ {
 public:
  inline LcaState() : LcaState(nullptr) {};
  virtual ~LcaState();

  LcaState(const LcaState& from);
  LcaState(LcaState&& from) noexcept
    : LcaState() {
    *this = ::std::move(from);
  }

  inline LcaState& operator=(const LcaState& from) {
    CopyFrom(from);
    return *this;
  }
  inline LcaState& operator=(LcaState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LcaState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LcaState* internal_default_instance() {
    return reinterpret_cast<const LcaState*>(
               &_LcaState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LcaState& a, LcaState& b) {
    a.Swap(&b);
  }
  inline void Swap(LcaState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LcaState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LcaState* New() const final {
    return CreateMaybeMessage<LcaState>(nullptr);
  }

  LcaState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LcaState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LcaState& from);
  void MergeFrom(const LcaState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LcaState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.LcaState";
  }
  protected:
  explicit LcaState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLcaStateFieldNumber = 1,
  };
  // int32 lca_state = 1;
  void clear_lca_state();
  ::PROTOBUF_NAMESPACE_ID::int32 lca_state() const;
  void set_lca_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lca_state() const;
  void _internal_set_lca_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.LcaState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 lca_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// -------------------------------------------------------------------

class Warning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perception.object.Warning) */ {
 public:
  inline Warning() : Warning(nullptr) {};
  virtual ~Warning();

  Warning(const Warning& from);
  Warning(Warning&& from) noexcept
    : Warning() {
    *this = ::std::move(from);
  }

  inline Warning& operator=(const Warning& from) {
    CopyFrom(from);
    return *this;
  }
  inline Warning& operator=(Warning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Warning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Warning* internal_default_instance() {
    return reinterpret_cast<const Warning*>(
               &_Warning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Warning& a, Warning& b) {
    a.Swap(&b);
  }
  inline void Swap(Warning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Warning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Warning* New() const final {
    return CreateMaybeMessage<Warning>(nullptr);
  }

  Warning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Warning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Warning& from);
  void MergeFrom(const Warning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Warning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perception.object.Warning";
  }
  protected:
  explicit Warning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_object_5fwarning_2eproto);
    return ::descriptor_table_object_5fwarning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleWarningFieldNumber = 1,
    kPedWarningFieldNumber = 2,
    kTsrWarningFieldNumber = 3,
    kIhcSignalFieldNumber = 4,
    kBsdWarningFieldNumber = 5,
    kLcaWarningFieldNumber = 6,
    kVehicleStateFieldNumber = 10,
    kPedStateFieldNumber = 11,
    kTsrStateFieldNumber = 12,
    kIhcStateFieldNumber = 13,
    kBsdStateFieldNumber = 14,
    kLcaStateFieldNumber = 15,
    kBsdWarningZoneFieldNumber = 21,
    kObjectValidFieldNumber = 20,
  };
  // .perception.object.VehicleWarning vehicle_warning = 1;
  bool has_vehicle_warning() const;
  private:
  bool _internal_has_vehicle_warning() const;
  public:
  void clear_vehicle_warning();
  const ::perception::object::VehicleWarning& vehicle_warning() const;
  ::perception::object::VehicleWarning* release_vehicle_warning();
  ::perception::object::VehicleWarning* mutable_vehicle_warning();
  void set_allocated_vehicle_warning(::perception::object::VehicleWarning* vehicle_warning);
  private:
  const ::perception::object::VehicleWarning& _internal_vehicle_warning() const;
  ::perception::object::VehicleWarning* _internal_mutable_vehicle_warning();
  public:
  void unsafe_arena_set_allocated_vehicle_warning(
      ::perception::object::VehicleWarning* vehicle_warning);
  ::perception::object::VehicleWarning* unsafe_arena_release_vehicle_warning();

  // .perception.object.PedWarning ped_warning = 2;
  bool has_ped_warning() const;
  private:
  bool _internal_has_ped_warning() const;
  public:
  void clear_ped_warning();
  const ::perception::object::PedWarning& ped_warning() const;
  ::perception::object::PedWarning* release_ped_warning();
  ::perception::object::PedWarning* mutable_ped_warning();
  void set_allocated_ped_warning(::perception::object::PedWarning* ped_warning);
  private:
  const ::perception::object::PedWarning& _internal_ped_warning() const;
  ::perception::object::PedWarning* _internal_mutable_ped_warning();
  public:
  void unsafe_arena_set_allocated_ped_warning(
      ::perception::object::PedWarning* ped_warning);
  ::perception::object::PedWarning* unsafe_arena_release_ped_warning();

  // .perception.object.TsrWarning tsr_warning = 3;
  bool has_tsr_warning() const;
  private:
  bool _internal_has_tsr_warning() const;
  public:
  void clear_tsr_warning();
  const ::perception::object::TsrWarning& tsr_warning() const;
  ::perception::object::TsrWarning* release_tsr_warning();
  ::perception::object::TsrWarning* mutable_tsr_warning();
  void set_allocated_tsr_warning(::perception::object::TsrWarning* tsr_warning);
  private:
  const ::perception::object::TsrWarning& _internal_tsr_warning() const;
  ::perception::object::TsrWarning* _internal_mutable_tsr_warning();
  public:
  void unsafe_arena_set_allocated_tsr_warning(
      ::perception::object::TsrWarning* tsr_warning);
  ::perception::object::TsrWarning* unsafe_arena_release_tsr_warning();

  // .perception.object.IhcSignal ihc_signal = 4;
  bool has_ihc_signal() const;
  private:
  bool _internal_has_ihc_signal() const;
  public:
  void clear_ihc_signal();
  const ::perception::object::IhcSignal& ihc_signal() const;
  ::perception::object::IhcSignal* release_ihc_signal();
  ::perception::object::IhcSignal* mutable_ihc_signal();
  void set_allocated_ihc_signal(::perception::object::IhcSignal* ihc_signal);
  private:
  const ::perception::object::IhcSignal& _internal_ihc_signal() const;
  ::perception::object::IhcSignal* _internal_mutable_ihc_signal();
  public:
  void unsafe_arena_set_allocated_ihc_signal(
      ::perception::object::IhcSignal* ihc_signal);
  ::perception::object::IhcSignal* unsafe_arena_release_ihc_signal();

  // .perception.object.BsdWarning bsd_warning = 5;
  bool has_bsd_warning() const;
  private:
  bool _internal_has_bsd_warning() const;
  public:
  void clear_bsd_warning();
  const ::perception::object::BsdWarning& bsd_warning() const;
  ::perception::object::BsdWarning* release_bsd_warning();
  ::perception::object::BsdWarning* mutable_bsd_warning();
  void set_allocated_bsd_warning(::perception::object::BsdWarning* bsd_warning);
  private:
  const ::perception::object::BsdWarning& _internal_bsd_warning() const;
  ::perception::object::BsdWarning* _internal_mutable_bsd_warning();
  public:
  void unsafe_arena_set_allocated_bsd_warning(
      ::perception::object::BsdWarning* bsd_warning);
  ::perception::object::BsdWarning* unsafe_arena_release_bsd_warning();

  // .perception.object.LcaWarning lca_warning = 6;
  bool has_lca_warning() const;
  private:
  bool _internal_has_lca_warning() const;
  public:
  void clear_lca_warning();
  const ::perception::object::LcaWarning& lca_warning() const;
  ::perception::object::LcaWarning* release_lca_warning();
  ::perception::object::LcaWarning* mutable_lca_warning();
  void set_allocated_lca_warning(::perception::object::LcaWarning* lca_warning);
  private:
  const ::perception::object::LcaWarning& _internal_lca_warning() const;
  ::perception::object::LcaWarning* _internal_mutable_lca_warning();
  public:
  void unsafe_arena_set_allocated_lca_warning(
      ::perception::object::LcaWarning* lca_warning);
  ::perception::object::LcaWarning* unsafe_arena_release_lca_warning();

  // .perception.object.VehicleState vehicle_state = 10;
  bool has_vehicle_state() const;
  private:
  bool _internal_has_vehicle_state() const;
  public:
  void clear_vehicle_state();
  const ::perception::object::VehicleState& vehicle_state() const;
  ::perception::object::VehicleState* release_vehicle_state();
  ::perception::object::VehicleState* mutable_vehicle_state();
  void set_allocated_vehicle_state(::perception::object::VehicleState* vehicle_state);
  private:
  const ::perception::object::VehicleState& _internal_vehicle_state() const;
  ::perception::object::VehicleState* _internal_mutable_vehicle_state();
  public:
  void unsafe_arena_set_allocated_vehicle_state(
      ::perception::object::VehicleState* vehicle_state);
  ::perception::object::VehicleState* unsafe_arena_release_vehicle_state();

  // .perception.object.PedState ped_state = 11;
  bool has_ped_state() const;
  private:
  bool _internal_has_ped_state() const;
  public:
  void clear_ped_state();
  const ::perception::object::PedState& ped_state() const;
  ::perception::object::PedState* release_ped_state();
  ::perception::object::PedState* mutable_ped_state();
  void set_allocated_ped_state(::perception::object::PedState* ped_state);
  private:
  const ::perception::object::PedState& _internal_ped_state() const;
  ::perception::object::PedState* _internal_mutable_ped_state();
  public:
  void unsafe_arena_set_allocated_ped_state(
      ::perception::object::PedState* ped_state);
  ::perception::object::PedState* unsafe_arena_release_ped_state();

  // .perception.object.TsrState tsr_state = 12;
  bool has_tsr_state() const;
  private:
  bool _internal_has_tsr_state() const;
  public:
  void clear_tsr_state();
  const ::perception::object::TsrState& tsr_state() const;
  ::perception::object::TsrState* release_tsr_state();
  ::perception::object::TsrState* mutable_tsr_state();
  void set_allocated_tsr_state(::perception::object::TsrState* tsr_state);
  private:
  const ::perception::object::TsrState& _internal_tsr_state() const;
  ::perception::object::TsrState* _internal_mutable_tsr_state();
  public:
  void unsafe_arena_set_allocated_tsr_state(
      ::perception::object::TsrState* tsr_state);
  ::perception::object::TsrState* unsafe_arena_release_tsr_state();

  // .perception.object.IhcState ihc_state = 13;
  bool has_ihc_state() const;
  private:
  bool _internal_has_ihc_state() const;
  public:
  void clear_ihc_state();
  const ::perception::object::IhcState& ihc_state() const;
  ::perception::object::IhcState* release_ihc_state();
  ::perception::object::IhcState* mutable_ihc_state();
  void set_allocated_ihc_state(::perception::object::IhcState* ihc_state);
  private:
  const ::perception::object::IhcState& _internal_ihc_state() const;
  ::perception::object::IhcState* _internal_mutable_ihc_state();
  public:
  void unsafe_arena_set_allocated_ihc_state(
      ::perception::object::IhcState* ihc_state);
  ::perception::object::IhcState* unsafe_arena_release_ihc_state();

  // .perception.object.BsdState bsd_state = 14;
  bool has_bsd_state() const;
  private:
  bool _internal_has_bsd_state() const;
  public:
  void clear_bsd_state();
  const ::perception::object::BsdState& bsd_state() const;
  ::perception::object::BsdState* release_bsd_state();
  ::perception::object::BsdState* mutable_bsd_state();
  void set_allocated_bsd_state(::perception::object::BsdState* bsd_state);
  private:
  const ::perception::object::BsdState& _internal_bsd_state() const;
  ::perception::object::BsdState* _internal_mutable_bsd_state();
  public:
  void unsafe_arena_set_allocated_bsd_state(
      ::perception::object::BsdState* bsd_state);
  ::perception::object::BsdState* unsafe_arena_release_bsd_state();

  // .perception.object.LcaState lca_state = 15;
  bool has_lca_state() const;
  private:
  bool _internal_has_lca_state() const;
  public:
  void clear_lca_state();
  const ::perception::object::LcaState& lca_state() const;
  ::perception::object::LcaState* release_lca_state();
  ::perception::object::LcaState* mutable_lca_state();
  void set_allocated_lca_state(::perception::object::LcaState* lca_state);
  private:
  const ::perception::object::LcaState& _internal_lca_state() const;
  ::perception::object::LcaState* _internal_mutable_lca_state();
  public:
  void unsafe_arena_set_allocated_lca_state(
      ::perception::object::LcaState* lca_state);
  ::perception::object::LcaState* unsafe_arena_release_lca_state();

  // .perception.common.Point2fList bsd_warning_zone = 21;
  bool has_bsd_warning_zone() const;
  private:
  bool _internal_has_bsd_warning_zone() const;
  public:
  void clear_bsd_warning_zone();
  const ::perception::common::Point2fList& bsd_warning_zone() const;
  ::perception::common::Point2fList* release_bsd_warning_zone();
  ::perception::common::Point2fList* mutable_bsd_warning_zone();
  void set_allocated_bsd_warning_zone(::perception::common::Point2fList* bsd_warning_zone);
  private:
  const ::perception::common::Point2fList& _internal_bsd_warning_zone() const;
  ::perception::common::Point2fList* _internal_mutable_bsd_warning_zone();
  public:
  void unsafe_arena_set_allocated_bsd_warning_zone(
      ::perception::common::Point2fList* bsd_warning_zone);
  ::perception::common::Point2fList* unsafe_arena_release_bsd_warning_zone();

  // int32 object_valid = 20;
  void clear_object_valid();
  ::PROTOBUF_NAMESPACE_ID::int32 object_valid() const;
  void set_object_valid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_object_valid() const;
  void _internal_set_object_valid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perception.object.Warning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perception::object::VehicleWarning* vehicle_warning_;
  ::perception::object::PedWarning* ped_warning_;
  ::perception::object::TsrWarning* tsr_warning_;
  ::perception::object::IhcSignal* ihc_signal_;
  ::perception::object::BsdWarning* bsd_warning_;
  ::perception::object::LcaWarning* lca_warning_;
  ::perception::object::VehicleState* vehicle_state_;
  ::perception::object::PedState* ped_state_;
  ::perception::object::TsrState* tsr_state_;
  ::perception::object::IhcState* ihc_state_;
  ::perception::object::BsdState* bsd_state_;
  ::perception::object::LcaState* lca_state_;
  ::perception::common::Point2fList* bsd_warning_zone_;
  ::PROTOBUF_NAMESPACE_ID::int32 object_valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_5fwarning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleWarning

// int32 vehicle_id = 1;
inline void VehicleWarning::clear_vehicle_id() {
  vehicle_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::_internal_vehicle_id() const {
  return vehicle_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::vehicle_id() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleWarning.vehicle_id)
  return _internal_vehicle_id();
}
inline void VehicleWarning::_internal_set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_id_ = value;
}
inline void VehicleWarning::set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleWarning.vehicle_id)
}

// float headway = 2;
inline void VehicleWarning::clear_headway() {
  headway_ = 0;
}
inline float VehicleWarning::_internal_headway() const {
  return headway_;
}
inline float VehicleWarning::headway() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleWarning.headway)
  return _internal_headway();
}
inline void VehicleWarning::_internal_set_headway(float value) {
  
  headway_ = value;
}
inline void VehicleWarning::set_headway(float value) {
  _internal_set_headway(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleWarning.headway)
}

// int32 warning_level = 3;
inline void VehicleWarning::clear_warning_level() {
  warning_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::_internal_warning_level() const {
  return warning_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::warning_level() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleWarning.warning_level)
  return _internal_warning_level();
}
inline void VehicleWarning::_internal_set_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  warning_level_ = value;
}
inline void VehicleWarning::set_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_warning_level(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleWarning.warning_level)
}

// int32 fcw = 4;
inline void VehicleWarning::clear_fcw() {
  fcw_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::_internal_fcw() const {
  return fcw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::fcw() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleWarning.fcw)
  return _internal_fcw();
}
inline void VehicleWarning::_internal_set_fcw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fcw_ = value;
}
inline void VehicleWarning::set_fcw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fcw(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleWarning.fcw)
}

// int32 ufcw = 5;
inline void VehicleWarning::clear_ufcw() {
  ufcw_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::_internal_ufcw() const {
  return ufcw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::ufcw() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleWarning.ufcw)
  return _internal_ufcw();
}
inline void VehicleWarning::_internal_set_ufcw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ufcw_ = value;
}
inline void VehicleWarning::set_ufcw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ufcw(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleWarning.ufcw)
}

// int32 headway_warning = 6;
inline void VehicleWarning::clear_headway_warning() {
  headway_warning_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::_internal_headway_warning() const {
  return headway_warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::headway_warning() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleWarning.headway_warning)
  return _internal_headway_warning();
}
inline void VehicleWarning::_internal_set_headway_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  headway_warning_ = value;
}
inline void VehicleWarning::set_headway_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_headway_warning(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleWarning.headway_warning)
}

// int32 vb_warning = 7;
inline void VehicleWarning::clear_vb_warning() {
  vb_warning_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::_internal_vb_warning() const {
  return vb_warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::vb_warning() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleWarning.vb_warning)
  return _internal_vb_warning();
}
inline void VehicleWarning::_internal_set_vb_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vb_warning_ = value;
}
inline void VehicleWarning::set_vb_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vb_warning(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleWarning.vb_warning)
}

// int32 sag_warning = 8;
inline void VehicleWarning::clear_sag_warning() {
  sag_warning_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::_internal_sag_warning() const {
  return sag_warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWarning::sag_warning() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleWarning.sag_warning)
  return _internal_sag_warning();
}
inline void VehicleWarning::_internal_set_sag_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sag_warning_ = value;
}
inline void VehicleWarning::set_sag_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sag_warning(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleWarning.sag_warning)
}

// -------------------------------------------------------------------

// VehicleState

// int32 fcw_state = 1;
inline void VehicleState::clear_fcw_state() {
  fcw_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::_internal_fcw_state() const {
  return fcw_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::fcw_state() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleState.fcw_state)
  return _internal_fcw_state();
}
inline void VehicleState::_internal_set_fcw_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fcw_state_ = value;
}
inline void VehicleState::set_fcw_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fcw_state(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleState.fcw_state)
}

// int32 hmw_state = 2;
inline void VehicleState::clear_hmw_state() {
  hmw_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::_internal_hmw_state() const {
  return hmw_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::hmw_state() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleState.hmw_state)
  return _internal_hmw_state();
}
inline void VehicleState::_internal_set_hmw_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hmw_state_ = value;
}
inline void VehicleState::set_hmw_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hmw_state(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleState.hmw_state)
}

// int32 fcw_level = 10;
inline void VehicleState::clear_fcw_level() {
  fcw_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::_internal_fcw_level() const {
  return fcw_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::fcw_level() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleState.fcw_level)
  return _internal_fcw_level();
}
inline void VehicleState::_internal_set_fcw_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fcw_level_ = value;
}
inline void VehicleState::set_fcw_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fcw_level(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleState.fcw_level)
}

// int32 ufcw_level = 11;
inline void VehicleState::clear_ufcw_level() {
  ufcw_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::_internal_ufcw_level() const {
  return ufcw_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::ufcw_level() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleState.ufcw_level)
  return _internal_ufcw_level();
}
inline void VehicleState::_internal_set_ufcw_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ufcw_level_ = value;
}
inline void VehicleState::set_ufcw_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ufcw_level(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleState.ufcw_level)
}

// int32 hmw_level = 12;
inline void VehicleState::clear_hmw_level() {
  hmw_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::_internal_hmw_level() const {
  return hmw_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::hmw_level() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleState.hmw_level)
  return _internal_hmw_level();
}
inline void VehicleState::_internal_set_hmw_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hmw_level_ = value;
}
inline void VehicleState::set_hmw_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hmw_level(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleState.hmw_level)
}

// int32 vb_level = 13;
inline void VehicleState::clear_vb_level() {
  vb_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::_internal_vb_level() const {
  return vb_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::vb_level() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleState.vb_level)
  return _internal_vb_level();
}
inline void VehicleState::_internal_set_vb_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vb_level_ = value;
}
inline void VehicleState::set_vb_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vb_level(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleState.vb_level)
}

// int32 sag_level = 14;
inline void VehicleState::clear_sag_level() {
  sag_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::_internal_sag_level() const {
  return sag_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleState::sag_level() const {
  // @@protoc_insertion_point(field_get:perception.object.VehicleState.sag_level)
  return _internal_sag_level();
}
inline void VehicleState::_internal_set_sag_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sag_level_ = value;
}
inline void VehicleState::set_sag_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sag_level(value);
  // @@protoc_insertion_point(field_set:perception.object.VehicleState.sag_level)
}

// -------------------------------------------------------------------

// PedWarning

// bool ped_on = 1;
inline void PedWarning::clear_ped_on() {
  ped_on_ = false;
}
inline bool PedWarning::_internal_ped_on() const {
  return ped_on_;
}
inline bool PedWarning::ped_on() const {
  // @@protoc_insertion_point(field_get:perception.object.PedWarning.ped_on)
  return _internal_ped_on();
}
inline void PedWarning::_internal_set_ped_on(bool value) {
  
  ped_on_ = value;
}
inline void PedWarning::set_ped_on(bool value) {
  _internal_set_ped_on(value);
  // @@protoc_insertion_point(field_set:perception.object.PedWarning.ped_on)
}

// bool pcw_on = 2;
inline void PedWarning::clear_pcw_on() {
  pcw_on_ = false;
}
inline bool PedWarning::_internal_pcw_on() const {
  return pcw_on_;
}
inline bool PedWarning::pcw_on() const {
  // @@protoc_insertion_point(field_get:perception.object.PedWarning.pcw_on)
  return _internal_pcw_on();
}
inline void PedWarning::_internal_set_pcw_on(bool value) {
  
  pcw_on_ = value;
}
inline void PedWarning::set_pcw_on(bool value) {
  _internal_set_pcw_on(value);
  // @@protoc_insertion_point(field_set:perception.object.PedWarning.pcw_on)
}

// int32 pcw_warning_level = 3;
inline void PedWarning::clear_pcw_warning_level() {
  pcw_warning_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PedWarning::_internal_pcw_warning_level() const {
  return pcw_warning_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PedWarning::pcw_warning_level() const {
  // @@protoc_insertion_point(field_get:perception.object.PedWarning.pcw_warning_level)
  return _internal_pcw_warning_level();
}
inline void PedWarning::_internal_set_pcw_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pcw_warning_level_ = value;
}
inline void PedWarning::set_pcw_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pcw_warning_level(value);
  // @@protoc_insertion_point(field_set:perception.object.PedWarning.pcw_warning_level)
}

// -------------------------------------------------------------------

// PedState

// int32 pcw_state = 1;
inline void PedState::clear_pcw_state() {
  pcw_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PedState::_internal_pcw_state() const {
  return pcw_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PedState::pcw_state() const {
  // @@protoc_insertion_point(field_get:perception.object.PedState.pcw_state)
  return _internal_pcw_state();
}
inline void PedState::_internal_set_pcw_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pcw_state_ = value;
}
inline void PedState::set_pcw_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pcw_state(value);
  // @@protoc_insertion_point(field_set:perception.object.PedState.pcw_state)
}

// int32 pcw_level = 10;
inline void PedState::clear_pcw_level() {
  pcw_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PedState::_internal_pcw_level() const {
  return pcw_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PedState::pcw_level() const {
  // @@protoc_insertion_point(field_get:perception.object.PedState.pcw_level)
  return _internal_pcw_level();
}
inline void PedState::_internal_set_pcw_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pcw_level_ = value;
}
inline void PedState::set_pcw_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pcw_level(value);
  // @@protoc_insertion_point(field_set:perception.object.PedState.pcw_level)
}

// -------------------------------------------------------------------

// TsrWarning_TrafficLightSignal

// bool right_turn_on_red = 1;
inline void TsrWarning_TrafficLightSignal::clear_right_turn_on_red() {
  right_turn_on_red_ = false;
}
inline bool TsrWarning_TrafficLightSignal::_internal_right_turn_on_red() const {
  return right_turn_on_red_;
}
inline bool TsrWarning_TrafficLightSignal::right_turn_on_red() const {
  // @@protoc_insertion_point(field_get:perception.object.TsrWarning.TrafficLightSignal.right_turn_on_red)
  return _internal_right_turn_on_red();
}
inline void TsrWarning_TrafficLightSignal::_internal_set_right_turn_on_red(bool value) {
  
  right_turn_on_red_ = value;
}
inline void TsrWarning_TrafficLightSignal::set_right_turn_on_red(bool value) {
  _internal_set_right_turn_on_red(value);
  // @@protoc_insertion_point(field_set:perception.object.TsrWarning.TrafficLightSignal.right_turn_on_red)
}

// -------------------------------------------------------------------

// TsrWarning

// float height_limit = 1;
inline void TsrWarning::clear_height_limit() {
  height_limit_ = 0;
}
inline float TsrWarning::_internal_height_limit() const {
  return height_limit_;
}
inline float TsrWarning::height_limit() const {
  // @@protoc_insertion_point(field_get:perception.object.TsrWarning.height_limit)
  return _internal_height_limit();
}
inline void TsrWarning::_internal_set_height_limit(float value) {
  
  height_limit_ = value;
}
inline void TsrWarning::set_height_limit(float value) {
  _internal_set_height_limit(value);
  // @@protoc_insertion_point(field_set:perception.object.TsrWarning.height_limit)
}

// float weight_limit = 2;
inline void TsrWarning::clear_weight_limit() {
  weight_limit_ = 0;
}
inline float TsrWarning::_internal_weight_limit() const {
  return weight_limit_;
}
inline float TsrWarning::weight_limit() const {
  // @@protoc_insertion_point(field_get:perception.object.TsrWarning.weight_limit)
  return _internal_weight_limit();
}
inline void TsrWarning::_internal_set_weight_limit(float value) {
  
  weight_limit_ = value;
}
inline void TsrWarning::set_weight_limit(float value) {
  _internal_set_weight_limit(value);
  // @@protoc_insertion_point(field_set:perception.object.TsrWarning.weight_limit)
}

// int32 speed_limit = 3;
inline void TsrWarning::clear_speed_limit() {
  speed_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TsrWarning::_internal_speed_limit() const {
  return speed_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TsrWarning::speed_limit() const {
  // @@protoc_insertion_point(field_get:perception.object.TsrWarning.speed_limit)
  return _internal_speed_limit();
}
inline void TsrWarning::_internal_set_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_limit_ = value;
}
inline void TsrWarning::set_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed_limit(value);
  // @@protoc_insertion_point(field_set:perception.object.TsrWarning.speed_limit)
}

// int32 tsr_warning_level = 4;
inline void TsrWarning::clear_tsr_warning_level() {
  tsr_warning_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TsrWarning::_internal_tsr_warning_level() const {
  return tsr_warning_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TsrWarning::tsr_warning_level() const {
  // @@protoc_insertion_point(field_get:perception.object.TsrWarning.tsr_warning_level)
  return _internal_tsr_warning_level();
}
inline void TsrWarning::_internal_set_tsr_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tsr_warning_level_ = value;
}
inline void TsrWarning::set_tsr_warning_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tsr_warning_level(value);
  // @@protoc_insertion_point(field_set:perception.object.TsrWarning.tsr_warning_level)
}

// int32 no_overtaking_status = 5;
inline void TsrWarning::clear_no_overtaking_status() {
  no_overtaking_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TsrWarning::_internal_no_overtaking_status() const {
  return no_overtaking_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TsrWarning::no_overtaking_status() const {
  // @@protoc_insertion_point(field_get:perception.object.TsrWarning.no_overtaking_status)
  return _internal_no_overtaking_status();
}
inline void TsrWarning::_internal_set_no_overtaking_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  no_overtaking_status_ = value;
}
inline void TsrWarning::set_no_overtaking_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_no_overtaking_status(value);
  // @@protoc_insertion_point(field_set:perception.object.TsrWarning.no_overtaking_status)
}

// .perception.object.TsrWarning.TrafficLightSignal light_signal = 6;
inline bool TsrWarning::_internal_has_light_signal() const {
  return this != internal_default_instance() && light_signal_ != nullptr;
}
inline bool TsrWarning::has_light_signal() const {
  return _internal_has_light_signal();
}
inline void TsrWarning::clear_light_signal() {
  if (GetArena() == nullptr && light_signal_ != nullptr) {
    delete light_signal_;
  }
  light_signal_ = nullptr;
}
inline const ::perception::object::TsrWarning_TrafficLightSignal& TsrWarning::_internal_light_signal() const {
  const ::perception::object::TsrWarning_TrafficLightSignal* p = light_signal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::object::TsrWarning_TrafficLightSignal*>(
      &::perception::object::_TsrWarning_TrafficLightSignal_default_instance_);
}
inline const ::perception::object::TsrWarning_TrafficLightSignal& TsrWarning::light_signal() const {
  // @@protoc_insertion_point(field_get:perception.object.TsrWarning.light_signal)
  return _internal_light_signal();
}
inline void TsrWarning::unsafe_arena_set_allocated_light_signal(
    ::perception::object::TsrWarning_TrafficLightSignal* light_signal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(light_signal_);
  }
  light_signal_ = light_signal;
  if (light_signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.TsrWarning.light_signal)
}
inline ::perception::object::TsrWarning_TrafficLightSignal* TsrWarning::release_light_signal() {
  auto temp = unsafe_arena_release_light_signal();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::object::TsrWarning_TrafficLightSignal* TsrWarning::unsafe_arena_release_light_signal() {
  // @@protoc_insertion_point(field_release:perception.object.TsrWarning.light_signal)
  
  ::perception::object::TsrWarning_TrafficLightSignal* temp = light_signal_;
  light_signal_ = nullptr;
  return temp;
}
inline ::perception::object::TsrWarning_TrafficLightSignal* TsrWarning::_internal_mutable_light_signal() {
  
  if (light_signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::object::TsrWarning_TrafficLightSignal>(GetArena());
    light_signal_ = p;
  }
  return light_signal_;
}
inline ::perception::object::TsrWarning_TrafficLightSignal* TsrWarning::mutable_light_signal() {
  // @@protoc_insertion_point(field_mutable:perception.object.TsrWarning.light_signal)
  return _internal_mutable_light_signal();
}
inline void TsrWarning::set_allocated_light_signal(::perception::object::TsrWarning_TrafficLightSignal* light_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete light_signal_;
  }
  if (light_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(light_signal);
    if (message_arena != submessage_arena) {
      light_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, light_signal, submessage_arena);
    }
    
  } else {
    
  }
  light_signal_ = light_signal;
  // @@protoc_insertion_point(field_set_allocated:perception.object.TsrWarning.light_signal)
}

// int32 removal_speed_limit = 7;
inline void TsrWarning::clear_removal_speed_limit() {
  removal_speed_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TsrWarning::_internal_removal_speed_limit() const {
  return removal_speed_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TsrWarning::removal_speed_limit() const {
  // @@protoc_insertion_point(field_get:perception.object.TsrWarning.removal_speed_limit)
  return _internal_removal_speed_limit();
}
inline void TsrWarning::_internal_set_removal_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  removal_speed_limit_ = value;
}
inline void TsrWarning::set_removal_speed_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_removal_speed_limit(value);
  // @@protoc_insertion_point(field_set:perception.object.TsrWarning.removal_speed_limit)
}

// float speed_limit_distance = 8;
inline void TsrWarning::clear_speed_limit_distance() {
  speed_limit_distance_ = 0;
}
inline float TsrWarning::_internal_speed_limit_distance() const {
  return speed_limit_distance_;
}
inline float TsrWarning::speed_limit_distance() const {
  // @@protoc_insertion_point(field_get:perception.object.TsrWarning.speed_limit_distance)
  return _internal_speed_limit_distance();
}
inline void TsrWarning::_internal_set_speed_limit_distance(float value) {
  
  speed_limit_distance_ = value;
}
inline void TsrWarning::set_speed_limit_distance(float value) {
  _internal_set_speed_limit_distance(value);
  // @@protoc_insertion_point(field_set:perception.object.TsrWarning.speed_limit_distance)
}

// -------------------------------------------------------------------

// TsrState

// int32 tsr_state = 1;
inline void TsrState::clear_tsr_state() {
  tsr_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TsrState::_internal_tsr_state() const {
  return tsr_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TsrState::tsr_state() const {
  // @@protoc_insertion_point(field_get:perception.object.TsrState.tsr_state)
  return _internal_tsr_state();
}
inline void TsrState::_internal_set_tsr_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tsr_state_ = value;
}
inline void TsrState::set_tsr_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tsr_state(value);
  // @@protoc_insertion_point(field_set:perception.object.TsrState.tsr_state)
}

// int32 tsr_level = 10;
inline void TsrState::clear_tsr_level() {
  tsr_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TsrState::_internal_tsr_level() const {
  return tsr_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TsrState::tsr_level() const {
  // @@protoc_insertion_point(field_get:perception.object.TsrState.tsr_level)
  return _internal_tsr_level();
}
inline void TsrState::_internal_set_tsr_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tsr_level_ = value;
}
inline void TsrState::set_tsr_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tsr_level(value);
  // @@protoc_insertion_point(field_set:perception.object.TsrState.tsr_level)
}

// -------------------------------------------------------------------

// IhcSignal

// .perception.object.IhcSignal.IhcSignalType control_signal = 1;
inline void IhcSignal::clear_control_signal() {
  control_signal_ = 0;
}
inline ::perception::object::IhcSignal_IhcSignalType IhcSignal::_internal_control_signal() const {
  return static_cast< ::perception::object::IhcSignal_IhcSignalType >(control_signal_);
}
inline ::perception::object::IhcSignal_IhcSignalType IhcSignal::control_signal() const {
  // @@protoc_insertion_point(field_get:perception.object.IhcSignal.control_signal)
  return _internal_control_signal();
}
inline void IhcSignal::_internal_set_control_signal(::perception::object::IhcSignal_IhcSignalType value) {
  
  control_signal_ = value;
}
inline void IhcSignal::set_control_signal(::perception::object::IhcSignal_IhcSignalType value) {
  _internal_set_control_signal(value);
  // @@protoc_insertion_point(field_set:perception.object.IhcSignal.control_signal)
}

// -------------------------------------------------------------------

// IhcState

// int32 ihc_state = 1;
inline void IhcState::clear_ihc_state() {
  ihc_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IhcState::_internal_ihc_state() const {
  return ihc_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IhcState::ihc_state() const {
  // @@protoc_insertion_point(field_get:perception.object.IhcState.ihc_state)
  return _internal_ihc_state();
}
inline void IhcState::_internal_set_ihc_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ihc_state_ = value;
}
inline void IhcState::set_ihc_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ihc_state(value);
  // @@protoc_insertion_point(field_set:perception.object.IhcState.ihc_state)
}

// -------------------------------------------------------------------

// BsdWarning

// int32 left_warning = 1;
inline void BsdWarning::clear_left_warning() {
  left_warning_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BsdWarning::_internal_left_warning() const {
  return left_warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BsdWarning::left_warning() const {
  // @@protoc_insertion_point(field_get:perception.object.BsdWarning.left_warning)
  return _internal_left_warning();
}
inline void BsdWarning::_internal_set_left_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  left_warning_ = value;
}
inline void BsdWarning::set_left_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left_warning(value);
  // @@protoc_insertion_point(field_set:perception.object.BsdWarning.left_warning)
}

// int32 right_warning = 2;
inline void BsdWarning::clear_right_warning() {
  right_warning_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BsdWarning::_internal_right_warning() const {
  return right_warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BsdWarning::right_warning() const {
  // @@protoc_insertion_point(field_get:perception.object.BsdWarning.right_warning)
  return _internal_right_warning();
}
inline void BsdWarning::_internal_set_right_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  right_warning_ = value;
}
inline void BsdWarning::set_right_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right_warning(value);
  // @@protoc_insertion_point(field_set:perception.object.BsdWarning.right_warning)
}

// int32 front_warning = 3;
inline void BsdWarning::clear_front_warning() {
  front_warning_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BsdWarning::_internal_front_warning() const {
  return front_warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BsdWarning::front_warning() const {
  // @@protoc_insertion_point(field_get:perception.object.BsdWarning.front_warning)
  return _internal_front_warning();
}
inline void BsdWarning::_internal_set_front_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  front_warning_ = value;
}
inline void BsdWarning::set_front_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_front_warning(value);
  // @@protoc_insertion_point(field_set:perception.object.BsdWarning.front_warning)
}

// -------------------------------------------------------------------

// BsdState

// int32 bsd_state = 1;
inline void BsdState::clear_bsd_state() {
  bsd_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BsdState::_internal_bsd_state() const {
  return bsd_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BsdState::bsd_state() const {
  // @@protoc_insertion_point(field_get:perception.object.BsdState.bsd_state)
  return _internal_bsd_state();
}
inline void BsdState::_internal_set_bsd_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bsd_state_ = value;
}
inline void BsdState::set_bsd_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bsd_state(value);
  // @@protoc_insertion_point(field_set:perception.object.BsdState.bsd_state)
}

// -------------------------------------------------------------------

// LcaWarning

// int32 left_warning = 1;
inline void LcaWarning::clear_left_warning() {
  left_warning_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LcaWarning::_internal_left_warning() const {
  return left_warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LcaWarning::left_warning() const {
  // @@protoc_insertion_point(field_get:perception.object.LcaWarning.left_warning)
  return _internal_left_warning();
}
inline void LcaWarning::_internal_set_left_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  left_warning_ = value;
}
inline void LcaWarning::set_left_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left_warning(value);
  // @@protoc_insertion_point(field_set:perception.object.LcaWarning.left_warning)
}

// int32 right_warning = 2;
inline void LcaWarning::clear_right_warning() {
  right_warning_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LcaWarning::_internal_right_warning() const {
  return right_warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LcaWarning::right_warning() const {
  // @@protoc_insertion_point(field_get:perception.object.LcaWarning.right_warning)
  return _internal_right_warning();
}
inline void LcaWarning::_internal_set_right_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  right_warning_ = value;
}
inline void LcaWarning::set_right_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right_warning(value);
  // @@protoc_insertion_point(field_set:perception.object.LcaWarning.right_warning)
}

// -------------------------------------------------------------------

// LcaState

// int32 lca_state = 1;
inline void LcaState::clear_lca_state() {
  lca_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LcaState::_internal_lca_state() const {
  return lca_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LcaState::lca_state() const {
  // @@protoc_insertion_point(field_get:perception.object.LcaState.lca_state)
  return _internal_lca_state();
}
inline void LcaState::_internal_set_lca_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lca_state_ = value;
}
inline void LcaState::set_lca_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lca_state(value);
  // @@protoc_insertion_point(field_set:perception.object.LcaState.lca_state)
}

// -------------------------------------------------------------------

// Warning

// .perception.object.VehicleWarning vehicle_warning = 1;
inline bool Warning::_internal_has_vehicle_warning() const {
  return this != internal_default_instance() && vehicle_warning_ != nullptr;
}
inline bool Warning::has_vehicle_warning() const {
  return _internal_has_vehicle_warning();
}
inline void Warning::clear_vehicle_warning() {
  if (GetArena() == nullptr && vehicle_warning_ != nullptr) {
    delete vehicle_warning_;
  }
  vehicle_warning_ = nullptr;
}
inline const ::perception::object::VehicleWarning& Warning::_internal_vehicle_warning() const {
  const ::perception::object::VehicleWarning* p = vehicle_warning_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::object::VehicleWarning*>(
      &::perception::object::_VehicleWarning_default_instance_);
}
inline const ::perception::object::VehicleWarning& Warning::vehicle_warning() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.vehicle_warning)
  return _internal_vehicle_warning();
}
inline void Warning::unsafe_arena_set_allocated_vehicle_warning(
    ::perception::object::VehicleWarning* vehicle_warning) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_warning_);
  }
  vehicle_warning_ = vehicle_warning;
  if (vehicle_warning) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.Warning.vehicle_warning)
}
inline ::perception::object::VehicleWarning* Warning::release_vehicle_warning() {
  auto temp = unsafe_arena_release_vehicle_warning();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::object::VehicleWarning* Warning::unsafe_arena_release_vehicle_warning() {
  // @@protoc_insertion_point(field_release:perception.object.Warning.vehicle_warning)
  
  ::perception::object::VehicleWarning* temp = vehicle_warning_;
  vehicle_warning_ = nullptr;
  return temp;
}
inline ::perception::object::VehicleWarning* Warning::_internal_mutable_vehicle_warning() {
  
  if (vehicle_warning_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::object::VehicleWarning>(GetArena());
    vehicle_warning_ = p;
  }
  return vehicle_warning_;
}
inline ::perception::object::VehicleWarning* Warning::mutable_vehicle_warning() {
  // @@protoc_insertion_point(field_mutable:perception.object.Warning.vehicle_warning)
  return _internal_mutable_vehicle_warning();
}
inline void Warning::set_allocated_vehicle_warning(::perception::object::VehicleWarning* vehicle_warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vehicle_warning_;
  }
  if (vehicle_warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vehicle_warning);
    if (message_arena != submessage_arena) {
      vehicle_warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_warning, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_warning_ = vehicle_warning;
  // @@protoc_insertion_point(field_set_allocated:perception.object.Warning.vehicle_warning)
}

// .perception.object.PedWarning ped_warning = 2;
inline bool Warning::_internal_has_ped_warning() const {
  return this != internal_default_instance() && ped_warning_ != nullptr;
}
inline bool Warning::has_ped_warning() const {
  return _internal_has_ped_warning();
}
inline void Warning::clear_ped_warning() {
  if (GetArena() == nullptr && ped_warning_ != nullptr) {
    delete ped_warning_;
  }
  ped_warning_ = nullptr;
}
inline const ::perception::object::PedWarning& Warning::_internal_ped_warning() const {
  const ::perception::object::PedWarning* p = ped_warning_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::object::PedWarning*>(
      &::perception::object::_PedWarning_default_instance_);
}
inline const ::perception::object::PedWarning& Warning::ped_warning() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.ped_warning)
  return _internal_ped_warning();
}
inline void Warning::unsafe_arena_set_allocated_ped_warning(
    ::perception::object::PedWarning* ped_warning) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ped_warning_);
  }
  ped_warning_ = ped_warning;
  if (ped_warning) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.Warning.ped_warning)
}
inline ::perception::object::PedWarning* Warning::release_ped_warning() {
  auto temp = unsafe_arena_release_ped_warning();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::object::PedWarning* Warning::unsafe_arena_release_ped_warning() {
  // @@protoc_insertion_point(field_release:perception.object.Warning.ped_warning)
  
  ::perception::object::PedWarning* temp = ped_warning_;
  ped_warning_ = nullptr;
  return temp;
}
inline ::perception::object::PedWarning* Warning::_internal_mutable_ped_warning() {
  
  if (ped_warning_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::object::PedWarning>(GetArena());
    ped_warning_ = p;
  }
  return ped_warning_;
}
inline ::perception::object::PedWarning* Warning::mutable_ped_warning() {
  // @@protoc_insertion_point(field_mutable:perception.object.Warning.ped_warning)
  return _internal_mutable_ped_warning();
}
inline void Warning::set_allocated_ped_warning(::perception::object::PedWarning* ped_warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ped_warning_;
  }
  if (ped_warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ped_warning);
    if (message_arena != submessage_arena) {
      ped_warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ped_warning, submessage_arena);
    }
    
  } else {
    
  }
  ped_warning_ = ped_warning;
  // @@protoc_insertion_point(field_set_allocated:perception.object.Warning.ped_warning)
}

// .perception.object.TsrWarning tsr_warning = 3;
inline bool Warning::_internal_has_tsr_warning() const {
  return this != internal_default_instance() && tsr_warning_ != nullptr;
}
inline bool Warning::has_tsr_warning() const {
  return _internal_has_tsr_warning();
}
inline void Warning::clear_tsr_warning() {
  if (GetArena() == nullptr && tsr_warning_ != nullptr) {
    delete tsr_warning_;
  }
  tsr_warning_ = nullptr;
}
inline const ::perception::object::TsrWarning& Warning::_internal_tsr_warning() const {
  const ::perception::object::TsrWarning* p = tsr_warning_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::object::TsrWarning*>(
      &::perception::object::_TsrWarning_default_instance_);
}
inline const ::perception::object::TsrWarning& Warning::tsr_warning() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.tsr_warning)
  return _internal_tsr_warning();
}
inline void Warning::unsafe_arena_set_allocated_tsr_warning(
    ::perception::object::TsrWarning* tsr_warning) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsr_warning_);
  }
  tsr_warning_ = tsr_warning;
  if (tsr_warning) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.Warning.tsr_warning)
}
inline ::perception::object::TsrWarning* Warning::release_tsr_warning() {
  auto temp = unsafe_arena_release_tsr_warning();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::object::TsrWarning* Warning::unsafe_arena_release_tsr_warning() {
  // @@protoc_insertion_point(field_release:perception.object.Warning.tsr_warning)
  
  ::perception::object::TsrWarning* temp = tsr_warning_;
  tsr_warning_ = nullptr;
  return temp;
}
inline ::perception::object::TsrWarning* Warning::_internal_mutable_tsr_warning() {
  
  if (tsr_warning_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::object::TsrWarning>(GetArena());
    tsr_warning_ = p;
  }
  return tsr_warning_;
}
inline ::perception::object::TsrWarning* Warning::mutable_tsr_warning() {
  // @@protoc_insertion_point(field_mutable:perception.object.Warning.tsr_warning)
  return _internal_mutable_tsr_warning();
}
inline void Warning::set_allocated_tsr_warning(::perception::object::TsrWarning* tsr_warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tsr_warning_;
  }
  if (tsr_warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tsr_warning);
    if (message_arena != submessage_arena) {
      tsr_warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsr_warning, submessage_arena);
    }
    
  } else {
    
  }
  tsr_warning_ = tsr_warning;
  // @@protoc_insertion_point(field_set_allocated:perception.object.Warning.tsr_warning)
}

// .perception.object.IhcSignal ihc_signal = 4;
inline bool Warning::_internal_has_ihc_signal() const {
  return this != internal_default_instance() && ihc_signal_ != nullptr;
}
inline bool Warning::has_ihc_signal() const {
  return _internal_has_ihc_signal();
}
inline void Warning::clear_ihc_signal() {
  if (GetArena() == nullptr && ihc_signal_ != nullptr) {
    delete ihc_signal_;
  }
  ihc_signal_ = nullptr;
}
inline const ::perception::object::IhcSignal& Warning::_internal_ihc_signal() const {
  const ::perception::object::IhcSignal* p = ihc_signal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::object::IhcSignal*>(
      &::perception::object::_IhcSignal_default_instance_);
}
inline const ::perception::object::IhcSignal& Warning::ihc_signal() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.ihc_signal)
  return _internal_ihc_signal();
}
inline void Warning::unsafe_arena_set_allocated_ihc_signal(
    ::perception::object::IhcSignal* ihc_signal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ihc_signal_);
  }
  ihc_signal_ = ihc_signal;
  if (ihc_signal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.Warning.ihc_signal)
}
inline ::perception::object::IhcSignal* Warning::release_ihc_signal() {
  auto temp = unsafe_arena_release_ihc_signal();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::object::IhcSignal* Warning::unsafe_arena_release_ihc_signal() {
  // @@protoc_insertion_point(field_release:perception.object.Warning.ihc_signal)
  
  ::perception::object::IhcSignal* temp = ihc_signal_;
  ihc_signal_ = nullptr;
  return temp;
}
inline ::perception::object::IhcSignal* Warning::_internal_mutable_ihc_signal() {
  
  if (ihc_signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::object::IhcSignal>(GetArena());
    ihc_signal_ = p;
  }
  return ihc_signal_;
}
inline ::perception::object::IhcSignal* Warning::mutable_ihc_signal() {
  // @@protoc_insertion_point(field_mutable:perception.object.Warning.ihc_signal)
  return _internal_mutable_ihc_signal();
}
inline void Warning::set_allocated_ihc_signal(::perception::object::IhcSignal* ihc_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ihc_signal_;
  }
  if (ihc_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ihc_signal);
    if (message_arena != submessage_arena) {
      ihc_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ihc_signal, submessage_arena);
    }
    
  } else {
    
  }
  ihc_signal_ = ihc_signal;
  // @@protoc_insertion_point(field_set_allocated:perception.object.Warning.ihc_signal)
}

// .perception.object.BsdWarning bsd_warning = 5;
inline bool Warning::_internal_has_bsd_warning() const {
  return this != internal_default_instance() && bsd_warning_ != nullptr;
}
inline bool Warning::has_bsd_warning() const {
  return _internal_has_bsd_warning();
}
inline void Warning::clear_bsd_warning() {
  if (GetArena() == nullptr && bsd_warning_ != nullptr) {
    delete bsd_warning_;
  }
  bsd_warning_ = nullptr;
}
inline const ::perception::object::BsdWarning& Warning::_internal_bsd_warning() const {
  const ::perception::object::BsdWarning* p = bsd_warning_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::object::BsdWarning*>(
      &::perception::object::_BsdWarning_default_instance_);
}
inline const ::perception::object::BsdWarning& Warning::bsd_warning() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.bsd_warning)
  return _internal_bsd_warning();
}
inline void Warning::unsafe_arena_set_allocated_bsd_warning(
    ::perception::object::BsdWarning* bsd_warning) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bsd_warning_);
  }
  bsd_warning_ = bsd_warning;
  if (bsd_warning) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.Warning.bsd_warning)
}
inline ::perception::object::BsdWarning* Warning::release_bsd_warning() {
  auto temp = unsafe_arena_release_bsd_warning();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::object::BsdWarning* Warning::unsafe_arena_release_bsd_warning() {
  // @@protoc_insertion_point(field_release:perception.object.Warning.bsd_warning)
  
  ::perception::object::BsdWarning* temp = bsd_warning_;
  bsd_warning_ = nullptr;
  return temp;
}
inline ::perception::object::BsdWarning* Warning::_internal_mutable_bsd_warning() {
  
  if (bsd_warning_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::object::BsdWarning>(GetArena());
    bsd_warning_ = p;
  }
  return bsd_warning_;
}
inline ::perception::object::BsdWarning* Warning::mutable_bsd_warning() {
  // @@protoc_insertion_point(field_mutable:perception.object.Warning.bsd_warning)
  return _internal_mutable_bsd_warning();
}
inline void Warning::set_allocated_bsd_warning(::perception::object::BsdWarning* bsd_warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bsd_warning_;
  }
  if (bsd_warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bsd_warning);
    if (message_arena != submessage_arena) {
      bsd_warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bsd_warning, submessage_arena);
    }
    
  } else {
    
  }
  bsd_warning_ = bsd_warning;
  // @@protoc_insertion_point(field_set_allocated:perception.object.Warning.bsd_warning)
}

// .perception.object.LcaWarning lca_warning = 6;
inline bool Warning::_internal_has_lca_warning() const {
  return this != internal_default_instance() && lca_warning_ != nullptr;
}
inline bool Warning::has_lca_warning() const {
  return _internal_has_lca_warning();
}
inline void Warning::clear_lca_warning() {
  if (GetArena() == nullptr && lca_warning_ != nullptr) {
    delete lca_warning_;
  }
  lca_warning_ = nullptr;
}
inline const ::perception::object::LcaWarning& Warning::_internal_lca_warning() const {
  const ::perception::object::LcaWarning* p = lca_warning_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::object::LcaWarning*>(
      &::perception::object::_LcaWarning_default_instance_);
}
inline const ::perception::object::LcaWarning& Warning::lca_warning() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.lca_warning)
  return _internal_lca_warning();
}
inline void Warning::unsafe_arena_set_allocated_lca_warning(
    ::perception::object::LcaWarning* lca_warning) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lca_warning_);
  }
  lca_warning_ = lca_warning;
  if (lca_warning) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.Warning.lca_warning)
}
inline ::perception::object::LcaWarning* Warning::release_lca_warning() {
  auto temp = unsafe_arena_release_lca_warning();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::object::LcaWarning* Warning::unsafe_arena_release_lca_warning() {
  // @@protoc_insertion_point(field_release:perception.object.Warning.lca_warning)
  
  ::perception::object::LcaWarning* temp = lca_warning_;
  lca_warning_ = nullptr;
  return temp;
}
inline ::perception::object::LcaWarning* Warning::_internal_mutable_lca_warning() {
  
  if (lca_warning_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::object::LcaWarning>(GetArena());
    lca_warning_ = p;
  }
  return lca_warning_;
}
inline ::perception::object::LcaWarning* Warning::mutable_lca_warning() {
  // @@protoc_insertion_point(field_mutable:perception.object.Warning.lca_warning)
  return _internal_mutable_lca_warning();
}
inline void Warning::set_allocated_lca_warning(::perception::object::LcaWarning* lca_warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lca_warning_;
  }
  if (lca_warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lca_warning);
    if (message_arena != submessage_arena) {
      lca_warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lca_warning, submessage_arena);
    }
    
  } else {
    
  }
  lca_warning_ = lca_warning;
  // @@protoc_insertion_point(field_set_allocated:perception.object.Warning.lca_warning)
}

// .perception.object.VehicleState vehicle_state = 10;
inline bool Warning::_internal_has_vehicle_state() const {
  return this != internal_default_instance() && vehicle_state_ != nullptr;
}
inline bool Warning::has_vehicle_state() const {
  return _internal_has_vehicle_state();
}
inline void Warning::clear_vehicle_state() {
  if (GetArena() == nullptr && vehicle_state_ != nullptr) {
    delete vehicle_state_;
  }
  vehicle_state_ = nullptr;
}
inline const ::perception::object::VehicleState& Warning::_internal_vehicle_state() const {
  const ::perception::object::VehicleState* p = vehicle_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::object::VehicleState*>(
      &::perception::object::_VehicleState_default_instance_);
}
inline const ::perception::object::VehicleState& Warning::vehicle_state() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.vehicle_state)
  return _internal_vehicle_state();
}
inline void Warning::unsafe_arena_set_allocated_vehicle_state(
    ::perception::object::VehicleState* vehicle_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_state_);
  }
  vehicle_state_ = vehicle_state;
  if (vehicle_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.Warning.vehicle_state)
}
inline ::perception::object::VehicleState* Warning::release_vehicle_state() {
  auto temp = unsafe_arena_release_vehicle_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::object::VehicleState* Warning::unsafe_arena_release_vehicle_state() {
  // @@protoc_insertion_point(field_release:perception.object.Warning.vehicle_state)
  
  ::perception::object::VehicleState* temp = vehicle_state_;
  vehicle_state_ = nullptr;
  return temp;
}
inline ::perception::object::VehicleState* Warning::_internal_mutable_vehicle_state() {
  
  if (vehicle_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::object::VehicleState>(GetArena());
    vehicle_state_ = p;
  }
  return vehicle_state_;
}
inline ::perception::object::VehicleState* Warning::mutable_vehicle_state() {
  // @@protoc_insertion_point(field_mutable:perception.object.Warning.vehicle_state)
  return _internal_mutable_vehicle_state();
}
inline void Warning::set_allocated_vehicle_state(::perception::object::VehicleState* vehicle_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vehicle_state_;
  }
  if (vehicle_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vehicle_state);
    if (message_arena != submessage_arena) {
      vehicle_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_state, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_state_ = vehicle_state;
  // @@protoc_insertion_point(field_set_allocated:perception.object.Warning.vehicle_state)
}

// .perception.object.PedState ped_state = 11;
inline bool Warning::_internal_has_ped_state() const {
  return this != internal_default_instance() && ped_state_ != nullptr;
}
inline bool Warning::has_ped_state() const {
  return _internal_has_ped_state();
}
inline void Warning::clear_ped_state() {
  if (GetArena() == nullptr && ped_state_ != nullptr) {
    delete ped_state_;
  }
  ped_state_ = nullptr;
}
inline const ::perception::object::PedState& Warning::_internal_ped_state() const {
  const ::perception::object::PedState* p = ped_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::object::PedState*>(
      &::perception::object::_PedState_default_instance_);
}
inline const ::perception::object::PedState& Warning::ped_state() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.ped_state)
  return _internal_ped_state();
}
inline void Warning::unsafe_arena_set_allocated_ped_state(
    ::perception::object::PedState* ped_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ped_state_);
  }
  ped_state_ = ped_state;
  if (ped_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.Warning.ped_state)
}
inline ::perception::object::PedState* Warning::release_ped_state() {
  auto temp = unsafe_arena_release_ped_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::object::PedState* Warning::unsafe_arena_release_ped_state() {
  // @@protoc_insertion_point(field_release:perception.object.Warning.ped_state)
  
  ::perception::object::PedState* temp = ped_state_;
  ped_state_ = nullptr;
  return temp;
}
inline ::perception::object::PedState* Warning::_internal_mutable_ped_state() {
  
  if (ped_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::object::PedState>(GetArena());
    ped_state_ = p;
  }
  return ped_state_;
}
inline ::perception::object::PedState* Warning::mutable_ped_state() {
  // @@protoc_insertion_point(field_mutable:perception.object.Warning.ped_state)
  return _internal_mutable_ped_state();
}
inline void Warning::set_allocated_ped_state(::perception::object::PedState* ped_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ped_state_;
  }
  if (ped_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ped_state);
    if (message_arena != submessage_arena) {
      ped_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ped_state, submessage_arena);
    }
    
  } else {
    
  }
  ped_state_ = ped_state;
  // @@protoc_insertion_point(field_set_allocated:perception.object.Warning.ped_state)
}

// .perception.object.TsrState tsr_state = 12;
inline bool Warning::_internal_has_tsr_state() const {
  return this != internal_default_instance() && tsr_state_ != nullptr;
}
inline bool Warning::has_tsr_state() const {
  return _internal_has_tsr_state();
}
inline void Warning::clear_tsr_state() {
  if (GetArena() == nullptr && tsr_state_ != nullptr) {
    delete tsr_state_;
  }
  tsr_state_ = nullptr;
}
inline const ::perception::object::TsrState& Warning::_internal_tsr_state() const {
  const ::perception::object::TsrState* p = tsr_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::object::TsrState*>(
      &::perception::object::_TsrState_default_instance_);
}
inline const ::perception::object::TsrState& Warning::tsr_state() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.tsr_state)
  return _internal_tsr_state();
}
inline void Warning::unsafe_arena_set_allocated_tsr_state(
    ::perception::object::TsrState* tsr_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsr_state_);
  }
  tsr_state_ = tsr_state;
  if (tsr_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.Warning.tsr_state)
}
inline ::perception::object::TsrState* Warning::release_tsr_state() {
  auto temp = unsafe_arena_release_tsr_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::object::TsrState* Warning::unsafe_arena_release_tsr_state() {
  // @@protoc_insertion_point(field_release:perception.object.Warning.tsr_state)
  
  ::perception::object::TsrState* temp = tsr_state_;
  tsr_state_ = nullptr;
  return temp;
}
inline ::perception::object::TsrState* Warning::_internal_mutable_tsr_state() {
  
  if (tsr_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::object::TsrState>(GetArena());
    tsr_state_ = p;
  }
  return tsr_state_;
}
inline ::perception::object::TsrState* Warning::mutable_tsr_state() {
  // @@protoc_insertion_point(field_mutable:perception.object.Warning.tsr_state)
  return _internal_mutable_tsr_state();
}
inline void Warning::set_allocated_tsr_state(::perception::object::TsrState* tsr_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tsr_state_;
  }
  if (tsr_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tsr_state);
    if (message_arena != submessage_arena) {
      tsr_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsr_state, submessage_arena);
    }
    
  } else {
    
  }
  tsr_state_ = tsr_state;
  // @@protoc_insertion_point(field_set_allocated:perception.object.Warning.tsr_state)
}

// .perception.object.IhcState ihc_state = 13;
inline bool Warning::_internal_has_ihc_state() const {
  return this != internal_default_instance() && ihc_state_ != nullptr;
}
inline bool Warning::has_ihc_state() const {
  return _internal_has_ihc_state();
}
inline void Warning::clear_ihc_state() {
  if (GetArena() == nullptr && ihc_state_ != nullptr) {
    delete ihc_state_;
  }
  ihc_state_ = nullptr;
}
inline const ::perception::object::IhcState& Warning::_internal_ihc_state() const {
  const ::perception::object::IhcState* p = ihc_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::object::IhcState*>(
      &::perception::object::_IhcState_default_instance_);
}
inline const ::perception::object::IhcState& Warning::ihc_state() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.ihc_state)
  return _internal_ihc_state();
}
inline void Warning::unsafe_arena_set_allocated_ihc_state(
    ::perception::object::IhcState* ihc_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ihc_state_);
  }
  ihc_state_ = ihc_state;
  if (ihc_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.Warning.ihc_state)
}
inline ::perception::object::IhcState* Warning::release_ihc_state() {
  auto temp = unsafe_arena_release_ihc_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::object::IhcState* Warning::unsafe_arena_release_ihc_state() {
  // @@protoc_insertion_point(field_release:perception.object.Warning.ihc_state)
  
  ::perception::object::IhcState* temp = ihc_state_;
  ihc_state_ = nullptr;
  return temp;
}
inline ::perception::object::IhcState* Warning::_internal_mutable_ihc_state() {
  
  if (ihc_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::object::IhcState>(GetArena());
    ihc_state_ = p;
  }
  return ihc_state_;
}
inline ::perception::object::IhcState* Warning::mutable_ihc_state() {
  // @@protoc_insertion_point(field_mutable:perception.object.Warning.ihc_state)
  return _internal_mutable_ihc_state();
}
inline void Warning::set_allocated_ihc_state(::perception::object::IhcState* ihc_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ihc_state_;
  }
  if (ihc_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ihc_state);
    if (message_arena != submessage_arena) {
      ihc_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ihc_state, submessage_arena);
    }
    
  } else {
    
  }
  ihc_state_ = ihc_state;
  // @@protoc_insertion_point(field_set_allocated:perception.object.Warning.ihc_state)
}

// .perception.object.BsdState bsd_state = 14;
inline bool Warning::_internal_has_bsd_state() const {
  return this != internal_default_instance() && bsd_state_ != nullptr;
}
inline bool Warning::has_bsd_state() const {
  return _internal_has_bsd_state();
}
inline void Warning::clear_bsd_state() {
  if (GetArena() == nullptr && bsd_state_ != nullptr) {
    delete bsd_state_;
  }
  bsd_state_ = nullptr;
}
inline const ::perception::object::BsdState& Warning::_internal_bsd_state() const {
  const ::perception::object::BsdState* p = bsd_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::object::BsdState*>(
      &::perception::object::_BsdState_default_instance_);
}
inline const ::perception::object::BsdState& Warning::bsd_state() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.bsd_state)
  return _internal_bsd_state();
}
inline void Warning::unsafe_arena_set_allocated_bsd_state(
    ::perception::object::BsdState* bsd_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bsd_state_);
  }
  bsd_state_ = bsd_state;
  if (bsd_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.Warning.bsd_state)
}
inline ::perception::object::BsdState* Warning::release_bsd_state() {
  auto temp = unsafe_arena_release_bsd_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::object::BsdState* Warning::unsafe_arena_release_bsd_state() {
  // @@protoc_insertion_point(field_release:perception.object.Warning.bsd_state)
  
  ::perception::object::BsdState* temp = bsd_state_;
  bsd_state_ = nullptr;
  return temp;
}
inline ::perception::object::BsdState* Warning::_internal_mutable_bsd_state() {
  
  if (bsd_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::object::BsdState>(GetArena());
    bsd_state_ = p;
  }
  return bsd_state_;
}
inline ::perception::object::BsdState* Warning::mutable_bsd_state() {
  // @@protoc_insertion_point(field_mutable:perception.object.Warning.bsd_state)
  return _internal_mutable_bsd_state();
}
inline void Warning::set_allocated_bsd_state(::perception::object::BsdState* bsd_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bsd_state_;
  }
  if (bsd_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bsd_state);
    if (message_arena != submessage_arena) {
      bsd_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bsd_state, submessage_arena);
    }
    
  } else {
    
  }
  bsd_state_ = bsd_state;
  // @@protoc_insertion_point(field_set_allocated:perception.object.Warning.bsd_state)
}

// .perception.object.LcaState lca_state = 15;
inline bool Warning::_internal_has_lca_state() const {
  return this != internal_default_instance() && lca_state_ != nullptr;
}
inline bool Warning::has_lca_state() const {
  return _internal_has_lca_state();
}
inline void Warning::clear_lca_state() {
  if (GetArena() == nullptr && lca_state_ != nullptr) {
    delete lca_state_;
  }
  lca_state_ = nullptr;
}
inline const ::perception::object::LcaState& Warning::_internal_lca_state() const {
  const ::perception::object::LcaState* p = lca_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::object::LcaState*>(
      &::perception::object::_LcaState_default_instance_);
}
inline const ::perception::object::LcaState& Warning::lca_state() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.lca_state)
  return _internal_lca_state();
}
inline void Warning::unsafe_arena_set_allocated_lca_state(
    ::perception::object::LcaState* lca_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lca_state_);
  }
  lca_state_ = lca_state;
  if (lca_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.Warning.lca_state)
}
inline ::perception::object::LcaState* Warning::release_lca_state() {
  auto temp = unsafe_arena_release_lca_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::object::LcaState* Warning::unsafe_arena_release_lca_state() {
  // @@protoc_insertion_point(field_release:perception.object.Warning.lca_state)
  
  ::perception::object::LcaState* temp = lca_state_;
  lca_state_ = nullptr;
  return temp;
}
inline ::perception::object::LcaState* Warning::_internal_mutable_lca_state() {
  
  if (lca_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::object::LcaState>(GetArena());
    lca_state_ = p;
  }
  return lca_state_;
}
inline ::perception::object::LcaState* Warning::mutable_lca_state() {
  // @@protoc_insertion_point(field_mutable:perception.object.Warning.lca_state)
  return _internal_mutable_lca_state();
}
inline void Warning::set_allocated_lca_state(::perception::object::LcaState* lca_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lca_state_;
  }
  if (lca_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lca_state);
    if (message_arena != submessage_arena) {
      lca_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lca_state, submessage_arena);
    }
    
  } else {
    
  }
  lca_state_ = lca_state;
  // @@protoc_insertion_point(field_set_allocated:perception.object.Warning.lca_state)
}

// int32 object_valid = 20;
inline void Warning::clear_object_valid() {
  object_valid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Warning::_internal_object_valid() const {
  return object_valid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Warning::object_valid() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.object_valid)
  return _internal_object_valid();
}
inline void Warning::_internal_set_object_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  object_valid_ = value;
}
inline void Warning::set_object_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_object_valid(value);
  // @@protoc_insertion_point(field_set:perception.object.Warning.object_valid)
}

// .perception.common.Point2fList bsd_warning_zone = 21;
inline bool Warning::_internal_has_bsd_warning_zone() const {
  return this != internal_default_instance() && bsd_warning_zone_ != nullptr;
}
inline bool Warning::has_bsd_warning_zone() const {
  return _internal_has_bsd_warning_zone();
}
inline const ::perception::common::Point2fList& Warning::_internal_bsd_warning_zone() const {
  const ::perception::common::Point2fList* p = bsd_warning_zone_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perception::common::Point2fList*>(
      &::perception::common::_Point2fList_default_instance_);
}
inline const ::perception::common::Point2fList& Warning::bsd_warning_zone() const {
  // @@protoc_insertion_point(field_get:perception.object.Warning.bsd_warning_zone)
  return _internal_bsd_warning_zone();
}
inline void Warning::unsafe_arena_set_allocated_bsd_warning_zone(
    ::perception::common::Point2fList* bsd_warning_zone) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bsd_warning_zone_);
  }
  bsd_warning_zone_ = bsd_warning_zone;
  if (bsd_warning_zone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perception.object.Warning.bsd_warning_zone)
}
inline ::perception::common::Point2fList* Warning::release_bsd_warning_zone() {
  auto temp = unsafe_arena_release_bsd_warning_zone();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perception::common::Point2fList* Warning::unsafe_arena_release_bsd_warning_zone() {
  // @@protoc_insertion_point(field_release:perception.object.Warning.bsd_warning_zone)
  
  ::perception::common::Point2fList* temp = bsd_warning_zone_;
  bsd_warning_zone_ = nullptr;
  return temp;
}
inline ::perception::common::Point2fList* Warning::_internal_mutable_bsd_warning_zone() {
  
  if (bsd_warning_zone_ == nullptr) {
    auto* p = CreateMaybeMessage<::perception::common::Point2fList>(GetArena());
    bsd_warning_zone_ = p;
  }
  return bsd_warning_zone_;
}
inline ::perception::common::Point2fList* Warning::mutable_bsd_warning_zone() {
  // @@protoc_insertion_point(field_mutable:perception.object.Warning.bsd_warning_zone)
  return _internal_mutable_bsd_warning_zone();
}
inline void Warning::set_allocated_bsd_warning_zone(::perception::common::Point2fList* bsd_warning_zone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bsd_warning_zone_);
  }
  if (bsd_warning_zone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bsd_warning_zone)->GetArena();
    if (message_arena != submessage_arena) {
      bsd_warning_zone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bsd_warning_zone, submessage_arena);
    }
    
  } else {
    
  }
  bsd_warning_zone_ = bsd_warning_zone;
  // @@protoc_insertion_point(field_set_allocated:perception.object.Warning.bsd_warning_zone)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace object
}  // namespace perception

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perception::object::IhcSignal_IhcSignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perception::object::IhcSignal_IhcSignalType>() {
  return ::perception::object::IhcSignal_IhcSignalType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_object_5fwarning_2eproto
