// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: odometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_odometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_odometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_odometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_odometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_odometry_2eproto;
namespace minieye {
class EgoMotion;
class EgoMotionDefaultTypeInternal;
extern EgoMotionDefaultTypeInternal _EgoMotion_default_instance_;
class Odometry;
class OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class OdometryPose;
class OdometryPoseDefaultTypeInternal;
extern OdometryPoseDefaultTypeInternal _OdometryPose_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::EgoMotion* Arena::CreateMaybeMessage<::minieye::EgoMotion>(Arena*);
template<> ::minieye::Odometry* Arena::CreateMaybeMessage<::minieye::Odometry>(Arena*);
template<> ::minieye::OdometryPose* Arena::CreateMaybeMessage<::minieye::OdometryPose>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

// ===================================================================

class OdometryPose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.OdometryPose) */ {
 public:
  inline OdometryPose() : OdometryPose(nullptr) {};
  virtual ~OdometryPose();

  OdometryPose(const OdometryPose& from);
  OdometryPose(OdometryPose&& from) noexcept
    : OdometryPose() {
    *this = ::std::move(from);
  }

  inline OdometryPose& operator=(const OdometryPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdometryPose& operator=(OdometryPose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OdometryPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OdometryPose* internal_default_instance() {
    return reinterpret_cast<const OdometryPose*>(
               &_OdometryPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OdometryPose& a, OdometryPose& b) {
    a.Swap(&b);
  }
  inline void Swap(OdometryPose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OdometryPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OdometryPose* New() const final {
    return CreateMaybeMessage<OdometryPose>(nullptr);
  }

  OdometryPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OdometryPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OdometryPose& from);
  void MergeFrom(const OdometryPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdometryPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.OdometryPose";
  }
  protected:
  explicit OdometryPose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_odometry_2eproto);
    return ::descriptor_table_odometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotFieldNumber = 6,
    kPosFieldNumber = 7,
    kVelFieldNumber = 8,
    kImuAccFieldNumber = 9,
    kImuGyrFieldNumber = 10,
    kBaFieldNumber = 11,
    kBgFieldNumber = 12,
    kTimestampFieldNumber = 1,
    kTickFieldNumber = 2,
    kPitchFieldNumber = 3,
    kPitchVarFieldNumber = 4,
    kVxFieldNumber = 13,
    kVxVarFieldNumber = 14,
    kIsPitchValidFieldNumber = 5,
    kIsVxValidFieldNumber = 15,
    kIsAxValidFieldNumber = 18,
    kIsYawRateValidFieldNumber = 21,
    kAxFieldNumber = 16,
    kAxVarFieldNumber = 17,
    kYawRateFieldNumber = 19,
    kYawRateVarFieldNumber = 20,
    kPitchRateFieldNumber = 22,
    kPitchRateVarFieldNumber = 23,
    kCanAxFieldNumber = 25,
    kIsPitchRateValidFieldNumber = 24,
    kIsCanAxValidFieldNumber = 27,
    kCanAxVarFieldNumber = 26,
  };
  // repeated float rot = 6;
  int rot_size() const;
  private:
  int _internal_rot_size() const;
  public:
  void clear_rot();
  private:
  float _internal_rot(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rot() const;
  void _internal_add_rot(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rot();
  public:
  float rot(int index) const;
  void set_rot(int index, float value);
  void add_rot(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rot();

  // repeated float pos = 7;
  int pos_size() const;
  private:
  int _internal_pos_size() const;
  public:
  void clear_pos();
  private:
  float _internal_pos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_pos() const;
  void _internal_add_pos(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_pos();
  public:
  float pos(int index) const;
  void set_pos(int index, float value);
  void add_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pos();

  // repeated float vel = 8;
  int vel_size() const;
  private:
  int _internal_vel_size() const;
  public:
  void clear_vel();
  private:
  float _internal_vel(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vel() const;
  void _internal_add_vel(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vel();
  public:
  float vel(int index) const;
  void set_vel(int index, float value);
  void add_vel(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vel();

  // repeated float imu_acc = 9;
  int imu_acc_size() const;
  private:
  int _internal_imu_acc_size() const;
  public:
  void clear_imu_acc();
  private:
  float _internal_imu_acc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_imu_acc() const;
  void _internal_add_imu_acc(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_imu_acc();
  public:
  float imu_acc(int index) const;
  void set_imu_acc(int index, float value);
  void add_imu_acc(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      imu_acc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_imu_acc();

  // repeated float imu_gyr = 10;
  int imu_gyr_size() const;
  private:
  int _internal_imu_gyr_size() const;
  public:
  void clear_imu_gyr();
  private:
  float _internal_imu_gyr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_imu_gyr() const;
  void _internal_add_imu_gyr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_imu_gyr();
  public:
  float imu_gyr(int index) const;
  void set_imu_gyr(int index, float value);
  void add_imu_gyr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      imu_gyr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_imu_gyr();

  // repeated float ba = 11;
  int ba_size() const;
  private:
  int _internal_ba_size() const;
  public:
  void clear_ba();
  private:
  float _internal_ba(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ba() const;
  void _internal_add_ba(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ba();
  public:
  float ba(int index) const;
  void set_ba(int index, float value);
  void add_ba(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ba() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ba();

  // repeated float bg = 12;
  int bg_size() const;
  private:
  int _internal_bg_size() const;
  public:
  void clear_bg();
  private:
  float _internal_bg(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bg() const;
  void _internal_add_bg(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bg();
  public:
  float bg(int index) const;
  void set_bg(int index, float value);
  void add_bg(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bg();

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 2;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float pitch = 3;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float pitch_var = 4;
  void clear_pitch_var();
  float pitch_var() const;
  void set_pitch_var(float value);
  private:
  float _internal_pitch_var() const;
  void _internal_set_pitch_var(float value);
  public:

  // float vx = 13;
  void clear_vx();
  float vx() const;
  void set_vx(float value);
  private:
  float _internal_vx() const;
  void _internal_set_vx(float value);
  public:

  // float vx_var = 14;
  void clear_vx_var();
  float vx_var() const;
  void set_vx_var(float value);
  private:
  float _internal_vx_var() const;
  void _internal_set_vx_var(float value);
  public:

  // bool is_pitch_valid = 5;
  void clear_is_pitch_valid();
  bool is_pitch_valid() const;
  void set_is_pitch_valid(bool value);
  private:
  bool _internal_is_pitch_valid() const;
  void _internal_set_is_pitch_valid(bool value);
  public:

  // bool is_vx_valid = 15;
  void clear_is_vx_valid();
  bool is_vx_valid() const;
  void set_is_vx_valid(bool value);
  private:
  bool _internal_is_vx_valid() const;
  void _internal_set_is_vx_valid(bool value);
  public:

  // bool is_ax_valid = 18;
  void clear_is_ax_valid();
  bool is_ax_valid() const;
  void set_is_ax_valid(bool value);
  private:
  bool _internal_is_ax_valid() const;
  void _internal_set_is_ax_valid(bool value);
  public:

  // bool is_yaw_rate_valid = 21;
  void clear_is_yaw_rate_valid();
  bool is_yaw_rate_valid() const;
  void set_is_yaw_rate_valid(bool value);
  private:
  bool _internal_is_yaw_rate_valid() const;
  void _internal_set_is_yaw_rate_valid(bool value);
  public:

  // float ax = 16;
  void clear_ax();
  float ax() const;
  void set_ax(float value);
  private:
  float _internal_ax() const;
  void _internal_set_ax(float value);
  public:

  // float ax_var = 17;
  void clear_ax_var();
  float ax_var() const;
  void set_ax_var(float value);
  private:
  float _internal_ax_var() const;
  void _internal_set_ax_var(float value);
  public:

  // float yaw_rate = 19;
  void clear_yaw_rate();
  float yaw_rate() const;
  void set_yaw_rate(float value);
  private:
  float _internal_yaw_rate() const;
  void _internal_set_yaw_rate(float value);
  public:

  // float yaw_rate_var = 20;
  void clear_yaw_rate_var();
  float yaw_rate_var() const;
  void set_yaw_rate_var(float value);
  private:
  float _internal_yaw_rate_var() const;
  void _internal_set_yaw_rate_var(float value);
  public:

  // float pitch_rate = 22;
  void clear_pitch_rate();
  float pitch_rate() const;
  void set_pitch_rate(float value);
  private:
  float _internal_pitch_rate() const;
  void _internal_set_pitch_rate(float value);
  public:

  // float pitch_rate_var = 23;
  void clear_pitch_rate_var();
  float pitch_rate_var() const;
  void set_pitch_rate_var(float value);
  private:
  float _internal_pitch_rate_var() const;
  void _internal_set_pitch_rate_var(float value);
  public:

  // float can_ax = 25;
  void clear_can_ax();
  float can_ax() const;
  void set_can_ax(float value);
  private:
  float _internal_can_ax() const;
  void _internal_set_can_ax(float value);
  public:

  // bool is_pitch_rate_valid = 24;
  void clear_is_pitch_rate_valid();
  bool is_pitch_rate_valid() const;
  void set_is_pitch_rate_valid(bool value);
  private:
  bool _internal_is_pitch_rate_valid() const;
  void _internal_set_is_pitch_rate_valid(bool value);
  public:

  // bool is_can_ax_valid = 27;
  void clear_is_can_ax_valid();
  bool is_can_ax_valid() const;
  void set_is_can_ax_valid(bool value);
  private:
  bool _internal_is_can_ax_valid() const;
  void _internal_set_is_can_ax_valid(bool value);
  public:

  // float can_ax_var = 26;
  void clear_can_ax_var();
  float can_ax_var() const;
  void set_can_ax_var(float value);
  private:
  float _internal_can_ax_var() const;
  void _internal_set_can_ax_var(float value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.OdometryPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rot_;
  mutable std::atomic<int> _rot_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pos_;
  mutable std::atomic<int> _pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vel_;
  mutable std::atomic<int> _vel_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > imu_acc_;
  mutable std::atomic<int> _imu_acc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > imu_gyr_;
  mutable std::atomic<int> _imu_gyr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ba_;
  mutable std::atomic<int> _ba_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bg_;
  mutable std::atomic<int> _bg_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  float pitch_;
  float pitch_var_;
  float vx_;
  float vx_var_;
  bool is_pitch_valid_;
  bool is_vx_valid_;
  bool is_ax_valid_;
  bool is_yaw_rate_valid_;
  float ax_;
  float ax_var_;
  float yaw_rate_;
  float yaw_rate_var_;
  float pitch_rate_;
  float pitch_rate_var_;
  float can_ax_;
  bool is_pitch_rate_valid_;
  bool is_can_ax_valid_;
  float can_ax_var_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_odometry_2eproto;
};
// -------------------------------------------------------------------

class Odometry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {};
  virtual ~Odometry();

  Odometry(const Odometry& from);
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Odometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Odometry* New() const final {
    return CreateMaybeMessage<Odometry>(nullptr);
  }

  Odometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Odometry& from);
  void MergeFrom(const Odometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.Odometry";
  }
  protected:
  explicit Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_odometry_2eproto);
    return ::descriptor_table_odometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictPoseFieldNumber = 1,
  };
  // repeated .minieye.OdometryPose predict_pose = 1;
  int predict_pose_size() const;
  private:
  int _internal_predict_pose_size() const;
  public:
  void clear_predict_pose();
  ::minieye::OdometryPose* mutable_predict_pose(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::OdometryPose >*
      mutable_predict_pose();
  private:
  const ::minieye::OdometryPose& _internal_predict_pose(int index) const;
  ::minieye::OdometryPose* _internal_add_predict_pose();
  public:
  const ::minieye::OdometryPose& predict_pose(int index) const;
  ::minieye::OdometryPose* add_predict_pose();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::OdometryPose >&
      predict_pose() const;

  // @@protoc_insertion_point(class_scope:minieye.Odometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::OdometryPose > predict_pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_odometry_2eproto;
};
// -------------------------------------------------------------------

class EgoMotion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.EgoMotion) */ {
 public:
  inline EgoMotion() : EgoMotion(nullptr) {};
  virtual ~EgoMotion();

  EgoMotion(const EgoMotion& from);
  EgoMotion(EgoMotion&& from) noexcept
    : EgoMotion() {
    *this = ::std::move(from);
  }

  inline EgoMotion& operator=(const EgoMotion& from) {
    CopyFrom(from);
    return *this;
  }
  inline EgoMotion& operator=(EgoMotion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EgoMotion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EgoMotion* internal_default_instance() {
    return reinterpret_cast<const EgoMotion*>(
               &_EgoMotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EgoMotion& a, EgoMotion& b) {
    a.Swap(&b);
  }
  inline void Swap(EgoMotion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EgoMotion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EgoMotion* New() const final {
    return CreateMaybeMessage<EgoMotion>(nullptr);
  }

  EgoMotion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EgoMotion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EgoMotion& from);
  void MergeFrom(const EgoMotion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EgoMotion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.EgoMotion";
  }
  protected:
  explicit EgoMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_odometry_2eproto);
    return ::descriptor_table_odometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedMpsFieldNumber = 1,
    kDyawFieldNumber = 3,
    kIsImuValidFieldNumber = 2,
    kIsDyawValidFieldNumber = 4,
    kIsDpitchValidFieldNumber = 6,
    kDpitchFieldNumber = 5,
    kCurrTimestampFieldNumber = 8,
    kDtMsFieldNumber = 7,
  };
  // float speed_mps = 1;
  void clear_speed_mps();
  float speed_mps() const;
  void set_speed_mps(float value);
  private:
  float _internal_speed_mps() const;
  void _internal_set_speed_mps(float value);
  public:

  // float dyaw = 3;
  void clear_dyaw();
  float dyaw() const;
  void set_dyaw(float value);
  private:
  float _internal_dyaw() const;
  void _internal_set_dyaw(float value);
  public:

  // bool is_imu_valid = 2;
  void clear_is_imu_valid();
  bool is_imu_valid() const;
  void set_is_imu_valid(bool value);
  private:
  bool _internal_is_imu_valid() const;
  void _internal_set_is_imu_valid(bool value);
  public:

  // bool is_dyaw_valid = 4;
  void clear_is_dyaw_valid();
  bool is_dyaw_valid() const;
  void set_is_dyaw_valid(bool value);
  private:
  bool _internal_is_dyaw_valid() const;
  void _internal_set_is_dyaw_valid(bool value);
  public:

  // bool is_dpitch_valid = 6;
  void clear_is_dpitch_valid();
  bool is_dpitch_valid() const;
  void set_is_dpitch_valid(bool value);
  private:
  bool _internal_is_dpitch_valid() const;
  void _internal_set_is_dpitch_valid(bool value);
  public:

  // float dpitch = 5;
  void clear_dpitch();
  float dpitch() const;
  void set_dpitch(float value);
  private:
  float _internal_dpitch() const;
  void _internal_set_dpitch(float value);
  public:

  // uint64 curr_timestamp = 8;
  void clear_curr_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 curr_timestamp() const;
  void set_curr_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_curr_timestamp() const;
  void _internal_set_curr_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 dt_ms = 7;
  void clear_dt_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 dt_ms() const;
  void set_dt_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dt_ms() const;
  void _internal_set_dt_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.EgoMotion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float speed_mps_;
  float dyaw_;
  bool is_imu_valid_;
  bool is_dyaw_valid_;
  bool is_dpitch_valid_;
  float dpitch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 curr_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 dt_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_odometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OdometryPose

// uint64 timestamp = 1;
inline void OdometryPose::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OdometryPose::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OdometryPose::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.timestamp)
  return _internal_timestamp();
}
inline void OdometryPose::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void OdometryPose::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.timestamp)
}

// uint64 tick = 2;
inline void OdometryPose::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OdometryPose::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OdometryPose::tick() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.tick)
  return _internal_tick();
}
inline void OdometryPose::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void OdometryPose::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.tick)
}

// float pitch = 3;
inline void OdometryPose::clear_pitch() {
  pitch_ = 0;
}
inline float OdometryPose::_internal_pitch() const {
  return pitch_;
}
inline float OdometryPose::pitch() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.pitch)
  return _internal_pitch();
}
inline void OdometryPose::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void OdometryPose::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.pitch)
}

// float pitch_var = 4;
inline void OdometryPose::clear_pitch_var() {
  pitch_var_ = 0;
}
inline float OdometryPose::_internal_pitch_var() const {
  return pitch_var_;
}
inline float OdometryPose::pitch_var() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.pitch_var)
  return _internal_pitch_var();
}
inline void OdometryPose::_internal_set_pitch_var(float value) {
  
  pitch_var_ = value;
}
inline void OdometryPose::set_pitch_var(float value) {
  _internal_set_pitch_var(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.pitch_var)
}

// bool is_pitch_valid = 5;
inline void OdometryPose::clear_is_pitch_valid() {
  is_pitch_valid_ = false;
}
inline bool OdometryPose::_internal_is_pitch_valid() const {
  return is_pitch_valid_;
}
inline bool OdometryPose::is_pitch_valid() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.is_pitch_valid)
  return _internal_is_pitch_valid();
}
inline void OdometryPose::_internal_set_is_pitch_valid(bool value) {
  
  is_pitch_valid_ = value;
}
inline void OdometryPose::set_is_pitch_valid(bool value) {
  _internal_set_is_pitch_valid(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.is_pitch_valid)
}

// repeated float rot = 6;
inline int OdometryPose::_internal_rot_size() const {
  return rot_.size();
}
inline int OdometryPose::rot_size() const {
  return _internal_rot_size();
}
inline void OdometryPose::clear_rot() {
  rot_.Clear();
}
inline float OdometryPose::_internal_rot(int index) const {
  return rot_.Get(index);
}
inline float OdometryPose::rot(int index) const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.rot)
  return _internal_rot(index);
}
inline void OdometryPose::set_rot(int index, float value) {
  rot_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.rot)
}
inline void OdometryPose::_internal_add_rot(float value) {
  rot_.Add(value);
}
inline void OdometryPose::add_rot(float value) {
  _internal_add_rot(value);
  // @@protoc_insertion_point(field_add:minieye.OdometryPose.rot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::_internal_rot() const {
  return rot_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::rot() const {
  // @@protoc_insertion_point(field_list:minieye.OdometryPose.rot)
  return _internal_rot();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::_internal_mutable_rot() {
  return &rot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::mutable_rot() {
  // @@protoc_insertion_point(field_mutable_list:minieye.OdometryPose.rot)
  return _internal_mutable_rot();
}

// repeated float pos = 7;
inline int OdometryPose::_internal_pos_size() const {
  return pos_.size();
}
inline int OdometryPose::pos_size() const {
  return _internal_pos_size();
}
inline void OdometryPose::clear_pos() {
  pos_.Clear();
}
inline float OdometryPose::_internal_pos(int index) const {
  return pos_.Get(index);
}
inline float OdometryPose::pos(int index) const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.pos)
  return _internal_pos(index);
}
inline void OdometryPose::set_pos(int index, float value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.pos)
}
inline void OdometryPose::_internal_add_pos(float value) {
  pos_.Add(value);
}
inline void OdometryPose::add_pos(float value) {
  _internal_add_pos(value);
  // @@protoc_insertion_point(field_add:minieye.OdometryPose.pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::_internal_pos() const {
  return pos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::pos() const {
  // @@protoc_insertion_point(field_list:minieye.OdometryPose.pos)
  return _internal_pos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::_internal_mutable_pos() {
  return &pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:minieye.OdometryPose.pos)
  return _internal_mutable_pos();
}

// repeated float vel = 8;
inline int OdometryPose::_internal_vel_size() const {
  return vel_.size();
}
inline int OdometryPose::vel_size() const {
  return _internal_vel_size();
}
inline void OdometryPose::clear_vel() {
  vel_.Clear();
}
inline float OdometryPose::_internal_vel(int index) const {
  return vel_.Get(index);
}
inline float OdometryPose::vel(int index) const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.vel)
  return _internal_vel(index);
}
inline void OdometryPose::set_vel(int index, float value) {
  vel_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.vel)
}
inline void OdometryPose::_internal_add_vel(float value) {
  vel_.Add(value);
}
inline void OdometryPose::add_vel(float value) {
  _internal_add_vel(value);
  // @@protoc_insertion_point(field_add:minieye.OdometryPose.vel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::_internal_vel() const {
  return vel_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::vel() const {
  // @@protoc_insertion_point(field_list:minieye.OdometryPose.vel)
  return _internal_vel();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::_internal_mutable_vel() {
  return &vel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::mutable_vel() {
  // @@protoc_insertion_point(field_mutable_list:minieye.OdometryPose.vel)
  return _internal_mutable_vel();
}

// repeated float imu_acc = 9;
inline int OdometryPose::_internal_imu_acc_size() const {
  return imu_acc_.size();
}
inline int OdometryPose::imu_acc_size() const {
  return _internal_imu_acc_size();
}
inline void OdometryPose::clear_imu_acc() {
  imu_acc_.Clear();
}
inline float OdometryPose::_internal_imu_acc(int index) const {
  return imu_acc_.Get(index);
}
inline float OdometryPose::imu_acc(int index) const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.imu_acc)
  return _internal_imu_acc(index);
}
inline void OdometryPose::set_imu_acc(int index, float value) {
  imu_acc_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.imu_acc)
}
inline void OdometryPose::_internal_add_imu_acc(float value) {
  imu_acc_.Add(value);
}
inline void OdometryPose::add_imu_acc(float value) {
  _internal_add_imu_acc(value);
  // @@protoc_insertion_point(field_add:minieye.OdometryPose.imu_acc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::_internal_imu_acc() const {
  return imu_acc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::imu_acc() const {
  // @@protoc_insertion_point(field_list:minieye.OdometryPose.imu_acc)
  return _internal_imu_acc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::_internal_mutable_imu_acc() {
  return &imu_acc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::mutable_imu_acc() {
  // @@protoc_insertion_point(field_mutable_list:minieye.OdometryPose.imu_acc)
  return _internal_mutable_imu_acc();
}

// repeated float imu_gyr = 10;
inline int OdometryPose::_internal_imu_gyr_size() const {
  return imu_gyr_.size();
}
inline int OdometryPose::imu_gyr_size() const {
  return _internal_imu_gyr_size();
}
inline void OdometryPose::clear_imu_gyr() {
  imu_gyr_.Clear();
}
inline float OdometryPose::_internal_imu_gyr(int index) const {
  return imu_gyr_.Get(index);
}
inline float OdometryPose::imu_gyr(int index) const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.imu_gyr)
  return _internal_imu_gyr(index);
}
inline void OdometryPose::set_imu_gyr(int index, float value) {
  imu_gyr_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.imu_gyr)
}
inline void OdometryPose::_internal_add_imu_gyr(float value) {
  imu_gyr_.Add(value);
}
inline void OdometryPose::add_imu_gyr(float value) {
  _internal_add_imu_gyr(value);
  // @@protoc_insertion_point(field_add:minieye.OdometryPose.imu_gyr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::_internal_imu_gyr() const {
  return imu_gyr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::imu_gyr() const {
  // @@protoc_insertion_point(field_list:minieye.OdometryPose.imu_gyr)
  return _internal_imu_gyr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::_internal_mutable_imu_gyr() {
  return &imu_gyr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::mutable_imu_gyr() {
  // @@protoc_insertion_point(field_mutable_list:minieye.OdometryPose.imu_gyr)
  return _internal_mutable_imu_gyr();
}

// repeated float ba = 11;
inline int OdometryPose::_internal_ba_size() const {
  return ba_.size();
}
inline int OdometryPose::ba_size() const {
  return _internal_ba_size();
}
inline void OdometryPose::clear_ba() {
  ba_.Clear();
}
inline float OdometryPose::_internal_ba(int index) const {
  return ba_.Get(index);
}
inline float OdometryPose::ba(int index) const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.ba)
  return _internal_ba(index);
}
inline void OdometryPose::set_ba(int index, float value) {
  ba_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.ba)
}
inline void OdometryPose::_internal_add_ba(float value) {
  ba_.Add(value);
}
inline void OdometryPose::add_ba(float value) {
  _internal_add_ba(value);
  // @@protoc_insertion_point(field_add:minieye.OdometryPose.ba)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::_internal_ba() const {
  return ba_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::ba() const {
  // @@protoc_insertion_point(field_list:minieye.OdometryPose.ba)
  return _internal_ba();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::_internal_mutable_ba() {
  return &ba_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::mutable_ba() {
  // @@protoc_insertion_point(field_mutable_list:minieye.OdometryPose.ba)
  return _internal_mutable_ba();
}

// repeated float bg = 12;
inline int OdometryPose::_internal_bg_size() const {
  return bg_.size();
}
inline int OdometryPose::bg_size() const {
  return _internal_bg_size();
}
inline void OdometryPose::clear_bg() {
  bg_.Clear();
}
inline float OdometryPose::_internal_bg(int index) const {
  return bg_.Get(index);
}
inline float OdometryPose::bg(int index) const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.bg)
  return _internal_bg(index);
}
inline void OdometryPose::set_bg(int index, float value) {
  bg_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.bg)
}
inline void OdometryPose::_internal_add_bg(float value) {
  bg_.Add(value);
}
inline void OdometryPose::add_bg(float value) {
  _internal_add_bg(value);
  // @@protoc_insertion_point(field_add:minieye.OdometryPose.bg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::_internal_bg() const {
  return bg_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdometryPose::bg() const {
  // @@protoc_insertion_point(field_list:minieye.OdometryPose.bg)
  return _internal_bg();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::_internal_mutable_bg() {
  return &bg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdometryPose::mutable_bg() {
  // @@protoc_insertion_point(field_mutable_list:minieye.OdometryPose.bg)
  return _internal_mutable_bg();
}

// float vx = 13;
inline void OdometryPose::clear_vx() {
  vx_ = 0;
}
inline float OdometryPose::_internal_vx() const {
  return vx_;
}
inline float OdometryPose::vx() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.vx)
  return _internal_vx();
}
inline void OdometryPose::_internal_set_vx(float value) {
  
  vx_ = value;
}
inline void OdometryPose::set_vx(float value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.vx)
}

// float vx_var = 14;
inline void OdometryPose::clear_vx_var() {
  vx_var_ = 0;
}
inline float OdometryPose::_internal_vx_var() const {
  return vx_var_;
}
inline float OdometryPose::vx_var() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.vx_var)
  return _internal_vx_var();
}
inline void OdometryPose::_internal_set_vx_var(float value) {
  
  vx_var_ = value;
}
inline void OdometryPose::set_vx_var(float value) {
  _internal_set_vx_var(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.vx_var)
}

// bool is_vx_valid = 15;
inline void OdometryPose::clear_is_vx_valid() {
  is_vx_valid_ = false;
}
inline bool OdometryPose::_internal_is_vx_valid() const {
  return is_vx_valid_;
}
inline bool OdometryPose::is_vx_valid() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.is_vx_valid)
  return _internal_is_vx_valid();
}
inline void OdometryPose::_internal_set_is_vx_valid(bool value) {
  
  is_vx_valid_ = value;
}
inline void OdometryPose::set_is_vx_valid(bool value) {
  _internal_set_is_vx_valid(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.is_vx_valid)
}

// float ax = 16;
inline void OdometryPose::clear_ax() {
  ax_ = 0;
}
inline float OdometryPose::_internal_ax() const {
  return ax_;
}
inline float OdometryPose::ax() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.ax)
  return _internal_ax();
}
inline void OdometryPose::_internal_set_ax(float value) {
  
  ax_ = value;
}
inline void OdometryPose::set_ax(float value) {
  _internal_set_ax(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.ax)
}

// float ax_var = 17;
inline void OdometryPose::clear_ax_var() {
  ax_var_ = 0;
}
inline float OdometryPose::_internal_ax_var() const {
  return ax_var_;
}
inline float OdometryPose::ax_var() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.ax_var)
  return _internal_ax_var();
}
inline void OdometryPose::_internal_set_ax_var(float value) {
  
  ax_var_ = value;
}
inline void OdometryPose::set_ax_var(float value) {
  _internal_set_ax_var(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.ax_var)
}

// bool is_ax_valid = 18;
inline void OdometryPose::clear_is_ax_valid() {
  is_ax_valid_ = false;
}
inline bool OdometryPose::_internal_is_ax_valid() const {
  return is_ax_valid_;
}
inline bool OdometryPose::is_ax_valid() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.is_ax_valid)
  return _internal_is_ax_valid();
}
inline void OdometryPose::_internal_set_is_ax_valid(bool value) {
  
  is_ax_valid_ = value;
}
inline void OdometryPose::set_is_ax_valid(bool value) {
  _internal_set_is_ax_valid(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.is_ax_valid)
}

// float yaw_rate = 19;
inline void OdometryPose::clear_yaw_rate() {
  yaw_rate_ = 0;
}
inline float OdometryPose::_internal_yaw_rate() const {
  return yaw_rate_;
}
inline float OdometryPose::yaw_rate() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.yaw_rate)
  return _internal_yaw_rate();
}
inline void OdometryPose::_internal_set_yaw_rate(float value) {
  
  yaw_rate_ = value;
}
inline void OdometryPose::set_yaw_rate(float value) {
  _internal_set_yaw_rate(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.yaw_rate)
}

// float yaw_rate_var = 20;
inline void OdometryPose::clear_yaw_rate_var() {
  yaw_rate_var_ = 0;
}
inline float OdometryPose::_internal_yaw_rate_var() const {
  return yaw_rate_var_;
}
inline float OdometryPose::yaw_rate_var() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.yaw_rate_var)
  return _internal_yaw_rate_var();
}
inline void OdometryPose::_internal_set_yaw_rate_var(float value) {
  
  yaw_rate_var_ = value;
}
inline void OdometryPose::set_yaw_rate_var(float value) {
  _internal_set_yaw_rate_var(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.yaw_rate_var)
}

// bool is_yaw_rate_valid = 21;
inline void OdometryPose::clear_is_yaw_rate_valid() {
  is_yaw_rate_valid_ = false;
}
inline bool OdometryPose::_internal_is_yaw_rate_valid() const {
  return is_yaw_rate_valid_;
}
inline bool OdometryPose::is_yaw_rate_valid() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.is_yaw_rate_valid)
  return _internal_is_yaw_rate_valid();
}
inline void OdometryPose::_internal_set_is_yaw_rate_valid(bool value) {
  
  is_yaw_rate_valid_ = value;
}
inline void OdometryPose::set_is_yaw_rate_valid(bool value) {
  _internal_set_is_yaw_rate_valid(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.is_yaw_rate_valid)
}

// float pitch_rate = 22;
inline void OdometryPose::clear_pitch_rate() {
  pitch_rate_ = 0;
}
inline float OdometryPose::_internal_pitch_rate() const {
  return pitch_rate_;
}
inline float OdometryPose::pitch_rate() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.pitch_rate)
  return _internal_pitch_rate();
}
inline void OdometryPose::_internal_set_pitch_rate(float value) {
  
  pitch_rate_ = value;
}
inline void OdometryPose::set_pitch_rate(float value) {
  _internal_set_pitch_rate(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.pitch_rate)
}

// float pitch_rate_var = 23;
inline void OdometryPose::clear_pitch_rate_var() {
  pitch_rate_var_ = 0;
}
inline float OdometryPose::_internal_pitch_rate_var() const {
  return pitch_rate_var_;
}
inline float OdometryPose::pitch_rate_var() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.pitch_rate_var)
  return _internal_pitch_rate_var();
}
inline void OdometryPose::_internal_set_pitch_rate_var(float value) {
  
  pitch_rate_var_ = value;
}
inline void OdometryPose::set_pitch_rate_var(float value) {
  _internal_set_pitch_rate_var(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.pitch_rate_var)
}

// bool is_pitch_rate_valid = 24;
inline void OdometryPose::clear_is_pitch_rate_valid() {
  is_pitch_rate_valid_ = false;
}
inline bool OdometryPose::_internal_is_pitch_rate_valid() const {
  return is_pitch_rate_valid_;
}
inline bool OdometryPose::is_pitch_rate_valid() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.is_pitch_rate_valid)
  return _internal_is_pitch_rate_valid();
}
inline void OdometryPose::_internal_set_is_pitch_rate_valid(bool value) {
  
  is_pitch_rate_valid_ = value;
}
inline void OdometryPose::set_is_pitch_rate_valid(bool value) {
  _internal_set_is_pitch_rate_valid(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.is_pitch_rate_valid)
}

// float can_ax = 25;
inline void OdometryPose::clear_can_ax() {
  can_ax_ = 0;
}
inline float OdometryPose::_internal_can_ax() const {
  return can_ax_;
}
inline float OdometryPose::can_ax() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.can_ax)
  return _internal_can_ax();
}
inline void OdometryPose::_internal_set_can_ax(float value) {
  
  can_ax_ = value;
}
inline void OdometryPose::set_can_ax(float value) {
  _internal_set_can_ax(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.can_ax)
}

// float can_ax_var = 26;
inline void OdometryPose::clear_can_ax_var() {
  can_ax_var_ = 0;
}
inline float OdometryPose::_internal_can_ax_var() const {
  return can_ax_var_;
}
inline float OdometryPose::can_ax_var() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.can_ax_var)
  return _internal_can_ax_var();
}
inline void OdometryPose::_internal_set_can_ax_var(float value) {
  
  can_ax_var_ = value;
}
inline void OdometryPose::set_can_ax_var(float value) {
  _internal_set_can_ax_var(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.can_ax_var)
}

// bool is_can_ax_valid = 27;
inline void OdometryPose::clear_is_can_ax_valid() {
  is_can_ax_valid_ = false;
}
inline bool OdometryPose::_internal_is_can_ax_valid() const {
  return is_can_ax_valid_;
}
inline bool OdometryPose::is_can_ax_valid() const {
  // @@protoc_insertion_point(field_get:minieye.OdometryPose.is_can_ax_valid)
  return _internal_is_can_ax_valid();
}
inline void OdometryPose::_internal_set_is_can_ax_valid(bool value) {
  
  is_can_ax_valid_ = value;
}
inline void OdometryPose::set_is_can_ax_valid(bool value) {
  _internal_set_is_can_ax_valid(value);
  // @@protoc_insertion_point(field_set:minieye.OdometryPose.is_can_ax_valid)
}

// -------------------------------------------------------------------

// Odometry

// repeated .minieye.OdometryPose predict_pose = 1;
inline int Odometry::_internal_predict_pose_size() const {
  return predict_pose_.size();
}
inline int Odometry::predict_pose_size() const {
  return _internal_predict_pose_size();
}
inline void Odometry::clear_predict_pose() {
  predict_pose_.Clear();
}
inline ::minieye::OdometryPose* Odometry::mutable_predict_pose(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.Odometry.predict_pose)
  return predict_pose_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::OdometryPose >*
Odometry::mutable_predict_pose() {
  // @@protoc_insertion_point(field_mutable_list:minieye.Odometry.predict_pose)
  return &predict_pose_;
}
inline const ::minieye::OdometryPose& Odometry::_internal_predict_pose(int index) const {
  return predict_pose_.Get(index);
}
inline const ::minieye::OdometryPose& Odometry::predict_pose(int index) const {
  // @@protoc_insertion_point(field_get:minieye.Odometry.predict_pose)
  return _internal_predict_pose(index);
}
inline ::minieye::OdometryPose* Odometry::_internal_add_predict_pose() {
  return predict_pose_.Add();
}
inline ::minieye::OdometryPose* Odometry::add_predict_pose() {
  // @@protoc_insertion_point(field_add:minieye.Odometry.predict_pose)
  return _internal_add_predict_pose();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::OdometryPose >&
Odometry::predict_pose() const {
  // @@protoc_insertion_point(field_list:minieye.Odometry.predict_pose)
  return predict_pose_;
}

// -------------------------------------------------------------------

// EgoMotion

// float speed_mps = 1;
inline void EgoMotion::clear_speed_mps() {
  speed_mps_ = 0;
}
inline float EgoMotion::_internal_speed_mps() const {
  return speed_mps_;
}
inline float EgoMotion::speed_mps() const {
  // @@protoc_insertion_point(field_get:minieye.EgoMotion.speed_mps)
  return _internal_speed_mps();
}
inline void EgoMotion::_internal_set_speed_mps(float value) {
  
  speed_mps_ = value;
}
inline void EgoMotion::set_speed_mps(float value) {
  _internal_set_speed_mps(value);
  // @@protoc_insertion_point(field_set:minieye.EgoMotion.speed_mps)
}

// bool is_imu_valid = 2;
inline void EgoMotion::clear_is_imu_valid() {
  is_imu_valid_ = false;
}
inline bool EgoMotion::_internal_is_imu_valid() const {
  return is_imu_valid_;
}
inline bool EgoMotion::is_imu_valid() const {
  // @@protoc_insertion_point(field_get:minieye.EgoMotion.is_imu_valid)
  return _internal_is_imu_valid();
}
inline void EgoMotion::_internal_set_is_imu_valid(bool value) {
  
  is_imu_valid_ = value;
}
inline void EgoMotion::set_is_imu_valid(bool value) {
  _internal_set_is_imu_valid(value);
  // @@protoc_insertion_point(field_set:minieye.EgoMotion.is_imu_valid)
}

// float dyaw = 3;
inline void EgoMotion::clear_dyaw() {
  dyaw_ = 0;
}
inline float EgoMotion::_internal_dyaw() const {
  return dyaw_;
}
inline float EgoMotion::dyaw() const {
  // @@protoc_insertion_point(field_get:minieye.EgoMotion.dyaw)
  return _internal_dyaw();
}
inline void EgoMotion::_internal_set_dyaw(float value) {
  
  dyaw_ = value;
}
inline void EgoMotion::set_dyaw(float value) {
  _internal_set_dyaw(value);
  // @@protoc_insertion_point(field_set:minieye.EgoMotion.dyaw)
}

// bool is_dyaw_valid = 4;
inline void EgoMotion::clear_is_dyaw_valid() {
  is_dyaw_valid_ = false;
}
inline bool EgoMotion::_internal_is_dyaw_valid() const {
  return is_dyaw_valid_;
}
inline bool EgoMotion::is_dyaw_valid() const {
  // @@protoc_insertion_point(field_get:minieye.EgoMotion.is_dyaw_valid)
  return _internal_is_dyaw_valid();
}
inline void EgoMotion::_internal_set_is_dyaw_valid(bool value) {
  
  is_dyaw_valid_ = value;
}
inline void EgoMotion::set_is_dyaw_valid(bool value) {
  _internal_set_is_dyaw_valid(value);
  // @@protoc_insertion_point(field_set:minieye.EgoMotion.is_dyaw_valid)
}

// float dpitch = 5;
inline void EgoMotion::clear_dpitch() {
  dpitch_ = 0;
}
inline float EgoMotion::_internal_dpitch() const {
  return dpitch_;
}
inline float EgoMotion::dpitch() const {
  // @@protoc_insertion_point(field_get:minieye.EgoMotion.dpitch)
  return _internal_dpitch();
}
inline void EgoMotion::_internal_set_dpitch(float value) {
  
  dpitch_ = value;
}
inline void EgoMotion::set_dpitch(float value) {
  _internal_set_dpitch(value);
  // @@protoc_insertion_point(field_set:minieye.EgoMotion.dpitch)
}

// bool is_dpitch_valid = 6;
inline void EgoMotion::clear_is_dpitch_valid() {
  is_dpitch_valid_ = false;
}
inline bool EgoMotion::_internal_is_dpitch_valid() const {
  return is_dpitch_valid_;
}
inline bool EgoMotion::is_dpitch_valid() const {
  // @@protoc_insertion_point(field_get:minieye.EgoMotion.is_dpitch_valid)
  return _internal_is_dpitch_valid();
}
inline void EgoMotion::_internal_set_is_dpitch_valid(bool value) {
  
  is_dpitch_valid_ = value;
}
inline void EgoMotion::set_is_dpitch_valid(bool value) {
  _internal_set_is_dpitch_valid(value);
  // @@protoc_insertion_point(field_set:minieye.EgoMotion.is_dpitch_valid)
}

// int32 dt_ms = 7;
inline void EgoMotion::clear_dt_ms() {
  dt_ms_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EgoMotion::_internal_dt_ms() const {
  return dt_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EgoMotion::dt_ms() const {
  // @@protoc_insertion_point(field_get:minieye.EgoMotion.dt_ms)
  return _internal_dt_ms();
}
inline void EgoMotion::_internal_set_dt_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dt_ms_ = value;
}
inline void EgoMotion::set_dt_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dt_ms(value);
  // @@protoc_insertion_point(field_set:minieye.EgoMotion.dt_ms)
}

// uint64 curr_timestamp = 8;
inline void EgoMotion::clear_curr_timestamp() {
  curr_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EgoMotion::_internal_curr_timestamp() const {
  return curr_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EgoMotion::curr_timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.EgoMotion.curr_timestamp)
  return _internal_curr_timestamp();
}
inline void EgoMotion::_internal_set_curr_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  curr_timestamp_ = value;
}
inline void EgoMotion::set_curr_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_curr_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.EgoMotion.curr_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_odometry_2eproto
