// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avm_calib_param.proto

#include "avm_calib_param.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_camera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraParam_camera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_avm_5fcalib_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvmExtrinsInfo_avm_5fcalib_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_avm_5fcalib_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CarInfo_avm_5fcalib_5fparam_2eproto;
namespace minieye {
namespace avm {
class CarInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CarInfo> _instance;
} _CarInfo_default_instance_;
class AvmExtrinsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvmExtrinsInfo> _instance;
} _AvmExtrinsInfo_default_instance_;
class AvmCalibInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvmCalibInfo> _instance;
} _AvmCalibInfo_default_instance_;
}  // namespace avm
}  // namespace minieye
static void InitDefaultsscc_info_AvmCalibInfo_avm_5fcalib_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::avm::_AvmCalibInfo_default_instance_;
    new (ptr) ::minieye::avm::AvmCalibInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::avm::AvmCalibInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AvmCalibInfo_avm_5fcalib_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AvmCalibInfo_avm_5fcalib_5fparam_2eproto}, {
      &scc_info_CameraParam_camera_2eproto.base,
      &scc_info_CarInfo_avm_5fcalib_5fparam_2eproto.base,
      &scc_info_AvmExtrinsInfo_avm_5fcalib_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_AvmExtrinsInfo_avm_5fcalib_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::avm::_AvmExtrinsInfo_default_instance_;
    new (ptr) ::minieye::avm::AvmExtrinsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::avm::AvmExtrinsInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvmExtrinsInfo_avm_5fcalib_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvmExtrinsInfo_avm_5fcalib_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_CarInfo_avm_5fcalib_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::avm::_CarInfo_default_instance_;
    new (ptr) ::minieye::avm::CarInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::avm::CarInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CarInfo_avm_5fcalib_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CarInfo_avm_5fcalib_5fparam_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_avm_5fcalib_5fparam_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_avm_5fcalib_5fparam_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_avm_5fcalib_5fparam_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_avm_5fcalib_5fparam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, car_length_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, car_width_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, car_front_wheelspan_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, car_rear_wheelspan_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, car_wheelbase_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, car_wheelwidth_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, car_front_overhang_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, car_front_blend_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, car_rear_blend_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, car_left_blend_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, car_right_blend_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, front_camera_height_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, rear_camera_height_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, left_camera_height_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, right_camera_height_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, blend_angle_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::CarInfo, blend_hvoffset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmExtrinsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmExtrinsInfo, checker_dw_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmExtrinsInfo, checker_dh_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmExtrinsInfo, vert_num_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmExtrinsInfo, horize_num_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmExtrinsInfo, w_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmExtrinsInfo, h_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmExtrinsInfo, d_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmExtrinsInfo, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmCalibInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmCalibInfo, calib_method_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmCalibInfo, camera_param_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmCalibInfo, car_info_),
  PROTOBUF_FIELD_OFFSET(::minieye::avm::AvmCalibInfo, extrins_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::avm::CarInfo)},
  { 22, -1, sizeof(::minieye::avm::AvmExtrinsInfo)},
  { 35, -1, sizeof(::minieye::avm::AvmCalibInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::avm::_CarInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::avm::_AvmExtrinsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::avm::_AvmCalibInfo_default_instance_),
};

const char descriptor_table_protodef_avm_5fcalib_5fparam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025avm_calib_param.proto\022\013minieye.avm\032\014ca"
  "mera.proto\"\265\003\n\007CarInfo\022\022\n\ncar_length\030\001 \001"
  "(\002\022\021\n\tcar_width\030\002 \001(\002\022\033\n\023car_front_wheel"
  "span\030\003 \001(\002\022\032\n\022car_rear_wheelspan\030\004 \001(\002\022\025"
  "\n\rcar_wheelbase\030\005 \001(\002\022\026\n\016car_wheelWidth\030"
  "\006 \001(\002\022\032\n\022car_front_overhang\030\007 \001(\002\022\027\n\017car"
  "_front_blend\030\010 \001(\002\022\026\n\016car_rear_blend\030\t \001"
  "(\002\022\026\n\016car_left_blend\030\n \001(\002\022\027\n\017car_right_"
  "blend\030\013 \001(\002\022\033\n\023front_camera_height\030\014 \001(\002"
  "\022\032\n\022rear_camera_height\030\r \001(\002\022\032\n\022left_cam"
  "era_height\030\016 \001(\002\022\033\n\023right_camera_height\030"
  "\017 \001(\002\022\023\n\013blend_angle\030\020 \001(\002\022\026\n\016blend_hvOf"
  "fset\030\021 \001(\002\"\212\001\n\016AvmExtrinsInfo\022\022\n\nchecker"
  "_dw\030\001 \001(\002\022\022\n\nchecker_dh\030\002 \001(\002\022\020\n\010vert_nu"
  "m\030\003 \001(\002\022\022\n\nhorize_num\030\004 \001(\002\022\t\n\001w\030\005 \001(\002\022\t"
  "\n\001h\030\006 \001(\002\022\t\n\001d\030\007 \001(\002\022\t\n\001v\030\010 \001(\002\"\310\001\n\014AvmC"
  "alibInfo\0221\n\014calib_method\030\001 \001(\0162\033.minieye"
  ".avm.AvmCalibMethod\022*\n\014camera_param\030\002 \003("
  "\0132\024.minieye.CameraParam\022&\n\010car_info\030\003 \001("
  "\0132\024.minieye.avm.CarInfo\0221\n\014extrins_info\030"
  "\004 \001(\0132\033.minieye.avm.AvmExtrinsInfo*\177\n\016Av"
  "mCalibMethod\022\030\n\024CALIB_METHOD_UNKNOWN\020\000\022\021"
  "\n\rAVM_STATIC_RT\020\001\022\023\n\017AVM_STATIC_HOMO\020\002\022\025"
  "\n\021AVM_DYNAMIC_CALIB\020\003\022\024\n\020AVM_MANUAL_CALI"
  "B\020\004*\364\001\n\014AvmErrorCode\022\024\n\020AVM_NORMAL_STATE"
  "\020\000\022\031\n\025AVM_ERROR_ENPTY_IMAGE\020\001\022!\n\035AVM_ERR"
  "OR_CONNER_NOT_DETECTED\020\002\022\036\n\032AVM_ERROR_AB"
  "NORMAL_EXTRINS\020\003\022\036\n\032AVM_ERROR_ABNORMAL_I"
  "NTRINS\020\004\022 \n\034AVM_ERROR_INVALID_CAMERA_NUM"
  "\020\005\022\026\n\022AVM_ERROR_OPENFILE\020\006\022\026\n\022AVM_ERROR_"
  "SAVEFILE\020\007b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_avm_5fcalib_5fparam_2eproto_deps[1] = {
  &::descriptor_table_camera_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_avm_5fcalib_5fparam_2eproto_sccs[3] = {
  &scc_info_AvmCalibInfo_avm_5fcalib_5fparam_2eproto.base,
  &scc_info_AvmExtrinsInfo_avm_5fcalib_5fparam_2eproto.base,
  &scc_info_CarInfo_avm_5fcalib_5fparam_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_avm_5fcalib_5fparam_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_avm_5fcalib_5fparam_2eproto = {
  false, false, descriptor_table_protodef_avm_5fcalib_5fparam_2eproto, "avm_calib_param.proto", 1218,
  &descriptor_table_avm_5fcalib_5fparam_2eproto_once, descriptor_table_avm_5fcalib_5fparam_2eproto_sccs, descriptor_table_avm_5fcalib_5fparam_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_avm_5fcalib_5fparam_2eproto::offsets,
  file_level_metadata_avm_5fcalib_5fparam_2eproto, 3, file_level_enum_descriptors_avm_5fcalib_5fparam_2eproto, file_level_service_descriptors_avm_5fcalib_5fparam_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_avm_5fcalib_5fparam_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_avm_5fcalib_5fparam_2eproto)), true);
namespace minieye {
namespace avm {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AvmCalibMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_avm_5fcalib_5fparam_2eproto);
  return file_level_enum_descriptors_avm_5fcalib_5fparam_2eproto[0];
}
bool AvmCalibMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AvmErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_avm_5fcalib_5fparam_2eproto);
  return file_level_enum_descriptors_avm_5fcalib_5fparam_2eproto[1];
}
bool AvmErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CarInfo::InitAsDefaultInstance() {
}
class CarInfo::_Internal {
 public:
};

CarInfo::CarInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.avm.CarInfo)
}
CarInfo::CarInfo(const CarInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&car_length_, &from.car_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&blend_hvoffset_) -
    reinterpret_cast<char*>(&car_length_)) + sizeof(blend_hvoffset_));
  // @@protoc_insertion_point(copy_constructor:minieye.avm.CarInfo)
}

void CarInfo::SharedCtor() {
  ::memset(&car_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blend_hvoffset_) -
      reinterpret_cast<char*>(&car_length_)) + sizeof(blend_hvoffset_));
}

CarInfo::~CarInfo() {
  // @@protoc_insertion_point(destructor:minieye.avm.CarInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CarInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CarInfo::ArenaDtor(void* object) {
  CarInfo* _this = reinterpret_cast< CarInfo* >(object);
  (void)_this;
}
void CarInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CarInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CarInfo& CarInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CarInfo_avm_5fcalib_5fparam_2eproto.base);
  return *internal_default_instance();
}


void CarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.avm.CarInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&car_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blend_hvoffset_) -
      reinterpret_cast<char*>(&car_length_)) + sizeof(blend_hvoffset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float car_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          car_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float car_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          car_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float car_front_wheelspan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          car_front_wheelspan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float car_rear_wheelspan = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          car_rear_wheelspan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float car_wheelbase = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          car_wheelbase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float car_wheelWidth = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          car_wheelwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float car_front_overhang = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          car_front_overhang_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float car_front_blend = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          car_front_blend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float car_rear_blend = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          car_rear_blend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float car_left_blend = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          car_left_blend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float car_right_blend = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          car_right_blend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float front_camera_height = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          front_camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rear_camera_height = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          rear_camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float left_camera_height = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          left_camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_camera_height = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          right_camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float blend_angle = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          blend_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float blend_hvOffset = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          blend_hvoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CarInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.avm.CarInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float car_length = 1;
  if (!(this->car_length() <= 0 && this->car_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_car_length(), target);
  }

  // float car_width = 2;
  if (!(this->car_width() <= 0 && this->car_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_car_width(), target);
  }

  // float car_front_wheelspan = 3;
  if (!(this->car_front_wheelspan() <= 0 && this->car_front_wheelspan() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_car_front_wheelspan(), target);
  }

  // float car_rear_wheelspan = 4;
  if (!(this->car_rear_wheelspan() <= 0 && this->car_rear_wheelspan() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_car_rear_wheelspan(), target);
  }

  // float car_wheelbase = 5;
  if (!(this->car_wheelbase() <= 0 && this->car_wheelbase() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_car_wheelbase(), target);
  }

  // float car_wheelWidth = 6;
  if (!(this->car_wheelwidth() <= 0 && this->car_wheelwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_car_wheelwidth(), target);
  }

  // float car_front_overhang = 7;
  if (!(this->car_front_overhang() <= 0 && this->car_front_overhang() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_car_front_overhang(), target);
  }

  // float car_front_blend = 8;
  if (!(this->car_front_blend() <= 0 && this->car_front_blend() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_car_front_blend(), target);
  }

  // float car_rear_blend = 9;
  if (!(this->car_rear_blend() <= 0 && this->car_rear_blend() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_car_rear_blend(), target);
  }

  // float car_left_blend = 10;
  if (!(this->car_left_blend() <= 0 && this->car_left_blend() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_car_left_blend(), target);
  }

  // float car_right_blend = 11;
  if (!(this->car_right_blend() <= 0 && this->car_right_blend() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_car_right_blend(), target);
  }

  // float front_camera_height = 12;
  if (!(this->front_camera_height() <= 0 && this->front_camera_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_front_camera_height(), target);
  }

  // float rear_camera_height = 13;
  if (!(this->rear_camera_height() <= 0 && this->rear_camera_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_rear_camera_height(), target);
  }

  // float left_camera_height = 14;
  if (!(this->left_camera_height() <= 0 && this->left_camera_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_left_camera_height(), target);
  }

  // float right_camera_height = 15;
  if (!(this->right_camera_height() <= 0 && this->right_camera_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_right_camera_height(), target);
  }

  // float blend_angle = 16;
  if (!(this->blend_angle() <= 0 && this->blend_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_blend_angle(), target);
  }

  // float blend_hvOffset = 17;
  if (!(this->blend_hvoffset() <= 0 && this->blend_hvoffset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_blend_hvoffset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.avm.CarInfo)
  return target;
}

size_t CarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.avm.CarInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float car_length = 1;
  if (!(this->car_length() <= 0 && this->car_length() >= 0)) {
    total_size += 1 + 4;
  }

  // float car_width = 2;
  if (!(this->car_width() <= 0 && this->car_width() >= 0)) {
    total_size += 1 + 4;
  }

  // float car_front_wheelspan = 3;
  if (!(this->car_front_wheelspan() <= 0 && this->car_front_wheelspan() >= 0)) {
    total_size += 1 + 4;
  }

  // float car_rear_wheelspan = 4;
  if (!(this->car_rear_wheelspan() <= 0 && this->car_rear_wheelspan() >= 0)) {
    total_size += 1 + 4;
  }

  // float car_wheelbase = 5;
  if (!(this->car_wheelbase() <= 0 && this->car_wheelbase() >= 0)) {
    total_size += 1 + 4;
  }

  // float car_wheelWidth = 6;
  if (!(this->car_wheelwidth() <= 0 && this->car_wheelwidth() >= 0)) {
    total_size += 1 + 4;
  }

  // float car_front_overhang = 7;
  if (!(this->car_front_overhang() <= 0 && this->car_front_overhang() >= 0)) {
    total_size += 1 + 4;
  }

  // float car_front_blend = 8;
  if (!(this->car_front_blend() <= 0 && this->car_front_blend() >= 0)) {
    total_size += 1 + 4;
  }

  // float car_rear_blend = 9;
  if (!(this->car_rear_blend() <= 0 && this->car_rear_blend() >= 0)) {
    total_size += 1 + 4;
  }

  // float car_left_blend = 10;
  if (!(this->car_left_blend() <= 0 && this->car_left_blend() >= 0)) {
    total_size += 1 + 4;
  }

  // float car_right_blend = 11;
  if (!(this->car_right_blend() <= 0 && this->car_right_blend() >= 0)) {
    total_size += 1 + 4;
  }

  // float front_camera_height = 12;
  if (!(this->front_camera_height() <= 0 && this->front_camera_height() >= 0)) {
    total_size += 1 + 4;
  }

  // float rear_camera_height = 13;
  if (!(this->rear_camera_height() <= 0 && this->rear_camera_height() >= 0)) {
    total_size += 1 + 4;
  }

  // float left_camera_height = 14;
  if (!(this->left_camera_height() <= 0 && this->left_camera_height() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_camera_height = 15;
  if (!(this->right_camera_height() <= 0 && this->right_camera_height() >= 0)) {
    total_size += 1 + 4;
  }

  // float blend_angle = 16;
  if (!(this->blend_angle() <= 0 && this->blend_angle() >= 0)) {
    total_size += 2 + 4;
  }

  // float blend_hvOffset = 17;
  if (!(this->blend_hvoffset() <= 0 && this->blend_hvoffset() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CarInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.avm.CarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CarInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CarInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.avm.CarInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.avm.CarInfo)
    MergeFrom(*source);
  }
}

void CarInfo::MergeFrom(const CarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.avm.CarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.car_length() <= 0 && from.car_length() >= 0)) {
    _internal_set_car_length(from._internal_car_length());
  }
  if (!(from.car_width() <= 0 && from.car_width() >= 0)) {
    _internal_set_car_width(from._internal_car_width());
  }
  if (!(from.car_front_wheelspan() <= 0 && from.car_front_wheelspan() >= 0)) {
    _internal_set_car_front_wheelspan(from._internal_car_front_wheelspan());
  }
  if (!(from.car_rear_wheelspan() <= 0 && from.car_rear_wheelspan() >= 0)) {
    _internal_set_car_rear_wheelspan(from._internal_car_rear_wheelspan());
  }
  if (!(from.car_wheelbase() <= 0 && from.car_wheelbase() >= 0)) {
    _internal_set_car_wheelbase(from._internal_car_wheelbase());
  }
  if (!(from.car_wheelwidth() <= 0 && from.car_wheelwidth() >= 0)) {
    _internal_set_car_wheelwidth(from._internal_car_wheelwidth());
  }
  if (!(from.car_front_overhang() <= 0 && from.car_front_overhang() >= 0)) {
    _internal_set_car_front_overhang(from._internal_car_front_overhang());
  }
  if (!(from.car_front_blend() <= 0 && from.car_front_blend() >= 0)) {
    _internal_set_car_front_blend(from._internal_car_front_blend());
  }
  if (!(from.car_rear_blend() <= 0 && from.car_rear_blend() >= 0)) {
    _internal_set_car_rear_blend(from._internal_car_rear_blend());
  }
  if (!(from.car_left_blend() <= 0 && from.car_left_blend() >= 0)) {
    _internal_set_car_left_blend(from._internal_car_left_blend());
  }
  if (!(from.car_right_blend() <= 0 && from.car_right_blend() >= 0)) {
    _internal_set_car_right_blend(from._internal_car_right_blend());
  }
  if (!(from.front_camera_height() <= 0 && from.front_camera_height() >= 0)) {
    _internal_set_front_camera_height(from._internal_front_camera_height());
  }
  if (!(from.rear_camera_height() <= 0 && from.rear_camera_height() >= 0)) {
    _internal_set_rear_camera_height(from._internal_rear_camera_height());
  }
  if (!(from.left_camera_height() <= 0 && from.left_camera_height() >= 0)) {
    _internal_set_left_camera_height(from._internal_left_camera_height());
  }
  if (!(from.right_camera_height() <= 0 && from.right_camera_height() >= 0)) {
    _internal_set_right_camera_height(from._internal_right_camera_height());
  }
  if (!(from.blend_angle() <= 0 && from.blend_angle() >= 0)) {
    _internal_set_blend_angle(from._internal_blend_angle());
  }
  if (!(from.blend_hvoffset() <= 0 && from.blend_hvoffset() >= 0)) {
    _internal_set_blend_hvoffset(from._internal_blend_hvoffset());
  }
}

void CarInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.avm.CarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarInfo::CopyFrom(const CarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.avm.CarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarInfo::IsInitialized() const {
  return true;
}

void CarInfo::InternalSwap(CarInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarInfo, blend_hvoffset_)
      + sizeof(CarInfo::blend_hvoffset_)
      - PROTOBUF_FIELD_OFFSET(CarInfo, car_length_)>(
          reinterpret_cast<char*>(&car_length_),
          reinterpret_cast<char*>(&other->car_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AvmExtrinsInfo::InitAsDefaultInstance() {
}
class AvmExtrinsInfo::_Internal {
 public:
};

AvmExtrinsInfo::AvmExtrinsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.avm.AvmExtrinsInfo)
}
AvmExtrinsInfo::AvmExtrinsInfo(const AvmExtrinsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&checker_dw_, &from.checker_dw_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&checker_dw_)) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:minieye.avm.AvmExtrinsInfo)
}

void AvmExtrinsInfo::SharedCtor() {
  ::memset(&checker_dw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&checker_dw_)) + sizeof(v_));
}

AvmExtrinsInfo::~AvmExtrinsInfo() {
  // @@protoc_insertion_point(destructor:minieye.avm.AvmExtrinsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AvmExtrinsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AvmExtrinsInfo::ArenaDtor(void* object) {
  AvmExtrinsInfo* _this = reinterpret_cast< AvmExtrinsInfo* >(object);
  (void)_this;
}
void AvmExtrinsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AvmExtrinsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvmExtrinsInfo& AvmExtrinsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvmExtrinsInfo_avm_5fcalib_5fparam_2eproto.base);
  return *internal_default_instance();
}


void AvmExtrinsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.avm.AvmExtrinsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&checker_dw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&checker_dw_)) + sizeof(v_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvmExtrinsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float checker_dw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          checker_dw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float checker_dh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          checker_dh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vert_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          vert_num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float horize_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          horize_num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float w = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float h = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float d = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float v = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvmExtrinsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.avm.AvmExtrinsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float checker_dw = 1;
  if (!(this->checker_dw() <= 0 && this->checker_dw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_checker_dw(), target);
  }

  // float checker_dh = 2;
  if (!(this->checker_dh() <= 0 && this->checker_dh() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_checker_dh(), target);
  }

  // float vert_num = 3;
  if (!(this->vert_num() <= 0 && this->vert_num() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_vert_num(), target);
  }

  // float horize_num = 4;
  if (!(this->horize_num() <= 0 && this->horize_num() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_horize_num(), target);
  }

  // float w = 5;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_w(), target);
  }

  // float h = 6;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_h(), target);
  }

  // float d = 7;
  if (!(this->d() <= 0 && this->d() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_d(), target);
  }

  // float v = 8;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.avm.AvmExtrinsInfo)
  return target;
}

size_t AvmExtrinsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.avm.AvmExtrinsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float checker_dw = 1;
  if (!(this->checker_dw() <= 0 && this->checker_dw() >= 0)) {
    total_size += 1 + 4;
  }

  // float checker_dh = 2;
  if (!(this->checker_dh() <= 0 && this->checker_dh() >= 0)) {
    total_size += 1 + 4;
  }

  // float vert_num = 3;
  if (!(this->vert_num() <= 0 && this->vert_num() >= 0)) {
    total_size += 1 + 4;
  }

  // float horize_num = 4;
  if (!(this->horize_num() <= 0 && this->horize_num() >= 0)) {
    total_size += 1 + 4;
  }

  // float w = 5;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 4;
  }

  // float h = 6;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    total_size += 1 + 4;
  }

  // float d = 7;
  if (!(this->d() <= 0 && this->d() >= 0)) {
    total_size += 1 + 4;
  }

  // float v = 8;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvmExtrinsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.avm.AvmExtrinsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AvmExtrinsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AvmExtrinsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.avm.AvmExtrinsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.avm.AvmExtrinsInfo)
    MergeFrom(*source);
  }
}

void AvmExtrinsInfo::MergeFrom(const AvmExtrinsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.avm.AvmExtrinsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.checker_dw() <= 0 && from.checker_dw() >= 0)) {
    _internal_set_checker_dw(from._internal_checker_dw());
  }
  if (!(from.checker_dh() <= 0 && from.checker_dh() >= 0)) {
    _internal_set_checker_dh(from._internal_checker_dh());
  }
  if (!(from.vert_num() <= 0 && from.vert_num() >= 0)) {
    _internal_set_vert_num(from._internal_vert_num());
  }
  if (!(from.horize_num() <= 0 && from.horize_num() >= 0)) {
    _internal_set_horize_num(from._internal_horize_num());
  }
  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from.h() <= 0 && from.h() >= 0)) {
    _internal_set_h(from._internal_h());
  }
  if (!(from.d() <= 0 && from.d() >= 0)) {
    _internal_set_d(from._internal_d());
  }
  if (!(from.v() <= 0 && from.v() >= 0)) {
    _internal_set_v(from._internal_v());
  }
}

void AvmExtrinsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.avm.AvmExtrinsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvmExtrinsInfo::CopyFrom(const AvmExtrinsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.avm.AvmExtrinsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvmExtrinsInfo::IsInitialized() const {
  return true;
}

void AvmExtrinsInfo::InternalSwap(AvmExtrinsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AvmExtrinsInfo, v_)
      + sizeof(AvmExtrinsInfo::v_)
      - PROTOBUF_FIELD_OFFSET(AvmExtrinsInfo, checker_dw_)>(
          reinterpret_cast<char*>(&checker_dw_),
          reinterpret_cast<char*>(&other->checker_dw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AvmExtrinsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AvmCalibInfo::InitAsDefaultInstance() {
  ::minieye::avm::_AvmCalibInfo_default_instance_._instance.get_mutable()->car_info_ = const_cast< ::minieye::avm::CarInfo*>(
      ::minieye::avm::CarInfo::internal_default_instance());
  ::minieye::avm::_AvmCalibInfo_default_instance_._instance.get_mutable()->extrins_info_ = const_cast< ::minieye::avm::AvmExtrinsInfo*>(
      ::minieye::avm::AvmExtrinsInfo::internal_default_instance());
}
class AvmCalibInfo::_Internal {
 public:
  static const ::minieye::avm::CarInfo& car_info(const AvmCalibInfo* msg);
  static const ::minieye::avm::AvmExtrinsInfo& extrins_info(const AvmCalibInfo* msg);
};

const ::minieye::avm::CarInfo&
AvmCalibInfo::_Internal::car_info(const AvmCalibInfo* msg) {
  return *msg->car_info_;
}
const ::minieye::avm::AvmExtrinsInfo&
AvmCalibInfo::_Internal::extrins_info(const AvmCalibInfo* msg) {
  return *msg->extrins_info_;
}
void AvmCalibInfo::clear_camera_param() {
  camera_param_.Clear();
}
AvmCalibInfo::AvmCalibInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  camera_param_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.avm.AvmCalibInfo)
}
AvmCalibInfo::AvmCalibInfo(const AvmCalibInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      camera_param_(from.camera_param_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_car_info()) {
    car_info_ = new ::minieye::avm::CarInfo(*from.car_info_);
  } else {
    car_info_ = nullptr;
  }
  if (from._internal_has_extrins_info()) {
    extrins_info_ = new ::minieye::avm::AvmExtrinsInfo(*from.extrins_info_);
  } else {
    extrins_info_ = nullptr;
  }
  calib_method_ = from.calib_method_;
  // @@protoc_insertion_point(copy_constructor:minieye.avm.AvmCalibInfo)
}

void AvmCalibInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AvmCalibInfo_avm_5fcalib_5fparam_2eproto.base);
  ::memset(&car_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calib_method_) -
      reinterpret_cast<char*>(&car_info_)) + sizeof(calib_method_));
}

AvmCalibInfo::~AvmCalibInfo() {
  // @@protoc_insertion_point(destructor:minieye.avm.AvmCalibInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AvmCalibInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete car_info_;
  if (this != internal_default_instance()) delete extrins_info_;
}

void AvmCalibInfo::ArenaDtor(void* object) {
  AvmCalibInfo* _this = reinterpret_cast< AvmCalibInfo* >(object);
  (void)_this;
}
void AvmCalibInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AvmCalibInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvmCalibInfo& AvmCalibInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvmCalibInfo_avm_5fcalib_5fparam_2eproto.base);
  return *internal_default_instance();
}


void AvmCalibInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.avm.AvmCalibInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_param_.Clear();
  if (GetArena() == nullptr && car_info_ != nullptr) {
    delete car_info_;
  }
  car_info_ = nullptr;
  if (GetArena() == nullptr && extrins_info_ != nullptr) {
    delete extrins_info_;
  }
  extrins_info_ = nullptr;
  calib_method_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvmCalibInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.avm.AvmCalibMethod calib_method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_calib_method(static_cast<::minieye::avm::AvmCalibMethod>(val));
        } else goto handle_unusual;
        continue;
      // repeated .minieye.CameraParam camera_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .minieye.avm.CarInfo car_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_car_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.avm.AvmExtrinsInfo extrins_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_extrins_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvmCalibInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.avm.AvmCalibInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.avm.AvmCalibMethod calib_method = 1;
  if (this->calib_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_calib_method(), target);
  }

  // repeated .minieye.CameraParam camera_param = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_camera_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_camera_param(i), target, stream);
  }

  // .minieye.avm.CarInfo car_info = 3;
  if (this->has_car_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::car_info(this), target, stream);
  }

  // .minieye.avm.AvmExtrinsInfo extrins_info = 4;
  if (this->has_extrins_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::extrins_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.avm.AvmCalibInfo)
  return target;
}

size_t AvmCalibInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.avm.AvmCalibInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.CameraParam camera_param = 2;
  total_size += 1UL * this->_internal_camera_param_size();
  for (const auto& msg : this->camera_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .minieye.avm.CarInfo car_info = 3;
  if (this->has_car_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *car_info_);
  }

  // .minieye.avm.AvmExtrinsInfo extrins_info = 4;
  if (this->has_extrins_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extrins_info_);
  }

  // .minieye.avm.AvmCalibMethod calib_method = 1;
  if (this->calib_method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_calib_method());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvmCalibInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.avm.AvmCalibInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AvmCalibInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AvmCalibInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.avm.AvmCalibInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.avm.AvmCalibInfo)
    MergeFrom(*source);
  }
}

void AvmCalibInfo::MergeFrom(const AvmCalibInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.avm.AvmCalibInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camera_param_.MergeFrom(from.camera_param_);
  if (from.has_car_info()) {
    _internal_mutable_car_info()->::minieye::avm::CarInfo::MergeFrom(from._internal_car_info());
  }
  if (from.has_extrins_info()) {
    _internal_mutable_extrins_info()->::minieye::avm::AvmExtrinsInfo::MergeFrom(from._internal_extrins_info());
  }
  if (from.calib_method() != 0) {
    _internal_set_calib_method(from._internal_calib_method());
  }
}

void AvmCalibInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.avm.AvmCalibInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvmCalibInfo::CopyFrom(const AvmCalibInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.avm.AvmCalibInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvmCalibInfo::IsInitialized() const {
  return true;
}

void AvmCalibInfo::InternalSwap(AvmCalibInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  camera_param_.InternalSwap(&other->camera_param_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AvmCalibInfo, calib_method_)
      + sizeof(AvmCalibInfo::calib_method_)
      - PROTOBUF_FIELD_OFFSET(AvmCalibInfo, car_info_)>(
          reinterpret_cast<char*>(&car_info_),
          reinterpret_cast<char*>(&other->car_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AvmCalibInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace avm
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::avm::CarInfo* Arena::CreateMaybeMessage< ::minieye::avm::CarInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::avm::CarInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::avm::AvmExtrinsInfo* Arena::CreateMaybeMessage< ::minieye::avm::AvmExtrinsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::avm::AvmExtrinsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::avm::AvmCalibInfo* Arena::CreateMaybeMessage< ::minieye::avm::AvmCalibInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::avm::AvmCalibInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
