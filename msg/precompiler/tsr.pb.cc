// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsr.proto

#include "tsr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tsr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tsr_TsrTraceRes_tsr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tsr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tsr_TsrWarning_tsr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rect2f_geometry_2eproto;
namespace perception {
class Tsr_TsrTraceResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tsr_TsrTraceRes> _instance;
} _Tsr_TsrTraceRes_default_instance_;
class Tsr_TsrWarningDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tsr_TsrWarning> _instance;
} _Tsr_TsrWarning_default_instance_;
class TsrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tsr> _instance;
} _Tsr_default_instance_;
}  // namespace perception
static void InitDefaultsscc_info_Tsr_tsr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Tsr_default_instance_;
    new (ptr) ::perception::Tsr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Tsr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Tsr_tsr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Tsr_tsr_2eproto}, {
      &scc_info_Tsr_TsrTraceRes_tsr_2eproto.base,
      &scc_info_Tsr_TsrWarning_tsr_2eproto.base,}};

static void InitDefaultsscc_info_Tsr_TsrTraceRes_tsr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Tsr_TsrTraceRes_default_instance_;
    new (ptr) ::perception::Tsr_TsrTraceRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Tsr_TsrTraceRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tsr_TsrTraceRes_tsr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Tsr_TsrTraceRes_tsr_2eproto}, {
      &scc_info_Rect2f_geometry_2eproto.base,}};

static void InitDefaultsscc_info_Tsr_TsrWarning_tsr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Tsr_TsrWarning_default_instance_;
    new (ptr) ::perception::Tsr_TsrWarning();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Tsr_TsrWarning::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tsr_TsrWarning_tsr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Tsr_TsrWarning_tsr_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tsr_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tsr_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tsr_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tsr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrTraceRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrTraceRes, det_rect_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrTraceRes, confidence_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrTraceRes, hit_type_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrTraceRes, tsr_class_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrTraceRes, tsr_value_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrTraceRes, tsr_id_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrTraceRes, track_cnt_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrTraceRes, longitudinal_dist_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrTraceRes, lateral_dist_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrTraceRes, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrWarning, height_limit_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrWarning, weight_limit_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrWarning, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr_TsrWarning, tsr_warning_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::Tsr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::Tsr, frame_id_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr, tsr_list_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr, tsr_warning_),
  PROTOBUF_FIELD_OFFSET(::perception::Tsr, data_source_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perception::Tsr_TsrTraceRes)},
  { 15, -1, sizeof(::perception::Tsr_TsrWarning)},
  { 24, -1, sizeof(::perception::Tsr)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Tsr_TsrTraceRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Tsr_TsrWarning_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_Tsr_default_instance_),
};

const char descriptor_table_protodef_tsr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ttsr.proto\022\nperception\032\016geometry.proto\032"
  "\021data_source.proto\"\213\004\n\003Tsr\022\020\n\010frame_id\030\001"
  " \001(\004\022\021\n\ttimestamp\030\002 \001(\004\022-\n\010tsr_list\030\003 \003("
  "\0132\033.perception.Tsr.TsrTraceRes\022/\n\013tsr_wa"
  "rning\030\004 \001(\0132\032.perception.Tsr.TsrWarning\022"
  "(\n\013data_source\030\005 \001(\0162\023.minieye.DataSourc"
  "e\032\352\001\n\013TsrTraceRes\022+\n\010det_rect\030\001 \001(\0132\031.pe"
  "rception.common.Rect2f\022\022\n\nconfidence\030\002 \001"
  "(\002\022\020\n\010hit_type\030\003 \001(\005\022\021\n\ttsr_class\030\004 \001(\005\022"
  "\021\n\ttsr_value\030\005 \001(\005\022\016\n\006tsr_id\030\006 \001(\005\022\021\n\ttr"
  "ack_cnt\030\007 \001(\005\022\031\n\021longitudinal_dist\030\010 \001(\002"
  "\022\024\n\014lateral_dist\030\t \001(\002\022\016\n\006height\030\n \001(\002\032h"
  "\n\nTsrWarning\022\024\n\014height_limit\030\001 \001(\002\022\024\n\014we"
  "ight_limit\030\002 \001(\002\022\023\n\013speed_limit\030\003 \001(\005\022\031\n"
  "\021tsr_warning_level\030\004 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tsr_2eproto_deps[2] = {
  &::descriptor_table_data_5fsource_2eproto,
  &::descriptor_table_geometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tsr_2eproto_sccs[3] = {
  &scc_info_Tsr_tsr_2eproto.base,
  &scc_info_Tsr_TsrTraceRes_tsr_2eproto.base,
  &scc_info_Tsr_TsrWarning_tsr_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tsr_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tsr_2eproto = {
  false, false, descriptor_table_protodef_tsr_2eproto, "tsr.proto", 592,
  &descriptor_table_tsr_2eproto_once, descriptor_table_tsr_2eproto_sccs, descriptor_table_tsr_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_tsr_2eproto::offsets,
  file_level_metadata_tsr_2eproto, 3, file_level_enum_descriptors_tsr_2eproto, file_level_service_descriptors_tsr_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tsr_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tsr_2eproto)), true);
namespace perception {

// ===================================================================

void Tsr_TsrTraceRes::InitAsDefaultInstance() {
  ::perception::_Tsr_TsrTraceRes_default_instance_._instance.get_mutable()->det_rect_ = const_cast< ::perception::common::Rect2f*>(
      ::perception::common::Rect2f::internal_default_instance());
}
class Tsr_TsrTraceRes::_Internal {
 public:
  static const ::perception::common::Rect2f& det_rect(const Tsr_TsrTraceRes* msg);
};

const ::perception::common::Rect2f&
Tsr_TsrTraceRes::_Internal::det_rect(const Tsr_TsrTraceRes* msg) {
  return *msg->det_rect_;
}
void Tsr_TsrTraceRes::clear_det_rect() {
  if (GetArena() == nullptr && det_rect_ != nullptr) {
    delete det_rect_;
  }
  det_rect_ = nullptr;
}
Tsr_TsrTraceRes::Tsr_TsrTraceRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Tsr.TsrTraceRes)
}
Tsr_TsrTraceRes::Tsr_TsrTraceRes(const Tsr_TsrTraceRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_det_rect()) {
    det_rect_ = new ::perception::common::Rect2f(*from.det_rect_);
  } else {
    det_rect_ = nullptr;
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:perception.Tsr.TsrTraceRes)
}

void Tsr_TsrTraceRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tsr_TsrTraceRes_tsr_2eproto.base);
  ::memset(&det_rect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&det_rect_)) + sizeof(height_));
}

Tsr_TsrTraceRes::~Tsr_TsrTraceRes() {
  // @@protoc_insertion_point(destructor:perception.Tsr.TsrTraceRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tsr_TsrTraceRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete det_rect_;
}

void Tsr_TsrTraceRes::ArenaDtor(void* object) {
  Tsr_TsrTraceRes* _this = reinterpret_cast< Tsr_TsrTraceRes* >(object);
  (void)_this;
}
void Tsr_TsrTraceRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tsr_TsrTraceRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsr_TsrTraceRes& Tsr_TsrTraceRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tsr_TsrTraceRes_tsr_2eproto.base);
  return *internal_default_instance();
}


void Tsr_TsrTraceRes::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Tsr.TsrTraceRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && det_rect_ != nullptr) {
    delete det_rect_;
  }
  det_rect_ = nullptr;
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tsr_TsrTraceRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.common.Rect2f det_rect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_det_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 hit_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hit_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tsr_class = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tsr_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tsr_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tsr_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tsr_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tsr_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 track_cnt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          track_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float longitudinal_dist = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          longitudinal_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lateral_dist = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          lateral_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tsr_TsrTraceRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Tsr.TsrTraceRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.common.Rect2f det_rect = 1;
  if (this->has_det_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::det_rect(this), target, stream);
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_confidence(), target);
  }

  // int32 hit_type = 3;
  if (this->hit_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hit_type(), target);
  }

  // int32 tsr_class = 4;
  if (this->tsr_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tsr_class(), target);
  }

  // int32 tsr_value = 5;
  if (this->tsr_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_tsr_value(), target);
  }

  // int32 tsr_id = 6;
  if (this->tsr_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_tsr_id(), target);
  }

  // int32 track_cnt = 7;
  if (this->track_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_track_cnt(), target);
  }

  // float longitudinal_dist = 8;
  if (!(this->longitudinal_dist() <= 0 && this->longitudinal_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_longitudinal_dist(), target);
  }

  // float lateral_dist = 9;
  if (!(this->lateral_dist() <= 0 && this->lateral_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_lateral_dist(), target);
  }

  // float height = 10;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Tsr.TsrTraceRes)
  return target;
}

size_t Tsr_TsrTraceRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Tsr.TsrTraceRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.common.Rect2f det_rect = 1;
  if (this->has_det_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *det_rect_);
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 hit_type = 3;
  if (this->hit_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hit_type());
  }

  // int32 tsr_class = 4;
  if (this->tsr_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tsr_class());
  }

  // int32 tsr_value = 5;
  if (this->tsr_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tsr_value());
  }

  // int32 tsr_id = 6;
  if (this->tsr_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tsr_id());
  }

  // int32 track_cnt = 7;
  if (this->track_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_track_cnt());
  }

  // float longitudinal_dist = 8;
  if (!(this->longitudinal_dist() <= 0 && this->longitudinal_dist() >= 0)) {
    total_size += 1 + 4;
  }

  // float lateral_dist = 9;
  if (!(this->lateral_dist() <= 0 && this->lateral_dist() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 10;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsr_TsrTraceRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Tsr.TsrTraceRes)
  GOOGLE_DCHECK_NE(&from, this);
  const Tsr_TsrTraceRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tsr_TsrTraceRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Tsr.TsrTraceRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Tsr.TsrTraceRes)
    MergeFrom(*source);
  }
}

void Tsr_TsrTraceRes::MergeFrom(const Tsr_TsrTraceRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Tsr.TsrTraceRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_det_rect()) {
    _internal_mutable_det_rect()->::perception::common::Rect2f::MergeFrom(from._internal_det_rect());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from.hit_type() != 0) {
    _internal_set_hit_type(from._internal_hit_type());
  }
  if (from.tsr_class() != 0) {
    _internal_set_tsr_class(from._internal_tsr_class());
  }
  if (from.tsr_value() != 0) {
    _internal_set_tsr_value(from._internal_tsr_value());
  }
  if (from.tsr_id() != 0) {
    _internal_set_tsr_id(from._internal_tsr_id());
  }
  if (from.track_cnt() != 0) {
    _internal_set_track_cnt(from._internal_track_cnt());
  }
  if (!(from.longitudinal_dist() <= 0 && from.longitudinal_dist() >= 0)) {
    _internal_set_longitudinal_dist(from._internal_longitudinal_dist());
  }
  if (!(from.lateral_dist() <= 0 && from.lateral_dist() >= 0)) {
    _internal_set_lateral_dist(from._internal_lateral_dist());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
}

void Tsr_TsrTraceRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Tsr.TsrTraceRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tsr_TsrTraceRes::CopyFrom(const Tsr_TsrTraceRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Tsr.TsrTraceRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsr_TsrTraceRes::IsInitialized() const {
  return true;
}

void Tsr_TsrTraceRes::InternalSwap(Tsr_TsrTraceRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tsr_TsrTraceRes, height_)
      + sizeof(Tsr_TsrTraceRes::height_)
      - PROTOBUF_FIELD_OFFSET(Tsr_TsrTraceRes, det_rect_)>(
          reinterpret_cast<char*>(&det_rect_),
          reinterpret_cast<char*>(&other->det_rect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tsr_TsrTraceRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tsr_TsrWarning::InitAsDefaultInstance() {
}
class Tsr_TsrWarning::_Internal {
 public:
};

Tsr_TsrWarning::Tsr_TsrWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Tsr.TsrWarning)
}
Tsr_TsrWarning::Tsr_TsrWarning(const Tsr_TsrWarning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_limit_, &from.height_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&tsr_warning_level_) -
    reinterpret_cast<char*>(&height_limit_)) + sizeof(tsr_warning_level_));
  // @@protoc_insertion_point(copy_constructor:perception.Tsr.TsrWarning)
}

void Tsr_TsrWarning::SharedCtor() {
  ::memset(&height_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tsr_warning_level_) -
      reinterpret_cast<char*>(&height_limit_)) + sizeof(tsr_warning_level_));
}

Tsr_TsrWarning::~Tsr_TsrWarning() {
  // @@protoc_insertion_point(destructor:perception.Tsr.TsrWarning)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tsr_TsrWarning::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Tsr_TsrWarning::ArenaDtor(void* object) {
  Tsr_TsrWarning* _this = reinterpret_cast< Tsr_TsrWarning* >(object);
  (void)_this;
}
void Tsr_TsrWarning::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tsr_TsrWarning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsr_TsrWarning& Tsr_TsrWarning::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tsr_TsrWarning_tsr_2eproto.base);
  return *internal_default_instance();
}


void Tsr_TsrWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Tsr.TsrWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tsr_warning_level_) -
      reinterpret_cast<char*>(&height_limit_)) + sizeof(tsr_warning_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tsr_TsrWarning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float height_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          height_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float weight_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          weight_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 speed_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tsr_warning_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tsr_warning_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tsr_TsrWarning::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Tsr.TsrWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float height_limit = 1;
  if (!(this->height_limit() <= 0 && this->height_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_height_limit(), target);
  }

  // float weight_limit = 2;
  if (!(this->weight_limit() <= 0 && this->weight_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_weight_limit(), target);
  }

  // int32 speed_limit = 3;
  if (this->speed_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_speed_limit(), target);
  }

  // int32 tsr_warning_level = 4;
  if (this->tsr_warning_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tsr_warning_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Tsr.TsrWarning)
  return target;
}

size_t Tsr_TsrWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Tsr.TsrWarning)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float height_limit = 1;
  if (!(this->height_limit() <= 0 && this->height_limit() >= 0)) {
    total_size += 1 + 4;
  }

  // float weight_limit = 2;
  if (!(this->weight_limit() <= 0 && this->weight_limit() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 speed_limit = 3;
  if (this->speed_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speed_limit());
  }

  // int32 tsr_warning_level = 4;
  if (this->tsr_warning_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tsr_warning_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsr_TsrWarning::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Tsr.TsrWarning)
  GOOGLE_DCHECK_NE(&from, this);
  const Tsr_TsrWarning* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tsr_TsrWarning>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Tsr.TsrWarning)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Tsr.TsrWarning)
    MergeFrom(*source);
  }
}

void Tsr_TsrWarning::MergeFrom(const Tsr_TsrWarning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Tsr.TsrWarning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.height_limit() <= 0 && from.height_limit() >= 0)) {
    _internal_set_height_limit(from._internal_height_limit());
  }
  if (!(from.weight_limit() <= 0 && from.weight_limit() >= 0)) {
    _internal_set_weight_limit(from._internal_weight_limit());
  }
  if (from.speed_limit() != 0) {
    _internal_set_speed_limit(from._internal_speed_limit());
  }
  if (from.tsr_warning_level() != 0) {
    _internal_set_tsr_warning_level(from._internal_tsr_warning_level());
  }
}

void Tsr_TsrWarning::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Tsr.TsrWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tsr_TsrWarning::CopyFrom(const Tsr_TsrWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Tsr.TsrWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsr_TsrWarning::IsInitialized() const {
  return true;
}

void Tsr_TsrWarning::InternalSwap(Tsr_TsrWarning* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tsr_TsrWarning, tsr_warning_level_)
      + sizeof(Tsr_TsrWarning::tsr_warning_level_)
      - PROTOBUF_FIELD_OFFSET(Tsr_TsrWarning, height_limit_)>(
          reinterpret_cast<char*>(&height_limit_),
          reinterpret_cast<char*>(&other->height_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tsr_TsrWarning::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tsr::InitAsDefaultInstance() {
  ::perception::_Tsr_default_instance_._instance.get_mutable()->tsr_warning_ = const_cast< ::perception::Tsr_TsrWarning*>(
      ::perception::Tsr_TsrWarning::internal_default_instance());
}
class Tsr::_Internal {
 public:
  static const ::perception::Tsr_TsrWarning& tsr_warning(const Tsr* msg);
};

const ::perception::Tsr_TsrWarning&
Tsr::_Internal::tsr_warning(const Tsr* msg) {
  return *msg->tsr_warning_;
}
Tsr::Tsr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tsr_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.Tsr)
}
Tsr::Tsr(const Tsr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tsr_list_(from.tsr_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tsr_warning()) {
    tsr_warning_ = new ::perception::Tsr_TsrWarning(*from.tsr_warning_);
  } else {
    tsr_warning_ = nullptr;
  }
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_source_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(data_source_));
  // @@protoc_insertion_point(copy_constructor:perception.Tsr)
}

void Tsr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tsr_tsr_2eproto.base);
  ::memset(&tsr_warning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_source_) -
      reinterpret_cast<char*>(&tsr_warning_)) + sizeof(data_source_));
}

Tsr::~Tsr() {
  // @@protoc_insertion_point(destructor:perception.Tsr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tsr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tsr_warning_;
}

void Tsr::ArenaDtor(void* object) {
  Tsr* _this = reinterpret_cast< Tsr* >(object);
  (void)_this;
}
void Tsr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tsr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsr& Tsr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tsr_tsr_2eproto.base);
  return *internal_default_instance();
}


void Tsr::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Tsr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tsr_list_.Clear();
  if (GetArena() == nullptr && tsr_warning_ != nullptr) {
    delete tsr_warning_;
  }
  tsr_warning_ = nullptr;
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_source_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(data_source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tsr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.Tsr.TsrTraceRes tsr_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tsr_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .perception.Tsr.TsrWarning tsr_warning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tsr_warning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.DataSource data_source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_source(static_cast<::minieye::DataSource>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tsr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Tsr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // repeated .perception.Tsr.TsrTraceRes tsr_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tsr_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tsr_list(i), target, stream);
  }

  // .perception.Tsr.TsrWarning tsr_warning = 4;
  if (this->has_tsr_warning()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tsr_warning(this), target, stream);
  }

  // .minieye.DataSource data_source = 5;
  if (this->data_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_data_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Tsr)
  return target;
}

size_t Tsr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Tsr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.Tsr.TsrTraceRes tsr_list = 3;
  total_size += 1UL * this->_internal_tsr_list_size();
  for (const auto& msg : this->tsr_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .perception.Tsr.TsrWarning tsr_warning = 4;
  if (this->has_tsr_warning()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tsr_warning_);
  }

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // .minieye.DataSource data_source = 5;
  if (this->data_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Tsr)
  GOOGLE_DCHECK_NE(&from, this);
  const Tsr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tsr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Tsr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Tsr)
    MergeFrom(*source);
  }
}

void Tsr::MergeFrom(const Tsr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Tsr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tsr_list_.MergeFrom(from.tsr_list_);
  if (from.has_tsr_warning()) {
    _internal_mutable_tsr_warning()->::perception::Tsr_TsrWarning::MergeFrom(from._internal_tsr_warning());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.data_source() != 0) {
    _internal_set_data_source(from._internal_data_source());
  }
}

void Tsr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Tsr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tsr::CopyFrom(const Tsr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Tsr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsr::IsInitialized() const {
  return true;
}

void Tsr::InternalSwap(Tsr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tsr_list_.InternalSwap(&other->tsr_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tsr, data_source_)
      + sizeof(Tsr::data_source_)
      - PROTOBUF_FIELD_OFFSET(Tsr, tsr_warning_)>(
          reinterpret_cast<char*>(&tsr_warning_),
          reinterpret_cast<char*>(&other->tsr_warning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tsr::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perception::Tsr_TsrTraceRes* Arena::CreateMaybeMessage< ::perception::Tsr_TsrTraceRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Tsr_TsrTraceRes >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::Tsr_TsrWarning* Arena::CreateMaybeMessage< ::perception::Tsr_TsrWarning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Tsr_TsrWarning >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::Tsr* Arena::CreateMaybeMessage< ::perception::Tsr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::Tsr >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
