// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_shelter.proto

#include "camera_shelter.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_camera_5fshelter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleCameraShelter_camera_5fshelter_2eproto;
namespace perception {
class SingleCameraShelterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleCameraShelter> _instance;
} _SingleCameraShelter_default_instance_;
class CameraShelterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraShelter> _instance;
} _CameraShelter_default_instance_;
}  // namespace perception
static void InitDefaultsscc_info_CameraShelter_camera_5fshelter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_CameraShelter_default_instance_;
    new (ptr) ::perception::CameraShelter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::CameraShelter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraShelter_camera_5fshelter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CameraShelter_camera_5fshelter_2eproto}, {
      &scc_info_SingleCameraShelter_camera_5fshelter_2eproto.base,}};

static void InitDefaultsscc_info_SingleCameraShelter_camera_5fshelter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_SingleCameraShelter_default_instance_;
    new (ptr) ::perception::SingleCameraShelter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::SingleCameraShelter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleCameraShelter_camera_5fshelter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SingleCameraShelter_camera_5fshelter_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_camera_5fshelter_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_camera_5fshelter_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_camera_5fshelter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_camera_5fshelter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::SingleCameraShelter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::SingleCameraShelter, camera_id_),
  PROTOBUF_FIELD_OFFSET(::perception::SingleCameraShelter, up_left_sheltered_),
  PROTOBUF_FIELD_OFFSET(::perception::SingleCameraShelter, up_right_sheltered_),
  PROTOBUF_FIELD_OFFSET(::perception::SingleCameraShelter, down_left_sheltered_),
  PROTOBUF_FIELD_OFFSET(::perception::SingleCameraShelter, down_right_sheltered_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perception::CameraShelter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perception::CameraShelter, frame_id_),
  PROTOBUF_FIELD_OFFSET(::perception::CameraShelter, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perception::CameraShelter, tick_),
  PROTOBUF_FIELD_OFFSET(::perception::CameraShelter, sheltered_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perception::SingleCameraShelter)},
  { 10, -1, sizeof(::perception::CameraShelter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_SingleCameraShelter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perception::_CameraShelter_default_instance_),
};

const char descriptor_table_protodef_camera_5fshelter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024camera_shelter.proto\022\nperception\"\376\001\n\023S"
  "ingleCameraShelter\022;\n\tcamera_id\030\001 \001(\0162(."
  "perception.SingleCameraShelter.CameraId\022"
  "\031\n\021up_left_sheltered\030\002 \001(\005\022\032\n\022up_right_s"
  "heltered\030\003 \001(\005\022\033\n\023down_left_sheltered\030\004 "
  "\001(\005\022\034\n\024down_right_sheltered\030\005 \001(\005\"8\n\010Cam"
  "eraId\022\t\n\005kLeft\020\000\022\n\n\006kRight\020\001\022\n\n\006kFront\020\002"
  "\022\t\n\005kRear\020\003\"v\n\rCameraShelter\022\020\n\010frame_id"
  "\030\001 \001(\004\022\021\n\ttimestamp\030\002 \001(\004\022\014\n\004tick\030\003 \001(\004\022"
  "2\n\tsheltered\030\004 \003(\0132\037.perception.SingleCa"
  "meraShelterb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_camera_5fshelter_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_camera_5fshelter_2eproto_sccs[2] = {
  &scc_info_CameraShelter_camera_5fshelter_2eproto.base,
  &scc_info_SingleCameraShelter_camera_5fshelter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_camera_5fshelter_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_5fshelter_2eproto = {
  false, false, descriptor_table_protodef_camera_5fshelter_2eproto, "camera_shelter.proto", 419,
  &descriptor_table_camera_5fshelter_2eproto_once, descriptor_table_camera_5fshelter_2eproto_sccs, descriptor_table_camera_5fshelter_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_camera_5fshelter_2eproto::offsets,
  file_level_metadata_camera_5fshelter_2eproto, 2, file_level_enum_descriptors_camera_5fshelter_2eproto, file_level_service_descriptors_camera_5fshelter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_camera_5fshelter_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_camera_5fshelter_2eproto)), true);
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SingleCameraShelter_CameraId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camera_5fshelter_2eproto);
  return file_level_enum_descriptors_camera_5fshelter_2eproto[0];
}
bool SingleCameraShelter_CameraId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SingleCameraShelter_CameraId SingleCameraShelter::kLeft;
constexpr SingleCameraShelter_CameraId SingleCameraShelter::kRight;
constexpr SingleCameraShelter_CameraId SingleCameraShelter::kFront;
constexpr SingleCameraShelter_CameraId SingleCameraShelter::kRear;
constexpr SingleCameraShelter_CameraId SingleCameraShelter::CameraId_MIN;
constexpr SingleCameraShelter_CameraId SingleCameraShelter::CameraId_MAX;
constexpr int SingleCameraShelter::CameraId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SingleCameraShelter::InitAsDefaultInstance() {
}
class SingleCameraShelter::_Internal {
 public:
};

SingleCameraShelter::SingleCameraShelter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.SingleCameraShelter)
}
SingleCameraShelter::SingleCameraShelter(const SingleCameraShelter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&camera_id_, &from.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_right_sheltered_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(down_right_sheltered_));
  // @@protoc_insertion_point(copy_constructor:perception.SingleCameraShelter)
}

void SingleCameraShelter::SharedCtor() {
  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_right_sheltered_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(down_right_sheltered_));
}

SingleCameraShelter::~SingleCameraShelter() {
  // @@protoc_insertion_point(destructor:perception.SingleCameraShelter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SingleCameraShelter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SingleCameraShelter::ArenaDtor(void* object) {
  SingleCameraShelter* _this = reinterpret_cast< SingleCameraShelter* >(object);
  (void)_this;
}
void SingleCameraShelter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleCameraShelter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleCameraShelter& SingleCameraShelter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleCameraShelter_camera_5fshelter_2eproto.base);
  return *internal_default_instance();
}


void SingleCameraShelter::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.SingleCameraShelter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_right_sheltered_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(down_right_sheltered_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleCameraShelter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perception.SingleCameraShelter.CameraId camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_camera_id(static_cast<::perception::SingleCameraShelter_CameraId>(val));
        } else goto handle_unusual;
        continue;
      // int32 up_left_sheltered = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          up_left_sheltered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 up_right_sheltered = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          up_right_sheltered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 down_left_sheltered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          down_left_sheltered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 down_right_sheltered = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          down_right_sheltered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleCameraShelter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.SingleCameraShelter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.SingleCameraShelter.CameraId camera_id = 1;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_camera_id(), target);
  }

  // int32 up_left_sheltered = 2;
  if (this->up_left_sheltered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_up_left_sheltered(), target);
  }

  // int32 up_right_sheltered = 3;
  if (this->up_right_sheltered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_up_right_sheltered(), target);
  }

  // int32 down_left_sheltered = 4;
  if (this->down_left_sheltered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_down_left_sheltered(), target);
  }

  // int32 down_right_sheltered = 5;
  if (this->down_right_sheltered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_down_right_sheltered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.SingleCameraShelter)
  return target;
}

size_t SingleCameraShelter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.SingleCameraShelter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perception.SingleCameraShelter.CameraId camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_camera_id());
  }

  // int32 up_left_sheltered = 2;
  if (this->up_left_sheltered() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_up_left_sheltered());
  }

  // int32 up_right_sheltered = 3;
  if (this->up_right_sheltered() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_up_right_sheltered());
  }

  // int32 down_left_sheltered = 4;
  if (this->down_left_sheltered() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_down_left_sheltered());
  }

  // int32 down_right_sheltered = 5;
  if (this->down_right_sheltered() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_down_right_sheltered());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleCameraShelter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.SingleCameraShelter)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleCameraShelter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleCameraShelter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.SingleCameraShelter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.SingleCameraShelter)
    MergeFrom(*source);
  }
}

void SingleCameraShelter::MergeFrom(const SingleCameraShelter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.SingleCameraShelter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.up_left_sheltered() != 0) {
    _internal_set_up_left_sheltered(from._internal_up_left_sheltered());
  }
  if (from.up_right_sheltered() != 0) {
    _internal_set_up_right_sheltered(from._internal_up_right_sheltered());
  }
  if (from.down_left_sheltered() != 0) {
    _internal_set_down_left_sheltered(from._internal_down_left_sheltered());
  }
  if (from.down_right_sheltered() != 0) {
    _internal_set_down_right_sheltered(from._internal_down_right_sheltered());
  }
}

void SingleCameraShelter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.SingleCameraShelter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleCameraShelter::CopyFrom(const SingleCameraShelter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.SingleCameraShelter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleCameraShelter::IsInitialized() const {
  return true;
}

void SingleCameraShelter::InternalSwap(SingleCameraShelter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleCameraShelter, down_right_sheltered_)
      + sizeof(SingleCameraShelter::down_right_sheltered_)
      - PROTOBUF_FIELD_OFFSET(SingleCameraShelter, camera_id_)>(
          reinterpret_cast<char*>(&camera_id_),
          reinterpret_cast<char*>(&other->camera_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleCameraShelter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraShelter::InitAsDefaultInstance() {
}
class CameraShelter::_Internal {
 public:
};

CameraShelter::CameraShelter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sheltered_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perception.CameraShelter)
}
CameraShelter::CameraShelter(const CameraShelter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sheltered_(from.sheltered_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:perception.CameraShelter)
}

void CameraShelter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraShelter_camera_5fshelter_2eproto.base);
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
}

CameraShelter::~CameraShelter() {
  // @@protoc_insertion_point(destructor:perception.CameraShelter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraShelter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CameraShelter::ArenaDtor(void* object) {
  CameraShelter* _this = reinterpret_cast< CameraShelter* >(object);
  (void)_this;
}
void CameraShelter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraShelter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraShelter& CameraShelter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraShelter_camera_5fshelter_2eproto.base);
  return *internal_default_instance();
}


void CameraShelter::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.CameraShelter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sheltered_.Clear();
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraShelter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perception.SingleCameraShelter sheltered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sheltered(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraShelter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.CameraShelter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  // repeated .perception.SingleCameraShelter sheltered = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sheltered_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sheltered(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.CameraShelter)
  return target;
}

size_t CameraShelter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.CameraShelter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perception.SingleCameraShelter sheltered = 4;
  total_size += 1UL * this->_internal_sheltered_size();
  for (const auto& msg : this->sheltered_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraShelter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.CameraShelter)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraShelter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraShelter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.CameraShelter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.CameraShelter)
    MergeFrom(*source);
  }
}

void CameraShelter::MergeFrom(const CameraShelter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.CameraShelter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sheltered_.MergeFrom(from.sheltered_);
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
}

void CameraShelter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.CameraShelter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraShelter::CopyFrom(const CameraShelter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.CameraShelter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraShelter::IsInitialized() const {
  return true;
}

void CameraShelter::InternalSwap(CameraShelter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sheltered_.InternalSwap(&other->sheltered_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraShelter, tick_)
      + sizeof(CameraShelter::tick_)
      - PROTOBUF_FIELD_OFFSET(CameraShelter, frame_id_)>(
          reinterpret_cast<char*>(&frame_id_),
          reinterpret_cast<char*>(&other->frame_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraShelter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perception::SingleCameraShelter* Arena::CreateMaybeMessage< ::perception::SingleCameraShelter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::SingleCameraShelter >(arena);
}
template<> PROTOBUF_NOINLINE ::perception::CameraShelter* Arena::CreateMaybeMessage< ::perception::CameraShelter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perception::CameraShelter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
