// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_map_response.proto

#include "ap_map_response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fmap_5fresponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApMapResponse_Pose_ap_5fmap_5fresponse_2eproto;
namespace minieye {
namespace parking {
class ApMapResponse_PoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApMapResponse_Pose> _instance;
} _ApMapResponse_Pose_default_instance_;
class ApMapResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApMapResponse> _instance;
} _ApMapResponse_default_instance_;
}  // namespace parking
}  // namespace minieye
static void InitDefaultsscc_info_ApMapResponse_ap_5fmap_5fresponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ApMapResponse_default_instance_;
    new (ptr) ::minieye::parking::ApMapResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ApMapResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApMapResponse_ap_5fmap_5fresponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApMapResponse_ap_5fmap_5fresponse_2eproto}, {
      &scc_info_ApMapResponse_Pose_ap_5fmap_5fresponse_2eproto.base,}};

static void InitDefaultsscc_info_ApMapResponse_Pose_ap_5fmap_5fresponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::parking::_ApMapResponse_Pose_default_instance_;
    new (ptr) ::minieye::parking::ApMapResponse_Pose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::parking::ApMapResponse_Pose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApMapResponse_Pose_ap_5fmap_5fresponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApMapResponse_Pose_ap_5fmap_5fresponse_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5fmap_5fresponse_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ap_5fmap_5fresponse_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fmap_5fresponse_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fmap_5fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse_Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse_Pose, x_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse_Pose, y_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse_Pose, z_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse_Pose, qw_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse_Pose, qx_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse_Pose, qy_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse_Pose, qz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse, ap_enu_to_rt_odom_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse, curr_odom_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse, nearest_ap_map_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse, ap_response_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse, localization_accuracy_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse, fail_reson_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse, s_),
  PROTOBUF_FIELD_OFFSET(::minieye::parking::ApMapResponse, current_ap_map_joint_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::parking::ApMapResponse_Pose)},
  { 12, -1, sizeof(::minieye::parking::ApMapResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ApMapResponse_Pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::parking::_ApMapResponse_default_instance_),
};

const char descriptor_table_protodef_ap_5fmap_5fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ap_map_response.proto\022\017minieye.parking"
  "\"\257\007\n\rApMapResponse\022\021\n\ttimestamp\030\001 \001(\004\022\014\n"
  "\004tick\030\002 \001(\004\022\020\n\010frame_id\030\003 \001(\004\022>\n\021ap_enu_"
  "to_rt_odom\030\004 \001(\0132#.minieye.parking.ApMap"
  "Response.Pose\0226\n\tcurr_odom\030\006 \001(\0132#.minie"
  "ye.parking.ApMapResponse.Pose\022\026\n\016nearest"
  "_ap_map\030\007 \001(\t\022G\n\020ap_response_type\030\010 \001(\0162"
  "-.minieye.parking.ApMapResponse.ApRespon"
  "seType\022\035\n\025localization_accuracy\030\n \001(\002\022=\n"
  "\nfail_reson\030\013 \001(\0162).minieye.parking.ApMa"
  "pResponse.FailReason\022\t\n\001s\030\014 \001(\001\022\037\n\027curre"
  "nt_ap_map_joint_id\030\r \001(\003\032W\n\004Pose\022\t\n\001x\030\001 "
  "\001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\n\n\002qw\030\004 \001(\001\022\n\n"
  "\002qx\030\005 \001(\001\022\n\n\002qy\030\006 \001(\001\022\n\n\002qz\030\007 \001(\001\"\356\002\n\016Ap"
  "ResponseType\022\016\n\nkChooseMap\020\000\022!\n\035kParking"
  "MappingReadyToMapping\020\001\022\023\n\017kParkingMappi"
  "ng\020\002\022\027\n\023kParkingMappingDone\020\003\022\031\n\025kParkin"
  "gMappingFailed\020\004\022&\n\"kParkingLocalization"
  "ReadyToMapping\020\005\022+\n\'kParkingLocalization"
  "ReadyToLocalization\020\006\022\030\n\024kParkingLocaliz"
  "ation\020\007\022 \n\034kParkingLocalizationOutOfMap\020"
  "\013\022\034\n\030kParkingLocalizationDone\020\010\022\036\n\032kPark"
  "ingLocalizationFailed\020\t\022\021\n\rkBackToGround"
  "\020\n\">\n\nFailReason\022\014\n\010kNotFail\020\000\022\023\n\017kBackw"
  "ardTooFar\020\001\022\r\n\tkSpeeding\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fmap_5fresponse_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fmap_5fresponse_2eproto_sccs[2] = {
  &scc_info_ApMapResponse_ap_5fmap_5fresponse_2eproto.base,
  &scc_info_ApMapResponse_Pose_ap_5fmap_5fresponse_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fmap_5fresponse_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fmap_5fresponse_2eproto = {
  false, false, descriptor_table_protodef_ap_5fmap_5fresponse_2eproto, "ap_map_response.proto", 994,
  &descriptor_table_ap_5fmap_5fresponse_2eproto_once, descriptor_table_ap_5fmap_5fresponse_2eproto_sccs, descriptor_table_ap_5fmap_5fresponse_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ap_5fmap_5fresponse_2eproto::offsets,
  file_level_metadata_ap_5fmap_5fresponse_2eproto, 2, file_level_enum_descriptors_ap_5fmap_5fresponse_2eproto, file_level_service_descriptors_ap_5fmap_5fresponse_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fmap_5fresponse_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fmap_5fresponse_2eproto)), true);
namespace minieye {
namespace parking {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApMapResponse_ApResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ap_5fmap_5fresponse_2eproto);
  return file_level_enum_descriptors_ap_5fmap_5fresponse_2eproto[0];
}
bool ApMapResponse_ApResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ApMapResponse_ApResponseType ApMapResponse::kChooseMap;
constexpr ApMapResponse_ApResponseType ApMapResponse::kParkingMappingReadyToMapping;
constexpr ApMapResponse_ApResponseType ApMapResponse::kParkingMapping;
constexpr ApMapResponse_ApResponseType ApMapResponse::kParkingMappingDone;
constexpr ApMapResponse_ApResponseType ApMapResponse::kParkingMappingFailed;
constexpr ApMapResponse_ApResponseType ApMapResponse::kParkingLocalizationReadyToMapping;
constexpr ApMapResponse_ApResponseType ApMapResponse::kParkingLocalizationReadyToLocalization;
constexpr ApMapResponse_ApResponseType ApMapResponse::kParkingLocalization;
constexpr ApMapResponse_ApResponseType ApMapResponse::kParkingLocalizationOutOfMap;
constexpr ApMapResponse_ApResponseType ApMapResponse::kParkingLocalizationDone;
constexpr ApMapResponse_ApResponseType ApMapResponse::kParkingLocalizationFailed;
constexpr ApMapResponse_ApResponseType ApMapResponse::kBackToGround;
constexpr ApMapResponse_ApResponseType ApMapResponse::ApResponseType_MIN;
constexpr ApMapResponse_ApResponseType ApMapResponse::ApResponseType_MAX;
constexpr int ApMapResponse::ApResponseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApMapResponse_FailReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ap_5fmap_5fresponse_2eproto);
  return file_level_enum_descriptors_ap_5fmap_5fresponse_2eproto[1];
}
bool ApMapResponse_FailReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ApMapResponse_FailReason ApMapResponse::kNotFail;
constexpr ApMapResponse_FailReason ApMapResponse::kBackwardTooFar;
constexpr ApMapResponse_FailReason ApMapResponse::kSpeeding;
constexpr ApMapResponse_FailReason ApMapResponse::FailReason_MIN;
constexpr ApMapResponse_FailReason ApMapResponse::FailReason_MAX;
constexpr int ApMapResponse::FailReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ApMapResponse_Pose::InitAsDefaultInstance() {
}
class ApMapResponse_Pose::_Internal {
 public:
};

ApMapResponse_Pose::ApMapResponse_Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ApMapResponse.Pose)
}
ApMapResponse_Pose::ApMapResponse_Pose(const ApMapResponse_Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&qz_) -
    reinterpret_cast<char*>(&x_)) + sizeof(qz_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ApMapResponse.Pose)
}

void ApMapResponse_Pose::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qz_) -
      reinterpret_cast<char*>(&x_)) + sizeof(qz_));
}

ApMapResponse_Pose::~ApMapResponse_Pose() {
  // @@protoc_insertion_point(destructor:minieye.parking.ApMapResponse.Pose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApMapResponse_Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ApMapResponse_Pose::ArenaDtor(void* object) {
  ApMapResponse_Pose* _this = reinterpret_cast< ApMapResponse_Pose* >(object);
  (void)_this;
}
void ApMapResponse_Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApMapResponse_Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApMapResponse_Pose& ApMapResponse_Pose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApMapResponse_Pose_ap_5fmap_5fresponse_2eproto.base);
  return *internal_default_instance();
}


void ApMapResponse_Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ApMapResponse.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qz_) -
      reinterpret_cast<char*>(&x_)) + sizeof(qz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApMapResponse_Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          qw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          qx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          qy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          qz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApMapResponse_Pose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ApMapResponse.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double qw = 4;
  if (!(this->qw() <= 0 && this->qw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_qw(), target);
  }

  // double qx = 5;
  if (!(this->qx() <= 0 && this->qx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_qx(), target);
  }

  // double qy = 6;
  if (!(this->qy() <= 0 && this->qy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_qy(), target);
  }

  // double qz = 7;
  if (!(this->qz() <= 0 && this->qz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_qz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ApMapResponse.Pose)
  return target;
}

size_t ApMapResponse_Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ApMapResponse.Pose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double qw = 4;
  if (!(this->qw() <= 0 && this->qw() >= 0)) {
    total_size += 1 + 8;
  }

  // double qx = 5;
  if (!(this->qx() <= 0 && this->qx() >= 0)) {
    total_size += 1 + 8;
  }

  // double qy = 6;
  if (!(this->qy() <= 0 && this->qy() >= 0)) {
    total_size += 1 + 8;
  }

  // double qz = 7;
  if (!(this->qz() <= 0 && this->qz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApMapResponse_Pose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ApMapResponse.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const ApMapResponse_Pose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApMapResponse_Pose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ApMapResponse.Pose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ApMapResponse.Pose)
    MergeFrom(*source);
  }
}

void ApMapResponse_Pose::MergeFrom(const ApMapResponse_Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ApMapResponse.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.qw() <= 0 && from.qw() >= 0)) {
    _internal_set_qw(from._internal_qw());
  }
  if (!(from.qx() <= 0 && from.qx() >= 0)) {
    _internal_set_qx(from._internal_qx());
  }
  if (!(from.qy() <= 0 && from.qy() >= 0)) {
    _internal_set_qy(from._internal_qy());
  }
  if (!(from.qz() <= 0 && from.qz() >= 0)) {
    _internal_set_qz(from._internal_qz());
  }
}

void ApMapResponse_Pose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ApMapResponse.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApMapResponse_Pose::CopyFrom(const ApMapResponse_Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ApMapResponse.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApMapResponse_Pose::IsInitialized() const {
  return true;
}

void ApMapResponse_Pose::InternalSwap(ApMapResponse_Pose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApMapResponse_Pose, qz_)
      + sizeof(ApMapResponse_Pose::qz_)
      - PROTOBUF_FIELD_OFFSET(ApMapResponse_Pose, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApMapResponse_Pose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApMapResponse::InitAsDefaultInstance() {
  ::minieye::parking::_ApMapResponse_default_instance_._instance.get_mutable()->ap_enu_to_rt_odom_ = const_cast< ::minieye::parking::ApMapResponse_Pose*>(
      ::minieye::parking::ApMapResponse_Pose::internal_default_instance());
  ::minieye::parking::_ApMapResponse_default_instance_._instance.get_mutable()->curr_odom_ = const_cast< ::minieye::parking::ApMapResponse_Pose*>(
      ::minieye::parking::ApMapResponse_Pose::internal_default_instance());
}
class ApMapResponse::_Internal {
 public:
  static const ::minieye::parking::ApMapResponse_Pose& ap_enu_to_rt_odom(const ApMapResponse* msg);
  static const ::minieye::parking::ApMapResponse_Pose& curr_odom(const ApMapResponse* msg);
};

const ::minieye::parking::ApMapResponse_Pose&
ApMapResponse::_Internal::ap_enu_to_rt_odom(const ApMapResponse* msg) {
  return *msg->ap_enu_to_rt_odom_;
}
const ::minieye::parking::ApMapResponse_Pose&
ApMapResponse::_Internal::curr_odom(const ApMapResponse* msg) {
  return *msg->curr_odom_;
}
ApMapResponse::ApMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.parking.ApMapResponse)
}
ApMapResponse::ApMapResponse(const ApMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nearest_ap_map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nearest_ap_map().empty()) {
    nearest_ap_map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nearest_ap_map(),
      GetArena());
  }
  if (from._internal_has_ap_enu_to_rt_odom()) {
    ap_enu_to_rt_odom_ = new ::minieye::parking::ApMapResponse_Pose(*from.ap_enu_to_rt_odom_);
  } else {
    ap_enu_to_rt_odom_ = nullptr;
  }
  if (from._internal_has_curr_odom()) {
    curr_odom_ = new ::minieye::parking::ApMapResponse_Pose(*from.curr_odom_);
  } else {
    curr_odom_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_ap_map_joint_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(current_ap_map_joint_id_));
  // @@protoc_insertion_point(copy_constructor:minieye.parking.ApMapResponse)
}

void ApMapResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApMapResponse_ap_5fmap_5fresponse_2eproto.base);
  nearest_ap_map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ap_enu_to_rt_odom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_ap_map_joint_id_) -
      reinterpret_cast<char*>(&ap_enu_to_rt_odom_)) + sizeof(current_ap_map_joint_id_));
}

ApMapResponse::~ApMapResponse() {
  // @@protoc_insertion_point(destructor:minieye.parking.ApMapResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApMapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nearest_ap_map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ap_enu_to_rt_odom_;
  if (this != internal_default_instance()) delete curr_odom_;
}

void ApMapResponse::ArenaDtor(void* object) {
  ApMapResponse* _this = reinterpret_cast< ApMapResponse* >(object);
  (void)_this;
}
void ApMapResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApMapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApMapResponse& ApMapResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApMapResponse_ap_5fmap_5fresponse_2eproto.base);
  return *internal_default_instance();
}


void ApMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.parking.ApMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nearest_ap_map_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && ap_enu_to_rt_odom_ != nullptr) {
    delete ap_enu_to_rt_odom_;
  }
  ap_enu_to_rt_odom_ = nullptr;
  if (GetArena() == nullptr && curr_odom_ != nullptr) {
    delete curr_odom_;
  }
  curr_odom_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_ap_map_joint_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(current_ap_map_joint_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApMapResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.ApMapResponse.Pose ap_enu_to_rt_odom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ap_enu_to_rt_odom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.ApMapResponse.Pose curr_odom = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_curr_odom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nearest_ap_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_nearest_ap_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minieye.parking.ApMapResponse.nearest_ap_map"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.ApMapResponse.ApResponseType ap_response_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ap_response_type(static_cast<::minieye::parking::ApMapResponse_ApResponseType>(val));
        } else goto handle_unusual;
        continue;
      // float localization_accuracy = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          localization_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .minieye.parking.ApMapResponse.FailReason fail_reson = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fail_reson(static_cast<::minieye::parking::ApMapResponse_FailReason>(val));
        } else goto handle_unusual;
        continue;
      // double s = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 current_ap_map_joint_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          current_ap_map_joint_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApMapResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.parking.ApMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tick(), target);
  }

  // uint64 frame_id = 3;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_frame_id(), target);
  }

  // .minieye.parking.ApMapResponse.Pose ap_enu_to_rt_odom = 4;
  if (this->has_ap_enu_to_rt_odom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ap_enu_to_rt_odom(this), target, stream);
  }

  // .minieye.parking.ApMapResponse.Pose curr_odom = 6;
  if (this->has_curr_odom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::curr_odom(this), target, stream);
  }

  // string nearest_ap_map = 7;
  if (this->nearest_ap_map().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nearest_ap_map().data(), static_cast<int>(this->_internal_nearest_ap_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minieye.parking.ApMapResponse.nearest_ap_map");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_nearest_ap_map(), target);
  }

  // .minieye.parking.ApMapResponse.ApResponseType ap_response_type = 8;
  if (this->ap_response_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_ap_response_type(), target);
  }

  // float localization_accuracy = 10;
  if (!(this->localization_accuracy() <= 0 && this->localization_accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_localization_accuracy(), target);
  }

  // .minieye.parking.ApMapResponse.FailReason fail_reson = 11;
  if (this->fail_reson() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_fail_reson(), target);
  }

  // double s = 12;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_s(), target);
  }

  // int64 current_ap_map_joint_id = 13;
  if (this->current_ap_map_joint_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_current_ap_map_joint_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.parking.ApMapResponse)
  return target;
}

size_t ApMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.parking.ApMapResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nearest_ap_map = 7;
  if (this->nearest_ap_map().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nearest_ap_map());
  }

  // .minieye.parking.ApMapResponse.Pose ap_enu_to_rt_odom = 4;
  if (this->has_ap_enu_to_rt_odom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ap_enu_to_rt_odom_);
  }

  // .minieye.parking.ApMapResponse.Pose curr_odom = 6;
  if (this->has_curr_odom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *curr_odom_);
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 2;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint64 frame_id = 3;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // .minieye.parking.ApMapResponse.ApResponseType ap_response_type = 8;
  if (this->ap_response_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ap_response_type());
  }

  // float localization_accuracy = 10;
  if (!(this->localization_accuracy() <= 0 && this->localization_accuracy() >= 0)) {
    total_size += 1 + 4;
  }

  // double s = 12;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 8;
  }

  // .minieye.parking.ApMapResponse.FailReason fail_reson = 11;
  if (this->fail_reson() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fail_reson());
  }

  // int64 current_ap_map_joint_id = 13;
  if (this->current_ap_map_joint_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_current_ap_map_joint_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApMapResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.parking.ApMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApMapResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApMapResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.parking.ApMapResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.parking.ApMapResponse)
    MergeFrom(*source);
  }
}

void ApMapResponse::MergeFrom(const ApMapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.parking.ApMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nearest_ap_map().size() > 0) {
    _internal_set_nearest_ap_map(from._internal_nearest_ap_map());
  }
  if (from.has_ap_enu_to_rt_odom()) {
    _internal_mutable_ap_enu_to_rt_odom()->::minieye::parking::ApMapResponse_Pose::MergeFrom(from._internal_ap_enu_to_rt_odom());
  }
  if (from.has_curr_odom()) {
    _internal_mutable_curr_odom()->::minieye::parking::ApMapResponse_Pose::MergeFrom(from._internal_curr_odom());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.ap_response_type() != 0) {
    _internal_set_ap_response_type(from._internal_ap_response_type());
  }
  if (!(from.localization_accuracy() <= 0 && from.localization_accuracy() >= 0)) {
    _internal_set_localization_accuracy(from._internal_localization_accuracy());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    _internal_set_s(from._internal_s());
  }
  if (from.fail_reson() != 0) {
    _internal_set_fail_reson(from._internal_fail_reson());
  }
  if (from.current_ap_map_joint_id() != 0) {
    _internal_set_current_ap_map_joint_id(from._internal_current_ap_map_joint_id());
  }
}

void ApMapResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.parking.ApMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApMapResponse::CopyFrom(const ApMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.parking.ApMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApMapResponse::IsInitialized() const {
  return true;
}

void ApMapResponse::InternalSwap(ApMapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nearest_ap_map_.Swap(&other->nearest_ap_map_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApMapResponse, current_ap_map_joint_id_)
      + sizeof(ApMapResponse::current_ap_map_joint_id_)
      - PROTOBUF_FIELD_OFFSET(ApMapResponse, ap_enu_to_rt_odom_)>(
          reinterpret_cast<char*>(&ap_enu_to_rt_odom_),
          reinterpret_cast<char*>(&other->ap_enu_to_rt_odom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApMapResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace parking
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::parking::ApMapResponse_Pose* Arena::CreateMaybeMessage< ::minieye::parking::ApMapResponse_Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ApMapResponse_Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::parking::ApMapResponse* Arena::CreateMaybeMessage< ::minieye::parking::ApMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::parking::ApMapResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
