// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_imu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_imu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "data_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_imu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_imu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_imu_2eproto;
namespace minieye {
class ImuCorrPhyData;
class ImuCorrPhyDataDefaultTypeInternal;
extern ImuCorrPhyDataDefaultTypeInternal _ImuCorrPhyData_default_instance_;
class ImuData;
class ImuDataDefaultTypeInternal;
extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
class ImuDataList;
class ImuDataListDefaultTypeInternal;
extern ImuDataListDefaultTypeInternal _ImuDataList_default_instance_;
class ImuPhyData;
class ImuPhyDataDefaultTypeInternal;
extern ImuPhyDataDefaultTypeInternal _ImuPhyData_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::ImuCorrPhyData* Arena::CreateMaybeMessage<::minieye::ImuCorrPhyData>(Arena*);
template<> ::minieye::ImuData* Arena::CreateMaybeMessage<::minieye::ImuData>(Arena*);
template<> ::minieye::ImuDataList* Arena::CreateMaybeMessage<::minieye::ImuDataList>(Arena*);
template<> ::minieye::ImuPhyData* Arena::CreateMaybeMessage<::minieye::ImuPhyData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

// ===================================================================

class ImuData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.ImuData) */ {
 public:
  inline ImuData() : ImuData(nullptr) {};
  virtual ~ImuData();

  ImuData(const ImuData& from);
  ImuData(ImuData&& from) noexcept
    : ImuData() {
    *this = ::std::move(from);
  }

  inline ImuData& operator=(const ImuData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuData& operator=(ImuData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImuData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImuData* internal_default_instance() {
    return reinterpret_cast<const ImuData*>(
               &_ImuData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImuData& a, ImuData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImuData* New() const final {
    return CreateMaybeMessage<ImuData>(nullptr);
  }

  ImuData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImuData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImuData& from);
  void MergeFrom(const ImuData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImuData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.ImuData";
  }
  protected:
  explicit ImuData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_imu_2eproto);
    return ::descriptor_table_imu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelFieldNumber = 1,
    kGyroFieldNumber = 2,
    kHeaderFieldNumber = 6,
    kTimestampFieldNumber = 4,
    kTickFieldNumber = 5,
    kTempFieldNumber = 3,
    kGpsWeekFieldNumber = 7,
    kGpsSecFieldNumber = 8,
  };
  // repeated int32 accel = 1;
  int accel_size() const;
  private:
  int _internal_accel_size() const;
  public:
  void clear_accel();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accel(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_accel() const;
  void _internal_add_accel(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_accel();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 accel(int index) const;
  void set_accel(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_accel(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      accel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_accel();

  // repeated int32 gyro = 2;
  int gyro_size() const;
  private:
  int _internal_gyro_size() const;
  public:
  void clear_gyro();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gyro(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_gyro() const;
  void _internal_add_gyro(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_gyro();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 gyro(int index) const;
  void set_gyro(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_gyro(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      gyro() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_gyro();

  // .minieye.Header header = 6;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::minieye::Header& header() const;
  ::minieye::Header* release_header();
  ::minieye::Header* mutable_header();
  void set_allocated_header(::minieye::Header* header);
  private:
  const ::minieye::Header& _internal_header() const;
  ::minieye::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::minieye::Header* header);
  ::minieye::Header* unsafe_arena_release_header();

  // uint64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 5;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 temp = 3;
  void clear_temp();
  ::PROTOBUF_NAMESPACE_ID::int32 temp() const;
  void set_temp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_temp() const;
  void _internal_set_temp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 gps_week = 7;
  void clear_gps_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_week() const;
  void set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gps_week() const;
  void _internal_set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double gps_sec = 8;
  void clear_gps_sec();
  double gps_sec() const;
  void set_gps_sec(double value);
  private:
  double _internal_gps_sec() const;
  void _internal_set_gps_sec(double value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.ImuData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > accel_;
  mutable std::atomic<int> _accel_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > gyro_;
  mutable std::atomic<int> _gyro_cached_byte_size_;
  ::minieye::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 temp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_week_;
  double gps_sec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_imu_2eproto;
};
// -------------------------------------------------------------------

class ImuPhyData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.ImuPhyData) */ {
 public:
  inline ImuPhyData() : ImuPhyData(nullptr) {};
  virtual ~ImuPhyData();

  ImuPhyData(const ImuPhyData& from);
  ImuPhyData(ImuPhyData&& from) noexcept
    : ImuPhyData() {
    *this = ::std::move(from);
  }

  inline ImuPhyData& operator=(const ImuPhyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuPhyData& operator=(ImuPhyData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImuPhyData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImuPhyData* internal_default_instance() {
    return reinterpret_cast<const ImuPhyData*>(
               &_ImuPhyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImuPhyData& a, ImuPhyData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuPhyData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuPhyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImuPhyData* New() const final {
    return CreateMaybeMessage<ImuPhyData>(nullptr);
  }

  ImuPhyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImuPhyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImuPhyData& from);
  void MergeFrom(const ImuPhyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImuPhyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.ImuPhyData";
  }
  protected:
  explicit ImuPhyData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_imu_2eproto);
    return ::descriptor_table_imu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngularVelocityFieldNumber = 1,
    kLinearAccelFieldNumber = 2,
    kHeaderFieldNumber = 8,
    kTempFieldNumber = 3,
    kImuStatusFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kTickFieldNumber = 6,
    kSeqFieldNumber = 7,
    kGpsSecFieldNumber = 10,
    kGpsWeekFieldNumber = 9,
  };
  // repeated float angular_velocity = 1;
  int angular_velocity_size() const;
  private:
  int _internal_angular_velocity_size() const;
  public:
  void clear_angular_velocity();
  private:
  float _internal_angular_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_angular_velocity() const;
  void _internal_add_angular_velocity(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_angular_velocity();
  public:
  float angular_velocity(int index) const;
  void set_angular_velocity(int index, float value);
  void add_angular_velocity(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      angular_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_angular_velocity();

  // repeated float linear_accel = 2;
  int linear_accel_size() const;
  private:
  int _internal_linear_accel_size() const;
  public:
  void clear_linear_accel();
  private:
  float _internal_linear_accel(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_linear_accel() const;
  void _internal_add_linear_accel(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_linear_accel();
  public:
  float linear_accel(int index) const;
  void set_linear_accel(int index, float value);
  void add_linear_accel(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      linear_accel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_linear_accel();

  // .minieye.Header header = 8;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::minieye::Header& header() const;
  ::minieye::Header* release_header();
  ::minieye::Header* mutable_header();
  void set_allocated_header(::minieye::Header* header);
  private:
  const ::minieye::Header& _internal_header() const;
  ::minieye::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::minieye::Header* header);
  ::minieye::Header* unsafe_arena_release_header();

  // float temp = 3;
  void clear_temp();
  float temp() const;
  void set_temp(float value);
  private:
  float _internal_temp() const;
  void _internal_set_temp(float value);
  public:

  // int32 imu_status = 4;
  void clear_imu_status();
  ::PROTOBUF_NAMESPACE_ID::int32 imu_status() const;
  void set_imu_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_imu_status() const;
  void _internal_set_imu_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 6;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 seq = 7;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double gps_sec = 10;
  void clear_gps_sec();
  double gps_sec() const;
  void set_gps_sec(double value);
  private:
  double _internal_gps_sec() const;
  void _internal_set_gps_sec(double value);
  public:

  // uint32 gps_week = 9;
  void clear_gps_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_week() const;
  void set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gps_week() const;
  void _internal_set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.ImuPhyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > angular_velocity_;
  mutable std::atomic<int> _angular_velocity_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > linear_accel_;
  mutable std::atomic<int> _linear_accel_cached_byte_size_;
  ::minieye::Header* header_;
  float temp_;
  ::PROTOBUF_NAMESPACE_ID::int32 imu_status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_;
  double gps_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_week_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_imu_2eproto;
};
// -------------------------------------------------------------------

class ImuCorrPhyData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.ImuCorrPhyData) */ {
 public:
  inline ImuCorrPhyData() : ImuCorrPhyData(nullptr) {};
  virtual ~ImuCorrPhyData();

  ImuCorrPhyData(const ImuCorrPhyData& from);
  ImuCorrPhyData(ImuCorrPhyData&& from) noexcept
    : ImuCorrPhyData() {
    *this = ::std::move(from);
  }

  inline ImuCorrPhyData& operator=(const ImuCorrPhyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuCorrPhyData& operator=(ImuCorrPhyData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImuCorrPhyData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImuCorrPhyData* internal_default_instance() {
    return reinterpret_cast<const ImuCorrPhyData*>(
               &_ImuCorrPhyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ImuCorrPhyData& a, ImuCorrPhyData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuCorrPhyData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuCorrPhyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImuCorrPhyData* New() const final {
    return CreateMaybeMessage<ImuCorrPhyData>(nullptr);
  }

  ImuCorrPhyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImuCorrPhyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImuCorrPhyData& from);
  void MergeFrom(const ImuCorrPhyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImuCorrPhyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.ImuCorrPhyData";
  }
  protected:
  explicit ImuCorrPhyData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_imu_2eproto);
    return ::descriptor_table_imu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngularVelocityFieldNumber = 1,
    kLinearAccelFieldNumber = 2,
    kHeaderFieldNumber = 8,
    kTempFieldNumber = 3,
    kImuStatusFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kTickFieldNumber = 6,
    kSeqFieldNumber = 7,
    kGpsSecFieldNumber = 10,
    kGpsWeekFieldNumber = 9,
  };
  // repeated float angular_velocity = 1;
  int angular_velocity_size() const;
  private:
  int _internal_angular_velocity_size() const;
  public:
  void clear_angular_velocity();
  private:
  float _internal_angular_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_angular_velocity() const;
  void _internal_add_angular_velocity(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_angular_velocity();
  public:
  float angular_velocity(int index) const;
  void set_angular_velocity(int index, float value);
  void add_angular_velocity(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      angular_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_angular_velocity();

  // repeated float linear_accel = 2;
  int linear_accel_size() const;
  private:
  int _internal_linear_accel_size() const;
  public:
  void clear_linear_accel();
  private:
  float _internal_linear_accel(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_linear_accel() const;
  void _internal_add_linear_accel(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_linear_accel();
  public:
  float linear_accel(int index) const;
  void set_linear_accel(int index, float value);
  void add_linear_accel(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      linear_accel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_linear_accel();

  // .minieye.Header header = 8;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::minieye::Header& header() const;
  ::minieye::Header* release_header();
  ::minieye::Header* mutable_header();
  void set_allocated_header(::minieye::Header* header);
  private:
  const ::minieye::Header& _internal_header() const;
  ::minieye::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::minieye::Header* header);
  ::minieye::Header* unsafe_arena_release_header();

  // float temp = 3;
  void clear_temp();
  float temp() const;
  void set_temp(float value);
  private:
  float _internal_temp() const;
  void _internal_set_temp(float value);
  public:

  // int32 imu_status = 4;
  void clear_imu_status();
  ::PROTOBUF_NAMESPACE_ID::int32 imu_status() const;
  void set_imu_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_imu_status() const;
  void _internal_set_imu_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 6;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 seq = 7;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double gps_sec = 10;
  void clear_gps_sec();
  double gps_sec() const;
  void set_gps_sec(double value);
  private:
  double _internal_gps_sec() const;
  void _internal_set_gps_sec(double value);
  public:

  // uint32 gps_week = 9;
  void clear_gps_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_week() const;
  void set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gps_week() const;
  void _internal_set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.ImuCorrPhyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > angular_velocity_;
  mutable std::atomic<int> _angular_velocity_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > linear_accel_;
  mutable std::atomic<int> _linear_accel_cached_byte_size_;
  ::minieye::Header* header_;
  float temp_;
  ::PROTOBUF_NAMESPACE_ID::int32 imu_status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_;
  double gps_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_week_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_imu_2eproto;
};
// -------------------------------------------------------------------

class ImuDataList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.ImuDataList) */ {
 public:
  inline ImuDataList() : ImuDataList(nullptr) {};
  virtual ~ImuDataList();

  ImuDataList(const ImuDataList& from);
  ImuDataList(ImuDataList&& from) noexcept
    : ImuDataList() {
    *this = ::std::move(from);
  }

  inline ImuDataList& operator=(const ImuDataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuDataList& operator=(ImuDataList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImuDataList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImuDataList* internal_default_instance() {
    return reinterpret_cast<const ImuDataList*>(
               &_ImuDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ImuDataList& a, ImuDataList& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuDataList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuDataList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImuDataList* New() const final {
    return CreateMaybeMessage<ImuDataList>(nullptr);
  }

  ImuDataList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImuDataList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImuDataList& from);
  void MergeFrom(const ImuDataList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImuDataList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.ImuDataList";
  }
  protected:
  explicit ImuDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_imu_2eproto);
    return ::descriptor_table_imu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImuDatasFieldNumber = 1,
    kPhyImuDatasFieldNumber = 3,
    kPhyCorrImuDatasFieldNumber = 4,
    kIdFieldNumber = 2,
    kDataTypeFieldNumber = 5,
  };
  // repeated .minieye.ImuData imu_datas = 1;
  int imu_datas_size() const;
  private:
  int _internal_imu_datas_size() const;
  public:
  void clear_imu_datas();
  ::minieye::ImuData* mutable_imu_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuData >*
      mutable_imu_datas();
  private:
  const ::minieye::ImuData& _internal_imu_datas(int index) const;
  ::minieye::ImuData* _internal_add_imu_datas();
  public:
  const ::minieye::ImuData& imu_datas(int index) const;
  ::minieye::ImuData* add_imu_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuData >&
      imu_datas() const;

  // repeated .minieye.ImuPhyData phy_imu_datas = 3;
  int phy_imu_datas_size() const;
  private:
  int _internal_phy_imu_datas_size() const;
  public:
  void clear_phy_imu_datas();
  ::minieye::ImuPhyData* mutable_phy_imu_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuPhyData >*
      mutable_phy_imu_datas();
  private:
  const ::minieye::ImuPhyData& _internal_phy_imu_datas(int index) const;
  ::minieye::ImuPhyData* _internal_add_phy_imu_datas();
  public:
  const ::minieye::ImuPhyData& phy_imu_datas(int index) const;
  ::minieye::ImuPhyData* add_phy_imu_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuPhyData >&
      phy_imu_datas() const;

  // repeated .minieye.ImuCorrPhyData phy_corr_imu_datas = 4;
  int phy_corr_imu_datas_size() const;
  private:
  int _internal_phy_corr_imu_datas_size() const;
  public:
  void clear_phy_corr_imu_datas();
  ::minieye::ImuCorrPhyData* mutable_phy_corr_imu_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuCorrPhyData >*
      mutable_phy_corr_imu_datas();
  private:
  const ::minieye::ImuCorrPhyData& _internal_phy_corr_imu_datas(int index) const;
  ::minieye::ImuCorrPhyData* _internal_add_phy_corr_imu_datas();
  public:
  const ::minieye::ImuCorrPhyData& phy_corr_imu_datas(int index) const;
  ::minieye::ImuCorrPhyData* add_phy_corr_imu_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuCorrPhyData >&
      phy_corr_imu_datas() const;

  // uint64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 data_type = 5;
  void clear_data_type();
  ::PROTOBUF_NAMESPACE_ID::int32 data_type() const;
  void set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_type() const;
  void _internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.ImuDataList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuData > imu_datas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuPhyData > phy_imu_datas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuCorrPhyData > phy_corr_imu_datas_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_imu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImuData

// repeated int32 accel = 1;
inline int ImuData::_internal_accel_size() const {
  return accel_.size();
}
inline int ImuData::accel_size() const {
  return _internal_accel_size();
}
inline void ImuData::clear_accel() {
  accel_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImuData::_internal_accel(int index) const {
  return accel_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImuData::accel(int index) const {
  // @@protoc_insertion_point(field_get:minieye.ImuData.accel)
  return _internal_accel(index);
}
inline void ImuData::set_accel(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  accel_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.ImuData.accel)
}
inline void ImuData::_internal_add_accel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  accel_.Add(value);
}
inline void ImuData::add_accel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_accel(value);
  // @@protoc_insertion_point(field_add:minieye.ImuData.accel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImuData::_internal_accel() const {
  return accel_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImuData::accel() const {
  // @@protoc_insertion_point(field_list:minieye.ImuData.accel)
  return _internal_accel();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImuData::_internal_mutable_accel() {
  return &accel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImuData::mutable_accel() {
  // @@protoc_insertion_point(field_mutable_list:minieye.ImuData.accel)
  return _internal_mutable_accel();
}

// repeated int32 gyro = 2;
inline int ImuData::_internal_gyro_size() const {
  return gyro_.size();
}
inline int ImuData::gyro_size() const {
  return _internal_gyro_size();
}
inline void ImuData::clear_gyro() {
  gyro_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImuData::_internal_gyro(int index) const {
  return gyro_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImuData::gyro(int index) const {
  // @@protoc_insertion_point(field_get:minieye.ImuData.gyro)
  return _internal_gyro(index);
}
inline void ImuData::set_gyro(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  gyro_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.ImuData.gyro)
}
inline void ImuData::_internal_add_gyro(::PROTOBUF_NAMESPACE_ID::int32 value) {
  gyro_.Add(value);
}
inline void ImuData::add_gyro(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_gyro(value);
  // @@protoc_insertion_point(field_add:minieye.ImuData.gyro)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImuData::_internal_gyro() const {
  return gyro_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImuData::gyro() const {
  // @@protoc_insertion_point(field_list:minieye.ImuData.gyro)
  return _internal_gyro();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImuData::_internal_mutable_gyro() {
  return &gyro_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImuData::mutable_gyro() {
  // @@protoc_insertion_point(field_mutable_list:minieye.ImuData.gyro)
  return _internal_mutable_gyro();
}

// int32 temp = 3;
inline void ImuData::clear_temp() {
  temp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImuData::_internal_temp() const {
  return temp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImuData::temp() const {
  // @@protoc_insertion_point(field_get:minieye.ImuData.temp)
  return _internal_temp();
}
inline void ImuData::_internal_set_temp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  temp_ = value;
}
inline void ImuData::set_temp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_temp(value);
  // @@protoc_insertion_point(field_set:minieye.ImuData.temp)
}

// uint64 timestamp = 4;
inline void ImuData::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuData::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.ImuData.timestamp)
  return _internal_timestamp();
}
inline void ImuData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ImuData::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.ImuData.timestamp)
}

// uint64 tick = 5;
inline void ImuData::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuData::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuData::tick() const {
  // @@protoc_insertion_point(field_get:minieye.ImuData.tick)
  return _internal_tick();
}
inline void ImuData::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void ImuData::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.ImuData.tick)
}

// .minieye.Header header = 6;
inline bool ImuData::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ImuData::has_header() const {
  return _internal_has_header();
}
inline const ::minieye::Header& ImuData::_internal_header() const {
  const ::minieye::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::Header*>(
      &::minieye::_Header_default_instance_);
}
inline const ::minieye::Header& ImuData::header() const {
  // @@protoc_insertion_point(field_get:minieye.ImuData.header)
  return _internal_header();
}
inline void ImuData::unsafe_arena_set_allocated_header(
    ::minieye::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.ImuData.header)
}
inline ::minieye::Header* ImuData::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::Header* ImuData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:minieye.ImuData.header)
  
  ::minieye::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::minieye::Header* ImuData::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::minieye::Header* ImuData::mutable_header() {
  // @@protoc_insertion_point(field_mutable:minieye.ImuData.header)
  return _internal_mutable_header();
}
inline void ImuData::set_allocated_header(::minieye::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:minieye.ImuData.header)
}

// uint32 gps_week = 7;
inline void ImuData::clear_gps_week() {
  gps_week_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImuData::_internal_gps_week() const {
  return gps_week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImuData::gps_week() const {
  // @@protoc_insertion_point(field_get:minieye.ImuData.gps_week)
  return _internal_gps_week();
}
inline void ImuData::_internal_set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gps_week_ = value;
}
inline void ImuData::set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gps_week(value);
  // @@protoc_insertion_point(field_set:minieye.ImuData.gps_week)
}

// double gps_sec = 8;
inline void ImuData::clear_gps_sec() {
  gps_sec_ = 0;
}
inline double ImuData::_internal_gps_sec() const {
  return gps_sec_;
}
inline double ImuData::gps_sec() const {
  // @@protoc_insertion_point(field_get:minieye.ImuData.gps_sec)
  return _internal_gps_sec();
}
inline void ImuData::_internal_set_gps_sec(double value) {
  
  gps_sec_ = value;
}
inline void ImuData::set_gps_sec(double value) {
  _internal_set_gps_sec(value);
  // @@protoc_insertion_point(field_set:minieye.ImuData.gps_sec)
}

// -------------------------------------------------------------------

// ImuPhyData

// repeated float angular_velocity = 1;
inline int ImuPhyData::_internal_angular_velocity_size() const {
  return angular_velocity_.size();
}
inline int ImuPhyData::angular_velocity_size() const {
  return _internal_angular_velocity_size();
}
inline void ImuPhyData::clear_angular_velocity() {
  angular_velocity_.Clear();
}
inline float ImuPhyData::_internal_angular_velocity(int index) const {
  return angular_velocity_.Get(index);
}
inline float ImuPhyData::angular_velocity(int index) const {
  // @@protoc_insertion_point(field_get:minieye.ImuPhyData.angular_velocity)
  return _internal_angular_velocity(index);
}
inline void ImuPhyData::set_angular_velocity(int index, float value) {
  angular_velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.ImuPhyData.angular_velocity)
}
inline void ImuPhyData::_internal_add_angular_velocity(float value) {
  angular_velocity_.Add(value);
}
inline void ImuPhyData::add_angular_velocity(float value) {
  _internal_add_angular_velocity(value);
  // @@protoc_insertion_point(field_add:minieye.ImuPhyData.angular_velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImuPhyData::_internal_angular_velocity() const {
  return angular_velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImuPhyData::angular_velocity() const {
  // @@protoc_insertion_point(field_list:minieye.ImuPhyData.angular_velocity)
  return _internal_angular_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImuPhyData::_internal_mutable_angular_velocity() {
  return &angular_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImuPhyData::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable_list:minieye.ImuPhyData.angular_velocity)
  return _internal_mutable_angular_velocity();
}

// repeated float linear_accel = 2;
inline int ImuPhyData::_internal_linear_accel_size() const {
  return linear_accel_.size();
}
inline int ImuPhyData::linear_accel_size() const {
  return _internal_linear_accel_size();
}
inline void ImuPhyData::clear_linear_accel() {
  linear_accel_.Clear();
}
inline float ImuPhyData::_internal_linear_accel(int index) const {
  return linear_accel_.Get(index);
}
inline float ImuPhyData::linear_accel(int index) const {
  // @@protoc_insertion_point(field_get:minieye.ImuPhyData.linear_accel)
  return _internal_linear_accel(index);
}
inline void ImuPhyData::set_linear_accel(int index, float value) {
  linear_accel_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.ImuPhyData.linear_accel)
}
inline void ImuPhyData::_internal_add_linear_accel(float value) {
  linear_accel_.Add(value);
}
inline void ImuPhyData::add_linear_accel(float value) {
  _internal_add_linear_accel(value);
  // @@protoc_insertion_point(field_add:minieye.ImuPhyData.linear_accel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImuPhyData::_internal_linear_accel() const {
  return linear_accel_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImuPhyData::linear_accel() const {
  // @@protoc_insertion_point(field_list:minieye.ImuPhyData.linear_accel)
  return _internal_linear_accel();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImuPhyData::_internal_mutable_linear_accel() {
  return &linear_accel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImuPhyData::mutable_linear_accel() {
  // @@protoc_insertion_point(field_mutable_list:minieye.ImuPhyData.linear_accel)
  return _internal_mutable_linear_accel();
}

// float temp = 3;
inline void ImuPhyData::clear_temp() {
  temp_ = 0;
}
inline float ImuPhyData::_internal_temp() const {
  return temp_;
}
inline float ImuPhyData::temp() const {
  // @@protoc_insertion_point(field_get:minieye.ImuPhyData.temp)
  return _internal_temp();
}
inline void ImuPhyData::_internal_set_temp(float value) {
  
  temp_ = value;
}
inline void ImuPhyData::set_temp(float value) {
  _internal_set_temp(value);
  // @@protoc_insertion_point(field_set:minieye.ImuPhyData.temp)
}

// int32 imu_status = 4;
inline void ImuPhyData::clear_imu_status() {
  imu_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImuPhyData::_internal_imu_status() const {
  return imu_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImuPhyData::imu_status() const {
  // @@protoc_insertion_point(field_get:minieye.ImuPhyData.imu_status)
  return _internal_imu_status();
}
inline void ImuPhyData::_internal_set_imu_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  imu_status_ = value;
}
inline void ImuPhyData::set_imu_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_imu_status(value);
  // @@protoc_insertion_point(field_set:minieye.ImuPhyData.imu_status)
}

// uint64 timestamp = 5;
inline void ImuPhyData::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuPhyData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuPhyData::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.ImuPhyData.timestamp)
  return _internal_timestamp();
}
inline void ImuPhyData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ImuPhyData::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.ImuPhyData.timestamp)
}

// uint64 tick = 6;
inline void ImuPhyData::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuPhyData::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuPhyData::tick() const {
  // @@protoc_insertion_point(field_get:minieye.ImuPhyData.tick)
  return _internal_tick();
}
inline void ImuPhyData::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void ImuPhyData::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.ImuPhyData.tick)
}

// uint64 seq = 7;
inline void ImuPhyData::clear_seq() {
  seq_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuPhyData::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuPhyData::seq() const {
  // @@protoc_insertion_point(field_get:minieye.ImuPhyData.seq)
  return _internal_seq();
}
inline void ImuPhyData::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_ = value;
}
inline void ImuPhyData::set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:minieye.ImuPhyData.seq)
}

// .minieye.Header header = 8;
inline bool ImuPhyData::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ImuPhyData::has_header() const {
  return _internal_has_header();
}
inline const ::minieye::Header& ImuPhyData::_internal_header() const {
  const ::minieye::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::Header*>(
      &::minieye::_Header_default_instance_);
}
inline const ::minieye::Header& ImuPhyData::header() const {
  // @@protoc_insertion_point(field_get:minieye.ImuPhyData.header)
  return _internal_header();
}
inline void ImuPhyData::unsafe_arena_set_allocated_header(
    ::minieye::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.ImuPhyData.header)
}
inline ::minieye::Header* ImuPhyData::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::Header* ImuPhyData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:minieye.ImuPhyData.header)
  
  ::minieye::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::minieye::Header* ImuPhyData::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::minieye::Header* ImuPhyData::mutable_header() {
  // @@protoc_insertion_point(field_mutable:minieye.ImuPhyData.header)
  return _internal_mutable_header();
}
inline void ImuPhyData::set_allocated_header(::minieye::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:minieye.ImuPhyData.header)
}

// uint32 gps_week = 9;
inline void ImuPhyData::clear_gps_week() {
  gps_week_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImuPhyData::_internal_gps_week() const {
  return gps_week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImuPhyData::gps_week() const {
  // @@protoc_insertion_point(field_get:minieye.ImuPhyData.gps_week)
  return _internal_gps_week();
}
inline void ImuPhyData::_internal_set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gps_week_ = value;
}
inline void ImuPhyData::set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gps_week(value);
  // @@protoc_insertion_point(field_set:minieye.ImuPhyData.gps_week)
}

// double gps_sec = 10;
inline void ImuPhyData::clear_gps_sec() {
  gps_sec_ = 0;
}
inline double ImuPhyData::_internal_gps_sec() const {
  return gps_sec_;
}
inline double ImuPhyData::gps_sec() const {
  // @@protoc_insertion_point(field_get:minieye.ImuPhyData.gps_sec)
  return _internal_gps_sec();
}
inline void ImuPhyData::_internal_set_gps_sec(double value) {
  
  gps_sec_ = value;
}
inline void ImuPhyData::set_gps_sec(double value) {
  _internal_set_gps_sec(value);
  // @@protoc_insertion_point(field_set:minieye.ImuPhyData.gps_sec)
}

// -------------------------------------------------------------------

// ImuCorrPhyData

// repeated float angular_velocity = 1;
inline int ImuCorrPhyData::_internal_angular_velocity_size() const {
  return angular_velocity_.size();
}
inline int ImuCorrPhyData::angular_velocity_size() const {
  return _internal_angular_velocity_size();
}
inline void ImuCorrPhyData::clear_angular_velocity() {
  angular_velocity_.Clear();
}
inline float ImuCorrPhyData::_internal_angular_velocity(int index) const {
  return angular_velocity_.Get(index);
}
inline float ImuCorrPhyData::angular_velocity(int index) const {
  // @@protoc_insertion_point(field_get:minieye.ImuCorrPhyData.angular_velocity)
  return _internal_angular_velocity(index);
}
inline void ImuCorrPhyData::set_angular_velocity(int index, float value) {
  angular_velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.ImuCorrPhyData.angular_velocity)
}
inline void ImuCorrPhyData::_internal_add_angular_velocity(float value) {
  angular_velocity_.Add(value);
}
inline void ImuCorrPhyData::add_angular_velocity(float value) {
  _internal_add_angular_velocity(value);
  // @@protoc_insertion_point(field_add:minieye.ImuCorrPhyData.angular_velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImuCorrPhyData::_internal_angular_velocity() const {
  return angular_velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImuCorrPhyData::angular_velocity() const {
  // @@protoc_insertion_point(field_list:minieye.ImuCorrPhyData.angular_velocity)
  return _internal_angular_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImuCorrPhyData::_internal_mutable_angular_velocity() {
  return &angular_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImuCorrPhyData::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable_list:minieye.ImuCorrPhyData.angular_velocity)
  return _internal_mutable_angular_velocity();
}

// repeated float linear_accel = 2;
inline int ImuCorrPhyData::_internal_linear_accel_size() const {
  return linear_accel_.size();
}
inline int ImuCorrPhyData::linear_accel_size() const {
  return _internal_linear_accel_size();
}
inline void ImuCorrPhyData::clear_linear_accel() {
  linear_accel_.Clear();
}
inline float ImuCorrPhyData::_internal_linear_accel(int index) const {
  return linear_accel_.Get(index);
}
inline float ImuCorrPhyData::linear_accel(int index) const {
  // @@protoc_insertion_point(field_get:minieye.ImuCorrPhyData.linear_accel)
  return _internal_linear_accel(index);
}
inline void ImuCorrPhyData::set_linear_accel(int index, float value) {
  linear_accel_.Set(index, value);
  // @@protoc_insertion_point(field_set:minieye.ImuCorrPhyData.linear_accel)
}
inline void ImuCorrPhyData::_internal_add_linear_accel(float value) {
  linear_accel_.Add(value);
}
inline void ImuCorrPhyData::add_linear_accel(float value) {
  _internal_add_linear_accel(value);
  // @@protoc_insertion_point(field_add:minieye.ImuCorrPhyData.linear_accel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImuCorrPhyData::_internal_linear_accel() const {
  return linear_accel_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ImuCorrPhyData::linear_accel() const {
  // @@protoc_insertion_point(field_list:minieye.ImuCorrPhyData.linear_accel)
  return _internal_linear_accel();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImuCorrPhyData::_internal_mutable_linear_accel() {
  return &linear_accel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ImuCorrPhyData::mutable_linear_accel() {
  // @@protoc_insertion_point(field_mutable_list:minieye.ImuCorrPhyData.linear_accel)
  return _internal_mutable_linear_accel();
}

// float temp = 3;
inline void ImuCorrPhyData::clear_temp() {
  temp_ = 0;
}
inline float ImuCorrPhyData::_internal_temp() const {
  return temp_;
}
inline float ImuCorrPhyData::temp() const {
  // @@protoc_insertion_point(field_get:minieye.ImuCorrPhyData.temp)
  return _internal_temp();
}
inline void ImuCorrPhyData::_internal_set_temp(float value) {
  
  temp_ = value;
}
inline void ImuCorrPhyData::set_temp(float value) {
  _internal_set_temp(value);
  // @@protoc_insertion_point(field_set:minieye.ImuCorrPhyData.temp)
}

// int32 imu_status = 4;
inline void ImuCorrPhyData::clear_imu_status() {
  imu_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImuCorrPhyData::_internal_imu_status() const {
  return imu_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImuCorrPhyData::imu_status() const {
  // @@protoc_insertion_point(field_get:minieye.ImuCorrPhyData.imu_status)
  return _internal_imu_status();
}
inline void ImuCorrPhyData::_internal_set_imu_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  imu_status_ = value;
}
inline void ImuCorrPhyData::set_imu_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_imu_status(value);
  // @@protoc_insertion_point(field_set:minieye.ImuCorrPhyData.imu_status)
}

// uint64 timestamp = 5;
inline void ImuCorrPhyData::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuCorrPhyData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuCorrPhyData::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.ImuCorrPhyData.timestamp)
  return _internal_timestamp();
}
inline void ImuCorrPhyData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ImuCorrPhyData::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.ImuCorrPhyData.timestamp)
}

// uint64 tick = 6;
inline void ImuCorrPhyData::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuCorrPhyData::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuCorrPhyData::tick() const {
  // @@protoc_insertion_point(field_get:minieye.ImuCorrPhyData.tick)
  return _internal_tick();
}
inline void ImuCorrPhyData::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void ImuCorrPhyData::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.ImuCorrPhyData.tick)
}

// uint64 seq = 7;
inline void ImuCorrPhyData::clear_seq() {
  seq_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuCorrPhyData::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuCorrPhyData::seq() const {
  // @@protoc_insertion_point(field_get:minieye.ImuCorrPhyData.seq)
  return _internal_seq();
}
inline void ImuCorrPhyData::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_ = value;
}
inline void ImuCorrPhyData::set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:minieye.ImuCorrPhyData.seq)
}

// .minieye.Header header = 8;
inline bool ImuCorrPhyData::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ImuCorrPhyData::has_header() const {
  return _internal_has_header();
}
inline const ::minieye::Header& ImuCorrPhyData::_internal_header() const {
  const ::minieye::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minieye::Header*>(
      &::minieye::_Header_default_instance_);
}
inline const ::minieye::Header& ImuCorrPhyData::header() const {
  // @@protoc_insertion_point(field_get:minieye.ImuCorrPhyData.header)
  return _internal_header();
}
inline void ImuCorrPhyData::unsafe_arena_set_allocated_header(
    ::minieye::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minieye.ImuCorrPhyData.header)
}
inline ::minieye::Header* ImuCorrPhyData::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minieye::Header* ImuCorrPhyData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:minieye.ImuCorrPhyData.header)
  
  ::minieye::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::minieye::Header* ImuCorrPhyData::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::minieye::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::minieye::Header* ImuCorrPhyData::mutable_header() {
  // @@protoc_insertion_point(field_mutable:minieye.ImuCorrPhyData.header)
  return _internal_mutable_header();
}
inline void ImuCorrPhyData::set_allocated_header(::minieye::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:minieye.ImuCorrPhyData.header)
}

// uint32 gps_week = 9;
inline void ImuCorrPhyData::clear_gps_week() {
  gps_week_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImuCorrPhyData::_internal_gps_week() const {
  return gps_week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImuCorrPhyData::gps_week() const {
  // @@protoc_insertion_point(field_get:minieye.ImuCorrPhyData.gps_week)
  return _internal_gps_week();
}
inline void ImuCorrPhyData::_internal_set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gps_week_ = value;
}
inline void ImuCorrPhyData::set_gps_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gps_week(value);
  // @@protoc_insertion_point(field_set:minieye.ImuCorrPhyData.gps_week)
}

// double gps_sec = 10;
inline void ImuCorrPhyData::clear_gps_sec() {
  gps_sec_ = 0;
}
inline double ImuCorrPhyData::_internal_gps_sec() const {
  return gps_sec_;
}
inline double ImuCorrPhyData::gps_sec() const {
  // @@protoc_insertion_point(field_get:minieye.ImuCorrPhyData.gps_sec)
  return _internal_gps_sec();
}
inline void ImuCorrPhyData::_internal_set_gps_sec(double value) {
  
  gps_sec_ = value;
}
inline void ImuCorrPhyData::set_gps_sec(double value) {
  _internal_set_gps_sec(value);
  // @@protoc_insertion_point(field_set:minieye.ImuCorrPhyData.gps_sec)
}

// -------------------------------------------------------------------

// ImuDataList

// repeated .minieye.ImuData imu_datas = 1;
inline int ImuDataList::_internal_imu_datas_size() const {
  return imu_datas_.size();
}
inline int ImuDataList::imu_datas_size() const {
  return _internal_imu_datas_size();
}
inline void ImuDataList::clear_imu_datas() {
  imu_datas_.Clear();
}
inline ::minieye::ImuData* ImuDataList::mutable_imu_datas(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.ImuDataList.imu_datas)
  return imu_datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuData >*
ImuDataList::mutable_imu_datas() {
  // @@protoc_insertion_point(field_mutable_list:minieye.ImuDataList.imu_datas)
  return &imu_datas_;
}
inline const ::minieye::ImuData& ImuDataList::_internal_imu_datas(int index) const {
  return imu_datas_.Get(index);
}
inline const ::minieye::ImuData& ImuDataList::imu_datas(int index) const {
  // @@protoc_insertion_point(field_get:minieye.ImuDataList.imu_datas)
  return _internal_imu_datas(index);
}
inline ::minieye::ImuData* ImuDataList::_internal_add_imu_datas() {
  return imu_datas_.Add();
}
inline ::minieye::ImuData* ImuDataList::add_imu_datas() {
  // @@protoc_insertion_point(field_add:minieye.ImuDataList.imu_datas)
  return _internal_add_imu_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuData >&
ImuDataList::imu_datas() const {
  // @@protoc_insertion_point(field_list:minieye.ImuDataList.imu_datas)
  return imu_datas_;
}

// uint64 id = 2;
inline void ImuDataList::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuDataList::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ImuDataList::id() const {
  // @@protoc_insertion_point(field_get:minieye.ImuDataList.id)
  return _internal_id();
}
inline void ImuDataList::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void ImuDataList::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minieye.ImuDataList.id)
}

// repeated .minieye.ImuPhyData phy_imu_datas = 3;
inline int ImuDataList::_internal_phy_imu_datas_size() const {
  return phy_imu_datas_.size();
}
inline int ImuDataList::phy_imu_datas_size() const {
  return _internal_phy_imu_datas_size();
}
inline void ImuDataList::clear_phy_imu_datas() {
  phy_imu_datas_.Clear();
}
inline ::minieye::ImuPhyData* ImuDataList::mutable_phy_imu_datas(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.ImuDataList.phy_imu_datas)
  return phy_imu_datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuPhyData >*
ImuDataList::mutable_phy_imu_datas() {
  // @@protoc_insertion_point(field_mutable_list:minieye.ImuDataList.phy_imu_datas)
  return &phy_imu_datas_;
}
inline const ::minieye::ImuPhyData& ImuDataList::_internal_phy_imu_datas(int index) const {
  return phy_imu_datas_.Get(index);
}
inline const ::minieye::ImuPhyData& ImuDataList::phy_imu_datas(int index) const {
  // @@protoc_insertion_point(field_get:minieye.ImuDataList.phy_imu_datas)
  return _internal_phy_imu_datas(index);
}
inline ::minieye::ImuPhyData* ImuDataList::_internal_add_phy_imu_datas() {
  return phy_imu_datas_.Add();
}
inline ::minieye::ImuPhyData* ImuDataList::add_phy_imu_datas() {
  // @@protoc_insertion_point(field_add:minieye.ImuDataList.phy_imu_datas)
  return _internal_add_phy_imu_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuPhyData >&
ImuDataList::phy_imu_datas() const {
  // @@protoc_insertion_point(field_list:minieye.ImuDataList.phy_imu_datas)
  return phy_imu_datas_;
}

// repeated .minieye.ImuCorrPhyData phy_corr_imu_datas = 4;
inline int ImuDataList::_internal_phy_corr_imu_datas_size() const {
  return phy_corr_imu_datas_.size();
}
inline int ImuDataList::phy_corr_imu_datas_size() const {
  return _internal_phy_corr_imu_datas_size();
}
inline void ImuDataList::clear_phy_corr_imu_datas() {
  phy_corr_imu_datas_.Clear();
}
inline ::minieye::ImuCorrPhyData* ImuDataList::mutable_phy_corr_imu_datas(int index) {
  // @@protoc_insertion_point(field_mutable:minieye.ImuDataList.phy_corr_imu_datas)
  return phy_corr_imu_datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuCorrPhyData >*
ImuDataList::mutable_phy_corr_imu_datas() {
  // @@protoc_insertion_point(field_mutable_list:minieye.ImuDataList.phy_corr_imu_datas)
  return &phy_corr_imu_datas_;
}
inline const ::minieye::ImuCorrPhyData& ImuDataList::_internal_phy_corr_imu_datas(int index) const {
  return phy_corr_imu_datas_.Get(index);
}
inline const ::minieye::ImuCorrPhyData& ImuDataList::phy_corr_imu_datas(int index) const {
  // @@protoc_insertion_point(field_get:minieye.ImuDataList.phy_corr_imu_datas)
  return _internal_phy_corr_imu_datas(index);
}
inline ::minieye::ImuCorrPhyData* ImuDataList::_internal_add_phy_corr_imu_datas() {
  return phy_corr_imu_datas_.Add();
}
inline ::minieye::ImuCorrPhyData* ImuDataList::add_phy_corr_imu_datas() {
  // @@protoc_insertion_point(field_add:minieye.ImuDataList.phy_corr_imu_datas)
  return _internal_add_phy_corr_imu_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minieye::ImuCorrPhyData >&
ImuDataList::phy_corr_imu_datas() const {
  // @@protoc_insertion_point(field_list:minieye.ImuDataList.phy_corr_imu_datas)
  return phy_corr_imu_datas_;
}

// int32 data_type = 5;
inline void ImuDataList::clear_data_type() {
  data_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImuDataList::_internal_data_type() const {
  return data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImuDataList::data_type() const {
  // @@protoc_insertion_point(field_get:minieye.ImuDataList.data_type)
  return _internal_data_type();
}
inline void ImuDataList::_internal_set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_type_ = value;
}
inline void ImuDataList::set_data_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:minieye.ImuDataList.data_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_imu_2eproto
