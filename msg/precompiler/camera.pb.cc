// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera.proto

#include "camera.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraFrameExtendedInfo_camera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMatrix_camera_2eproto;
namespace minieye {
class CameraFrameExtendedInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraFrameExtendedInfo> _instance;
} _CameraFrameExtendedInfo_default_instance_;
class CameraFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraFrame> _instance;
} _CameraFrame_default_instance_;
class CamIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CamID> _instance;
} _CamID_default_instance_;
class TransMatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMatrix> _instance;
} _TransMatrix_default_instance_;
class CameraParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraParam> _instance;
} _CameraParam_default_instance_;
class CameraEmbeddedInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraEmbeddedInfo> _instance;
} _CameraEmbeddedInfo_default_instance_;
}  // namespace minieye
static void InitDefaultsscc_info_CamID_camera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_CamID_default_instance_;
    new (ptr) ::minieye::CamID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::CamID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CamID_camera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CamID_camera_2eproto}, {}};

static void InitDefaultsscc_info_CameraEmbeddedInfo_camera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_CameraEmbeddedInfo_default_instance_;
    new (ptr) ::minieye::CameraEmbeddedInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::CameraEmbeddedInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraEmbeddedInfo_camera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CameraEmbeddedInfo_camera_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_CameraFrame_camera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_CameraFrame_default_instance_;
    new (ptr) ::minieye::CameraFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::CameraFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraFrame_camera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CameraFrame_camera_2eproto}, {
      &scc_info_CameraFrameExtendedInfo_camera_2eproto.base,}};

static void InitDefaultsscc_info_CameraFrameExtendedInfo_camera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_CameraFrameExtendedInfo_default_instance_;
    new (ptr) ::minieye::CameraFrameExtendedInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::CameraFrameExtendedInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraFrameExtendedInfo_camera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraFrameExtendedInfo_camera_2eproto}, {}};

static void InitDefaultsscc_info_CameraParam_camera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_CameraParam_default_instance_;
    new (ptr) ::minieye::CameraParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::CameraParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraParam_camera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CameraParam_camera_2eproto}, {
      &scc_info_TransMatrix_camera_2eproto.base,}};

static void InitDefaultsscc_info_TransMatrix_camera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::_TransMatrix_default_instance_;
    new (ptr) ::minieye::TransMatrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::TransMatrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMatrix_camera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransMatrix_camera_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_camera_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_camera_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_camera_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_camera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, seq_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, frame_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, data_size_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, width_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, height_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, fsync_ads_sec_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, fsync_ads_nsec_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, fsync_gnss_sec_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, fsync_gnss_nsec_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, exp_start_ads_sec_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, exp_start_ads_nsec_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, exp_start_gnss_sec_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, exp_start_gnss_nsec_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, exp_end_ads_sec_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, exp_end_ads_nsec_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, exp_end_gnss_sec_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, exp_end_gnss_nsec_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, shutter_1_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, shutter_2_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrameExtendedInfo, image_supplement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrame, camera_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrame, timestamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrame, tick_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrame, frame_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrame, image_plane_addr_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrame, image_width_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrame, image_height_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrame, stride_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrame, image_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrame, image_supplement_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraFrame, extended_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::CamID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::CamID, cam_direct_),
  PROTOBUF_FIELD_OFFSET(::minieye::CamID, fov_),
  PROTOBUF_FIELD_OFFSET(::minieye::CamID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::TransMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::TransMatrix, vcsgnd2img_),
  PROTOBUF_FIELD_OFFSET(::minieye::TransMatrix, img2vcsgnd_),
  PROTOBUF_FIELD_OFFSET(::minieye::TransMatrix, local2img_),
  PROTOBUF_FIELD_OFFSET(::minieye::TransMatrix, img2local_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, focal_u_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, focal_v_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, cu_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, cv_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, pos_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, pitch_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, yaw_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, roll_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, fov_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, image_format_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, isp_ver_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, install_direction_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, trans_mtx_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, prj_model_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, image_width_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, image_height_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, distort_coeffs_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, camera_id_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, is_valid_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, calib_method_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraParam, calib_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::CameraEmbeddedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::CameraEmbeddedInfo, frame_count_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraEmbeddedInfo, expo_num_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraEmbeddedInfo, expo_ratio_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraEmbeddedInfo, shutter_time_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraEmbeddedInfo, sensor_a_gain_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraEmbeddedInfo, sensor_d_gain_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraEmbeddedInfo, exp_start_camera_time_stamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraEmbeddedInfo, exp_end_camera_time_stamp_),
  PROTOBUF_FIELD_OFFSET(::minieye::CameraEmbeddedInfo, is_valid_bitmap_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::CameraFrameExtendedInfo)},
  { 25, -1, sizeof(::minieye::CameraFrame)},
  { 41, -1, sizeof(::minieye::CamID)},
  { 49, -1, sizeof(::minieye::TransMatrix)},
  { 58, -1, sizeof(::minieye::CameraParam)},
  { 84, -1, sizeof(::minieye::CameraEmbeddedInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_CameraFrameExtendedInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_CameraFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_CamID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_TransMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_CameraParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::_CameraEmbeddedInfo_default_instance_),
};

const char descriptor_table_protodef_camera_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014camera.proto\022\007minieye\032\037google/protobuf"
  "/timestamp.proto\"\344\003\n\027CameraFrameExtended"
  "Info\022\013\n\003seq\030\001 \001(\r\022\022\n\nframe_type\030\002 \001(\r\022\021\n"
  "\tdata_size\030\003 \001(\005\022\r\n\005width\030\004 \001(\005\022\016\n\006heigh"
  "t\030\005 \001(\005\022\025\n\rfsync_ads_sec\030\006 \001(\r\022\026\n\016fsync_"
  "ads_nsec\030\007 \001(\r\022\026\n\016fsync_gnss_sec\030\010 \001(\r\022\027"
  "\n\017fsync_gnss_nsec\030\t \001(\r\022\031\n\021exp_start_ads"
  "_sec\030\n \001(\r\022\032\n\022exp_start_ads_nsec\030\013 \001(\r\022\032"
  "\n\022exp_start_gnss_sec\030\014 \001(\r\022\033\n\023exp_start_"
  "gnss_nsec\030\r \001(\r\022\027\n\017exp_end_ads_sec\030\016 \001(\r"
  "\022\030\n\020exp_end_ads_nsec\030\017 \001(\r\022\030\n\020exp_end_gn"
  "ss_sec\030\020 \001(\r\022\031\n\021exp_end_gnss_nsec\030\021 \001(\r\022"
  "\021\n\tshutter_1\030\022 \001(\r\022\021\n\tshutter_2\030\023 \001(\r\022\030\n"
  "\020image_supplement\030\024 \001(\014\"\217\002\n\013CameraFrame\022"
  "\021\n\tcamera_id\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\004\022\014\n"
  "\004tick\030\003 \001(\004\022\020\n\010frame_id\030\004 \001(\004\022\030\n\020image_p"
  "lane_addr\030\005 \003(\004\022\023\n\013image_width\030\006 \001(\r\022\024\n\014"
  "image_height\030\007 \001(\r\022\016\n\006stride\030\010 \001(\r\022\022\n\nim"
  "age_type\030\t \001(\r\022\030\n\020image_supplement\030\n \001(\014"
  "\0227\n\rextended_info\030\013 \001(\0132 .minieye.Camera"
  "FrameExtendedInfo\"E\n\005CamID\022\022\n\ncam_direct"
  "\030\001 \001(\005\022\034\n\003fov\030\002 \001(\0162\017.minieye.CamFov\022\n\n\002"
  "id\030\003 \001(\005\"[\n\013TransMatrix\022\022\n\nvcsgnd2img\030\001 "
  "\003(\002\022\022\n\nimg2vcsgnd\030\002 \003(\002\022\021\n\tlocal2img\030\003 \003"
  "(\002\022\021\n\timg2local\030\004 \003(\002\"\272\003\n\013CameraParam\022\017\n"
  "\007focal_u\030\001 \001(\002\022\017\n\007focal_v\030\002 \001(\002\022\n\n\002cu\030\003 "
  "\001(\002\022\n\n\002cv\030\004 \001(\002\022\013\n\003pos\030\005 \003(\002\022\r\n\005pitch\030\006 "
  "\001(\002\022\013\n\003yaw\030\007 \001(\002\022\014\n\004roll\030\010 \001(\002\022\013\n\003fov\030\t "
  "\001(\002\022\024\n\014image_format\030\n \001(\005\022\017\n\007isp_ver\030\013 \001"
  "(\t\022\031\n\021install_direction\030\014 \001(\005\022\'\n\ttrans_m"
  "tx\030\r \001(\0132\024.minieye.TransMatrix\022+\n\tprj_mo"
  "del\030\016 \001(\0162\030.minieye.ProjectionModel\022\023\n\013i"
  "mage_width\030\017 \001(\r\022\024\n\014image_height\030\020 \001(\r\022\026"
  "\n\016distort_coeffs\030\021 \003(\001\022\021\n\tcamera_id\030\022 \001("
  "\r\022\020\n\010is_valid\030\023 \001(\010\022\024\n\014calib_method\030\024 \001("
  "\005\022\027\n\017calib_timestamp\030\025 \001(\004\"\254\002\n\022CameraEmb"
  "eddedInfo\022\023\n\013frame_count\030\001 \001(\r\022\020\n\010expo_n"
  "um\030\002 \001(\r\022\022\n\nexpo_ratio\030\003 \003(\r\022\024\n\014shutter_"
  "time\030\004 \003(\r\022\025\n\rsensor_a_gain\030\005 \003(\002\022\025\n\rsen"
  "sor_d_gain\030\006 \003(\002\022\?\n\033exp_start_camera_tim"
  "e_stamp\030\007 \001(\0132\032.google.protobuf.Timestam"
  "p\022=\n\031exp_end_camera_time_stamp\030\010 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\022\027\n\017is_valid_bit"
  "map\030@ \001(\004*\200\001\n\013ImageFormat\022\022\n\016FORMAT_UNKN"
  "OWN\020\000\022\010\n\004GRAY\020\001\022\010\n\004YV12\020\002\022\010\n\004JPEG\020\003\022\007\n\003P"
  "NG\020\004\022\010\n\004CR12\020\005\022\007\n\003BAD\020\006\022\010\n\004NV12\020\007\022\010\n\004NV2"
  "1\020\010\022\017\n\013BYPASS_ONLY\020\t*I\n\tCamDirect\022\022\n\016DIR"
  "ECT_UNKNOWN\020\000\022\t\n\005FRONT\020\001\022\010\n\004REAR\020\002\022\010\n\004LE"
  "FT\020\004\022\t\n\005RIGHT\020\010*2\n\006CamFov\022\017\n\013kFovUnknown"
  "\020\000\022\n\n\006kFov30\020\001\022\013\n\007kFov100\020\002*m\n\017Projectio"
  "nModel\022\025\n\021PRJ_MODEL_UNKNOWN\020\000\022\013\n\007FISHEYE"
  "\020\001\022\007\n\003MEI\020\002\022\014\n\010PIN_HOLE\020\003\022\010\n\004ATAN\020\004\022\025\n\021D"
  "AVIDE_SCARAMUZZA\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_camera_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_camera_2eproto_sccs[6] = {
  &scc_info_CamID_camera_2eproto.base,
  &scc_info_CameraEmbeddedInfo_camera_2eproto.base,
  &scc_info_CameraFrame_camera_2eproto.base,
  &scc_info_CameraFrameExtendedInfo_camera_2eproto.base,
  &scc_info_CameraParam_camera_2eproto.base,
  &scc_info_TransMatrix_camera_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_camera_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_2eproto = {
  false, false, descriptor_table_protodef_camera_2eproto, "camera.proto", 2106,
  &descriptor_table_camera_2eproto_once, descriptor_table_camera_2eproto_sccs, descriptor_table_camera_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_camera_2eproto::offsets,
  file_level_metadata_camera_2eproto, 6, file_level_enum_descriptors_camera_2eproto, file_level_service_descriptors_camera_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_camera_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_camera_2eproto)), true);
namespace minieye {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camera_2eproto);
  return file_level_enum_descriptors_camera_2eproto[0];
}
bool ImageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CamDirect_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camera_2eproto);
  return file_level_enum_descriptors_camera_2eproto[1];
}
bool CamDirect_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CamFov_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camera_2eproto);
  return file_level_enum_descriptors_camera_2eproto[2];
}
bool CamFov_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectionModel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camera_2eproto);
  return file_level_enum_descriptors_camera_2eproto[3];
}
bool ProjectionModel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CameraFrameExtendedInfo::InitAsDefaultInstance() {
}
class CameraFrameExtendedInfo::_Internal {
 public:
};

CameraFrameExtendedInfo::CameraFrameExtendedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.CameraFrameExtendedInfo)
}
CameraFrameExtendedInfo::CameraFrameExtendedInfo(const CameraFrameExtendedInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_supplement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_supplement().empty()) {
    image_supplement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_supplement(),
      GetArena());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&shutter_2_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(shutter_2_));
  // @@protoc_insertion_point(copy_constructor:minieye.CameraFrameExtendedInfo)
}

void CameraFrameExtendedInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraFrameExtendedInfo_camera_2eproto.base);
  image_supplement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shutter_2_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(shutter_2_));
}

CameraFrameExtendedInfo::~CameraFrameExtendedInfo() {
  // @@protoc_insertion_point(destructor:minieye.CameraFrameExtendedInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraFrameExtendedInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_supplement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CameraFrameExtendedInfo::ArenaDtor(void* object) {
  CameraFrameExtendedInfo* _this = reinterpret_cast< CameraFrameExtendedInfo* >(object);
  (void)_this;
}
void CameraFrameExtendedInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraFrameExtendedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraFrameExtendedInfo& CameraFrameExtendedInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraFrameExtendedInfo_camera_2eproto.base);
  return *internal_default_instance();
}


void CameraFrameExtendedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.CameraFrameExtendedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_supplement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shutter_2_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(shutter_2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraFrameExtendedInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frame_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frame_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 data_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fsync_ads_sec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          fsync_ads_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fsync_ads_nsec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          fsync_ads_nsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fsync_gnss_sec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          fsync_gnss_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fsync_gnss_nsec = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          fsync_gnss_nsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 exp_start_ads_sec = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          exp_start_ads_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 exp_start_ads_nsec = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          exp_start_ads_nsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 exp_start_gnss_sec = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          exp_start_gnss_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 exp_start_gnss_nsec = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          exp_start_gnss_nsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 exp_end_ads_sec = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          exp_end_ads_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 exp_end_ads_nsec = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          exp_end_ads_nsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 exp_end_gnss_sec = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          exp_end_gnss_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 exp_end_gnss_nsec = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          exp_end_gnss_nsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 shutter_1 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          shutter_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 shutter_2 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          shutter_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes image_supplement = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_image_supplement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraFrameExtendedInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.CameraFrameExtendedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seq(), target);
  }

  // uint32 frame_type = 2;
  if (this->frame_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame_type(), target);
  }

  // int32 data_size = 3;
  if (this->data_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_data_size(), target);
  }

  // int32 width = 4;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_width(), target);
  }

  // int32 height = 5;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_height(), target);
  }

  // uint32 fsync_ads_sec = 6;
  if (this->fsync_ads_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fsync_ads_sec(), target);
  }

  // uint32 fsync_ads_nsec = 7;
  if (this->fsync_ads_nsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_fsync_ads_nsec(), target);
  }

  // uint32 fsync_gnss_sec = 8;
  if (this->fsync_gnss_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_fsync_gnss_sec(), target);
  }

  // uint32 fsync_gnss_nsec = 9;
  if (this->fsync_gnss_nsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fsync_gnss_nsec(), target);
  }

  // uint32 exp_start_ads_sec = 10;
  if (this->exp_start_ads_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_exp_start_ads_sec(), target);
  }

  // uint32 exp_start_ads_nsec = 11;
  if (this->exp_start_ads_nsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_exp_start_ads_nsec(), target);
  }

  // uint32 exp_start_gnss_sec = 12;
  if (this->exp_start_gnss_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_exp_start_gnss_sec(), target);
  }

  // uint32 exp_start_gnss_nsec = 13;
  if (this->exp_start_gnss_nsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_exp_start_gnss_nsec(), target);
  }

  // uint32 exp_end_ads_sec = 14;
  if (this->exp_end_ads_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_exp_end_ads_sec(), target);
  }

  // uint32 exp_end_ads_nsec = 15;
  if (this->exp_end_ads_nsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_exp_end_ads_nsec(), target);
  }

  // uint32 exp_end_gnss_sec = 16;
  if (this->exp_end_gnss_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_exp_end_gnss_sec(), target);
  }

  // uint32 exp_end_gnss_nsec = 17;
  if (this->exp_end_gnss_nsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_exp_end_gnss_nsec(), target);
  }

  // uint32 shutter_1 = 18;
  if (this->shutter_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_shutter_1(), target);
  }

  // uint32 shutter_2 = 19;
  if (this->shutter_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_shutter_2(), target);
  }

  // bytes image_supplement = 20;
  if (this->image_supplement().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_image_supplement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.CameraFrameExtendedInfo)
  return target;
}

size_t CameraFrameExtendedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.CameraFrameExtendedInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image_supplement = 20;
  if (this->image_supplement().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image_supplement());
  }

  // uint32 seq = 1;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // uint32 frame_type = 2;
  if (this->frame_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_type());
  }

  // int32 data_size = 3;
  if (this->data_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data_size());
  }

  // int32 width = 4;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 5;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // uint32 fsync_ads_sec = 6;
  if (this->fsync_ads_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fsync_ads_sec());
  }

  // uint32 fsync_ads_nsec = 7;
  if (this->fsync_ads_nsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fsync_ads_nsec());
  }

  // uint32 fsync_gnss_sec = 8;
  if (this->fsync_gnss_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fsync_gnss_sec());
  }

  // uint32 fsync_gnss_nsec = 9;
  if (this->fsync_gnss_nsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fsync_gnss_nsec());
  }

  // uint32 exp_start_ads_sec = 10;
  if (this->exp_start_ads_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exp_start_ads_sec());
  }

  // uint32 exp_start_ads_nsec = 11;
  if (this->exp_start_ads_nsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exp_start_ads_nsec());
  }

  // uint32 exp_start_gnss_sec = 12;
  if (this->exp_start_gnss_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exp_start_gnss_sec());
  }

  // uint32 exp_start_gnss_nsec = 13;
  if (this->exp_start_gnss_nsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exp_start_gnss_nsec());
  }

  // uint32 exp_end_ads_sec = 14;
  if (this->exp_end_ads_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exp_end_ads_sec());
  }

  // uint32 exp_end_ads_nsec = 15;
  if (this->exp_end_ads_nsec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exp_end_ads_nsec());
  }

  // uint32 exp_end_gnss_sec = 16;
  if (this->exp_end_gnss_sec() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exp_end_gnss_sec());
  }

  // uint32 exp_end_gnss_nsec = 17;
  if (this->exp_end_gnss_nsec() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exp_end_gnss_nsec());
  }

  // uint32 shutter_1 = 18;
  if (this->shutter_1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shutter_1());
  }

  // uint32 shutter_2 = 19;
  if (this->shutter_2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shutter_2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraFrameExtendedInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.CameraFrameExtendedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraFrameExtendedInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraFrameExtendedInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.CameraFrameExtendedInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.CameraFrameExtendedInfo)
    MergeFrom(*source);
  }
}

void CameraFrameExtendedInfo::MergeFrom(const CameraFrameExtendedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.CameraFrameExtendedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_supplement().size() > 0) {
    _internal_set_image_supplement(from._internal_image_supplement());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.frame_type() != 0) {
    _internal_set_frame_type(from._internal_frame_type());
  }
  if (from.data_size() != 0) {
    _internal_set_data_size(from._internal_data_size());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.fsync_ads_sec() != 0) {
    _internal_set_fsync_ads_sec(from._internal_fsync_ads_sec());
  }
  if (from.fsync_ads_nsec() != 0) {
    _internal_set_fsync_ads_nsec(from._internal_fsync_ads_nsec());
  }
  if (from.fsync_gnss_sec() != 0) {
    _internal_set_fsync_gnss_sec(from._internal_fsync_gnss_sec());
  }
  if (from.fsync_gnss_nsec() != 0) {
    _internal_set_fsync_gnss_nsec(from._internal_fsync_gnss_nsec());
  }
  if (from.exp_start_ads_sec() != 0) {
    _internal_set_exp_start_ads_sec(from._internal_exp_start_ads_sec());
  }
  if (from.exp_start_ads_nsec() != 0) {
    _internal_set_exp_start_ads_nsec(from._internal_exp_start_ads_nsec());
  }
  if (from.exp_start_gnss_sec() != 0) {
    _internal_set_exp_start_gnss_sec(from._internal_exp_start_gnss_sec());
  }
  if (from.exp_start_gnss_nsec() != 0) {
    _internal_set_exp_start_gnss_nsec(from._internal_exp_start_gnss_nsec());
  }
  if (from.exp_end_ads_sec() != 0) {
    _internal_set_exp_end_ads_sec(from._internal_exp_end_ads_sec());
  }
  if (from.exp_end_ads_nsec() != 0) {
    _internal_set_exp_end_ads_nsec(from._internal_exp_end_ads_nsec());
  }
  if (from.exp_end_gnss_sec() != 0) {
    _internal_set_exp_end_gnss_sec(from._internal_exp_end_gnss_sec());
  }
  if (from.exp_end_gnss_nsec() != 0) {
    _internal_set_exp_end_gnss_nsec(from._internal_exp_end_gnss_nsec());
  }
  if (from.shutter_1() != 0) {
    _internal_set_shutter_1(from._internal_shutter_1());
  }
  if (from.shutter_2() != 0) {
    _internal_set_shutter_2(from._internal_shutter_2());
  }
}

void CameraFrameExtendedInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.CameraFrameExtendedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraFrameExtendedInfo::CopyFrom(const CameraFrameExtendedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.CameraFrameExtendedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraFrameExtendedInfo::IsInitialized() const {
  return true;
}

void CameraFrameExtendedInfo::InternalSwap(CameraFrameExtendedInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_supplement_.Swap(&other->image_supplement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraFrameExtendedInfo, shutter_2_)
      + sizeof(CameraFrameExtendedInfo::shutter_2_)
      - PROTOBUF_FIELD_OFFSET(CameraFrameExtendedInfo, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraFrameExtendedInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraFrame::InitAsDefaultInstance() {
  ::minieye::_CameraFrame_default_instance_._instance.get_mutable()->extended_info_ = const_cast< ::minieye::CameraFrameExtendedInfo*>(
      ::minieye::CameraFrameExtendedInfo::internal_default_instance());
}
class CameraFrame::_Internal {
 public:
  static const ::minieye::CameraFrameExtendedInfo& extended_info(const CameraFrame* msg);
};

const ::minieye::CameraFrameExtendedInfo&
CameraFrame::_Internal::extended_info(const CameraFrame* msg) {
  return *msg->extended_info_;
}
CameraFrame::CameraFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  image_plane_addr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.CameraFrame)
}
CameraFrame::CameraFrame(const CameraFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      image_plane_addr_(from.image_plane_addr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_supplement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_supplement().empty()) {
    image_supplement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_supplement(),
      GetArena());
  }
  if (from._internal_has_extended_info()) {
    extended_info_ = new ::minieye::CameraFrameExtendedInfo(*from.extended_info_);
  } else {
    extended_info_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&image_type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(image_type_));
  // @@protoc_insertion_point(copy_constructor:minieye.CameraFrame)
}

void CameraFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraFrame_camera_2eproto.base);
  image_supplement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&extended_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_type_) -
      reinterpret_cast<char*>(&extended_info_)) + sizeof(image_type_));
}

CameraFrame::~CameraFrame() {
  // @@protoc_insertion_point(destructor:minieye.CameraFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_supplement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete extended_info_;
}

void CameraFrame::ArenaDtor(void* object) {
  CameraFrame* _this = reinterpret_cast< CameraFrame* >(object);
  (void)_this;
}
void CameraFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraFrame& CameraFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraFrame_camera_2eproto.base);
  return *internal_default_instance();
}


void CameraFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.CameraFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_plane_addr_.Clear();
  image_supplement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && extended_info_ != nullptr) {
    delete extended_info_;
  }
  extended_info_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_type_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(image_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 image_plane_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_image_plane_addr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_image_plane_addr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 image_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 image_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stride = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 image_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          image_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes image_supplement = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_image_supplement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.CameraFrameExtendedInfo extended_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_extended_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.CameraFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camera_id = 1;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_camera_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick(), target);
  }

  // uint64 frame_id = 4;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_frame_id(), target);
  }

  // repeated uint64 image_plane_addr = 5;
  {
    int byte_size = _image_plane_addr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_image_plane_addr(), byte_size, target);
    }
  }

  // uint32 image_width = 6;
  if (this->image_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_image_width(), target);
  }

  // uint32 image_height = 7;
  if (this->image_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_image_height(), target);
  }

  // uint32 stride = 8;
  if (this->stride() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_stride(), target);
  }

  // uint32 image_type = 9;
  if (this->image_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_image_type(), target);
  }

  // bytes image_supplement = 10;
  if (this->image_supplement().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_image_supplement(), target);
  }

  // .minieye.CameraFrameExtendedInfo extended_info = 11;
  if (this->has_extended_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::extended_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.CameraFrame)
  return target;
}

size_t CameraFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.CameraFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 image_plane_addr = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->image_plane_addr_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _image_plane_addr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes image_supplement = 10;
  if (this->image_supplement().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image_supplement());
  }

  // .minieye.CameraFrameExtendedInfo extended_info = 11;
  if (this->has_extended_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extended_info_);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 tick = 3;
  if (this->tick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tick());
  }

  // uint32 camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_camera_id());
  }

  // uint32 image_width = 6;
  if (this->image_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_image_width());
  }

  // uint64 frame_id = 4;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_id());
  }

  // uint32 image_height = 7;
  if (this->image_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_image_height());
  }

  // uint32 stride = 8;
  if (this->stride() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stride());
  }

  // uint32 image_type = 9;
  if (this->image_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_image_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.CameraFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.CameraFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.CameraFrame)
    MergeFrom(*source);
  }
}

void CameraFrame::MergeFrom(const CameraFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.CameraFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_plane_addr_.MergeFrom(from.image_plane_addr_);
  if (from.image_supplement().size() > 0) {
    _internal_set_image_supplement(from._internal_image_supplement());
  }
  if (from.has_extended_info()) {
    _internal_mutable_extended_info()->::minieye::CameraFrameExtendedInfo::MergeFrom(from._internal_extended_info());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.tick() != 0) {
    _internal_set_tick(from._internal_tick());
  }
  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.image_width() != 0) {
    _internal_set_image_width(from._internal_image_width());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.image_height() != 0) {
    _internal_set_image_height(from._internal_image_height());
  }
  if (from.stride() != 0) {
    _internal_set_stride(from._internal_stride());
  }
  if (from.image_type() != 0) {
    _internal_set_image_type(from._internal_image_type());
  }
}

void CameraFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.CameraFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraFrame::CopyFrom(const CameraFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.CameraFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraFrame::IsInitialized() const {
  return true;
}

void CameraFrame::InternalSwap(CameraFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_plane_addr_.InternalSwap(&other->image_plane_addr_);
  image_supplement_.Swap(&other->image_supplement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraFrame, image_type_)
      + sizeof(CameraFrame::image_type_)
      - PROTOBUF_FIELD_OFFSET(CameraFrame, extended_info_)>(
          reinterpret_cast<char*>(&extended_info_),
          reinterpret_cast<char*>(&other->extended_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CamID::InitAsDefaultInstance() {
}
class CamID::_Internal {
 public:
};

CamID::CamID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.CamID)
}
CamID::CamID(const CamID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cam_direct_, &from.cam_direct_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&cam_direct_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:minieye.CamID)
}

void CamID::SharedCtor() {
  ::memset(&cam_direct_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&cam_direct_)) + sizeof(id_));
}

CamID::~CamID() {
  // @@protoc_insertion_point(destructor:minieye.CamID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CamID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CamID::ArenaDtor(void* object) {
  CamID* _this = reinterpret_cast< CamID* >(object);
  (void)_this;
}
void CamID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CamID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CamID& CamID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CamID_camera_2eproto.base);
  return *internal_default_instance();
}


void CamID::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.CamID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cam_direct_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&cam_direct_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cam_direct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cam_direct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.CamFov fov = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fov(static_cast<::minieye::CamFov>(val));
        } else goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CamID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.CamID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cam_direct = 1;
  if (this->cam_direct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cam_direct(), target);
  }

  // .minieye.CamFov fov = 2;
  if (this->fov() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_fov(), target);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.CamID)
  return target;
}

size_t CamID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.CamID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cam_direct = 1;
  if (this->cam_direct() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cam_direct());
  }

  // .minieye.CamFov fov = 2;
  if (this->fov() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fov());
  }

  // int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CamID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.CamID)
  GOOGLE_DCHECK_NE(&from, this);
  const CamID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CamID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.CamID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.CamID)
    MergeFrom(*source);
  }
}

void CamID::MergeFrom(const CamID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.CamID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cam_direct() != 0) {
    _internal_set_cam_direct(from._internal_cam_direct());
  }
  if (from.fov() != 0) {
    _internal_set_fov(from._internal_fov());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CamID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.CamID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CamID::CopyFrom(const CamID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.CamID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamID::IsInitialized() const {
  return true;
}

void CamID::InternalSwap(CamID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CamID, id_)
      + sizeof(CamID::id_)
      - PROTOBUF_FIELD_OFFSET(CamID, cam_direct_)>(
          reinterpret_cast<char*>(&cam_direct_),
          reinterpret_cast<char*>(&other->cam_direct_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CamID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMatrix::InitAsDefaultInstance() {
}
class TransMatrix::_Internal {
 public:
};

TransMatrix::TransMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vcsgnd2img_(arena),
  img2vcsgnd_(arena),
  local2img_(arena),
  img2local_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.TransMatrix)
}
TransMatrix::TransMatrix(const TransMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vcsgnd2img_(from.vcsgnd2img_),
      img2vcsgnd_(from.img2vcsgnd_),
      local2img_(from.local2img_),
      img2local_(from.img2local_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minieye.TransMatrix)
}

void TransMatrix::SharedCtor() {
}

TransMatrix::~TransMatrix() {
  // @@protoc_insertion_point(destructor:minieye.TransMatrix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransMatrix::ArenaDtor(void* object) {
  TransMatrix* _this = reinterpret_cast< TransMatrix* >(object);
  (void)_this;
}
void TransMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMatrix& TransMatrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMatrix_camera_2eproto.base);
  return *internal_default_instance();
}


void TransMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.TransMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vcsgnd2img_.Clear();
  img2vcsgnd_.Clear();
  local2img_.Clear();
  img2local_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float vcsgnd2img = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vcsgnd2img(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_vcsgnd2img(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float img2vcsgnd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_img2vcsgnd(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_img2vcsgnd(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float local2img = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_local2img(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_local2img(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float img2local = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_img2local(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_img2local(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.TransMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float vcsgnd2img = 1;
  if (this->_internal_vcsgnd2img_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vcsgnd2img(), target);
  }

  // repeated float img2vcsgnd = 2;
  if (this->_internal_img2vcsgnd_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_img2vcsgnd(), target);
  }

  // repeated float local2img = 3;
  if (this->_internal_local2img_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_local2img(), target);
  }

  // repeated float img2local = 4;
  if (this->_internal_img2local_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_img2local(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.TransMatrix)
  return target;
}

size_t TransMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.TransMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vcsgnd2img = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vcsgnd2img_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vcsgnd2img_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float img2vcsgnd = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_img2vcsgnd_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _img2vcsgnd_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float local2img = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_local2img_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _local2img_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float img2local = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_img2local_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _img2local_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.TransMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.TransMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.TransMatrix)
    MergeFrom(*source);
  }
}

void TransMatrix::MergeFrom(const TransMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.TransMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vcsgnd2img_.MergeFrom(from.vcsgnd2img_);
  img2vcsgnd_.MergeFrom(from.img2vcsgnd_);
  local2img_.MergeFrom(from.local2img_);
  img2local_.MergeFrom(from.img2local_);
}

void TransMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.TransMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMatrix::CopyFrom(const TransMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.TransMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMatrix::IsInitialized() const {
  return true;
}

void TransMatrix::InternalSwap(TransMatrix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vcsgnd2img_.InternalSwap(&other->vcsgnd2img_);
  img2vcsgnd_.InternalSwap(&other->img2vcsgnd_);
  local2img_.InternalSwap(&other->local2img_);
  img2local_.InternalSwap(&other->img2local_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMatrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraParam::InitAsDefaultInstance() {
  ::minieye::_CameraParam_default_instance_._instance.get_mutable()->trans_mtx_ = const_cast< ::minieye::TransMatrix*>(
      ::minieye::TransMatrix::internal_default_instance());
}
class CameraParam::_Internal {
 public:
  static const ::minieye::TransMatrix& trans_mtx(const CameraParam* msg);
};

const ::minieye::TransMatrix&
CameraParam::_Internal::trans_mtx(const CameraParam* msg) {
  return *msg->trans_mtx_;
}
CameraParam::CameraParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pos_(arena),
  distort_coeffs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.CameraParam)
}
CameraParam::CameraParam(const CameraParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pos_(from.pos_),
      distort_coeffs_(from.distort_coeffs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isp_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_isp_ver().empty()) {
    isp_ver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_isp_ver(),
      GetArena());
  }
  if (from._internal_has_trans_mtx()) {
    trans_mtx_ = new ::minieye::TransMatrix(*from.trans_mtx_);
  } else {
    trans_mtx_ = nullptr;
  }
  ::memcpy(&focal_u_, &from.focal_u_,
    static_cast<size_t>(reinterpret_cast<char*>(&calib_timestamp_) -
    reinterpret_cast<char*>(&focal_u_)) + sizeof(calib_timestamp_));
  // @@protoc_insertion_point(copy_constructor:minieye.CameraParam)
}

void CameraParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraParam_camera_2eproto.base);
  isp_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trans_mtx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calib_timestamp_) -
      reinterpret_cast<char*>(&trans_mtx_)) + sizeof(calib_timestamp_));
}

CameraParam::~CameraParam() {
  // @@protoc_insertion_point(destructor:minieye.CameraParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  isp_ver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trans_mtx_;
}

void CameraParam::ArenaDtor(void* object) {
  CameraParam* _this = reinterpret_cast< CameraParam* >(object);
  (void)_this;
}
void CameraParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraParam& CameraParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraParam_camera_2eproto.base);
  return *internal_default_instance();
}


void CameraParam::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.CameraParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_.Clear();
  distort_coeffs_.Clear();
  isp_ver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && trans_mtx_ != nullptr) {
    delete trans_mtx_;
  }
  trans_mtx_ = nullptr;
  ::memset(&focal_u_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calib_timestamp_) -
      reinterpret_cast<char*>(&focal_u_)) + sizeof(calib_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float focal_u = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          focal_u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float focal_v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          focal_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          cu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          cv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fov = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          fov_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 image_format = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          image_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string isp_ver = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_isp_ver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minieye.CameraParam.isp_ver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 install_direction = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          install_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.TransMatrix trans_mtx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_trans_mtx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.ProjectionModel prj_model = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_prj_model(static_cast<::minieye::ProjectionModel>(val));
        } else goto handle_unusual;
        continue;
      // uint32 image_width = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 image_height = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double distort_coeffs = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_distort_coeffs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137) {
          _internal_add_distort_coeffs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 camera_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_valid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 calib_method = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          calib_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 calib_timestamp = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          calib_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.CameraParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float focal_u = 1;
  if (!(this->focal_u() <= 0 && this->focal_u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_focal_u(), target);
  }

  // float focal_v = 2;
  if (!(this->focal_v() <= 0 && this->focal_v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_focal_v(), target);
  }

  // float cu = 3;
  if (!(this->cu() <= 0 && this->cu() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cu(), target);
  }

  // float cv = 4;
  if (!(this->cv() <= 0 && this->cv() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cv(), target);
  }

  // repeated float pos = 5;
  if (this->_internal_pos_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_pos(), target);
  }

  // float pitch = 6;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_pitch(), target);
  }

  // float yaw = 7;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_yaw(), target);
  }

  // float roll = 8;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_roll(), target);
  }

  // float fov = 9;
  if (!(this->fov() <= 0 && this->fov() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_fov(), target);
  }

  // int32 image_format = 10;
  if (this->image_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_image_format(), target);
  }

  // string isp_ver = 11;
  if (this->isp_ver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isp_ver().data(), static_cast<int>(this->_internal_isp_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minieye.CameraParam.isp_ver");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_isp_ver(), target);
  }

  // int32 install_direction = 12;
  if (this->install_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_install_direction(), target);
  }

  // .minieye.TransMatrix trans_mtx = 13;
  if (this->has_trans_mtx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::trans_mtx(this), target, stream);
  }

  // .minieye.ProjectionModel prj_model = 14;
  if (this->prj_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_prj_model(), target);
  }

  // uint32 image_width = 15;
  if (this->image_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_image_width(), target);
  }

  // uint32 image_height = 16;
  if (this->image_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_image_height(), target);
  }

  // repeated double distort_coeffs = 17;
  if (this->_internal_distort_coeffs_size() > 0) {
    target = stream->WriteFixedPacked(17, _internal_distort_coeffs(), target);
  }

  // uint32 camera_id = 18;
  if (this->camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_camera_id(), target);
  }

  // bool is_valid = 19;
  if (this->is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_is_valid(), target);
  }

  // int32 calib_method = 20;
  if (this->calib_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_calib_method(), target);
  }

  // uint64 calib_timestamp = 21;
  if (this->calib_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_calib_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.CameraParam)
  return target;
}

size_t CameraParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.CameraParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float pos = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double distort_coeffs = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_distort_coeffs_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _distort_coeffs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string isp_ver = 11;
  if (this->isp_ver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isp_ver());
  }

  // .minieye.TransMatrix trans_mtx = 13;
  if (this->has_trans_mtx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trans_mtx_);
  }

  // float focal_u = 1;
  if (!(this->focal_u() <= 0 && this->focal_u() >= 0)) {
    total_size += 1 + 4;
  }

  // float focal_v = 2;
  if (!(this->focal_v() <= 0 && this->focal_v() >= 0)) {
    total_size += 1 + 4;
  }

  // float cu = 3;
  if (!(this->cu() <= 0 && this->cu() >= 0)) {
    total_size += 1 + 4;
  }

  // float cv = 4;
  if (!(this->cv() <= 0 && this->cv() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch = 6;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw = 7;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // float roll = 8;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 4;
  }

  // float fov = 9;
  if (!(this->fov() <= 0 && this->fov() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 image_format = 10;
  if (this->image_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_image_format());
  }

  // int32 install_direction = 12;
  if (this->install_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_install_direction());
  }

  // .minieye.ProjectionModel prj_model = 14;
  if (this->prj_model() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_prj_model());
  }

  // uint32 image_width = 15;
  if (this->image_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_image_width());
  }

  // uint32 image_height = 16;
  if (this->image_height() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_image_height());
  }

  // uint32 camera_id = 18;
  if (this->camera_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_camera_id());
  }

  // bool is_valid = 19;
  if (this->is_valid() != 0) {
    total_size += 2 + 1;
  }

  // int32 calib_method = 20;
  if (this->calib_method() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_calib_method());
  }

  // uint64 calib_timestamp = 21;
  if (this->calib_timestamp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_calib_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.CameraParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.CameraParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.CameraParam)
    MergeFrom(*source);
  }
}

void CameraParam::MergeFrom(const CameraParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.CameraParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pos_.MergeFrom(from.pos_);
  distort_coeffs_.MergeFrom(from.distort_coeffs_);
  if (from.isp_ver().size() > 0) {
    _internal_set_isp_ver(from._internal_isp_ver());
  }
  if (from.has_trans_mtx()) {
    _internal_mutable_trans_mtx()->::minieye::TransMatrix::MergeFrom(from._internal_trans_mtx());
  }
  if (!(from.focal_u() <= 0 && from.focal_u() >= 0)) {
    _internal_set_focal_u(from._internal_focal_u());
  }
  if (!(from.focal_v() <= 0 && from.focal_v() >= 0)) {
    _internal_set_focal_v(from._internal_focal_v());
  }
  if (!(from.cu() <= 0 && from.cu() >= 0)) {
    _internal_set_cu(from._internal_cu());
  }
  if (!(from.cv() <= 0 && from.cv() >= 0)) {
    _internal_set_cv(from._internal_cv());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
  if (!(from.fov() <= 0 && from.fov() >= 0)) {
    _internal_set_fov(from._internal_fov());
  }
  if (from.image_format() != 0) {
    _internal_set_image_format(from._internal_image_format());
  }
  if (from.install_direction() != 0) {
    _internal_set_install_direction(from._internal_install_direction());
  }
  if (from.prj_model() != 0) {
    _internal_set_prj_model(from._internal_prj_model());
  }
  if (from.image_width() != 0) {
    _internal_set_image_width(from._internal_image_width());
  }
  if (from.image_height() != 0) {
    _internal_set_image_height(from._internal_image_height());
  }
  if (from.camera_id() != 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
  if (from.calib_method() != 0) {
    _internal_set_calib_method(from._internal_calib_method());
  }
  if (from.calib_timestamp() != 0) {
    _internal_set_calib_timestamp(from._internal_calib_timestamp());
  }
}

void CameraParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.CameraParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraParam::CopyFrom(const CameraParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.CameraParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraParam::IsInitialized() const {
  return true;
}

void CameraParam::InternalSwap(CameraParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pos_.InternalSwap(&other->pos_);
  distort_coeffs_.InternalSwap(&other->distort_coeffs_);
  isp_ver_.Swap(&other->isp_ver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraParam, calib_timestamp_)
      + sizeof(CameraParam::calib_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CameraParam, trans_mtx_)>(
          reinterpret_cast<char*>(&trans_mtx_),
          reinterpret_cast<char*>(&other->trans_mtx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraEmbeddedInfo::InitAsDefaultInstance() {
  ::minieye::_CameraEmbeddedInfo_default_instance_._instance.get_mutable()->exp_start_camera_time_stamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::minieye::_CameraEmbeddedInfo_default_instance_._instance.get_mutable()->exp_end_camera_time_stamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class CameraEmbeddedInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& exp_start_camera_time_stamp(const CameraEmbeddedInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& exp_end_camera_time_stamp(const CameraEmbeddedInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CameraEmbeddedInfo::_Internal::exp_start_camera_time_stamp(const CameraEmbeddedInfo* msg) {
  return *msg->exp_start_camera_time_stamp_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
CameraEmbeddedInfo::_Internal::exp_end_camera_time_stamp(const CameraEmbeddedInfo* msg) {
  return *msg->exp_end_camera_time_stamp_;
}
void CameraEmbeddedInfo::clear_exp_start_camera_time_stamp() {
  if (GetArena() == nullptr && exp_start_camera_time_stamp_ != nullptr) {
    delete exp_start_camera_time_stamp_;
  }
  exp_start_camera_time_stamp_ = nullptr;
}
void CameraEmbeddedInfo::clear_exp_end_camera_time_stamp() {
  if (GetArena() == nullptr && exp_end_camera_time_stamp_ != nullptr) {
    delete exp_end_camera_time_stamp_;
  }
  exp_end_camera_time_stamp_ = nullptr;
}
CameraEmbeddedInfo::CameraEmbeddedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  expo_ratio_(arena),
  shutter_time_(arena),
  sensor_a_gain_(arena),
  sensor_d_gain_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.CameraEmbeddedInfo)
}
CameraEmbeddedInfo::CameraEmbeddedInfo(const CameraEmbeddedInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      expo_ratio_(from.expo_ratio_),
      shutter_time_(from.shutter_time_),
      sensor_a_gain_(from.sensor_a_gain_),
      sensor_d_gain_(from.sensor_d_gain_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_exp_start_camera_time_stamp()) {
    exp_start_camera_time_stamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.exp_start_camera_time_stamp_);
  } else {
    exp_start_camera_time_stamp_ = nullptr;
  }
  if (from._internal_has_exp_end_camera_time_stamp()) {
    exp_end_camera_time_stamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.exp_end_camera_time_stamp_);
  } else {
    exp_end_camera_time_stamp_ = nullptr;
  }
  ::memcpy(&frame_count_, &from.frame_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_valid_bitmap_) -
    reinterpret_cast<char*>(&frame_count_)) + sizeof(is_valid_bitmap_));
  // @@protoc_insertion_point(copy_constructor:minieye.CameraEmbeddedInfo)
}

void CameraEmbeddedInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraEmbeddedInfo_camera_2eproto.base);
  ::memset(&exp_start_camera_time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_bitmap_) -
      reinterpret_cast<char*>(&exp_start_camera_time_stamp_)) + sizeof(is_valid_bitmap_));
}

CameraEmbeddedInfo::~CameraEmbeddedInfo() {
  // @@protoc_insertion_point(destructor:minieye.CameraEmbeddedInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraEmbeddedInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete exp_start_camera_time_stamp_;
  if (this != internal_default_instance()) delete exp_end_camera_time_stamp_;
}

void CameraEmbeddedInfo::ArenaDtor(void* object) {
  CameraEmbeddedInfo* _this = reinterpret_cast< CameraEmbeddedInfo* >(object);
  (void)_this;
}
void CameraEmbeddedInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraEmbeddedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraEmbeddedInfo& CameraEmbeddedInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraEmbeddedInfo_camera_2eproto.base);
  return *internal_default_instance();
}


void CameraEmbeddedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.CameraEmbeddedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expo_ratio_.Clear();
  shutter_time_.Clear();
  sensor_a_gain_.Clear();
  sensor_d_gain_.Clear();
  if (GetArena() == nullptr && exp_start_camera_time_stamp_ != nullptr) {
    delete exp_start_camera_time_stamp_;
  }
  exp_start_camera_time_stamp_ = nullptr;
  if (GetArena() == nullptr && exp_end_camera_time_stamp_ != nullptr) {
    delete exp_end_camera_time_stamp_;
  }
  exp_end_camera_time_stamp_ = nullptr;
  ::memset(&frame_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_bitmap_) -
      reinterpret_cast<char*>(&frame_count_)) + sizeof(is_valid_bitmap_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraEmbeddedInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 frame_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expo_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expo_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 expo_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_expo_ratio(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_expo_ratio(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 shutter_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_shutter_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_shutter_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float sensor_a_gain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sensor_a_gain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_sensor_a_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float sensor_d_gain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sensor_d_gain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_sensor_d_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp exp_start_camera_time_stamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_exp_start_camera_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp exp_end_camera_time_stamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_exp_end_camera_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 is_valid_bitmap = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          is_valid_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraEmbeddedInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.CameraEmbeddedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_count = 1;
  if (this->frame_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frame_count(), target);
  }

  // uint32 expo_num = 2;
  if (this->expo_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_expo_num(), target);
  }

  // repeated uint32 expo_ratio = 3;
  {
    int byte_size = _expo_ratio_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_expo_ratio(), byte_size, target);
    }
  }

  // repeated uint32 shutter_time = 4;
  {
    int byte_size = _shutter_time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_shutter_time(), byte_size, target);
    }
  }

  // repeated float sensor_a_gain = 5;
  if (this->_internal_sensor_a_gain_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_sensor_a_gain(), target);
  }

  // repeated float sensor_d_gain = 6;
  if (this->_internal_sensor_d_gain_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_sensor_d_gain(), target);
  }

  // .google.protobuf.Timestamp exp_start_camera_time_stamp = 7;
  if (this->has_exp_start_camera_time_stamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::exp_start_camera_time_stamp(this), target, stream);
  }

  // .google.protobuf.Timestamp exp_end_camera_time_stamp = 8;
  if (this->has_exp_end_camera_time_stamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::exp_end_camera_time_stamp(this), target, stream);
  }

  // uint64 is_valid_bitmap = 64;
  if (this->is_valid_bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(64, this->_internal_is_valid_bitmap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.CameraEmbeddedInfo)
  return target;
}

size_t CameraEmbeddedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.CameraEmbeddedInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 expo_ratio = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->expo_ratio_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _expo_ratio_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 shutter_time = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->shutter_time_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shutter_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float sensor_a_gain = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sensor_a_gain_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sensor_a_gain_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float sensor_d_gain = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sensor_d_gain_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sensor_d_gain_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .google.protobuf.Timestamp exp_start_camera_time_stamp = 7;
  if (this->has_exp_start_camera_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exp_start_camera_time_stamp_);
  }

  // .google.protobuf.Timestamp exp_end_camera_time_stamp = 8;
  if (this->has_exp_end_camera_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exp_end_camera_time_stamp_);
  }

  // uint32 frame_count = 1;
  if (this->frame_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_count());
  }

  // uint32 expo_num = 2;
  if (this->expo_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expo_num());
  }

  // uint64 is_valid_bitmap = 64;
  if (this->is_valid_bitmap() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_is_valid_bitmap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraEmbeddedInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.CameraEmbeddedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraEmbeddedInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraEmbeddedInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.CameraEmbeddedInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.CameraEmbeddedInfo)
    MergeFrom(*source);
  }
}

void CameraEmbeddedInfo::MergeFrom(const CameraEmbeddedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.CameraEmbeddedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expo_ratio_.MergeFrom(from.expo_ratio_);
  shutter_time_.MergeFrom(from.shutter_time_);
  sensor_a_gain_.MergeFrom(from.sensor_a_gain_);
  sensor_d_gain_.MergeFrom(from.sensor_d_gain_);
  if (from.has_exp_start_camera_time_stamp()) {
    _internal_mutable_exp_start_camera_time_stamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_exp_start_camera_time_stamp());
  }
  if (from.has_exp_end_camera_time_stamp()) {
    _internal_mutable_exp_end_camera_time_stamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_exp_end_camera_time_stamp());
  }
  if (from.frame_count() != 0) {
    _internal_set_frame_count(from._internal_frame_count());
  }
  if (from.expo_num() != 0) {
    _internal_set_expo_num(from._internal_expo_num());
  }
  if (from.is_valid_bitmap() != 0) {
    _internal_set_is_valid_bitmap(from._internal_is_valid_bitmap());
  }
}

void CameraEmbeddedInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.CameraEmbeddedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraEmbeddedInfo::CopyFrom(const CameraEmbeddedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.CameraEmbeddedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraEmbeddedInfo::IsInitialized() const {
  return true;
}

void CameraEmbeddedInfo::InternalSwap(CameraEmbeddedInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  expo_ratio_.InternalSwap(&other->expo_ratio_);
  shutter_time_.InternalSwap(&other->shutter_time_);
  sensor_a_gain_.InternalSwap(&other->sensor_a_gain_);
  sensor_d_gain_.InternalSwap(&other->sensor_d_gain_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraEmbeddedInfo, is_valid_bitmap_)
      + sizeof(CameraEmbeddedInfo::is_valid_bitmap_)
      - PROTOBUF_FIELD_OFFSET(CameraEmbeddedInfo, exp_start_camera_time_stamp_)>(
          reinterpret_cast<char*>(&exp_start_camera_time_stamp_),
          reinterpret_cast<char*>(&other->exp_start_camera_time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraEmbeddedInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::CameraFrameExtendedInfo* Arena::CreateMaybeMessage< ::minieye::CameraFrameExtendedInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::CameraFrameExtendedInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::CameraFrame* Arena::CreateMaybeMessage< ::minieye::CameraFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::CameraFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::CamID* Arena::CreateMaybeMessage< ::minieye::CamID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::CamID >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::TransMatrix* Arena::CreateMaybeMessage< ::minieye::TransMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::TransMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::CameraParam* Arena::CreateMaybeMessage< ::minieye::CameraParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::CameraParam >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::CameraEmbeddedInfo* Arena::CreateMaybeMessage< ::minieye::CameraEmbeddedInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::CameraEmbeddedInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
