// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: road_seg.proto

#include "road_seg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_calib_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalibParam_calib_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraFrame_camera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_road_5fseg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LaneSegReq_road_5fseg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_road_5fseg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScaleWindow_road_5fseg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_road_5fseg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SegMask_road_5fseg_2eproto;
namespace minieye {
namespace lane {
class LaneSegReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneSegReq> _instance;
} _LaneSegReq_default_instance_;
class ScaleWindowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScaleWindow> _instance;
} _ScaleWindow_default_instance_;
class SegMaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegMask> _instance;
} _SegMask_default_instance_;
class LaneSegResMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneSegResMeta> _instance;
} _LaneSegResMeta_default_instance_;
}  // namespace lane
}  // namespace minieye
static void InitDefaultsscc_info_LaneSegReq_road_5fseg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::lane::_LaneSegReq_default_instance_;
    new (ptr) ::minieye::lane::LaneSegReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::lane::LaneSegReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LaneSegReq_road_5fseg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LaneSegReq_road_5fseg_2eproto}, {
      &scc_info_CameraFrame_camera_2eproto.base,
      &scc_info_CalibParam_calib_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_LaneSegResMeta_road_5fseg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::lane::_LaneSegResMeta_default_instance_;
    new (ptr) ::minieye::lane::LaneSegResMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::lane::LaneSegResMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LaneSegResMeta_road_5fseg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LaneSegResMeta_road_5fseg_2eproto}, {
      &scc_info_SegMask_road_5fseg_2eproto.base,
      &scc_info_LaneSegReq_road_5fseg_2eproto.base,}};

static void InitDefaultsscc_info_ScaleWindow_road_5fseg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::lane::_ScaleWindow_default_instance_;
    new (ptr) ::minieye::lane::ScaleWindow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::lane::ScaleWindow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScaleWindow_road_5fseg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScaleWindow_road_5fseg_2eproto}, {}};

static void InitDefaultsscc_info_SegMask_road_5fseg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minieye::lane::_SegMask_default_instance_;
    new (ptr) ::minieye::lane::SegMask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minieye::lane::SegMask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SegMask_road_5fseg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SegMask_road_5fseg_2eproto}, {
      &scc_info_ScaleWindow_road_5fseg_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_road_5fseg_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_road_5fseg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_road_5fseg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_road_5fseg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::lane::LaneSegReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::lane::LaneSegReq, camera_frame_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::LaneSegReq, calib_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::lane::ScaleWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::lane::ScaleWindow, scale_x_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::ScaleWindow, scale_y_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::ScaleWindow, offset_x_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::ScaleWindow, offset_y_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::ScaleWindow, width_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::ScaleWindow, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::lane::SegMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::lane::SegMask, mask_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::SegMask, seg_info_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::SegMask, seg_supplement_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::SegMask, label_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::SegMask, offset_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::SegMask, data_type_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::SegMask, buff_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minieye::lane::LaneSegResMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minieye::lane::LaneSegResMeta, seg_mask_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::LaneSegResMeta, seg_context_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::LaneSegResMeta, start_time_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::LaneSegResMeta, finish_time_),
  PROTOBUF_FIELD_OFFSET(::minieye::lane::LaneSegResMeta, shm_index_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minieye::lane::LaneSegReq)},
  { 7, -1, sizeof(::minieye::lane::ScaleWindow)},
  { 18, -1, sizeof(::minieye::lane::SegMask)},
  { 30, -1, sizeof(::minieye::lane::LaneSegResMeta)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::lane::_LaneSegReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::lane::_ScaleWindow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::lane::_SegMask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minieye::lane::_LaneSegResMeta_default_instance_),
};

const char descriptor_table_protodef_road_5fseg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016road_seg.proto\022\014minieye.lane\032\014camera.p"
  "roto\032\021calib_param.proto\"b\n\nLaneSegReq\022*\n"
  "\014camera_frame\030\001 \001(\0132\024.minieye.CameraFram"
  "e\022(\n\013calib_param\030\002 \001(\0132\023.minieye.CalibPa"
  "ram\"r\n\013ScaleWindow\022\017\n\007scale_x\030\001 \001(\002\022\017\n\007s"
  "cale_y\030\002 \001(\002\022\020\n\010offset_x\030\003 \001(\002\022\020\n\010offset"
  "_y\030\004 \001(\002\022\r\n\005width\030\005 \001(\005\022\016\n\006height\030\006 \001(\005\""
  "\241\001\n\007SegMask\022\014\n\004mask\030\001 \001(\004\022+\n\010seg_info\030\002 "
  "\001(\0132\031.minieye.lane.ScaleWindow\022\026\n\016seg_su"
  "pplement\030\003 \001(\014\022\r\n\005label\030\004 \001(\t\022\016\n\006offset\030"
  "\005 \001(\004\022\021\n\tdata_type\030\006 \001(\005\022\021\n\tbuff_size\030\007 "
  "\001(\004\"\244\001\n\016LaneSegResMeta\022\'\n\010seg_mask\030\001 \003(\013"
  "2\025.minieye.lane.SegMask\022-\n\013seg_context\030\002"
  " \001(\0132\030.minieye.lane.LaneSegReq\022\022\n\nstart_"
  "time\030\003 \001(\004\022\023\n\013finish_time\030\004 \001(\004\022\021\n\tshm_i"
  "ndex\030\005 \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_road_5fseg_2eproto_deps[2] = {
  &::descriptor_table_calib_5fparam_2eproto,
  &::descriptor_table_camera_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_road_5fseg_2eproto_sccs[4] = {
  &scc_info_LaneSegReq_road_5fseg_2eproto.base,
  &scc_info_LaneSegResMeta_road_5fseg_2eproto.base,
  &scc_info_ScaleWindow_road_5fseg_2eproto.base,
  &scc_info_SegMask_road_5fseg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_road_5fseg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_road_5fseg_2eproto = {
  false, false, descriptor_table_protodef_road_5fseg_2eproto, "road_seg.proto", 618,
  &descriptor_table_road_5fseg_2eproto_once, descriptor_table_road_5fseg_2eproto_sccs, descriptor_table_road_5fseg_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_road_5fseg_2eproto::offsets,
  file_level_metadata_road_5fseg_2eproto, 4, file_level_enum_descriptors_road_5fseg_2eproto, file_level_service_descriptors_road_5fseg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_road_5fseg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_road_5fseg_2eproto)), true);
namespace minieye {
namespace lane {

// ===================================================================

void LaneSegReq::InitAsDefaultInstance() {
  ::minieye::lane::_LaneSegReq_default_instance_._instance.get_mutable()->camera_frame_ = const_cast< ::minieye::CameraFrame*>(
      ::minieye::CameraFrame::internal_default_instance());
  ::minieye::lane::_LaneSegReq_default_instance_._instance.get_mutable()->calib_param_ = const_cast< ::minieye::CalibParam*>(
      ::minieye::CalibParam::internal_default_instance());
}
class LaneSegReq::_Internal {
 public:
  static const ::minieye::CameraFrame& camera_frame(const LaneSegReq* msg);
  static const ::minieye::CalibParam& calib_param(const LaneSegReq* msg);
};

const ::minieye::CameraFrame&
LaneSegReq::_Internal::camera_frame(const LaneSegReq* msg) {
  return *msg->camera_frame_;
}
const ::minieye::CalibParam&
LaneSegReq::_Internal::calib_param(const LaneSegReq* msg) {
  return *msg->calib_param_;
}
void LaneSegReq::clear_camera_frame() {
  if (GetArena() == nullptr && camera_frame_ != nullptr) {
    delete camera_frame_;
  }
  camera_frame_ = nullptr;
}
void LaneSegReq::clear_calib_param() {
  if (GetArena() == nullptr && calib_param_ != nullptr) {
    delete calib_param_;
  }
  calib_param_ = nullptr;
}
LaneSegReq::LaneSegReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.lane.LaneSegReq)
}
LaneSegReq::LaneSegReq(const LaneSegReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_camera_frame()) {
    camera_frame_ = new ::minieye::CameraFrame(*from.camera_frame_);
  } else {
    camera_frame_ = nullptr;
  }
  if (from._internal_has_calib_param()) {
    calib_param_ = new ::minieye::CalibParam(*from.calib_param_);
  } else {
    calib_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minieye.lane.LaneSegReq)
}

void LaneSegReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneSegReq_road_5fseg_2eproto.base);
  ::memset(&camera_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calib_param_) -
      reinterpret_cast<char*>(&camera_frame_)) + sizeof(calib_param_));
}

LaneSegReq::~LaneSegReq() {
  // @@protoc_insertion_point(destructor:minieye.lane.LaneSegReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneSegReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete camera_frame_;
  if (this != internal_default_instance()) delete calib_param_;
}

void LaneSegReq::ArenaDtor(void* object) {
  LaneSegReq* _this = reinterpret_cast< LaneSegReq* >(object);
  (void)_this;
}
void LaneSegReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneSegReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneSegReq& LaneSegReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneSegReq_road_5fseg_2eproto.base);
  return *internal_default_instance();
}


void LaneSegReq::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.lane.LaneSegReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && camera_frame_ != nullptr) {
    delete camera_frame_;
  }
  camera_frame_ = nullptr;
  if (GetArena() == nullptr && calib_param_ != nullptr) {
    delete calib_param_;
  }
  calib_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneSegReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minieye.CameraFrame camera_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.CalibParam calib_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_calib_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneSegReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.lane.LaneSegReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minieye.CameraFrame camera_frame = 1;
  if (this->has_camera_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::camera_frame(this), target, stream);
  }

  // .minieye.CalibParam calib_param = 2;
  if (this->has_calib_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::calib_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.lane.LaneSegReq)
  return target;
}

size_t LaneSegReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.lane.LaneSegReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minieye.CameraFrame camera_frame = 1;
  if (this->has_camera_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_frame_);
  }

  // .minieye.CalibParam calib_param = 2;
  if (this->has_calib_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calib_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneSegReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.lane.LaneSegReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSegReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneSegReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.lane.LaneSegReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.lane.LaneSegReq)
    MergeFrom(*source);
  }
}

void LaneSegReq::MergeFrom(const LaneSegReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.lane.LaneSegReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_camera_frame()) {
    _internal_mutable_camera_frame()->::minieye::CameraFrame::MergeFrom(from._internal_camera_frame());
  }
  if (from.has_calib_param()) {
    _internal_mutable_calib_param()->::minieye::CalibParam::MergeFrom(from._internal_calib_param());
  }
}

void LaneSegReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.lane.LaneSegReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSegReq::CopyFrom(const LaneSegReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.lane.LaneSegReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegReq::IsInitialized() const {
  return true;
}

void LaneSegReq::InternalSwap(LaneSegReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneSegReq, calib_param_)
      + sizeof(LaneSegReq::calib_param_)
      - PROTOBUF_FIELD_OFFSET(LaneSegReq, camera_frame_)>(
          reinterpret_cast<char*>(&camera_frame_),
          reinterpret_cast<char*>(&other->camera_frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneSegReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScaleWindow::InitAsDefaultInstance() {
}
class ScaleWindow::_Internal {
 public:
};

ScaleWindow::ScaleWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.lane.ScaleWindow)
}
ScaleWindow::ScaleWindow(const ScaleWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scale_x_, &from.scale_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&scale_x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:minieye.lane.ScaleWindow)
}

void ScaleWindow::SharedCtor() {
  ::memset(&scale_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&scale_x_)) + sizeof(height_));
}

ScaleWindow::~ScaleWindow() {
  // @@protoc_insertion_point(destructor:minieye.lane.ScaleWindow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScaleWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScaleWindow::ArenaDtor(void* object) {
  ScaleWindow* _this = reinterpret_cast< ScaleWindow* >(object);
  (void)_this;
}
void ScaleWindow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScaleWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScaleWindow& ScaleWindow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScaleWindow_road_5fseg_2eproto.base);
  return *internal_default_instance();
}


void ScaleWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.lane.ScaleWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scale_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&scale_x_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScaleWindow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float scale_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          scale_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scale_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          scale_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float offset_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          offset_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float offset_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          offset_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScaleWindow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.lane.ScaleWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float scale_x = 1;
  if (!(this->scale_x() <= 0 && this->scale_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_scale_x(), target);
  }

  // float scale_y = 2;
  if (!(this->scale_y() <= 0 && this->scale_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale_y(), target);
  }

  // float offset_x = 3;
  if (!(this->offset_x() <= 0 && this->offset_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_offset_x(), target);
  }

  // float offset_y = 4;
  if (!(this->offset_y() <= 0 && this->offset_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_offset_y(), target);
  }

  // int32 width = 5;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_width(), target);
  }

  // int32 height = 6;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.lane.ScaleWindow)
  return target;
}

size_t ScaleWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.lane.ScaleWindow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float scale_x = 1;
  if (!(this->scale_x() <= 0 && this->scale_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float scale_y = 2;
  if (!(this->scale_y() <= 0 && this->scale_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float offset_x = 3;
  if (!(this->offset_x() <= 0 && this->offset_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float offset_y = 4;
  if (!(this->offset_y() <= 0 && this->offset_y() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 width = 5;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 6;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScaleWindow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.lane.ScaleWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaleWindow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScaleWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.lane.ScaleWindow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.lane.ScaleWindow)
    MergeFrom(*source);
  }
}

void ScaleWindow::MergeFrom(const ScaleWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.lane.ScaleWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.scale_x() <= 0 && from.scale_x() >= 0)) {
    _internal_set_scale_x(from._internal_scale_x());
  }
  if (!(from.scale_y() <= 0 && from.scale_y() >= 0)) {
    _internal_set_scale_y(from._internal_scale_y());
  }
  if (!(from.offset_x() <= 0 && from.offset_x() >= 0)) {
    _internal_set_offset_x(from._internal_offset_x());
  }
  if (!(from.offset_y() <= 0 && from.offset_y() >= 0)) {
    _internal_set_offset_y(from._internal_offset_y());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void ScaleWindow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.lane.ScaleWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleWindow::CopyFrom(const ScaleWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.lane.ScaleWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleWindow::IsInitialized() const {
  return true;
}

void ScaleWindow::InternalSwap(ScaleWindow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScaleWindow, height_)
      + sizeof(ScaleWindow::height_)
      - PROTOBUF_FIELD_OFFSET(ScaleWindow, scale_x_)>(
          reinterpret_cast<char*>(&scale_x_),
          reinterpret_cast<char*>(&other->scale_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScaleWindow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SegMask::InitAsDefaultInstance() {
  ::minieye::lane::_SegMask_default_instance_._instance.get_mutable()->seg_info_ = const_cast< ::minieye::lane::ScaleWindow*>(
      ::minieye::lane::ScaleWindow::internal_default_instance());
}
class SegMask::_Internal {
 public:
  static const ::minieye::lane::ScaleWindow& seg_info(const SegMask* msg);
};

const ::minieye::lane::ScaleWindow&
SegMask::_Internal::seg_info(const SegMask* msg) {
  return *msg->seg_info_;
}
SegMask::SegMask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.lane.SegMask)
}
SegMask::SegMask(const SegMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seg_supplement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_seg_supplement().empty()) {
    seg_supplement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_seg_supplement(),
      GetArena());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  if (from._internal_has_seg_info()) {
    seg_info_ = new ::minieye::lane::ScaleWindow(*from.seg_info_);
  } else {
    seg_info_ = nullptr;
  }
  ::memcpy(&mask_, &from.mask_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&mask_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:minieye.lane.SegMask)
}

void SegMask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SegMask_road_5fseg_2eproto.base);
  seg_supplement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seg_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&seg_info_)) + sizeof(data_type_));
}

SegMask::~SegMask() {
  // @@protoc_insertion_point(destructor:minieye.lane.SegMask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SegMask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  seg_supplement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete seg_info_;
}

void SegMask::ArenaDtor(void* object) {
  SegMask* _this = reinterpret_cast< SegMask* >(object);
  (void)_this;
}
void SegMask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SegMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegMask& SegMask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegMask_road_5fseg_2eproto.base);
  return *internal_default_instance();
}


void SegMask::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.lane.SegMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seg_supplement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && seg_info_ != nullptr) {
    delete seg_info_;
  }
  seg_info_ = nullptr;
  ::memset(&mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&mask_)) + sizeof(data_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minieye.lane.ScaleWindow seg_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_seg_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes seg_supplement = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_seg_supplement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minieye.lane.SegMask.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 data_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 buff_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          buff_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegMask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.lane.SegMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mask = 1;
  if (this->mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mask(), target);
  }

  // .minieye.lane.ScaleWindow seg_info = 2;
  if (this->has_seg_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::seg_info(this), target, stream);
  }

  // bytes seg_supplement = 3;
  if (this->seg_supplement().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_seg_supplement(), target);
  }

  // string label = 4;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minieye.lane.SegMask.label");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_label(), target);
  }

  // uint64 offset = 5;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_offset(), target);
  }

  // int32 data_type = 6;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_data_type(), target);
  }

  // uint64 buff_size = 7;
  if (this->buff_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_buff_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.lane.SegMask)
  return target;
}

size_t SegMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.lane.SegMask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes seg_supplement = 3;
  if (this->seg_supplement().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_seg_supplement());
  }

  // string label = 4;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // .minieye.lane.ScaleWindow seg_info = 2;
  if (this->has_seg_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *seg_info_);
  }

  // uint64 mask = 1;
  if (this->mask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mask());
  }

  // uint64 offset = 5;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  // uint64 buff_size = 7;
  if (this->buff_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_buff_size());
  }

  // int32 data_type = 6;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegMask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.lane.SegMask)
  GOOGLE_DCHECK_NE(&from, this);
  const SegMask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegMask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.lane.SegMask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.lane.SegMask)
    MergeFrom(*source);
  }
}

void SegMask::MergeFrom(const SegMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.lane.SegMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seg_supplement().size() > 0) {
    _internal_set_seg_supplement(from._internal_seg_supplement());
  }
  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.has_seg_info()) {
    _internal_mutable_seg_info()->::minieye::lane::ScaleWindow::MergeFrom(from._internal_seg_info());
  }
  if (from.mask() != 0) {
    _internal_set_mask(from._internal_mask());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.buff_size() != 0) {
    _internal_set_buff_size(from._internal_buff_size());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
}

void SegMask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.lane.SegMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegMask::CopyFrom(const SegMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.lane.SegMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegMask::IsInitialized() const {
  return true;
}

void SegMask::InternalSwap(SegMask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  seg_supplement_.Swap(&other->seg_supplement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegMask, data_type_)
      + sizeof(SegMask::data_type_)
      - PROTOBUF_FIELD_OFFSET(SegMask, seg_info_)>(
          reinterpret_cast<char*>(&seg_info_),
          reinterpret_cast<char*>(&other->seg_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegMask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneSegResMeta::InitAsDefaultInstance() {
  ::minieye::lane::_LaneSegResMeta_default_instance_._instance.get_mutable()->seg_context_ = const_cast< ::minieye::lane::LaneSegReq*>(
      ::minieye::lane::LaneSegReq::internal_default_instance());
}
class LaneSegResMeta::_Internal {
 public:
  static const ::minieye::lane::LaneSegReq& seg_context(const LaneSegResMeta* msg);
};

const ::minieye::lane::LaneSegReq&
LaneSegResMeta::_Internal::seg_context(const LaneSegResMeta* msg) {
  return *msg->seg_context_;
}
LaneSegResMeta::LaneSegResMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  seg_mask_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minieye.lane.LaneSegResMeta)
}
LaneSegResMeta::LaneSegResMeta(const LaneSegResMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      seg_mask_(from.seg_mask_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_seg_context()) {
    seg_context_ = new ::minieye::lane::LaneSegReq(*from.seg_context_);
  } else {
    seg_context_ = nullptr;
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&shm_index_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(shm_index_));
  // @@protoc_insertion_point(copy_constructor:minieye.lane.LaneSegResMeta)
}

void LaneSegResMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneSegResMeta_road_5fseg_2eproto.base);
  ::memset(&seg_context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shm_index_) -
      reinterpret_cast<char*>(&seg_context_)) + sizeof(shm_index_));
}

LaneSegResMeta::~LaneSegResMeta() {
  // @@protoc_insertion_point(destructor:minieye.lane.LaneSegResMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneSegResMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete seg_context_;
}

void LaneSegResMeta::ArenaDtor(void* object) {
  LaneSegResMeta* _this = reinterpret_cast< LaneSegResMeta* >(object);
  (void)_this;
}
void LaneSegResMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneSegResMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneSegResMeta& LaneSegResMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneSegResMeta_road_5fseg_2eproto.base);
  return *internal_default_instance();
}


void LaneSegResMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:minieye.lane.LaneSegResMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seg_mask_.Clear();
  if (GetArena() == nullptr && seg_context_ != nullptr) {
    delete seg_context_;
  }
  seg_context_ = nullptr;
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shm_index_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(shm_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneSegResMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .minieye.lane.SegMask seg_mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_seg_mask(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .minieye.lane.LaneSegReq seg_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_seg_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 finish_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          finish_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 shm_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          shm_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneSegResMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minieye.lane.LaneSegResMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minieye.lane.SegMask seg_mask = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_seg_mask_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_seg_mask(i), target, stream);
  }

  // .minieye.lane.LaneSegReq seg_context = 2;
  if (this->has_seg_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::seg_context(this), target, stream);
  }

  // uint64 start_time = 3;
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_start_time(), target);
  }

  // uint64 finish_time = 4;
  if (this->finish_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_finish_time(), target);
  }

  // uint64 shm_index = 5;
  if (this->shm_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_shm_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minieye.lane.LaneSegResMeta)
  return target;
}

size_t LaneSegResMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minieye.lane.LaneSegResMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minieye.lane.SegMask seg_mask = 1;
  total_size += 1UL * this->_internal_seg_mask_size();
  for (const auto& msg : this->seg_mask_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .minieye.lane.LaneSegReq seg_context = 2;
  if (this->has_seg_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *seg_context_);
  }

  // uint64 start_time = 3;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_time());
  }

  // uint64 finish_time = 4;
  if (this->finish_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_finish_time());
  }

  // uint64 shm_index = 5;
  if (this->shm_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_shm_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneSegResMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minieye.lane.LaneSegResMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSegResMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneSegResMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minieye.lane.LaneSegResMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minieye.lane.LaneSegResMeta)
    MergeFrom(*source);
  }
}

void LaneSegResMeta::MergeFrom(const LaneSegResMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minieye.lane.LaneSegResMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seg_mask_.MergeFrom(from.seg_mask_);
  if (from.has_seg_context()) {
    _internal_mutable_seg_context()->::minieye::lane::LaneSegReq::MergeFrom(from._internal_seg_context());
  }
  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.finish_time() != 0) {
    _internal_set_finish_time(from._internal_finish_time());
  }
  if (from.shm_index() != 0) {
    _internal_set_shm_index(from._internal_shm_index());
  }
}

void LaneSegResMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minieye.lane.LaneSegResMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSegResMeta::CopyFrom(const LaneSegResMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minieye.lane.LaneSegResMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegResMeta::IsInitialized() const {
  return true;
}

void LaneSegResMeta::InternalSwap(LaneSegResMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  seg_mask_.InternalSwap(&other->seg_mask_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneSegResMeta, shm_index_)
      + sizeof(LaneSegResMeta::shm_index_)
      - PROTOBUF_FIELD_OFFSET(LaneSegResMeta, seg_context_)>(
          reinterpret_cast<char*>(&seg_context_),
          reinterpret_cast<char*>(&other->seg_context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneSegResMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lane
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minieye::lane::LaneSegReq* Arena::CreateMaybeMessage< ::minieye::lane::LaneSegReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::lane::LaneSegReq >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::lane::ScaleWindow* Arena::CreateMaybeMessage< ::minieye::lane::ScaleWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::lane::ScaleWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::lane::SegMask* Arena::CreateMaybeMessage< ::minieye::lane::SegMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::lane::SegMask >(arena);
}
template<> PROTOBUF_NOINLINE ::minieye::lane::LaneSegResMeta* Arena::CreateMaybeMessage< ::minieye::lane::LaneSegResMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minieye::lane::LaneSegResMeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
