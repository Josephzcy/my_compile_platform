// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avm_calib_ctrl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_avm_5fcalib_5fctrl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_avm_5fcalib_5fctrl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_avm_5fcalib_5fctrl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_avm_5fcalib_5fctrl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_avm_5fcalib_5fctrl_2eproto;
namespace minieye {
class AVMCalibCtrl;
class AVMCalibCtrlDefaultTypeInternal;
extern AVMCalibCtrlDefaultTypeInternal _AVMCalibCtrl_default_instance_;
class AVMCalibCtrl_SignalsEntry_DoNotUse;
class AVMCalibCtrl_SignalsEntry_DoNotUseDefaultTypeInternal;
extern AVMCalibCtrl_SignalsEntry_DoNotUseDefaultTypeInternal _AVMCalibCtrl_SignalsEntry_DoNotUse_default_instance_;
class AvmCalibState;
class AvmCalibStateDefaultTypeInternal;
extern AvmCalibStateDefaultTypeInternal _AvmCalibState_default_instance_;
class AvmCalibState_StatesEntry_DoNotUse;
class AvmCalibState_StatesEntry_DoNotUseDefaultTypeInternal;
extern AvmCalibState_StatesEntry_DoNotUseDefaultTypeInternal _AvmCalibState_StatesEntry_DoNotUse_default_instance_;
class AvmCameraParams;
class AvmCameraParamsDefaultTypeInternal;
extern AvmCameraParamsDefaultTypeInternal _AvmCameraParams_default_instance_;
class AvmCameraParams_SignalsEntry_DoNotUse;
class AvmCameraParams_SignalsEntry_DoNotUseDefaultTypeInternal;
extern AvmCameraParams_SignalsEntry_DoNotUseDefaultTypeInternal _AvmCameraParams_SignalsEntry_DoNotUse_default_instance_;
}  // namespace minieye
PROTOBUF_NAMESPACE_OPEN
template<> ::minieye::AVMCalibCtrl* Arena::CreateMaybeMessage<::minieye::AVMCalibCtrl>(Arena*);
template<> ::minieye::AVMCalibCtrl_SignalsEntry_DoNotUse* Arena::CreateMaybeMessage<::minieye::AVMCalibCtrl_SignalsEntry_DoNotUse>(Arena*);
template<> ::minieye::AvmCalibState* Arena::CreateMaybeMessage<::minieye::AvmCalibState>(Arena*);
template<> ::minieye::AvmCalibState_StatesEntry_DoNotUse* Arena::CreateMaybeMessage<::minieye::AvmCalibState_StatesEntry_DoNotUse>(Arena*);
template<> ::minieye::AvmCameraParams* Arena::CreateMaybeMessage<::minieye::AvmCameraParams>(Arena*);
template<> ::minieye::AvmCameraParams_SignalsEntry_DoNotUse* Arena::CreateMaybeMessage<::minieye::AvmCameraParams_SignalsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minieye {

enum AVMCalibCtrl_CalibCtrl : int {
  AVMCalibCtrl_CalibCtrl_START_AUTO_CALIB = 0,
  AVMCalibCtrl_CalibCtrl_START_MANUAL_CALIB = 1,
  AVMCalibCtrl_CalibCtrl_STOP_CALIB = 2,
  AVMCalibCtrl_CalibCtrl_START_AUTO_SERVICE_CALIB = 3,
  AVMCalibCtrl_CalibCtrl_AVMCalibCtrl_CalibCtrl_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AVMCalibCtrl_CalibCtrl_AVMCalibCtrl_CalibCtrl_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AVMCalibCtrl_CalibCtrl_IsValid(int value);
constexpr AVMCalibCtrl_CalibCtrl AVMCalibCtrl_CalibCtrl_CalibCtrl_MIN = AVMCalibCtrl_CalibCtrl_START_AUTO_CALIB;
constexpr AVMCalibCtrl_CalibCtrl AVMCalibCtrl_CalibCtrl_CalibCtrl_MAX = AVMCalibCtrl_CalibCtrl_START_AUTO_SERVICE_CALIB;
constexpr int AVMCalibCtrl_CalibCtrl_CalibCtrl_ARRAYSIZE = AVMCalibCtrl_CalibCtrl_CalibCtrl_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AVMCalibCtrl_CalibCtrl_descriptor();
template<typename T>
inline const std::string& AVMCalibCtrl_CalibCtrl_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AVMCalibCtrl_CalibCtrl>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AVMCalibCtrl_CalibCtrl_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AVMCalibCtrl_CalibCtrl_descriptor(), enum_t_value);
}
inline bool AVMCalibCtrl_CalibCtrl_Parse(
    const std::string& name, AVMCalibCtrl_CalibCtrl* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AVMCalibCtrl_CalibCtrl>(
    AVMCalibCtrl_CalibCtrl_descriptor(), name, value);
}
enum AvmCalibState_CalibState : int {
  AvmCalibState_CalibState_kSuccess = 0,
  AvmCalibState_CalibState_kReadyToCalib = 1,
  AvmCalibState_CalibState_kCalibrating = 2,
  AvmCalibState_CalibState_kFailure = 3,
  AvmCalibState_CalibState_kErrUnKnown = 4,
  AvmCalibState_CalibState_kErrTimeOutGettingImage = 5,
  AvmCalibState_CalibState_kErrLoadConfig = 6,
  AvmCalibState_CalibState_kErrCornerDetection = 7,
  AvmCalibState_CalibState_kErrSaveCalibFile = 8,
  AvmCalibState_CalibState_kErrAbnormalExtrins = 9,
  AvmCalibState_CalibState_AvmCalibState_CalibState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AvmCalibState_CalibState_AvmCalibState_CalibState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AvmCalibState_CalibState_IsValid(int value);
constexpr AvmCalibState_CalibState AvmCalibState_CalibState_CalibState_MIN = AvmCalibState_CalibState_kSuccess;
constexpr AvmCalibState_CalibState AvmCalibState_CalibState_CalibState_MAX = AvmCalibState_CalibState_kErrAbnormalExtrins;
constexpr int AvmCalibState_CalibState_CalibState_ARRAYSIZE = AvmCalibState_CalibState_CalibState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AvmCalibState_CalibState_descriptor();
template<typename T>
inline const std::string& AvmCalibState_CalibState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AvmCalibState_CalibState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AvmCalibState_CalibState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AvmCalibState_CalibState_descriptor(), enum_t_value);
}
inline bool AvmCalibState_CalibState_Parse(
    const std::string& name, AvmCalibState_CalibState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AvmCalibState_CalibState>(
    AvmCalibState_CalibState_descriptor(), name, value);
}
enum AvmCalibState_CalibErrCode : int {
  AvmCalibState_CalibErrCode_kNoError = 0,
  AvmCalibState_CalibErrCode_kErrUnKnownReason = 1,
  AvmCalibState_CalibErrCode_kErrGetImageTimeout = 2,
  AvmCalibState_CalibErrCode_kErrParaLoadFail = 3,
  AvmCalibState_CalibErrCode_kErrFrontCornerDetectFail = 4,
  AvmCalibState_CalibErrCode_kErrRearCornerDetectFail = 5,
  AvmCalibState_CalibErrCode_kErrLeftCornerDetectFail = 6,
  AvmCalibState_CalibErrCode_kErrRightCornerDetectFail = 7,
  AvmCalibState_CalibErrCode_kErrFrontCamFileWriteFail = 8,
  AvmCalibState_CalibErrCode_kErrRearCamFileWriteFail = 9,
  AvmCalibState_CalibErrCode_kErrLeftCamFileWriteFail = 10,
  AvmCalibState_CalibErrCode_kErrRightCamFileWriteFail = 11,
  AvmCalibState_CalibErrCode_kErrFrontCamParaError = 12,
  AvmCalibState_CalibErrCode_kErrRearCamParaError = 13,
  AvmCalibState_CalibErrCode_kErrLeftCamParaError = 14,
  AvmCalibState_CalibErrCode_kErrRightCamParaError = 15,
  AvmCalibState_CalibErrCode_AvmCalibState_CalibErrCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AvmCalibState_CalibErrCode_AvmCalibState_CalibErrCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AvmCalibState_CalibErrCode_IsValid(int value);
constexpr AvmCalibState_CalibErrCode AvmCalibState_CalibErrCode_CalibErrCode_MIN = AvmCalibState_CalibErrCode_kNoError;
constexpr AvmCalibState_CalibErrCode AvmCalibState_CalibErrCode_CalibErrCode_MAX = AvmCalibState_CalibErrCode_kErrRightCamParaError;
constexpr int AvmCalibState_CalibErrCode_CalibErrCode_ARRAYSIZE = AvmCalibState_CalibErrCode_CalibErrCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AvmCalibState_CalibErrCode_descriptor();
template<typename T>
inline const std::string& AvmCalibState_CalibErrCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AvmCalibState_CalibErrCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AvmCalibState_CalibErrCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AvmCalibState_CalibErrCode_descriptor(), enum_t_value);
}
inline bool AvmCalibState_CalibErrCode_Parse(
    const std::string& name, AvmCalibState_CalibErrCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AvmCalibState_CalibErrCode>(
    AvmCalibState_CalibErrCode_descriptor(), name, value);
}
enum AvmCameraParams_AvmCameraParamState : int {
  AvmCameraParams_AvmCameraParamState_kSuccess = 0,
  AvmCameraParams_AvmCameraParamState_kFailure = 1,
  AvmCameraParams_AvmCameraParamState_AvmCameraParams_AvmCameraParamState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AvmCameraParams_AvmCameraParamState_AvmCameraParams_AvmCameraParamState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AvmCameraParams_AvmCameraParamState_IsValid(int value);
constexpr AvmCameraParams_AvmCameraParamState AvmCameraParams_AvmCameraParamState_AvmCameraParamState_MIN = AvmCameraParams_AvmCameraParamState_kSuccess;
constexpr AvmCameraParams_AvmCameraParamState AvmCameraParams_AvmCameraParamState_AvmCameraParamState_MAX = AvmCameraParams_AvmCameraParamState_kFailure;
constexpr int AvmCameraParams_AvmCameraParamState_AvmCameraParamState_ARRAYSIZE = AvmCameraParams_AvmCameraParamState_AvmCameraParamState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AvmCameraParams_AvmCameraParamState_descriptor();
template<typename T>
inline const std::string& AvmCameraParams_AvmCameraParamState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AvmCameraParams_AvmCameraParamState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AvmCameraParams_AvmCameraParamState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AvmCameraParams_AvmCameraParamState_descriptor(), enum_t_value);
}
inline bool AvmCameraParams_AvmCameraParamState_Parse(
    const std::string& name, AvmCameraParams_AvmCameraParamState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AvmCameraParams_AvmCameraParamState>(
    AvmCameraParams_AvmCameraParamState_descriptor(), name, value);
}
// ===================================================================

class AVMCalibCtrl_SignalsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AVMCalibCtrl_SignalsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AVMCalibCtrl_SignalsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  AVMCalibCtrl_SignalsEntry_DoNotUse();
  AVMCalibCtrl_SignalsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AVMCalibCtrl_SignalsEntry_DoNotUse& other);
  static const AVMCalibCtrl_SignalsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AVMCalibCtrl_SignalsEntry_DoNotUse*>(&_AVMCalibCtrl_SignalsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm_5fcalib_5fctrl_2eproto);
    return ::descriptor_table_avm_5fcalib_5fctrl_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class AVMCalibCtrl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.AVMCalibCtrl) */ {
 public:
  inline AVMCalibCtrl() : AVMCalibCtrl(nullptr) {};
  virtual ~AVMCalibCtrl();

  AVMCalibCtrl(const AVMCalibCtrl& from);
  AVMCalibCtrl(AVMCalibCtrl&& from) noexcept
    : AVMCalibCtrl() {
    *this = ::std::move(from);
  }

  inline AVMCalibCtrl& operator=(const AVMCalibCtrl& from) {
    CopyFrom(from);
    return *this;
  }
  inline AVMCalibCtrl& operator=(AVMCalibCtrl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AVMCalibCtrl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AVMCalibCtrl* internal_default_instance() {
    return reinterpret_cast<const AVMCalibCtrl*>(
               &_AVMCalibCtrl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AVMCalibCtrl& a, AVMCalibCtrl& b) {
    a.Swap(&b);
  }
  inline void Swap(AVMCalibCtrl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AVMCalibCtrl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AVMCalibCtrl* New() const final {
    return CreateMaybeMessage<AVMCalibCtrl>(nullptr);
  }

  AVMCalibCtrl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AVMCalibCtrl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AVMCalibCtrl& from);
  void MergeFrom(const AVMCalibCtrl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AVMCalibCtrl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.AVMCalibCtrl";
  }
  protected:
  explicit AVMCalibCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm_5fcalib_5fctrl_2eproto);
    return ::descriptor_table_avm_5fcalib_5fctrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef AVMCalibCtrl_CalibCtrl CalibCtrl;
  static constexpr CalibCtrl START_AUTO_CALIB =
    AVMCalibCtrl_CalibCtrl_START_AUTO_CALIB;
  static constexpr CalibCtrl START_MANUAL_CALIB =
    AVMCalibCtrl_CalibCtrl_START_MANUAL_CALIB;
  static constexpr CalibCtrl STOP_CALIB =
    AVMCalibCtrl_CalibCtrl_STOP_CALIB;
  static constexpr CalibCtrl START_AUTO_SERVICE_CALIB =
    AVMCalibCtrl_CalibCtrl_START_AUTO_SERVICE_CALIB;
  static inline bool CalibCtrl_IsValid(int value) {
    return AVMCalibCtrl_CalibCtrl_IsValid(value);
  }
  static constexpr CalibCtrl CalibCtrl_MIN =
    AVMCalibCtrl_CalibCtrl_CalibCtrl_MIN;
  static constexpr CalibCtrl CalibCtrl_MAX =
    AVMCalibCtrl_CalibCtrl_CalibCtrl_MAX;
  static constexpr int CalibCtrl_ARRAYSIZE =
    AVMCalibCtrl_CalibCtrl_CalibCtrl_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CalibCtrl_descriptor() {
    return AVMCalibCtrl_CalibCtrl_descriptor();
  }
  template<typename T>
  static inline const std::string& CalibCtrl_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CalibCtrl>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CalibCtrl_Name.");
    return AVMCalibCtrl_CalibCtrl_Name(enum_t_value);
  }
  static inline bool CalibCtrl_Parse(const std::string& name,
      CalibCtrl* value) {
    return AVMCalibCtrl_CalibCtrl_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignalsFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // map<int32, float> signals = 1;
  int signals_size() const;
  private:
  int _internal_signals_size() const;
  public:
  void clear_signals();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
      _internal_signals() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
      _internal_mutable_signals();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
      signals() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
      mutable_signals();

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint64 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.AVMCalibCtrl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AVMCalibCtrl_SignalsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > signals_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tick_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avm_5fcalib_5fctrl_2eproto;
};
// -------------------------------------------------------------------

class AvmCalibState_StatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AvmCalibState_StatesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AvmCalibState_StatesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  AvmCalibState_StatesEntry_DoNotUse();
  AvmCalibState_StatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AvmCalibState_StatesEntry_DoNotUse& other);
  static const AvmCalibState_StatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AvmCalibState_StatesEntry_DoNotUse*>(&_AvmCalibState_StatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm_5fcalib_5fctrl_2eproto);
    return ::descriptor_table_avm_5fcalib_5fctrl_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class AvmCalibState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.AvmCalibState) */ {
 public:
  inline AvmCalibState() : AvmCalibState(nullptr) {};
  virtual ~AvmCalibState();

  AvmCalibState(const AvmCalibState& from);
  AvmCalibState(AvmCalibState&& from) noexcept
    : AvmCalibState() {
    *this = ::std::move(from);
  }

  inline AvmCalibState& operator=(const AvmCalibState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvmCalibState& operator=(AvmCalibState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AvmCalibState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvmCalibState* internal_default_instance() {
    return reinterpret_cast<const AvmCalibState*>(
               &_AvmCalibState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AvmCalibState& a, AvmCalibState& b) {
    a.Swap(&b);
  }
  inline void Swap(AvmCalibState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvmCalibState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AvmCalibState* New() const final {
    return CreateMaybeMessage<AvmCalibState>(nullptr);
  }

  AvmCalibState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AvmCalibState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AvmCalibState& from);
  void MergeFrom(const AvmCalibState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvmCalibState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.AvmCalibState";
  }
  protected:
  explicit AvmCalibState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm_5fcalib_5fctrl_2eproto);
    return ::descriptor_table_avm_5fcalib_5fctrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef AvmCalibState_CalibState CalibState;
  static constexpr CalibState kSuccess =
    AvmCalibState_CalibState_kSuccess;
  static constexpr CalibState kReadyToCalib =
    AvmCalibState_CalibState_kReadyToCalib;
  static constexpr CalibState kCalibrating =
    AvmCalibState_CalibState_kCalibrating;
  static constexpr CalibState kFailure =
    AvmCalibState_CalibState_kFailure;
  static constexpr CalibState kErrUnKnown =
    AvmCalibState_CalibState_kErrUnKnown;
  static constexpr CalibState kErrTimeOutGettingImage =
    AvmCalibState_CalibState_kErrTimeOutGettingImage;
  static constexpr CalibState kErrLoadConfig =
    AvmCalibState_CalibState_kErrLoadConfig;
  static constexpr CalibState kErrCornerDetection =
    AvmCalibState_CalibState_kErrCornerDetection;
  static constexpr CalibState kErrSaveCalibFile =
    AvmCalibState_CalibState_kErrSaveCalibFile;
  static constexpr CalibState kErrAbnormalExtrins =
    AvmCalibState_CalibState_kErrAbnormalExtrins;
  static inline bool CalibState_IsValid(int value) {
    return AvmCalibState_CalibState_IsValid(value);
  }
  static constexpr CalibState CalibState_MIN =
    AvmCalibState_CalibState_CalibState_MIN;
  static constexpr CalibState CalibState_MAX =
    AvmCalibState_CalibState_CalibState_MAX;
  static constexpr int CalibState_ARRAYSIZE =
    AvmCalibState_CalibState_CalibState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CalibState_descriptor() {
    return AvmCalibState_CalibState_descriptor();
  }
  template<typename T>
  static inline const std::string& CalibState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CalibState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CalibState_Name.");
    return AvmCalibState_CalibState_Name(enum_t_value);
  }
  static inline bool CalibState_Parse(const std::string& name,
      CalibState* value) {
    return AvmCalibState_CalibState_Parse(name, value);
  }

  typedef AvmCalibState_CalibErrCode CalibErrCode;
  static constexpr CalibErrCode kNoError =
    AvmCalibState_CalibErrCode_kNoError;
  static constexpr CalibErrCode kErrUnKnownReason =
    AvmCalibState_CalibErrCode_kErrUnKnownReason;
  static constexpr CalibErrCode kErrGetImageTimeout =
    AvmCalibState_CalibErrCode_kErrGetImageTimeout;
  static constexpr CalibErrCode kErrParaLoadFail =
    AvmCalibState_CalibErrCode_kErrParaLoadFail;
  static constexpr CalibErrCode kErrFrontCornerDetectFail =
    AvmCalibState_CalibErrCode_kErrFrontCornerDetectFail;
  static constexpr CalibErrCode kErrRearCornerDetectFail =
    AvmCalibState_CalibErrCode_kErrRearCornerDetectFail;
  static constexpr CalibErrCode kErrLeftCornerDetectFail =
    AvmCalibState_CalibErrCode_kErrLeftCornerDetectFail;
  static constexpr CalibErrCode kErrRightCornerDetectFail =
    AvmCalibState_CalibErrCode_kErrRightCornerDetectFail;
  static constexpr CalibErrCode kErrFrontCamFileWriteFail =
    AvmCalibState_CalibErrCode_kErrFrontCamFileWriteFail;
  static constexpr CalibErrCode kErrRearCamFileWriteFail =
    AvmCalibState_CalibErrCode_kErrRearCamFileWriteFail;
  static constexpr CalibErrCode kErrLeftCamFileWriteFail =
    AvmCalibState_CalibErrCode_kErrLeftCamFileWriteFail;
  static constexpr CalibErrCode kErrRightCamFileWriteFail =
    AvmCalibState_CalibErrCode_kErrRightCamFileWriteFail;
  static constexpr CalibErrCode kErrFrontCamParaError =
    AvmCalibState_CalibErrCode_kErrFrontCamParaError;
  static constexpr CalibErrCode kErrRearCamParaError =
    AvmCalibState_CalibErrCode_kErrRearCamParaError;
  static constexpr CalibErrCode kErrLeftCamParaError =
    AvmCalibState_CalibErrCode_kErrLeftCamParaError;
  static constexpr CalibErrCode kErrRightCamParaError =
    AvmCalibState_CalibErrCode_kErrRightCamParaError;
  static inline bool CalibErrCode_IsValid(int value) {
    return AvmCalibState_CalibErrCode_IsValid(value);
  }
  static constexpr CalibErrCode CalibErrCode_MIN =
    AvmCalibState_CalibErrCode_CalibErrCode_MIN;
  static constexpr CalibErrCode CalibErrCode_MAX =
    AvmCalibState_CalibErrCode_CalibErrCode_MAX;
  static constexpr int CalibErrCode_ARRAYSIZE =
    AvmCalibState_CalibErrCode_CalibErrCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CalibErrCode_descriptor() {
    return AvmCalibState_CalibErrCode_descriptor();
  }
  template<typename T>
  static inline const std::string& CalibErrCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CalibErrCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CalibErrCode_Name.");
    return AvmCalibState_CalibErrCode_Name(enum_t_value);
  }
  static inline bool CalibErrCode_Parse(const std::string& name,
      CalibErrCode* value) {
    return AvmCalibState_CalibErrCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
    kErrCodeFieldNumber = 2,
  };
  // map<int32, int32> states = 1;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_states();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      states() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_states();

  // int32 err_code = 2;
  void clear_err_code();
  ::PROTOBUF_NAMESPACE_ID::int32 err_code() const;
  void set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_err_code() const;
  void _internal_set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minieye.AvmCalibState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AvmCalibState_StatesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > states_;
  ::PROTOBUF_NAMESPACE_ID::int32 err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avm_5fcalib_5fctrl_2eproto;
};
// -------------------------------------------------------------------

class AvmCameraParams_SignalsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AvmCameraParams_SignalsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AvmCameraParams_SignalsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  AvmCameraParams_SignalsEntry_DoNotUse();
  AvmCameraParams_SignalsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AvmCameraParams_SignalsEntry_DoNotUse& other);
  static const AvmCameraParams_SignalsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AvmCameraParams_SignalsEntry_DoNotUse*>(&_AvmCameraParams_SignalsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm_5fcalib_5fctrl_2eproto);
    return ::descriptor_table_avm_5fcalib_5fctrl_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class AvmCameraParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minieye.AvmCameraParams) */ {
 public:
  inline AvmCameraParams() : AvmCameraParams(nullptr) {};
  virtual ~AvmCameraParams();

  AvmCameraParams(const AvmCameraParams& from);
  AvmCameraParams(AvmCameraParams&& from) noexcept
    : AvmCameraParams() {
    *this = ::std::move(from);
  }

  inline AvmCameraParams& operator=(const AvmCameraParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvmCameraParams& operator=(AvmCameraParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AvmCameraParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvmCameraParams* internal_default_instance() {
    return reinterpret_cast<const AvmCameraParams*>(
               &_AvmCameraParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AvmCameraParams& a, AvmCameraParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AvmCameraParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvmCameraParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AvmCameraParams* New() const final {
    return CreateMaybeMessage<AvmCameraParams>(nullptr);
  }

  AvmCameraParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AvmCameraParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AvmCameraParams& from);
  void MergeFrom(const AvmCameraParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvmCameraParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minieye.AvmCameraParams";
  }
  protected:
  explicit AvmCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm_5fcalib_5fctrl_2eproto);
    return ::descriptor_table_avm_5fcalib_5fctrl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef AvmCameraParams_AvmCameraParamState AvmCameraParamState;
  static constexpr AvmCameraParamState kSuccess =
    AvmCameraParams_AvmCameraParamState_kSuccess;
  static constexpr AvmCameraParamState kFailure =
    AvmCameraParams_AvmCameraParamState_kFailure;
  static inline bool AvmCameraParamState_IsValid(int value) {
    return AvmCameraParams_AvmCameraParamState_IsValid(value);
  }
  static constexpr AvmCameraParamState AvmCameraParamState_MIN =
    AvmCameraParams_AvmCameraParamState_AvmCameraParamState_MIN;
  static constexpr AvmCameraParamState AvmCameraParamState_MAX =
    AvmCameraParams_AvmCameraParamState_AvmCameraParamState_MAX;
  static constexpr int AvmCameraParamState_ARRAYSIZE =
    AvmCameraParams_AvmCameraParamState_AvmCameraParamState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AvmCameraParamState_descriptor() {
    return AvmCameraParams_AvmCameraParamState_descriptor();
  }
  template<typename T>
  static inline const std::string& AvmCameraParamState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AvmCameraParamState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AvmCameraParamState_Name.");
    return AvmCameraParams_AvmCameraParamState_Name(enum_t_value);
  }
  static inline bool AvmCameraParamState_Parse(const std::string& name,
      AvmCameraParamState* value) {
    return AvmCameraParams_AvmCameraParamState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignalsFieldNumber = 1,
  };
  // map<int32, int32> signals = 1;
  int signals_size() const;
  private:
  int _internal_signals_size() const;
  public:
  void clear_signals();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_signals() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_signals();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      signals() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_signals();

  // @@protoc_insertion_point(class_scope:minieye.AvmCameraParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AvmCameraParams_SignalsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > signals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avm_5fcalib_5fctrl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AVMCalibCtrl

// map<int32, float> signals = 1;
inline int AVMCalibCtrl::_internal_signals_size() const {
  return signals_.size();
}
inline int AVMCalibCtrl::signals_size() const {
  return _internal_signals_size();
}
inline void AVMCalibCtrl::clear_signals() {
  signals_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
AVMCalibCtrl::_internal_signals() const {
  return signals_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
AVMCalibCtrl::signals() const {
  // @@protoc_insertion_point(field_map:minieye.AVMCalibCtrl.signals)
  return _internal_signals();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
AVMCalibCtrl::_internal_mutable_signals() {
  return signals_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
AVMCalibCtrl::mutable_signals() {
  // @@protoc_insertion_point(field_mutable_map:minieye.AVMCalibCtrl.signals)
  return _internal_mutable_signals();
}

// uint64 timestamp = 2;
inline void AVMCalibCtrl::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AVMCalibCtrl::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AVMCalibCtrl::timestamp() const {
  // @@protoc_insertion_point(field_get:minieye.AVMCalibCtrl.timestamp)
  return _internal_timestamp();
}
inline void AVMCalibCtrl::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void AVMCalibCtrl::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:minieye.AVMCalibCtrl.timestamp)
}

// uint64 tick = 3;
inline void AVMCalibCtrl::clear_tick() {
  tick_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AVMCalibCtrl::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AVMCalibCtrl::tick() const {
  // @@protoc_insertion_point(field_get:minieye.AVMCalibCtrl.tick)
  return _internal_tick();
}
inline void AVMCalibCtrl::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tick_ = value;
}
inline void AVMCalibCtrl::set_tick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:minieye.AVMCalibCtrl.tick)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AvmCalibState

// map<int32, int32> states = 1;
inline int AvmCalibState::_internal_states_size() const {
  return states_.size();
}
inline int AvmCalibState::states_size() const {
  return _internal_states_size();
}
inline void AvmCalibState::clear_states() {
  states_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
AvmCalibState::_internal_states() const {
  return states_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
AvmCalibState::states() const {
  // @@protoc_insertion_point(field_map:minieye.AvmCalibState.states)
  return _internal_states();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
AvmCalibState::_internal_mutable_states() {
  return states_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
AvmCalibState::mutable_states() {
  // @@protoc_insertion_point(field_mutable_map:minieye.AvmCalibState.states)
  return _internal_mutable_states();
}

// int32 err_code = 2;
inline void AvmCalibState::clear_err_code() {
  err_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvmCalibState::_internal_err_code() const {
  return err_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvmCalibState::err_code() const {
  // @@protoc_insertion_point(field_get:minieye.AvmCalibState.err_code)
  return _internal_err_code();
}
inline void AvmCalibState::_internal_set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  err_code_ = value;
}
inline void AvmCalibState::set_err_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:minieye.AvmCalibState.err_code)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AvmCameraParams

// map<int32, int32> signals = 1;
inline int AvmCameraParams::_internal_signals_size() const {
  return signals_.size();
}
inline int AvmCameraParams::signals_size() const {
  return _internal_signals_size();
}
inline void AvmCameraParams::clear_signals() {
  signals_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
AvmCameraParams::_internal_signals() const {
  return signals_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
AvmCameraParams::signals() const {
  // @@protoc_insertion_point(field_map:minieye.AvmCameraParams.signals)
  return _internal_signals();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
AvmCameraParams::_internal_mutable_signals() {
  return signals_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
AvmCameraParams::mutable_signals() {
  // @@protoc_insertion_point(field_mutable_map:minieye.AvmCameraParams.signals)
  return _internal_mutable_signals();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace minieye

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minieye::AVMCalibCtrl_CalibCtrl> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::AVMCalibCtrl_CalibCtrl>() {
  return ::minieye::AVMCalibCtrl_CalibCtrl_descriptor();
}
template <> struct is_proto_enum< ::minieye::AvmCalibState_CalibState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::AvmCalibState_CalibState>() {
  return ::minieye::AvmCalibState_CalibState_descriptor();
}
template <> struct is_proto_enum< ::minieye::AvmCalibState_CalibErrCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::AvmCalibState_CalibErrCode>() {
  return ::minieye::AvmCalibState_CalibErrCode_descriptor();
}
template <> struct is_proto_enum< ::minieye::AvmCameraParams_AvmCameraParamState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minieye::AvmCameraParams_AvmCameraParamState>() {
  return ::minieye::AvmCameraParams_AvmCameraParamState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_avm_5fcalib_5fctrl_2eproto
